public class com.android.server.IpSecService extends android.net.IIpSecService$Stub
{
    private static final int[] ADDRESS_FAMILIES;
    private static final boolean DBG;
    static final int FREE_PORT_MIN;
    private static final java.net.InetAddress INADDR_ANY;
    static final int MAX_PORT_BIND_ATTEMPTS;
    private static final int NETD_FETCH_TIMEOUT_MS;
    private static final java.lang.String NETD_SERVICE_NAME;
    static final int PORT_MAX;
    private static final java.lang.String TAG;
    private static final java.lang.String TUNNEL_OP;
    public static final int TUN_INTF_NETID_RANGE;
    static final int TUN_INTF_NETID_START;
    private final android.content.Context mContext;
    private final android.os.INetworkManagementService mNetworkManager;
    private int mNextResourceId;
    private int mNextTunnelNetIdIndex;
    private final com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig;
    private final android.util.SparseBooleanArray mTunnelNetIds;
    final com.android.server.IpSecService$UidFdTagger mUidFdTagger;
    final com.android.server.IpSecService$UserResourceTracker mUserResourceTracker;

    static void <clinit>()
    {
        boolean $z0;
        int[] $r1;
        int $i0, $i1;
        byte[] $r2;
        java.net.InetAddress $r3;
        java.lang.Throwable $r4;
        java.lang.RuntimeException $r5;

        <com.android.server.IpSecService: int TUN_INTF_NETID_START> = 64512;

        <com.android.server.IpSecService: int TUN_INTF_NETID_RANGE> = 1024;

        <com.android.server.IpSecService: java.lang.String TUNNEL_OP> = "android:manage_ipsec_tunnels";

        <com.android.server.IpSecService: java.lang.String TAG> = "IpSecService";

        <com.android.server.IpSecService: int PORT_MAX> = 65535;

        <com.android.server.IpSecService: java.lang.String NETD_SERVICE_NAME> = "netd";

        <com.android.server.IpSecService: int NETD_FETCH_TIMEOUT_MS> = 5000;

        <com.android.server.IpSecService: int MAX_PORT_BIND_ATTEMPTS> = 10;

        <com.android.server.IpSecService: int FREE_PORT_MIN> = 1024;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("IpSecService", 3);

        <com.android.server.IpSecService: boolean DBG> = $z0;

        $r1 = newarray (int)[2];

        $i0 = <android.system.OsConstants: int AF_INET>;

        $r1[0] = $i0;

        $i1 = <android.system.OsConstants: int AF_INET6>;

        $r1[1] = $i1;

        <com.android.server.IpSecService: int[] ADDRESS_FAMILIES> = $r1;

     label1:
        $r2 = newarray (byte)[4];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r2);

        <com.android.server.IpSecService: java.net.InetAddress INADDR_ANY> = $r3;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        return;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    private void <init>(android.content.Context, android.os.INetworkManagementService)
    {
        com.android.server.IpSecService r0;
        android.content.Context r1;
        android.os.INetworkManagementService r2;
        com.android.server.IpSecService$IpSecServiceConfiguration $r3;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        $r3 = <com.android.server.IpSecService$IpSecServiceConfiguration: com.android.server.IpSecService$IpSecServiceConfiguration GETSRVINSTANCE>;

        specialinvoke r0.<com.android.server.IpSecService: void <init>(android.content.Context,android.os.INetworkManagementService,com.android.server.IpSecService$IpSecServiceConfiguration)>(r1, r2, $r3);

        return;
    }

    public void <init>(android.content.Context, android.os.INetworkManagementService, com.android.server.IpSecService$IpSecServiceConfiguration)
    {
        com.android.server.IpSecService r0;
        android.content.Context r1;
        android.os.INetworkManagementService r2;
        com.android.server.IpSecService$IpSecServiceConfiguration r3;
        com.android.server.'-$$Lambda$IpSecService$AnqunmSwm_yQvDDEPg-gokhVs5M' $r4;
        com.android.server.IpSecService$UidFdTagger r5;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: com.android.server.IpSecService$IpSecServiceConfiguration;

        $r4 = <com.android.server._$$Lambda$IpSecService$AnqunmSwm_yQvDDEPg_gokhVs5M: com.android.server.'-$$Lambda$IpSecService$AnqunmSwm_yQvDDEPg-gokhVs5M' INSTANCE>;

        r5 = (com.android.server.IpSecService$UidFdTagger) $r4;

        specialinvoke r0.<com.android.server.IpSecService: void <init>(android.content.Context,android.os.INetworkManagementService,com.android.server.IpSecService$IpSecServiceConfiguration,com.android.server.IpSecService$UidFdTagger)>(r1, r2, r3, r5);

        return;
    }

    public void <init>(android.content.Context, android.os.INetworkManagementService, com.android.server.IpSecService$IpSecServiceConfiguration, com.android.server.IpSecService$UidFdTagger)
    {
        com.android.server.IpSecService r0;
        android.content.Context r1;
        android.os.INetworkManagementService r2, $r8;
        com.android.server.IpSecService$IpSecServiceConfiguration r3;
        com.android.server.IpSecService$UidFdTagger r4;
        com.android.server.IpSecService$UserResourceTracker $r5;
        android.util.SparseBooleanArray $r6;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: com.android.server.IpSecService$IpSecServiceConfiguration;

        r4 := @parameter3: com.android.server.IpSecService$UidFdTagger;

        specialinvoke r0.<android.net.IIpSecService$Stub: void <init>()>();

        r0.<com.android.server.IpSecService: int mNextResourceId> = 1;

        $r5 = new com.android.server.IpSecService$UserResourceTracker;

        specialinvoke $r5.<com.android.server.IpSecService$UserResourceTracker: void <init>()>();

        r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker> = $r5;

        $r6 = new android.util.SparseBooleanArray;

        specialinvoke $r6.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.IpSecService: android.util.SparseBooleanArray mTunnelNetIds> = $r6;

        r0.<com.android.server.IpSecService: int mNextTunnelNetIdIndex> = 0;

        r0.<com.android.server.IpSecService: android.content.Context mContext> = r1;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r8 = (android.os.INetworkManagementService) r2;

        r0.<com.android.server.IpSecService: android.os.INetworkManagementService mNetworkManager> = $r8;

        r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig> = r3;

        r0.<com.android.server.IpSecService: com.android.server.IpSecService$UidFdTagger mUidFdTagger> = r4;

        return;
    }

    static com.android.server.IpSecService$IpSecServiceConfiguration access$000(com.android.server.IpSecService)
    {
        com.android.server.IpSecService r0;
        com.android.server.IpSecService$IpSecServiceConfiguration $r1;

        r0 := @parameter0: com.android.server.IpSecService;

        $r1 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        return $r1;
    }

    static int[] access$100()
    {
        int[] $r0;

        $r0 = <com.android.server.IpSecService: int[] ADDRESS_FAMILIES>;

        return $r0;
    }

    private int bindToRandomPort(java.io.FileDescriptor) throws java.io.IOException
    {
        com.android.server.IpSecService r0;
        java.io.FileDescriptor r1, r12;
        int i0, $i1, $i2, $i3, $i5, $i6, i7;
        java.net.InetAddress $r3, $r9;
        java.net.SocketAddress $r4;
        java.net.InetSocketAddress $r5;
        java.lang.String $r8;
        java.lang.Throwable $r10;
        java.io.IOException $r11, r16;
        java.lang.StringBuilder r15;
        android.system.ErrnoException r17, r18;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: java.io.FileDescriptor;

        i7 = 10;

     label1:
        if i7 <= 0 goto label6;

     label2:
        $i3 = <android.system.OsConstants: int AF_INET>;

        $i2 = <android.system.OsConstants: int SOCK_DGRAM>;

        $i1 = <android.system.OsConstants: int IPPROTO_UDP>;

        r12 = staticinvoke <android.system.Os: java.io.FileDescriptor socket(int,int,int)>($i3, $i2, $i1);

        $r3 = <com.android.server.IpSecService: java.net.InetAddress INADDR_ANY>;

        staticinvoke <android.system.Os: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>(r12, $r3, 0);

        $r4 = staticinvoke <android.system.Os: java.net.SocketAddress getsockname(java.io.FileDescriptor)>(r12);

        $r5 = (java.net.InetSocketAddress) $r4;

        i0 = virtualinvoke $r5.<java.net.InetSocketAddress: int getPort()>();

        staticinvoke <android.system.Os: void close(java.io.FileDescriptor)>(r12);

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding to port ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("IpSecService", $r8);

        $r9 = <com.android.server.IpSecService: java.net.InetAddress INADDR_ANY>;

        staticinvoke <android.system.Os: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>(r1, $r9, i0);

     label3:
        return i0;

     label4:
        $r10 := @caughtexception;

        r17 = (android.system.ErrnoException) $r10;

        $i6 = r17.<android.system.ErrnoException: int errno>;

        $i5 = <android.system.OsConstants: int EADDRINUSE>;

        if $i6 != $i5 goto label5;

        i7 = i7 + -1;

        goto label1;

     label5:
        r18 = (android.system.ErrnoException) $r10;

        $r11 = virtualinvoke r18.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r11;

     label6:
        r16 = new java.io.IOException;

        specialinvoke r16.<java.io.IOException: void <init>(java.lang.String)>("Failed 10 attempts to bind to a port");

        throw r16;

        catch android.system.ErrnoException from label2 to label3 with label4;
    }

    private static void checkDirection(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Direction: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return;
    }

    private static void checkInetAddress(java.lang.String)
    {
        java.lang.String r0, $r8;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2, $r7;
        java.net.InetAddress $r3;
        java.lang.StringBuilder $r4;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r0);

        $z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inappropriate wildcard address: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unspecified address");

        throw $r2;
    }

    private void checkIpSecConfig(android.net.IpSecConfig)
    {
        com.android.server.IpSecService r0;
        java.lang.String r1, $r6, $r7, $r8, $r10, $r11, $r19, $r24, $r26, $r33, $r38, r44;
        com.android.server.IpSecService$UserResourceTracker $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        com.android.server.IpSecService$RefcountedResourceArray $r3, $r27;
        com.android.server.IpSecService$IResource $r4;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r5;
        java.lang.IllegalArgumentException $r9, $r18, $r23, $r25, $r32, $r37;
        java.lang.StringBuilder $r12, $r20, $r29, $r34;
        android.net.IpSecConfig r39;
        com.android.server.IpSecService$UserRecord r40;
        com.android.server.IpSecService$SpiRecord r43;

        r0 := @this: com.android.server.IpSecService;

        r39 := @parameter0: android.net.IpSecConfig;

        $r2 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r40 = virtualinvoke $r2.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i0);

        i8 = virtualinvoke r39.<android.net.IpSecConfig: int getEncapType()>();

        if i8 == 0 goto label04;

        if i8 == 1 goto label02;

        if i8 != 2 goto label01;

        goto label02;

     label01:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Encap Type: ");

        $i7 = virtualinvoke r39.<android.net.IpSecConfig: int getEncapType()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r37 = new java.lang.IllegalArgumentException;

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r37;

     label02:
        $r27 = r40.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mEncapSocketRecords>;

        $i6 = virtualinvoke r39.<android.net.IpSecConfig: int getEncapSocketResourceId()>();

        virtualinvoke $r27.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>($i6);

        i9 = virtualinvoke r39.<android.net.IpSecConfig: int getEncapRemotePort()>();

        if i9 <= 0 goto label03;

        if i9 > 65535 goto label03;

        goto label04;

     label03:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid remote UDP port: ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r32 = new java.lang.IllegalArgumentException;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label04:
        virtualinvoke r0.<com.android.server.IpSecService: void validateAlgorithms(android.net.IpSecConfig)>(r39);

        $r3 = r40.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mSpiRecords>;

        $i1 = virtualinvoke r39.<android.net.IpSecConfig: int getSpiResourceId()>();

        $r4 = virtualinvoke $r3.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>($i1);

        r43 = (com.android.server.IpSecService$SpiRecord) $r4;

        $z0 = virtualinvoke r43.<com.android.server.IpSecService$SpiRecord: boolean getOwnedByTransform()>();

        if $z0 != 0 goto label12;

        $r6 = virtualinvoke r39.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

        if $z1 == 0 goto label05;

        $r26 = virtualinvoke r43.<com.android.server.IpSecService$SpiRecord: java.lang.String getDestinationAddress()>();

        virtualinvoke r39.<android.net.IpSecConfig: void setDestinationAddress(java.lang.String)>($r26);

     label05:
        $r7 = virtualinvoke r39.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        $r8 = virtualinvoke r43.<com.android.server.IpSecService$SpiRecord: java.lang.String getDestinationAddress()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label11;

        $r10 = virtualinvoke r39.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        staticinvoke <com.android.server.IpSecService: void checkInetAddress(java.lang.String)>($r10);

        $r11 = virtualinvoke r39.<android.net.IpSecConfig: java.lang.String getSourceAddress()>();

        staticinvoke <com.android.server.IpSecService: void checkInetAddress(java.lang.String)>($r11);

        r44 = virtualinvoke r39.<android.net.IpSecConfig: java.lang.String getSourceAddress()>();

        r1 = virtualinvoke r39.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        i10 = specialinvoke r0.<com.android.server.IpSecService: int getFamily(java.lang.String)>(r44);

        $i2 = specialinvoke r0.<com.android.server.IpSecService: int getFamily(java.lang.String)>(r1);

        if i10 != $i2 goto label10;

        $i3 = virtualinvoke r39.<android.net.IpSecConfig: int getEncapType()>();

        if $i3 == 0 goto label07;

        $i5 = <android.system.OsConstants: int AF_INET>;

        if i10 != $i5 goto label06;

        goto label07;

     label06:
        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("UDP Encapsulation is not supported for this address family");

        throw $r25;

     label07:
        i11 = virtualinvoke r39.<android.net.IpSecConfig: int getMode()>();

        if i11 == 0 goto label09;

        if i11 != 1 goto label08;

        goto label09;

     label08:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid IpSecTransform.mode: ");

        $i4 = virtualinvoke r39.<android.net.IpSecConfig: int getMode()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label09:
        virtualinvoke r39.<android.net.IpSecConfig: void setMarkValue(int)>(0);

        virtualinvoke r39.<android.net.IpSecConfig: void setMarkMask(int)>(0);

        return;

     label10:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source address (");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") and destination address (");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") have different address families.");

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label11:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Mismatched remote addresseses.");

        throw $r9;

     label12:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SPI already in use; cannot be used in new Transforms");

        throw $r5;
    }

    private void connectNativeNetdService()
    {
        com.android.server.IpSecService r0;
        com.android.server.IpSecService$1 $r1;

        r0 := @this: com.android.server.IpSecService;

        $r1 = new com.android.server.IpSecService$1;

        specialinvoke $r1.<com.android.server.IpSecService$1: void <init>(com.android.server.IpSecService)>(r0);

        virtualinvoke $r1.<com.android.server.IpSecService$1: void start()>();

        return;
    }

    static com.android.server.IpSecService create(android.content.Context, android.os.INetworkManagementService) throws java.lang.InterruptedException
    {
        android.os.INetworkManagementService r0;
        com.android.server.IpSecService $r1;
        android.content.Context r2;

        r2 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.INetworkManagementService;

        $r1 = new com.android.server.IpSecService;

        specialinvoke $r1.<com.android.server.IpSecService: void <init>(android.content.Context,android.os.INetworkManagementService)>(r2, r0);

        specialinvoke $r1.<com.android.server.IpSecService: void connectNativeNetdService()>();

        return $r1;
    }

    private void createOrUpdateTransform(android.net.IpSecConfig, int, com.android.server.IpSecService$SpiRecord, com.android.server.IpSecService$EncapSocketRecord) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        android.net.IpSecConfig r1;
        int i0, i1, i2, i3, i4, i5, $i6, i7, i8, i9, i10, i11, i12, i13;
        android.net.IpSecAlgorithm r2, r11, r12;
        android.net.INetd r3;
        java.lang.String r4, r5, r13, r14, r15;
        com.android.server.IpSecService$IpSecServiceConfiguration $r6;
        android.net.Network $r7, $r8;
        com.android.server.IpSecService$SpiRecord r9;
        com.android.server.IpSecService$EncapSocketRecord r10;
        byte[] r16, r17, r18;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: android.net.IpSecConfig;

        i7 := @parameter1: int;

        r9 := @parameter2: com.android.server.IpSecService$SpiRecord;

        r10 := @parameter3: com.android.server.IpSecService$EncapSocketRecord;

        i0 = virtualinvoke r1.<android.net.IpSecConfig: int getEncapType()>();

        if i0 == 0 goto label01;

        i8 = virtualinvoke r10.<com.android.server.IpSecService$EncapSocketRecord: int getPort()>();

        i9 = virtualinvoke r1.<android.net.IpSecConfig: int getEncapRemotePort()>();

        goto label02;

     label01:
        i8 = 0;

        i9 = 0;

     label02:
        r11 = virtualinvoke r1.<android.net.IpSecConfig: android.net.IpSecAlgorithm getAuthentication()>();

        r12 = virtualinvoke r1.<android.net.IpSecConfig: android.net.IpSecAlgorithm getEncryption()>();

        r2 = virtualinvoke r1.<android.net.IpSecConfig: android.net.IpSecAlgorithm getAuthenticatedEncryption()>();

        r13 = "";

        if r12 != null goto label05;

        if r2 != null goto label03;

        r14 = "ecb(cipher_null)";

        goto label04;

     label03:
        r14 = "";

     label04:
        goto label06;

     label05:
        r14 = virtualinvoke r12.<android.net.IpSecAlgorithm: java.lang.String getName()>();

     label06:
        $r6 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        r3 = interfaceinvoke $r6.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = virtualinvoke r1.<android.net.IpSecConfig: int getMode()>();

        r4 = virtualinvoke r1.<android.net.IpSecConfig: java.lang.String getSourceAddress()>();

        r5 = virtualinvoke r1.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        $r7 = virtualinvoke r1.<android.net.IpSecConfig: android.net.Network getNetwork()>();

        if $r7 == null goto label07;

        $r8 = virtualinvoke r1.<android.net.IpSecConfig: android.net.Network getNetwork()>();

        i10 = $r8.<android.net.Network: int netId>;

        goto label08;

     label07:
        i10 = 0;

     label08:
        i3 = virtualinvoke r9.<com.android.server.IpSecService$SpiRecord: int getSpi()>();

        i4 = virtualinvoke r1.<android.net.IpSecConfig: int getMarkValue()>();

        i5 = virtualinvoke r1.<android.net.IpSecConfig: int getMarkMask()>();

        if r11 == null goto label09;

        r15 = virtualinvoke r11.<android.net.IpSecAlgorithm: java.lang.String getName()>();

        goto label10;

     label09:
        r15 = "";

     label10:
        if r11 == null goto label11;

        r16 = virtualinvoke r11.<android.net.IpSecAlgorithm: byte[] getKey()>();

        goto label12;

     label11:
        r16 = newarray (byte)[0];

     label12:
        if r11 == null goto label13;

        i11 = virtualinvoke r11.<android.net.IpSecAlgorithm: int getTruncationLengthBits()>();

        goto label14;

     label13:
        i11 = 0;

     label14:
        if r12 == null goto label15;

        r17 = virtualinvoke r12.<android.net.IpSecAlgorithm: byte[] getKey()>();

        goto label16;

     label15:
        r17 = newarray (byte)[0];

     label16:
        if r12 == null goto label17;

        i12 = virtualinvoke r12.<android.net.IpSecAlgorithm: int getTruncationLengthBits()>();

        goto label18;

     label17:
        i12 = 0;

     label18:
        if r2 == null goto label19;

        r13 = virtualinvoke r2.<android.net.IpSecAlgorithm: java.lang.String getName()>();

     label19:
        if r2 == null goto label20;

        r18 = virtualinvoke r2.<android.net.IpSecAlgorithm: byte[] getKey()>();

        goto label21;

     label20:
        r18 = newarray (byte)[0];

     label21:
        if r2 == null goto label22;

        i13 = virtualinvoke r2.<android.net.IpSecAlgorithm: int getTruncationLengthBits()>();

        goto label23;

     label22:
        i13 = 0;

     label23:
        $i6 = virtualinvoke r1.<android.net.IpSecConfig: int getXfrmInterfaceId()>();

        interfaceinvoke r3.<android.net.INetd: void ipSecAddSecurityAssociation(int,int,java.lang.String,java.lang.String,int,int,int,int,java.lang.String,byte[],int,java.lang.String,byte[],int,java.lang.String,byte[],int,int,int,int,int)>(i1, i2, r4, r5, i10, i3, i4, i5, r15, r16, i11, r14, r17, i12, r13, r18, i13, i0, i8, i9, $i6);

        return;
    }

    private void enforceTunnelFeatureAndPermissions(java.lang.String)
    {
        com.android.server.IpSecService r0;
        java.lang.String r1;
        android.content.Context $r2, $r7;
        android.content.pm.PackageManager $r3;
        boolean $z0;
        java.lang.UnsupportedOperationException $r4;
        android.app.AppOpsManager $r6;
        int $i0, $i1;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.IpSecService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.ipsec_tunnels");

        if $z0 == 0 goto label2;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Null calling package cannot create IpSec tunnels");

        $r6 = specialinvoke r0.<com.android.server.IpSecService: android.app.AppOpsManager getAppOpsManager()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke $r6.<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>("android:manage_ipsec_tunnels", $i0, r1);

        if $i1 != 0 goto label1;

        return;

     label1:
        $r7 = r0.<com.android.server.IpSecService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_IPSEC_TUNNELS", "IpSecService");

        return;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("IPsec Tunnel Mode requires PackageManager.FEATURE_IPSEC_TUNNELS");

        throw $r4;
    }

    private android.app.AppOpsManager getAppOpsManager()
    {
        com.android.server.IpSecService r0;
        android.app.AppOpsManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.android.server.IpSecService;

        $r2 = r0.<com.android.server.IpSecService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        r1 = (android.app.AppOpsManager) $r3;

        if r1 == null goto label1;

        return r1;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("System Server couldn\'t get AppOps");

        throw $r4;
    }

    private int getFamily(java.lang.String)
    {
        com.android.server.IpSecService r0;
        boolean $z0, $z1;
        java.lang.String r1;
        int i0;
        java.net.InetAddress r2;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: java.lang.String;

        i0 = <android.system.OsConstants: int AF_UNSPEC>;

        r2 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r1);

        $z0 = r2 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        i0 = <android.system.OsConstants: int AF_INET>;

        goto label2;

     label1:
        $z1 = r2 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label2;

        i0 = <android.system.OsConstants: int AF_INET6>;

     label2:
        return i0;
    }

    static void lambda$new$0(java.io.FileDescriptor, int) throws java.io.IOException
    {
        int i0;
        java.lang.Throwable $r0;
        java.io.FileDescriptor r1;

        r1 := @parameter0: java.io.FileDescriptor;

        i0 := @parameter1: int;

     label1:
        staticinvoke <android.net.TrafficStats: void setThreadStatsUid(int)>(i0);

        staticinvoke <android.net.TrafficStats: void tagFileDescriptor(java.io.FileDescriptor)>(r1);

     label2:
        staticinvoke <android.net.TrafficStats: void clearThreadStatsUid()>();

        return;

     label3:
        $r0 := @caughtexception;

        staticinvoke <android.net.TrafficStats: void clearThreadStatsUid()>();

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void releaseResource(com.android.server.IpSecService$RefcountedResourceArray, int) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        com.android.server.IpSecService$RefcountedResourceArray r1;
        int i0;
        com.android.server.IpSecService$RefcountedResource $r2;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: com.android.server.IpSecService$RefcountedResourceArray;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$RefcountedResource getRefcountedResourceOrThrow(int)>(i0);

        virtualinvoke $r2.<com.android.server.IpSecService$RefcountedResource: void userRelease()>();

        return;
    }

    public void addAddressToTunnelInterface(int, android.net.LinkAddress, java.lang.String)
    {
        com.android.server.IpSecService r0;
        int i0, $i1, $i2;
        com.android.server.IpSecService$UserResourceTracker $r1;
        com.android.server.IpSecService$UserRecord $r2;
        com.android.server.IpSecService$RefcountedResourceArray $r3;
        com.android.server.IpSecService$IResource $r4;
        com.android.server.IpSecService$IpSecServiceConfiguration $r5;
        android.net.INetd $r6;
        java.lang.String $r7, $r9, r14;
        java.net.InetAddress $r8;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        java.lang.Throwable $r12;
        android.net.LinkAddress r13;
        com.android.server.IpSecService$TunnelInterfaceRecord r15;

        r0 := @this: com.android.server.IpSecService;

        i0 := @parameter0: int;

        r13 := @parameter1: android.net.LinkAddress;

        r14 := @parameter2: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.IpSecService: void enforceTunnelFeatureAndPermissions(java.lang.String)>(r14);

        $r1 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i1);

        $r3 = $r2.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTunnelInterfaceRecords>;

        $r4 = virtualinvoke $r3.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>(i0);

        r15 = (com.android.server.IpSecService$TunnelInterfaceRecord) $r4;

     label2:
        $r5 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        $r6 = interfaceinvoke $r5.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

        $r7 = staticinvoke <com.android.server.IpSecService$TunnelInterfaceRecord: java.lang.String access$200(com.android.server.IpSecService$TunnelInterfaceRecord)>(r15);

        $r8 = virtualinvoke r13.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $r9 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke r13.<android.net.LinkAddress: int getPrefixLength()>();

        interfaceinvoke $r6.<android.net.INetd: void interfaceAddAddress(java.lang.String,java.lang.String,int)>($r7, $r9, $i2);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r10 := @caughtexception;

     label5:
        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label6:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String, int, android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        android.os.IBinder r1;
        int i0, i1, $i3, i5, i6, $i7, $i8;
        com.android.server.IpSecService$RefcountedResource r2;
        com.android.server.IpSecService$UserResourceTracker $r4;
        com.android.server.IpSecService$ResourceTracker $r5;
        boolean $z0;
        com.android.server.IpSecService$IpSecServiceConfiguration $r6;
        java.lang.String $r9, r21;
        com.android.server.IpSecService$RefcountedResource[] $r10;
        android.net.IpSecSpiResponse $r11, $r12, $r14;
        android.os.ServiceSpecificException $r13, $r19, $r20, r31;
        java.lang.Throwable $r15;
        android.os.RemoteException $r16, $r17, $r18, r30;
        java.lang.IllegalArgumentException r22;
        com.android.server.IpSecService$UserRecord r23;
        android.net.INetd r25;
        java.lang.StringBuilder r26;
        com.android.server.IpSecService$RefcountedResourceArray r27;
        com.android.server.IpSecService$SpiRecord r28;
        java.lang.RuntimeException $r32;

        r0 := @this: com.android.server.IpSecService;

        r21 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        r1 := @parameter2: android.os.IBinder;

        entermonitor r0;

     label01:
        staticinvoke <com.android.server.IpSecService: void checkInetAddress(java.lang.String)>(r21);

     label02:
        if i5 <= 0 goto label04;

        if i5 < 256 goto label03;

        goto label04;

     label03:
        r22 = new java.lang.IllegalArgumentException;

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ESP SPI must not be in the range of 0-255.");

        throw r22;

     label04:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Null Binder passed to allocateSecurityParameterIndex");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        r23 = virtualinvoke $r4.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>(i0);

        i1 = r0.<com.android.server.IpSecService: int mNextResourceId>;

        $i3 = i1 + 1;

        r0.<com.android.server.IpSecService: int mNextResourceId> = $i3;

     label05:
        $r5 = r23.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$ResourceTracker mSpiQuotaTracker>;

        $z0 = virtualinvoke $r5.<com.android.server.IpSecService$ResourceTracker: boolean isAvailable()>();

        if $z0 != 0 goto label07;

        $r12 = new android.net.IpSecSpiResponse;

        specialinvoke $r12.<android.net.IpSecSpiResponse: void <init>(int,int,int)>(1, -1, 0);

     label06:
        exitmonitor r0;

        return $r12;

     label07:
        $r6 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        r25 = interfaceinvoke $r6.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

     label08:
        i6 = interfaceinvoke r25.<android.net.INetd: int ipSecAllocateSpi(int,java.lang.String,java.lang.String,int)>(i0, "", r21, i5);

     label09:
        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocated SPI ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r9 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("IpSecService", $r9);

        r27 = r23.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mSpiRecords>;

        r2 = new com.android.server.IpSecService$RefcountedResource;

        r28 = new com.android.server.IpSecService$SpiRecord;

        specialinvoke r28.<com.android.server.IpSecService$SpiRecord: void <init>(com.android.server.IpSecService,int,java.lang.String,java.lang.String,int)>(r0, i1, "", r21, i6);

        $r10 = newarray (com.android.server.IpSecService$RefcountedResource)[0];

        specialinvoke r2.<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>(r0, r28, r1, $r10);

        virtualinvoke r27.<com.android.server.IpSecService$RefcountedResourceArray: void put(int,com.android.server.IpSecService$RefcountedResource)>(i1, r2);

     label10:
        $r11 = new android.net.IpSecSpiResponse;

        specialinvoke $r11.<android.net.IpSecSpiResponse: void <init>(int,int,int)>(0, i1, i6);

     label11:
        exitmonitor r0;

        return $r11;

     label12:
        $r18 := @caughtexception;

        r30 = $r18;

        goto label17;

     label13:
        $r19 := @caughtexception;

        r31 = $r19;

        goto label19;

     label14:
        $r16 := @caughtexception;

        r30 = $r16;

        goto label17;

     label15:
        $r20 := @caughtexception;

        r31 = $r20;

        i6 = 0;

        goto label19;

     label16:
        $r17 := @caughtexception;

        r30 = $r17;

     label17:
        $r32 = virtualinvoke r30.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r32;

     label18:
        $r13 := @caughtexception;

        r31 = $r13;

        i6 = 0;

     label19:
        $i7 = r31.<android.os.ServiceSpecificException: int errorCode>;

        $i8 = <android.system.OsConstants: int ENOENT>;

        if $i7 != $i8 goto label21;

        $r14 = new android.net.IpSecSpiResponse;

        specialinvoke $r14.<android.net.IpSecSpiResponse: void <init>(int,int,int)>(2, -1, i6);

     label20:
        exitmonitor r0;

        return $r14;

     label21:
        throw r31;

     label22:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch android.os.ServiceSpecificException from label05 to label06 with label18;
        catch android.os.RemoteException from label05 to label06 with label16;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch android.os.ServiceSpecificException from label07 to label08 with label18;
        catch android.os.RemoteException from label07 to label08 with label16;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch android.os.ServiceSpecificException from label08 to label09 with label15;
        catch android.os.RemoteException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch android.os.ServiceSpecificException from label09 to label10 with label13;
        catch android.os.RemoteException from label09 to label10 with label12;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    public void applyTransportModeTransform(android.os.ParcelFileDescriptor, int, int) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.net.IpSecConfig r1;
        com.android.server.IpSecService$UserResourceTracker $r2;
        com.android.server.IpSecService$RefcountedResourceArray $r3;
        com.android.server.IpSecService$IResource $r4;
        com.android.server.IpSecService$IpSecServiceConfiguration $r5;
        android.net.INetd $r6;
        java.lang.String $r7, $r8;
        com.android.server.IpSecService$SpiRecord $r9;
        java.lang.Throwable $r10;
        android.os.ParcelFileDescriptor r11;
        com.android.server.IpSecService$UserRecord r12;
        com.android.server.IpSecService$TransformRecord r13;
        boolean z0;
        java.lang.SecurityException r14;

        r0 := @this: com.android.server.IpSecService;

        r11 := @parameter0: android.os.ParcelFileDescriptor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        r12 = virtualinvoke $r2.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>(i2);

        staticinvoke <com.android.server.IpSecService: void checkDirection(int)>(i0);

        $r3 = r12.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTransformRecords>;

        $r4 = virtualinvoke $r3.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>(i1);

        r13 = (com.android.server.IpSecService$TransformRecord) $r4;

        $i3 = r13.<com.android.server.IpSecService$TransformRecord: int pid>;

        $i4 = staticinvoke <com.android.server.IpSecService: int getCallingPid()>();

        if $i3 != $i4 goto label7;

        $i5 = r13.<com.android.server.IpSecService$TransformRecord: int uid>;

        if $i5 != i2 goto label7;

        r1 = virtualinvoke r13.<com.android.server.IpSecService$TransformRecord: android.net.IpSecConfig getConfig()>();

     label2:
        $i6 = virtualinvoke r1.<android.net.IpSecConfig: int getMode()>();

        if $i6 != 0 goto label4;

     label3:
        z0 = 1;

        goto label5;

     label4:
        z0 = 0;

     label5:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Transform mode was not Transport mode; cannot be applied to a socket");

        $r5 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        $r6 = interfaceinvoke $r5.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

        $r7 = virtualinvoke r1.<android.net.IpSecConfig: java.lang.String getSourceAddress()>();

        $r8 = virtualinvoke r1.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        $r9 = virtualinvoke r13.<com.android.server.IpSecService$TransformRecord: com.android.server.IpSecService$SpiRecord getSpiRecord()>();

        $i7 = virtualinvoke $r9.<com.android.server.IpSecService$SpiRecord: int getSpi()>();

        interfaceinvoke $r6.<android.net.INetd: void ipSecApplyTransportModeTransform(android.os.ParcelFileDescriptor,int,int,java.lang.String,java.lang.String,int)>(r11, i2, i0, $r7, $r8, $i7);

     label6:
        exitmonitor r0;

        return;

     label7:
        r14 = new java.lang.SecurityException;

        specialinvoke r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the owner of an IpSec Transform may apply it!");

        throw r14;

     label8:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void applyTunnelModeTransform(int, int, int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, $i14, $i15;
        com.android.server.IpSecService$TransformRecord r1;
        android.net.IpSecConfig r2, $r13, $r14;
        com.android.server.IpSecService$SpiRecord r3;
        android.net.INetd r4;
        java.lang.String r5, r6, $r19, r25;
        com.android.server.IpSecService$UserResourceTracker $r7;
        com.android.server.IpSecService$RefcountedResourceArray $r8, $r10, $r16;
        com.android.server.IpSecService$IResource $r9, $r11, $r17;
        com.android.server.IpSecService$IpSecServiceConfiguration $r12;
        android.net.Network $r15;
        android.os.ServiceSpecificException $r18, $r20, $r21, $r23, $r24, r29;
        java.lang.Throwable $r22;
        com.android.server.IpSecService$UserRecord r26;
        com.android.server.IpSecService$TunnelInterfaceRecord r27;
        boolean z0;
        com.android.server.IpSecService$EncapSocketRecord r28;
        int[] r30;
        java.lang.IllegalArgumentException r31;

        r0 := @this: com.android.server.IpSecService;

        i9 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r25 := @parameter3: java.lang.String;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.android.server.IpSecService: void enforceTunnelFeatureAndPermissions(java.lang.String)>(r25);

        staticinvoke <com.android.server.IpSecService: void checkDirection(int)>(i0);

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        r26 = virtualinvoke $r7.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>(i2);

        $r8 = r26.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTransformRecords>;

        $r9 = virtualinvoke $r8.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>(i1);

        r1 = (com.android.server.IpSecService$TransformRecord) $r9;

        $r10 = r26.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTunnelInterfaceRecords>;

        $r11 = virtualinvoke $r10.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>(i9);

        r27 = (com.android.server.IpSecService$TunnelInterfaceRecord) $r11;

        r2 = virtualinvoke r1.<com.android.server.IpSecService$TransformRecord: android.net.IpSecConfig getConfig()>();

     label02:
        i10 = virtualinvoke r2.<android.net.IpSecConfig: int getMode()>();

     label03:
        i11 = 0;

        if i10 != 1 goto label04;

        z0 = 1;

        goto label05;

     label04:
        z0 = 0;

     label05:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Transform mode was not Tunnel mode; cannot be applied to a tunnel interface");

        $i6 = virtualinvoke r2.<android.net.IpSecConfig: int getEncapType()>();

        if $i6 == 0 goto label07;

        $r16 = r26.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mEncapSocketRecords>;

        $i8 = virtualinvoke r2.<android.net.IpSecConfig: int getEncapSocketResourceId()>();

        $r17 = virtualinvoke $r16.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>($i8);

        r28 = (com.android.server.IpSecService$EncapSocketRecord) $r17;

     label06:
        goto label08;

     label07:
        r28 = null;

     label08:
        r3 = virtualinvoke r1.<com.android.server.IpSecService$TransformRecord: com.android.server.IpSecService$SpiRecord getSpiRecord()>();

     label09:
        if i0 != 1 goto label12;

     label10:
        i12 = virtualinvoke r27.<com.android.server.IpSecService$TunnelInterfaceRecord: int getOkey()>();

     label11:
        goto label13;

     label12:
        i12 = virtualinvoke r27.<com.android.server.IpSecService$TunnelInterfaceRecord: int getIkey()>();

     label13:
        i13 = 0;

     label14:
        $i7 = virtualinvoke r27.<com.android.server.IpSecService$TunnelInterfaceRecord: int getIfId()>();

        virtualinvoke r2.<android.net.IpSecConfig: void setXfrmInterfaceId(int)>($i7);

     label15:
        if i0 != 1 goto label19;

     label16:
        $r15 = virtualinvoke r27.<com.android.server.IpSecService$TunnelInterfaceRecord: android.net.Network getUnderlyingNetwork()>();

        virtualinvoke r2.<android.net.IpSecConfig: void setNetwork(android.net.Network)>($r15);

        i13 = virtualinvoke r3.<com.android.server.IpSecService$SpiRecord: int getSpi()>();

     label17:
        goto label19;

     label18:
        $r23 := @caughtexception;

        r29 = $r23;

        goto label30;

     label19:
        r30 = <com.android.server.IpSecService: int[] ADDRESS_FAMILIES>;

        i3 = lengthof r30;

     label20:
        if i11 >= i3 goto label26;

        i4 = r30[i11];

     label21:
        $r12 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        r4 = interfaceinvoke $r12.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

        $r13 = virtualinvoke r1.<com.android.server.IpSecService$TransformRecord: android.net.IpSecConfig getConfig()>();

        r5 = virtualinvoke $r13.<android.net.IpSecConfig: java.lang.String getSourceAddress()>();

        $r14 = virtualinvoke r1.<com.android.server.IpSecService$TransformRecord: android.net.IpSecConfig getConfig()>();

        r6 = virtualinvoke $r14.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        i5 = virtualinvoke r2.<android.net.IpSecConfig: int getXfrmInterfaceId()>();

     label22:
        interfaceinvoke r4.<android.net.INetd: void ipSecUpdateSecurityPolicy(int,int,int,java.lang.String,java.lang.String,int,int,int,int)>(i2, i4, i0, r5, r6, i13, i12, -1, i5);

     label23:
        i11 = i11 + 1;

        goto label20;

     label24:
        $r24 := @caughtexception;

        r29 = $r24;

        goto label30;

     label25:
        $r20 := @caughtexception;

        r29 = $r20;

        goto label30;

     label26:
        specialinvoke r0.<com.android.server.IpSecService: void createOrUpdateTransform(android.net.IpSecConfig,int,com.android.server.IpSecService$SpiRecord,com.android.server.IpSecService$EncapSocketRecord)>(r2, i1, r3, r28);

     label27:
        exitmonitor r0;

        return;

     label28:
        $r18 := @caughtexception;

        r29 = $r18;

        goto label30;

     label29:
        $r21 := @caughtexception;

        r29 = $r21;

     label30:
        $i14 = r29.<android.os.ServiceSpecificException: int errorCode>;

        $i15 = <android.system.OsConstants: int EINVAL>;

        if $i14 != $i15 goto label31;

        r31 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke r29.<android.os.ServiceSpecificException: java.lang.String toString()>();

        specialinvoke r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw r31;

     label31:
        throw r29;

     label32:
        $r22 := @caughtexception;

        exitmonitor r0;

        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label32;
        catch java.lang.Throwable from label02 to label03 with label32;
        catch java.lang.Throwable from label05 to label06 with label32;
        catch java.lang.Throwable from label08 to label09 with label32;
        catch java.lang.Throwable from label10 to label11 with label32;
        catch java.lang.Throwable from label12 to label13 with label32;
        catch android.os.ServiceSpecificException from label14 to label15 with label29;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch android.os.ServiceSpecificException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch android.os.ServiceSpecificException from label19 to label20 with label29;
        catch java.lang.Throwable from label19 to label20 with label32;
        catch android.os.ServiceSpecificException from label21 to label22 with label25;
        catch java.lang.Throwable from label21 to label22 with label32;
        catch android.os.ServiceSpecificException from label22 to label23 with label24;
        catch java.lang.Throwable from label22 to label23 with label32;
        catch android.os.ServiceSpecificException from label26 to label27 with label28;
        catch java.lang.Throwable from label26 to label27 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label31 to label32 with label32;
    }

    public void closeUdpEncapsulationSocket(int) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        int i0, $i1;
        com.android.server.IpSecService$UserResourceTracker $r2;
        com.android.server.IpSecService$UserRecord $r3;
        com.android.server.IpSecService$RefcountedResourceArray $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.IpSecService;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke $r2.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i1);

        $r4 = $r3.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mEncapSocketRecords>;

        specialinvoke r0.<com.android.server.IpSecService: void releaseResource(com.android.server.IpSecService$RefcountedResourceArray,int)>($r4, i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig, android.os.IBinder, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        android.os.IBinder r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.ArrayList r2;
        com.android.server.IpSecService$RefcountedResourceArray r3, $r9, $r15;
        com.android.server.IpSecService$TransformRecord r4;
        com.android.server.IpSecService$UserResourceTracker $r7;
        com.android.server.IpSecService$ResourceTracker $r8;
        boolean $z0;
        com.android.server.IpSecService$IResource $r10, $r16;
        com.android.server.IpSecService$RefcountedResource[] $r11, $r13;
        java.lang.Object[] $r12;
        android.net.IpSecTransformResponse $r14, $r17;
        java.lang.Throwable $r18;
        android.net.IpSecConfig r19;
        java.lang.String r20;
        com.android.server.IpSecService$UserRecord r21;
        com.android.server.IpSecService$RefcountedResource r23, r25, r27;
        com.android.server.IpSecService$EncapSocketRecord r24;
        com.android.server.IpSecService$SpiRecord r26;

        r0 := @this: com.android.server.IpSecService;

        r19 := @parameter0: android.net.IpSecConfig;

        r1 := @parameter1: android.os.IBinder;

        r20 := @parameter2: java.lang.String;

        entermonitor r0;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r19);

        $i1 = virtualinvoke r19.<android.net.IpSecConfig: int getMode()>();

        if $i1 != 1 goto label03;

        specialinvoke r0.<com.android.server.IpSecService: void enforceTunnelFeatureAndPermissions(java.lang.String)>(r20);

     label02:
        goto label03;

     label03:
        specialinvoke r0.<com.android.server.IpSecService: void checkIpSecConfig(android.net.IpSecConfig)>(r19);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Null Binder passed to createTransform");

        i0 = r0.<com.android.server.IpSecService: int mNextResourceId>;

        $i2 = i0 + 1;

        r0.<com.android.server.IpSecService: int mNextResourceId> = $i2;

        $r7 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r21 = virtualinvoke $r7.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i3);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r8 = r21.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$ResourceTracker mTransformQuotaTracker>;

        $z0 = virtualinvoke $r8.<com.android.server.IpSecService$ResourceTracker: boolean isAvailable()>();

        if $z0 != 0 goto label05;

        $r17 = new android.net.IpSecTransformResponse;

        specialinvoke $r17.<android.net.IpSecTransformResponse: void <init>(int)>(1);

     label04:
        exitmonitor r0;

        return $r17;

     label05:
        $i4 = virtualinvoke r19.<android.net.IpSecConfig: int getEncapType()>();

        if $i4 == 0 goto label07;

        $r15 = r21.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mEncapSocketRecords>;

        $i7 = virtualinvoke r19.<android.net.IpSecConfig: int getEncapSocketResourceId()>();

        r23 = virtualinvoke $r15.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$RefcountedResource getRefcountedResourceOrThrow(int)>($i7);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r23);

        $r16 = virtualinvoke r23.<com.android.server.IpSecService$RefcountedResource: com.android.server.IpSecService$IResource getResource()>();

        r24 = (com.android.server.IpSecService$EncapSocketRecord) $r16;

     label06:
        goto label08;

     label07:
        r24 = null;

     label08:
        $r9 = r21.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mSpiRecords>;

        $i5 = virtualinvoke r19.<android.net.IpSecConfig: int getSpiResourceId()>();

        r25 = virtualinvoke $r9.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$RefcountedResource getRefcountedResourceOrThrow(int)>($i5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r25);

        $r10 = virtualinvoke r25.<com.android.server.IpSecService$RefcountedResource: com.android.server.IpSecService$IResource getResource()>();

        r26 = (com.android.server.IpSecService$SpiRecord) $r10;

        specialinvoke r0.<com.android.server.IpSecService: void createOrUpdateTransform(android.net.IpSecConfig,int,com.android.server.IpSecService$SpiRecord,com.android.server.IpSecService$EncapSocketRecord)>(r19, i0, r26, r24);

        r3 = r21.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTransformRecords>;

        r27 = new com.android.server.IpSecService$RefcountedResource;

        r4 = new com.android.server.IpSecService$TransformRecord;

        specialinvoke r4.<com.android.server.IpSecService$TransformRecord: void <init>(com.android.server.IpSecService,int,android.net.IpSecConfig,com.android.server.IpSecService$SpiRecord,com.android.server.IpSecService$EncapSocketRecord)>(r0, i0, r19, r26, r24);

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();

        $r11 = newarray (com.android.server.IpSecService$RefcountedResource)[$i6];

        $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (com.android.server.IpSecService$RefcountedResource[]) $r12;

        specialinvoke r27.<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>(r0, r4, r1, $r13);

        virtualinvoke r3.<com.android.server.IpSecService$RefcountedResourceArray: void put(int,com.android.server.IpSecService$RefcountedResource)>(i0, r27);

        $r14 = new android.net.IpSecTransformResponse;

        specialinvoke $r14.<android.net.IpSecTransformResponse: void <init>(int,int)>(0, i0);

     label09:
        exitmonitor r0;

        return $r14;

     label10:
        $r18 := @caughtexception;

        exitmonitor r0;

        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String, java.lang.String, android.net.Network, android.os.IBinder, java.lang.String)
    {
        com.android.server.IpSecService r0;
        java.lang.String r1, r30, r31, r34;
        android.net.Network r2;
        android.os.IBinder r3;
        int i0, i1, i2, i3, i4, i5, $i6, i7;
        com.android.server.IpSecService$UserResourceTracker $r6;
        com.android.server.IpSecService$ResourceTracker $r7;
        boolean $z0;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;
        com.android.server.IpSecService$RefcountedResource[] $r10;
        android.net.IpSecTunnelInterfaceResponse $r11, $r12;
        android.os.RemoteException $r13, $r14, $r15, $r16, $r20, $r22, $r25, $r27, $r28, r40;
        java.lang.Throwable $r17, $r18, $r19, $r21, $r23, $r24, $r26, $r29, r39;
        com.android.server.IpSecService$UserRecord r32;
        com.android.server.IpSecService$IpSecServiceConfiguration r35;
        android.net.INetd r36;
        com.android.server._$$Lambda$IpSecService$fEohV8w_aKy2H7Pc5nplFrk1PZs r37;
        int[] r38;
        com.android.server.IpSecService$RefcountedResourceArray r41;
        com.android.server.IpSecService$RefcountedResource r42;
        com.android.server.IpSecService$TunnelInterfaceRecord r43;
        java.lang.RuntimeException $r45;

        r0 := @this: com.android.server.IpSecService;

        r30 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.Network;

        r3 := @parameter3: android.os.IBinder;

        r31 := @parameter4: java.lang.String;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.android.server.IpSecService: void enforceTunnelFeatureAndPermissions(java.lang.String)>(r31);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "Null Binder passed to createTunnelInterface");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "No underlying network was specified");

        staticinvoke <com.android.server.IpSecService: void checkInetAddress(java.lang.String)>(r30);

        staticinvoke <com.android.server.IpSecService: void checkInetAddress(java.lang.String)>(r1);

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r6 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        r32 = virtualinvoke $r6.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>(i0);

        $r7 = r32.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$ResourceTracker mTunnelQuotaTracker>;

        $z0 = virtualinvoke $r7.<com.android.server.IpSecService$ResourceTracker: boolean isAvailable()>();

        if $z0 != 0 goto label03;

        $r12 = new android.net.IpSecTunnelInterfaceResponse;

        specialinvoke $r12.<android.net.IpSecTunnelInterfaceResponse: void <init>(int)>(1);

     label02:
        exitmonitor r0;

        return $r12;

     label03:
        i1 = r0.<com.android.server.IpSecService: int mNextResourceId>;

        $i6 = i1 + 1;

        r0.<com.android.server.IpSecService: int mNextResourceId> = $i6;

     label04:
        i2 = virtualinvoke r0.<com.android.server.IpSecService: int reserveNetId()>();

        i3 = virtualinvoke r0.<com.android.server.IpSecService: int reserveNetId()>();

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "ipsec";

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[1] = $r9;

        r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s%d", $r8);

     label05:
        r35 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

     label06:
        r36 = interfaceinvoke r35.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

        interfaceinvoke r36.<android.net.INetd: void ipSecAddTunnelInterface(java.lang.String,java.lang.String,java.lang.String,int,int,int)>(r34, r30, r1, i2, i3, i1);

     label07:
        r37 = new com.android.server._$$Lambda$IpSecService$fEohV8w_aKy2H7Pc5nplFrk1PZs;

        specialinvoke r37.<com.android.server._$$Lambda$IpSecService$fEohV8w_aKy2H7Pc5nplFrk1PZs: void <init>(com.android.server.IpSecService,java.lang.String)>(r0, r34);

     label08:
        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r37);

        r38 = <com.android.server.IpSecService: int[] ADDRESS_FAMILIES>;

        i4 = lengthof r38;

     label09:
        i7 = 0;

     label10:
        if i7 >= i4 goto label18;

        i5 = r38[i7];

     label11:
        interfaceinvoke r36.<android.net.INetd: void ipSecAddSecurityPolicy(int,int,int,java.lang.String,java.lang.String,int,int,int,int)>(i0, i5, 1, r30, r1, 0, i3, -1, i1);

     label12:
        interfaceinvoke r36.<android.net.INetd: void ipSecAddSecurityPolicy(int,int,int,java.lang.String,java.lang.String,int,int,int,int)>(i0, i5, 0, r1, r30, 0, i2, -1, i1);

     label13:
        i7 = i7 + 1;

        goto label10;

     label14:
        $r23 := @caughtexception;

        r39 = $r23;

        goto label35;

     label15:
        $r20 := @caughtexception;

        r40 = $r20;

        goto label37;

     label16:
        $r29 := @caughtexception;

        r39 = $r29;

        goto label35;

     label17:
        $r25 := @caughtexception;

        r40 = $r25;

        goto label37;

     label18:
        r41 = r32.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTunnelInterfaceRecords>;

        r42 = new com.android.server.IpSecService$RefcountedResource;

        r43 = new com.android.server.IpSecService$TunnelInterfaceRecord;

     label19:
        specialinvoke r43.<com.android.server.IpSecService$TunnelInterfaceRecord: void <init>(com.android.server.IpSecService,int,java.lang.String,android.net.Network,java.lang.String,java.lang.String,int,int,int)>(r0, i1, r34, r2, r30, r1, i2, i3, i1);

        $r10 = newarray (com.android.server.IpSecService$RefcountedResource)[0];

        specialinvoke r42.<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>(r0, r43, r3, $r10);

     label20:
        virtualinvoke r41.<com.android.server.IpSecService$RefcountedResourceArray: void put(int,com.android.server.IpSecService$RefcountedResource)>(i1, r42);

     label21:
        $r11 = new android.net.IpSecTunnelInterfaceResponse;

        specialinvoke $r11.<android.net.IpSecTunnelInterfaceResponse: void <init>(int,int,java.lang.String)>(0, i1, r34);

     label22:
        exitmonitor r0;

        return $r11;

     label23:
        $r17 := @caughtexception;

        r39 = $r17;

        goto label35;

     label24:
        $r14 := @caughtexception;

        r40 = $r14;

        goto label32;

     label25:
        $r24 := @caughtexception;

        r39 = $r24;

        goto label35;

     label26:
        $r13 := @caughtexception;

        r40 = $r13;

        goto label37;

     label27:
        $r18 := @caughtexception;

        r39 = $r18;

        goto label35;

     label28:
        $r22 := @caughtexception;

        r40 = $r22;

        goto label37;

     label29:
        $r19 := @caughtexception;

        r39 = $r19;

        goto label35;

     label30:
        $r28 := @caughtexception;

        r40 = $r28;

        goto label37;

     label31:
        $r16 := @caughtexception;

        r40 = $r16;

     label32:
        goto label37;

     label33:
        $r15 := @caughtexception;

        r40 = $r15;

        goto label37;

     label34:
        $r21 := @caughtexception;

        r39 = $r21;

     label35:
        virtualinvoke r0.<com.android.server.IpSecService: void releaseNetId(int)>(i2);

        virtualinvoke r0.<com.android.server.IpSecService: void releaseNetId(int)>(i3);

        throw r39;

     label36:
        $r27 := @caughtexception;

        r40 = $r27;

     label37:
        virtualinvoke r0.<com.android.server.IpSecService: void releaseNetId(int)>(i2);

        virtualinvoke r0.<com.android.server.IpSecService: void releaseNetId(int)>(i3);

        $r45 = virtualinvoke r40.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r45;

     label38:
        $r26 := @caughtexception;

        exitmonitor r0;

        throw $r26;

        catch java.lang.Throwable from label01 to label02 with label38;
        catch java.lang.Throwable from label03 to label04 with label38;
        catch java.lang.Throwable from label04 to label05 with label38;
        catch android.os.RemoteException from label05 to label06 with label36;
        catch java.lang.Throwable from label05 to label06 with label34;
        catch android.os.RemoteException from label06 to label07 with label33;
        catch java.lang.Throwable from label06 to label07 with label34;
        catch android.os.RemoteException from label07 to label08 with label31;
        catch java.lang.Throwable from label07 to label08 with label34;
        catch android.os.RemoteException from label08 to label09 with label33;
        catch java.lang.Throwable from label08 to label09 with label34;
        catch android.os.RemoteException from label11 to label12 with label17;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch android.os.RemoteException from label18 to label19 with label30;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch android.os.RemoteException from label19 to label20 with label28;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch android.os.RemoteException from label20 to label21 with label26;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch android.os.RemoteException from label21 to label22 with label24;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label35 to label36 with label38;
        catch java.lang.Throwable from label37 to label38 with label38;
    }

    public void deleteTransform(int) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        int i0, $i1;
        com.android.server.IpSecService$UserResourceTracker $r2;
        com.android.server.IpSecService$UserRecord $r3;
        com.android.server.IpSecService$RefcountedResourceArray $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.IpSecService;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke $r2.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i1);

        $r4 = $r3.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTransformRecords>;

        specialinvoke r0.<com.android.server.IpSecService: void releaseResource(com.android.server.IpSecService$RefcountedResourceArray,int)>($r4, i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void deleteTunnelInterface(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        int i0, $i1;
        com.android.server.IpSecService$UserResourceTracker $r1;
        com.android.server.IpSecService$UserRecord $r2;
        com.android.server.IpSecService$RefcountedResourceArray $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.IpSecService;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.IpSecService: void enforceTunnelFeatureAndPermissions(java.lang.String)>(r5);

        $r1 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i1);

        $r3 = $r2.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTunnelInterfaceRecords>;

        specialinvoke r0.<com.android.server.IpSecService: void releaseResource(com.android.server.IpSecService$RefcountedResourceArray,int)>($r3, i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.IpSecService r0;
        java.io.PrintWriter r1;
        android.content.Context $r2;
        boolean $z0;
        java.lang.String $r5, r11;
        com.android.server.IpSecService$UserResourceTracker $r6;
        java.lang.Throwable $r7;
        java.io.FileDescriptor r8;
        java.lang.String[] r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.IpSecService;

        r8 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r9 := @parameter2: java.lang.String[];

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.IpSecService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "IpSecService");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("IpSecService dump:");

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetdNativeService Connection: ");

        $z0 = virtualinvoke r0.<com.android.server.IpSecService: boolean isNetdAlive()>();

        if $z0 == 0 goto label3;

     label2:
        r11 = "alive";

        goto label4;

     label3:
        r11 = "dead";

     label4:
        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("mUserResourceTracker:");

        $r6 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r6);

     label5:
        exitmonitor r0;

        return;

     label6:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    boolean isNetdAlive()
    {
        com.android.server.IpSecService r0;
        boolean z0;
        java.lang.Throwable $r1;
        android.os.RemoteException $r2, $r3;
        com.android.server.IpSecService$IpSecServiceConfiguration r4;
        android.net.INetd r5;

        r0 := @this: com.android.server.IpSecService;

        entermonitor r0;

     label1:
        r4 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

     label2:
        r5 = interfaceinvoke r4.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

     label3:
        if r5 != null goto label4;

        exitmonitor r0;

        return 0;

     label4:
        z0 = interfaceinvoke r5.<android.net.INetd: boolean isAlive()>();

     label5:
        exitmonitor r0;

        return z0;

     label6:
        $r2 := @caughtexception;

        goto label9;

     label7:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

     label8:
        $r3 := @caughtexception;

     label9:
        exitmonitor r0;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label2 to label3 with label6;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public void lambda$createTunnelInterface$1$IpSecService(java.lang.String) throws java.lang.Exception
    {
        com.android.server.IpSecService r0;
        java.lang.String r1;
        android.os.INetworkManagementService $r2;

        r0 := @this: com.android.server.IpSecService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.IpSecService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setInterfaceUp(java.lang.String)>(r1);

        return;
    }

    public android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int, android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        com.android.server.IpSecService$UserResourceTracker $r1;
        com.android.server.IpSecService$ResourceTracker $r2;
        boolean $z0;
        com.android.server.IpSecService$UidFdTagger $r3;
        com.android.server.IpSecService$IpSecServiceConfiguration $r4;
        com.android.server.IpSecService$RefcountedResource[] $r5;
        android.net.IpSecUdpEncapResponse $r6, $r9, $r11;
        java.lang.String $r7;
        java.net.InetAddress $r8;
        java.lang.Throwable $r10, $r12;
        android.os.IBinder r13;
        java.lang.IllegalArgumentException r14;
        com.android.server.IpSecService$UserRecord r15;
        java.io.FileDescriptor r16, r18;
        android.net.INetd r19;
        android.os.ParcelFileDescriptor r20;
        java.lang.StringBuilder r21;
        com.android.server.IpSecService$RefcountedResourceArray r22;
        com.android.server.IpSecService$RefcountedResource r23;
        com.android.server.IpSecService$EncapSocketRecord r24;

        r0 := @this: com.android.server.IpSecService;

        i9 := @parameter0: int;

        r13 := @parameter1: android.os.IBinder;

        entermonitor r0;

        if i9 == 0 goto label02;

        if i9 < 1024 goto label01;

        if i9 > 65535 goto label01;

        goto label02;

     label01:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified port number must be a valid non-reserved UDP port");

        throw r14;

     label02:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "Null Binder passed to openUdpEncapsulationSocket");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        r15 = virtualinvoke $r1.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>(i0);

        i1 = r0.<com.android.server.IpSecService: int mNextResourceId>;

        $i2 = i1 + 1;

        r0.<com.android.server.IpSecService: int mNextResourceId> = $i2;

     label03:
        r16 = null;

     label04:
        $r2 = r15.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$ResourceTracker mSocketQuotaTracker>;

        $z0 = virtualinvoke $r2.<com.android.server.IpSecService$ResourceTracker: boolean isAvailable()>();

        if $z0 != 0 goto label08;

     label05:
        r16 = null;

     label06:
        $r9 = new android.net.IpSecUdpEncapResponse;

        specialinvoke $r9.<android.net.IpSecUdpEncapResponse: void <init>(int)>(1);

     label07:
        exitmonitor r0;

        return $r9;

     label08:
        r16 = null;

     label09:
        $i5 = <android.system.OsConstants: int AF_INET>;

        $i4 = <android.system.OsConstants: int SOCK_DGRAM>;

        $i3 = <android.system.OsConstants: int IPPROTO_UDP>;

        r18 = staticinvoke <android.system.Os: java.io.FileDescriptor socket(int,int,int)>($i5, $i4, $i3);

     label10:
        r16 = r18;

     label11:
        $r3 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UidFdTagger mUidFdTagger>;

        interfaceinvoke $r3.<com.android.server.IpSecService$UidFdTagger: void tag(java.io.FileDescriptor,int)>(r18, i0);

     label12:
        r16 = r18;

     label13:
        $i8 = <android.system.OsConstants: int IPPROTO_UDP>;

        $i7 = <android.system.OsConstants: int UDP_ENCAP>;

        $i6 = <android.system.OsConstants: int UDP_ENCAP_ESPINUDP>;

        staticinvoke <android.system.Os: void setsockoptInt(java.io.FileDescriptor,int,int,int)>(r18, $i8, $i7, $i6);

     label14:
        r16 = r18;

     label15:
        $r4 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        r19 = interfaceinvoke $r4.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

     label16:
        r16 = r18;

     label17:
        r20 = new android.os.ParcelFileDescriptor;

     label18:
        r16 = r18;

     label19:
        specialinvoke r20.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>(r18);

     label20:
        r16 = r18;

     label21:
        interfaceinvoke r19.<android.net.INetd: void ipSecSetEncapSocketOwner(android.os.ParcelFileDescriptor,int)>(r20, i0);

     label22:
        if i9 == 0 goto label35;

        r16 = r18;

     label23:
        r21 = new java.lang.StringBuilder;

     label24:
        r16 = r18;

     label25:
        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

     label26:
        r16 = r18;

     label27:
        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding to port ");

     label28:
        r16 = r18;

     label29:
        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

     label30:
        r16 = r18;

     label31:
        $r7 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("IpSecService", $r7);

     label32:
        r16 = r18;

     label33:
        $r8 = <com.android.server.IpSecService: java.net.InetAddress INADDR_ANY>;

        staticinvoke <android.system.Os: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>(r18, $r8, i9);

     label34:
        goto label37;

     label35:
        r16 = r18;

     label36:
        i9 = specialinvoke r0.<com.android.server.IpSecService: int bindToRandomPort(java.io.FileDescriptor)>(r18);

     label37:
        r16 = r18;

     label38:
        r22 = r15.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mEncapSocketRecords>;

     label39:
        r16 = r18;

     label40:
        r23 = new com.android.server.IpSecService$RefcountedResource;

     label41:
        r16 = r18;

     label42:
        r24 = new com.android.server.IpSecService$EncapSocketRecord;

     label43:
        r16 = r18;

     label44:
        specialinvoke r24.<com.android.server.IpSecService$EncapSocketRecord: void <init>(com.android.server.IpSecService,int,java.io.FileDescriptor,int)>(r0, i1, r18, i9);

     label45:
        r16 = r18;

     label46:
        $r5 = newarray (com.android.server.IpSecService$RefcountedResource)[0];

        specialinvoke r23.<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>(r0, r24, r13, $r5);

     label47:
        r16 = r18;

     label48:
        virtualinvoke r22.<com.android.server.IpSecService$RefcountedResourceArray: void put(int,com.android.server.IpSecService$RefcountedResource)>(i1, r23);

     label49:
        r16 = r18;

     label50:
        $r6 = new android.net.IpSecUdpEncapResponse;

        specialinvoke $r6.<android.net.IpSecUdpEncapResponse: void <init>(int,int,int,java.io.FileDescriptor)>(0, i1, i9, r18);

     label51:
        exitmonitor r0;

        return $r6;

     label52:
        $r10 := @caughtexception;

     label53:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r16);

        $r11 = new android.net.IpSecUdpEncapResponse;

        specialinvoke $r11.<android.net.IpSecUdpEncapResponse: void <init>(int)>(1);

     label54:
        exitmonitor r0;

        return $r11;

     label55:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label55;
        catch java.lang.Throwable from label02 to label03 with label55;
        catch java.io.IOException from label04 to label05 with label52;
        catch android.system.ErrnoException from label04 to label05 with label52;
        catch java.lang.Throwable from label04 to label05 with label55;
        catch java.io.IOException from label06 to label07 with label52;
        catch android.system.ErrnoException from label06 to label07 with label52;
        catch java.lang.Throwable from label06 to label07 with label55;
        catch java.io.IOException from label09 to label10 with label52;
        catch android.system.ErrnoException from label09 to label10 with label52;
        catch java.lang.Throwable from label09 to label10 with label55;
        catch java.io.IOException from label11 to label12 with label52;
        catch android.system.ErrnoException from label11 to label12 with label52;
        catch java.lang.Throwable from label11 to label12 with label55;
        catch java.io.IOException from label13 to label14 with label52;
        catch android.system.ErrnoException from label13 to label14 with label52;
        catch java.lang.Throwable from label13 to label14 with label55;
        catch java.io.IOException from label15 to label16 with label52;
        catch android.system.ErrnoException from label15 to label16 with label52;
        catch java.lang.Throwable from label15 to label16 with label55;
        catch java.io.IOException from label17 to label18 with label52;
        catch android.system.ErrnoException from label17 to label18 with label52;
        catch java.lang.Throwable from label17 to label18 with label55;
        catch java.io.IOException from label19 to label20 with label52;
        catch android.system.ErrnoException from label19 to label20 with label52;
        catch java.lang.Throwable from label19 to label20 with label55;
        catch java.io.IOException from label21 to label22 with label52;
        catch android.system.ErrnoException from label21 to label22 with label52;
        catch java.lang.Throwable from label21 to label22 with label55;
        catch java.io.IOException from label23 to label24 with label52;
        catch android.system.ErrnoException from label23 to label24 with label52;
        catch java.lang.Throwable from label23 to label24 with label55;
        catch java.io.IOException from label25 to label26 with label52;
        catch android.system.ErrnoException from label25 to label26 with label52;
        catch java.lang.Throwable from label25 to label26 with label55;
        catch java.io.IOException from label27 to label28 with label52;
        catch android.system.ErrnoException from label27 to label28 with label52;
        catch java.lang.Throwable from label27 to label28 with label55;
        catch java.io.IOException from label29 to label30 with label52;
        catch android.system.ErrnoException from label29 to label30 with label52;
        catch java.lang.Throwable from label29 to label30 with label55;
        catch java.io.IOException from label31 to label32 with label52;
        catch android.system.ErrnoException from label31 to label32 with label52;
        catch java.lang.Throwable from label31 to label32 with label55;
        catch java.io.IOException from label33 to label34 with label52;
        catch android.system.ErrnoException from label33 to label34 with label52;
        catch java.lang.Throwable from label33 to label34 with label55;
        catch java.io.IOException from label36 to label37 with label52;
        catch android.system.ErrnoException from label36 to label37 with label52;
        catch java.lang.Throwable from label36 to label37 with label55;
        catch java.io.IOException from label38 to label39 with label52;
        catch android.system.ErrnoException from label38 to label39 with label52;
        catch java.lang.Throwable from label38 to label39 with label55;
        catch java.io.IOException from label40 to label41 with label52;
        catch android.system.ErrnoException from label40 to label41 with label52;
        catch java.lang.Throwable from label40 to label41 with label55;
        catch java.io.IOException from label42 to label43 with label52;
        catch android.system.ErrnoException from label42 to label43 with label52;
        catch java.lang.Throwable from label42 to label43 with label55;
        catch java.io.IOException from label44 to label45 with label52;
        catch android.system.ErrnoException from label44 to label45 with label52;
        catch java.lang.Throwable from label44 to label45 with label55;
        catch java.io.IOException from label46 to label47 with label52;
        catch android.system.ErrnoException from label46 to label47 with label52;
        catch java.lang.Throwable from label46 to label47 with label55;
        catch java.io.IOException from label48 to label49 with label52;
        catch android.system.ErrnoException from label48 to label49 with label52;
        catch java.lang.Throwable from label48 to label49 with label55;
        catch java.io.IOException from label50 to label51 with label52;
        catch android.system.ErrnoException from label50 to label51 with label52;
        catch java.lang.Throwable from label50 to label51 with label55;
        catch java.lang.Throwable from label53 to label54 with label55;
    }

    void releaseNetId(int)
    {
        com.android.server.IpSecService r0;
        int i0;
        android.util.SparseBooleanArray r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.IpSecService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.IpSecService: android.util.SparseBooleanArray mTunnelNetIds>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.IpSecService: android.util.SparseBooleanArray mTunnelNetIds>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void delete(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void releaseSecurityParameterIndex(int) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        int i0, $i1;
        com.android.server.IpSecService$UserResourceTracker $r2;
        com.android.server.IpSecService$UserRecord $r3;
        com.android.server.IpSecService$RefcountedResourceArray $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.IpSecService;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke $r2.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i1);

        $r4 = $r3.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mSpiRecords>;

        specialinvoke r0.<com.android.server.IpSecService: void releaseResource(com.android.server.IpSecService$RefcountedResourceArray,int)>($r4, i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeAddressFromTunnelInterface(int, android.net.LinkAddress, java.lang.String)
    {
        com.android.server.IpSecService r0;
        int i0, $i1, $i2;
        com.android.server.IpSecService$UserResourceTracker $r1;
        com.android.server.IpSecService$UserRecord $r2;
        com.android.server.IpSecService$RefcountedResourceArray $r3;
        com.android.server.IpSecService$IResource $r4;
        com.android.server.IpSecService$IpSecServiceConfiguration $r5;
        android.net.INetd $r6;
        java.lang.String $r7, $r9, r14;
        java.net.InetAddress $r8;
        java.lang.Throwable $r10;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;
        android.net.LinkAddress r13;
        com.android.server.IpSecService$TunnelInterfaceRecord r15;

        r0 := @this: com.android.server.IpSecService;

        i0 := @parameter0: int;

        r13 := @parameter1: android.net.LinkAddress;

        r14 := @parameter2: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.IpSecService: void enforceTunnelFeatureAndPermissions(java.lang.String)>(r14);

        $r1 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$UserResourceTracker mUserResourceTracker>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>($i1);

        $r3 = $r2.<com.android.server.IpSecService$UserRecord: com.android.server.IpSecService$RefcountedResourceArray mTunnelInterfaceRecords>;

        $r4 = virtualinvoke $r3.<com.android.server.IpSecService$RefcountedResourceArray: com.android.server.IpSecService$IResource getResourceOrThrow(int)>(i0);

        r15 = (com.android.server.IpSecService$TunnelInterfaceRecord) $r4;

     label2:
        $r5 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        $r6 = interfaceinvoke $r5.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

        $r7 = staticinvoke <com.android.server.IpSecService$TunnelInterfaceRecord: java.lang.String access$200(com.android.server.IpSecService$TunnelInterfaceRecord)>(r15);

        $r8 = virtualinvoke r13.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $r9 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke r13.<android.net.LinkAddress: int getPrefixLength()>();

        interfaceinvoke $r6.<android.net.INetd: void interfaceDelAddress(java.lang.String,java.lang.String,int)>($r7, $r9, $i2);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r11 := @caughtexception;

     label5:
        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label6:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void removeTransportModeTransforms(android.os.ParcelFileDescriptor) throws android.os.RemoteException
    {
        com.android.server.IpSecService r0;
        com.android.server.IpSecService$IpSecServiceConfiguration $r1;
        android.net.INetd $r2;
        java.lang.Throwable $r3;
        android.os.ParcelFileDescriptor r4;

        r0 := @this: com.android.server.IpSecService;

        r4 := @parameter0: android.os.ParcelFileDescriptor;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.IpSecService: com.android.server.IpSecService$IpSecServiceConfiguration mSrvConfig>;

        $r2 = interfaceinvoke $r1.<com.android.server.IpSecService$IpSecServiceConfiguration: android.net.INetd getNetdInstance()>();

        interfaceinvoke $r2.<android.net.INetd: void ipSecRemoveTransportModeTransform(android.os.ParcelFileDescriptor)>(r4);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int reserveNetId()
    {
        com.android.server.IpSecService r0;
        android.util.SparseBooleanArray r1, $r4, $r5;
        int i0, i1, $i2, $i3, i4;
        java.lang.IllegalStateException $r3;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.IpSecService;

        r1 = r0.<com.android.server.IpSecService: android.util.SparseBooleanArray mTunnelNetIds>;

        entermonitor r1;

        i4 = 0;

     label01:
        if i4 >= 1024 goto label08;

     label02:
        $i2 = r0.<com.android.server.IpSecService: int mNextTunnelNetIdIndex>;

        i0 = 64512 + $i2;

        $i3 = r0.<com.android.server.IpSecService: int mNextTunnelNetIdIndex>;

        i1 = $i3 + 1;

        r0.<com.android.server.IpSecService: int mNextTunnelNetIdIndex> = i1;

     label03:
        if i1 < 1024 goto label05;

     label04:
        r0.<com.android.server.IpSecService: int mNextTunnelNetIdIndex> = 0;

     label05:
        $r4 = r0.<com.android.server.IpSecService: android.util.SparseBooleanArray mTunnelNetIds>;

        $z0 = virtualinvoke $r4.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z0 != 0 goto label07;

        $r5 = r0.<com.android.server.IpSecService: android.util.SparseBooleanArray mTunnelNetIds>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        exitmonitor r1;

     label06:
        return i0;

     label07:
        i4 = i4 + 1;

        goto label01;

     label08:
        exitmonitor r1;

     label09:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No free netIds to allocate");

        throw $r3;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void systemReady()
    {
        com.android.server.IpSecService r0;
        boolean $z0;

        r0 := @this: com.android.server.IpSecService;

        $z0 = virtualinvoke r0.<com.android.server.IpSecService: boolean isNetdAlive()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("IpSecService", "IpSecService is ready");

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("IpSecService", "IpSecService not ready: failed to connect to NetD Native Service!");

     label2:
        return;
    }

    void validateAlgorithms(android.net.IpSecConfig) throws java.lang.IllegalArgumentException
    {
        com.android.server.IpSecService r0;
        android.net.IpSecAlgorithm r1, r2, r4;
        boolean $z1, $z2, $z3, z4, z5, z6, z7, z8;
        android.net.IpSecConfig r3;

        r0 := @this: com.android.server.IpSecService;

        r3 := @parameter0: android.net.IpSecConfig;

        r1 = virtualinvoke r3.<android.net.IpSecConfig: android.net.IpSecAlgorithm getAuthentication()>();

        r2 = virtualinvoke r3.<android.net.IpSecConfig: android.net.IpSecAlgorithm getEncryption()>();

        r4 = virtualinvoke r3.<android.net.IpSecConfig: android.net.IpSecAlgorithm getAuthenticatedEncryption()>();

        if r4 != null goto label02;

        if r2 != null goto label02;

        if r1 == null goto label01;

        goto label02;

     label01:
        z4 = 0;

        goto label03;

     label02:
        z4 = 1;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "No Encryption or Authentication algorithms specified");

        if r1 == null goto label05;

        $z3 = virtualinvoke r1.<android.net.IpSecAlgorithm: boolean isAuthentication()>();

        if $z3 == 0 goto label04;

        goto label05;

     label04:
        z5 = 0;

        goto label06;

     label05:
        z5 = 1;

     label06:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "Unsupported algorithm for Authentication");

        if r2 == null goto label08;

        $z2 = virtualinvoke r2.<android.net.IpSecAlgorithm: boolean isEncryption()>();

        if $z2 == 0 goto label07;

        goto label08;

     label07:
        z6 = 0;

        goto label09;

     label08:
        z6 = 1;

     label09:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z6, "Unsupported algorithm for Encryption");

        if r4 == null goto label11;

        $z1 = virtualinvoke r4.<android.net.IpSecAlgorithm: boolean isAead()>();

        if $z1 == 0 goto label10;

        goto label11;

     label10:
        z7 = 0;

        goto label12;

     label11:
        z7 = 1;

     label12:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z7, "Unsupported algorithm for Authenticated Encryption");

        if r4 == null goto label13;

        z8 = 0;

        if r1 != null goto label14;

        z8 = 0;

        if r2 != null goto label14;

     label13:
        z8 = 1;

     label14:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z8, "Authenticated Encryption is mutually exclusive with other Authentication or Encryption algorithms");

        return;
    }
}
