public class com.android.server.NetworkManagementService extends android.os.INetworkManagementService$Stub
{
    static final int DAEMON_MSG_MOBILE_CONN_REAL_TIME_INFO;
    private static final boolean DBG;
    public static final java.lang.String LIMIT_GLOBAL_ALERT;
    private static final int MAX_UID_RANGES_PER_COMMAND;
    static final boolean MODIFY_OPERATION_ADD;
    static final boolean MODIFY_OPERATION_REMOVE;
    private static final java.lang.String TAG;
    private java.util.HashMap mActiveAlerts;
    private java.util.HashMap mActiveIdleTimers;
    private java.util.HashMap mActiveQuotas;
    private com.android.internal.app.IBatteryStats mBatteryStats;
    private final android.content.Context mContext;
    private final android.os.Handler mDaemonHandler;
    private volatile boolean mDataSaverMode;
    final android.util.SparseBooleanArray mFirewallChainStates;
    private volatile boolean mFirewallEnabled;
    private final java.lang.Object mIdleTimerLock;
    private int mLastPowerStateFromRadio;
    private int mLastPowerStateFromWifi;
    private boolean mMobileActivityFromRadio;
    private android.net.INetd mNetdService;
    private final com.android.server.NetworkManagementService$NetdUnsolicitedEventListener mNetdUnsolicitedEventListener;
    private boolean mNetworkActive;
    private final android.os.RemoteCallbackList mNetworkActivityListeners;
    private final android.os.RemoteCallbackList mObservers;
    private final java.lang.Object mQuotaLock;
    private final java.lang.Object mRulesLock;
    private final com.android.server.NetworkManagementService$SystemServices mServices;
    private volatile boolean mStrictEnabled;
    private final java.util.HashMap mTetheringStatsProviders;
    private android.util.SparseBooleanArray mUidAllowOnMetered;
    private android.util.SparseIntArray mUidCleartextPolicy;
    private android.util.SparseIntArray mUidFirewallDozableRules;
    private android.util.SparseIntArray mUidFirewallPowerSaveRules;
    private android.util.SparseIntArray mUidFirewallRules;
    private android.util.SparseIntArray mUidFirewallStandbyRules;
    private android.util.SparseBooleanArray mUidRejectOnMetered;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.NetworkManagementService: java.lang.String TAG> = "NetworkManagement";

        <com.android.server.NetworkManagementService: boolean MODIFY_OPERATION_REMOVE> = 0;

        <com.android.server.NetworkManagementService: boolean MODIFY_OPERATION_ADD> = 1;

        <com.android.server.NetworkManagementService: int MAX_UID_RANGES_PER_COMMAND> = 10;

        <com.android.server.NetworkManagementService: java.lang.String LIMIT_GLOBAL_ALERT> = "globalAlert";

        <com.android.server.NetworkManagementService: int DAEMON_MSG_MOBILE_CONN_REAL_TIME_INFO> = 1;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("NetworkManagement", 3);

        <com.android.server.NetworkManagementService: boolean DBG> = $z0;

        return;
    }

    void <init>()
    {
        com.android.server.NetworkManagementService r0;
        android.os.RemoteCallbackList $r1, $r17;
        java.util.HashMap $r2, $r5, $r6, $r16;
        java.lang.Object $r3, $r4, $r15;
        android.util.SparseBooleanArray $r7, $r8, $r14;
        android.util.SparseIntArray $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.android.server.NetworkManagementService;

        specialinvoke r0.<android.os.INetworkManagementService$Stub: void <init>()>();

        $r1 = new android.os.RemoteCallbackList;

        specialinvoke $r1.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers> = $r1;

        $r2 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock> = $r4;

        $r5 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas> = $r5;

        $r6 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts> = $r6;

        $r7 = new android.util.SparseBooleanArray;

        specialinvoke $r7.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered> = $r7;

        $r8 = new android.util.SparseBooleanArray;

        specialinvoke $r8.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered> = $r8;

        $r9 = new android.util.SparseIntArray;

        specialinvoke $r9.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy> = $r9;

        $r10 = new android.util.SparseIntArray;

        specialinvoke $r10.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallRules> = $r10;

        $r11 = new android.util.SparseIntArray;

        specialinvoke $r11.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallStandbyRules> = $r11;

        $r12 = new android.util.SparseIntArray;

        specialinvoke $r12.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallDozableRules> = $r12;

        $r13 = new android.util.SparseIntArray;

        specialinvoke $r13.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallPowerSaveRules> = $r13;

        $r14 = new android.util.SparseBooleanArray;

        specialinvoke $r14.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mFirewallChainStates> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock> = $r15;

        $r16 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers> = $r16;

        r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio> = 0;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio> = 1;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromWifi> = 1;

        $r17 = new android.os.RemoteCallbackList;

        specialinvoke $r17.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners> = $r17;

        r0.<com.android.server.NetworkManagementService: android.content.Context mContext> = null;

        r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler> = null;

        r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$SystemServices mServices> = null;

        r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$NetdUnsolicitedEventListener mNetdUnsolicitedEventListener> = null;

        return;
    }

    private void <init>(android.content.Context, com.android.server.NetworkManagementService$SystemServices)
    {
        com.android.server.NetworkManagementService r0;
        java.util.HashMap r1, $r3, $r6, $r7, $r17, r29;
        android.os.RemoteCallbackList $r2, $r18;
        java.lang.Object $r4, $r5, $r16;
        android.util.SparseBooleanArray $r8, $r9, $r15;
        android.util.SparseIntArray $r10, $r11, $r12, $r13, $r14;
        android.os.Handler $r19;
        com.android.server.FgThread $r20;
        android.os.Looper $r21;
        com.android.server.NetworkManagementService$NetdUnsolicitedEventListener $r22;
        com.android.server.NetworkManagementService$LocalService $r23;
        com.android.server.NetworkManagementService$SystemServices $r24, r28;
        java.lang.Throwable $r26;
        android.content.Context r27;
        com.android.server.NetworkManagementService$NetdTetheringStatsProvider r30;

        r0 := @this: com.android.server.NetworkManagementService;

        r27 := @parameter0: android.content.Context;

        r28 := @parameter1: com.android.server.NetworkManagementService$SystemServices;

        specialinvoke r0.<android.os.INetworkManagementService$Stub: void <init>()>();

        $r2 = new android.os.RemoteCallbackList;

        specialinvoke $r2.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers> = $r2;

        $r3 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock> = $r5;

        $r6 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas> = $r6;

        $r7 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts> = $r7;

        $r8 = new android.util.SparseBooleanArray;

        specialinvoke $r8.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered> = $r8;

        $r9 = new android.util.SparseBooleanArray;

        specialinvoke $r9.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered> = $r9;

        $r10 = new android.util.SparseIntArray;

        specialinvoke $r10.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy> = $r10;

        $r11 = new android.util.SparseIntArray;

        specialinvoke $r11.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallRules> = $r11;

        $r12 = new android.util.SparseIntArray;

        specialinvoke $r12.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallStandbyRules> = $r12;

        $r13 = new android.util.SparseIntArray;

        specialinvoke $r13.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallDozableRules> = $r13;

        $r14 = new android.util.SparseIntArray;

        specialinvoke $r14.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallPowerSaveRules> = $r14;

        $r15 = new android.util.SparseBooleanArray;

        specialinvoke $r15.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mFirewallChainStates> = $r15;

        $r16 = new java.lang.Object;

        specialinvoke $r16.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock> = $r16;

        $r17 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers> = $r17;

        r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio> = 0;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio> = 1;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromWifi> = 1;

        $r18 = new android.os.RemoteCallbackList;

        specialinvoke $r18.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners> = $r18;

        r0.<com.android.server.NetworkManagementService: android.content.Context mContext> = r27;

        r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$SystemServices mServices> = r28;

        $r19 = new android.os.Handler;

        $r20 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r21 = virtualinvoke $r20.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r19.<android.os.Handler: void <init>(android.os.Looper)>($r21);

        r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler> = $r19;

        $r22 = new com.android.server.NetworkManagementService$NetdUnsolicitedEventListener;

        specialinvoke $r22.<com.android.server.NetworkManagementService$NetdUnsolicitedEventListener: void <init>(com.android.server.NetworkManagementService,com.android.server.NetworkManagementService$1)>(r0, null);

        r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$NetdUnsolicitedEventListener mNetdUnsolicitedEventListener> = $r22;

        $r24 = r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$SystemServices mServices>;

        $r23 = new com.android.server.NetworkManagementService$LocalService;

        specialinvoke $r23.<com.android.server.NetworkManagementService$LocalService: void <init>(com.android.server.NetworkManagementService)>(r0);

        virtualinvoke $r24.<com.android.server.NetworkManagementService$SystemServices: void registerLocalService(com.android.server.NetworkManagementInternal)>($r23);

        r29 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        entermonitor r29;

     label1:
        r1 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        r30 = new com.android.server.NetworkManagementService$NetdTetheringStatsProvider;

        specialinvoke r30.<com.android.server.NetworkManagementService$NetdTetheringStatsProvider: void <init>(com.android.server.NetworkManagementService,com.android.server.NetworkManagementService$1)>(r0, null);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r30, "netd");

        exitmonitor r29;

     label2:
        return;

     label3:
        $r26 := @caughtexception;

     label4:
        exitmonitor r29;

     label5:
        throw $r26;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static void access$1000(com.android.server.NetworkManagementService, java.lang.String, long, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        long l0;
        java.lang.String[] r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r2 := @parameter3: java.lang.String[];

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>(r1, l0, r2);

        return;
    }

    static void access$1100(com.android.server.NetworkManagementService, java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyLimitReached(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1200(com.android.server.NetworkManagementService, int, boolean, long, int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i2;
        boolean z0, z1;
        long l1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        l1 := @parameter3: long;

        i2 := @parameter4: int;

        z1 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceClassActivity(int,boolean,long,int,boolean)>(i0, z0, l1, i2, z1);

        return;
    }

    static android.net.INetd access$1300(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;
        android.net.INetd $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        return $r1;
    }

    static boolean access$1400(com.android.server.NetworkManagementService, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean isNetworkRestrictedInternal(int)>(i0);

        return $z0;
    }

    static boolean access$1502(com.android.server.NetworkManagementService, boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.NetworkManagementService: boolean mDataSaverMode> = z0;

        return z0;
    }

    static void access$1600(com.android.server.NetworkManagementService, int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void setFirewallChainState(int,boolean)>(i0, z0);

        return;
    }

    static java.lang.Object access$1700(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        return $r1;
    }

    static android.util.SparseIntArray access$1800(com.android.server.NetworkManagementService, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.util.SparseIntArray $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray getUidFirewallRulesLR(int)>(i0);

        return $r1;
    }

    static android.util.SparseBooleanArray access$1900(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered>;

        return $r1;
    }

    static android.os.Handler access$200(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler>;

        return $r1;
    }

    static android.util.SparseBooleanArray access$2000(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered>;

        return $r1;
    }

    static void access$300(com.android.server.NetworkManagementService, boolean, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.net.RouteInfo r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.RouteInfo;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyRouteChange(boolean,android.net.RouteInfo)>(z0, r1);

        return;
    }

    static void access$400(com.android.server.NetworkManagementService, java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceLinkStateChanged(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static void access$500(com.android.server.NetworkManagementService, java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceStatusChanged(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static void access$600(com.android.server.NetworkManagementService, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceRemoved(java.lang.String)>(r1);

        return;
    }

    static void access$700(com.android.server.NetworkManagementService, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)>(r1);

        return;
    }

    static void access$800(com.android.server.NetworkManagementService, java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.LinkAddress;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyAddressRemoved(java.lang.String,android.net.LinkAddress)>(r1, r2);

        return;
    }

    static void access$900(com.android.server.NetworkManagementService, java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.LinkAddress;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyAddressUpdated(java.lang.String,android.net.LinkAddress)>(r1, r2);

        return;
    }

    private void applyUidCleartextNetworkPolicy(int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        java.lang.Exception $r6;
        java.lang.IllegalStateException $r7;
        byte b2;
        android.net.INetd $r9;
        android.util.SparseIntArray $r10;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == 0 goto label3;

        if i1 == 1 goto label2;

        if i1 != 2 goto label1;

        b2 = 3;

        goto label4;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown policy ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        b2 = 2;

        goto label4;

     label3:
        b2 = 1;

     label4:
        $r9 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r9.<android.net.INetd: void strictUidCleartextPenalty(int,int)>(i0, b2);

        $r10 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy>;

        virtualinvoke $r10.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch android.os.RemoteException from label4 to label5 with label6;
        catch android.os.ServiceSpecificException from label4 to label5 with label6;
    }

    private void closeSocketsForFirewallChainLocked(int, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        int[] r1, r24;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i12, i14, i15, i16, i17, i18, i19, i20;
        java.lang.Object[] $r2;
        android.net.UidRangeParcel $r3, $r4;
        java.lang.StringBuilder $r5, $r11;
        java.lang.String $r8, $r16, r18;
        java.lang.Throwable $r9, $r17;
        java.lang.Exception $r10;
        android.net.UidRangeParcel[] r20, r23;
        java.lang.Object r21, r26;
        android.util.SparseIntArray r22, r27;
        android.net.INetd $r28;

        r0 := @this: com.android.server.NetworkManagementService;

        i12 := @parameter0: int;

        r18 := @parameter1: java.lang.String;

        i14 = 0;

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label01;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing sockets after enabling chain ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r8);

     label01:
        $i0 = specialinvoke r0.<com.android.server.NetworkManagementService: int getFirewallType(int)>(i12);

        if $i0 != 0 goto label14;

        r20 = newarray (android.net.UidRangeParcel)[1];

        $r4 = staticinvoke <com.android.server.NetworkManagementService: android.net.UidRangeParcel makeUidRangeParcel(int,int)>(10000, 2147483647);

        r20[0] = $r4;

        r21 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r21;

     label02:
        r22 = specialinvoke r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray getUidFirewallRulesLR(int)>(i12);

        $i5 = virtualinvoke r22.<android.util.SparseIntArray: int size()>();

        r1 = newarray (int)[$i5];

     label03:
        i15 = 0;

     label04:
        $i6 = lengthof r1;

        if i15 >= $i6 goto label09;

     label05:
        i16 = i14;

     label06:
        $i8 = virtualinvoke r22.<android.util.SparseIntArray: int valueAt(int)>(i15);

        if $i8 != 1 goto label08;

        $i9 = virtualinvoke r22.<android.util.SparseIntArray: int keyAt(int)>(i15);

        r1[i14] = $i9;

     label07:
        i16 = i14 + 1;

     label08:
        i15 = i15 + 1;

        i14 = i16;

        goto label04;

     label09:
        exitmonitor r21;

     label10:
        r23 = r20;

        r24 = r1;

        $i7 = lengthof r1;

        if i14 == $i7 goto label25;

        r24 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, i14);

        r23 = r20;

        goto label25;

     label11:
        $r17 := @caughtexception;

     label12:
        exitmonitor r21;

     label13:
        throw $r17;

     label14:
        r26 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r26;

     label15:
        r27 = specialinvoke r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray getUidFirewallRulesLR(int)>(i12);

        $i1 = virtualinvoke r27.<android.util.SparseIntArray: int size()>();

        r23 = newarray (android.net.UidRangeParcel)[$i1];

     label16:
        i17 = 0;

        i18 = 0;

     label17:
        $i2 = lengthof r23;

        if i17 >= $i2 goto label22;

     label18:
        i19 = i18;

     label19:
        $i4 = virtualinvoke r27.<android.util.SparseIntArray: int valueAt(int)>(i17);

        if $i4 != 2 goto label21;

        i20 = virtualinvoke r27.<android.util.SparseIntArray: int keyAt(int)>(i17);

        $r3 = staticinvoke <com.android.server.NetworkManagementService: android.net.UidRangeParcel makeUidRangeParcel(int,int)>(i20, i20);

        r23[i18] = $r3;

     label20:
        i19 = i18 + 1;

     label21:
        i17 = i17 + 1;

        i18 = i19;

        goto label17;

     label22:
        exitmonitor r26;

     label23:
        $i3 = lengthof r23;

        if i18 == $i3 goto label24;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r23, i18);

        r23 = (android.net.UidRangeParcel[]) $r2;

        goto label24;

     label24:
        r24 = newarray (int)[0];

     label25:
        $r28 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r28.<android.net.INetd: void socketDestroy(android.net.UidRangeParcel[],int[])>(r23, r24);

     label26:
        goto label28;

     label27:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error closing sockets after enabling chain ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NetworkManagement", $r16);

     label28:
        return;

     label29:
        $r9 := @caughtexception;

     label30:
        exitmonitor r26;

     label31:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label17 to label18 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch android.os.RemoteException from label25 to label26 with label27;
        catch android.os.ServiceSpecificException from label25 to label26 with label27;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    private void connectNativeNetdService()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NetworkManagementService$SystemServices $r2;
        com.android.server.NetworkManagementService$NetdUnsolicitedEventListener $r3;
        boolean $z0;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        android.net.INetd r9;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$SystemServices mServices>;

        r9 = virtualinvoke $r2.<com.android.server.NetworkManagementService$SystemServices: android.net.INetd getNetd()>();

        r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService> = r9;

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$NetdUnsolicitedEventListener mNetdUnsolicitedEventListener>;

        interfaceinvoke r9.<android.net.INetd: void registerUnsolicitedEventListener(android.net.INetdUnsolicitedEventListener)>($r3);

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", "Register unsolicited event listener");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to set Netd unsolicited event listener ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NetworkManagement", $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public static com.android.server.NetworkManagementService create(android.content.Context) throws java.lang.InterruptedException
    {
        android.content.Context r0;
        com.android.server.NetworkManagementService$SystemServices $r1;
        com.android.server.NetworkManagementService $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = new com.android.server.NetworkManagementService$SystemServices;

        specialinvoke $r1.<com.android.server.NetworkManagementService$SystemServices: void <init>()>();

        $r2 = staticinvoke <com.android.server.NetworkManagementService: com.android.server.NetworkManagementService create(android.content.Context,com.android.server.NetworkManagementService$SystemServices)>(r0, $r1);

        return $r2;
    }

    static com.android.server.NetworkManagementService create(android.content.Context, com.android.server.NetworkManagementService$SystemServices) throws java.lang.InterruptedException
    {
        com.android.server.NetworkManagementService$SystemServices r0;
        com.android.server.NetworkManagementService $r1;
        boolean $z0, $z1, $z2;
        android.content.Context r2;

        r2 := @parameter0: android.content.Context;

        r0 := @parameter1: com.android.server.NetworkManagementService$SystemServices;

        $r1 = new com.android.server.NetworkManagementService;

        specialinvoke $r1.<com.android.server.NetworkManagementService: void <init>(android.content.Context,com.android.server.NetworkManagementService$SystemServices)>(r2, r0);

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", "Creating NetworkManagementService");

     label1:
        $z1 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", "Connecting native netd service");

     label2:
        specialinvoke $r1.<com.android.server.NetworkManagementService: void connectNativeNetdService()>();

        $z2 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z2 == 0 goto label3;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", "Connected");

     label3:
        return $r1;
    }

    private void dumpUidFirewallRule(java.io.PrintWriter, java.lang.String, android.util.SparseIntArray)
    {
        com.android.server.NetworkManagementService r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        android.util.SparseIntArray r3;
        int i0, $i1, $i2, $i3, i4;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.util.SparseIntArray;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("UID firewall ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" rule: [");

        i0 = virtualinvoke r3.<android.util.SparseIntArray: int size()>();

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $i1 = virtualinvoke r3.<android.util.SparseIntArray: int keyAt(int)>(i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(":");

        $i2 = virtualinvoke r3.<android.util.SparseIntArray: int valueAt(int)>(i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i2);

        $i3 = i0 - 1;

        if i4 >= $i3 goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(",");

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("]");

        return;
    }

    private void dumpUidRuleOnQuotaLocked(java.io.PrintWriter, java.lang.String, android.util.SparseBooleanArray)
    {
        com.android.server.NetworkManagementService r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        android.util.SparseBooleanArray r3;
        int i0, $i1, $i2, i3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.util.SparseBooleanArray;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("UID bandwith control ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" rule: [");

        i0 = virtualinvoke r3.<android.util.SparseBooleanArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $i1 = virtualinvoke r3.<android.util.SparseBooleanArray: int keyAt(int)>(i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i1);

        $i2 = i0 - 1;

        if i3 >= $i2 goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(",");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("]");

        return;
    }

    private static void enforceSystemUid()
    {
        int $i0;
        java.lang.SecurityException $r0;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label1;

        return;

     label1:
        $r0 = new java.lang.SecurityException;

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>("Only available to AID_SYSTEM");

        throw $r0;
    }

    private java.util.List excludeLinkLocal(java.util.List)
    {
        com.android.server.NetworkManagementService r0;
        java.net.InterfaceAddress r2;
        java.util.ArrayList $r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.net.InetAddress $r5;
        java.util.List r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.NetworkManagementService;

        r6 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.net.InterfaceAddress) $r4;

        $r5 = virtualinvoke r2.<java.net.InterfaceAddress: java.net.InetAddress getAddress()>();

        $z1 = virtualinvoke $r5.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        if $z1 != 0 goto label2;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label2:
        goto label1;

     label3:
        return $r3;
    }

    public static android.net.InterfaceConfiguration fromStableParcel(android.net.InterfaceConfigurationParcel)
    {
        int i0, $i1, i2;
        android.net.InterfaceConfiguration $r1;
        java.lang.String $r2, $r4, $r6;
        android.net.LinkAddress $r3;
        java.net.InetAddress $r5;
        android.net.InterfaceConfigurationParcel r7;
        java.lang.String[] r8;

        r7 := @parameter0: android.net.InterfaceConfigurationParcel;

        $r1 = new android.net.InterfaceConfiguration;

        specialinvoke $r1.<android.net.InterfaceConfiguration: void <init>()>();

        $r2 = r7.<android.net.InterfaceConfigurationParcel: java.lang.String hwAddr>;

        virtualinvoke $r1.<android.net.InterfaceConfiguration: void setHardwareAddress(java.lang.String)>($r2);

        $r3 = new android.net.LinkAddress;

        $r4 = r7.<android.net.InterfaceConfigurationParcel: java.lang.String ipv4Addr>;

        $r5 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>($r4);

        $i1 = r7.<android.net.InterfaceConfigurationParcel: int prefixLength>;

        specialinvoke $r3.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>($r5, $i1);

        virtualinvoke $r1.<android.net.InterfaceConfiguration: void setLinkAddress(android.net.LinkAddress)>($r3);

        r8 = r7.<android.net.InterfaceConfigurationParcel: java.lang.String[] flags>;

        i0 = lengthof r8;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r6 = r8[i2];

        virtualinvoke $r1.<android.net.InterfaceConfiguration: void setFlag(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private com.android.internal.app.IBatteryStats getBatteryStats()
    {
        com.android.server.NetworkManagementService r0;
        com.android.internal.app.IBatteryStats $r1, r5, r6;
        com.android.server.NetworkManagementService$SystemServices $r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats mBatteryStats>;

        if $r1 == null goto label3;

        r5 = r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats mBatteryStats>;

        exitmonitor r0;

     label2:
        return r5;

     label3:
        $r2 = r0.<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService$SystemServices mServices>;

        $r3 = virtualinvoke $r2.<com.android.server.NetworkManagementService$SystemServices: android.os.IBinder getService(java.lang.String)>("batterystats");

        r6 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats mBatteryStats> = r6;

        exitmonitor r0;

     label4:
        return r6;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private java.lang.String getFirewallChainName(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        return "powersave";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad child chain: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return "standby";

     label3:
        return "dozable";
    }

    private boolean getFirewallChainState(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        android.util.SparseBooleanArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mFirewallChainStates>;

        z0 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private java.lang.String getFirewallRuleName(int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, $i2;
        java.lang.String r1;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = specialinvoke r0.<com.android.server.NetworkManagementService: int getFirewallType(int)>(i0);

        if $i2 != 0 goto label2;

        if i1 != 1 goto label1;

        r1 = "allow";

        goto label4;

     label1:
        r1 = "deny";

        goto label4;

     label2:
        if i1 != 2 goto label3;

        r1 = "deny";

        goto label4;

     label3:
        r1 = "allow";

     label4:
        return r1;
    }

    private int getFirewallRuleType(int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, $i1, i2;
        byte b3;

        r0 := @this: com.android.server.NetworkManagementService;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 != 0 goto label3;

        $i1 = specialinvoke r0.<com.android.server.NetworkManagementService: int getFirewallType(int)>(i2);

        if $i1 != 0 goto label1;

        b3 = 2;

        goto label2;

     label1:
        b3 = 1;

     label2:
        return b3;

     label3:
        return i0;
    }

    private int getFirewallType(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.NetworkManagementService: boolean isFirewallEnabled()>();

        $z1 = $z0 ^ 1;

        i1 = (int) $z1;

        return i1;

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 0;
    }

    private android.util.SparseIntArray getUidFirewallRulesLR(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.util.SparseIntArray $r2, $r3, $r4, $r10;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        $r10 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallPowerSaveRules>;

        return $r10;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown chain:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        $r4 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        return $r4;

     label3:
        $r3 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallDozableRules>;

        return $r3;

     label4:
        $r2 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallRules>;

        return $r2;
    }

    private void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        android.os.RemoteCallbackList $r2, $r3, $r4, $r8;
        android.os.IInterface $r5;
        android.net.INetworkManagementEventObserver $r6;
        java.lang.Throwable $r7;
        java.lang.Exception $r9;
        com.android.server.NetworkManagementService$NetworkManagementEventCallback r10;

        r0 := @this: com.android.server.NetworkManagementService;

        r10 := @parameter0: com.android.server.NetworkManagementService$NetworkManagementEventCallback;

        $r2 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r2.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

     label2:
        $r4 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r5 = virtualinvoke $r4.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r6 = (android.net.INetworkManagementEventObserver) $r5;

        interfaceinvoke r10.<com.android.server.NetworkManagementService$NetworkManagementEventCallback: void sendCallback(android.net.INetworkManagementEventObserver)>($r6);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        $r8 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r8.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw $r7;

     label5:
        $r9 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: void finishBroadcast()>();

        return;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.RuntimeException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private boolean isNetworkRestrictedInternal(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, $i3, $i5, $i7;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        android.util.SparseBooleanArray $r2, $r3;
        java.lang.String $r7, $r11, $r16, $r21, $r26;
        android.util.SparseIntArray $r12, $r17, $r22;
        java.lang.Throwable $r27;
        java.lang.StringBuilder r28, r29, r30, r31, r32;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label01:
        $z0 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(2);

        if $z0 == 0 goto label04;

        $r22 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        $i7 = virtualinvoke $r22.<android.util.SparseIntArray: int get(int)>(i0);

        if $i7 != 2 goto label04;

        $z10 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z10 == 0 goto label02;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uid ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restricted because of app standby mode");

        $r26 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r26);

     label02:
        exitmonitor r1;

     label03:
        return 1;

     label04:
        $z1 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(1);

        if $z1 == 0 goto label07;

        $r17 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallDozableRules>;

        $i5 = virtualinvoke $r17.<android.util.SparseIntArray: int get(int)>(i0);

        if $i5 == 1 goto label07;

        $z9 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z9 == 0 goto label05;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uid ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restricted because of device idle mode");

        $r21 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r21);

     label05:
        exitmonitor r1;

     label06:
        return 1;

     label07:
        $z2 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(3);

        if $z2 == 0 goto label10;

        $r12 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallPowerSaveRules>;

        $i3 = virtualinvoke $r12.<android.util.SparseIntArray: int get(int)>(i0);

        if $i3 == 1 goto label10;

        $z8 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z8 == 0 goto label08;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uid ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restricted because of power saver mode");

        $r16 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r16);

     label08:
        exitmonitor r1;

     label09:
        return 1;

     label10:
        $r2 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered>;

        $z3 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z3 == 0 goto label13;

        $z7 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z7 == 0 goto label11;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uid ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restricted because of no metered data in the background");

        $r11 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r11);

     label11:
        exitmonitor r1;

     label12:
        return 1;

     label13:
        $z4 = r0.<com.android.server.NetworkManagementService: boolean mDataSaverMode>;

        if $z4 == 0 goto label16;

        $r3 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered>;

        $z5 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z5 != 0 goto label16;

        $z6 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z6 == 0 goto label14;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uid ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restricted because of data saver mode");

        $r7 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r7);

     label14:
        exitmonitor r1;

     label15:
        return 1;

     label16:
        exitmonitor r1;

     label17:
        return 0;

     label18:
        $r27 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    static void lambda$notifyAddressRemoved$8(java.lang.String, android.net.LinkAddress, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0;
        android.net.LinkAddress r1;
        android.net.INetworkManagementEventObserver r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkAddress;

        r2 := @parameter2: android.net.INetworkManagementEventObserver;

        interfaceinvoke r2.<android.net.INetworkManagementEventObserver: void addressRemoved(java.lang.String,android.net.LinkAddress)>(r0, r1);

        return;
    }

    static void lambda$notifyAddressUpdated$7(java.lang.String, android.net.LinkAddress, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0;
        android.net.LinkAddress r1;
        android.net.INetworkManagementEventObserver r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkAddress;

        r2 := @parameter2: android.net.INetworkManagementEventObserver;

        interfaceinvoke r2.<android.net.INetworkManagementEventObserver: void addressUpdated(java.lang.String,android.net.LinkAddress)>(r0, r1);

        return;
    }

    static void lambda$notifyInterfaceAdded$2(java.lang.String, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.INetworkManagementEventObserver;

        interfaceinvoke r1.<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)>(r0);

        return;
    }

    static void lambda$notifyInterfaceClassActivity$5(int, boolean, long, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        int i0;
        boolean z0;
        long l1;
        android.net.INetworkManagementEventObserver r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        l1 := @parameter2: long;

        r0 := @parameter3: android.net.INetworkManagementEventObserver;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r0.<android.net.INetworkManagementEventObserver: void interfaceClassDataActivityChanged(java.lang.String,boolean,long)>($r1, z0, l1);

        return;
    }

    static void lambda$notifyInterfaceDnsServerInfo$9(java.lang.String, long, java.lang.String[], android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0;
        long l0;
        java.lang.String[] r1;
        android.net.INetworkManagementEventObserver r2;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: android.net.INetworkManagementEventObserver;

        interfaceinvoke r2.<android.net.INetworkManagementEventObserver: void interfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>(r0, l0, r1);

        return;
    }

    static void lambda$notifyInterfaceLinkStateChanged$1(java.lang.String, boolean, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0;
        boolean z0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.INetworkManagementEventObserver;

        interfaceinvoke r1.<android.net.INetworkManagementEventObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>(r0, z0);

        return;
    }

    static void lambda$notifyInterfaceRemoved$3(java.lang.String, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.INetworkManagementEventObserver;

        interfaceinvoke r1.<android.net.INetworkManagementEventObserver: void interfaceRemoved(java.lang.String)>(r0);

        return;
    }

    static void lambda$notifyInterfaceStatusChanged$0(java.lang.String, boolean, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0;
        boolean z0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.INetworkManagementEventObserver;

        interfaceinvoke r1.<android.net.INetworkManagementEventObserver: void interfaceStatusChanged(java.lang.String,boolean)>(r0, z0);

        return;
    }

    static void lambda$notifyLimitReached$4(java.lang.String, java.lang.String, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        java.lang.String r0, r1;
        android.net.INetworkManagementEventObserver r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.INetworkManagementEventObserver;

        interfaceinvoke r2.<android.net.INetworkManagementEventObserver: void limitReached(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    static void lambda$notifyRouteChange$10(android.net.RouteInfo, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        android.net.RouteInfo r0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @parameter0: android.net.RouteInfo;

        r1 := @parameter1: android.net.INetworkManagementEventObserver;

        interfaceinvoke r1.<android.net.INetworkManagementEventObserver: void routeUpdated(android.net.RouteInfo)>(r0);

        return;
    }

    static void lambda$notifyRouteChange$11(android.net.RouteInfo, android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        android.net.RouteInfo r0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @parameter0: android.net.RouteInfo;

        r1 := @parameter1: android.net.INetworkManagementEventObserver;

        interfaceinvoke r1.<android.net.INetworkManagementEventObserver: void routeRemoved(android.net.RouteInfo)>(r0);

        return;
    }

    private static android.net.UidRangeParcel makeUidRangeParcel(int, int)
    {
        int i0, i1;
        android.net.UidRangeParcel $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new android.net.UidRangeParcel;

        specialinvoke $r1.<android.net.UidRangeParcel: void <init>()>();

        $r1.<android.net.UidRangeParcel: int start> = i0;

        $r1.<android.net.UidRangeParcel: int stop> = i1;

        return $r1;
    }

    private void modifyInterfaceForward(boolean, java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        java.lang.String r1, r6;
        android.net.INetd $r2, $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        r6 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if z0 == 0 goto label3;

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void ipfwdAddInterfaceForward(java.lang.String,java.lang.String)>(r6, r1);

     label2:
        goto label4;

     label3:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void ipfwdRemoveInterfaceForward(java.lang.String,java.lang.String)>(r6, r1);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
    }

    private void modifyInterfaceInNetwork(boolean, int, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        int i0;
        android.content.Context $r1;
        android.net.INetd $r2, $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

        if z0 == 0 goto label3;

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void networkAddInterface(int,java.lang.String)>(i0, r6);

     label2:
        goto label4;

     label3:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void networkRemoveInterface(int,java.lang.String)>(i0, r6);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
    }

    private void notifyAddressRemoved(java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;
        com.android.server._$$Lambda$NetworkManagementService$hs6djmKbGd8sG4u1TMglrogNP_s $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.LinkAddress;

        $r3 = new com.android.server._$$Lambda$NetworkManagementService$hs6djmKbGd8sG4u1TMglrogNP_s;

        specialinvoke $r3.<com.android.server._$$Lambda$NetworkManagementService$hs6djmKbGd8sG4u1TMglrogNP_s: void <init>(java.lang.String,android.net.LinkAddress)>(r1, r2);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r3);

        return;
    }

    private void notifyAddressUpdated(java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;
        com.android.server._$$Lambda$NetworkManagementService$Yw12yNgo43yul34SibAKDtttAK8 $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.LinkAddress;

        $r3 = new com.android.server._$$Lambda$NetworkManagementService$Yw12yNgo43yul34SibAKDtttAK8;

        specialinvoke $r3.<com.android.server._$$Lambda$NetworkManagementService$Yw12yNgo43yul34SibAKDtttAK8: void <init>(java.lang.String,android.net.LinkAddress)>(r1, r2);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r3);

        return;
    }

    private void notifyInterfaceAdded(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server._$$Lambda$NetworkManagementService$vX8dVVYxxv3YT9jQuN34bgGgRa8 $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.android.server._$$Lambda$NetworkManagementService$vX8dVVYxxv3YT9jQuN34bgGgRa8;

        specialinvoke $r2.<com.android.server._$$Lambda$NetworkManagementService$vX8dVVYxxv3YT9jQuN34bgGgRa8: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r2);

        return;
    }

    private void notifyInterfaceClassActivity(int, boolean, long, int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i2, $i3, i4, i5, $i6;
        long l1;
        boolean z0, $z1, $z2, $z3, z4, z5, $z6, z7, $z8;
        java.lang.Object r1;
        com.android.internal.app.IBatteryStats $r2, $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5, $r6;
        com.android.server._$$Lambda$NetworkManagementService$D43p3Tqq7B3qaMs9AGb_3j0KZd0 $r9;
        java.util.HashMap $r10;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z4 := @parameter1: boolean;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        z5 := @parameter4: boolean;

        z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i0);

        if z4 == 0 goto label01;

        i4 = 3;

        goto label02;

     label01:
        i4 = 1;

     label02:
        i5 = i4;

        if z0 == 0 goto label09;

        if z5 != 0 goto label03;

        $z3 = r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio>;

        if $z3 == 0 goto label04;

        i4 = r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio>;

        goto label04;

     label03:
        r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio> = 1;

     label04:
        i5 = i4;

        $i6 = r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio>;

        if $i6 == i4 goto label09;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio> = i4;

     label05:
        $r3 = specialinvoke r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats getBatteryStats()>();

        interfaceinvoke $r3.<com.android.internal.app.IBatteryStats: void noteMobileRadioPowerState(int,long,int)>(i4, l1, i2);

     label06:
        goto label08;

     label07:
        $r6 := @caughtexception;

     label08:
        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write_non_chained(int,int,java.lang.String,int)>(12, i2, null, i4);

        i5 = i4;

     label09:
        $z6 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeWifi(int)>(i0);

        if $z6 == 0 goto label14;

        $i3 = r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromWifi>;

        if $i3 == i5 goto label14;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromWifi> = i5;

     label10:
        $r2 = specialinvoke r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats getBatteryStats()>();

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteWifiRadioPowerState(int,long,int)>(i5, l1, i2);

     label11:
        goto label13;

     label12:
        $r5 := @caughtexception;

     label13:
        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write_non_chained(int,int,java.lang.String,int)>(13, i2, null, i5);

     label14:
        if z0 == 0 goto label15;

        if z5 != 0 goto label15;

        $z2 = r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio>;

        if $z2 != 0 goto label16;

     label15:
        $r9 = new com.android.server._$$Lambda$NetworkManagementService$D43p3Tqq7B3qaMs9AGb_3j0KZd0;

        specialinvoke $r9.<com.android.server._$$Lambda$NetworkManagementService$D43p3Tqq7B3qaMs9AGb_3j0KZd0: void <init>(int,boolean,long)>(i0, z4, l1);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r9);

     label16:
        z7 = 0;

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        entermonitor r1;

     label17:
        $r10 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $z8 = virtualinvoke $r10.<java.util.HashMap: boolean isEmpty()>();

        if $z8 == 0 goto label19;

     label18:
        z4 = 1;

     label19:
        $z1 = r0.<com.android.server.NetworkManagementService: boolean mNetworkActive>;

        if $z1 == z4 goto label21;

        r0.<com.android.server.NetworkManagementService: boolean mNetworkActive> = z4;

     label20:
        z7 = z4;

     label21:
        exitmonitor r1;

     label22:
        if z7 == 0 goto label23;

        specialinvoke r0.<com.android.server.NetworkManagementService: void reportNetworkActive()>();

     label23:
        return;

     label24:
        $r4 := @caughtexception;

     label25:
        exitmonitor r1;

     label26:
        throw $r4;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    private void notifyInterfaceDnsServerInfo(java.lang.String, long, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        long l0;
        java.lang.String[] r2;
        com.android.server._$$Lambda$NetworkManagementService$RVCc8O9RWjyrynN9cyM7inAv_fk $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String[];

        $r3 = new com.android.server._$$Lambda$NetworkManagementService$RVCc8O9RWjyrynN9cyM7inAv_fk;

        specialinvoke $r3.<com.android.server._$$Lambda$NetworkManagementService$RVCc8O9RWjyrynN9cyM7inAv_fk: void <init>(java.lang.String,long,java.lang.String[])>(r1, l0, r2);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r3);

        return;
    }

    private void notifyInterfaceLinkStateChanged(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;
        com.android.server._$$Lambda$NetworkManagementService$_L953cbquVj0BMBP1MZlSTm0Umg $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new com.android.server._$$Lambda$NetworkManagementService$_L953cbquVj0BMBP1MZlSTm0Umg;

        specialinvoke $r2.<com.android.server._$$Lambda$NetworkManagementService$_L953cbquVj0BMBP1MZlSTm0Umg: void <init>(java.lang.String,boolean)>(r1, z0);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r2);

        return;
    }

    private void notifyInterfaceRemoved(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        java.util.HashMap $r2, $r4;
        com.android.server._$$Lambda$NetworkManagementService$FsR_UD5xfj4hgrwGdX74wq881Bk $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r6 = new com.android.server._$$Lambda$NetworkManagementService$FsR_UD5xfj4hgrwGdX74wq881Bk;

        specialinvoke $r6.<com.android.server._$$Lambda$NetworkManagementService$FsR_UD5xfj4hgrwGdX74wq881Bk: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r6);

        return;
    }

    private void notifyInterfaceStatusChanged(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;
        com.android.server._$$Lambda$NetworkManagementService$fl14NirBlFUd6eJkGcL0QWd5_w0 $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new com.android.server._$$Lambda$NetworkManagementService$fl14NirBlFUd6eJkGcL0QWd5_w0;

        specialinvoke $r2.<com.android.server._$$Lambda$NetworkManagementService$fl14NirBlFUd6eJkGcL0QWd5_w0: void <init>(java.lang.String,boolean)>(r1, z0);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r2);

        return;
    }

    private void notifyLimitReached(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;
        com.android.server._$$Lambda$NetworkManagementService$xer7k2RLU4mODjrkZqaX89S9gD8 $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new com.android.server._$$Lambda$NetworkManagementService$xer7k2RLU4mODjrkZqaX89S9gD8;

        specialinvoke $r3.<com.android.server._$$Lambda$NetworkManagementService$xer7k2RLU4mODjrkZqaX89S9gD8: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r3);

        return;
    }

    private void notifyRouteChange(boolean, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.net.RouteInfo r1;
        com.android.server._$$Lambda$NetworkManagementService$JKmkb4AIm_PPzQp1XOHOgPPRswo $r2;
        com.android.server._$$Lambda$NetworkManagementService$VhSl9D6THA_3jE0unleMmkHavJ0 $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.RouteInfo;

        if z0 == 0 goto label1;

        $r3 = new com.android.server._$$Lambda$NetworkManagementService$VhSl9D6THA_3jE0unleMmkHavJ0;

        specialinvoke $r3.<com.android.server._$$Lambda$NetworkManagementService$VhSl9D6THA_3jE0unleMmkHavJ0: void <init>(android.net.RouteInfo)>(r1);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r3);

        goto label2;

     label1:
        $r2 = new com.android.server._$$Lambda$NetworkManagementService$JKmkb4AIm_PPzQp1XOHOgPPRswo;

        specialinvoke $r2.<com.android.server._$$Lambda$NetworkManagementService$JKmkb4AIm_PPzQp1XOHOgPPRswo: void <init>(android.net.RouteInfo)>(r1);

        specialinvoke r0.<com.android.server.NetworkManagementService: void invokeForAllObservers(com.android.server.NetworkManagementService$NetworkManagementEventCallback)>($r2);

     label2:
        return;
    }

    private void prepareNativeDaemon()
    {
        com.android.server.NetworkManagementService r0;
        java.lang.Object r1, r2, $r22, $r23, $r25, $r33, $r34, $r36;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, i15, i16, i17, i18, i19, i20, i21, i22, $i23, i24;
        boolean $z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.HashMap $r3, $r4, $r20, $r31, r46, r50;
        android.util.SparseBooleanArray $r5, r53, r54, r56, $r57, r59;
        android.util.SparseIntArray $r6, r61, r62;
        com.android.internal.app.IBatteryStats $r7;
        java.lang.String $r11, $r15, $r19, $r24, $r30, $r35, $r41;
        java.util.Set $r21, $r32;
        java.lang.Long $r26, $r37;
        long $l11, $l13;
        java.lang.Throwable $r42, $r43;
        android.os.RemoteException $r44;
        java.lang.StringBuilder r45, r49, r55, r58, r60;
        java.util.Iterator r47, r51;
        java.util.Map$Entry r48, r52;
        int[] r63;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("net.qtaguid_enabled", "1");

        r0.<com.android.server.NetworkManagementService: boolean mStrictEnabled> = 1;

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mDataSaverMode>;

        virtualinvoke r0.<com.android.server.NetworkManagementService: boolean setDataSaverModeEnabled(boolean)>($z0);

        $r3 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        i15 = virtualinvoke $r3.<java.util.HashMap: int size()>();

     label02:
        if i15 <= 0 goto label07;

     label03:
        $z10 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z10 == 0 goto label04;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pushing ");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active quota rules");

        $r41 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r41);

     label04:
        r46 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $r31 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas> = $r31;

        $r32 = virtualinvoke r46.<java.util.HashMap: java.util.Set entrySet()>();

        r47 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z11 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label07;

        $r33 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.util.Map$Entry) $r33;

        $r34 = interfaceinvoke r48.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r35 = (java.lang.String) $r34;

        $r36 = interfaceinvoke r48.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r37 = (java.lang.Long) $r36;

        $l13 = virtualinvoke $r37.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>($r35, $l13);

     label06:
        goto label05;

     label07:
        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        i16 = virtualinvoke $r4.<java.util.HashMap: int size()>();

     label08:
        if i16 <= 0 goto label13;

     label09:
        $z9 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z9 == 0 goto label10;

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pushing ");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active alert rules");

        $r30 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r30);

     label10:
        r50 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $r20 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts> = $r20;

        $r21 = virtualinvoke r50.<java.util.HashMap: java.util.Set entrySet()>();

        r51 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z12 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label13;

        $r22 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r52 = (java.util.Map$Entry) $r22;

        $r23 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.String) $r23;

        $r25 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (java.lang.Long) $r25;

        $l11 = virtualinvoke $r26.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>($r24, $l11);

     label12:
        goto label11;

     label13:
        r53 = null;

        r54 = null;

     label14:
        r2 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r2;

     label15:
        $r5 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered>;

        i17 = virtualinvoke $r5.<android.util.SparseBooleanArray: int size()>();

     label16:
        if i17 <= 0 goto label19;

     label17:
        $z8 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z8 == 0 goto label18;

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pushing ");

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UIDs to metered blacklist rules");

        $r19 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r19);

     label18:
        r53 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered>;

        r56 = new android.util.SparseBooleanArray;

        specialinvoke r56.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered> = r56;

     label19:
        $r57 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered>;

        i18 = virtualinvoke $r57.<android.util.SparseBooleanArray: int size()>();

     label20:
        if i18 <= 0 goto label23;

     label21:
        $z7 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z7 == 0 goto label22;

        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pushing ");

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UIDs to metered whitelist rules");

        $r15 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r15);

     label22:
        r54 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered>;

        r59 = new android.util.SparseBooleanArray;

        specialinvoke r59.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered> = r59;

     label23:
        exitmonitor r2;

     label24:
        if r53 == null goto label27;

        i19 = 0;

     label25:
        $i7 = virtualinvoke r53.<android.util.SparseBooleanArray: int size()>();

        if i19 >= $i7 goto label27;

        $i8 = virtualinvoke r53.<android.util.SparseBooleanArray: int keyAt(int)>(i19);

        $z6 = virtualinvoke r53.<android.util.SparseBooleanArray: boolean valueAt(int)>(i19);

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)>($i8, $z6);

     label26:
        i19 = i19 + 1;

        goto label25;

     label27:
        if r54 == null goto label30;

        i20 = 0;

     label28:
        $i5 = virtualinvoke r54.<android.util.SparseBooleanArray: int size()>();

        if i20 >= $i5 goto label30;

        $i6 = virtualinvoke r54.<android.util.SparseBooleanArray: int keyAt(int)>(i20);

        $z5 = virtualinvoke r54.<android.util.SparseBooleanArray: boolean valueAt(int)>(i20);

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)>($i6, $z5);

     label29:
        i20 = i20 + 1;

        goto label28;

     label30:
        $r6 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy>;

        i21 = virtualinvoke $r6.<android.util.SparseIntArray: int size()>();

     label31:
        if i21 <= 0 goto label37;

     label32:
        $z4 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z4 == 0 goto label33;

        r60 = new java.lang.StringBuilder;

        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pushing ");

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i21);

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active UID cleartext policies");

        $r11 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r11);

     label33:
        r61 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy>;

        r62 = new android.util.SparseIntArray;

        specialinvoke r62.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy> = r62;

     label34:
        i22 = 0;

     label35:
        $i23 = virtualinvoke r61.<android.util.SparseIntArray: int size()>();

        if i22 >= $i23 goto label37;

        $i2 = virtualinvoke r61.<android.util.SparseIntArray: int keyAt(int)>(i22);

        $i3 = virtualinvoke r61.<android.util.SparseIntArray: int valueAt(int)>(i22);

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>($i2, $i3);

     label36:
        i22 = i22 + 1;

        goto label35;

     label37:
        $z2 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setFirewallEnabled(boolean)>($z2);

     label38:
        i24 = 0;

     label39:
        specialinvoke r0.<com.android.server.NetworkManagementService: void syncFirewallChainLocked(int,java.lang.String)>(0, "");

        specialinvoke r0.<com.android.server.NetworkManagementService: void syncFirewallChainLocked(int,java.lang.String)>(2, "standby ");

        specialinvoke r0.<com.android.server.NetworkManagementService: void syncFirewallChainLocked(int,java.lang.String)>(1, "dozable ");

        specialinvoke r0.<com.android.server.NetworkManagementService: void syncFirewallChainLocked(int,java.lang.String)>(3, "powersave ");

        r63 = newarray (int)[3];

     label40:
        r63[0] = 2;

        r63[1] = 1;

        r63[2] = 3;

     label41:
        i0 = lengthof r63;

     label42:
        if i24 >= i0 goto label45;

        i1 = r63[i24];

     label43:
        $z3 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(i1);

        if $z3 == 0 goto label44;

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setFirewallChainEnabled(int,boolean)>(i1, 1);

     label44:
        i24 = i24 + 1;

        goto label42;

     label45:
        exitmonitor r1;

     label46:
        $r7 = specialinvoke r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats getBatteryStats()>();

        interfaceinvoke $r7.<com.android.internal.app.IBatteryStats: void noteNetworkStatsEnabled()>();

     label47:
        goto label49;

     label48:
        $r44 := @caughtexception;

     label49:
        return;

     label50:
        $r42 := @caughtexception;

     label51:
        exitmonitor r2;

     label52:
        throw $r42;

     label53:
        $r43 := @caughtexception;

     label54:
        exitmonitor r1;

     label55:
        throw $r43;

        catch java.lang.Throwable from label01 to label02 with label53;
        catch java.lang.Throwable from label03 to label04 with label53;
        catch java.lang.Throwable from label04 to label05 with label53;
        catch java.lang.Throwable from label05 to label06 with label53;
        catch java.lang.Throwable from label07 to label08 with label53;
        catch java.lang.Throwable from label09 to label10 with label53;
        catch java.lang.Throwable from label10 to label11 with label53;
        catch java.lang.Throwable from label11 to label12 with label53;
        catch java.lang.Throwable from label14 to label15 with label53;
        catch java.lang.Throwable from label15 to label16 with label50;
        catch java.lang.Throwable from label17 to label18 with label50;
        catch java.lang.Throwable from label18 to label19 with label50;
        catch java.lang.Throwable from label19 to label20 with label50;
        catch java.lang.Throwable from label21 to label22 with label50;
        catch java.lang.Throwable from label22 to label23 with label50;
        catch java.lang.Throwable from label23 to label24 with label50;
        catch java.lang.Throwable from label25 to label26 with label53;
        catch java.lang.Throwable from label28 to label29 with label53;
        catch java.lang.Throwable from label30 to label31 with label53;
        catch java.lang.Throwable from label32 to label33 with label53;
        catch java.lang.Throwable from label33 to label34 with label53;
        catch java.lang.Throwable from label35 to label36 with label53;
        catch java.lang.Throwable from label37 to label38 with label53;
        catch java.lang.Throwable from label39 to label40 with label53;
        catch java.lang.Throwable from label41 to label42 with label53;
        catch java.lang.Throwable from label43 to label44 with label53;
        catch java.lang.Throwable from label45 to label46 with label53;
        catch android.os.RemoteException from label46 to label47 with label48;
        catch java.lang.Throwable from label51 to label52 with label50;
        catch java.lang.Throwable from label52 to label53 with label53;
        catch java.lang.Throwable from label54 to label55 with label53;
    }

    private java.util.ArrayList readRouteList(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Throwable $r3, $r4, $r5, $r6;
        java.lang.String r7, r15;
        java.io.FileInputStream r8, r9, r10;
        java.io.DataInputStream r12;
        java.io.BufferedReader r13;
        java.io.InputStreamReader r14;

        r0 := @this: com.android.server.NetworkManagementService;

        r7 := @parameter0: java.lang.String;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r8 = null;

        r9 = null;

     label01:
        r10 = new java.io.FileInputStream;

     label02:
        r8 = null;

        r9 = null;

     label03:
        specialinvoke r10.<java.io.FileInputStream: void <init>(java.lang.String)>(r7);

     label04:
        r8 = r10;

        r9 = r10;

     label05:
        r12 = new java.io.DataInputStream;

     label06:
        r8 = r10;

        r9 = r10;

     label07:
        specialinvoke r12.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r10);

     label08:
        r8 = r10;

        r9 = r10;

     label09:
        r13 = new java.io.BufferedReader;

     label10:
        r8 = r10;

        r9 = r10;

     label11:
        r14 = new java.io.InputStreamReader;

     label12:
        r8 = r10;

        r9 = r10;

     label13:
        specialinvoke r14.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r12);

     label14:
        r8 = r10;

        r9 = r10;

     label15:
        specialinvoke r13.<java.io.BufferedReader: void <init>(java.io.Reader)>(r14);

     label16:
        r8 = r10;

        r9 = r10;

     label17:
        r15 = virtualinvoke r13.<java.io.BufferedReader: java.lang.String readLine()>();

     label18:
        if r15 == null goto label23;

        r8 = r10;

        r9 = r10;

     label19:
        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i0 == 0 goto label23;

     label20:
        r8 = r10;

        r9 = r10;

     label21:
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r15);

     label22:
        goto label16;

     label23:
        virtualinvoke r10.<java.io.FileInputStream: void close()>();

     label24:
        goto label34;

     label25:
        $r3 := @caughtexception;

        goto label24;

     label26:
        $r4 := @caughtexception;

        if r8 == null goto label30;

     label27:
        virtualinvoke r8.<java.io.FileInputStream: void close()>();

     label28:
        goto label30;

     label29:
        $r6 := @caughtexception;

        goto label28;

     label30:
        throw $r4;

     label31:
        $r5 := @caughtexception;

        if r9 == null goto label34;

     label32:
        virtualinvoke r9.<java.io.FileInputStream: void close()>();

     label33:
        goto label24;

     label34:
        return $r2;

        catch java.io.IOException from label01 to label02 with label31;
        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.io.IOException from label03 to label04 with label31;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.io.IOException from label05 to label06 with label31;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.io.IOException from label07 to label08 with label31;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.io.IOException from label09 to label10 with label31;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.io.IOException from label11 to label12 with label31;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.io.IOException from label13 to label14 with label31;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.io.IOException from label15 to label16 with label31;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.io.IOException from label17 to label18 with label31;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.io.IOException from label19 to label20 with label31;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.io.IOException from label21 to label22 with label31;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.io.IOException from label27 to label28 with label29;
        catch java.io.IOException from label32 to label33 with label25;
    }

    private void reportNetworkActive()
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        android.os.RemoteCallbackList $r1, $r2, $r3, $r7;
        android.os.IInterface $r4;
        android.os.INetworkActivityListener $r5;
        java.lang.Throwable $r6;
        java.lang.Exception $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        i0 = virtualinvoke $r1.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

     label2:
        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        $r4 = virtualinvoke $r3.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r5 = (android.os.INetworkActivityListener) $r4;

        interfaceinvoke $r5.<android.os.INetworkActivityListener: void onNetworkActive()>();

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        $r7 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r7.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw $r6;

     label5:
        $r8 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $r2 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: void finishBroadcast()>();

        return;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.RuntimeException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void setFirewallChainState(int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0;
        java.lang.Object r1;
        android.util.SparseBooleanArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mFirewallChainStates>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setFirewallUidRuleLocked(int, int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i2, i3;
        boolean $z0;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean updateFirewallUidRuleLocked(int,int,int)>(i0, i1, i2);

        if $z0 == 0 goto label4;

        i3 = specialinvoke r0.<com.android.server.NetworkManagementService: int getFirewallRuleType(int,int)>(i0, i2);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void firewallSetUidRule(int,int,int)>(i0, i1, i3);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    private void setUidOnMeteredNetworkList(int, boolean, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0, z1, z2;
        java.lang.Object r1, r12, r14;
        android.content.Context $r2;
        android.net.INetd $r3, $r4, $r5, $r6;
        java.lang.Throwable $r7, $r8, $r10, $r11;
        java.lang.Exception $r9;
        android.util.SparseBooleanArray r13;
        java.lang.IllegalStateException r18;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        r12 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r12;

     label02:
        if z0 == 0 goto label05;

     label03:
        r13 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered>;

     label04:
        goto label06;

     label05:
        r13 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered>;

     label06:
        z2 = virtualinvoke r13.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 0);

        exitmonitor r12;

     label07:
        if z2 != z1 goto label10;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "inetd bandwidth");

     label11:
        if z0 == 0 goto label16;

        if z1 == 0 goto label14;

     label12:
        $r6 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r6.<android.net.INetd: void bandwidthAddNaughtyApp(int)>(i0);

     label13:
        goto label20;

     label14:
        $r5 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r5.<android.net.INetd: void bandwidthRemoveNaughtyApp(int)>(i0);

     label15:
        goto label20;

     label16:
        if z1 == 0 goto label19;

     label17:
        $r4 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r4.<android.net.INetd: void bandwidthAddNiceApp(int)>(i0);

     label18:
        goto label20;

     label19:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void bandwidthRemoveNiceApp(int)>(i0);

     label20:
        r14 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r14;

     label21:
        if z1 == 0 goto label24;

     label22:
        virtualinvoke r13.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

     label23:
        goto label25;

     label24:
        virtualinvoke r13.<android.util.SparseBooleanArray: void delete(int)>(i0);

     label25:
        exitmonitor r14;

     label26:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

     label27:
        exitmonitor r1;

     label28:
        return;

     label29:
        $r8 := @caughtexception;

     label30:
        exitmonitor r14;

     label31:
        throw $r8;

     label32:
        $r11 := @caughtexception;

        goto label35;

     label33:
        $r9 := @caughtexception;

     label34:
        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r9);

        throw r18;

     label35:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

     label36:
        throw $r11;

     label37:
        $r7 := @caughtexception;

     label38:
        exitmonitor r12;

     label39:
        throw $r7;

     label40:
        $r10 := @caughtexception;

     label41:
        exitmonitor r1;

     label42:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label40;
        catch java.lang.Throwable from label03 to label04 with label37;
        catch java.lang.Throwable from label05 to label06 with label37;
        catch java.lang.Throwable from label06 to label07 with label37;
        catch java.lang.Throwable from label08 to label09 with label40;
        catch java.lang.Throwable from label10 to label11 with label40;
        catch android.os.RemoteException from label12 to label13 with label33;
        catch android.os.ServiceSpecificException from label12 to label13 with label33;
        catch java.lang.Throwable from label12 to label13 with label32;
        catch android.os.RemoteException from label14 to label15 with label33;
        catch android.os.ServiceSpecificException from label14 to label15 with label33;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch android.os.RemoteException from label17 to label18 with label33;
        catch android.os.ServiceSpecificException from label17 to label18 with label33;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch android.os.RemoteException from label19 to label20 with label33;
        catch android.os.ServiceSpecificException from label19 to label20 with label33;
        catch java.lang.Throwable from label19 to label20 with label32;
        catch android.os.RemoteException from label20 to label21 with label33;
        catch android.os.ServiceSpecificException from label20 to label21 with label33;
        catch java.lang.Throwable from label20 to label21 with label32;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label25 to label26 with label29;
        catch java.lang.Throwable from label26 to label27 with label40;
        catch java.lang.Throwable from label27 to label28 with label40;
        catch java.lang.Throwable from label30 to label31 with label29;
        catch android.os.RemoteException from label31 to label32 with label33;
        catch android.os.ServiceSpecificException from label31 to label32 with label33;
        catch java.lang.Throwable from label31 to label32 with label32;
        catch java.lang.Throwable from label34 to label35 with label32;
        catch java.lang.Throwable from label35 to label36 with label40;
        catch java.lang.Throwable from label36 to label37 with label40;
        catch java.lang.Throwable from label38 to label39 with label37;
        catch java.lang.Throwable from label39 to label40 with label40;
        catch java.lang.Throwable from label41 to label42 with label40;
    }

    private void syncFirewallChainLocked(int, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        int i0, $i1, $i2, $i3, $i4, i6, $i7;
        android.util.SparseIntArray r1, r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r9, r11;
        java.lang.Throwable $r10;
        java.lang.Object r12;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r11 := @parameter1: java.lang.String;

        r12 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r12;

     label1:
        r1 = specialinvoke r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray getUidFirewallRulesLR(int)>(i0);

        r2 = virtualinvoke r1.<android.util.SparseIntArray: android.util.SparseIntArray clone()>();

        virtualinvoke r1.<android.util.SparseIntArray: void clear()>();

        exitmonitor r12;

     label2:
        $i1 = virtualinvoke r2.<android.util.SparseIntArray: int size()>();

        if $i1 <= 0 goto label5;

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pushing ");

        $i4 = virtualinvoke r2.<android.util.SparseIntArray: int size()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active firewall ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UID rules");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r9);

     label3:
        i6 = 0;

     label4:
        $i7 = virtualinvoke r2.<android.util.SparseIntArray: int size()>();

        if i6 >= $i7 goto label5;

        $i2 = virtualinvoke r2.<android.util.SparseIntArray: int keyAt(int)>(i6);

        $i3 = virtualinvoke r2.<android.util.SparseIntArray: int valueAt(int)>(i6);

        specialinvoke r0.<com.android.server.NetworkManagementService: void setFirewallUidRuleLocked(int,int,int)>(i0, $i2, $i3);

        i6 = i6 + 1;

        goto label4;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r12;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static android.net.InterfaceConfigurationParcel toStableParcel(android.net.InterfaceConfiguration, java.lang.String)
    {
        android.net.InterfaceConfigurationParcel $r1;
        boolean $z0, $z2;
        android.net.LinkAddress $r2, $r5;
        java.net.InetAddress $r3;
        java.lang.String $r4, $r12, r14, r15;
        int $i0;
        java.util.ArrayList $r6;
        java.lang.Iterable $r7;
        java.lang.String[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.Object $r11;
        android.net.InterfaceConfiguration r13;
        java.util.Iterator r17;

        r13 := @parameter0: android.net.InterfaceConfiguration;

        r14 := @parameter1: java.lang.String;

        $r1 = new android.net.InterfaceConfigurationParcel;

        specialinvoke $r1.<android.net.InterfaceConfigurationParcel: void <init>()>();

        $r1.<android.net.InterfaceConfigurationParcel: java.lang.String ifName> = r14;

        r15 = virtualinvoke r13.<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r15);

        if $z0 != 0 goto label1;

        $r1.<android.net.InterfaceConfigurationParcel: java.lang.String hwAddr> = r15;

        goto label2;

     label1:
        $r1.<android.net.InterfaceConfigurationParcel: java.lang.String hwAddr> = "";

     label2:
        $r2 = virtualinvoke r13.<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>();

        $r3 = virtualinvoke $r2.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $r4 = virtualinvoke $r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r1.<android.net.InterfaceConfigurationParcel: java.lang.String ipv4Addr> = $r4;

        $r5 = virtualinvoke r13.<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>();

        $i0 = virtualinvoke $r5.<android.net.LinkAddress: int getPrefixLength()>();

        $r1.<android.net.InterfaceConfigurationParcel: int prefixLength> = $i0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke r13.<android.net.InterfaceConfiguration: java.lang.Iterable getFlags()>();

        r17 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.String) $r11;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label3;

     label4:
        $r8 = newarray (java.lang.String)[0];

        $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.lang.String[]) $r9;

        $r1.<android.net.InterfaceConfigurationParcel: java.lang.String[] flags> = $r10;

        return $r1;
    }

    private static android.net.UidRangeParcel[] toStableParcels(android.net.UidRange[])
    {
        android.net.UidRange[] r0;
        android.net.UidRangeParcel[] r1;
        int $i0, $i1, $i2, $i3, i4;
        android.net.UidRange $r2, $r3;
        android.net.UidRangeParcel $r4;

        r0 := @parameter0: android.net.UidRange[];

        $i0 = lengthof r0;

        r1 = newarray (android.net.UidRangeParcel)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $r2 = r0[i4];

        $i3 = $r2.<android.net.UidRange: int start>;

        $r3 = r0[i4];

        $i2 = $r3.<android.net.UidRange: int stop>;

        $r4 = staticinvoke <com.android.server.NetworkManagementService: android.net.UidRangeParcel makeUidRangeParcel(int,int)>($i3, $i2);

        r1[i4] = $r4;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    private boolean updateFirewallUidRuleLocked(int, int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i2, i3;
        java.lang.Object r1;
        java.lang.String r2, $r11, r15;
        boolean $z0, $z1, $z2, z3;
        java.lang.Throwable $r12;
        android.util.SparseIntArray r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label01:
        r13 = specialinvoke r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray getUidFirewallRulesLR(int)>(i0);

     label02:
        z3 = 0;

     label03:
        i3 = virtualinvoke r13.<android.util.SparseIntArray: int get(int,int)>(i1, 0);

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label04;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("oldRule = ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newRule=");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for uid=");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on chain ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r11);

     label04:
        if i3 != i2 goto label08;

     label05:
        $z2 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z2 == 0 goto label06;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", "!!!!! Skipping change");

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        r2 = specialinvoke r0.<com.android.server.NetworkManagementService: java.lang.String getFirewallRuleName(int,int)>(i0, i2);

        r15 = specialinvoke r0.<com.android.server.NetworkManagementService: java.lang.String getFirewallRuleName(int,int)>(i0, i3);

     label09:
        if i2 != 0 goto label12;

     label10:
        virtualinvoke r13.<android.util.SparseIntArray: void delete(int)>(i1);

     label11:
        goto label13;

     label12:
        virtualinvoke r13.<android.util.SparseIntArray: void put(int,int)>(i1, i2);

     label13:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z1 != 0 goto label15;

     label14:
        z3 = 1;

     label15:
        exitmonitor r1;

     label16:
        return z3;

     label17:
        $r12 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void addIdleTimer(java.lang.String, int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, $r5;
        java.util.HashMap r2, $r4;
        android.content.Context $r3;
        boolean $z0, $z1;
        android.net.INetd $r6;
        java.lang.String $r7, r11;
        java.lang.Throwable $r9;
        java.lang.Exception $r10;
        com.android.server.NetworkManagementService$IdleTimerParams r12, r13;
        android.os.Handler r14;
        com.android.server._$$Lambda$NetworkManagementService$YKgmK_4MuJjN_VLuMBhmJy1eWj4 r15;
        java.lang.IllegalStateException r17;

        r0 := @this: com.android.server.NetworkManagementService;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", "Adding idletimer");

     label01:
        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (com.android.server.NetworkManagementService$IdleTimerParams) $r5;

     label03:
        if r12 == null goto label06;

     label04:
        $i2 = r12.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount>;

        $i3 = $i2 + 1;

        r12.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount> = $i3;

        exitmonitor r1;

     label05:
        return;

     label06:
        $r6 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        interfaceinvoke $r6.<android.net.INetd: void idletimerAddInterface(java.lang.String,int,java.lang.String)>(r11, i0, $r7);

     label07:
        r2 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        r13 = new com.android.server.NetworkManagementService$IdleTimerParams;

        specialinvoke r13.<com.android.server.NetworkManagementService$IdleTimerParams: void <init>(int,int)>(i0, i1);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r13);

        $z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i1);

        if $z1 == 0 goto label08;

        r0.<com.android.server.NetworkManagementService: boolean mNetworkActive> = 0;

     label08:
        r14 = r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler>;

        r15 = new com.android.server._$$Lambda$NetworkManagementService$YKgmK_4MuJjN_VLuMBhmJy1eWj4;

        specialinvoke r15.<com.android.server._$$Lambda$NetworkManagementService$YKgmK_4MuJjN_VLuMBhmJy1eWj4: void <init>(com.android.server.NetworkManagementService,int)>(r0, i1);

        virtualinvoke r14.<android.os.Handler: boolean post(java.lang.Runnable)>(r15);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

     label12:
        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw r17;

     label13:
        $r9 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch android.os.ServiceSpecificException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void addInterfaceToLocalNetwork(java.lang.String, java.util.List)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        java.util.List r2;
        android.net.INetd $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(boolean,int,java.lang.String)>(1, 99, r1);

        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        staticinvoke <android.net.shared.RouteUtils: void addRoutesToLocalNetwork(android.net.INetd,java.lang.String,java.util.List)>($r3, r1, r2);

        return;
    }

    public void addInterfaceToNetwork(java.lang.String, int)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(boolean,int,java.lang.String)>(1, i0, r1);

        return;
    }

    public void addLegacyRouteForNetId(int, android.net.RouteInfo, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        java.lang.String r1, r9, r10;
        android.content.Context $r2;
        boolean $z0;
        android.net.INetd $r3;
        java.net.InetAddress $r4;
        java.lang.Exception $r5;
        java.lang.IllegalStateException $r6;
        android.net.RouteInfo r7;
        android.net.LinkAddress r8;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r7 := @parameter1: android.net.RouteInfo;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        r8 = virtualinvoke r7.<android.net.RouteInfo: android.net.LinkAddress getDestinationLinkAddress()>();

        r1 = virtualinvoke r7.<android.net.RouteInfo: java.lang.String getInterface()>();

        r9 = virtualinvoke r8.<android.net.LinkAddress: java.lang.String toString()>();

        $z0 = virtualinvoke r7.<android.net.RouteInfo: boolean hasGateway()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r7.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r10 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        goto label2;

     label1:
        r10 = "";

     label2:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void networkAddLegacyRoute(int,java.lang.String,java.lang.String,java.lang.String,int)>(i0, r1, r9, r10, i1);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch android.os.ServiceSpecificException from label2 to label3 with label4;
    }

    public void addRoute(int, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.net.RouteInfo r1;
        android.content.Context $r2;
        android.net.shared.RouteUtils$ModifyOperation $r3;
        android.net.INetd $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        $r4 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $r3 = <android.net.shared.RouteUtils$ModifyOperation: android.net.shared.RouteUtils$ModifyOperation ADD>;

        staticinvoke <android.net.shared.RouteUtils: void modifyRoute(android.net.INetd,android.net.shared.RouteUtils$ModifyOperation,int,android.net.RouteInfo)>($r4, $r3, i0, r1);

        return;
    }

    public void addVpnUidRanges(int, android.net.UidRange[])
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r1;
        android.net.INetd $r2;
        android.net.UidRangeParcel[] $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;
        android.net.UidRange[] r6;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.net.UidRange[];

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $r3 = staticinvoke <com.android.server.NetworkManagementService: android.net.UidRangeParcel[] toStableParcels(android.net.UidRange[])>(r6);

        interfaceinvoke $r2.<android.net.INetd: void networkAddUidRanges(int,android.net.UidRangeParcel[])>(i0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void allowProtect(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void networkSetProtectAllow(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void clearDefaultNetId()
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void networkClearDefault()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void clearInterfaceAddresses(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void interfaceClearAddrs(java.lang.String)>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void denyProtect(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void networkSetProtectDeny(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void disableIpv6(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void interfaceSetEnableIPv6(java.lang.String,boolean)>(r5, 0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void disableNat(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r6;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void tetherRemoveForward(java.lang.String,java.lang.String)>(r6, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i0, $i1, $i2, $i3;
        java.util.HashMap $r2, $r4, $r15;
        java.lang.String $r3, $r5, $r13, $r19, r38;
        android.util.SparseBooleanArray $r6, $r7;
        android.util.SparseIntArray $r8, $r9, $r10, $r14;
        java.util.Set $r16;
        java.lang.Object $r17, $r18, $r20, r29, r30, r31, r33;
        java.lang.Throwable $r21, $r22, $r24, $r25;
        android.os.RemoteException $r23;
        java.io.FileDescriptor r26;
        java.io.PrintWriter r27;
        java.lang.String[] r28;
        java.lang.StringBuilder r32;
        java.util.Iterator r34;
        java.util.Map$Entry r35;
        com.android.server.NetworkManagementService$IdleTimerParams r36;
        android.net.INetd r37;

        r0 := @this: com.android.server.NetworkManagementService;

        r26 := @parameter0: java.io.FileDescriptor;

        r27 := @parameter1: java.io.PrintWriter;

        r28 := @parameter2: java.lang.String[];

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r1, "NetworkManagement", r27);

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("mMobileActivityFromRadio=");

        $z1 = r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio>;

        virtualinvoke r27.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>(" mLastPowerStateFromRadio=");

        $i0 = r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio>;

        virtualinvoke r27.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("mNetworkActive=");

        $z2 = r0.<com.android.server.NetworkManagementService: boolean mNetworkActive>;

        virtualinvoke r27.<java.io.PrintWriter: void println(boolean)>($z2);

        r29 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r29;

     label02:
        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("Active quota ifaces: ");

        $r2 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.String toString()>();

        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("Active alert ifaces: ");

        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.String toString()>();

        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("Data saver mode: ");

        $z3 = r0.<com.android.server.NetworkManagementService: boolean mDataSaverMode>;

        virtualinvoke r27.<java.io.PrintWriter: void println(boolean)>($z3);

        r30 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r30;

     label03:
        $r6 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnMetered>;

        specialinvoke r0.<com.android.server.NetworkManagementService: void dumpUidRuleOnQuotaLocked(java.io.PrintWriter,java.lang.String,android.util.SparseBooleanArray)>(r27, "blacklist", $r6);

        $r7 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidAllowOnMetered>;

        specialinvoke r0.<com.android.server.NetworkManagementService: void dumpUidRuleOnQuotaLocked(java.io.PrintWriter,java.lang.String,android.util.SparseBooleanArray)>(r27, "whitelist", $r7);

        exitmonitor r30;

     label04:
        exitmonitor r29;

     label05:
        r31 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r31;

     label06:
        $r8 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallRules>;

        specialinvoke r0.<com.android.server.NetworkManagementService: void dumpUidFirewallRule(java.io.PrintWriter,java.lang.String,android.util.SparseIntArray)>(r27, "", $r8);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("UID firewall standby chain enabled: ");

        $z4 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(2);

        virtualinvoke r27.<java.io.PrintWriter: void println(boolean)>($z4);

        $r9 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        specialinvoke r0.<com.android.server.NetworkManagementService: void dumpUidFirewallRule(java.io.PrintWriter,java.lang.String,android.util.SparseIntArray)>(r27, "standby", $r9);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("UID firewall dozable chain enabled: ");

        $z5 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(1);

        virtualinvoke r27.<java.io.PrintWriter: void println(boolean)>($z5);

        $r10 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallDozableRules>;

        specialinvoke r0.<com.android.server.NetworkManagementService: void dumpUidFirewallRule(java.io.PrintWriter,java.lang.String,android.util.SparseIntArray)>(r27, "dozable", $r10);

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UID firewall powersave chain enabled: ");

        $z6 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(3);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r13 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidFirewallPowerSaveRules>;

        specialinvoke r0.<com.android.server.NetworkManagementService: void dumpUidFirewallRule(java.io.PrintWriter,java.lang.String,android.util.SparseIntArray)>(r27, "powersave", $r14);

        exitmonitor r31;

     label07:
        r33 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        entermonitor r33;

     label08:
        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>("Idle timers:");

        $r15 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.util.Set entrySet()>();

        r34 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z7 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label11;

        $r17 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r17;

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r18 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.String) $r18;

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>($r19);

        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r20 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        r36 = (com.android.server.NetworkManagementService$IdleTimerParams) $r20;

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("    timeout=");

        $i1 = r36.<com.android.server.NetworkManagementService$IdleTimerParams: int timeout>;

        virtualinvoke r27.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>(" type=");

        $i2 = r36.<com.android.server.NetworkManagementService$IdleTimerParams: int type>;

        virtualinvoke r27.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>(" networkCount=");

        $i3 = r36.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount>;

        virtualinvoke r27.<java.io.PrintWriter: void println(int)>($i3);

     label10:
        goto label09;

     label11:
        exitmonitor r33;

     label12:
        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("Firewall enabled: ");

        $z8 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        virtualinvoke r27.<java.io.PrintWriter: void println(boolean)>($z8);

        virtualinvoke r27.<java.io.PrintWriter: void print(java.lang.String)>("Netd service status: ");

        r37 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        if r37 != null goto label13;

        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>("disconnected");

        goto label19;

     label13:
        $z9 = interfaceinvoke r37.<android.net.INetd: boolean isAlive()>();

        if $z9 == 0 goto label15;

     label14:
        r38 = "alive";

        goto label16;

     label15:
        r38 = "dead";

     label16:
        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>(r38);

     label17:
        goto label19;

     label18:
        $r23 := @caughtexception;

        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>("unreachable");

     label19:
        return;

     label20:
        $r22 := @caughtexception;

     label21:
        exitmonitor r33;

     label22:
        throw $r22;

     label23:
        $r25 := @caughtexception;

     label24:
        exitmonitor r31;

     label25:
        throw $r25;

     label26:
        $r24 := @caughtexception;

     label27:
        exitmonitor r30;

     label28:
        throw $r24;

     label29:
        $r21 := @caughtexception;

     label30:
        exitmonitor r29;

     label31:
        throw $r21;

        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch android.os.RemoteException from label13 to label14 with label18;
        catch android.os.RemoteException from label16 to label17 with label18;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label28 to label29 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    public void enableIpv6(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void interfaceSetEnableIPv6(java.lang.String,boolean)>(r5, 1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void enableNat(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r6;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void tetherAddForward(java.lang.String,java.lang.String)>(r6, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public java.lang.String[] getDnsForwarders()
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String[] r5;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        r5 = interfaceinvoke $r2.<android.net.INetd: java.lang.String[] tetherDnsList()>();

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    com.android.server.NetworkManagementService$Injector getInjector()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NetworkManagementService$Injector $r1;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = new com.android.server.NetworkManagementService$Injector;

        specialinvoke $r1.<com.android.server.NetworkManagementService$Injector: void <init>(com.android.server.NetworkManagementService)>(r0);

        return $r1;
    }

    public android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String[] $r1;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5, $r7;
        java.lang.Throwable $r6;
        java.lang.String r8;
        android.net.InterfaceConfigurationParcel r9;
        android.net.InterfaceConfiguration r10;

        r0 := @this: com.android.server.NetworkManagementService;

        r8 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "android.permission.CONNECTIVITY_INTERNAL";

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermissionOr(android.content.Context,java.lang.String[])>($r2, $r1);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        r9 = interfaceinvoke $r3.<android.net.INetd: android.net.InterfaceConfigurationParcel interfaceGetCfg(java.lang.String)>(r8);

     label2:
        r10 = staticinvoke <com.android.server.NetworkManagementService: android.net.InterfaceConfiguration fromStableParcel(android.net.InterfaceConfigurationParcel)>(r9);

     label3:
        return r10;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid InterfaceConfigurationParcel", $r6);

        throw $r7;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public boolean getIpForwardingEnabled() throws java.lang.IllegalStateException
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        z0 = interfaceinvoke $r3.<android.net.INetd: boolean ipfwdEnabled()>();

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public android.net.NetworkStats getNetworkStatsTethering(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        java.util.HashMap r2, $r8, $r15;
        java.util.Iterator r3;
        java.lang.StringBuilder r5;
        android.content.Context $r6;
        android.net.NetworkStats $r7, $r11;
        long $l1;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10, $r16;
        java.lang.Throwable $r12;
        android.os.RemoteException $r13;
        java.lang.String $r17, $r21;
        android.net.ITetheringStatsProvider r22;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r6);

        $r7 = new android.net.NetworkStats;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke $r7.<android.net.NetworkStats: void <init>(long,int)>($l1, 1);

        r2 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        entermonitor r2;

     label01:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r22 = (android.net.ITetheringStatsProvider) $r10;

     label03:
        $r11 = interfaceinvoke r22.<android.net.ITetheringStatsProvider: android.net.NetworkStats getTetherStats(int)>(i0);

        virtualinvoke $r7.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>($r11);

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

     label06:
        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading tethering stats from ");

        $r15 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r22);

        $r17 = (java.lang.String) $r16;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkManagement", $r21);

     label07:
        goto label02;

     label08:
        exitmonitor r2;

     label09:
        return $r7;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean isBandwidthControlEnabled()
    {
        com.android.server.NetworkManagementService r0;

        r0 := @this: com.android.server.NetworkManagementService;

        return 1;
    }

    public boolean isFirewallEnabled()
    {
        com.android.server.NetworkManagementService r0;
        boolean $z0;

        r0 := @this: com.android.server.NetworkManagementService;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        return $z0;
    }

    public boolean isNetworkActive()
    {
        com.android.server.NetworkManagementService r0;
        android.os.RemoteCallbackList r1;
        boolean $z0, $z1, z2;
        java.util.HashMap $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.NetworkManagementService: boolean mNetworkActive>;

        if $z0 != 0 goto label4;

        $r3 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $z1 = virtualinvoke $r3.<java.util.HashMap: boolean isEmpty()>();

        if $z1 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z2 = 0;

        goto label5;

     label4:
        z2 = 1;

     label5:
        exitmonitor r1;

     label6:
        return z2;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isNetworkRestricted(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.OBSERVE_NETWORK_POLICY", "NetworkManagement");

        $z0 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean isNetworkRestrictedInternal(int)>(i0);

        return $z0;
    }

    public boolean isTetheringStarted()
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        z0 = interfaceinvoke $r3.<android.net.INetd: boolean tetherIsEnabled()>();

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void lambda$addIdleTimer$12$NetworkManagementService(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceClassActivity(int,boolean,long,int,boolean)>(i0, 1, $l1, -1, 0);

        return;
    }

    public void lambda$removeIdleTimer$13$NetworkManagementService(com.android.server.NetworkManagementService$IdleTimerParams)
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NetworkManagementService$IdleTimerParams r1;
        int $i0;
        long $l1;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: com.android.server.NetworkManagementService$IdleTimerParams;

        $i0 = r1.<com.android.server.NetworkManagementService$IdleTimerParams: int type>;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceClassActivity(int,boolean,long,int,boolean)>($i0, 0, $l1, -1, 0);

        return;
    }

    public void lambda$tetherLimitReached$6$NetworkManagementService()
    {
        com.android.server.NetworkManagementService r0;

        r0 := @this: com.android.server.NetworkManagementService;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyLimitReached(java.lang.String,java.lang.String)>("globalAlert", null);

        return;
    }

    public java.lang.String[] listInterfaces()
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String[] $r1, r6;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "android.permission.CONNECTIVITY_INTERNAL";

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermissionOr(android.content.Context,java.lang.String[])>($r2, $r1);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        r6 = interfaceinvoke $r3.<android.net.INetd: java.lang.String[] interfaceGetList()>();

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public java.lang.String[] listTetheredInterfaces()
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String[] r5;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        r5 = interfaceinvoke $r2.<android.net.INetd: java.lang.String[] tetherInterfaceList()>();

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void registerNetworkActivityListener(android.os.INetworkActivityListener)
    {
        com.android.server.NetworkManagementService r0;
        android.os.INetworkActivityListener r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.os.INetworkActivityListener;

        $r2 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return;
    }

    public void registerObserver(android.net.INetworkManagementEventObserver)
    {
        com.android.server.NetworkManagementService r0;
        android.net.INetworkManagementEventObserver r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.net.INetworkManagementEventObserver;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return;
    }

    public void registerTetheringStatsProvider(android.net.ITetheringStatsProvider, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        java.util.HashMap r2, $r5;
        android.content.Context $r3;
        java.lang.Throwable $r7;
        android.net.ITetheringStatsProvider r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r8 := @parameter0: android.net.ITetheringStatsProvider;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        r2 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeIdleTimer(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.Object r1, $r5;
        int i0, $i1, $i2, $i3;
        android.os.Handler r2;
        android.content.Context $r3;
        boolean $z0;
        java.util.HashMap $r4, $r8;
        android.net.INetd $r6;
        java.lang.String $r7, r12;
        java.lang.Throwable $r10;
        java.lang.Exception $r11;
        com.android.server.NetworkManagementService$IdleTimerParams r13;
        com.android.server._$$Lambda$NetworkManagementService$15DusjG2gzn5UASV_lMS3BUUn9c r14;
        java.lang.IllegalStateException r16;

        r0 := @this: com.android.server.NetworkManagementService;

        r12 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", "Removing idletimer");

     label01:
        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (com.android.server.NetworkManagementService$IdleTimerParams) $r5;

     label03:
        if r13 == null goto label12;

     label04:
        $i1 = r13.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount>;

        i0 = $i1 - 1;

        r13.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount> = i0;

     label05:
        if i0 <= 0 goto label06;

        goto label12;

     label06:
        $r6 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $i3 = r13.<com.android.server.NetworkManagementService$IdleTimerParams: int timeout>;

        $i2 = r13.<com.android.server.NetworkManagementService$IdleTimerParams: int type>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke $r6.<android.net.INetd: void idletimerRemoveInterface(java.lang.String,int,java.lang.String)>(r12, $i3, $r7);

     label07:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r12);

        r2 = r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler>;

        r14 = new com.android.server._$$Lambda$NetworkManagementService$15DusjG2gzn5UASV_lMS3BUUn9c;

        specialinvoke r14.<com.android.server._$$Lambda$NetworkManagementService$15DusjG2gzn5UASV_lMS3BUUn9c: void <init>(com.android.server.NetworkManagementService,com.android.server.NetworkManagementService$IdleTimerParams)>(r0, r13);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r14);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r11);

        throw r16;

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r10 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch android.os.ServiceSpecificException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void removeInterfaceAlert(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.Object r1;
        android.content.Context $r3;
        java.util.HashMap $r4, $r6;
        boolean $z0;
        android.net.INetd $r5;
        java.lang.Throwable $r8;
        java.lang.Exception $r9;
        java.lang.String r10;
        java.lang.IllegalStateException r11;

        r0 := @this: com.android.server.NetworkManagementService;

        r10 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r10);

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r5 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r5.<android.net.INetd: void bandwidthRemoveInterfaceAlert(java.lang.String)>(r10);

        $r6 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r10);

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

     label07:
        r11 = new java.lang.IllegalStateException;

        specialinvoke r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r9);

        throw r11;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch android.os.ServiceSpecificException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void removeInterfaceFromLocalNetwork(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(boolean,int,java.lang.String)>(0, 99, r1);

        return;
    }

    public void removeInterfaceFromNetwork(java.lang.String, int)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(boolean,int,java.lang.String)>(0, i0, r1);

        return;
    }

    public void removeInterfaceQuota(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.Object r1, $r15, $r20;
        java.util.Iterator r2;
        android.net.ITetheringStatsProvider r3;
        java.lang.StringBuilder r5;
        android.content.Context $r6;
        java.util.HashMap $r7, $r8, $r10, $r13, $r19, r29;
        boolean $z0, $z1;
        android.net.INetd $r12;
        java.util.Set $r14;
        java.lang.Throwable $r16, $r27;
        android.os.RemoteException $r17;
        java.lang.String $r21, $r25, r28;
        java.lang.Exception $r26;
        java.lang.IllegalStateException r32;

        r0 := @this: com.android.server.NetworkManagementService;

        r28 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r6);

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        $r7 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $z0 = virtualinvoke $r7.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r28);

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r28);

        $r10 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r28);

     label04:
        $r12 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r12.<android.net.INetd: void bandwidthRemoveInterfaceQuota(java.lang.String)>(r28);

     label05:
        r29 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        entermonitor r29;

     label06:
        $r13 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.ITetheringStatsProvider) $r15;

     label08:
        interfaceinvoke r3.<android.net.ITetheringStatsProvider: void setInterfaceQuota(java.lang.String,long)>(r28, -1L);

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

     label11:
        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem removing tethering data limit on provider ");

        $r19 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r21 = (java.lang.String) $r20;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkManagement", $r25);

     label12:
        goto label07;

     label13:
        exitmonitor r29;

     label14:
        exitmonitor r1;

     label15:
        return;

     label16:
        $r16 := @caughtexception;

     label17:
        exitmonitor r29;

     label18:
        throw $r16;

     label19:
        $r26 := @caughtexception;

     label20:
        r32 = new java.lang.IllegalStateException;

        specialinvoke r32.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r26);

        throw r32;

     label21:
        $r27 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch android.os.RemoteException from label04 to label05 with label19;
        catch android.os.ServiceSpecificException from label04 to label05 with label19;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public void removeRoute(int, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.net.RouteInfo r1;
        android.content.Context $r2;
        android.net.shared.RouteUtils$ModifyOperation $r3;
        android.net.INetd $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        $r4 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $r3 = <android.net.shared.RouteUtils$ModifyOperation: android.net.shared.RouteUtils$ModifyOperation REMOVE>;

        staticinvoke <android.net.shared.RouteUtils: void modifyRoute(android.net.INetd,android.net.shared.RouteUtils$ModifyOperation,int,android.net.RouteInfo)>($r4, $r3, i0, r1);

        return;
    }

    public int removeRoutesFromLocalNetwork(java.util.List)
    {
        com.android.server.NetworkManagementService r0;
        java.util.List r1;
        android.content.Context $r2;
        android.net.INetd $r3;
        int $i0;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $i0 = staticinvoke <android.net.shared.RouteUtils: int removeRoutesFromLocalNetwork(android.net.INetd,java.util.List)>($r3, r1);

        return $i0;
    }

    public void removeVpnUidRanges(int, android.net.UidRange[])
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r1;
        android.net.INetd $r2;
        android.net.UidRangeParcel[] $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;
        android.net.UidRange[] r6;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.net.UidRange[];

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $r3 = staticinvoke <com.android.server.NetworkManagementService: android.net.UidRangeParcel[] toStableParcels(android.net.UidRange[])>(r6);

        interfaceinvoke $r2.<android.net.INetd: void networkRemoveUidRanges(int,android.net.UidRangeParcel[])>(i0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setAllowOnlyVpnForUids(boolean, android.net.UidRange[]) throws android.os.ServiceSpecificException
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.net.UidRange[] r1;
        android.content.Context $r2;
        android.net.INetd $r3;
        android.net.UidRangeParcel[] $r4;
        android.os.RemoteException $r5;
        java.lang.StringBuilder $r6, $r16;
        java.lang.String $r10, $r13, $r20, $r23;
        java.lang.RuntimeException $r14;
        android.os.ServiceSpecificException $r15;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.UidRange[];

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        $r4 = staticinvoke <com.android.server.NetworkManagementService: android.net.UidRangeParcel[] toStableParcels(android.net.UidRange[])>(r1);

        interfaceinvoke $r3.<android.net.INetd: void networkRejectNonSecureVpn(boolean,android.net.UidRangeParcel[])>(z0, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAllowOnlyVpnForUids(");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): netd command failed");

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkManagement", $r13, $r5);

        $r14 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r14;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAllowOnlyVpnForUids(");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r20 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): netd command failed");

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkManagement", $r23, $r15);

        throw $r15;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setDataSaverModeEnabled(boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0, z1, $z2, $z3, $z4;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.String $r7, $r10, $r14, $r19;
        java.lang.StringBuilder $r11, r24, r25, r27;
        android.os.RemoteException $r15;
        java.lang.Throwable $r20, $r21;
        java.lang.Object r23;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.NETWORK_SETTINGS", "NetworkManagement");

        $z2 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z2 == 0 goto label01;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDataSaverMode: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r14);

     label01:
        r23 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r23;

     label02:
        $z3 = r0.<com.android.server.NetworkManagementService: boolean mDataSaverMode>;

        if $z3 != z0 goto label04;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDataSaverMode(): already ");

        $z4 = r0.<com.android.server.NetworkManagementService: boolean mDataSaverMode>;

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r10 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("NetworkManagement", $r10);

        exitmonitor r23;

     label03:
        return 1;

     label04:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "bandwidthEnableDataSaver");

     label05:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        z1 = interfaceinvoke $r3.<android.net.INetd: boolean bandwidthEnableDataSaver(boolean)>(z0);

     label06:
        if z1 == 0 goto label09;

     label07:
        r0.<com.android.server.NetworkManagementService: boolean mDataSaverMode> = z0;

     label08:
        goto label10;

     label09:
        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDataSaverMode(");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): netd command silently failed");

        $r7 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("NetworkManagement", $r7);

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        exitmonitor r23;

     label11:
        return z1;

     label12:
        $r21 := @caughtexception;

        goto label17;

     label13:
        $r15 := @caughtexception;

     label14:
        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDataSaverMode(");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): netd command failed");

        $r19 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkManagement", $r19, $r15);

     label15:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        exitmonitor r23;

     label16:
        return 0;

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

     label18:
        throw $r21;

     label19:
        $r20 := @caughtexception;

     label20:
        exitmonitor r23;

     label21:
        throw $r20;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch android.os.RemoteException from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch android.os.RemoteException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label14 to label15 with label12;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void setDefaultNetId(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void networkSetDefault(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setDnsForwarders(android.net.Network, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String[] r1;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;
        android.net.Network r6;
        int i0;

        r0 := @this: com.android.server.NetworkManagementService;

        r6 := @parameter0: android.net.Network;

        r1 := @parameter1: java.lang.String[];

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        if r6 == null goto label1;

        i0 = r6.<android.net.Network: int netId>;

        goto label2;

     label1:
        i0 = 0;

     label2:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void tetherDnsSet(int,java.lang.String[])>(i0, r1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch android.os.ServiceSpecificException from label2 to label3 with label4;
    }

    public void setFirewallChainEnabled(int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0, $z1;
        java.lang.Object r1, r10;
        java.lang.String r2, $r5;
        android.net.INetd $r6;
        java.lang.Throwable $r7, $r8;
        java.lang.Exception $r9;
        java.lang.IllegalStateException r12;
        java.lang.IllegalArgumentException r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        r10 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r10;

     label02:
        $z1 = specialinvoke r0.<com.android.server.NetworkManagementService: boolean getFirewallChainState(int)>(i0);

        if $z1 != z0 goto label05;

        exitmonitor r10;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        specialinvoke r0.<com.android.server.NetworkManagementService: void setFirewallChainState(int,boolean)>(i0, z0);

        exitmonitor r10;

     label06:
        r2 = specialinvoke r0.<com.android.server.NetworkManagementService: java.lang.String getFirewallChainName(int)>(i0);

     label07:
        if i0 == 0 goto label15;

     label08:
        $r6 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r6.<android.net.INetd: void firewallEnableChildChain(int,boolean)>(i0, z0);

     label09:
        if z0 == 0 goto label11;

     label10:
        specialinvoke r0.<com.android.server.NetworkManagementService: void closeSocketsForFirewallChainLocked(int,java.lang.String)>(i0, r2);

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r9 := @caughtexception;

     label14:
        r12 = new java.lang.IllegalStateException;

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r9);

        throw r12;

     label15:
        r13 = new java.lang.IllegalArgumentException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad child chain: ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r13;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r10;

     label18:
        throw $r7;

     label19:
        $r8 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch android.os.ServiceSpecificException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void setFirewallEnabled(boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        java.lang.Exception $r1;
        java.lang.IllegalStateException $r2;
        android.net.INetd r3;
        byte b0;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

     label1:
        r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

     label2:
        if z0 == 0 goto label3;

        b0 = 0;

        goto label4;

     label3:
        b0 = 1;

     label4:
        interfaceinvoke r3.<android.net.INetd: void firewallSetFirewallType(int)>(b0);

        r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled> = z0;

     label5:
        return;

     label6:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.ServiceSpecificException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch android.os.ServiceSpecificException from label4 to label5 with label6;
    }

    public void setFirewallInterfaceRule(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0, $z1;
        android.net.INetd r1;
        java.lang.Exception $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String r4;
        byte b0;

        r0 := @this: com.android.server.NetworkManagementService;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        $z1 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

     label1:
        r1 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 2;

     label4:
        interfaceinvoke r1.<android.net.INetd: void firewallSetInterfaceRule(java.lang.String,int)>(r4, b0);

     label5:
        return;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.ServiceSpecificException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch android.os.ServiceSpecificException from label4 to label5 with label6;
    }

    public void setFirewallUidRule(int, int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i2;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.NetworkManagementService: void setFirewallUidRuleLocked(int,int,int)>(i0, i1, i2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setFirewallUidRules(int, int[], int[])
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, i9, i10, i11, i12, i13;
        java.lang.Object r1, r2;
        android.util.SparseIntArray r3, r4, r19;
        android.net.INetd $r5, $r6, $r7;
        java.lang.String $r10, $r14;
        android.os.RemoteException $r11;
        java.lang.Throwable $r15, $r16;
        int[] r17, r18;
        java.lang.StringBuilder r20, r22;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r17 := @parameter1: int[];

        r18 := @parameter2: int[];

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        r2 = r0.<com.android.server.NetworkManagementService: java.lang.Object mRulesLock>;

        entermonitor r2;

     label02:
        r3 = specialinvoke r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray getUidFirewallRulesLR(int)>(i0);

        r4 = new android.util.SparseIntArray;

        specialinvoke r4.<android.util.SparseIntArray: void <init>()>();

        $i2 = lengthof r17;

        i9 = $i2 - 1;

     label03:
        if i9 < 0 goto label06;

        i10 = r17[i9];

        i1 = r18[i9];

     label04:
        specialinvoke r0.<com.android.server.NetworkManagementService: boolean updateFirewallUidRuleLocked(int,int,int)>(i0, i10, i1);

        virtualinvoke r4.<android.util.SparseIntArray: void put(int,int)>(i10, i1);

     label05:
        i9 = i9 + -1;

        goto label03;

     label06:
        r19 = new android.util.SparseIntArray;

        specialinvoke r19.<android.util.SparseIntArray: void <init>()>();

        $i3 = virtualinvoke r3.<android.util.SparseIntArray: int size()>();

        i11 = $i3 - 1;

     label07:
        if i11 < 0 goto label10;

     label08:
        i12 = virtualinvoke r3.<android.util.SparseIntArray: int keyAt(int)>(i11);

        $i7 = virtualinvoke r4.<android.util.SparseIntArray: int indexOfKey(int)>(i12);

        if $i7 >= 0 goto label09;

        virtualinvoke r19.<android.util.SparseIntArray: void put(int,int)>(i12, 0);

     label09:
        i11 = i11 + -1;

        goto label07;

     label10:
        $i4 = virtualinvoke r19.<android.util.SparseIntArray: int size()>();

        i13 = $i4 - 1;

     label11:
        if i13 < 0 goto label14;

     label12:
        $i6 = virtualinvoke r19.<android.util.SparseIntArray: int keyAt(int)>(i13);

        specialinvoke r0.<com.android.server.NetworkManagementService: boolean updateFirewallUidRuleLocked(int,int,int)>(i0, $i6, 0);

     label13:
        i13 = i13 + -1;

        goto label11;

     label14:
        exitmonitor r2;

     label15:
        if i0 == 1 goto label23;

        if i0 == 2 goto label21;

        if i0 == 3 goto label19;

     label16:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setFirewallUidRules() called on invalid chain: ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r10);

     label17:
        goto label24;

     label18:
        $r11 := @caughtexception;

        goto label25;

     label19:
        $r7 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r7.<android.net.INetd: boolean firewallReplaceUidChain(java.lang.String,boolean,int[])>("fw_powersave", 1, r17);

     label20:
        goto label24;

     label21:
        $r6 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r6.<android.net.INetd: boolean firewallReplaceUidChain(java.lang.String,boolean,int[])>("fw_standby", 0, r17);

     label22:
        goto label24;

     label23:
        $r5 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r5.<android.net.INetd: boolean firewallReplaceUidChain(java.lang.String,boolean,int[])>("fw_dozable", 1, r17);

     label24:
        goto label26;

     label25:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error flushing firewall chain ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkManagement", $r14, $r11);

     label26:
        exitmonitor r1;

     label27:
        return;

     label28:
        $r15 := @caughtexception;

     label29:
        exitmonitor r2;

     label30:
        throw $r15;

     label31:
        $r16 := @caughtexception;

     label32:
        exitmonitor r1;

     label33:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label31;
        catch java.lang.Throwable from label02 to label03 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch android.os.RemoteException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label31;
        catch android.os.RemoteException from label19 to label20 with label18;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch android.os.RemoteException from label21 to label22 with label18;
        catch java.lang.Throwable from label21 to label22 with label31;
        catch android.os.RemoteException from label23 to label24 with label18;
        catch java.lang.Throwable from label23 to label24 with label31;
        catch java.lang.Throwable from label25 to label26 with label31;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.lang.Throwable from label29 to label30 with label28;
        catch java.lang.Throwable from label30 to label31 with label31;
        catch java.lang.Throwable from label32 to label33 with label31;
    }

    public void setGlobalAlert(long)
    {
        com.android.server.NetworkManagementService r0;
        long l0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void bandwidthSetGlobalAlert(long)>(l0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setIPv6AddrGenMode(java.lang.String, int) throws android.os.ServiceSpecificException
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r1;
        android.net.INetd $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void setIPv6AddrGenMode(java.lang.String,int)>(r5, i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setInterfaceAlert(java.lang.String, long)
    {
        com.android.server.NetworkManagementService r0;
        long l0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.StringBuilder r2;
        android.content.Context $r3;
        java.util.HashMap $r4, $r6, $r12;
        java.lang.IllegalStateException $r5, r19, r20;
        java.lang.String $r10, r17;
        android.net.INetd $r11;
        java.lang.Long $r13;
        java.lang.Throwable $r15;
        java.lang.Exception $r16;

        r0 := @this: com.android.server.NetworkManagementService;

        r17 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $z1 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r17);

        if $z1 == 0 goto label12;

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        $r6 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        z0 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r17);

     label02:
        if z0 != 0 goto label08;

     label03:
        $r11 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r11.<android.net.INetd: void bandwidthSetInterfaceAlert(java.lang.String,long)>(r17, l0);

        $r12 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r13);

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r16 := @caughtexception;

     label07:
        r19 = new java.lang.IllegalStateException;

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r16);

        throw r19;

     label08:
        r20 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iface ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already has alert");

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw r20;

     label09:
        $r15 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r15;

     label12:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setting alert requires existing quota on iface");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch android.os.ServiceSpecificException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setInterfaceConfig(java.lang.String, android.net.InterfaceConfiguration)
    {
        com.android.server.NetworkManagementService r0;
        android.net.InterfaceConfiguration r1;
        android.net.LinkAddress r2;
        java.lang.String[] $r3;
        android.content.Context $r4;
        java.lang.IllegalStateException $r5, $r9;
        java.net.InetAddress $r6;
        android.net.INetd $r7;
        java.lang.Exception $r8;
        java.lang.String r10;
        android.net.InterfaceConfigurationParcel r11;

        r0 := @this: com.android.server.NetworkManagementService;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.InterfaceConfiguration;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "android.permission.CONNECTIVITY_INTERNAL";

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermissionOr(android.content.Context,java.lang.String[])>($r4, $r3);

        r2 = virtualinvoke r1.<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>();

        if r2 == null goto label4;

        $r6 = virtualinvoke r2.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        if $r6 == null goto label4;

        r11 = staticinvoke <com.android.server.NetworkManagementService: android.net.InterfaceConfigurationParcel toStableParcel(android.net.InterfaceConfiguration,java.lang.String)>(r1, r10);

     label1:
        $r7 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r7.<android.net.INetd: void interfaceSetCfg(android.net.InterfaceConfigurationParcel)>(r11);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Null LinkAddress given");

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setInterfaceDown(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.InterfaceConfiguration r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        r2 = virtualinvoke r0.<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r1);

        virtualinvoke r2.<android.net.InterfaceConfiguration: void setInterfaceDown()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>(r1, r2);

        return;
    }

    public void setInterfaceIpv6PrivacyExtensions(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void interfaceSetIPv6PrivacyExtensions(java.lang.String,boolean)>(r5, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setInterfaceQuota(java.lang.String, long)
    {
        com.android.server.NetworkManagementService r0;
        long l0;
        java.lang.Object r1, $r17, $r23;
        boolean z0, $z1;
        java.util.Iterator r2;
        android.net.ITetheringStatsProvider r3;
        java.lang.StringBuilder r4, r37;
        android.content.Context $r5;
        java.util.HashMap $r6, $r12, $r15, $r22, r31;
        java.lang.String $r10, $r24, $r28, r30;
        android.net.INetd $r11;
        java.lang.Long $r13;
        java.util.Set $r16;
        java.lang.Throwable $r18, $r19;
        android.os.RemoteException $r20;
        java.lang.Exception $r29;
        java.lang.IllegalStateException r35, r36;

        r0 := @this: com.android.server.NetworkManagementService;

        r30 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r5);

        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label01:
        $r6 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        z0 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r30);

     label02:
        if z0 != 0 goto label20;

     label03:
        $r11 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r11.<android.net.INetd: void bandwidthSetInterfaceQuota(java.lang.String,long)>(r30, l0);

        $r12 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r30, $r13);

     label04:
        r31 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        entermonitor r31;

     label05:
        $r15 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r17 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.ITetheringStatsProvider) $r17;

     label07:
        interfaceinvoke r3.<android.net.ITetheringStatsProvider: void setInterfaceQuota(java.lang.String,long)>(r30, l0);

     label08:
        goto label11;

     label09:
        $r20 := @caughtexception;

     label10:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem setting tethering data limit on provider ");

        $r22 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        $r23 = virtualinvoke $r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r24 = (java.lang.String) $r23;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r28 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkManagement", $r28);

     label11:
        goto label06;

     label12:
        exitmonitor r31;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r19 := @caughtexception;

     label16:
        exitmonitor r31;

     label17:
        throw $r19;

     label18:
        $r29 := @caughtexception;

     label19:
        r35 = new java.lang.IllegalStateException;

        specialinvoke r35.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r29);

        throw r35;

     label20:
        r36 = new java.lang.IllegalStateException;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iface ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already has quota");

        $r10 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw r36;

     label21:
        $r18 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch android.os.RemoteException from label03 to label04 with label18;
        catch android.os.ServiceSpecificException from label03 to label04 with label18;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public void setInterfaceUp(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.InterfaceConfiguration r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        r2 = virtualinvoke r0.<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r1);

        virtualinvoke r2.<android.net.InterfaceConfiguration: void setInterfaceUp()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>(r1, r2);

        return;
    }

    public void setIpForwardingEnabled(boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.content.Context $r2;
        android.net.INetd $r3, $r4;
        java.lang.Exception $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        if z0 == 0 goto label3;

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r4.<android.net.INetd: void ipfwdEnableForwarding(java.lang.String)>("tethering");

     label2:
        goto label4;

     label3:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void ipfwdDisableForwarding(java.lang.String)>("tethering");

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
    }

    public void setMtu(java.lang.String, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r2.<android.net.INetd: void interfaceSetMtu(java.lang.String,int)>(r5, i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setNetworkPermission(int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void networkSetPermissionForNetwork(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setUidCleartextNetworkPolicy(int, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i2, $i3;
        java.lang.Object r1;
        android.util.SparseIntArray $r3, $r4;
        boolean $z0;
        android.content.Context $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 == i0 goto label01;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r5);

     label01:
        r1 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy>;

        i2 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

     label03:
        if i2 != i1 goto label06;

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $z0 = r0.<com.android.server.NetworkManagementService: boolean mStrictEnabled>;

        if $z0 != 0 goto label08;

        $r4 = r0.<com.android.server.NetworkManagementService: android.util.SparseIntArray mUidCleartextPolicy>;

        virtualinvoke $r4.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

        exitmonitor r1;

     label07:
        return;

     label08:
        if i2 == 0 goto label10;

        if i1 == 0 goto label10;

     label09:
        specialinvoke r0.<com.android.server.NetworkManagementService: void applyUidCleartextNetworkPolicy(int,int)>(i0, 0);

     label10:
        specialinvoke r0.<com.android.server.NetworkManagementService: void applyUidCleartextNetworkPolicy(int,int)>(i0, i1);

        exitmonitor r1;

     label11:
        return;

     label12:
        $r6 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setUidMeteredNetworkBlacklist(int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void setUidOnMeteredNetworkList(int,boolean,boolean)>(i0, 1, z0);

        return;
    }

    public void setUidMeteredNetworkWhitelist(int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void setUidOnMeteredNetworkList(int,boolean,boolean)>(i0, 0, z0);

        return;
    }

    public void shutdown()
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SHUTDOWN", "NetworkManagement");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("NetworkManagement", "Shutting down");

        return;
    }

    public void startInterfaceForwarding(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceForward(boolean,java.lang.String,java.lang.String)>(1, r1, r2);

        return;
    }

    public void startTethering(java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String[] r1;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<com.android.server.NetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>(1, r1);

        return;
    }

    public void startTetheringWithConfiguration(boolean, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String[] r5;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        r5 := @parameter1: java.lang.String[];

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        staticinvoke <android.net.shared.NetdUtils: void tetherStart(android.net.INetd,boolean,java.lang.String[])>($r2, z0, r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void stopInterfaceForwarding(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceForward(boolean,java.lang.String,java.lang.String)>(0, r1, r2);

        return;
    }

    public void stopTethering()
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r2;
        android.net.INetd $r3;
        java.lang.Exception $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        interfaceinvoke $r3.<android.net.INetd: void tetherStop()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void systemReady()
    {
        com.android.server.NetworkManagementService r0;
        long l0, l1, $l2;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        $z0 = <com.android.server.NetworkManagementService: boolean DBG>;

        if $z0 == 0 goto label1;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<com.android.server.NetworkManagementService: void prepareNativeDaemon()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prepared in ");

        $l2 = l1 - l0;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagement", $r6);

        return;

     label1:
        specialinvoke r0.<com.android.server.NetworkManagementService: void prepareNativeDaemon()>();

        return;
    }

    public void tetherInterface(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.net.LinkAddress r1;
        android.net.IpPrefix r2;
        android.content.Context $r3;
        android.net.InterfaceConfiguration $r4;
        java.net.InetAddress $r5;
        int $i0;
        android.net.INetd $r6;
        java.lang.Exception $r7;
        java.lang.IllegalStateException $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.NetworkManagementService;

        r9 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

     label1:
        $r4 = virtualinvoke r0.<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r9);

        r1 = virtualinvoke $r4.<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>();

        r2 = new android.net.IpPrefix;

        $r5 = virtualinvoke r1.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $i0 = virtualinvoke r1.<android.net.LinkAddress: int getPrefixLength()>();

        specialinvoke r2.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r5, $i0);

        $r6 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        staticinvoke <android.net.shared.NetdUtils: void tetherInterface(android.net.INetd,java.lang.String,android.net.IpPrefix)>($r6, r9, r2);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void tetherLimitReached(android.net.ITetheringStatsProvider)
    {
        com.android.server.NetworkManagementService r0;
        java.util.HashMap r1, $r4;
        com.android.server._$$Lambda$NetworkManagementService$Hs4ibiwzKmd9u0PZ04vysXRExho r2;
        android.content.Context $r3;
        boolean $z0;
        java.lang.Throwable $r5;
        android.net.ITetheringStatsProvider r6;
        android.os.Handler r7;

        r0 := @this: com.android.server.NetworkManagementService;

        r6 := @parameter0: android.net.ITetheringStatsProvider;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r3);

        r1 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r7 = r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler>;

        r2 = new com.android.server._$$Lambda$NetworkManagementService$Hs4ibiwzKmd9u0PZ04vysXRExho;

        specialinvoke r2.<com.android.server._$$Lambda$NetworkManagementService$Hs4ibiwzKmd9u0PZ04vysXRExho: void <init>(com.android.server.NetworkManagementService)>(r0);

        virtualinvoke r7.<android.os.Handler: boolean post(java.lang.Runnable)>(r2);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void unregisterNetworkActivityListener(android.os.INetworkActivityListener)
    {
        com.android.server.NetworkManagementService r0;
        android.os.INetworkActivityListener r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.os.INetworkActivityListener;

        $r2 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    public void unregisterObserver(android.net.INetworkManagementEventObserver)
    {
        com.android.server.NetworkManagementService r0;
        android.net.INetworkManagementEventObserver r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.net.INetworkManagementEventObserver;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    public void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)
    {
        com.android.server.NetworkManagementService r0;
        java.util.HashMap r1, $r3;
        android.content.Context $r2;
        java.lang.Throwable $r5;
        android.net.ITetheringStatsProvider r6;

        r0 := @this: com.android.server.NetworkManagementService;

        r6 := @parameter0: android.net.ITetheringStatsProvider;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        r1 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mTetheringStatsProviders>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r6);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void untetherInterface(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        android.net.INetd $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

     label1:
        $r2 = r0.<com.android.server.NetworkManagementService: android.net.INetd mNetdService>;

        staticinvoke <android.net.shared.NetdUtils: void untetherInterface(android.net.INetd,java.lang.String)>($r2, r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }
}
