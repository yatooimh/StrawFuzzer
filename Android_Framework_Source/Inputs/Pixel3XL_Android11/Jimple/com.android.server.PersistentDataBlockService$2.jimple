class com.android.server.PersistentDataBlockService$2 extends java.lang.Object implements com.android.server.PersistentDataBlockManagerInternal
{
    final com.android.server.PersistentDataBlockService this$0;

    void <init>(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService$2 r0;
        com.android.server.PersistentDataBlockService r1;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        r1 := @parameter0: com.android.server.PersistentDataBlockService;

        r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private byte[] readInternal(long, int)
    {
        com.android.server.PersistentDataBlockService$2 r0;
        long l0;
        int i1, i2;
        com.android.server.PersistentDataBlockService $r1, $r3, $r6;
        boolean $z0;
        java.lang.IllegalStateException $r2, $r8, r20;
        java.lang.String $r4;
        java.io.DataInputStream $r5;
        java.lang.Throwable $r7, $r9, $r10, $r11;
        java.io.FileInputStream r12;
        java.io.File r13;
        java.lang.Object r15;
        byte[] r16;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $z0 = staticinvoke <com.android.server.PersistentDataBlockService: boolean access$700(com.android.server.PersistentDataBlockService)>($r1);

        if $z0 == 0 goto label17;

     label01:
        r12 = new java.io.FileInputStream;

        r13 = new java.io.File;

        $r3 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $r4 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r3);

        specialinvoke r13.<java.io.File: void <init>(java.lang.String)>($r4);

        specialinvoke r12.<java.io.FileInputStream: void <init>(java.io.File)>(r13);

        $r5 = new java.io.DataInputStream;

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r12);

     label02:
        $r6 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        r15 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$400(com.android.server.PersistentDataBlockService)>($r6);

        entermonitor r15;

     label03:
        virtualinvoke $r5.<java.io.DataInputStream: long skip(long)>(l0);

        i2 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

     label04:
        if i2 <= 0 goto label07;

        if i2 <= i1 goto label05;

        goto label07;

     label05:
        r16 = newarray (byte)[i2];

        virtualinvoke $r5.<java.io.DataInputStream: void readFully(byte[])>(r16);

        exitmonitor r15;

     label06:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r5);

        return r16;

     label07:
        exitmonitor r15;

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r5);

        return null;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r15;

     label11:
        throw $r11;

     label12:
        $r10 := @caughtexception;

        goto label15;

     label13:
        $r9 := @caughtexception;

     label14:
        r20 = new java.lang.IllegalStateException;

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("persistent partition not readable", $r9);

        throw r20;

     label15:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r5);

        throw $r10;

     label16:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("persistent partition not available");

        throw $r8;

     label17:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("invalid checksum");

        throw $r2;

        catch java.io.FileNotFoundException from label01 to label02 with label16;
        catch java.io.IOException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
    }

    private void writeDataBuffer(long, java.nio.ByteBuffer)
    {
        com.android.server.PersistentDataBlockService$2 r0;
        long l0;
        java.nio.channels.FileChannel r2;
        com.android.server.PersistentDataBlockService $r3, $r6, $r7, $r9;
        java.lang.String $r4, $r12, $r15;
        java.io.FileOutputStream $r5;
        boolean $z0;
        java.lang.Throwable $r10, $r11, $r13, $r14;
        java.nio.ByteBuffer r16;
        java.io.File r17;
        java.lang.Object r18;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        l0 := @parameter0: long;

        r16 := @parameter1: java.nio.ByteBuffer;

     label01:
        r17 = new java.io.File;

        $r3 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $r4 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r3);

        specialinvoke r17.<java.io.File: void <init>(java.lang.String)>($r4);

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>(r17);

     label02:
        $r6 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        r18 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$400(com.android.server.PersistentDataBlockService)>($r6);

        entermonitor r18;

     label03:
        $r7 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $z0 = staticinvoke <com.android.server.PersistentDataBlockService: boolean access$500(com.android.server.PersistentDataBlockService)>($r7);

        if $z0 != 0 goto label05;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r5);

        exitmonitor r18;

     label04:
        return;

     label05:
        r2 = virtualinvoke $r5.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke r2.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(l0);

        virtualinvoke r2.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>(r16);

        virtualinvoke $r5.<java.io.FileOutputStream: void flush()>();

     label06:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r5);

     label07:
        $r9 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        staticinvoke <com.android.server.PersistentDataBlockService: boolean access$600(com.android.server.PersistentDataBlockService)>($r9);

        exitmonitor r18;

     label08:
        return;

     label09:
        $r13 := @caughtexception;

        goto label14;

     label10:
        $r14 := @caughtexception;

     label11:
        $r15 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, "unable to access persistent partition", $r14);

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r5);

        exitmonitor r18;

     label13:
        return;

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r5);

     label15:
        throw $r13;

     label16:
        $r10 := @caughtexception;

     label17:
        exitmonitor r18;

     label18:
        throw $r10;

     label19:
        $r11 := @caughtexception;

        $r12 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "partition not available", $r11);

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void writeInternal(byte[], long, int)
    {
        com.android.server.PersistentDataBlockService$2 r0;
        byte[] r1;
        long l0;
        int $i2, $i3, i4, $i5, i6;
        boolean z1, z2;
        java.lang.StringBuilder $r7;
        java.lang.String $r9;
        java.nio.ByteBuffer r10;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        r1 := @parameter0: byte[];

        l0 := @parameter1: long;

        i4 := @parameter2: int;

        if r1 == null goto label2;

        $i3 = lengthof r1;

        if $i3 <= 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "data must be null or non-empty");

        z2 = 1;

        if r1 == null goto label5;

        $i2 = lengthof r1;

        if $i2 > i4 goto label4;

        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data must not be longer than ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, $r9);

        $i5 = i4 + 4;

        r10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i5);

        if r1 != null goto label6;

        i6 = 0;

        goto label7;

     label6:
        i6 = lengthof r1;

     label7:
        virtualinvoke r10.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i6);

        if r1 == null goto label8;

        virtualinvoke r10.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

     label8:
        virtualinvoke r10.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        specialinvoke r0.<com.android.server.PersistentDataBlockService$2: void writeDataBuffer(long,java.nio.ByteBuffer)>(l0, r10);

        return;
    }

    public void clearTestHarnessModeData()
    {
        com.android.server.PersistentDataBlockService$2 r0;
        int i0, $i1, $i3;
        byte[] $r1;
        com.android.server.PersistentDataBlockService $r2;
        long $l2;
        java.nio.ByteBuffer $r3;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        $r1 = virtualinvoke r0.<com.android.server.PersistentDataBlockService$2: byte[] getTestHarnessModeData()>();

        $i1 = lengthof $r1;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>(9996, $i1);

        $r2 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $l2 = staticinvoke <com.android.server.PersistentDataBlockService: long access$1900(com.android.server.PersistentDataBlockService)>($r2);

        $i3 = i0 + 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

        specialinvoke r0.<com.android.server.PersistentDataBlockService$2: void writeDataBuffer(long,java.nio.ByteBuffer)>($l2, $r3);

        return;
    }

    public void forceOemUnlockEnabled(boolean)
    {
        com.android.server.PersistentDataBlockService$2 r0;
        boolean z0;
        java.lang.Object r1;
        com.android.server.PersistentDataBlockService $r3, $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        r1 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$400(com.android.server.PersistentDataBlockService)>($r3);

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        staticinvoke <com.android.server.PersistentDataBlockService: void access$1300(com.android.server.PersistentDataBlockService,boolean)>($r4, z0);

        $r5 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        staticinvoke <com.android.server.PersistentDataBlockService: boolean access$600(com.android.server.PersistentDataBlockService)>($r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getAllowedUid()
    {
        com.android.server.PersistentDataBlockService$2 r0;
        com.android.server.PersistentDataBlockService $r1;
        int $i0;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        $r1 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $i0 = staticinvoke <com.android.server.PersistentDataBlockService: int access$2000(com.android.server.PersistentDataBlockService)>($r1);

        return $i0;
    }

    public byte[] getFrpCredentialHandle()
    {
        com.android.server.PersistentDataBlockService$2 r0;
        com.android.server.PersistentDataBlockService $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        $r1 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $l0 = staticinvoke <com.android.server.PersistentDataBlockService: long access$1800(com.android.server.PersistentDataBlockService)>($r1);

        $r2 = specialinvoke r0.<com.android.server.PersistentDataBlockService$2: byte[] readInternal(long,int)>($l0, 996);

        return $r2;
    }

    public byte[] getTestHarnessModeData()
    {
        com.android.server.PersistentDataBlockService$2 r0;
        byte[] r1, $r3;
        com.android.server.PersistentDataBlockService $r2;
        long $l0;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        $r2 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $l0 = staticinvoke <com.android.server.PersistentDataBlockService: long access$1900(com.android.server.PersistentDataBlockService)>($r2);

        r1 = specialinvoke r0.<com.android.server.PersistentDataBlockService$2: byte[] readInternal(long,int)>($l0, 9996);

        if r1 != null goto label1;

        $r3 = newarray (byte)[0];

        return $r3;

     label1:
        return r1;
    }

    public void setFrpCredentialHandle(byte[])
    {
        com.android.server.PersistentDataBlockService$2 r0;
        byte[] r1;
        com.android.server.PersistentDataBlockService $r2;
        long $l0;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $l0 = staticinvoke <com.android.server.PersistentDataBlockService: long access$1800(com.android.server.PersistentDataBlockService)>($r2);

        specialinvoke r0.<com.android.server.PersistentDataBlockService$2: void writeInternal(byte[],long,int)>(r1, $l0, 996);

        return;
    }

    public void setTestHarnessModeData(byte[])
    {
        com.android.server.PersistentDataBlockService$2 r0;
        byte[] r1;
        com.android.server.PersistentDataBlockService $r2;
        long $l0;

        r0 := @this: com.android.server.PersistentDataBlockService$2;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.server.PersistentDataBlockService$2: com.android.server.PersistentDataBlockService this$0>;

        $l0 = staticinvoke <com.android.server.PersistentDataBlockService: long access$1900(com.android.server.PersistentDataBlockService)>($r2);

        specialinvoke r0.<com.android.server.PersistentDataBlockService$2: void writeInternal(byte[],long,int)>(r1, $l0, 9996);

        return;
    }
}
