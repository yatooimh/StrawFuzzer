public class com.android.server.PersistentDataBlockService extends com.android.server.SystemService
{
    public static final int DIGEST_SIZE_BYTES;
    private static final java.lang.String FLASH_LOCK_LOCKED;
    private static final java.lang.String FLASH_LOCK_PROP;
    private static final java.lang.String FLASH_LOCK_UNLOCKED;
    private static final int FRP_CREDENTIAL_RESERVED_SIZE;
    private static final int HEADER_SIZE;
    private static final int MAX_DATA_BLOCK_SIZE;
    private static final int MAX_FRP_CREDENTIAL_HANDLE_SIZE;
    private static final int MAX_TEST_MODE_DATA_SIZE;
    private static final java.lang.String OEM_UNLOCK_PROP;
    private static final int PARTITION_TYPE_MARKER;
    private static final java.lang.String PERSISTENT_DATA_BLOCK_PROP;
    private static final java.lang.String TAG;
    private static final int TEST_MODE_RESERVED_SIZE;
    private int mAllowedUid;
    private long mBlockDeviceSize;
    private final android.content.Context mContext;
    private final java.lang.String mDataBlockFile;
    private final java.util.concurrent.CountDownLatch mInitDoneSignal;
    private com.android.server.PersistentDataBlockManagerInternal mInternalService;
    private boolean mIsWritable;
    private final java.lang.Object mLock;
    private final android.os.IBinder mService;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.PersistentDataBlockService: int TEST_MODE_RESERVED_SIZE> = 10000;

        <com.android.server.PersistentDataBlockService: java.lang.String PERSISTENT_DATA_BLOCK_PROP> = "ro.frp.pst";

        <com.android.server.PersistentDataBlockService: int PARTITION_TYPE_MARKER> = 428873843;

        <com.android.server.PersistentDataBlockService: java.lang.String OEM_UNLOCK_PROP> = "sys.oem_unlock_allowed";

        <com.android.server.PersistentDataBlockService: int MAX_TEST_MODE_DATA_SIZE> = 9996;

        <com.android.server.PersistentDataBlockService: int MAX_FRP_CREDENTIAL_HANDLE_SIZE> = 996;

        <com.android.server.PersistentDataBlockService: int MAX_DATA_BLOCK_SIZE> = 102400;

        <com.android.server.PersistentDataBlockService: int HEADER_SIZE> = 8;

        <com.android.server.PersistentDataBlockService: int FRP_CREDENTIAL_RESERVED_SIZE> = 1000;

        <com.android.server.PersistentDataBlockService: java.lang.String FLASH_LOCK_UNLOCKED> = "0";

        <com.android.server.PersistentDataBlockService: java.lang.String FLASH_LOCK_PROP> = "ro.boot.flash.locked";

        <com.android.server.PersistentDataBlockService: java.lang.String FLASH_LOCK_LOCKED> = "1";

        <com.android.server.PersistentDataBlockService: int DIGEST_SIZE_BYTES> = 32;

        $r0 = class "Lcom/android/server/PersistentDataBlockService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.PersistentDataBlockService: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.PersistentDataBlockService r0;
        android.content.Context r1;
        java.lang.Object $r2;
        java.util.concurrent.CountDownLatch $r3;
        com.android.server.PersistentDataBlockService$1 $r4;
        com.android.server.PersistentDataBlockService$2 $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.PersistentDataBlockService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.PersistentDataBlockService: java.lang.Object mLock> = $r2;

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.PersistentDataBlockService: java.util.concurrent.CountDownLatch mInitDoneSignal> = $r3;

        r0.<com.android.server.PersistentDataBlockService: int mAllowedUid> = -1;

        r0.<com.android.server.PersistentDataBlockService: boolean mIsWritable> = 1;

        $r4 = new com.android.server.PersistentDataBlockService$1;

        specialinvoke $r4.<com.android.server.PersistentDataBlockService$1: void <init>(com.android.server.PersistentDataBlockService)>(r0);

        r0.<com.android.server.PersistentDataBlockService: android.os.IBinder mService> = $r4;

        $r5 = new com.android.server.PersistentDataBlockService$2;

        specialinvoke $r5.<com.android.server.PersistentDataBlockService$2: void <init>(com.android.server.PersistentDataBlockService)>(r0);

        r0.<com.android.server.PersistentDataBlockService: com.android.server.PersistentDataBlockManagerInternal mInternalService> = $r5;

        r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext> = r1;

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.frp.pst");

        r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile> = $r6;

        r0.<com.android.server.PersistentDataBlockService: long mBlockDeviceSize> = -1L;

        return;
    }

    static void access$000(com.android.server.PersistentDataBlockService, int)
    {
        com.android.server.PersistentDataBlockService r0;
        int i0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void enforceUid(int)>(i0);

        return;
    }

    static long access$100(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        long $l0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $l0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long doGetMaximumDataBlockSize()>();

        return $l0;
    }

    static int access$1000(com.android.server.PersistentDataBlockService, java.lang.String)
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: int nativeWipe(java.lang.String)>(r1);

        return $i0;
    }

    static void access$1100(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void enforceIsAdmin()>();

        return;
    }

    static void access$1200(com.android.server.PersistentDataBlockService, java.lang.String)
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void enforceUserRestriction(java.lang.String)>(r1);

        return;
    }

    static void access$1300(com.android.server.PersistentDataBlockService, boolean)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void doSetOemUnlockEnabledLocked(boolean)>(z0);

        return;
    }

    static void access$1400(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void enforceOemUnlockReadPermission()>();

        return;
    }

    static boolean access$1500(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $z0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: boolean doGetOemUnlockEnabled()>();

        return $z0;
    }

    static android.content.Context access$1600(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $r1 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        return $r1;
    }

    static com.android.server.PersistentDataBlockManagerInternal access$1700(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        com.android.server.PersistentDataBlockManagerInternal $r1;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $r1 = r0.<com.android.server.PersistentDataBlockService: com.android.server.PersistentDataBlockManagerInternal mInternalService>;

        return $r1;
    }

    static long access$1800(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        long $l0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $l0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long getFrpCredentialDataOffset()>();

        return $l0;
    }

    static long access$1900(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        long $l0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $l0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long getTestHarnessModeDataOffset()>();

        return $l0;
    }

    static java.lang.String access$200(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $r1 = r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile>;

        return $r1;
    }

    static int access$2000(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        int $i0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $i0 = r0.<com.android.server.PersistentDataBlockService: int mAllowedUid>;

        return $i0;
    }

    static java.lang.String access$300()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        return $r0;
    }

    static java.lang.Object access$400(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $r1 = r0.<com.android.server.PersistentDataBlockService: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$500(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $z0 = r0.<com.android.server.PersistentDataBlockService: boolean mIsWritable>;

        return $z0;
    }

    static boolean access$502(com.android.server.PersistentDataBlockService, boolean)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.PersistentDataBlockService: boolean mIsWritable> = z0;

        return z0;
    }

    static boolean access$600(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $z0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: boolean computeAndWriteDigestLocked()>();

        return $z0;
    }

    static boolean access$700(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        $z0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: boolean enforceChecksumValidity()>();

        return $z0;
    }

    static int access$800(com.android.server.PersistentDataBlockService, java.io.DataInputStream) throws java.io.IOException
    {
        com.android.server.PersistentDataBlockService r0;
        java.io.DataInputStream r1;
        int $i0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        r1 := @parameter1: java.io.DataInputStream;

        $i0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: int getTotalDataSizeLocked(java.io.DataInputStream)>(r1);

        return $i0;
    }

    static void access$900(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService r0;

        r0 := @parameter0: com.android.server.PersistentDataBlockService;

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void enforceOemUnlockWritePermission()>();

        return;
    }

    private boolean computeAndWriteDigestLocked()
    {
        com.android.server.PersistentDataBlockService r0;
        java.io.File r1;
        java.lang.String $r2, $r5, $r8;
        java.io.DataOutputStream $r3;
        java.lang.Throwable $r4, $r6, $r7;
        byte[] r9;
        java.io.FileOutputStream r10;

        r0 := @this: com.android.server.PersistentDataBlockService;

        r9 = specialinvoke r0.<com.android.server.PersistentDataBlockService: byte[] computeDigestLocked(byte[])>(null);

        if r9 == null goto label10;

     label01:
        r10 = new java.io.FileOutputStream;

        r1 = new java.io.File;

        $r2 = r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile>;

        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>($r2);

        specialinvoke r10.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r10);

     label02:
        virtualinvoke $r3.<java.io.DataOutputStream: void write(byte[],int,int)>(r9, 0, 32);

        virtualinvoke $r3.<java.io.DataOutputStream: void flush()>();

     label03:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return 1;

     label04:
        $r6 := @caughtexception;

        goto label08;

     label05:
        $r7 := @caughtexception;

     label06:
        $r8 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "failed to write block checksum", $r7);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return 0;

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        throw $r6;

     label09:
        $r4 := @caughtexception;

        $r5 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "partition not available?", $r4);

        return 0;

     label10:
        return 0;

        catch java.io.FileNotFoundException from label01 to label02 with label09;
        catch java.io.IOException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    private byte[] computeDigestLocked(byte[])
    {
        com.android.server.PersistentDataBlockService r0;
        int i0, $i2;
        java.lang.String $r1, $r5, $r8, $r10;
        java.io.DataInputStream $r2;
        byte[] $r3, r11, r16;
        java.lang.Throwable $r4, $r6, $r7, $r9;
        java.io.FileInputStream r12;
        java.io.File r13;
        java.security.MessageDigest r15;

        r0 := @this: com.android.server.PersistentDataBlockService;

        r11 := @parameter0: byte[];

     label01:
        r12 = new java.io.FileInputStream;

        r13 = new java.io.File;

        $r1 = r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile>;

        specialinvoke r13.<java.io.File: void <init>(java.lang.String)>($r1);

        specialinvoke r12.<java.io.FileInputStream: void <init>(java.io.File)>(r13);

        $r2 = new java.io.DataInputStream;

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r12);

     label02:
        r15 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

     label03:
        if r11 == null goto label06;

     label04:
        $i2 = lengthof r11;

        if $i2 != 32 goto label06;

        virtualinvoke $r2.<java.io.DataInputStream: int read(byte[])>(r11);

     label05:
        goto label07;

     label06:
        virtualinvoke $r2.<java.io.DataInputStream: int skipBytes(int)>(32);

     label07:
        r16 = newarray (byte)[1024];

        virtualinvoke r15.<java.security.MessageDigest: void update(byte[],int,int)>(r16, 0, 32);

     label08:
        i0 = virtualinvoke $r2.<java.io.DataInputStream: int read(byte[])>(r16);

     label09:
        if i0 == -1 goto label12;

     label10:
        virtualinvoke r15.<java.security.MessageDigest: void update(byte[],int,int)>(r16, 0, i0);

     label11:
        goto label08;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        $r3 = virtualinvoke r15.<java.security.MessageDigest: byte[] digest()>();

        return $r3;

     label13:
        $r6 := @caughtexception;

        goto label17;

     label14:
        $r4 := @caughtexception;

     label15:
        $r5 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "failed to read partition", $r4);

     label16:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        return null;

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        throw $r6;

     label18:
        $r7 := @caughtexception;

        $r8 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "SHA-256 not supported?", $r7);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        return null;

     label19:
        $r9 := @caughtexception;

        $r10 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "partition not available?", $r9);

        return null;

        catch java.io.FileNotFoundException from label01 to label02 with label19;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label18;
        catch java.io.IOException from label04 to label05 with label14;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.io.IOException from label07 to label08 with label14;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.io.IOException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
    }

    private long doGetMaximumDataBlockSize()
    {
        com.android.server.PersistentDataBlockService r0;
        long l0, $l1, $l2, $l3, $l4, $l5, l7;
        byte $b6;

        r0 := @this: com.android.server.PersistentDataBlockService;

        $l1 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long getBlockDeviceSize()>();

        $l2 = $l1 - 8L;

        $l3 = $l2 - 32L;

        $l4 = $l3 - 10000L;

        $l5 = $l4 - 1000L;

        l0 = $l5 - 1L;

        l7 = 102400L;

        $b6 = l0 cmp 102400L;

        if $b6 > 0 goto label1;

        l7 = l0;

     label1:
        return l7;
    }

    private boolean doGetOemUnlockEnabled()
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.Object r1;
        java.lang.String $r2, $r7, $r9;
        java.io.DataInputStream $r3;
        long $l0, $l1;
        byte $b3;
        java.lang.Throwable $r4, $r5, $r6, $r8;
        java.io.FileInputStream r10;
        java.io.File r11;
        boolean z0;

        r0 := @this: com.android.server.PersistentDataBlockService;

     label01:
        r10 = new java.io.FileInputStream;

        r11 = new java.io.File;

        $r2 = r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile>;

        specialinvoke r11.<java.io.File: void <init>(java.lang.String)>($r2);

        specialinvoke r10.<java.io.FileInputStream: void <init>(java.io.File)>(r11);

        $r3 = new java.io.DataInputStream;

        specialinvoke $r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r10);

     label02:
        r1 = r0.<com.android.server.PersistentDataBlockService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $l0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long getBlockDeviceSize()>();

        $l1 = $l0 - 1L;

        virtualinvoke $r3.<java.io.DataInputStream: long skip(long)>($l1);

        $b3 = virtualinvoke $r3.<java.io.DataInputStream: byte readByte()>();

        if $b3 == 0 goto label05;

     label04:
        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return z0;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

     label11:
        $r5 := @caughtexception;

        goto label15;

     label12:
        $r6 := @caughtexception;

     label13:
        $r7 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "unable to access persistent partition", $r6);

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return 0;

     label15:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        throw $r5;

     label16:
        $r8 := @caughtexception;

        $r9 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r9, "partition not available");

        return 0;

        catch java.io.FileNotFoundException from label01 to label02 with label16;
        catch java.io.IOException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }

    private void doSetOemUnlockEnabledLocked(boolean)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean z0;
        java.nio.channels.FileChannel r1;
        java.lang.String $r2, $r8, $r11, r12;
        java.io.FileOutputStream $r3;
        long $l0, $l1;
        java.lang.Throwable $r7, $r9, $r10;
        java.io.File r13;
        java.nio.ByteBuffer r15;
        byte b6;

        r0 := @this: com.android.server.PersistentDataBlockService;

        z0 := @parameter0: boolean;

        r12 = "1";

     label01:
        r13 = new java.io.File;

        $r2 = r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile>;

        specialinvoke r13.<java.io.File: void <init>(java.lang.String)>($r2);

        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r13);

     label02:
        r1 = virtualinvoke $r3.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long getBlockDeviceSize()>();

        $l1 = $l0 - 1L;

        virtualinvoke r1.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l1);

     label03:
        r15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1);

     label04:
        if z0 == 0 goto label05;

        b6 = 1;

        goto label06;

     label05:
        b6 = 0;

     label06:
        virtualinvoke r15.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b6);

        virtualinvoke r15.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke r1.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>(r15);

        virtualinvoke $r3.<java.io.FileOutputStream: void flush()>();

     label07:
        if z0 == 0 goto label08;

        goto label09;

     label08:
        r12 = "0";

     label09:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.oem_unlock_allowed", r12);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return;

     label10:
        $r9 := @caughtexception;

        goto label16;

     label11:
        $r10 := @caughtexception;

     label12:
        $r11 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "unable to access persistent partition", $r10);

     label13:
        if z0 == 0 goto label14;

        goto label15;

     label14:
        r12 = "0";

     label15:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.oem_unlock_allowed", r12);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return;

     label16:
        if z0 == 0 goto label17;

        goto label18;

     label17:
        r12 = "0";

     label18:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.oem_unlock_allowed", r12);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        throw $r9;

     label19:
        $r7 := @caughtexception;

        $r8 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "partition not available", $r7);

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label19;
        catch java.io.IOException from label02 to label03 with label11;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
    }

    private boolean enforceChecksumValidity()
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.Object r1;
        byte[] r2, r5;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.PersistentDataBlockService;

        r5 = newarray (byte)[32];

        r1 = r0.<com.android.server.PersistentDataBlockService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<com.android.server.PersistentDataBlockService: byte[] computeDigestLocked(byte[])>(r5);

     label02:
        if r2 == null goto label07;

     label03:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r5, r2);

        if $z0 != 0 goto label05;

     label04:
        goto label07;

     label05:
        exitmonitor r1;

     label06:
        return 1;

     label07:
        $r3 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>($r3, "Formatting FRP partition...");

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void formatPartitionLocked(boolean)>(0);

        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void enforceIsAdmin()
    {
        com.android.server.PersistentDataBlockService r0;
        int i0;
        android.content.Context $r1;
        android.os.UserManager $r2;
        boolean $z0;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.PersistentDataBlockService;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r1 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean isUserAdmin(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the Admin user is allowed to change OEM unlock state");

        throw $r3;
    }

    private void enforceOemUnlockReadPermission()
    {
        com.android.server.PersistentDataBlockService r0;
        android.content.Context $r1, $r2;
        int $i0, $i1;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.PersistentDataBlockService;

        $r1 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_OEM_UNLOCK_STATE");

        if $i0 != -1 goto label2;

        $r2 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.OEM_UNLOCK_STATE");

        if $i1 == -1 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Can\'t access OEM unlock state. Requires READ_OEM_UNLOCK_STATE or OEM_UNLOCK_STATE permission.");

        throw $r3;

     label2:
        return;
    }

    private void enforceOemUnlockWritePermission()
    {
        com.android.server.PersistentDataBlockService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.PersistentDataBlockService;

        $r1 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.OEM_UNLOCK_STATE", "Can\'t modify OEM unlock state");

        return;
    }

    private void enforceUid(int)
    {
        com.android.server.PersistentDataBlockService r0;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.PersistentDataBlockService;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.PersistentDataBlockService: int mAllowedUid>;

        if i0 != $i1 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed to access PST");

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void enforceUserRestriction(java.lang.String)
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.String r1, $r9;
        android.content.Context $r3;
        android.os.UserManager $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.PersistentDataBlockService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        $z0 = virtualinvoke $r4.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OEM unlock is disallowed by user restriction: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private void formatIfOemUnlockEnabled()
    {
        com.android.server.PersistentDataBlockService r0;
        boolean z0;
        java.lang.Throwable $r2;
        java.lang.Object r3;
        java.lang.String r4;

        r0 := @this: com.android.server.PersistentDataBlockService;

        z0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: boolean doGetOemUnlockEnabled()>();

        if z0 == 0 goto label6;

        r3 = r0.<com.android.server.PersistentDataBlockService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        specialinvoke r0.<com.android.server.PersistentDataBlockService: void formatPartitionLocked(boolean)>(1);

        exitmonitor r3;

     label2:
        goto label6;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r2;

     label6:
        if z0 == 0 goto label7;

        r4 = "1";

        goto label8;

     label7:
        r4 = "0";

     label8:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.oem_unlock_allowed", r4);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void formatPartitionLocked(boolean)
    {
        com.android.server.PersistentDataBlockService r0;
        boolean z0;
        java.lang.String $r1, $r4, $r7;
        java.io.DataOutputStream $r2;
        java.lang.Throwable $r3, $r5, $r6;
        java.io.FileOutputStream r8;
        java.io.File r9;
        byte[] r11;

        r0 := @this: com.android.server.PersistentDataBlockService;

        z0 := @parameter0: boolean;

     label01:
        r8 = new java.io.FileOutputStream;

        r9 = new java.io.File;

        $r1 = r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile>;

        specialinvoke r9.<java.io.File: void <init>(java.lang.String)>($r1);

        specialinvoke r8.<java.io.FileOutputStream: void <init>(java.io.File)>(r9);

        $r2 = new java.io.DataOutputStream;

        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r8);

     label02:
        r11 = newarray (byte)[32];

     label03:
        virtualinvoke $r2.<java.io.DataOutputStream: void write(byte[],int,int)>(r11, 0, 32);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(428873843);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(0);

        virtualinvoke $r2.<java.io.DataOutputStream: void flush()>();

     label04:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void doSetOemUnlockEnabledLocked(boolean)>(z0);

        specialinvoke r0.<com.android.server.PersistentDataBlockService: boolean computeAndWriteDigestLocked()>();

        return;

     label05:
        $r5 := @caughtexception;

        goto label09;

     label06:
        $r3 := @caughtexception;

     label07:
        $r4 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "failed to format block", $r3);

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        return;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        throw $r5;

     label10:
        $r6 := @caughtexception;

        $r7 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "partition not available?", $r6);

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
    }

    private int getAllowedUid(int)
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.String r1, $r11, r13;
        android.content.Context $r4, $r6;
        android.content.res.Resources $r5;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.StringBuilder $r8;
        int i2, i3;
        android.content.pm.PackageManager r12;

        r0 := @this: com.android.server.PersistentDataBlockService;

        i2 := @parameter0: int;

        $r4 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(17039931);

        $r6 = r0.<com.android.server.PersistentDataBlockService: android.content.Context mContext>;

        r12 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        i3 = virtualinvoke r12.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int,int)>(r1, 1048576, i2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r13 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not able to find package ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r13, $r11, $r7);

        i3 = -1;

     label4:
        return i3;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private long getBlockDeviceSize()
    {
        com.android.server.PersistentDataBlockService r0;
        java.lang.Object r1;
        long $l0, $l2, $l3;
        byte $b1;
        java.lang.String $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.PersistentDataBlockService;

        r1 = r0.<com.android.server.PersistentDataBlockService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l0 = r0.<com.android.server.PersistentDataBlockService: long mBlockDeviceSize>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        $r3 = r0.<com.android.server.PersistentDataBlockService: java.lang.String mDataBlockFile>;

        $l3 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long nativeGetBlockDeviceSize(java.lang.String)>($r3);

        r0.<com.android.server.PersistentDataBlockService: long mBlockDeviceSize> = $l3;

     label2:
        exitmonitor r1;

     label3:
        $l2 = r0.<com.android.server.PersistentDataBlockService: long mBlockDeviceSize>;

        return $l2;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private long getFrpCredentialDataOffset()
    {
        com.android.server.PersistentDataBlockService r0;
        long $l0, $l1, $l2;

        r0 := @this: com.android.server.PersistentDataBlockService;

        $l0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long getBlockDeviceSize()>();

        $l1 = $l0 - 1L;

        $l2 = $l1 - 1000L;

        return $l2;
    }

    private long getTestHarnessModeDataOffset()
    {
        com.android.server.PersistentDataBlockService r0;
        long $l0, $l1;

        r0 := @this: com.android.server.PersistentDataBlockService;

        $l0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: long getFrpCredentialDataOffset()>();

        $l1 = $l0 - 10000L;

        return $l1;
    }

    private int getTotalDataSizeLocked(java.io.DataInputStream) throws java.io.IOException
    {
        com.android.server.PersistentDataBlockService r0;
        java.io.DataInputStream r1;
        int $i1, i2;

        r0 := @this: com.android.server.PersistentDataBlockService;

        r1 := @parameter0: java.io.DataInputStream;

        virtualinvoke r1.<java.io.DataInputStream: int skipBytes(int)>(32);

        $i1 = virtualinvoke r1.<java.io.DataInputStream: int readInt()>();

        if $i1 != 428873843 goto label1;

        i2 = virtualinvoke r1.<java.io.DataInputStream: int readInt()>();

        goto label2;

     label1:
        i2 = 0;

     label2:
        return i2;
    }

    private native long nativeGetBlockDeviceSize(java.lang.String);

    private native int nativeWipe(java.lang.String);

    public void lambda$onStart$0$PersistentDataBlockService()
    {
        com.android.server.PersistentDataBlockService r0;
        int $i0;
        android.os.IBinder $r1;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: com.android.server.PersistentDataBlockService;

        $i0 = specialinvoke r0.<com.android.server.PersistentDataBlockService: int getAllowedUid(int)>(0);

        r0.<com.android.server.PersistentDataBlockService: int mAllowedUid> = $i0;

        specialinvoke r0.<com.android.server.PersistentDataBlockService: boolean enforceChecksumValidity()>();

        specialinvoke r0.<com.android.server.PersistentDataBlockService: void formatIfOemUnlockEnabled()>();

        $r1 = r0.<com.android.server.PersistentDataBlockService: android.os.IBinder mService>;

        virtualinvoke r0.<com.android.server.PersistentDataBlockService: void publishBinderService(java.lang.String,android.os.IBinder)>("persistent_data_block", $r1);

        $r2 = r0.<com.android.server.PersistentDataBlockService: java.util.concurrent.CountDownLatch mInitDoneSignal>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.PersistentDataBlockService r0;
        int i0;
        boolean z0;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.CountDownLatch $r2;
        java.lang.String $r4, $r7, $r13, $r17;
        com.android.server.PersistentDataBlockManagerInternal $r8;
        java.lang.Throwable $r9;
        java.lang.Thread $r10;
        java.lang.StringBuilder $r11, r19;
        java.lang.IllegalStateException $r16, r18;

        r0 := @this: com.android.server.PersistentDataBlockService;

        i0 := @parameter0: int;

        if i0 != 500 goto label5;

     label1:
        $r2 = r0.<com.android.server.PersistentDataBlockService: java.util.concurrent.CountDownLatch mInitDoneSignal>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        z0 = virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10L, $r1);

     label2:
        if z0 == 0 goto label3;

        $r8 = r0.<com.android.server.PersistentDataBlockService: com.android.server.PersistentDataBlockManagerInternal mInternalService>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/PersistentDataBlockManagerInternal;", $r8);

        goto label5;

     label3:
        r18 = new java.lang.IllegalStateException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service ");

        $r4 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" init timeout");

        $r7 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r18;

     label4:
        $r9 := @caughtexception;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void interrupt()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service ");

        $r13 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" init interrupted");

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r9);

        throw $r16;

     label5:
        specialinvoke r0.<com.android.server.SystemService: void onBootPhase(int)>(i0);

        return;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.InterruptedException from label3 to label4 with label4;
    }

    public void onStart()
    {
        com.android.server.PersistentDataBlockService r0;
        com.android.server._$$Lambda$PersistentDataBlockService$EZl9OYaT2eNL7kfSr2nKUBjxidk $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r8;

        r0 := @this: com.android.server.PersistentDataBlockService;

        $r3 = new com.android.server._$$Lambda$PersistentDataBlockService$EZl9OYaT2eNL7kfSr2nKUBjxidk;

        specialinvoke $r3.<com.android.server._$$Lambda$PersistentDataBlockService$EZl9OYaT2eNL7kfSr2nKUBjxidk: void <init>(com.android.server.PersistentDataBlockService)>(r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = <com.android.server.PersistentDataBlockService: java.lang.String TAG>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".onStart");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>($r3, $r8);

        return;
    }
}
