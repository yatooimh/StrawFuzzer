public class com.android.server.SensorNotificationService extends com.android.server.SystemService implements android.hardware.SensorEventListener, android.location.LocationListener
{
    private static final java.lang.String ATTRIBUTION_TAG;
    private static final boolean DBG;
    private static final long KM_IN_M;
    private static final long LOCATION_MIN_DISTANCE;
    private static final long LOCATION_MIN_TIME;
    private static final long MILLIS_2010_1_1;
    private static final long MINUTE_IN_MS;
    private static final java.lang.String PROPERTY_USE_MOCKED_LOCATION;
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private long mLocalGeomagneticFieldUpdateTime;
    private android.location.LocationManager mLocationManager;
    private android.hardware.Sensor mMetaSensor;
    private android.hardware.SensorManager mSensorManager;

    public void <init>(android.content.Context)
    {
        com.android.server.SensorNotificationService r0;
        android.content.Context r1, $r2, $r3;

        r0 := @this: com.android.server.SensorNotificationService;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>("SensorNotificationService");

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>($r2);

        r0.<com.android.server.SensorNotificationService: long mLocalGeomagneticFieldUpdateTime> = -1800000L;

        $r3 = virtualinvoke r0.<com.android.server.SensorNotificationService: android.content.Context getContext()>();

        r0.<com.android.server.SensorNotificationService: android.content.Context mContext> = $r3;

        return;
    }

    private void broadcastDynamicSensorChanged()
    {
        com.android.server.SensorNotificationService r0;
        android.content.Intent $r2;
        android.os.UserHandle $r4;
        android.content.Context $r5;

        r0 := @this: com.android.server.SensorNotificationService;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.DYNAMIC_SENSOR_CHANGED");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        $r5 = r0.<com.android.server.SensorNotificationService: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r2, $r4);

        return;
    }

    private boolean useMockedLocation()
    {
        com.android.server.SensorNotificationService r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.SensorNotificationService;

        $r1 = "false";

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("sensor.notification.use_mocked", "false");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        com.android.server.SensorNotificationService r0;
        android.hardware.Sensor r1;
        int i0;

        r0 := @this: com.android.server.SensorNotificationService;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.SensorNotificationService r0;
        int i0;
        android.content.Context $r1, $r3;
        java.lang.Object $r2, $r4;
        android.hardware.SensorManager $r5, r6;
        android.hardware.Sensor r7;
        android.location.LocationManager r8;

        r0 := @this: com.android.server.SensorNotificationService;

        i0 := @parameter0: int;

        if i0 != 600 goto label2;

        $r3 = r0.<com.android.server.SensorNotificationService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        r6 = (android.hardware.SensorManager) $r4;

        r0.<com.android.server.SensorNotificationService: android.hardware.SensorManager mSensorManager> = r6;

        r7 = virtualinvoke r6.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(32);

        r0.<com.android.server.SensorNotificationService: android.hardware.Sensor mMetaSensor> = r7;

        if r7 != null goto label1;

        goto label2;

     label1:
        $r5 = r0.<com.android.server.SensorNotificationService: android.hardware.SensorManager mSensorManager>;

        virtualinvoke $r5.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>(r0, r7, 0);

     label2:
        if i0 != 1000 goto label4;

        $r1 = r0.<com.android.server.SensorNotificationService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("location");

        r8 = (android.location.LocationManager) $r2;

        r0.<com.android.server.SensorNotificationService: android.location.LocationManager mLocationManager> = r8;

        if r8 != null goto label3;

        goto label4;

     label3:
        virtualinvoke r8.<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>("passive", 1800000L, 100000.0F, r0);

     label4:
        return;
    }

    public void onLocationChanged(android.location.Location)
    {
        com.android.server.SensorNotificationService r0;
        long l0, $l2, $l3, $l4, $l7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        byte $b1, $b5, $b6, $b8;
        boolean $z0, $z1;
        android.hardware.GeomagneticField $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.hardware.SensorManager $r2;
        java.lang.Throwable $r3;
        android.location.Location r4;
        android.hardware.SensorAdditionalInfo r6;

        r0 := @this: com.android.server.SensorNotificationService;

        r4 := @parameter0: android.location.Location;

        $d0 = virtualinvoke r4.<android.location.Location: double getLatitude()>();

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label01;

        $d10 = virtualinvoke r4.<android.location.Location: double getLongitude()>();

        $b8 = $d10 cmpl 0.0;

        if $b8 != 0 goto label01;

        return;

     label01:
        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = r0.<com.android.server.SensorNotificationService: long mLocalGeomagneticFieldUpdateTime>;

        $l4 = $l2 - $l3;

        $b5 = $l4 cmp 600000L;

        if $b5 >= 0 goto label02;

        return;

     label02:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = specialinvoke r0.<com.android.server.SensorNotificationService: boolean useMockedLocation()>();

        $z1 = virtualinvoke r4.<android.location.Location: boolean isFromMockProvider()>();

        if $z0 == $z1 goto label10;

        $b6 = l0 cmp 1262358000000L;

        if $b6 >= 0 goto label03;

        goto label10;

     label03:
        $r1 = new android.hardware.GeomagneticField;

        $d1 = virtualinvoke r4.<android.location.Location: double getLatitude()>();

        $f0 = (float) $d1;

        $d2 = virtualinvoke r4.<android.location.Location: double getLongitude()>();

        $f1 = (float) $d2;

        $d3 = virtualinvoke r4.<android.location.Location: double getAltitude()>();

        $f2 = (float) $d3;

        specialinvoke $r1.<android.hardware.GeomagneticField: void <init>(float,float,float,long)>($f0, $f1, $f2, l0);

     label04:
        $f3 = virtualinvoke $r1.<android.hardware.GeomagneticField: float getFieldStrength()>();

        $f4 = $f3 / 1000.0F;

        $f5 = virtualinvoke $r1.<android.hardware.GeomagneticField: float getDeclination()>();

        $d4 = (double) $f5;

        $d5 = $d4 * 3.141592653589793;

        $d6 = $d5 / 180.0;

        $f6 = (float) $d6;

        $f7 = virtualinvoke $r1.<android.hardware.GeomagneticField: float getInclination()>();

        $d7 = (double) $f7;

        $d8 = $d7 * 3.141592653589793;

        $d9 = $d8 / 180.0;

        $f8 = (float) $d9;

        r6 = staticinvoke <android.hardware.SensorAdditionalInfo: android.hardware.SensorAdditionalInfo createLocalGeomagneticField(float,float,float)>($f4, $f6, $f8);

     label05:
        if r6 == null goto label07;

     label06:
        $r2 = r0.<com.android.server.SensorNotificationService: android.hardware.SensorManager mSensorManager>;

        virtualinvoke $r2.<android.hardware.SensorManager: boolean setOperationParameter(android.hardware.SensorAdditionalInfo)>(r6);

        $l7 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.SensorNotificationService: long mLocalGeomagneticFieldUpdateTime> = $l7;

     label07:
        goto label09;

     label08:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SensorNotificationService", "Invalid local geomagnetic field, ignore.");

     label09:
        return;

     label10:
        return;

        catch java.lang.IllegalArgumentException from label04 to label05 with label08;
        catch java.lang.IllegalArgumentException from label06 to label07 with label08;
    }

    public void onProviderDisabled(java.lang.String)
    {
        com.android.server.SensorNotificationService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.SensorNotificationService;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void onProviderEnabled(java.lang.String)
    {
        com.android.server.SensorNotificationService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.SensorNotificationService;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        com.android.server.SensorNotificationService r0;
        android.hardware.SensorEvent r1;
        android.hardware.Sensor $r2, $r3;

        r0 := @this: com.android.server.SensorNotificationService;

        r1 := @parameter0: android.hardware.SensorEvent;

        $r3 = r1.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        $r2 = r0.<com.android.server.SensorNotificationService: android.hardware.Sensor mMetaSensor>;

        if $r3 != $r2 goto label1;

        specialinvoke r0.<com.android.server.SensorNotificationService: void broadcastDynamicSensorChanged()>();

     label1:
        return;
    }

    public void onStart()
    {
        com.android.server.SensorNotificationService r0;

        r0 := @this: com.android.server.SensorNotificationService;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/SensorNotificationService;", r0);

        return;
    }

    public void onStatusChanged(java.lang.String, int, android.os.Bundle)
    {
        com.android.server.SensorNotificationService r0;
        java.lang.String r1;
        int i0;
        android.os.Bundle r2;

        r0 := @this: com.android.server.SensorNotificationService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.SensorNotificationService: java.lang.String TAG> = "SensorNotificationService";

        <com.android.server.SensorNotificationService: java.lang.String PROPERTY_USE_MOCKED_LOCATION> = "sensor.notification.use_mocked";

        <com.android.server.SensorNotificationService: long MINUTE_IN_MS> = 60000L;

        <com.android.server.SensorNotificationService: long MILLIS_2010_1_1> = 1262358000000L;

        <com.android.server.SensorNotificationService: long LOCATION_MIN_TIME> = 1800000L;

        <com.android.server.SensorNotificationService: long LOCATION_MIN_DISTANCE> = 100000L;

        <com.android.server.SensorNotificationService: long KM_IN_M> = 1000L;

        <com.android.server.SensorNotificationService: boolean DBG> = 0;

        <com.android.server.SensorNotificationService: java.lang.String ATTRIBUTION_TAG> = "SensorNotificationService";

        return;
    }
}
