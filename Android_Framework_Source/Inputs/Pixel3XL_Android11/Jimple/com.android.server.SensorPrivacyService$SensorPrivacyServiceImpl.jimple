class com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl extends android.hardware.ISensorPrivacyManager$Stub
{
    private final android.util.AtomicFile mAtomicFile;
    private final android.content.Context mContext;
    private boolean mEnabled;
    private final com.android.server.SensorPrivacyService$SensorPrivacyHandler mHandler;
    private final java.lang.Object mLock;
    final com.android.server.SensorPrivacyService this$0;

    void <init>(com.android.server.SensorPrivacyService, android.content.Context)
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        java.lang.Object $r1, r12;
        com.android.server.SensorPrivacyService$SensorPrivacyHandler $r2;
        com.android.server.FgThread $r3;
        android.os.Looper $r4;
        android.content.Context $r5, r11;
        android.util.AtomicFile $r6;
        java.io.File $r7, $r8;
        boolean $z0;
        java.lang.Throwable $r9;
        com.android.server.SensorPrivacyService r10;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        r10 := @parameter0: com.android.server.SensorPrivacyService;

        r11 := @parameter1: android.content.Context;

        r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: com.android.server.SensorPrivacyService this$0> = r10;

        specialinvoke r0.<android.hardware.ISensorPrivacyManager$Stub: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: java.lang.Object mLock> = $r1;

        r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.content.Context mContext> = r11;

        $r2 = new com.android.server.SensorPrivacyService$SensorPrivacyHandler;

        $r3 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r4 = virtualinvoke $r3.<com.android.server.FgThread: android.os.Looper getLooper()>();

        $r5 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.content.Context mContext>;

        specialinvoke $r2.<com.android.server.SensorPrivacyService$SensorPrivacyHandler: void <init>(com.android.server.SensorPrivacyService,android.os.Looper,android.content.Context)>(r10, $r4, $r5);

        r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: com.android.server.SensorPrivacyService$SensorPrivacyHandler mHandler> = $r2;

        $r6 = new android.util.AtomicFile;

        $r7 = new java.io.File;

        $r8 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "sensor_privacy.xml");

        specialinvoke $r6.<android.util.AtomicFile: void <init>(java.io.File)>($r7);

        r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile> = $r6;

        r12 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: java.lang.Object mLock>;

        entermonitor r12;

     label1:
        $z0 = specialinvoke r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: boolean readPersistedSensorPrivacyEnabledLocked()>();

        r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: boolean mEnabled> = $z0;

        exitmonitor r12;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r12;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static void access$100(com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl)
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;

        r0 := @parameter0: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        specialinvoke r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: void persistSensorPrivacyState()>();

        return;
    }

    private void enforceSensorPrivacyPermission()
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        android.content.Context $r1;
        int $i0;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        $r1 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_SENSOR_PRIVACY");

        if $i0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Changing sensor privacy requires the following permission: android.permission.MANAGE_SENSOR_PRIVACY");

        throw $r2;
    }

    private void persistSensorPrivacyState()
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        java.lang.Object r1;
        com.android.internal.util.FastXmlSerializer r2;
        android.util.AtomicFile $r3, $r8, $r10;
        java.nio.charset.Charset $r4;
        java.lang.String $r5, $r7;
        java.lang.Boolean $r6;
        boolean $z0;
        java.lang.Throwable $r9, $r11;
        java.io.FileOutputStream r12, r13;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        r1 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

        r12 = null;

     label01:
        r2 = new com.android.internal.util.FastXmlSerializer;

     label02:
        r12 = null;

     label03:
        specialinvoke r2.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label04:
        r12 = null;

     label05:
        $r3 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        r13 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label06:
        r12 = r13;

     label07:
        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r13, $r5);

     label08:
        r12 = r13;

     label09:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

     label10:
        r12 = r13;

     label11:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "sensor-privacy");

     label12:
        r12 = r13;

     label13:
        $z0 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: boolean mEnabled>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "enabled", $r7);

     label14:
        r12 = r13;

     label15:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "sensor-privacy");

     label16:
        r12 = r13;

     label17:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label18:
        r12 = r13;

     label19:
        $r8 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r8.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r13);

     label20:
        goto label24;

     label21:
        $r11 := @caughtexception;

        goto label26;

     label22:
        $r9 := @caughtexception;

     label23:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SensorPrivacyService", "Caught an exception persisting the sensor privacy state: ", $r9);

        $r10 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r10.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r12);

     label24:
        exitmonitor r1;

     label25:
        return;

     label26:
        exitmonitor r1;

     label27:
        throw $r11;

        catch java.io.IOException from label01 to label02 with label22;
        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label22;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.io.IOException from label05 to label06 with label22;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.io.IOException from label07 to label08 with label22;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.io.IOException from label09 to label10 with label22;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.io.IOException from label11 to label12 with label22;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.io.IOException from label13 to label14 with label22;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.io.IOException from label15 to label16 with label22;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.io.IOException from label17 to label18 with label22;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.io.IOException from label19 to label20 with label22;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label23 to label24 with label21;
        catch java.lang.Throwable from label24 to label25 with label21;
        catch java.lang.Throwable from label26 to label27 with label21;
    }

    private boolean readPersistedSensorPrivacyEnabledLocked()
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        android.util.AtomicFile $r1, $r2, $r10;
        boolean $z0, z1;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r6;
        java.lang.Boolean $r7;
        java.lang.Throwable $r8, $r9, $r11;
        java.io.FileInputStream r12;
        org.xmlpull.v1.XmlPullParser r13;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        $r1 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        $z0 = virtualinvoke $r1.<android.util.AtomicFile: boolean exists()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r2 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        r12 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r13 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r12, $r4);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r13, "sensor-privacy");

        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int next()>();

        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r6 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "enabled");

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r6);

        z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

     label03:
        if r12 == null goto label05;

     label04:
        virtualinvoke r12.<java.io.FileInputStream: void close()>();

     label05:
        goto label13;

     label06:
        $r11 := @caughtexception;

        if r12 == null goto label11;

     label07:
        virtualinvoke r12.<java.io.FileInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

     label10:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label11:
        throw $r11;

     label12:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SensorPrivacyService", "Caught an exception reading the state from storage: ", $r9);

        $r10 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r10.<android.util.AtomicFile: void delete()>();

        z1 = 0;

     label13:
        return z1;

        catch java.io.IOException from label01 to label02 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label12;
    }

    public void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        android.hardware.ISensorPrivacyListener r1;
        java.lang.NullPointerException $r2;
        com.android.server.SensorPrivacyService$SensorPrivacyHandler $r3;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        r1 := @parameter0: android.hardware.ISensorPrivacyListener;

        if r1 == null goto label1;

        $r3 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: com.android.server.SensorPrivacyService$SensorPrivacyHandler mHandler>;

        virtualinvoke $r3.<com.android.server.SensorPrivacyService$SensorPrivacyHandler: void addListener(android.hardware.ISensorPrivacyListener)>(r1);

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener cannot be null");

        throw $r2;
    }

    public boolean isSensorPrivacyEnabled()
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        r1 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: boolean mEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeSensorPrivacyListener(android.hardware.ISensorPrivacyListener)
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        android.hardware.ISensorPrivacyListener r1;
        java.lang.NullPointerException $r2;
        com.android.server.SensorPrivacyService$SensorPrivacyHandler $r3;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        r1 := @parameter0: android.hardware.ISensorPrivacyListener;

        if r1 == null goto label1;

        $r3 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: com.android.server.SensorPrivacyService$SensorPrivacyHandler mHandler>;

        virtualinvoke $r3.<com.android.server.SensorPrivacyService$SensorPrivacyHandler: void removeListener(android.hardware.ISensorPrivacyListener)>(r1);

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener cannot be null");

        throw $r2;
    }

    public void setSensorPrivacy(boolean)
    {
        com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl r0;
        boolean z0;
        java.lang.Object r1;
        com.android.internal.util.FastXmlSerializer r2;
        android.util.AtomicFile $r3, $r8, $r12;
        java.nio.charset.Charset $r4;
        java.lang.String $r5, $r7;
        java.lang.Boolean $r6;
        com.android.server.SensorPrivacyService$SensorPrivacyHandler $r9;
        java.lang.Throwable $r10, $r11;
        java.io.FileOutputStream r13, r14;

        r0 := @this: com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: void enforceSensorPrivacyPermission()>();

        r1 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: boolean mEnabled> = z0;

     label02:
        r13 = null;

     label03:
        r2 = new com.android.internal.util.FastXmlSerializer;

     label04:
        r13 = null;

     label05:
        specialinvoke r2.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label06:
        r13 = null;

     label07:
        $r3 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        r14 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label08:
        r13 = r14;

     label09:
        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r14, $r5);

     label10:
        r13 = r14;

     label11:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

     label12:
        r13 = r14;

     label13:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "sensor-privacy");

     label14:
        r13 = r14;

     label15:
        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "enabled", $r7);

     label16:
        r13 = r14;

     label17:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "sensor-privacy");

     label18:
        r13 = r14;

     label19:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label20:
        r13 = r14;

     label21:
        $r8 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r8.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r14);

     label22:
        goto label25;

     label23:
        $r11 := @caughtexception;

     label24:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SensorPrivacyService", "Caught an exception persisting the sensor privacy state: ", $r11);

        $r12 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r12.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r13);

     label25:
        exitmonitor r1;

     label26:
        $r9 = r0.<com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: com.android.server.SensorPrivacyService$SensorPrivacyHandler mHandler>;

        virtualinvoke $r9.<com.android.server.SensorPrivacyService$SensorPrivacyHandler: void onSensorPrivacyChanged(boolean)>(z0);

        return;

     label27:
        $r10 := @caughtexception;

     label28:
        exitmonitor r1;

     label29:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.io.IOException from label03 to label04 with label23;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.io.IOException from label05 to label06 with label23;
        catch java.lang.Throwable from label05 to label06 with label27;
        catch java.io.IOException from label07 to label08 with label23;
        catch java.lang.Throwable from label07 to label08 with label27;
        catch java.io.IOException from label09 to label10 with label23;
        catch java.lang.Throwable from label09 to label10 with label27;
        catch java.io.IOException from label11 to label12 with label23;
        catch java.lang.Throwable from label11 to label12 with label27;
        catch java.io.IOException from label13 to label14 with label23;
        catch java.lang.Throwable from label13 to label14 with label27;
        catch java.io.IOException from label15 to label16 with label23;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.io.IOException from label17 to label18 with label23;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.io.IOException from label19 to label20 with label23;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
    }
}
