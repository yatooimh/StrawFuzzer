class com.android.server.StorageManagerService extends android.os.storage.IStorageManager$Stub implements com.android.server.Watchdog$Monitor, com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver
{
    private static final java.lang.String[] ALL_STORAGE_PERMISSIONS;
    private static final java.lang.String ANDROID_VOLD_APP_DATA_ISOLATION_ENABLED_PROPERTY;
    private static final java.lang.String ATTR_CREATED_MILLIS;
    private static final java.lang.String ATTR_FS_UUID;
    private static final java.lang.String ATTR_LAST_BENCH_MILLIS;
    private static final java.lang.String ATTR_LAST_SEEN_MILLIS;
    private static final java.lang.String ATTR_LAST_TRIM_MILLIS;
    private static final java.lang.String ATTR_NICKNAME;
    private static final java.lang.String ATTR_PART_GUID;
    private static final java.lang.String ATTR_PRIMARY_STORAGE_UUID;
    private static final java.lang.String ATTR_TYPE;
    private static final java.lang.String ATTR_USER_FLAGS;
    private static final java.lang.String ATTR_VERSION;
    private static final int CRYPTO_ALGORITHM_KEY_SIZE;
    public static final java.lang.String[] CRYPTO_TYPES;
    private static final boolean DEBUG_EVENTS;
    private static final boolean DEBUG_OBB;
    private static final boolean DEFAULT_FUSE_ENABLED;
    private static final boolean EMULATE_FBE_SUPPORTED;
    private static final boolean ENABLE_ISOLATED_STORAGE;
    public static final int FAILED_MOUNT_RESET_TIMEOUT_SECONDS;
    private static final java.lang.String FUSE_ENABLED;
    private static final int H_ABORT_IDLE_MAINT;
    private static final int H_BOOT_COMPLETED;
    private static final int H_COMPLETE_UNLOCK_USER;
    private static final int H_DAEMON_CONNECTED;
    private static final int H_FSTRIM;
    private static final int H_INTERNAL_BROADCAST;
    private static final int H_PARTITION_FORGET;
    private static final int H_RESET;
    private static final int H_RUN_IDLE_MAINT;
    private static final int H_SHUTDOWN;
    private static final int H_SYSTEM_READY;
    private static final int H_VOLUME_BROADCAST;
    private static final int H_VOLUME_MOUNT;
    private static final int H_VOLUME_STATE_CHANGED;
    private static final int H_VOLUME_UNMOUNT;
    private static final java.lang.String ISOLATED_STORAGE_ENABLED;
    public static final java.util.regex.Pattern KNOWN_APP_DIR_PATHS;
    private static final java.lang.String LAST_FSTRIM_FILE;
    private static final boolean LOCAL_LOGV;
    private static final int MOVE_STATUS_COPY_FINISHED;
    private static final int OBB_FLUSH_MOUNT_STATE;
    private static final int OBB_RUN_ACTION;
    private static final int PBKDF2_HASH_ROUNDS;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_STORAGE_BENCHMARK;
    private static final java.lang.String TAG_STORAGE_TRIM;
    private static final java.lang.String TAG_VOLUME;
    private static final java.lang.String TAG_VOLUMES;
    private static final int VERSION_ADD_PRIMARY;
    private static final int VERSION_FIX_PRIMARY;
    private static final int VERSION_INIT;
    private static final boolean WATCHDOG_ENABLE;
    private static final java.lang.String ZRAM_ENABLED_PROPERTY;
    public static java.lang.String sMediaStoreAuthorityProcessName;
    static com.android.server.StorageManagerService sSelf;
    private com.android.server.storage.AppFuseBridge mAppFuseBridge;
    private final java.lang.Object mAppFuseLock;
    private com.android.internal.app.IAppOpsCallback$Stub mAppOpsCallback;
    private volatile boolean mBootCompleted;
    private final com.android.server.StorageManagerService$Callbacks mCallbacks;
    private final android.content.Context mContext;
    private volatile int mCurrentUserId;
    private volatile boolean mDaemonConnected;
    private android.util.ArrayMap mDiskScanLatches;
    private android.util.ArrayMap mDisks;
    private volatile int mDownloadsAuthorityAppId;
    private volatile int mExternalStorageAuthorityAppId;
    private final java.util.Set mFuseMountedUser;
    private final android.os.Handler mHandler;
    private com.android.internal.app.IAppOpsService mIAppOpsService;
    private android.content.pm.IPackageManager mIPackageManager;
    private final com.android.server.pm.Installer mInstaller;
    private final boolean mIsAutomotive;
    private final boolean mIsFuseEnabled;
    private long mLastMaintenance;
    private final java.io.File mLastMaintenanceFile;
    private final android.os.IVoldListener mListener;
    private com.android.server.StorageManagerService$WatchedLockedUsers mLocalUnlockedUsers;
    private final java.lang.Object mLock;
    private final com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private volatile int mMediaStoreAuthorityAppId;
    private android.content.pm.IPackageMoveObserver mMoveCallback;
    private java.lang.String mMoveTargetUuid;
    private int mNextAppFuseName;
    private final com.android.server.StorageManagerService$ObbActionHandler mObbActionHandler;
    private final java.util.Map mObbMounts;
    private final java.util.Map mObbPathToStateMap;
    private final java.util.Map mPackageMonitorsForUser;
    private final java.lang.Object mPackagesLock;
    private android.content.pm.PackageManagerInternal mPmInternal;
    private java.lang.String mPrimaryStorageUuid;
    private android.util.ArrayMap mRecords;
    private final android.content.ContentResolver mResolver;
    private volatile boolean mSecureKeyguardShowing;
    private final android.util.AtomicFile mSettingsFile;
    private final com.android.server.StorageManagerService$StorageManagerInternalImpl mStorageManagerInternal;
    private final com.android.server.storage.StorageSessionController mStorageSessionController;
    private volatile android.os.IStoraged mStoraged;
    private int[] mSystemUnlockedUsers;
    private final java.util.Set mUidsWithLegacyExternalStorage;
    private android.content.BroadcastReceiver mUserReceiver;
    private volatile android.os.IVold mVold;
    private final boolean mVoldAppDataIsolationEnabled;
    private final android.util.ArrayMap mVolumes;

    static void <clinit>()
    {
        boolean $z0, $z1;
        java.lang.String[] $r0, $r2;
        java.util.regex.Pattern $r1;

        <com.android.server.StorageManagerService: java.lang.String ZRAM_ENABLED_PROPERTY> = "persist.sys.zram_enabled";

        <com.android.server.StorageManagerService: boolean WATCHDOG_ENABLE> = 1;

        <com.android.server.StorageManagerService: int VERSION_INIT> = 1;

        <com.android.server.StorageManagerService: int VERSION_FIX_PRIMARY> = 3;

        <com.android.server.StorageManagerService: int VERSION_ADD_PRIMARY> = 2;

        <com.android.server.StorageManagerService: java.lang.String TAG_VOLUMES> = "volumes";

        <com.android.server.StorageManagerService: java.lang.String TAG_VOLUME> = "volume";

        <com.android.server.StorageManagerService: java.lang.String TAG_STORAGE_TRIM> = "storage_trim";

        <com.android.server.StorageManagerService: java.lang.String TAG_STORAGE_BENCHMARK> = "storage_benchmark";

        <com.android.server.StorageManagerService: java.lang.String TAG> = "StorageManagerService";

        <com.android.server.StorageManagerService: int PBKDF2_HASH_ROUNDS> = 1024;

        <com.android.server.StorageManagerService: int OBB_RUN_ACTION> = 1;

        <com.android.server.StorageManagerService: int OBB_FLUSH_MOUNT_STATE> = 2;

        <com.android.server.StorageManagerService: int MOVE_STATUS_COPY_FINISHED> = 82;

        <com.android.server.StorageManagerService: java.lang.String LAST_FSTRIM_FILE> = "last-fstrim";

        <com.android.server.StorageManagerService: java.lang.String ISOLATED_STORAGE_ENABLED> = "isolated_storage_enabled";

        <com.android.server.StorageManagerService: int H_VOLUME_UNMOUNT> = 8;

        <com.android.server.StorageManagerService: int H_VOLUME_STATE_CHANGED> = 15;

        <com.android.server.StorageManagerService: int H_VOLUME_MOUNT> = 5;

        <com.android.server.StorageManagerService: int H_VOLUME_BROADCAST> = 6;

        <com.android.server.StorageManagerService: int H_SYSTEM_READY> = 1;

        <com.android.server.StorageManagerService: int H_SHUTDOWN> = 3;

        <com.android.server.StorageManagerService: int H_RUN_IDLE_MAINT> = 11;

        <com.android.server.StorageManagerService: int H_RESET> = 10;

        <com.android.server.StorageManagerService: int H_PARTITION_FORGET> = 9;

        <com.android.server.StorageManagerService: int H_INTERNAL_BROADCAST> = 7;

        <com.android.server.StorageManagerService: int H_FSTRIM> = 4;

        <com.android.server.StorageManagerService: int H_DAEMON_CONNECTED> = 2;

        <com.android.server.StorageManagerService: int H_COMPLETE_UNLOCK_USER> = 14;

        <com.android.server.StorageManagerService: int H_BOOT_COMPLETED> = 13;

        <com.android.server.StorageManagerService: int H_ABORT_IDLE_MAINT> = 12;

        <com.android.server.StorageManagerService: java.lang.String FUSE_ENABLED> = "fuse_enabled";

        <com.android.server.StorageManagerService: int FAILED_MOUNT_RESET_TIMEOUT_SECONDS> = 10;

        <com.android.server.StorageManagerService: boolean EMULATE_FBE_SUPPORTED> = 1;

        <com.android.server.StorageManagerService: boolean DEFAULT_FUSE_ENABLED> = 1;

        <com.android.server.StorageManagerService: boolean DEBUG_OBB> = 0;

        <com.android.server.StorageManagerService: boolean DEBUG_EVENTS> = 0;

        <com.android.server.StorageManagerService: int CRYPTO_ALGORITHM_KEY_SIZE> = 128;

        <com.android.server.StorageManagerService: java.lang.String ATTR_VERSION> = "version";

        <com.android.server.StorageManagerService: java.lang.String ATTR_USER_FLAGS> = "userFlags";

        <com.android.server.StorageManagerService: java.lang.String ATTR_TYPE> = "type";

        <com.android.server.StorageManagerService: java.lang.String ATTR_PRIMARY_STORAGE_UUID> = "primaryStorageUuid";

        <com.android.server.StorageManagerService: java.lang.String ATTR_PART_GUID> = "partGuid";

        <com.android.server.StorageManagerService: java.lang.String ATTR_NICKNAME> = "nickname";

        <com.android.server.StorageManagerService: java.lang.String ATTR_LAST_TRIM_MILLIS> = "lastTrimMillis";

        <com.android.server.StorageManagerService: java.lang.String ATTR_LAST_SEEN_MILLIS> = "lastSeenMillis";

        <com.android.server.StorageManagerService: java.lang.String ATTR_LAST_BENCH_MILLIS> = "lastBenchMillis";

        <com.android.server.StorageManagerService: java.lang.String ATTR_FS_UUID> = "fsUuid";

        <com.android.server.StorageManagerService: java.lang.String ATTR_CREATED_MILLIS> = "createdMillis";

        <com.android.server.StorageManagerService: java.lang.String ANDROID_VOLD_APP_DATA_ISOLATION_ENABLED_PROPERTY> = "persist.sys.vold_app_data_isolation_enabled";

        <com.android.server.StorageManagerService: com.android.server.StorageManagerService sSelf> = null;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean hasIsolatedStorage()>();

        <com.android.server.StorageManagerService: boolean ENABLE_ISOLATED_STORAGE> = $z0;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("StorageManagerService", 2);

        <com.android.server.StorageManagerService: boolean LOCAL_LOGV> = $z1;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "android.permission.READ_EXTERNAL_STORAGE";

        $r0[1] = "android.permission.WRITE_EXTERNAL_STORAGE";

        <com.android.server.StorageManagerService: java.lang.String[] ALL_STORAGE_PERMISSIONS> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)(^/storage/[^/]+/(?:([0-9]+)/)?Android/(?:data|media|obb|sandbox)/)([^/]+)(/.*)?");

        <com.android.server.StorageManagerService: java.util.regex.Pattern KNOWN_APP_DIR_PATHS> = $r1;

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "password";

        $r2[1] = "default";

        $r2[2] = "pattern";

        $r2[3] = "pin";

        <com.android.server.StorageManagerService: java.lang.String[] CRYPTO_TYPES> = $r2;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.StorageManagerService r0;
        boolean z1, $z2, $z3, $z4, z5, $z6, $z7;
        android.util.ArraySet $r1, $r14;
        java.lang.Object $r2, $r3, $r10, r68, r70;
        com.android.server.StorageManagerService$WatchedLockedUsers $r4;
        int[] $r5;
        android.util.ArrayMap $r6, $r7, $r8, $r9, $r15;
        java.util.HashMap $r11, $r12;
        com.android.server.StorageManagerService$StorageManagerInternalImpl $r13, $r24;
        com.android.server.StorageManagerService$1 $r16;
        com.android.server.StorageManagerService$4 $r17;
        com.android.server.StorageManagerService$14 $r18;
        java.lang.String $r19, $r37, $r39;
        java.io.File $r20, $r22, $r23, $r32, $r36, $r61, $r62, $r63;
        long $l0;
        android.util.AtomicFile $r21;
        android.content.IntentFilter $r25;
        android.os.Handler $r26;
        android.content.BroadcastReceiver $r27;
        android.content.Context $r28, r42, $r48, $r57, $r59;
        com.android.server.Watchdog $r30;
        android.content.pm.PackageManager $r31;
        java.lang.Throwable $r33, $r40, $r41;
        java.lang.StringBuilder $r34;
        android.content.ContentResolver $r43;
        com.android.server.StorageManagerService$Callbacks $r44;
        com.android.server.FgThread $r45;
        android.os.Looper $r46, $r52, $r55;
        com.android.internal.widget.LockPatternUtils $r47;
        android.os.HandlerThread $r49;
        com.android.server.StorageManagerService$StorageManagerServiceHandler $r51;
        com.android.server.StorageManagerService$ObbActionHandler $r53;
        com.android.server.IoThread $r54;
        com.android.server.storage.StorageSessionController $r56;
        com.android.server.pm.Installer $r58;
        java.io.FileOutputStream r65;

        r0 := @this: com.android.server.StorageManagerService;

        r42 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.storage.IStorageManager$Stub: void <init>()>();

        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.StorageManagerService: java.util.Set mFuseMountedUser> = $r1;

        $r2 = staticinvoke <com.android.server.LockGuard: java.lang.Object installNewLock(int)>(4);

        r0.<com.android.server.StorageManagerService: java.lang.Object mLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.StorageManagerService: java.lang.Object mPackagesLock> = $r3;

        $r4 = new com.android.server.StorageManagerService$WatchedLockedUsers;

        specialinvoke $r4.<com.android.server.StorageManagerService$WatchedLockedUsers: void <init>(com.android.server.StorageManagerService)>(r0);

        r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$WatchedLockedUsers mLocalUnlockedUsers> = $r4;

        $r5 = <libcore.util.EmptyArray: int[] INT>;

        r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers> = $r5;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks> = $r6;

        $r7 = new android.util.ArrayMap;

        specialinvoke $r7.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes> = $r7;

        $r8 = new android.util.ArrayMap;

        specialinvoke $r8.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords> = $r8;

        $r9 = new android.util.ArrayMap;

        specialinvoke $r9.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDiskScanLatches> = $r9;

        r0.<com.android.server.StorageManagerService: int mMediaStoreAuthorityAppId> = -1;

        r0.<com.android.server.StorageManagerService: int mDownloadsAuthorityAppId> = -1;

        r0.<com.android.server.StorageManagerService: int mExternalStorageAuthorityAppId> = -1;

        r0.<com.android.server.StorageManagerService: int mCurrentUserId> = 0;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<com.android.server.StorageManagerService: java.lang.Object mAppFuseLock> = $r10;

        r0.<com.android.server.StorageManagerService: int mNextAppFuseName> = 0;

        r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge> = null;

        r0.<com.android.server.StorageManagerService: boolean mBootCompleted> = 0;

        r0.<com.android.server.StorageManagerService: boolean mDaemonConnected> = 0;

        r0.<com.android.server.StorageManagerService: boolean mSecureKeyguardShowing> = 1;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap> = $r12;

        $r13 = new com.android.server.StorageManagerService$StorageManagerInternalImpl;

        specialinvoke $r13.<com.android.server.StorageManagerService$StorageManagerInternalImpl: void <init>(com.android.server.StorageManagerService,com.android.server.StorageManagerService$1)>(r0, null);

        r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$StorageManagerInternalImpl mStorageManagerInternal> = $r13;

        $r14 = new android.util.ArraySet;

        specialinvoke $r14.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.StorageManagerService: java.util.Set mUidsWithLegacyExternalStorage> = $r14;

        $r15 = new android.util.ArrayMap;

        specialinvoke $r15.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.StorageManagerService: java.util.Map mPackageMonitorsForUser> = $r15;

        $r16 = new com.android.server.StorageManagerService$1;

        specialinvoke $r16.<com.android.server.StorageManagerService$1: void <init>(com.android.server.StorageManagerService)>(r0);

        r0.<com.android.server.StorageManagerService: android.content.BroadcastReceiver mUserReceiver> = $r16;

        $r17 = new com.android.server.StorageManagerService$4;

        specialinvoke $r17.<com.android.server.StorageManagerService$4: void <init>(com.android.server.StorageManagerService)>(r0);

        r0.<com.android.server.StorageManagerService: android.os.IVoldListener mListener> = $r17;

        $r18 = new com.android.server.StorageManagerService$14;

        specialinvoke $r18.<com.android.server.StorageManagerService$14: void <init>(com.android.server.StorageManagerService)>(r0);

        r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsCallback$Stub mAppOpsCallback> = $r18;

        <com.android.server.StorageManagerService: com.android.server.StorageManagerService sSelf> = r0;

        $z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.isolated_storage", 1);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z2);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.isolated_storage_snapshot", $r19);

        z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.fuse", 1);

        r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled> = z1;

        z5 = 0;

        if z1 == 0 goto label01;

        z5 = 0;

        $z4 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.vold_app_data_isolation_enabled", 0);

        if $z4 == 0 goto label01;

        z5 = 1;

     label01:
        r0.<com.android.server.StorageManagerService: boolean mVoldAppDataIsolationEnabled> = z5;

        r0.<com.android.server.StorageManagerService: android.content.Context mContext> = r42;

        $r43 = virtualinvoke r42.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.StorageManagerService: android.content.ContentResolver mResolver> = $r43;

        $r44 = new com.android.server.StorageManagerService$Callbacks;

        $r45 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r46 = virtualinvoke $r45.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r44.<com.android.server.StorageManagerService$Callbacks: void <init>(android.os.Looper)>($r46);

        r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks> = $r44;

        $r47 = new com.android.internal.widget.LockPatternUtils;

        $r48 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        specialinvoke $r47.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r48);

        r0.<com.android.server.StorageManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r47;

        $r49 = new android.os.HandlerThread;

        specialinvoke $r49.<android.os.HandlerThread: void <init>(java.lang.String)>("StorageManagerService");

        virtualinvoke $r49.<android.os.HandlerThread: void start()>();

        $r51 = new com.android.server.StorageManagerService$StorageManagerServiceHandler;

        $r52 = virtualinvoke $r49.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r51.<com.android.server.StorageManagerService$StorageManagerServiceHandler: void <init>(com.android.server.StorageManagerService,android.os.Looper)>(r0, $r52);

        r0.<com.android.server.StorageManagerService: android.os.Handler mHandler> = $r51;

        $r53 = new com.android.server.StorageManagerService$ObbActionHandler;

        $r54 = staticinvoke <com.android.server.IoThread: com.android.server.IoThread get()>();

        $r55 = virtualinvoke $r54.<com.android.server.IoThread: android.os.Looper getLooper()>();

        specialinvoke $r53.<com.android.server.StorageManagerService$ObbActionHandler: void <init>(com.android.server.StorageManagerService,android.os.Looper)>(r0, $r55);

        r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$ObbActionHandler mObbActionHandler> = $r53;

        $r56 = new com.android.server.storage.StorageSessionController;

        $r57 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $z6 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        specialinvoke $r56.<com.android.server.storage.StorageSessionController: void <init>(android.content.Context,boolean)>($r57, $z6);

        r0.<com.android.server.StorageManagerService: com.android.server.storage.StorageSessionController mStorageSessionController> = $r56;

        $r58 = new com.android.server.pm.Installer;

        $r59 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        specialinvoke $r58.<com.android.server.pm.Installer: void <init>(android.content.Context)>($r59);

        r0.<com.android.server.StorageManagerService: com.android.server.pm.Installer mInstaller> = $r58;

        virtualinvoke $r58.<com.android.server.pm.Installer: void onStart()>();

        $r61 = new java.io.File;

        $r62 = new java.io.File;

        $r63 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r62.<java.io.File: void <init>(java.io.File,java.lang.String)>($r63, "system");

        specialinvoke $r61.<java.io.File: void <init>(java.io.File,java.lang.String)>($r62, "last-fstrim");

        r0.<com.android.server.StorageManagerService: java.io.File mLastMaintenanceFile> = $r61;

        $z7 = virtualinvoke $r61.<java.io.File: boolean exists()>();

        if $z7 != 0 goto label06;

     label02:
        r65 = new java.io.FileOutputStream;

        $r32 = r0.<com.android.server.StorageManagerService: java.io.File mLastMaintenanceFile>;

        specialinvoke r65.<java.io.FileOutputStream: void <init>(java.io.File)>($r32);

        virtualinvoke r65.<java.io.FileOutputStream: void close()>();

     label03:
        goto label05;

     label04:
        $r33 := @caughtexception;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create fstrim record ");

        $r36 = r0.<com.android.server.StorageManagerService: java.io.File mLastMaintenanceFile>;

        $r37 = virtualinvoke $r36.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StorageManagerService", $r39);

     label05:
        goto label07;

     label06:
        $r20 = r0.<com.android.server.StorageManagerService: java.io.File mLastMaintenanceFile>;

        $l0 = virtualinvoke $r20.<java.io.File: long lastModified()>();

        r0.<com.android.server.StorageManagerService: long mLastMaintenance> = $l0;

     label07:
        $r21 = new android.util.AtomicFile;

        $r22 = new java.io.File;

        $r23 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r22.<java.io.File: void <init>(java.io.File,java.lang.String)>($r23, "storage.xml");

        specialinvoke $r21.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>($r22, "storage-settings");

        r0.<com.android.server.StorageManagerService: android.util.AtomicFile mSettingsFile> = $r21;

        r68 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r68;

     label08:
        specialinvoke r0.<com.android.server.StorageManagerService: void readSettingsLocked()>();

        exitmonitor r68;

     label09:
        $r24 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$StorageManagerInternalImpl mStorageManagerInternal>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/os/storage/StorageManagerInternal;", $r24);

        $r25 = new android.content.IntentFilter;

        specialinvoke $r25.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r25.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke $r25.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r28 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r27 = r0.<com.android.server.StorageManagerService: android.content.BroadcastReceiver mUserReceiver>;

        $r26 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r28.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r27, $r25, null, $r26);

        r70 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r70;

     label10:
        specialinvoke r0.<com.android.server.StorageManagerService: void addInternalVolumeLocked()>();

        exitmonitor r70;

     label11:
        $r30 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r30.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        $r31 = virtualinvoke r42.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z3 = virtualinvoke $r31.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        r0.<com.android.server.StorageManagerService: boolean mIsAutomotive> = $z3;

        return;

     label12:
        $r41 := @caughtexception;

     label13:
        exitmonitor r70;

     label14:
        throw $r41;

     label15:
        $r40 := @caughtexception;

     label16:
        exitmonitor r68;

     label17:
        throw $r40;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    static void access$000(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void start()>();

        return;
    }

    static void access$100(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void servicesReady()>();

        return;
    }

    static com.android.server.StorageManagerService$ObbActionHandler access$1000(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        com.android.server.StorageManagerService$ObbActionHandler $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$ObbActionHandler mObbActionHandler>;

        return $r1;
    }

    static void access$1100(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void handleSystemReady()>();

        return;
    }

    static void access$1200(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void handleBootCompleted()>();

        return;
    }

    static void access$1300(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void handleDaemonConnected()>();

        return;
    }

    static long access$1400(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        long $l0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $l0 = r0.<com.android.server.StorageManagerService: long mLastMaintenance>;

        return $l0;
    }

    static long access$1402(com.android.server.StorageManagerService, long)
    {
        com.android.server.StorageManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        l0 := @parameter1: long;

        r0.<com.android.server.StorageManagerService: long mLastMaintenance> = l0;

        return l0;
    }

    static java.io.File access$1500(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: java.io.File mLastMaintenanceFile>;

        return $r1;
    }

    static android.os.IVold access$1600(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        return $r1;
    }

    static android.os.IVold access$1602(com.android.server.StorageManagerService, android.os.IVold)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.IVold;

        r0.<com.android.server.StorageManagerService: android.os.IVold mVold> = r1;

        return r1;
    }

    static boolean access$1700(com.android.server.StorageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        $z0 = specialinvoke r0.<com.android.server.StorageManagerService: boolean isMountDisallowed(android.os.storage.VolumeInfo)>(r1);

        return $z0;
    }

    static void access$1800(com.android.server.StorageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        specialinvoke r0.<com.android.server.StorageManagerService: void mount(android.os.storage.VolumeInfo)>(r1);

        return;
    }

    static void access$1900(com.android.server.StorageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        specialinvoke r0.<com.android.server.StorageManagerService: void unmount(android.os.storage.VolumeInfo)>(r1);

        return;
    }

    static void access$200(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void systemReady()>();

        return;
    }

    static android.content.Context access$2000(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$2100(com.android.server.StorageManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void forgetPartition(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$2200(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void resetIfBootedAndConnected()>();

        return;
    }

    static void access$2300(com.android.server.StorageManagerService, int)
    {
        com.android.server.StorageManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void completeUnlockUser(int)>(i0);

        return;
    }

    static void access$2400(com.android.server.StorageManagerService, android.os.storage.VolumeInfo, int, int)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        int i0, i1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void onVolumeStateChangedAsync(android.os.storage.VolumeInfo,int,int)>(r1, i0, i1);

        return;
    }

    static android.util.ArrayMap access$2500(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        return $r1;
    }

    static android.os.Handler access$2600(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$2700(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void refreshZramSettings()>();

        return;
    }

    static void access$2800(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void refreshIsolatedStorageSettings()>();

        return;
    }

    static void access$300(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void bootCompleted()>();

        return;
    }

    static java.lang.Object access$3000(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static android.util.ArrayMap access$3100(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks>;

        return $r1;
    }

    static void access$3200(com.android.server.StorageManagerService, android.os.storage.DiskInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.DiskInfo r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.storage.DiskInfo;

        specialinvoke r0.<com.android.server.StorageManagerService: void onDiskScannedLocked(android.os.storage.DiskInfo)>(r1);

        return;
    }

    static com.android.server.StorageManagerService$Callbacks access$3300(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        com.android.server.StorageManagerService$Callbacks $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        return $r1;
    }

    static void access$3500(com.android.server.StorageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        specialinvoke r0.<com.android.server.StorageManagerService: void onVolumeCreatedLocked(android.os.storage.VolumeInfo)>(r1);

        return;
    }

    static void access$3600(com.android.server.StorageManagerService, android.os.storage.VolumeInfo, int, int)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        int i0, i1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void onVolumeStateChangedLocked(android.os.storage.VolumeInfo,int,int)>(r1, i0, i1);

        return;
    }

    static com.android.server.storage.StorageSessionController access$3700(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        com.android.server.storage.StorageSessionController $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: com.android.server.storage.StorageSessionController mStorageSessionController>;

        return $r1;
    }

    static com.android.server.pm.Installer access$3800(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        com.android.server.pm.Installer $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: com.android.server.pm.Installer mInstaller>;

        return $r1;
    }

    static int access$402(com.android.server.StorageManagerService, int)
    {
        com.android.server.StorageManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        r0.<com.android.server.StorageManagerService: int mCurrentUserId> = i0;

        return i0;
    }

    static android.os.IStoraged access$4102(com.android.server.StorageManagerService, android.os.IStoraged)
    {
        com.android.server.StorageManagerService r0;
        android.os.IStoraged r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.IStoraged;

        r0.<com.android.server.StorageManagerService: android.os.IStoraged mStoraged> = r1;

        return r1;
    }

    static void access$4200(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void connectStoraged()>();

        return;
    }

    static void access$4300(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void connectVold()>();

        return;
    }

    static void access$4400(com.android.server.StorageManagerService, java.lang.String, int, boolean)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.StorageManagerService: void updateLegacyStorageApps(java.lang.String,int,boolean)>(r1, i0, z0);

        return;
    }

    static void access$4500(com.android.server.StorageManagerService, android.os.IVoldTaskListener, int, android.os.PersistableBundle)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVoldTaskListener r1;
        int i0;
        android.os.PersistableBundle r2;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.IVoldTaskListener;

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.PersistableBundle;

        specialinvoke r0.<com.android.server.StorageManagerService: void dispatchOnStatus(android.os.IVoldTaskListener,int,android.os.PersistableBundle)>(r1, i0, r2);

        return;
    }

    static void access$4600(com.android.server.StorageManagerService, android.os.IVoldTaskListener, int, android.os.PersistableBundle)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVoldTaskListener r1;
        int i0;
        android.os.PersistableBundle r2;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.IVoldTaskListener;

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.PersistableBundle;

        specialinvoke r0.<com.android.server.StorageManagerService: void dispatchOnFinished(android.os.IVoldTaskListener,int,android.os.PersistableBundle)>(r1, i0, r2);

        return;
    }

    static java.lang.String access$4700(com.android.server.StorageManagerService, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String scrubPath(java.lang.String)>(r1);

        return $r2;
    }

    static android.os.storage.VolumeRecord access$4800(com.android.server.StorageManagerService, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        android.os.storage.VolumeRecord $r2;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeRecord findRecordForPath(java.lang.String)>(r1);

        return $r2;
    }

    static void access$4900(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void writeSettingsLocked()>();

        return;
    }

    static void access$500(com.android.server.StorageManagerService, int)
    {
        com.android.server.StorageManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void onUnlockUser(int)>(i0);

        return;
    }

    static void access$5200(com.android.server.StorageManagerService, int)
    {
        com.android.server.StorageManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void onMoveStatusLocked(int)>(i0);

        return;
    }

    static boolean access$5300()
    {
        boolean $z0;

        $z0 = <com.android.server.StorageManagerService: boolean ENABLE_ISOLATED_STORAGE>;

        return $z0;
    }

    static int access$5400(com.android.server.StorageManagerService, int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        int i0, $i1;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i1 = specialinvoke r0.<com.android.server.StorageManagerService: int getMountMode(int,java.lang.String)>(i0, r1);

        return $i1;
    }

    static void access$5500(com.android.server.StorageManagerService, int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void remountUidExternalStorage(int,int)>(i0, i1);

        return;
    }

    static java.util.Map access$5600(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        return $r1;
    }

    static java.util.Map access$5700(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap>;

        return $r1;
    }

    static void access$5800(com.android.server.StorageManagerService, com.android.server.StorageManagerService$ObbState)
    {
        com.android.server.StorageManagerService r0;
        com.android.server.StorageManagerService$ObbState r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: com.android.server.StorageManagerService$ObbState;

        specialinvoke r0.<com.android.server.StorageManagerService: void removeObbStateLocked(com.android.server.StorageManagerService$ObbState)>(r1);

        return;
    }

    static void access$5900(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void warnOnNotMounted()>();

        return;
    }

    static void access$600(com.android.server.StorageManagerService, int)
    {
        com.android.server.StorageManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void onCleanupUser(int)>(i0);

        return;
    }

    static boolean access$6000(com.android.server.StorageManagerService, java.lang.String, int)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.StorageManagerService: boolean isUidOwnerOfPackageOrSystem(java.lang.String,int)>(r1, i0);

        return $z0;
    }

    static void access$6100(com.android.server.StorageManagerService, com.android.server.StorageManagerService$ObbState) throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        com.android.server.StorageManagerService$ObbState r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: com.android.server.StorageManagerService$ObbState;

        specialinvoke r0.<com.android.server.StorageManagerService: void addObbStateLocked(com.android.server.StorageManagerService$ObbState)>(r1);

        return;
    }

    static java.util.Set access$6200(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: java.util.Set mFuseMountedUser>;

        return $r1;
    }

    static android.content.pm.PackageManagerInternal access$6300(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        android.content.pm.PackageManagerInternal $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        return $r1;
    }

    static android.content.pm.IPackageManager access$6400(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        android.content.pm.IPackageManager $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageManager mIPackageManager>;

        return $r1;
    }

    static java.util.Set access$6500(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: java.util.Set mUidsWithLegacyExternalStorage>;

        return $r1;
    }

    static int access$6600(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $i0 = r0.<com.android.server.StorageManagerService: int mMediaStoreAuthorityAppId>;

        return $i0;
    }

    static boolean access$6700(com.android.server.StorageManagerService)
    {
        com.android.server.StorageManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        $z0 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        return $z0;
    }

    static void access$700(com.android.server.StorageManagerService, int)
    {
        com.android.server.StorageManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.StorageManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void onStopUser(int)>(i0);

        return;
    }

    static void access$800(com.android.server.StorageManagerService, android.os.UserHandle)
    {
        com.android.server.StorageManagerService r0;
        android.os.UserHandle r1;

        r0 := @parameter0: com.android.server.StorageManagerService;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<com.android.server.StorageManagerService: void snapshotAndMonitorLegacyStorageAppOp(android.os.UserHandle)>(r1);

        return;
    }

    private void addInternalVolumeLocked()
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo $r2;
        java.io.File $r3;
        java.lang.String $r4, $r5;
        android.util.ArrayMap $r6;

        r0 := @this: com.android.server.StorageManagerService;

        $r2 = new android.os.storage.VolumeInfo;

        specialinvoke $r2.<android.os.storage.VolumeInfo: void <init>(java.lang.String,int,android.os.storage.DiskInfo,java.lang.String)>("private", 1, null, null);

        $r2.<android.os.storage.VolumeInfo: int state> = 2;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2.<android.os.storage.VolumeInfo: java.lang.String path> = $r4;

        $r6 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r5 = $r2.<android.os.storage.VolumeInfo: java.lang.String id>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2);

        return;
    }

    private void addObbStateLocked(com.android.server.StorageManagerService$ObbState) throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        com.android.server.StorageManagerService$ObbState r1, $r10;
        android.os.IBinder r2;
        java.util.Iterator r3;
        java.util.Map $r4, $r7, $r15, $r18;
        java.lang.Object $r5, $r9, r21;
        boolean $z0, $z2, $z4;
        java.lang.String $r6, $r11, $r12;
        android.os.RemoteException $r17;
        java.util.List r20, r25, r26, r27;
        java.util.ArrayList r23;
        java.lang.IllegalStateException r24;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: com.android.server.StorageManagerService$ObbState;

        r2 = virtualinvoke r1.<com.android.server.StorageManagerService$ObbState: android.os.IBinder getBinder()>();

        $r4 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r20 = (java.util.List) $r5;

        if r20 != null goto label1;

        r23 = new java.util.ArrayList;

        specialinvoke r23.<java.util.ArrayList: void <init>()>();

        r21 = r23;

        $r15 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r23);

        goto label4;

     label1:
        r3 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label2:
        r21 = r20;

        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.StorageManagerService$ObbState) $r9;

        $r12 = $r10.<com.android.server.StorageManagerService$ObbState: java.lang.String rawPath>;

        $r11 = r1.<com.android.server.StorageManagerService$ObbState: java.lang.String rawPath>;

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 != 0 goto label3;

        goto label2;

     label3:
        r24 = new java.lang.IllegalStateException;

        specialinvoke r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Attempt to add ObbState twice. This indicates an error in the StorageManagerService logic.");

        throw r24;

     label4:
        r25 = (java.util.List) r21;

        interfaceinvoke r25.<java.util.List: boolean add(java.lang.Object)>(r1);

     label5:
        virtualinvoke r1.<com.android.server.StorageManagerService$ObbState: void link()>();

     label6:
        $r7 = r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap>;

        $r6 = r1.<com.android.server.StorageManagerService$ObbState: java.lang.String rawPath>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        return;

     label7:
        $r17 := @caughtexception;

        r26 = (java.util.List) r21;

        interfaceinvoke r26.<java.util.List: boolean remove(java.lang.Object)>(r1);

        r27 = (java.util.List) r21;

        $z4 = interfaceinvoke r27.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label8;

        $r18 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label8:
        throw $r17;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private int adjustAllocateFlags(int, int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, $i3, $i4, i6, i7;
        android.app.AppOpsManager r1;
        long l2;
        android.content.Context $r2, $r8;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.String $r7, r10;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.StorageManagerService;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        r10 := @parameter2: java.lang.String;

        $i3 = i6 & 1;

        if $i3 == 0 goto label1;

        $r8 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ALLOCATE_AGGRESSIVE", "StorageManagerService");

     label1:
        $i4 = i6 & -3;

        i1 = $i4 & -5;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        r1 = (android.app.AppOpsManager) $r3;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        i7 = i1;

     label2:
        $z0 = virtualinvoke r1.<android.app.AppOpsManager: boolean isOperationActive(int,int,java.lang.String)>(26, i0, r10);

        if $z0 == 0 goto label4;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UID ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is actively using camera; letting them defy reserved cached data");

        $r7 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r7);

     label3:
        i7 = i1 | 4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return i7;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    private void bootCompleted()
    {
        com.android.server.StorageManagerService r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.StorageManagerService;

        r0.<com.android.server.StorageManagerService: boolean mBootCompleted> = 1;

        $r1 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(13);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        specialinvoke r0.<com.android.server.StorageManagerService: void updateFusePropFromSettings()>();

        return;
    }

    private void completeUnlockUser(int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, $i2, $i3, i5, i6, $i7;
        java.lang.Object r1, $r5;
        boolean $z0, $z1, $z2;
        int[] $r2, $r3, r16;
        android.util.ArrayMap $r4, $r18;
        android.content.Context $r6;
        android.os.Handler $r7;
        android.os.Message $r8;
        com.android.server.StorageManagerService$Callbacks $r9;
        java.lang.String $r10, $r13, r21;
        android.content.pm.PackageManagerInternal $r14;
        java.lang.Throwable $r15;
        java.lang.StringBuilder r17;
        android.os.storage.VolumeInfo r19;
        android.os.storage.StorageVolume r20;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        if i0 != 0 goto label01;

        $r14 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        virtualinvoke $r14.<android.content.pm.PackageManagerInternal: void migrateLegacyObbData()>();

     label01:
        virtualinvoke r0.<com.android.server.StorageManagerService: void onKeyguardStateChanged(boolean)>(0);

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $z0 = r0.<com.android.server.StorageManagerService: boolean mIsAutomotive>;

        if $z0 == 0 goto label08;

        r16 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        i1 = lengthof r16;

     label03:
        i5 = 0;

     label04:
        if i5 >= i1 goto label08;

        $i3 = r16[i5];

        if $i3 != i0 goto label07;

     label05:
        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("completeUnlockUser called for already unlocked user:");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("StorageManagerService", $r13);

        exitmonitor r1;

     label06:
        return;

     label07:
        i5 = i5 + 1;

        goto label04;

     label08:
        i6 = 0;

     label09:
        $r18 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i7 = virtualinvoke $r18.<android.util.ArrayMap: int size()>();

        if i6 >= $i7 goto label11;

        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        r19 = (android.os.storage.VolumeInfo) $r5;

        $z1 = virtualinvoke r19.<android.os.storage.VolumeInfo: boolean isVisibleForRead(int)>(i0);

        if $z1 == 0 goto label10;

        $z2 = virtualinvoke r19.<android.os.storage.VolumeInfo: boolean isMountedReadable()>();

        if $z2 == 0 goto label10;

        $r6 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        r20 = virtualinvoke r19.<android.os.storage.VolumeInfo: android.os.storage.StorageVolume buildStorageVolume(android.content.Context,int,boolean)>($r6, i0, 0);

        $r7 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r8 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(6, r20);

        virtualinvoke $r8.<android.os.Message: void sendToTarget()>();

        $i2 = virtualinvoke r19.<android.os.storage.VolumeInfo: int getState()>();

        r21 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getEnvironmentForState(int)>($i2);

        $r9 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        $r10 = virtualinvoke r20.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$2900(com.android.server.StorageManagerService$Callbacks,java.lang.String,java.lang.String,java.lang.String)>($r9, $r10, r21, r21);

     label10:
        i6 = i6 + 1;

        goto label09;

     label11:
        $r2 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        $r3 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>($r2, i0);

        r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers> = $r3;

        exitmonitor r1;

     label12:
        return;

     label13:
        $r15 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r15;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void connectStoraged()
    {
        com.android.server.StorageManagerService r0;
        android.os.IBinder r1, r7;
        android.os.IStoraged $r2, $r5;
        android.os.Handler $r3;
        com.android.server._$$Lambda$StorageManagerService$1Q_KZa2Hx_KUWPEktCctvDhjjtQ $r4;
        android.os.RemoteException $r6;
        com.android.server.StorageManagerService$5 r8;

        r0 := @this: com.android.server.StorageManagerService;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("storaged");

        r7 = r1;

        if r1 == null goto label4;

     label1:
        r8 = new com.android.server.StorageManagerService$5;

        specialinvoke r8.<com.android.server.StorageManagerService$5: void <init>(com.android.server.StorageManagerService)>(r0);

        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r8, 0);

     label2:
        r7 = r1;

        goto label4;

     label3:
        $r6 := @caughtexception;

        r7 = null;

     label4:
        if r7 == null goto label5;

        $r5 = staticinvoke <android.os.IStoraged$Stub: android.os.IStoraged asInterface(android.os.IBinder)>(r7);

        r0.<com.android.server.StorageManagerService: android.os.IStoraged mStoraged> = $r5;

        goto label6;

     label5:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", "storaged not found; trying again");

     label6:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IStoraged mStoraged>;

        if $r2 != null goto label7;

        $r3 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r4 = new com.android.server._$$Lambda$StorageManagerService$1Q_KZa2Hx_KUWPEktCctvDhjjtQ;

        specialinvoke $r4.<com.android.server._$$Lambda$StorageManagerService$1Q_KZa2Hx_KUWPEktCctvDhjjtQ: void <init>(com.android.server.StorageManagerService)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r4, 1000L);

        goto label8;

     label7:
        virtualinvoke r0.<com.android.server.StorageManagerService: void onDaemonConnected()>();

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void connectVold()
    {
        com.android.server.StorageManagerService r0;
        android.os.IBinder r1, r10;
        android.os.IVold $r2, $r5, $r7;
        android.os.Handler $r3;
        com.android.server._$$Lambda$StorageManagerService$43y8_l8yNNnpxoU9_BJAIKmuH5I $r4;
        android.os.IVoldListener $r6;
        android.os.RemoteException $r8, $r9;
        com.android.server.StorageManagerService$6 r11;

        r0 := @this: com.android.server.StorageManagerService;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("vold");

        r10 = r1;

        if r1 == null goto label04;

     label01:
        r11 = new com.android.server.StorageManagerService$6;

        specialinvoke r11.<com.android.server.StorageManagerService$6: void <init>(com.android.server.StorageManagerService)>(r0);

        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r11, 0);

     label02:
        r10 = r1;

        goto label04;

     label03:
        $r8 := @caughtexception;

        r10 = null;

     label04:
        if r10 == null goto label09;

        $r5 = staticinvoke <android.os.IVold$Stub: android.os.IVold asInterface(android.os.IBinder)>(r10);

        r0.<com.android.server.StorageManagerService: android.os.IVold mVold> = $r5;

     label05:
        $r7 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $r6 = r0.<com.android.server.StorageManagerService: android.os.IVoldListener mListener>;

        interfaceinvoke $r7.<android.os.IVold: void setListener(android.os.IVoldListener)>($r6);

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

        r0.<com.android.server.StorageManagerService: android.os.IVold mVold> = null;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "vold listener rejected; trying again", $r9);

     label08:
        goto label10;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", "vold not found; trying again");

     label10:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        if $r2 != null goto label11;

        $r3 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r4 = new com.android.server._$$Lambda$StorageManagerService$43y8_l8yNNnpxoU9_BJAIKmuH5I;

        specialinvoke $r4.<com.android.server._$$Lambda$StorageManagerService$43y8_l8yNNnpxoU9_BJAIKmuH5I: void <init>(com.android.server.StorageManagerService)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r4, 1000L);

        goto label12;

     label11:
        virtualinvoke r0.<com.android.server.StorageManagerService: void onDaemonConnected()>();

     label12:
        return;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch android.os.RemoteException from label05 to label06 with label07;
    }

    private void copyLocaleFromMountService()
    {
        com.android.server.StorageManagerService r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r8;
        java.lang.String $r5, $r12, $r13, r16;
        android.content.res.Configuration $r6;
        android.app.IActivityManager $r7;
        android.os.RemoteException $r14, $r15;
        java.util.Locale r18;

        r0 := @this: com.android.server.StorageManagerService;

     label1:
        r16 = virtualinvoke r0.<com.android.server.StorageManagerService: java.lang.String getField(java.lang.String)>("SystemLocale");

     label2:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r16);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got locale ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from mount service");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r5);

        r18 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>(r16);

        $r6 = new android.content.res.Configuration;

        specialinvoke $r6.<android.content.res.Configuration: void <init>()>();

        virtualinvoke $r6.<android.content.res.Configuration: void setLocale(java.util.Locale)>(r18);

     label4:
        $r7 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r7.<android.app.IActivityManager: void updatePersistentConfiguration(android.content.res.Configuration)>($r6);

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "Error setting system locale from mount service", $r15);

     label7:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting system properties to ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from mount service");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r12);

        $r13 = virtualinvoke r18.<java.util.Locale: java.lang.String toLanguageTag()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.locale", $r13);

        return;

     label8:
        $r14 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void dispatchOnFinished(android.os.IVoldTaskListener, int, android.os.PersistableBundle)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.os.PersistableBundle r1;
        android.os.RemoteException $r2;
        android.os.IVoldTaskListener r3;

        r0 := @this: com.android.server.StorageManagerService;

        r3 := @parameter0: android.os.IVoldTaskListener;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.PersistableBundle;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.os.IVoldTaskListener: void onFinished(int,android.os.PersistableBundle)>(i0, r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchOnStatus(android.os.IVoldTaskListener, int, android.os.PersistableBundle)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.os.PersistableBundle r1;
        android.os.RemoteException $r2;
        android.os.IVoldTaskListener r3;

        r0 := @this: com.android.server.StorageManagerService;

        r3 := @parameter0: android.os.IVoldTaskListener;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.PersistableBundle;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.os.IVoldTaskListener: void onStatus(int,android.os.PersistableBundle)>(i0, r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private java.lang.String encodeBytes(byte[])
    {
        com.android.server.StorageManagerService r0;
        byte[] r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: byte[];

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(byte[])>(r1);

        if $z0 == 0 goto label1;

        return "!";

     label1:
        $r2 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r1);

        return $r2;
    }

    private void enforceAdminUser()
    {
        com.android.server.StorageManagerService r0;
        int i0;
        long l1;
        boolean z0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.content.pm.UserInfo $r3;
        java.lang.SecurityException $r4;
        java.lang.Throwable $r5;
        android.os.UserManager r6;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r6 = (android.os.UserManager) $r2;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = virtualinvoke r6.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        z0 = virtualinvoke $r3.<android.content.pm.UserInfo: boolean isAdmin()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        if z0 == 0 goto label3;

        return;

     label3:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Only admin users can adopt sd cards");

        throw $r4;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void enforcePermission(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>(r1, r1);

        return;
    }

    private java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r4;
        java.util.concurrent.CountDownLatch r2, r9;
        android.util.ArrayMap $r3, $r5;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.StorageManagerService;

        r8 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDiskScanLatches>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r2 = (java.util.concurrent.CountDownLatch) $r4;

     label2:
        r9 = r2;

        if r2 != null goto label5;

     label3:
        r9 = new java.util.concurrent.CountDownLatch;

        specialinvoke r9.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

     label4:
        $r5 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDiskScanLatches>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9);

     label5:
        exitmonitor r1;

     label6:
        return r9;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private android.os.storage.VolumeRecord findRecordForPath(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r5, $r10;
        android.os.storage.VolumeInfo r2;
        android.util.ArrayMap $r3, $r4, $r9;
        int $i0, i1;
        java.lang.String $r6, $r7, $r8, r12;
        boolean $z0;
        java.lang.Throwable $r11;
        android.os.storage.VolumeRecord r13;

        r0 := @this: com.android.server.StorageManagerService;

        r12 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        i1 = 0;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i1 >= $i0 goto label4;

        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r2 = (android.os.storage.VolumeInfo) $r5;

        $r6 = r2.<android.os.storage.VolumeInfo: java.lang.String path>;

        if $r6 == null goto label3;

        $r7 = r2.<android.os.storage.VolumeInfo: java.lang.String path>;

        $z0 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r7);

        if $z0 == 0 goto label3;

        $r9 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r8 = r2.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        r13 = (android.os.storage.VolumeRecord) $r10;

        exitmonitor r1;

     label2:
        return r13;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        return null;

     label6:
        $r11 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.os.storage.VolumeInfo findStorageForUuid(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, $r5;
        android.os.storage.StorageManager r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;
        android.os.storage.VolumeInfo $r6, $r7, $r8, $r9;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r2 = (android.os.storage.StorageManager) $r4;

        $r5 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, r1);

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeById(java.lang.String)>("emulated;0");

        return $r9;

     label1:
        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", r1);

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo getPrimaryPhysicalVolume()>();

        return $r8;

     label2:
        $r6 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>(r1);

        $r7 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findEmulatedForPrivate(android.os.storage.VolumeInfo)>($r6);

        return $r7;
    }

    private android.os.storage.VolumeInfo findVolumeByIdOrThrow(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3, r11;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8, r10;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.StorageManagerService;

        r10 := @parameter0: java.lang.String;

        r11 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r11;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r1 = (android.os.storage.VolumeInfo) $r3;

     label2:
        if r1 == null goto label5;

     label3:
        exitmonitor r11;

     label4:
        return r1;

     label5:
        exitmonitor r11;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No volume found for ID ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r11;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private java.lang.String findVolumeIdForPathOrThrow(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        android.util.ArrayMap $r2, $r8;
        int $i0, i1;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, $r10, $r11, r13, r15;
        java.lang.Object $r9, r14;
        boolean $z0;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.StorageManagerService;

        r13 := @parameter0: java.lang.String;

        r14 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r14;

        i1 = 0;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if i1 >= $i0 goto label4;

        $r8 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r1 = (android.os.storage.VolumeInfo) $r9;

        $r10 = r1.<android.os.storage.VolumeInfo: java.lang.String path>;

        if $r10 == null goto label3;

        $r11 = r1.<android.os.storage.VolumeInfo: java.lang.String path>;

        $z0 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r11);

        if $z0 == 0 goto label3;

        r15 = r1.<android.os.storage.VolumeInfo: java.lang.String id>;

        exitmonitor r14;

     label2:
        return r15;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        exitmonitor r14;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No volume found for path ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r14;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void forgetPartition(java.lang.String, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, r4;
        android.os.IVold $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.StorageManagerService;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void forgetPartition(java.lang.String,java.lang.String)>(r4, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.String getDefaultPrimaryStorageUuid()
    {
        com.android.server.StorageManagerService r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: com.android.server.StorageManagerService;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.vold.primary_physical", 0);

        if $z0 == 0 goto label1;

        return "primary_physical";

     label1:
        $r1 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        return $r1;
    }

    private static long getLastAccessTime(android.app.AppOpsManager, int, java.lang.String, int[])
    {
        int i0;
        int[] r0;
        java.util.List $r1, $r2, $r5, $r6;
        boolean $z0, $z1;
        java.lang.Object $r3, $r7;
        android.app.AppOpsManager$PackageOps $r4;
        android.app.AppOpsManager$OpEntry $r8;
        long $l1, l2;
        android.app.AppOpsManager r9;
        java.lang.String r10;
        java.util.Iterator r11, r12;

        r9 := @parameter0: android.app.AppOpsManager;

        i0 := @parameter1: int;

        r10 := @parameter2: java.lang.String;

        r0 := @parameter3: int[];

        l2 = 0L;

        $r1 = virtualinvoke r9.<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,int[])>(i0, r10, r0);

        $r2 = staticinvoke <com.android.internal.util.CollectionUtils: java.util.List emptyIfNull(java.util.List)>($r1);

        r11 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.app.AppOpsManager$PackageOps) $r3;

        $r5 = virtualinvoke $r4.<android.app.AppOpsManager$PackageOps: java.util.List getOps()>();

        $r6 = staticinvoke <com.android.internal.util.CollectionUtils: java.util.List emptyIfNull(java.util.List)>($r5);

        r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.app.AppOpsManager$OpEntry) $r7;

        $l1 = virtualinvoke $r8.<android.app.AppOpsManager$OpEntry: long getLastAccessTime(int)>(13);

        l2 = staticinvoke <java.lang.Math: long max(long,long)>(l2, $l1);

        goto label2;

     label3:
        goto label1;

     label4:
        return l2;
    }

    private int getMountMode(int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        java.lang.String r1, $r9, $r11;
        boolean $z0;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 = specialinvoke r0.<com.android.server.StorageManagerService: int getMountModeInternal(int,java.lang.String)>(i0, r1);

        $z0 = <com.android.server.StorageManagerService: boolean LOCAL_LOGV>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolved mode ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = staticinvoke <android.os.UserHandle: java.lang.String formatUid(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", $r11);

     label1:
        return i1;
    }

    private int getMountModeInternal(int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String[] r1;
        boolean z0, z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13, z14, z15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13;
        android.content.pm.IPackageManager $r2, $r4, $r5, $r8, $r16;
        android.content.pm.PackageManagerInternal $r3;
        com.android.internal.app.IAppOpsService $r6, $r7;
        com.android.server.StorageManagerService$StorageManagerInternalImpl $r9;
        android.os.RemoteException $r10, $r11;
        java.lang.String r12, r17;
        android.content.pm.ApplicationInfo r13;
        android.content.Context $r14, $r15;

        r0 := @this: com.android.server.StorageManagerService;

        i10 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

     label01:
        $z3 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i10);

        if $z3 == 0 goto label03;

     label02:
        return 0;

     label03:
        $r2 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>(i10);

        $z4 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z4 == 0 goto label05;

     label04:
        return 0;

     label05:
        if r12 != null goto label06;

        r12 = r1[0];

        goto label06;

     label06:
        $r3 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i10);

        $z5 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>(r12, $i1);

        if $z5 == 0 goto label08;

     label07:
        return 0;

     label08:
        $z6 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        if $z6 == 0 goto label10;

        $r9 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$StorageManagerInternalImpl mStorageManagerInternal>;

        $z10 = virtualinvoke $r9.<com.android.server.StorageManagerService$StorageManagerInternalImpl: boolean isExternalStorageService(int)>(i10);

        if $z10 == 0 goto label10;

     label09:
        return 7;

     label10:
        $z7 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        if $z7 == 0 goto label12;

        $i6 = r0.<com.android.server.StorageManagerService: int mDownloadsAuthorityAppId>;

        $i7 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i10);

        if $i6 == $i7 goto label11;

        $i8 = r0.<com.android.server.StorageManagerService: int mExternalStorageAuthorityAppId>;

        $i9 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i10);

        if $i8 != $i9 goto label12;

     label11:
        return 8;

     label12:
        $r4 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $i2 = interfaceinvoke $r4.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>("android.permission.ACCESS_MTP", i10);

        if $i2 != 0 goto label14;

     label13:
        z11 = 1;

        goto label15;

     label14:
        z11 = 0;

     label15:
        $z8 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        if $z8 == 0 goto label21;

     label16:
        if z11 == 0 goto label21;

     label17:
        $r8 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $i5 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i10);

        r13 = interfaceinvoke $r8.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r12, 0, $i5);

     label18:
        if r13 == null goto label21;

     label19:
        $z9 = virtualinvoke r13.<android.content.pm.ApplicationInfo: boolean isSignedWithPlatformKey()>();

        if $z9 == 0 goto label21;

     label20:
        return 8;

     label21:
        $r14 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        z0 = staticinvoke <android.os.storage.StorageManager: boolean checkPermissionAndCheckOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,int)>($r14, 0, 0, i10, r12, "android.permission.READ_EXTERNAL_STORAGE", 59);

        $r15 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        z1 = staticinvoke <android.os.storage.StorageManager: boolean checkPermissionAndCheckOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,int)>($r15, 0, 0, i10, r12, "android.permission.WRITE_EXTERNAL_STORAGE", 60);

        $r16 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $i11 = interfaceinvoke $r16.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>("android.permission.WRITE_MEDIA_STORAGE", i10);

        if $i11 != 0 goto label23;

     label22:
        z12 = 1;

        goto label24;

     label23:
        z12 = 0;

     label24:
        if z12 == 0 goto label25;

        if z1 == 0 goto label25;

        return 6;

     label25:
        $r5 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $i3 = interfaceinvoke $r5.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGES", i10);

        if $i3 != 0 goto label27;

     label26:
        z13 = 1;

        goto label28;

     label27:
        z13 = 0;

     label28:
        i0 = lengthof r1;

     label29:
        i12 = 0;

     label30:
        z14 = 0;

        if i12 >= i0 goto label34;

        r17 = r1[i12];

     label31:
        $r7 = r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsService mIAppOpsService>;

        $i4 = interfaceinvoke $r7.<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>(66, i10, r17);

        if $i4 != 0 goto label33;

     label32:
        z14 = 1;

        goto label34;

     label33:
        i12 = i12 + 1;

        goto label30;

     label34:
        if z13 != 0 goto label35;

        if z14 == 0 goto label36;

     label35:
        if z1 == 0 goto label36;

        return 5;

     label36:
        $r6 = r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsService mIAppOpsService>;

        i13 = interfaceinvoke $r6.<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>(87, i10, r12);

     label37:
        if i13 != 0 goto label38;

        z15 = 1;

        goto label39;

     label38:
        z15 = 0;

     label39:
        if z15 == 0 goto label40;

        if z1 == 0 goto label40;

        return 3;

     label40:
        if z15 == 0 goto label41;

        if z0 == 0 goto label41;

        return 2;

     label41:
        return 1;

     label42:
        $r10 := @caughtexception;

        goto label44;

     label43:
        $r11 := @caughtexception;

     label44:
        return 0;

        catch android.os.RemoteException from label01 to label02 with label43;
        catch android.os.RemoteException from label03 to label04 with label43;
        catch android.os.RemoteException from label06 to label07 with label42;
        catch android.os.RemoteException from label08 to label09 with label42;
        catch android.os.RemoteException from label10 to label11 with label42;
        catch android.os.RemoteException from label12 to label13 with label42;
        catch android.os.RemoteException from label15 to label16 with label42;
        catch android.os.RemoteException from label17 to label18 with label42;
        catch android.os.RemoteException from label19 to label20 with label42;
        catch android.os.RemoteException from label21 to label22 with label42;
        catch android.os.RemoteException from label25 to label26 with label42;
        catch android.os.RemoteException from label28 to label29 with label42;
        catch android.os.RemoteException from label31 to label32 with label42;
        catch android.os.RemoteException from label36 to label37 with label42;
    }

    private android.content.pm.ProviderInfo getProviderInfo(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        android.content.pm.PackageManagerInternal $r2;
        int $i0;
        android.content.pm.ProviderInfo $r3;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(0);

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>(r1, 786432, $i0);

        return $r3;
    }

    private void handleBootCompleted()
    {
        com.android.server.StorageManagerService r0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void initIfBootedAndConnected()>();

        specialinvoke r0.<com.android.server.StorageManagerService: void resetIfBootedAndConnected()>();

        return;
    }

    private void handleDaemonConnected()
    {
        com.android.server.StorageManagerService r0;
        java.lang.String $r1;
        java.util.Optional $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void initIfBootedAndConnected()>();

        specialinvoke r0.<com.android.server.StorageManagerService: void resetIfBootedAndConnected()>();

        $r1 = "";

        $r2 = staticinvoke <android.sysprop.VoldProperties: java.util.Optional encrypt_progress()>();

        $r3 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.StorageManagerService: void copyLocaleFromMountService()>();

     label1:
        return;
    }

    private void handleSystemReady()
    {
        com.android.server.StorageManagerService r0;
        android.content.Context $r1, $r2, $r7, $r9, $r10, $r14;
        android.content.ContentResolver $r3, $r11;
        android.net.Uri $r4, $r12;
        com.android.server.StorageManagerService$2 $r5;
        java.lang.String $r6;
        boolean $z0, $z1;
        android.content.res.Resources $r8;
        com.android.server.StorageManagerService$3 $r13;
        java.util.concurrent.Executor $r15;
        com.android.server._$$Lambda$StorageManagerService$js3bHvdd2Mf8gztNxvL27JoT034 $r16;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.MountServiceIdler: void scheduleIdlePass(android.content.Context)>($r1);

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("zram_enabled");

        $r5 = new com.android.server.StorageManagerService$2;

        specialinvoke $r5.<com.android.server.StorageManagerService$2: void <init>(com.android.server.StorageManagerService,android.os.Handler)>(r0, null);

        virtualinvoke $r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r4, 0, $r5);

        specialinvoke r0.<com.android.server.StorageManagerService: void refreshZramSettings()>();

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.sys.zram_enabled");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z0 != 0 goto label1;

        $r7 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891599);

        if $z1 == 0 goto label1;

        $r9 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.ZramWriteback: void scheduleZramWriteback(android.content.Context)>($r9);

     label1:
        $r10 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r12 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("isolated_storage_remote");

        $r13 = new com.android.server.StorageManagerService$3;

        specialinvoke $r13.<com.android.server.StorageManagerService$3: void <init>(com.android.server.StorageManagerService,android.os.Handler)>(r0, null);

        virtualinvoke $r11.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r12, 0, $r13);

        $r14 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        $r16 = new com.android.server._$$Lambda$StorageManagerService$js3bHvdd2Mf8gztNxvL27JoT034;

        specialinvoke $r16.<com.android.server._$$Lambda$StorageManagerService$js3bHvdd2Mf8gztNxvL27JoT034: void <init>(com.android.server.StorageManagerService)>(r0);

        staticinvoke <android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)>("storage_native_boot", $r15, $r16);

        specialinvoke r0.<com.android.server.StorageManagerService: void refreshIsolatedStorageSettings()>();

        return;
    }

    private void initIfBootedAndConnected()
    {
        com.android.server.StorageManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r1, $r7;
        java.lang.String $r6, $r10, $r17, $r18;
        android.content.Context $r11;
        java.lang.Object $r12, $r15;
        android.os.UserManager $r13;
        java.util.List $r14;
        android.os.IVold $r16, $r19;
        int $i2, $i3, $i4;
        java.lang.Exception $r20;
        java.util.Iterator r23;
        android.content.pm.UserInfo r24;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thinking about init, mBootCompleted=");

        $z1 = r0.<com.android.server.StorageManagerService: boolean mBootCompleted>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDaemonConnected=");

        $z2 = r0.<com.android.server.StorageManagerService: boolean mDaemonConnected>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r6);

        $z3 = r0.<com.android.server.StorageManagerService: boolean mBootCompleted>;

        if $z3 == 0 goto label8;

        $z4 = r0.<com.android.server.StorageManagerService: boolean mDaemonConnected>;

        if $z4 == 0 goto label8;

        $z5 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()>();

        if $z5 != 0 goto label8;

        z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedEmulatedOnly()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting up emulation state, initlocked=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r10);

        $r11 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r13 = (android.os.UserManager) $r12;

        $r14 = virtualinvoke $r13.<android.os.UserManager: java.util.List getUsers()>();

        r23 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label8;

        $r15 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (android.content.pm.UserInfo) $r15;

        if z0 == 0 goto label4;

     label2:
        $r19 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $i4 = r24.<android.content.pm.UserInfo: int id>;

        interfaceinvoke $r19.<android.os.IVold: void lockUserKey(int)>($i4);

     label3:
        goto label5;

     label4:
        $r16 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $i2 = r24.<android.content.pm.UserInfo: int id>;

        $i3 = r24.<android.content.pm.UserInfo: int serialNumber>;

        $r17 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(null);

        $r18 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(null);

        interfaceinvoke $r16.<android.os.IVold: void unlockUserKey(int,int,java.lang.String,java.lang.String)>($i2, $i3, $r17, $r18);

     label5:
        goto label7;

     label6:
        $r20 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r20);

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private boolean isBroadcastWorthy(android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        int i0, i1;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        i0 = virtualinvoke r1.<android.os.storage.VolumeInfo: int getType()>();

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 5 goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r1.<android.os.storage.VolumeInfo: int getState()>();

        if i1 == 0 goto label2;

        if i1 == 8 goto label2;

        if i1 == 2 goto label2;

        if i1 == 3 goto label2;

        if i1 == 5 goto label2;

        if i1 == 6 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean isMountDisallowed(android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        android.os.UserManager r2;
        int i0, $i1, $i2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.os.storage.DiskInfo $r5, $r6;
        boolean $z1, z3, z4, z5;
        android.os.UserHandle $r7, $r8;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        $r3 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        r2 = (android.os.UserManager) $r4;

        z3 = 0;

        $r5 = r1.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        if $r5 == null goto label1;

        z3 = 0;

        $r6 = r1.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        $z1 = virtualinvoke $r6.<android.os.storage.DiskInfo: boolean isUsb()>();

        if $z1 == 0 goto label1;

        $r7 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        z3 = virtualinvoke r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_usb_file_transfer", $r7);

     label1:
        z4 = 0;

        i0 = r1.<android.os.storage.VolumeInfo: int type>;

        if i0 == 0 goto label2;

        $i1 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i1 == 1 goto label2;

        $i2 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i2 != 5 goto label3;

     label2:
        $r8 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        z4 = virtualinvoke r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_physical_media", $r8);

     label3:
        z5 = 1;

        if z3 != 0 goto label5;

        if z4 == 0 goto label4;

        z5 = 1;

        goto label5;

     label4:
        z5 = 0;

     label5:
        return z5;
    }

    private boolean isSystemUnlocked(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        int[] $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r3, i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isUidOwnerOfPackageOrSystem(java.lang.String, int)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        android.content.pm.PackageManagerInternal $r2;
        boolean z0;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 = 1;

        if i0 != 1000 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i2 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>(r1, 268435456, $i1);

        if i0 != $i2 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;
    }

    private void killMediaProvider(java.util.List)
    {
        com.android.server.StorageManagerService r0;
        long l0;
        android.app.IActivityManager r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        int $i1, $i2, $i3;
        android.content.pm.PackageManagerInternal $r3;
        android.content.pm.ApplicationInfo $r4, $r5;
        java.lang.String $r6;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        java.util.List r9;
        java.util.Iterator r10;
        android.content.pm.UserInfo r11;
        android.content.pm.ProviderInfo r12;

        r0 := @this: com.android.server.StorageManagerService;

        r9 := @parameter0: java.util.List;

        if r9 != null goto label01;

        return;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r2 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.content.pm.UserInfo) $r2;

        $z0 = virtualinvoke r11.<android.content.pm.UserInfo: boolean isSystemOnly()>();

        if $z0 == 0 goto label05;

     label04:
        goto label03;

     label05:
        $r3 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $i1 = r11.<android.content.pm.UserInfo: int id>;

        r12 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>("media", 786432, $i1);

     label06:
        if r12 == null goto label11;

     label07:
        r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label08:
        $r4 = r12.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r6 = $r4.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r5 = r12.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i2);

        interfaceinvoke r1.<android.app.IActivityManager: void killApplication(java.lang.String,int,int,java.lang.String)>($r6, $i3, -1, "vold reset");

     label09:
        goto label12;

     label10:
        $r7 := @caughtexception;

     label11:
        goto label03;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label13:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
    }

    private void maybeLogMediaMount(android.os.storage.VolumeInfo, int)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        int i0, $i1, $i2;
        boolean $z0;
        java.lang.String $r2, $r4, $r6, $r7, r9;
        java.lang.Object[] $r3, $r5;
        android.os.storage.DiskInfo r8;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r8 = virtualinvoke r1.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo getDisk()>();

        if r8 == null goto label9;

        $i1 = r8.<android.os.storage.DiskInfo: int flags>;

        $i2 = $i1 & 12;

        if $i2 != 0 goto label2;

        goto label9;

     label2:
        $r2 = r8.<android.os.storage.DiskInfo: java.lang.String label>;

        if $r2 == null goto label3;

        $r7 = r8.<android.os.storage.DiskInfo: java.lang.String label>;

        r9 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        goto label4;

     label3:
        r9 = "";

     label4:
        if i0 == 2 goto label7;

        if i0 != 3 goto label5;

        goto label7;

     label5:
        if i0 == 0 goto label6;

        if i0 != 8 goto label8;

     label6:
        $r5 = newarray (java.lang.Object)[2];

        $r6 = r1.<android.os.storage.VolumeInfo: java.lang.String path>;

        $r5[0] = $r6;

        $r5[1] = r9;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210014, $r5);

        goto label8;

     label7:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = r1.<android.os.storage.VolumeInfo: java.lang.String path>;

        $r3[0] = $r4;

        $r3[1] = r9;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210013, $r3);

     label8:
        return;

     label9:
        return;
    }

    private void mount(android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold r1;
        java.lang.String r2, $r5, $r8;
        int i0, i1;
        java.lang.Exception $r9;
        android.os.storage.VolumeInfo r10;
        java.lang.StringBuilder r11, r13;
        com.android.server.StorageManagerService$8 r12;

        r0 := @this: com.android.server.StorageManagerService;

        r10 := @parameter0: android.os.storage.VolumeInfo;

     label1:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mounting volume ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r5 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", $r5);

        r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r2 = r10.<android.os.storage.VolumeInfo: java.lang.String id>;

        i0 = r10.<android.os.storage.VolumeInfo: int mountFlags>;

        i1 = r10.<android.os.storage.VolumeInfo: int mountUserId>;

        r12 = new com.android.server.StorageManagerService$8;

        specialinvoke r12.<com.android.server.StorageManagerService$8: void <init>(com.android.server.StorageManagerService,android.os.storage.VolumeInfo)>(r0, r10);

        interfaceinvoke r1.<android.os.IVold: void mount(java.lang.String,int,int,android.os.IVoldMountCallback)>(r2, i0, i1, r12);

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mounted volume ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r8 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r9);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void onCleanupUser(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        android.os.IVold $r6;
        android.os.IStoraged $r7;
        int[] $r8, $r9;
        java.lang.Throwable $r10;
        java.lang.Exception $r11;
        java.lang.Object r14;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onCleanupUser ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r5);

     label1:
        $r6 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r6.<android.os.IVold: void onUserStopped(int)>(i0);

        $r7 = r0.<com.android.server.StorageManagerService: android.os.IStoraged mStoraged>;

        interfaceinvoke $r7.<android.os.IStoraged: void onUserStopped(int)>(i0);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r11);

     label4:
        r14 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label5:
        $r8 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        $r9 = staticinvoke <com.android.internal.util.ArrayUtils: int[] removeInt(int[],int)>($r8, i0);

        r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers> = $r9;

        exitmonitor r14;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r14;

     label9:
        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void onDiskScannedLocked(android.os.storage.DiskInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.DiskInfo r1;
        android.util.ArrayMap $r2, $r11, $r14;
        int $i0, i1, i2, i3;
        android.content.Intent $r3;
        java.lang.String $r5, $r10, $r16, $r17;
        android.os.Handler $r8;
        android.os.Message $r9;
        java.lang.Object $r12, $r15;
        com.android.server.StorageManagerService$Callbacks $r13;
        boolean $z0;
        android.os.storage.VolumeInfo r18;
        java.util.concurrent.CountDownLatch r20;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.DiskInfo;

        i1 = 0;

        i2 = 0;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label3;

        $r14 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        r18 = (android.os.storage.VolumeInfo) $r15;

        i3 = i1;

        $r16 = r1.<android.os.storage.DiskInfo: java.lang.String id>;

        $r17 = virtualinvoke r18.<android.os.storage.VolumeInfo: java.lang.String getDiskId()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $z0 == 0 goto label2;

        i3 = i1 + 1;

     label2:
        i2 = i2 + 1;

        i1 = i3;

        goto label1;

     label3:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.os.storage.action.DISK_SCANNED");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(83886080);

        $r5 = r1.<android.os.storage.DiskInfo: java.lang.String id>;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.os.storage.extra.DISK_ID", $r5);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.os.storage.extra.VOLUME_COUNT", i1);

        $r8 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(7, $r3);

        virtualinvoke $r9.<android.os.Message: void sendToTarget()>();

        $r11 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDiskScanLatches>;

        $r10 = r1.<android.os.storage.DiskInfo: java.lang.String id>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r10);

        r20 = (java.util.concurrent.CountDownLatch) $r12;

        if r20 == null goto label4;

        virtualinvoke r20.<java.util.concurrent.CountDownLatch: void countDown()>();

     label4:
        r1.<android.os.storage.DiskInfo: int volumeCount> = i1;

        $r13 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$3900(com.android.server.StorageManagerService$Callbacks,android.os.storage.DiskInfo,int)>($r13, r1, i1);

        return;
    }

    private void onMoveStatusLocked(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r8;
        java.lang.String $r3, $r7, $r10, $r13, $r14;
        android.os.RemoteException $r15;
        android.content.pm.IPackageMoveObserver r16;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        r16 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageMoveObserver mMoveCallback>;

        if r16 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", "Odd, status but no move requested");

        return;

     label1:
        interfaceinvoke r16.<android.content.pm.IPackageMoveObserver: void onStatusChanged(int,int,long)>(-1, i0, -1L);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

     label4:
        if i0 != 82 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Move to ");

        $r10 = r0.<com.android.server.StorageManagerService: java.lang.String mMoveTargetUuid>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" copy phase finshed; persisting");

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r13);

        $r14 = r0.<com.android.server.StorageManagerService: java.lang.String mMoveTargetUuid>;

        r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid> = $r14;

        specialinvoke r0.<com.android.server.StorageManagerService: void writeSettingsLocked()>();

     label5:
        $z0 = staticinvoke <android.content.pm.PackageManager: boolean isMoveStatusFinished(int)>(i0);

        if $z0 == 0 goto label6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Move to ");

        $r3 = r0.<com.android.server.StorageManagerService: java.lang.String mMoveTargetUuid>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" finished with status ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r7);

        r0.<com.android.server.StorageManagerService: android.content.pm.IPackageMoveObserver mMoveCallback> = null;

        r0.<com.android.server.StorageManagerService: java.lang.String mMoveTargetUuid> = null;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void onStopUser(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        com.android.server.storage.StorageSessionController $r5;
        java.util.Map $r6;
        java.lang.Integer $r7;
        java.lang.Object $r8;
        java.lang.Exception $r9;
        com.android.internal.content.PackageMonitor r12;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onStopUser ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", $r4);

     label1:
        $r5 = r0.<com.android.server.StorageManagerService: com.android.server.storage.StorageSessionController mStorageSessionController>;

        virtualinvoke $r5.<com.android.server.storage.StorageSessionController: void onUserStopping(int)>(i0);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r9);

     label4:
        $r6 = r0.<com.android.server.StorageManagerService: java.util.Map mPackageMonitorsForUser>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        r12 = (com.android.internal.content.PackageMonitor) $r8;

        if r12 == null goto label5;

        virtualinvoke r12.<com.android.internal.content.PackageMonitor: void unregister()>();

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void onUnlockUser(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        com.android.server.storage.StorageSessionController $r5;
        android.os.IVold $r6;
        android.os.IStoraged $r7;
        android.os.Handler $r8;
        java.lang.Integer $r9;
        android.os.Message $r10;
        java.lang.Exception $r11;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onUnlockUser ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r4);

     label1:
        $r5 = r0.<com.android.server.StorageManagerService: com.android.server.storage.StorageSessionController mStorageSessionController>;

        virtualinvoke $r5.<com.android.server.storage.StorageSessionController: void onUnlockUser(int)>(i0);

        $r6 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r6.<android.os.IVold: void onUserStarted(int)>(i0);

        $r7 = r0.<com.android.server.StorageManagerService: android.os.IStoraged mStoraged>;

        interfaceinvoke $r7.<android.os.IStoraged: void onUserStarted(int)>(i0);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r11);

     label4:
        $r8 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(14, $r9);

        virtualinvoke $r10.<android.os.Message: void sendToTarget()>();

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void onVolumeCreatedLocked(android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1, r58;
        android.content.pm.PackageManagerInternal $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object $r3, $r21;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i28;
        java.lang.StringBuilder $r4, $r16, $r27, $r35, $r41, $r50;
        java.lang.String $r7, $r12, $r19, $r23, $r24, $r25, $r26, $r30, $r33, $r34, $r38, $r43, $r46, $r49, $r52, $r54;
        android.os.Handler $r8, $r10, $r13, $r31, $r39;
        android.os.Message $r9, $r11, $r14, $r32, $r40;
        android.os.storage.DiskInfo $r15, $r62;
        android.content.Context $r20;
        android.os.storage.StorageManager $r22;
        android.app.ActivityManagerInternal r56;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: boolean isOnlyCoreApps()>();

        if $z0 == 0 goto label01;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System booted in core-only mode; ignoring volume ");

        $r52 = virtualinvoke r1.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r54);

        return;

     label01:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        r56 = (android.app.ActivityManagerInternal) $r3;

        $z1 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        if $z1 == 0 goto label02;

        $i23 = r1.<android.os.storage.VolumeInfo: int mountUserId>;

        if $i23 < 0 goto label02;

        $i24 = r1.<android.os.storage.VolumeInfo: int mountUserId>;

        $z7 = virtualinvoke r56.<android.app.ActivityManagerInternal: boolean isUserRunning(int,int)>($i24, 0);

        if $z7 != 0 goto label02;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring volume ");

        $r43 = virtualinvoke r1.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because user ");

        $i25 = r1.<android.os.storage.VolumeInfo: int mountUserId>;

        $r46 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i25);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is no longer running.");

        $r49 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r49);

        return;

     label02:
        $i28 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i28 != 2 goto label05;

        $r20 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r20.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r22 = (android.os.storage.StorageManager) $r21;

        r58 = virtualinvoke $r22.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findPrivateForEmulated(android.os.storage.VolumeInfo)>(r1);

        $r24 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $r23 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r24, $r23);

        if $z4 == 0 goto label03;

        $r34 = "private";

        $r33 = r58.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z6 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z6 == 0 goto label03;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found primary storage at ");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", $r38);

        $i19 = r1.<android.os.storage.VolumeInfo: int mountFlags>;

        $i20 = $i19 | 1;

        r1.<android.os.storage.VolumeInfo: int mountFlags> = $i20;

        $i21 = r1.<android.os.storage.VolumeInfo: int mountFlags>;

        $i22 = $i21 | 2;

        r1.<android.os.storage.VolumeInfo: int mountFlags> = $i22;

        $r39 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r40 = virtualinvoke $r39.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        virtualinvoke $r40.<android.os.Message: void sendToTarget()>();

        goto label04;

     label03:
        $r26 = r58.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $r25 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        $z5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r26, $r25);

        if $z5 == 0 goto label04;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found primary storage at ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", $r30);

        $i14 = r1.<android.os.storage.VolumeInfo: int mountFlags>;

        $i15 = $i14 | 1;

        r1.<android.os.storage.VolumeInfo: int mountFlags> = $i15;

        $i16 = r1.<android.os.storage.VolumeInfo: int mountFlags>;

        $i17 = $i16 | 2;

        r1.<android.os.storage.VolumeInfo: int mountFlags> = $i17;

        $r31 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r32 = virtualinvoke $r31.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        virtualinvoke $r32.<android.os.Message: void sendToTarget()>();

     label04:
        goto label11;

     label05:
        $i0 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i0 != 0 goto label08;

        $r12 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", $r12);

        if $z2 == 0 goto label06;

        $r15 = r1.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        $z3 = virtualinvoke $r15.<android.os.storage.DiskInfo: boolean isDefaultPrimary()>();

        if $z3 == 0 goto label06;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found primary storage at ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", $r19);

        $i9 = r1.<android.os.storage.VolumeInfo: int mountFlags>;

        $i10 = $i9 | 1;

        r1.<android.os.storage.VolumeInfo: int mountFlags> = $i10;

        $i11 = r1.<android.os.storage.VolumeInfo: int mountFlags>;

        $i12 = $i11 | 2;

        r1.<android.os.storage.VolumeInfo: int mountFlags> = $i12;

     label06:
        $r62 = r1.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        $z8 = virtualinvoke $r62.<android.os.storage.DiskInfo: boolean isAdoptable()>();

        if $z8 == 0 goto label07;

        $i6 = r1.<android.os.storage.VolumeInfo: int mountFlags>;

        $i7 = $i6 | 2;

        r1.<android.os.storage.VolumeInfo: int mountFlags> = $i7;

     label07:
        $i5 = r0.<com.android.server.StorageManagerService: int mCurrentUserId>;

        r1.<android.os.storage.VolumeInfo: int mountUserId> = $i5;

        $r13 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r14 = virtualinvoke $r13.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        virtualinvoke $r14.<android.os.Message: void sendToTarget()>();

        goto label11;

     label08:
        $i1 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i1 != 1 goto label09;

        $r10 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        virtualinvoke $r11.<android.os.Message: void sendToTarget()>();

        goto label11;

     label09:
        $i2 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i2 != 5 goto label10;

        $i4 = r0.<com.android.server.StorageManagerService: int mCurrentUserId>;

        r1.<android.os.storage.VolumeInfo: int mountUserId> = $i4;

        $r8 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        virtualinvoke $r9.<android.os.Message: void sendToTarget()>();

        goto label11;

     label10:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping automatic mounting of ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r7);

     label11:
        return;
    }

    private void onVolumeStateChangedAsync(android.os.storage.VolumeInfo, int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, i10, i12;
        java.lang.String r1, r2, $r3, $r6, $r14, $r15, $r18, $r23, $r26, $r27, $r28, $r29, $r30, $r34;
        boolean $z0, $z1, $z3, $z4, $z5, $z6;
        com.android.server.storage.StorageSessionController $r4;
        com.android.server.StorageManagerService$Callbacks $r5, $r13;
        com.android.server.StorageManagerService$ObbActionHandler $r7, $r8;
        android.os.Message $r9, $r12, $r22;
        android.content.Context $r10;
        android.os.Handler $r11, $r21;
        android.util.ArrayMap $r24, $r31;
        java.lang.Object $r25, r39, r43;
        long $l7, $l11;
        android.os.storage.DiskInfo $r33;
        java.lang.Throwable $r35, $r36;
        com.android.server.storage.StorageSessionController$ExternalStorageServiceException $r37;
        android.os.storage.VolumeInfo r38;
        android.os.storage.VolumeRecord r40, r41;
        android.content.Intent r44;
        int[] r45;
        android.os.storage.StorageVolume r46;

        r0 := @this: com.android.server.StorageManagerService;

        r38 := @parameter0: android.os.storage.VolumeInfo;

        i10 := @parameter1: int;

        i0 := @parameter2: int;

        r39 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r39;

     label01:
        $r3 = r38.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label11;

        $r24 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r23 = r38.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $r25 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r23);

        r40 = (android.os.storage.VolumeRecord) $r25;

     label02:
        if r40 != null goto label07;

     label03:
        r41 = new android.os.storage.VolumeRecord;

        $i6 = r38.<android.os.storage.VolumeInfo: int type>;

        $r28 = r38.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        specialinvoke r41.<android.os.storage.VolumeRecord: void <init>(int,java.lang.String)>($i6, $r28);

     label04:
        $r29 = r38.<android.os.storage.VolumeInfo: java.lang.String partGuid>;

        r41.<android.os.storage.VolumeRecord: java.lang.String partGuid> = $r29;

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r41.<android.os.storage.VolumeRecord: long createdMillis> = $l7;

        $i8 = r38.<android.os.storage.VolumeInfo: int type>;

        if $i8 != 1 goto label05;

        $r33 = r38.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        $r34 = virtualinvoke $r33.<android.os.storage.DiskInfo: java.lang.String getDescription()>();

        r41.<android.os.storage.VolumeRecord: java.lang.String nickname> = $r34;

     label05:
        $r31 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r30 = r41.<android.os.storage.VolumeRecord: java.lang.String fsUuid>;

        virtualinvoke $r31.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, r41);

     label06:
        goto label10;

     label07:
        r41 = r40;

     label08:
        $r26 = r40.<android.os.storage.VolumeRecord: java.lang.String partGuid>;

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r26);

        if $z5 == 0 goto label10;

        $r27 = r38.<android.os.storage.VolumeInfo: java.lang.String partGuid>;

        r40.<android.os.storage.VolumeRecord: java.lang.String partGuid> = $r27;

     label09:
        r41 = r40;

     label10:
        $l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r41.<android.os.storage.VolumeRecord: long lastSeenMillis> = $l11;

        specialinvoke r0.<com.android.server.StorageManagerService: void writeSettingsLocked()>();

     label11:
        exitmonitor r39;

     label12:
        if i0 != 2 goto label13;

        specialinvoke r0.<com.android.server.StorageManagerService: void prepareUserStorageIfNeeded(android.os.storage.VolumeInfo)>(r38);

     label13:
        $r4 = r0.<com.android.server.StorageManagerService: com.android.server.storage.StorageSessionController mStorageSessionController>;

        virtualinvoke $r4.<com.android.server.storage.StorageSessionController: void notifyVolumeStateChanged(android.os.storage.VolumeInfo)>(r38);

     label14:
        goto label16;

     label15:
        $r37 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "Failed to notify volume state changed to the Storage Service", $r37);

     label16:
        r43 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r43;

     label17:
        $r5 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$4000(com.android.server.StorageManagerService$Callbacks,android.os.storage.VolumeInfo,int,int)>($r5, r38, i10, i0);

        $z1 = r0.<com.android.server.StorageManagerService: boolean mBootCompleted>;

        if $z1 == 0 goto label18;

        $z4 = specialinvoke r0.<com.android.server.StorageManagerService: boolean isBroadcastWorthy(android.os.storage.VolumeInfo)>(r38);

        if $z4 == 0 goto label18;

        r44 = new android.content.Intent;

        specialinvoke r44.<android.content.Intent: void <init>(java.lang.String)>("android.os.storage.action.VOLUME_STATE_CHANGED");

        $r15 = r38.<android.os.storage.VolumeInfo: java.lang.String id>;

        virtualinvoke r44.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.os.storage.extra.VOLUME_ID", $r15);

        virtualinvoke r44.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.os.storage.extra.VOLUME_STATE", i0);

        $r18 = r38.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        virtualinvoke r44.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.os.storage.extra.FS_UUID", $r18);

        virtualinvoke r44.<android.content.Intent: android.content.Intent addFlags(int)>(83886080);

        $r21 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r22 = virtualinvoke $r21.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(7, r44);

        virtualinvoke $r22.<android.os.Message: void sendToTarget()>();

     label18:
        r1 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getEnvironmentForState(int)>(i10);

        r2 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getEnvironmentForState(int)>(i0);

        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z6 != 0 goto label23;

        r45 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        i1 = lengthof r45;

     label19:
        i12 = 0;

     label20:
        if i12 >= i1 goto label23;

        i2 = r45[i12];

     label21:
        $z3 = virtualinvoke r38.<android.os.storage.VolumeInfo: boolean isVisibleForRead(int)>(i2);

        if $z3 == 0 goto label22;

        $r10 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        r46 = virtualinvoke r38.<android.os.storage.VolumeInfo: android.os.storage.StorageVolume buildStorageVolume(android.content.Context,int,boolean)>($r10, i2, 0);

        $r11 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r12 = virtualinvoke $r11.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(6, r46);

        virtualinvoke $r12.<android.os.Message: void sendToTarget()>();

        $r13 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        $r14 = virtualinvoke r46.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$2900(com.android.server.StorageManagerService$Callbacks,java.lang.String,java.lang.String,java.lang.String)>($r13, $r14, r1, r2);

     label22:
        i12 = i12 + 1;

        goto label20;

     label23:
        $i3 = r38.<android.os.storage.VolumeInfo: int type>;

        if $i3 == 0 goto label24;

        $i5 = r38.<android.os.storage.VolumeInfo: int type>;

        if $i5 != 5 goto label25;

     label24:
        $i4 = r38.<android.os.storage.VolumeInfo: int state>;

        if $i4 != 5 goto label25;

        $r8 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$ObbActionHandler mObbActionHandler>;

        $r7 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$ObbActionHandler mObbActionHandler>;

        $r6 = r38.<android.os.storage.VolumeInfo: java.lang.String path>;

        $r9 = virtualinvoke $r7.<com.android.server.StorageManagerService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, $r6);

        virtualinvoke $r8.<com.android.server.StorageManagerService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r9);

     label25:
        specialinvoke r0.<com.android.server.StorageManagerService: void maybeLogMediaMount(android.os.storage.VolumeInfo,int)>(r38, i0);

        exitmonitor r43;

     label26:
        return;

     label27:
        $r35 := @caughtexception;

     label28:
        exitmonitor r43;

     label29:
        throw $r35;

     label30:
        $r36 := @caughtexception;

     label31:
        exitmonitor r39;

     label32:
        throw $r36;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label04 to label05 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label08 to label09 with label30;
        catch java.lang.Throwable from label10 to label11 with label30;
        catch java.lang.Throwable from label11 to label12 with label30;
        catch com.android.server.storage.StorageSessionController$ExternalStorageServiceException from label13 to label14 with label15;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    private void onVolumeStateChangedLocked(android.os.storage.VolumeInfo, int, int)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        int i0, $i1, $i2, i3, i4;
        boolean $z0;
        java.util.Set $r2, $r6;
        java.lang.Integer $r3, $r7;
        java.lang.Thread $r4;
        com.android.server._$$Lambda$StorageManagerService$wfwH9rod_Nl9M_4xCbiwdpTWHtc $r5;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i1 != 2 goto label2;

        if i0 == 2 goto label1;

        $r6 = r0.<com.android.server.StorageManagerService: java.util.Set mFuseMountedUser>;

        $i2 = virtualinvoke r1.<android.os.storage.VolumeInfo: int getMountUserId()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r7);

        goto label2;

     label1:
        $z0 = r0.<com.android.server.StorageManagerService: boolean mVoldAppDataIsolationEnabled>;

        if $z0 == 0 goto label2;

        i4 = virtualinvoke r1.<android.os.storage.VolumeInfo: int getMountUserId()>();

        $r2 = r0.<com.android.server.StorageManagerService: java.util.Set mFuseMountedUser>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r4 = new java.lang.Thread;

        $r5 = new com.android.server._$$Lambda$StorageManagerService$wfwH9rod_Nl9M_4xCbiwdpTWHtc;

        specialinvoke $r5.<com.android.server._$$Lambda$StorageManagerService$wfwH9rod_Nl9M_4xCbiwdpTWHtc: void <init>(com.android.server.StorageManagerService,android.os.storage.VolumeInfo,int)>(r0, r1, i4);

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>($r5);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

     label2:
        return;
    }

    private void prepareUserStorageIfNeeded(android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        android.os.UserManagerInternal r2;
        java.util.Iterator r3;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.Context $r4;
        java.lang.Object $r5, $r6, $r8;
        java.util.List $r7;
        boolean $z0, $z1, $z2;
        java.lang.String $r9;
        android.os.UserManager r10;
        android.content.pm.UserInfo r11;
        byte b5;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        $i0 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i0 == 1 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        r10 = (android.os.UserManager) $r5;

        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        r2 = (android.os.UserManagerInternal) $r6;

        $r7 = virtualinvoke r10.<android.os.UserManager: java.util.List getUsers(boolean)>(0);

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.content.pm.UserInfo) $r8;

        $i1 = r11.<android.content.pm.UserInfo: int id>;

        $z0 = virtualinvoke r2.<android.os.UserManagerInternal: boolean isUserUnlockingOrUnlocked(int)>($i1);

        if $z0 == 0 goto label3;

        b5 = 3;

        goto label4;

     label3:
        $i2 = r11.<android.content.pm.UserInfo: int id>;

        $z1 = virtualinvoke r2.<android.os.UserManagerInternal: boolean isUserRunning(int)>($i2);

        if $z1 == 0 goto label2;

        b5 = 1;

     label4:
        $r9 = r1.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $i4 = r11.<android.content.pm.UserInfo: int id>;

        $i3 = r11.<android.content.pm.UserInfo: int serialNumber>;

        specialinvoke r0.<com.android.server.StorageManagerService: void prepareUserStorageInternal(java.lang.String,int,int,int)>($r9, $i4, $i3, b5);

        goto label2;

     label5:
        return;
    }

    private void prepareUserStorageInternal(java.lang.String, int, int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, i2, $i3;
        android.os.storage.VolumeInfo r1;
        android.os.IVold $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.os.storage.StorageManager $r5;
        com.android.server.pm.Installer $r6;
        java.lang.Exception $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.StorageManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void prepareUserStorage(java.lang.String,int,int,int)>(r8, i0, i1, i2);

     label2:
        if r8 == null goto label6;

     label3:
        $r3 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r5 = (android.os.storage.StorageManager) $r4;

        r1 = virtualinvoke $r5.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>(r8);

     label4:
        if r1 == null goto label6;

        if i0 != 0 goto label6;

     label5:
        $i3 = r1.<android.os.storage.VolumeInfo: int type>;

        if $i3 != 1 goto label6;

        $r6 = r0.<com.android.server.StorageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r6.<com.android.server.pm.Installer: void tryMountDataMirror(java.lang.String)>(r8);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r7);

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    private void readSettingsLocked()
    {
        com.android.server.StorageManagerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i3;
        boolean z1, $z2, $z3, z4;
        android.util.ArrayMap $r2, $r10;
        java.lang.String $r3, $r6, $r7, $r8, $r9, $r12, r22;
        android.util.AtomicFile $r4;
        java.nio.charset.Charset $r5;
        java.lang.Throwable $r13, $r14, $r15, $r16;
        java.io.FileInputStream r17, r18, r19, r20, r21;
        android.os.storage.VolumeRecord r23;

        r0 := @this: com.android.server.StorageManagerService;

        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        virtualinvoke $r2.<android.util.ArrayMap: void clear()>();

        $r3 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String getDefaultPrimaryStorageUuid()>();

        r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid> = $r3;

        r17 = null;

        r18 = null;

        r19 = null;

        r20 = null;

     label01:
        $r4 = r0.<com.android.server.StorageManagerService: android.util.AtomicFile mSettingsFile>;

        r21 = virtualinvoke $r4.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label03:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

     label04:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label05:
        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r21, $r6);

     label06:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label07:
        i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

     label08:
        if i3 == 1 goto label29;

        if i3 != 2 goto label06;

        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label09:
        r22 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label10:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label11:
        $r7 = "volumes";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r22);

        if $z2 == 0 goto label21;

     label12:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label13:
        i0 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "version", 1);

     label14:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label15:
        z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.vold.primary_physical", 0);

     label16:
        z4 = 1;

        if i0 >= 3 goto label18;

        if i0 < 2 goto label17;

        if z1 != 0 goto label17;

        z4 = 1;

        goto label18;

     label17:
        z4 = 0;

     label18:
        if z4 == 0 goto label28;

        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label19:
        $r12 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "primaryStorageUuid");

        r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid> = $r12;

     label20:
        goto label28;

     label21:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label22:
        $r8 = "volume";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r22);

        if $z3 == 0 goto label28;

     label23:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label24:
        r23 = staticinvoke <com.android.server.StorageManagerService: android.os.storage.VolumeRecord readVolumeRecord(org.xmlpull.v1.XmlPullParser)>(r1);

     label25:
        r20 = r21;

        r17 = r21;

        r18 = r21;

        r19 = r21;

     label26:
        $r10 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r9 = r23.<android.os.storage.VolumeRecord: java.lang.String fsUuid>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r23);

     label27:
        goto label28;

     label28:
        goto label06;

     label29:
        goto label39;

     label30:
        $r16 := @caughtexception;

        goto label37;

     label31:
        $r15 := @caughtexception;

        r20 = r17;

     label32:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "Failed reading metadata", $r15);

     label33:
        r21 = r17;

        goto label39;

     label34:
        $r14 := @caughtexception;

        r20 = r18;

     label35:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "Failed reading metadata", $r14);

     label36:
        r21 = r18;

        goto label39;

     label37:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r20);

        throw $r16;

     label38:
        $r13 := @caughtexception;

        r21 = r19;

     label39:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r21);

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label38;
        catch java.io.IOException from label01 to label02 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label31;
        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.io.FileNotFoundException from label03 to label04 with label38;
        catch java.io.IOException from label03 to label04 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label31;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.io.FileNotFoundException from label05 to label06 with label38;
        catch java.io.IOException from label05 to label06 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label31;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.io.FileNotFoundException from label07 to label08 with label38;
        catch java.io.IOException from label07 to label08 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label31;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.io.FileNotFoundException from label09 to label10 with label38;
        catch java.io.IOException from label09 to label10 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label31;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.io.FileNotFoundException from label11 to label12 with label38;
        catch java.io.IOException from label11 to label12 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label31;
        catch java.lang.Throwable from label11 to label12 with label30;
        catch java.io.FileNotFoundException from label13 to label14 with label38;
        catch java.io.IOException from label13 to label14 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label31;
        catch java.lang.Throwable from label13 to label14 with label30;
        catch java.io.FileNotFoundException from label15 to label16 with label38;
        catch java.io.IOException from label15 to label16 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label31;
        catch java.lang.Throwable from label15 to label16 with label30;
        catch java.io.FileNotFoundException from label19 to label20 with label38;
        catch java.io.IOException from label19 to label20 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label31;
        catch java.lang.Throwable from label19 to label20 with label30;
        catch java.io.FileNotFoundException from label22 to label23 with label38;
        catch java.io.IOException from label22 to label23 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label31;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.io.FileNotFoundException from label24 to label25 with label38;
        catch java.io.IOException from label24 to label25 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label24 to label25 with label31;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch java.io.FileNotFoundException from label26 to label27 with label38;
        catch java.io.IOException from label26 to label27 with label34;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label31;
        catch java.lang.Throwable from label26 to label27 with label30;
        catch java.lang.Throwable from label32 to label33 with label30;
        catch java.lang.Throwable from label35 to label36 with label30;
    }

    public static android.os.storage.VolumeRecord readVolumeRecord(org.xmlpull.v1.XmlPullParser) throws java.io.IOException
    {
        org.xmlpull.v1.XmlPullParser r0;
        android.os.storage.VolumeRecord $r2;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r5;
        long $l2, $l3, $l4, $l5;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r2 = new android.os.storage.VolumeRecord;

        $i0 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "type");

        $r3 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "fsUuid");

        specialinvoke $r2.<android.os.storage.VolumeRecord: void <init>(int,java.lang.String)>($i0, $r3);

        $r4 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "partGuid");

        $r2.<android.os.storage.VolumeRecord: java.lang.String partGuid> = $r4;

        $r5 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "nickname");

        $r2.<android.os.storage.VolumeRecord: java.lang.String nickname> = $r5;

        $i1 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "userFlags");

        $r2.<android.os.storage.VolumeRecord: int userFlags> = $i1;

        $l2 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r0, "createdMillis", 0L);

        $r2.<android.os.storage.VolumeRecord: long createdMillis> = $l2;

        $l3 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r0, "lastSeenMillis", 0L);

        $r2.<android.os.storage.VolumeRecord: long lastSeenMillis> = $l3;

        $l4 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r0, "lastTrimMillis", 0L);

        $r2.<android.os.storage.VolumeRecord: long lastTrimMillis> = $l4;

        $l5 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r0, "lastBenchMillis", 0L);

        $r2.<android.os.storage.VolumeRecord: long lastBenchMillis> = $l5;

        return $r2;
    }

    private void refreshFuseSettings()
    {
        com.android.server.StorageManagerService r0;
        int i0;

        r0 := @this: com.android.server.StorageManagerService;

        i0 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("storage_native_boot", "fuse_enabled", 0);

        if i0 != 1 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", "Device Config flag for FUSE is enabled, turn Settings fuse flag on");

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.fflag.override.settings_fuse", "true");

        goto label2;

     label1:
        if i0 != -1 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", "Device Config flag for FUSE is disabled, turn Settings fuse flag off");

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.fflag.override.settings_fuse", "false");

     label2:
        return;
    }

    private void refreshIsolatedStorageSettings()
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        android.content.ContentResolver $r2, $r5, $r7;
        java.lang.String $r3, $r15, $r16;
        android.content.Context $r4, $r6;
        boolean z1;
        java.lang.StringBuilder $r14;

        r0 := @this: com.android.server.StorageManagerService;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.ContentResolver mResolver>;

        $r3 = staticinvoke <android.provider.DeviceConfig: java.lang.String getProperty(java.lang.String,java.lang.String)>("storage_native_boot", "isolated_storage_enabled");

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r2, "isolated_storage_remote", $r3);

        $r4 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r5, "isolated_storage_local", 0);

        $r6 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r7, "isolated_storage_remote", 0);

        if i0 != -1 goto label1;

        z1 = 0;

        goto label5;

     label1:
        if i0 != 1 goto label2;

        z1 = 1;

        goto label5;

     label2:
        if i1 != -1 goto label3;

        z1 = 0;

        goto label5;

     label3:
        if i1 != 1 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 1;

     label5:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Isolated storage local flag ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and remote flag ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resolved to ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r15);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z1);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.isolated_storage", $r16);

        return;
    }

    private void refreshZramSettings()
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, $r2, r8;
        boolean $z0, $z1, $z2, $z3;
        android.content.Context $r3, $r5, $r7;
        android.content.ContentResolver $r4;
        int $i0;
        android.content.res.Resources $r6;

        r0 := @this: com.android.server.StorageManagerService;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.sys.zram_enabled");

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, "zram_enabled", 1);

        if $i0 == 0 goto label2;

        r8 = "1";

        goto label3;

     label2:
        r8 = "0";

     label3:
        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label4;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.zram_enabled", r8);

        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z2 == 0 goto label4;

        $r5 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r6.<android.content.res.Resources: boolean getBoolean(int)>(17891599);

        if $z3 == 0 goto label4;

        $r7 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.ZramWriteback: void scheduleZramWriteback(android.content.Context)>($r7);

     label4:
        return;
    }

    private void remountAppStorageDirs(java.util.Map, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, i2, $i4;
        java.util.Iterator r1;
        java.lang.String r2, $r11;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4, $r5, $r7;
        java.lang.Integer $r6;
        java.lang.StringBuilder $r8;
        android.content.pm.PackageManagerInternal $r12, $r13;
        android.os.IVold $r14;
        android.os.RemoteException $r15;
        java.lang.RuntimeException $r16;
        java.util.Map r17;
        java.util.Map$Entry r18;
        java.lang.String[] r20;

        r0 := @this: com.android.server.StorageManagerService;

        r17 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        $r3 = interfaceinvoke r17.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.Integer) $r5;

        i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        r2 = (java.lang.String) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remounting storage for pid: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", $r11);

        $r12 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        r20 = virtualinvoke $r12.<android.content.pm.PackageManagerInternal: java.lang.String[] getSharedUserPackagesForPackage(java.lang.String,int)>(r2, i0);

        $r13 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        i2 = virtualinvoke $r13.<android.content.pm.PackageManagerInternal: int getPackageUidInternal(java.lang.String,int,int)>(r2, 0, i0);

        $i4 = lengthof r20;

        if $i4 == 0 goto label2;

        goto label3;

     label2:
        r20 = newarray (java.lang.String)[1];

        r20[0] = r2;

     label3:
        $r14 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r14.<android.os.IVold: void remountAppStorageDirs(int,int,java.lang.String[])>(i2, i1, r20);

     label4:
        goto label1;

     label5:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r16;

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void remountUidExternalStorage(int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        android.os.IVold $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 1000 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void remountUid(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void removeObbStateLocked(com.android.server.StorageManagerService$ObbState)
    {
        com.android.server.StorageManagerService r0;
        com.android.server.StorageManagerService$ObbState r1;
        android.os.IBinder r2;
        java.util.List r3;
        java.util.Map $r4, $r7, $r9;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.lang.String $r10;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: com.android.server.StorageManagerService$ObbState;

        r2 = virtualinvoke r1.<com.android.server.StorageManagerService$ObbState: android.os.IBinder getBinder()>();

        $r4 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.util.List) $r5;

        if r3 == null goto label2;

        $z0 = interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.android.server.StorageManagerService$ObbState: void unlink()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r7 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        $r9 = r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap>;

        $r10 = r1.<com.android.server.StorageManagerService$ObbState: java.lang.String rawPath>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r10);

        return;
    }

    private void resetIfBootedAndConnected()
    {
        com.android.server.StorageManagerService r0;
        java.util.List r1;
        int[] r2, $r12, $r13;
        android.content.pm.UserInfo r3;
        int i0, i1, $i3, $i6, $i7, i9;
        java.lang.StringBuilder $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r9;
        android.content.Context $r10;
        java.lang.Object $r11, $r22, r31;
        android.util.ArrayMap $r14, $r15;
        android.os.IVold $r16, $r17, $r18, $r20, $r23, $r26;
        com.android.server.StorageManagerService$StorageManagerInternalImpl $r19;
        android.os.IStoraged $r21;
        com.android.server._$$Lambda$StorageManagerService$r27LXIZ_GHtEGwWREPUZctEIq8I $r24;
        com.android.server.storage.StorageSessionController $r25;
        java.lang.Throwable $r27;
        java.lang.Exception $r28;
        android.os.UserManager r30;
        java.util.Iterator r32;

        r0 := @this: com.android.server.StorageManagerService;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thinking about reset, mBootCompleted=");

        $z0 = r0.<com.android.server.StorageManagerService: boolean mBootCompleted>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDaemonConnected=");

        $z1 = r0.<com.android.server.StorageManagerService: boolean mDaemonConnected>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r9);

        $z2 = r0.<com.android.server.StorageManagerService: boolean mBootCompleted>;

        if $z2 == 0 goto label19;

        $z3 = r0.<com.android.server.StorageManagerService: boolean mDaemonConnected>;

        if $z3 == 0 goto label19;

        $r10 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        r30 = (android.os.UserManager) $r11;

        r1 = virtualinvoke r30.<android.os.UserManager: java.util.List getUsers()>();

        $z4 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        if $z4 == 0 goto label01;

        $r25 = r0.<com.android.server.StorageManagerService: com.android.server.storage.StorageSessionController mStorageSessionController>;

        $r26 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $r24 = new com.android.server._$$Lambda$StorageManagerService$r27LXIZ_GHtEGwWREPUZctEIq8I;

        specialinvoke $r24.<com.android.server._$$Lambda$StorageManagerService$r27LXIZ_GHtEGwWREPUZctEIq8I: void <init>(com.android.server.StorageManagerService)>(r0);

        virtualinvoke $r25.<com.android.server.storage.StorageSessionController: void onReset(android.os.IVold,java.lang.Runnable)>($r26, $r24);

        goto label02;

     label01:
        specialinvoke r0.<com.android.server.StorageManagerService: void killMediaProvider(java.util.List)>(r1);

     label02:
        r31 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r31;

     label03:
        $r13 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        $r12 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        $i3 = lengthof $r12;

        r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r13, $i3);

        $r14 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks>;

        virtualinvoke $r14.<android.util.ArrayMap: void clear()>();

        $r15 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        virtualinvoke $r15.<android.util.ArrayMap: void clear()>();

        specialinvoke r0.<com.android.server.StorageManagerService: void addInternalVolumeLocked()>();

        exitmonitor r31;

     label04:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", "Resetting vold...");

        $r16 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r16.<android.os.IVold: void reset()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", "Reset vold");

        r32 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $r22 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r22;

        $r23 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $i7 = r3.<android.content.pm.UserInfo: int id>;

        $i6 = r3.<android.content.pm.UserInfo: int serialNumber>;

        interfaceinvoke $r23.<android.os.IVold: void onUserAdded(int,int)>($i7, $i6);

     label06:
        goto label05;

     label07:
        i0 = lengthof r2;

     label08:
        i9 = 0;

     label09:
        if i9 >= i0 goto label12;

        i1 = r2[i9];

     label10:
        $r20 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r20.<android.os.IVold: void onUserStarted(int)>(i1);

        $r21 = r0.<com.android.server.StorageManagerService: android.os.IStoraged mStoraged>;

        interfaceinvoke $r21.<android.os.IStoraged: void onUserStarted(int)>(i1);

     label11:
        i9 = i9 + 1;

        goto label09;

     label12:
        $z5 = r0.<com.android.server.StorageManagerService: boolean mIsAutomotive>;

        if $z5 == 0 goto label13;

        specialinvoke r0.<com.android.server.StorageManagerService: void restoreAllUnlockedUsers(android.os.UserManager,java.util.List,int[])>(r30, r1, r2);

     label13:
        $r17 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $z6 = r0.<com.android.server.StorageManagerService: boolean mSecureKeyguardShowing>;

        interfaceinvoke $r17.<android.os.IVold: void onSecureKeyguardStateChanged(boolean)>($z6);

        $r19 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$StorageManagerInternalImpl mStorageManagerInternal>;

        $r18 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        virtualinvoke $r19.<com.android.server.StorageManagerService$StorageManagerInternalImpl: void onReset(android.os.IVold)>($r18);

     label14:
        goto label19;

     label15:
        $r28 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r28);

        goto label19;

     label16:
        $r27 := @caughtexception;

     label17:
        exitmonitor r31;

     label18:
        throw $r27;

     label19:
        return;

        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Exception from label04 to label05 with label15;
        catch java.lang.Exception from label05 to label06 with label15;
        catch java.lang.Exception from label07 to label08 with label15;
        catch java.lang.Exception from label10 to label11 with label15;
        catch java.lang.Exception from label12 to label13 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void restoreAllUnlockedUsers(android.os.UserManager, java.util.List, int[]) throws java.lang.Exception
    {
        com.android.server.StorageManagerService r0;
        android.os.UserManager r1;
        int[] r2;
        int i0, $i1;
        java.lang.Object $r4;
        android.content.pm.UserInfo $r5;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        android.os.IVold $r10;
        android.os.IStoraged $r11;
        android.os.Handler $r12;
        java.lang.Integer $r13;
        android.os.Message $r14;
        java.util.List r15;
        java.util.Iterator r16;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.UserManager;

        r15 := @parameter1: java.util.List;

        r2 := @parameter2: int[];

        staticinvoke <java.util.Arrays: void sort(int[])>(r2);

        staticinvoke <android.os.UserManager: void invalidateIsUserUnlockedCache()>();

        r16 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.content.pm.UserInfo) $r4;

        i0 = $r5.<android.content.pm.UserInfo: int id>;

        $z0 = virtualinvoke r1.<android.os.UserManager: boolean isUserRunning(int)>(i0);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r2, i0);

        if $i1 < 0 goto label3;

        goto label1;

     label3:
        $z1 = virtualinvoke r1.<android.os.UserManager: boolean isUserUnlockingOrUnlocked(int)>(i0);

        if $z1 != 0 goto label4;

        goto label1;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNLOCK_USER lost from vold reset, will retry, user:");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r9);

        $r10 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r10.<android.os.IVold: void onUserStarted(int)>(i0);

        $r11 = r0.<com.android.server.StorageManagerService: android.os.IStoraged mStoraged>;

        interfaceinvoke $r11.<android.os.IStoraged: void onUserStarted(int)>(i0);

        $r12 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14 = virtualinvoke $r12.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(14, $r13);

        virtualinvoke $r14.<android.os.Message: void sendToTarget()>();

        goto label1;

     label5:
        return;
    }

    private java.lang.String scrubPath(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeRecord r1;
        java.io.File $r2;
        java.lang.String $r3, $r8, r9;
        boolean $z0;
        long $l0, $l2, $l3, $l4, $l5;
        byte $b1;
        java.lang.StringBuilder $r4;
        int $i6;

        r0 := @this: com.android.server.StorageManagerService;

        r9 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        return "internal";

     label1:
        r1 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeRecord findRecordForPath(java.lang.String)>(r9);

        if r1 == null goto label3;

        $l0 = r1.<android.os.storage.VolumeRecord: long createdMillis>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ext:");

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = r1.<android.os.storage.VolumeRecord: long createdMillis>;

        $l4 = $l2 - $l3;

        $l5 = $l4 / 604800000L;

        $i6 = (int) $l5;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("w");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label3:
        return "unknown";
    }

    private void servicesReady()
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object $r1;
        android.content.pm.PackageManagerInternal $r2;
        android.os.IBinder $r3, $r5;
        android.content.pm.IPackageManager $r4;
        com.android.internal.app.IAppOpsService $r6, $r8, $r10;
        boolean $z0;
        com.android.internal.app.IAppOpsCallback$Stub $r7, $r9;
        android.content.pm.ApplicationInfo $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r15;
        android.os.RemoteException $r16;
        android.content.pm.ProviderInfo r17, r18, r19;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r2 = (android.content.pm.PackageManagerInternal) $r1;

        r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal> = $r2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("package");

        $r4 = staticinvoke <android.content.pm.IPackageManager$Stub: android.content.pm.IPackageManager asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.StorageManagerService: android.content.pm.IPackageManager mIPackageManager> = $r4;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("appops");

        $r6 = staticinvoke <com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService asInterface(android.os.IBinder)>($r5);

        r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsService mIAppOpsService> = $r6;

        r17 = specialinvoke r0.<com.android.server.StorageManagerService: android.content.pm.ProviderInfo getProviderInfo(java.lang.String)>("media");

        if r17 == null goto label1;

        $r13 = r17.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r13.<android.content.pm.ApplicationInfo: int uid>;

        $i5 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i4);

        r0.<com.android.server.StorageManagerService: int mMediaStoreAuthorityAppId> = $i5;

        $r14 = r17.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r15 = $r14.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        <com.android.server.StorageManagerService: java.lang.String sMediaStoreAuthorityProcessName> = $r15;

     label1:
        r18 = specialinvoke r0.<com.android.server.StorageManagerService: android.content.pm.ProviderInfo getProviderInfo(java.lang.String)>("downloads");

        if r18 == null goto label2;

        $r12 = r18.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r12.<android.content.pm.ApplicationInfo: int uid>;

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i2);

        r0.<com.android.server.StorageManagerService: int mDownloadsAuthorityAppId> = $i3;

     label2:
        r19 = specialinvoke r0.<com.android.server.StorageManagerService: android.content.pm.ProviderInfo getProviderInfo(java.lang.String)>("com.android.externalstorage.documents");

        if r19 == null goto label3;

        $r11 = r19.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r11.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i0);

        r0.<com.android.server.StorageManagerService: int mExternalStorageAuthorityAppId> = $i1;

     label3:
        $z0 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        if $z0 != 0 goto label7;

     label4:
        $r8 = r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsService mIAppOpsService>;

        $r7 = r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsCallback$Stub mAppOpsCallback>;

        interfaceinvoke $r8.<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>(66, null, $r7);

        $r10 = r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsService mIAppOpsService>;

        $r9 = r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsCallback$Stub mAppOpsCallback>;

        interfaceinvoke $r10.<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>(87, null, $r9);

     label5:
        goto label7;

     label6:
        $r16 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private boolean shouldBenchmark()
    {
        com.android.server.StorageManagerService r0;
        long l0, $l4, $l5, $l6;
        java.lang.Object r1, $r7, $r10;
        android.os.storage.VolumeInfo r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        byte $b1, $b2, $b7;
        android.util.ArrayMap $r5, $r6, $r9;
        int $i3, i8;
        java.lang.String $r8;
        boolean $z0;
        java.lang.Throwable $r11;
        android.os.storage.VolumeRecord r12;

        r0 := @this: com.android.server.StorageManagerService;

        $r3 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r4, "storage_benchmark_interval", 604800000L);

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label01;

        return 0;

     label01:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label02;

        return 1;

     label02:
        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        i8 = 0;

     label03:
        $r5 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i3 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        if i8 >= $i3 goto label08;

        $r6 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i8);

        r2 = (android.os.storage.VolumeInfo) $r7;

        $r9 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r8 = r2.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        r12 = (android.os.storage.VolumeRecord) $r10;

        $z0 = virtualinvoke r2.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z0 == 0 goto label07;

     label04:
        if r12 == null goto label07;

     label05:
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = r12.<android.os.storage.VolumeRecord: long lastBenchMillis>;

        $l6 = $l4 - $l5;

        $b7 = $l6 cmp l0;

        if $b7 < 0 goto label07;

        exitmonitor r1;

     label06:
        return 1;

     label07:
        i8 = i8 + 1;

        goto label03;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void snapshotAndMonitorLegacyStorageAppOp(android.os.UserHandle)
    {
        com.android.server.StorageManagerService r0;
        android.os.UserHandle r1;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r2;
        boolean z0, z1;
        android.content.pm.PackageManagerInternal $r5;
        java.util.List $r6;
        com.android.server.StorageManagerService$7 $r7;
        android.os.Handler $r8;
        android.content.Context $r9;
        java.util.Map $r10;
        java.lang.Integer $r11;
        java.lang.Object $r13;
        java.lang.String $r14, $r16, $r20, $r22;
        com.android.internal.app.IAppOpsService $r15;
        android.os.RemoteException $r17;
        java.lang.StringBuilder $r18;
        android.content.pm.ApplicationInfo r23;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.UserHandle;

        i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r5 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r6 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: java.util.List getInstalledApplications(int,int,int)>(4988928, i0, $i1);

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        z1 = 1;

        if z0 == 0 goto label9;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.content.pm.ApplicationInfo) $r13;

     label2:
        $r15 = r0.<com.android.server.StorageManagerService: com.android.internal.app.IAppOpsService mIAppOpsService>;

        $i2 = r23.<android.content.pm.ApplicationInfo: int uid>;

        $r14 = r23.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i3 = interfaceinvoke $r15.<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>(87, $i2, $r14);

        if $i3 != 0 goto label4;

     label3:
        goto label5;

     label4:
        z1 = 0;

     label5:
        $r16 = r23.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i4 = r23.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke r0.<com.android.server.StorageManagerService: void updateLegacyStorageApps(java.lang.String,int,boolean)>($r16, $i4, z1);

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to check legacy op for package ");

        $r20 = r23.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", $r22, $r17);

     label8:
        goto label1;

     label9:
        $r7 = new com.android.server.StorageManagerService$7;

        specialinvoke $r7.<com.android.server.StorageManagerService$7: void <init>(com.android.server.StorageManagerService)>(r0);

        $r9 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r7.<com.android.internal.content.PackageMonitor: void register(android.content.Context,android.os.UserHandle,boolean,android.os.Handler)>($r9, r1, 1, $r8);

        $r10 = r0.<com.android.server.StorageManagerService: java.util.Map mPackageMonitorsForUser>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r7);

        return;

        catch android.os.RemoteException from label2 to label3 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private void start()
    {
        com.android.server.StorageManagerService r0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void connectStoraged()>();

        specialinvoke r0.<com.android.server.StorageManagerService: void connectVold()>();

        return;
    }

    private boolean supportsBlockCheckpoint() throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold $r1;
        boolean $z0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        $r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $z0 = interfaceinvoke $r1.<android.os.IVold: boolean supportsBlockCheckpoint()>();

        return $z0;
    }

    private void systemReady()
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object $r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        android.os.Handler $r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r2 = (com.android.server.wm.ActivityTaskManagerInternal) $r1;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void registerScreenObserver(com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver)>(r0);

        $r3 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void unmount(android.os.storage.VolumeInfo)
    {
        com.android.server.StorageManagerService r0;
        int $i0;
        java.lang.String $r2, $r6;
        android.os.IVold $r3;
        com.android.server.storage.StorageSessionController $r4;
        com.android.server.pm.Installer $r5;
        java.lang.Exception $r7;
        com.android.server.pm.Installer$InstallerException $r8;
        android.os.storage.VolumeInfo r9;

        r0 := @this: com.android.server.StorageManagerService;

        r9 := @parameter0: android.os.storage.VolumeInfo;

     label1:
        $i0 = r9.<android.os.storage.VolumeInfo: int type>;

        if $i0 != 1 goto label2;

        $r5 = r0.<com.android.server.StorageManagerService: com.android.server.pm.Installer mInstaller>;

        $r6 = virtualinvoke r9.<android.os.storage.VolumeInfo: java.lang.String getFsUuid()>();

        virtualinvoke $r5.<com.android.server.pm.Installer: void onPrivateVolumeRemoved(java.lang.String)>($r6);

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

        goto label8;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "Failed unmount mirror data", $r8);

     label6:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $r2 = r9.<android.os.storage.VolumeInfo: java.lang.String id>;

        interfaceinvoke $r3.<android.os.IVold: void unmount(java.lang.String)>($r2);

        $r4 = r0.<com.android.server.StorageManagerService: com.android.server.storage.StorageSessionController mStorageSessionController>;

        virtualinvoke $r4.<com.android.server.storage.StorageSessionController: void onVolumeUnmount(android.os.storage.VolumeInfo)>(r9);

     label7:
        goto label9;

     label8:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r7);

     label9:
        return;

        catch com.android.server.pm.Installer$InstallerException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label3;
        catch java.lang.Exception from label6 to label7 with label3;
    }

    private void updateFusePropFromSettings()
    {
        com.android.server.StorageManagerService r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r1, $r7;
        java.lang.String $r6, $r10, $r11;
        android.content.Context $r12;
        java.lang.Object $r13;
        android.os.PowerManager $r14;

        r0 := @this: com.android.server.StorageManagerService;

        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.fflag.override.settings_fuse", 1);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FUSE flags. Settings: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Default: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(1);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r6);

        $z1 = r0.<com.android.server.StorageManagerService: boolean mIsFuseEnabled>;

        if $z1 == z0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Toggling persist.sys.fuse to ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.fuse", $r11);

        $r12 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r14 = (android.os.PowerManager) $r13;

        virtualinvoke $r14.<android.os.PowerManager: void reboot(java.lang.String)>("fuse_prop");

     label1:
        return;
    }

    private void updateLegacyStorageApps(java.lang.String, int, boolean)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        boolean z0;
        java.lang.Object r1;
        java.lang.String $r5, $r11, r15;
        java.util.Set $r6, $r12;
        java.lang.Integer $r7, $r13;
        java.lang.Throwable $r14;
        java.lang.StringBuilder r16, r17;

        r0 := @this: com.android.server.StorageManagerService;

        r15 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        if z0 == 0 goto label3;

     label1:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has legacy storage");

        $r11 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", $r11);

        $r12 = r0.<com.android.server.StorageManagerService: java.util.Set mUidsWithLegacyExternalStorage>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label2:
        goto label4;

     label3:
        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have legacy storage");

        $r5 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", $r5);

        $r6 = r0.<com.android.server.StorageManagerService: java.util.Set mUidsWithLegacyExternalStorage>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r7);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r14 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void waitForLatch(java.util.concurrent.CountDownLatch, java.lang.String, long) throws java.util.concurrent.TimeoutException
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, $r5, $r10, $r14, $r22, $r27;
        long l0, l1, $l4, $l5;
        java.util.concurrent.TimeUnit $r2;
        boolean $z0;
        java.lang.Thread $r4, $r13;
        byte $b3, $b6;
        java.lang.StringBuilder $r11, $r24, r29;
        java.util.concurrent.TimeoutException $r21;
        java.lang.Throwable $r23;
        java.util.concurrent.CountDownLatch r28;

        r0 := @this: com.android.server.StorageManagerService;

        r28 := @parameter0: java.util.concurrent.CountDownLatch;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

     label1:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke r28.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(5000L, $r2);

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread ");

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" still waiting for ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r10 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r10);

     label4:
        goto label6;

     label5:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupt while waiting for ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r27);

     label6:
        $b3 = l0 cmp 0L;

        if $b3 <= 0 goto label8;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = l1 + l0;

        $b6 = $l4 cmp $l5;

        if $b6 > 0 goto label7;

        goto label8;

     label7:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread ");

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r14 = virtualinvoke $r13.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" gave up waiting for ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r21 = new java.util.concurrent.TimeoutException;

        $r22 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label8:
        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    private void warnOnNotMounted()
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2, $r3;
        int $i0, i2;
        boolean $z0, $z1;
        java.lang.Throwable $r5;
        android.os.storage.VolumeInfo r6;

        r0 := @this: com.android.server.StorageManagerService;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        i2 = 0;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label4;

        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        r6 = (android.os.storage.VolumeInfo) $r4;

        $z0 = virtualinvoke r6.<android.os.storage.VolumeInfo: boolean isPrimary()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r6.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z1 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", "No primary storage mounted!");

        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void writeSettingsLocked()
    {
        com.android.server.StorageManagerService r0;
        com.android.internal.util.FastXmlSerializer r1;
        int i0, i1;
        android.util.AtomicFile $r2, $r10, $r15;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r7;
        java.lang.Boolean $r5;
        android.util.ArrayMap $r8, $r11;
        java.lang.Object $r12;
        android.os.storage.VolumeRecord $r13;
        java.lang.Throwable $r14;
        java.io.FileOutputStream r16, r17;

        r0 := @this: com.android.server.StorageManagerService;

        r16 = null;

     label01:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.AtomicFile mSettingsFile>;

        r17 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r16 = r17;

     label03:
        r1 = new com.android.internal.util.FastXmlSerializer;

     label04:
        r16 = r17;

     label05:
        specialinvoke r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label06:
        r16 = r17;

     label07:
        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r17, $r4);

     label08:
        r16 = r17;

     label09:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r5);

     label10:
        r16 = r17;

     label11:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "volumes");

     label12:
        r16 = r17;

     label13:
        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "version", 3);

     label14:
        r16 = r17;

     label15:
        $r7 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r1, "primaryStorageUuid", $r7);

     label16:
        r16 = r17;

     label17:
        $r8 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        i0 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

     label18:
        i1 = 0;

     label19:
        if i1 >= i0 goto label22;

        r16 = r17;

     label20:
        $r11 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r13 = (android.os.storage.VolumeRecord) $r12;

        staticinvoke <com.android.server.StorageManagerService: void writeVolumeRecord(org.xmlpull.v1.XmlSerializer,android.os.storage.VolumeRecord)>(r1, $r13);

     label21:
        i1 = i1 + 1;

        goto label19;

     label22:
        r16 = r17;

     label23:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "volumes");

     label24:
        r16 = r17;

     label25:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label26:
        r16 = r17;

     label27:
        $r10 = r0.<com.android.server.StorageManagerService: android.util.AtomicFile mSettingsFile>;

        virtualinvoke $r10.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r17);

     label28:
        goto label30;

     label29:
        $r14 := @caughtexception;

        if r16 == null goto label30;

        $r15 = r0.<com.android.server.StorageManagerService: android.util.AtomicFile mSettingsFile>;

        virtualinvoke $r15.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r16);

     label30:
        return;

        catch java.io.IOException from label01 to label02 with label29;
        catch java.io.IOException from label03 to label04 with label29;
        catch java.io.IOException from label05 to label06 with label29;
        catch java.io.IOException from label07 to label08 with label29;
        catch java.io.IOException from label09 to label10 with label29;
        catch java.io.IOException from label11 to label12 with label29;
        catch java.io.IOException from label13 to label14 with label29;
        catch java.io.IOException from label15 to label16 with label29;
        catch java.io.IOException from label17 to label18 with label29;
        catch java.io.IOException from label20 to label21 with label29;
        catch java.io.IOException from label23 to label24 with label29;
        catch java.io.IOException from label25 to label26 with label29;
        catch java.io.IOException from label27 to label28 with label29;
    }

    public static void writeVolumeRecord(org.xmlpull.v1.XmlSerializer, android.os.storage.VolumeRecord) throws java.io.IOException
    {
        org.xmlpull.v1.XmlSerializer r0;
        android.os.storage.VolumeRecord r1;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r5;
        long $l2, $l3, $l4, $l5;

        r0 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r1 := @parameter1: android.os.storage.VolumeRecord;

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "volume");

        $i0 = r1.<android.os.storage.VolumeRecord: int type>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r0, "type", $i0);

        $r3 = r1.<android.os.storage.VolumeRecord: java.lang.String fsUuid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r0, "fsUuid", $r3);

        $r4 = r1.<android.os.storage.VolumeRecord: java.lang.String partGuid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r0, "partGuid", $r4);

        $r5 = r1.<android.os.storage.VolumeRecord: java.lang.String nickname>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r0, "nickname", $r5);

        $i1 = r1.<android.os.storage.VolumeRecord: int userFlags>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r0, "userFlags", $i1);

        $l2 = r1.<android.os.storage.VolumeRecord: long createdMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r0, "createdMillis", $l2);

        $l3 = r1.<android.os.storage.VolumeRecord: long lastSeenMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r0, "lastSeenMillis", $l3);

        $l4 = r1.<android.os.storage.VolumeRecord: long lastTrimMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r0, "lastTrimMillis", $l4);

        $l5 = r1.<android.os.storage.VolumeRecord: long lastBenchMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r0, "lastBenchMillis", $l5);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "volume");

        return;
    }

    public void abortChanges(java.lang.String, boolean) throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        boolean z0;
        int $i0;
        java.lang.SecurityException $r2;
        android.os.IVold $r3;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label1;

        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r3.<android.os.IVold: void abortChanges(java.lang.String,boolean)>(r1, z0);

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("no permission to commit checkpoint changes");

        throw $r2;
    }

    void abortIdleMaint(java.lang.Runnable)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold r1;
        com.android.server.StorageManagerService$12 r2;
        java.lang.Exception $r3;
        java.lang.Runnable r4;

        r0 := @this: com.android.server.StorageManagerService;

        r4 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

     label1:
        r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r2 = new com.android.server.StorageManagerService$12;

        specialinvoke r2.<com.android.server.StorageManagerService$12: void <init>(com.android.server.StorageManagerService,java.lang.Runnable)>(r0, r4);

        interfaceinvoke r1.<android.os.IVold: void abortIdleMaint(android.os.IVoldTaskListener)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void abortIdleMaintenance()
    {
        com.android.server.StorageManagerService r0;

        r0 := @this: com.android.server.StorageManagerService;

        virtualinvoke r0.<com.android.server.StorageManagerService: void abortIdleMaint(java.lang.Runnable)>(null);

        return;
    }

    public void addUserKeyAuth(int, int, byte[], byte[])
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        byte[] r1, r6;
        android.os.IVold $r2;
        java.lang.String $r3, $r4;
        java.lang.Exception $r5;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: byte[];

        r1 := @parameter3: byte[];

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $r3 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(r6);

        $r4 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(r1);

        interfaceinvoke $r2.<android.os.IVold: void addUserKeyAuth(int,int,java.lang.String,java.lang.String)>(i0, i1, $r3, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void allocateBytes(java.lang.String, long, int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        long l0, $l5, $l6, $l8, $l10, l11, l14, l15, l16;
        java.io.File r1;
        int $i1, $i2, $i4, $i7, i12, i13;
        byte $b3, $b9;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.content.pm.PackageManagerInternal $r4;
        java.lang.StringBuilder $r5;
        android.os.ParcelableException $r11, r22;
        java.io.IOException $r12;
        java.lang.String $r13, r16, r17;
        java.lang.Throwable $r14, $r15;
        android.os.storage.StorageManager r19;

        r0 := @this: com.android.server.StorageManagerService;

        r16 := @parameter0: java.lang.String;

        l11 := @parameter1: long;

        i12 := @parameter2: int;

        r17 := @parameter3: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i13 = specialinvoke r0.<com.android.server.StorageManagerService: int adjustAllocateFlags(int,int,java.lang.String)>(i12, $i1, r17);

        $i2 = i13 | 8;

        l14 = virtualinvoke r0.<com.android.server.StorageManagerService: long getAllocatableBytes(java.lang.String,int,java.lang.String)>(r16, $i2, r17);

        $b3 = l11 cmp l14;

        if $b3 <= 0 goto label02;

        $i7 = i13 | 16;

        l0 = virtualinvoke r0.<com.android.server.StorageManagerService: long getAllocatableBytes(java.lang.String,int,java.lang.String)>(r16, $i7, r17);

        $l8 = l14 + l0;

        $b9 = l11 cmp $l8;

        if $b9 > 0 goto label01;

        goto label02;

     label01:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to allocate ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l11);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because only ");

        $l10 = l14 + l0;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allocatable");

        $r11 = new android.os.ParcelableException;

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        specialinvoke $r11.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r12);

        throw $r11;

     label02:
        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r19 = (android.os.storage.StorageManager) $r3;

        l15 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r1 = virtualinvoke r19.<android.os.storage.StorageManager: java.io.File findPathForUuid(java.lang.String)>(r16);

     label04:
        $i4 = i13 & 1;

        if $i4 == 0 goto label07;

     label05:
        $l6 = virtualinvoke r19.<android.os.storage.StorageManager: long getStorageFullBytes(java.io.File)>(r1);

        l16 = l11 + $l6;

     label06:
        goto label08;

     label07:
        $l5 = virtualinvoke r19.<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)>(r1);

        l16 = l11 + $l5;

     label08:
        $r4 = r0.<com.android.server.StorageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        virtualinvoke $r4.<android.content.pm.PackageManagerInternal: void freeStorage(java.lang.String,long,int)>(r16, l16, i13);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

        return;

     label10:
        $r14 := @caughtexception;

        goto label13;

     label11:
        $r15 := @caughtexception;

     label12:
        r22 = new android.os.ParcelableException;

        specialinvoke r22.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r15);

        throw r22;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

        throw $r14;

        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.io.IOException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
    }

    public void benchmark(java.lang.String, android.os.IVoldTaskListener)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVoldTaskListener r1;
        android.os.IVold r2;
        com.android.server.StorageManagerService$9 r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.StorageManagerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.IVoldTaskListener;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

     label1:
        r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r3 = new com.android.server.StorageManagerService$9;

        specialinvoke r3.<com.android.server.StorageManagerService$9: void <init>(com.android.server.StorageManagerService,android.os.IVoldTaskListener)>(r0, r1);

        interfaceinvoke r2.<android.os.IVold: void benchmark(java.lang.String,android.os.IVoldTaskListener)>(r6, r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int changeEncryptionPassword(int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.content.Context $r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        android.os.IVold $r3;
        java.lang.Exception $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        if i0 != 1 goto label2;

        r5 = "";

        goto label3;

     label2:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z1 != 0 goto label6;

     label3:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r3.<android.os.IVold: void fdeChangePassword(int,java.lang.String)>(i0, r5);

     label4:
        return 0;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

        return -1;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r2;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void clearPassword() throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        android.content.Context $r2;
        android.os.IVold $r3;
        java.lang.Exception $r4;

        r0 := @this: com.android.server.StorageManagerService;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "only keyguard can clear password");

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r3.<android.os.IVold: void fdeClearPassword()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void clearUserKeyAuth(int, int, byte[], byte[])
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        byte[] r1, r6;
        android.os.IVold $r2;
        java.lang.String $r3, $r4;
        java.lang.Exception $r5;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: byte[];

        r1 := @parameter3: byte[];

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $r3 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(r6);

        $r4 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(r1);

        interfaceinvoke $r2.<android.os.IVold: void clearUserKeyAuth(int,int,java.lang.String,java.lang.String)>(i0, i1, $r3, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void commitChanges() throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        int $i0;
        java.lang.SecurityException $r1;
        android.os.IVold $r2;

        r0 := @this: com.android.server.StorageManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label1;

        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void commitChanges()>();

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("no permission to commit checkpoint changes");

        throw $r1;
    }

    public void createUserKey(int, int, boolean)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        boolean z0;
        android.os.IVold $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void createUserKey(int,int,boolean)>(i0, i1, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int decryptStorage(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        android.os.Handler r1;
        android.content.Context $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        android.os.IVold $r4;
        java.lang.Exception $r5;
        android.os.ServiceSpecificException $r6;
        int $i2;
        java.lang.String r7;
        com.android.server._$$Lambda$StorageManagerService$kHfrfIqfu8okPHuGRmwjnqh0v3g r8;

        r0 := @this: com.android.server.StorageManagerService;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

        if $z0 != 0 goto label5;

     label1:
        $r4 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r4.<android.os.IVold: void fdeCheckPassword(java.lang.String)>(r7);

        r1 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        r8 = new com.android.server._$$Lambda$StorageManagerService$kHfrfIqfu8okPHuGRmwjnqh0v3g;

        specialinvoke r8.<com.android.server._$$Lambda$StorageManagerService$kHfrfIqfu8okPHuGRmwjnqh0v3g: void <init>(com.android.server.StorageManagerService)>(r0);

        virtualinvoke r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r8, 1000L);

     label2:
        return 0;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r5);

        return -1;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "fdeCheckPassword failed", $r6);

        $i2 = $r6.<android.os.ServiceSpecificException: int errorCode>;

        return $i2;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r3;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void destroyUserKey(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.os.IVold $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void destroyUserKey(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void destroyUserStorage(java.lang.String, int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        android.os.IVold $r1;
        java.lang.Exception $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.StorageManagerService;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

     label1:
        $r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r1.<android.os.IVold: void destroyUserStorage(java.lang.String,int,int)>(r3, i0, i1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r2);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.StorageManagerService r0;
        java.util.Map$Entry r1, r106;
        android.content.Context $r2, $r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.internal.util.IndentingPrintWriter $r3;
        android.util.ArrayMap $r5, $r8, $r11, $r73, $r76, $r80;
        int $i0, $i1, $i2, $i5, $i6, i8, i9, i10;
        java.lang.String $r14, $r16, $r18, $r26, $r29, $r31, $r35, $r38, $r41, $r43, $r45, $r48, $r57, $r60, $r66, $r78, $r79;
        java.lang.Object $r17, $r19, $r20, $r58, $r59, $r61, $r62, $r63, $r68, $r71, $r74, $r77, $r81, r89;
        java.lang.Long $r21;
        android.util.DataUnit $r22;
        long $l3, $l4, $l7;
        com.android.server.StorageManagerService$WatchedLockedUsers $r24;
        int[] $r28;
        java.util.Map $r50, $r54, r101;
        java.util.Set $r51, $r55;
        java.util.List $r69;
        com.android.server.StorageManagerService$ObbState $r72;
        android.os.storage.VolumeRecord $r75;
        android.os.storage.DiskInfo $r82;
        java.lang.Throwable $r83, $r84;
        java.io.FileDescriptor r85;
        java.io.PrintWriter r86;
        java.lang.String[] r87;
        android.os.storage.VolumeInfo r90;
        java.lang.StringBuilder r91, r93, r94, r96, r97, r98, r99, r100, r103;
        android.util.Pair r92;
        android.content.ContentResolver r95;
        java.util.Iterator r102, r104, r105;

        r0 := @this: com.android.server.StorageManagerService;

        r85 := @parameter0: java.io.FileDescriptor;

        r86 := @parameter1: java.io.PrintWriter;

        r87 := @parameter2: java.lang.String[];

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r2, "StorageManagerService", r86);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r3 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(r86, "  ", 160);

        r89 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r89;

     label02:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Disks:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label03:
        i8 = 0;

     label04:
        $r5 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks>;

        $i0 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        if i8 >= $i0 goto label06;

        $r80 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks>;

        $r81 = virtualinvoke $r80.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i8);

        $r82 = (android.os.storage.DiskInfo) $r81;

        virtualinvoke $r82.<android.os.storage.DiskInfo: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

     label05:
        i8 = i8 + 1;

        goto label04;

     label06:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Volumes:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label07:
        i9 = 0;

     label08:
        $r8 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i1 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

        if i9 >= $i1 goto label12;

        $r76 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r77 = virtualinvoke $r76.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i9);

        r90 = (android.os.storage.VolumeInfo) $r77;

        $r79 = "private";

        $r78 = r90.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z5 = virtualinvoke $r79.<java.lang.String: boolean equals(java.lang.Object)>($r78);

        if $z5 == 0 goto label10;

     label09:
        goto label11;

     label10:
        virtualinvoke r90.<android.os.storage.VolumeInfo: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

     label11:
        i9 = i9 + 1;

        goto label08;

     label12:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Records:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label13:
        i10 = 0;

     label14:
        $r11 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $i2 = virtualinvoke $r11.<android.util.ArrayMap: int size()>();

        if i10 >= $i2 goto label16;

        $r73 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r74 = virtualinvoke $r73.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i10);

        $r75 = (android.os.storage.VolumeRecord) $r74;

        virtualinvoke $r75.<android.os.storage.VolumeRecord: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

     label15:
        i10 = i10 + 1;

        goto label14;

     label16:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r91 = new java.lang.StringBuilder;

        specialinvoke r91.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Primary storage UUID: ");

        $r14 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r16);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r92 = staticinvoke <android.os.storage.StorageManager: android.util.Pair getPrimaryStoragePathAndSize()>();

     label17:
        if r92 != null goto label20;

     label18:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Internal storage total size: N/A");

     label19:
        goto label21;

     label20:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Internal storage (");

        $r17 = r92.<android.util.Pair: java.lang.Object first>;

        $r18 = (java.lang.String) $r17;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r18);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(") total size: ");

        $r19 = r92.<android.util.Pair: java.lang.Object second>;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.Object)>($r19);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" (");

        $r22 = <android.util.DataUnit: android.util.DataUnit MEBIBYTES>;

        $r20 = r92.<android.util.Pair: java.lang.Object second>;

        $r21 = (java.lang.Long) $r20;

        $l3 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        $l4 = virtualinvoke $r22.<android.util.DataUnit: long toBytes(long)>($l3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(long)>($l4);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(" MiB)");

     label21:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local unlocked users: ");

        $r24 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$WatchedLockedUsers mLocalUnlockedUsers>;

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r26);

        r94 = new java.lang.StringBuilder;

        specialinvoke r94.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System unlocked users: ");

        $r28 = r0.<com.android.server.StorageManagerService: int[] mSystemUnlockedUsers>;

        $r29 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r28);

        virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r31);

        $r32 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        r95 = virtualinvoke $r32.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Isolated storage, local feature flag: ");

        $i5 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r95, "isolated_storage_local", 0);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r35 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r35);

        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Isolated storage, remote feature flag: ");

        $i6 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r95, "isolated_storage_remote", 0);

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r38 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r38);

        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Isolated storage, resolved: ");

        $z1 = staticinvoke <android.os.storage.StorageManager: boolean hasIsolatedStorage()>();

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r41 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r41);

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forced scoped storage app list: ");

        $r43 = staticinvoke <android.provider.DeviceConfig: java.lang.String getProperty(java.lang.String,java.lang.String)>("storage_native_boot", "forced_scoped_storage_whitelist");

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r45);

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isAutomotive:");

        $z2 = r0.<com.android.server.StorageManagerService: boolean mIsAutomotive>;

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r48 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r48);

        exitmonitor r89;

     label22:
        r101 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        entermonitor r101;

     label23:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mObbMounts:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r50 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        $r51 = interfaceinvoke $r50.<java.util.Map: java.util.Set entrySet()>();

        r102 = interfaceinvoke $r51.<java.util.Set: java.util.Iterator iterator()>();

     label24:
        $z6 = interfaceinvoke r102.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label29;

        $r62 = interfaceinvoke r102.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r62;

        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        $r63 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r63);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r66 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r66);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r68 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r69 = (java.util.List) $r68;

        r104 = interfaceinvoke $r69.<java.util.List: java.util.Iterator iterator()>();

     label25:
        $z4 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label27;

        $r71 = interfaceinvoke r104.<java.util.Iterator: java.lang.Object next()>();

        $r72 = (com.android.server.StorageManagerService$ObbState) $r71;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r72);

     label26:
        goto label25;

     label27:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label28:
        goto label24;

     label29:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mObbPathToStateMap:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r54 = r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap>;

        $r55 = interfaceinvoke $r54.<java.util.Map: java.util.Set entrySet()>();

        r105 = interfaceinvoke $r55.<java.util.Set: java.util.Iterator iterator()>();

     label30:
        $z3 = interfaceinvoke r105.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label32;

        $r58 = interfaceinvoke r105.<java.util.Iterator: java.lang.Object next()>();

        r106 = (java.util.Map$Entry) $r58;

        $r59 = interfaceinvoke r106.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r60 = (java.lang.String) $r59;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r60);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" -> ");

        $r61 = interfaceinvoke r106.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r61);

     label31:
        goto label30;

     label32:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label33:
        exitmonitor r101;

     label34:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Last maintenance: ");

        $l7 = r0.<com.android.server.StorageManagerService: long mLastMaintenance>;

        $r57 = staticinvoke <android.util.TimeUtils: java.lang.String formatForLogging(long)>($l7);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r57);

        return;

     label35:
        $r83 := @caughtexception;

     label36:
        exitmonitor r101;

     label37:
        throw $r83;

     label38:
        $r84 := @caughtexception;

     label39:
        exitmonitor r89;

     label40:
        throw $r84;

        catch java.lang.Throwable from label02 to label03 with label38;
        catch java.lang.Throwable from label04 to label05 with label38;
        catch java.lang.Throwable from label06 to label07 with label38;
        catch java.lang.Throwable from label08 to label09 with label38;
        catch java.lang.Throwable from label10 to label11 with label38;
        catch java.lang.Throwable from label12 to label13 with label38;
        catch java.lang.Throwable from label14 to label15 with label38;
        catch java.lang.Throwable from label16 to label17 with label38;
        catch java.lang.Throwable from label18 to label19 with label38;
        catch java.lang.Throwable from label20 to label21 with label38;
        catch java.lang.Throwable from label21 to label22 with label38;
        catch java.lang.Throwable from label23 to label24 with label35;
        catch java.lang.Throwable from label24 to label25 with label35;
        catch java.lang.Throwable from label25 to label26 with label35;
        catch java.lang.Throwable from label27 to label28 with label35;
        catch java.lang.Throwable from label29 to label30 with label35;
        catch java.lang.Throwable from label30 to label31 with label35;
        catch java.lang.Throwable from label32 to label33 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label35;
        catch java.lang.Throwable from label39 to label40 with label38;
    }

    public int encryptStorage(int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.content.Context $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        android.os.IVold $r3;
        java.lang.Exception $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        if i0 != 1 goto label1;

        r5 = "";

        goto label2;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 != 0 goto label5;

     label2:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r3.<android.os.IVold: void fdeEnable(int,java.lang.String,int)>(i0, r5, 0);

     label3:
        return 0;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

        return -1;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r2;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void fixateNewestUserKeyAuth(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.os.IVold $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void fixateNewestUserKeyAuth(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void fixupAppDir(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, $r7, $r8, $r9, $r14, $r18, $r23, $r28, $r32, r35;
        java.util.regex.Pattern $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r15, $r20, $r25, r37, r39;
        android.content.Context $r10;
        android.content.pm.PackageManager $r11;
        android.content.pm.PackageManager$NameNotFoundException $r19;
        java.lang.Throwable $r24;
        java.lang.Exception $r29;
        java.util.regex.Matcher r33;
        int i5, i6;
        android.os.IVold r36;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.server.StorageManagerService: java.util.regex.Pattern KNOWN_APP_DIR_PATHS>;

        r33 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r33.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label10;

        $r8 = virtualinvoke r33.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if $r8 != null goto label01;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asked to fixup an app dir without a userId: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("StorageManagerService", $r18);

        return;

     label01:
        $r9 = virtualinvoke r33.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        r35 = virtualinvoke r33.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r10 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i6 = virtualinvoke $r11.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r35, i5);

     label02:
        r36 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r14 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r36.<android.os.IVold: void fixupAppDir(java.lang.String,int)>($r14, i6);

     label03:
        goto label09;

     label04:
        $r29 := @caughtexception;

     label05:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to fixup app dir for ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r32 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", $r32, $r29);

     label06:
        goto label09;

     label07:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find package to fixup app dir ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", $r23, $r19);

        goto label09;

     label08:
        $r24 := @caughtexception;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid userId in path: ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", $r28, $r24);

     label09:
        goto label11;

     label10:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Path ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid application-specific directory");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("StorageManagerService", $r7);

     label11:
        return;

        catch java.lang.NumberFormatException from label01 to label02 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label07;
        catch android.os.RemoteException from label02 to label03 with label04;
        catch android.os.ServiceSpecificException from label02 to label03 with label04;
        catch java.lang.NumberFormatException from label02 to label03 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label07;
        catch java.lang.NumberFormatException from label05 to label06 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label07;
    }

    public void forgetAllVolumes()
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r11, $r13;
        java.lang.String r2, $r5, $r6, $r9, $r14;
        android.util.ArrayMap $r3, $r4, $r10, $r12;
        int $i0, i1;
        boolean $z0, $z1;
        android.os.Handler $r7, $r16;
        android.os.Message $r8, $r17;
        com.android.server.StorageManagerService$Callbacks $r15;
        java.lang.Throwable $r18;
        android.os.storage.VolumeRecord r19;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        i1 = 0;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i1 >= $i0 goto label4;

        $r10 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r2 = (java.lang.String) $r11;

        $r12 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r19 = (android.os.storage.VolumeRecord) $r13;

        $r14 = r19.<android.os.storage.VolumeRecord: java.lang.String partGuid>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r14);

        if $z1 != 0 goto label2;

        $r16 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r17 = virtualinvoke $r16.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(9, r19);

        virtualinvoke $r17.<android.os.Message: void sendToTarget()>();

     label2:
        $r15 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$5100(com.android.server.StorageManagerService$Callbacks,java.lang.String)>($r15, r2);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        virtualinvoke $r4.<android.util.ArrayMap: void clear()>();

        $r6 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $r5 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z0 != 0 goto label5;

        $r9 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String getDefaultPrimaryStorageUuid()>();

        r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid> = $r9;

     label5:
        specialinvoke r0.<com.android.server.StorageManagerService: void writeSettingsLocked()>();

        $r7 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r8 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(10);

        virtualinvoke $r8.<android.os.Message: void sendToTarget()>();

        exitmonitor r1;

     label6:
        return;

     label7:
        $r18 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r18;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void forgetVolume(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r5;
        android.os.storage.VolumeRecord r2;
        android.util.ArrayMap $r4;
        java.lang.String $r6, $r9, r13, $r15;
        android.os.Handler $r7, $r10;
        android.os.Message $r8, $r11;
        boolean $z0, $z1;
        java.lang.Throwable $r12;
        com.android.server.StorageManagerService$Callbacks $r14;

        r0 := @this: com.android.server.StorageManagerService;

        r13 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r13);

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r13);

        r2 = (android.os.storage.VolumeRecord) $r5;

     label2:
        if r2 == null goto label4;

     label3:
        $r9 = r2.<android.os.storage.VolumeRecord: java.lang.String partGuid>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r9);

        if $z0 != 0 goto label4;

        $r10 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(9, r2);

        virtualinvoke $r11.<android.os.Message: void sendToTarget()>();

     label4:
        $r14 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$5100(com.android.server.StorageManagerService$Callbacks,java.lang.String)>($r14, r13);

        $r15 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r15, r13);

        if $z1 == 0 goto label5;

        $r6 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String getDefaultPrimaryStorageUuid()>();

        r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid> = $r6;

        $r7 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r8 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(10);

        virtualinvoke $r8.<android.os.Message: void sendToTarget()>();

     label5:
        specialinvoke r0.<com.android.server.StorageManagerService: void writeSettingsLocked()>();

        exitmonitor r1;

     label6:
        return;

     label7:
        $r12 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void format(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        java.lang.String $r2, r5, r6;
        android.os.IVold $r3;
        boolean $z0;
        java.lang.Exception $r4;

        r0 := @this: com.android.server.StorageManagerService;

        r5 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        r1 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeInfo findVolumeByIdOrThrow(java.lang.String)>(r5);

        r6 = r1.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $r2 = r1.<android.os.storage.VolumeInfo: java.lang.String id>;

        interfaceinvoke $r3.<android.os.IVold: void format(java.lang.String,java.lang.String)>($r2, "auto");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.android.server.StorageManagerService: void forgetVolume(java.lang.String)>(r6);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void fstrim(int, android.os.IVoldTaskListener)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.os.IVold r1;
        com.android.server.StorageManagerService$10 r2;
        boolean $z0, $z1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.os.IVoldTaskListener r5;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.os.IVoldTaskListener;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

     label1:
        $z0 = virtualinvoke r0.<com.android.server.StorageManagerService: boolean needsCheckpoint()>();

        if $z0 == 0 goto label5;

        $z1 = specialinvoke r0.<com.android.server.StorageManagerService: boolean supportsBlockCheckpoint()>();

        if $z1 != 0 goto label3;

     label2:
        goto label5;

     label3:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", "Skipping fstrim - block based checkpoint in progress");

     label4:
        goto label6;

     label5:
        r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r2 = new com.android.server.StorageManagerService$10;

        specialinvoke r2.<com.android.server.StorageManagerService$10: void <init>(com.android.server.StorageManagerService,android.os.IVoldTaskListener)>(r0, r5);

        interfaceinvoke r1.<android.os.IVold: void fstrim(int,android.os.IVoldTaskListener)>(i0, r2);

     label6:
        return;

     label7:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public long getAllocatableBytes(java.lang.String, int, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.StorageManager r1;
        long l0, $l4, $l5, $l6, $l7, $l8, $l9, $l10, l13, l14, l15, l16, l18, l19;
        java.io.File r2;
        int $i1, $i2, $i3, i11, i12, $i17;
        android.content.Context $r3, $r5;
        java.lang.Object $r4, $r6;
        boolean $z0;
        java.lang.Throwable $r7, $r8;
        java.lang.String r9, r10;
        android.app.usage.StorageStatsManager r11;
        android.os.ParcelableException r14;

        r0 := @this: com.android.server.StorageManagerService;

        r9 := @parameter0: java.lang.String;

        i11 := @parameter1: int;

        r10 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i12 = specialinvoke r0.<com.android.server.StorageManagerService: int adjustAllocateFlags(int,int,java.lang.String)>(i11, $i1, r10);

        $r3 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r1 = (android.os.storage.StorageManager) $r4;

        $r5 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/usage/StorageStatsManager;");

        r11 = (android.app.usage.StorageStatsManager) $r6;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = virtualinvoke r1.<android.os.storage.StorageManager: java.io.File findPathForUuid(java.lang.String)>(r9);

     label02:
        l13 = 0L;

        l14 = 0L;

        l15 = 0L;

        l16 = 0L;

        $i2 = i12 & 16;

        if $i2 != 0 goto label04;

     label03:
        l13 = virtualinvoke r2.<java.io.File: long getUsableSpace()>();

        l14 = virtualinvoke r1.<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)>(r2);

        l15 = virtualinvoke r1.<android.os.storage.StorageManager: long getStorageFullBytes(java.io.File)>(r2);

     label04:
        $i3 = i12 & 8;

        if $i3 != 0 goto label08;

     label05:
        $z0 = virtualinvoke r11.<android.app.usage.StorageStatsManager: boolean isQuotaSupported(java.lang.String)>(r9);

        if $z0 == 0 goto label07;

        $l8 = virtualinvoke r11.<android.app.usage.StorageStatsManager: long getCacheBytes(java.lang.String)>(r9);

        $l9 = virtualinvoke r1.<android.os.storage.StorageManager: long getStorageCacheBytes(java.io.File,int)>(r2, i12);

        $l10 = $l8 - $l9;

        l16 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l10);

     label06:
        goto label08;

     label07:
        goto label08;

     label08:
        $i17 = i12 & 1;

        if $i17 == 0 goto label11;

     label09:
        $l6 = l13 + l16;

        $l7 = $l6 - l15;

        l18 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l7);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return l18;

     label11:
        $l4 = l13 + l16;

        $l5 = $l4 - l14;

        l19 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l5);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return l19;

     label13:
        $r8 := @caughtexception;

        goto label16;

     label14:
        $r7 := @caughtexception;

     label15:
        r14 = new android.os.ParcelableException;

        specialinvoke r14.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r7);

        throw r14;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.io.IOException from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
    }

    public long getCacheQuotaBytes(java.lang.String, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, $i3;
        long l1, l2;
        android.app.usage.StorageStatsManager r1;
        android.content.Context $r2, $r4;
        java.lang.Object $r3;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.StorageManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == $i3 goto label1;

        $r4 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.STORAGE_INTERNAL", "StorageManagerService");

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/usage/StorageStatsManager;");

        r1 = (android.app.usage.StorageStatsManager) $r3;

     label2:
        l2 = virtualinvoke r1.<android.app.usage.StorageStatsManager: long getCacheQuotaBytes(java.lang.String,int)>(r6, i0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return l2;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public long getCacheSizeBytes(java.lang.String, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, $i3;
        long l1, l2;
        android.os.ParcelableException r1;
        android.content.Context $r2, $r6;
        java.lang.Object $r3;
        android.app.usage.StorageStatsManager $r4;
        android.app.usage.StorageStats $r5;
        java.lang.Throwable $r7, $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.StorageManagerService;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == $i3 goto label1;

        $r6 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.STORAGE_INTERNAL", "StorageManagerService");

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/usage/StorageStatsManager;");

        $r4 = (android.app.usage.StorageStatsManager) $r3;

        $r5 = virtualinvoke $r4.<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int)>(r9, i0);

        l2 = virtualinvoke $r5.<android.app.usage.StorageStats: long getCacheBytes()>();

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return l2;

     label4:
        $r7 := @caughtexception;

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        r1 = new android.os.ParcelableException;

        specialinvoke r1.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r8);

        throw r1;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.io.IOException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public android.os.storage.DiskInfo[] getDisks()
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r5;
        android.util.ArrayMap $r2, $r3, $r4;
        int $i0, $i1, i2;
        android.os.storage.DiskInfo $r6;
        java.lang.Throwable $r7;
        android.os.storage.DiskInfo[] r8;

        r0 := @this: com.android.server.StorageManagerService;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        r8 = newarray (android.os.storage.DiskInfo)[$i0];

     label2:
        i2 = 0;

     label3:
        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i2 >= $i1 goto label5;

        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mDisks>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r6 = (android.os.storage.DiskInfo) $r5;

        r8[i2] = $r6;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        exitmonitor r1;

     label6:
        return r8;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int getEncryptionState()
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.content.Context $r2;
        android.os.IVold $r3;
        java.lang.Exception $r4;

        r0 := @this: com.android.server.StorageManagerService;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        i0 = interfaceinvoke $r3.<android.os.IVold: int fdeComplete()>();

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

        return -1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getField(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        android.content.Context $r1;
        boolean $z0;
        android.os.IVold $r2;
        java.lang.Exception $r3;
        java.lang.String r4, r5;

        r0 := @this: com.android.server.StorageManagerService;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isBlockEncrypted()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r5 = interfaceinvoke $r2.<android.os.IVold: java.lang.String fdeGetField(java.lang.String)>(r4);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getMountedObbPath(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        com.android.server.StorageManagerService$ObbState r1;
        java.util.Map $r3, r15;
        java.lang.Object $r4;
        java.lang.String $r5, $r8, $r12, r14;
        android.os.storage.VolumeInfo $r6;
        java.io.File $r7;
        java.lang.StringBuilder $r9;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.StorageManagerService;

        r14 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "rawPath cannot be null");

        specialinvoke r0.<com.android.server.StorageManagerService: void warnOnNotMounted()>();

        r15 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        entermonitor r15;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14);

        r1 = (com.android.server.StorageManagerService$ObbState) $r4;

        exitmonitor r15;

     label2:
        if r1 != null goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find OBB mounted at ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r12);

        return null;

     label3:
        $r5 = r1.<com.android.server.StorageManagerService$ObbState: java.lang.String volId>;

        $r6 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeInfo findVolumeByIdOrThrow(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<android.os.storage.VolumeInfo: java.io.File getPath()>();

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r8;

     label4:
        $r13 := @caughtexception;

     label5:
        exitmonitor r15;

     label6:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String getPassword() throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        android.content.Context $r1;
        android.os.IVold $r2;
        java.lang.Exception $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "only keyguard can retrieve password");

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r4 = interfaceinvoke $r2.<android.os.IVold: java.lang.String fdeGetPassword()>();

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getPasswordType()
    {
        com.android.server.StorageManagerService r0;
        int i0;
        android.content.Context $r2;
        android.os.IVold $r3;
        java.lang.Exception $r4;

        r0 := @this: com.android.server.StorageManagerService;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        i0 = interfaceinvoke $r3.<android.os.IVold: int fdeGetPasswordType()>();

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

        return -1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getPrimaryStorageUuid()
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.StorageManagerService;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.os.storage.StorageVolume[] getVolumeList(int, java.lang.String, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i18, i19, i20, i22, $i23, i24, i25, i27;
        boolean z0, z1, z2, z3, z4, z5, $z7, $z9, z14, z15, z16, z17, z18, z19, z20, z21, z22, z23;
        java.lang.Object $r1, $r20, $r25, $r27, r55;
        android.os.UserManagerInternal $r2;
        android.content.pm.UserInfo $r3;
        com.android.server.StorageManagerService$StorageManagerInternalImpl $r4;
        java.util.ArrayList $r5;
        android.util.ArraySet $r6;
        android.os.storage.StorageVolume[] $r7, $r9;
        java.lang.Object[] $r8;
        android.os.storage.StorageVolume $r10, $r15, r65, r68;
        android.content.Context $r11, $r16, $r22, $r64;
        java.lang.String $r12, $r17, $r21, $r23, $r31, $r37, $r41, r52, r57, r66;
        android.os.UserHandle $r13, $r14;
        android.util.ArrayMap $r18, $r19, $r24, $r26, $r56;
        long $l10, $l12, $l13, l21, l26;
        byte $b11, $b14;
        java.lang.Throwable $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, r59;
        android.os.storage.VolumeInfo r58;
        java.io.File r60, r69, r71;
        java.lang.StringBuilder r61, r62, r63;
        android.os.storage.VolumeRecord r67;

        r0 := @this: com.android.server.StorageManagerService;

        i19 := @parameter0: int;

        r52 := @parameter1: java.lang.String;

        i20 := @parameter2: int;

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i19);

        $i1 = i20 & 256;

        if $i1 == 0 goto label01;

        z14 = 1;

        goto label02;

     label01:
        z14 = 0;

     label02:
        z0 = z14;

        $i2 = i20 & 512;

        if $i2 == 0 goto label03;

        z15 = 1;

        goto label04;

     label03:
        z15 = 0;

     label04:
        $i3 = i20 & 1024;

        if $i3 == 0 goto label05;

        z16 = 1;

        goto label06;

     label05:
        z16 = 0;

     label06:
        $i4 = i20 & 2048;

        if $i4 == 0 goto label07;

        z17 = 1;

        goto label08;

     label07:
        z17 = 0;

     label08:
        z1 = specialinvoke r0.<com.android.server.StorageManagerService: boolean isSystemUnlocked(int)>(0);

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i6 = r0.<com.android.server.StorageManagerService: int mMediaStoreAuthorityAppId>;

        z2 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>($i5, $i6);

        l21 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r2 = (android.os.UserManagerInternal) $r1;

        $r3 = virtualinvoke $r2.<android.os.UserManagerInternal: android.content.pm.UserInfo getUserInfo(int)>(i0);

        z3 = virtualinvoke $r3.<android.content.pm.UserInfo: boolean isDemo()>();

        z4 = virtualinvoke r0.<com.android.server.StorageManagerService: boolean isUserKeyUnlocked(int)>(i0);

        $r4 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$StorageManagerInternalImpl mStorageManagerInternal>;

        z5 = virtualinvoke $r4.<com.android.server.StorageManagerService$StorageManagerInternalImpl: boolean hasExternalStorage(int,java.lang.String)>(i19, r52);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l21);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        r55 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r55;

        z18 = 0;

        i22 = 0;

     label11:
        $r56 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i23 = virtualinvoke $r56.<android.util.ArrayMap: int size()>();

        if i22 >= $i23 goto label55;

        $r24 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r25 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i22);

        r57 = (java.lang.String) $r25;

        $r26 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r27 = virtualinvoke $r26.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i22);

        r58 = (android.os.storage.VolumeInfo) $r27;

     label12:
        i24 = virtualinvoke r58.<android.os.storage.VolumeInfo: int getType()>();

     label13:
        if i24 == 0 goto label18;

        if i24 == 2 goto label14;

        if i24 == 5 goto label18;

        goto label16;

     label14:
        $i18 = virtualinvoke r58.<android.os.storage.VolumeInfo: int getMountUserId()>();

        if $i18 != i0 goto label16;

     label15:
        goto label18;

     label16:
        goto label28;

     label17:
        $r45 := @caughtexception;

        r59 = $r45;

        goto label67;

     label18:
        if z0 == 0 goto label21;

     label19:
        z19 = virtualinvoke r58.<android.os.storage.VolumeInfo: boolean isVisibleForWrite(int)>(i0);

     label20:
        goto label27;

     label21:
        z20 = virtualinvoke r58.<android.os.storage.VolumeInfo: boolean isVisibleForRead(int)>(i0);

     label22:
        if z20 != 0 goto label26;

        if z16 == 0 goto label25;

     label23:
        r60 = virtualinvoke r58.<android.os.storage.VolumeInfo: java.io.File getPath()>();

     label24:
        if r60 == null goto label25;

        goto label26;

     label25:
        z19 = 0;

        goto label27;

     label26:
        z19 = 1;

     label27:
        if z19 != 0 goto label29;

     label28:
        goto label51;

     label29:
        if z2 == 0 goto label30;

        z21 = 0;

        goto label43;

     label30:
        if z1 != 0 goto label35;

        z21 = 1;

     label31:
        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

     label32:
        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reporting ");

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unmounted due to system locked");

        $r41 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r41);

     label33:
        goto label43;

     label34:
        $r49 := @caughtexception;

        r59 = $r49;

        goto label67;

     label35:
        i25 = virtualinvoke r58.<android.os.storage.VolumeInfo: int getType()>();

     label36:
        if i25 != 2 goto label40;

        if z4 != 0 goto label40;

        z21 = 1;

     label37:
        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reporting ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unmounted due to ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" locked");

        $r37 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r37);

     label38:
        goto label43;

     label39:
        $r48 := @caughtexception;

        r59 = $r48;

        goto label67;

     label40:
        z21 = 0;

        if z5 != 0 goto label43;

        z21 = 0;

        if z15 != 0 goto label43;

     label41:
        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reporting ");

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unmounted due to missing permissions");

        $r31 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r31);

     label42:
        z21 = 1;

     label43:
        $r64 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        r65 = virtualinvoke r58.<android.os.storage.VolumeInfo: android.os.storage.StorageVolume buildStorageVolume(android.content.Context,int,boolean)>($r64, i0, z21);

        z22 = virtualinvoke r58.<android.os.storage.VolumeInfo: boolean isPrimary()>();

     label44:
        if z22 == 0 goto label48;

     label45:
        virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r65);

     label46:
        z18 = 1;

        goto label49;

     label47:
        $r46 := @caughtexception;

        r59 = $r46;

        goto label67;

     label48:
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r65);

     label49:
        r66 = virtualinvoke r65.<android.os.storage.StorageVolume: java.lang.String getUuid()>();

     label50:
        virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>(r66);

     label51:
        i22 = i22 + 1;

        goto label11;

     label52:
        $r47 := @caughtexception;

        r59 = $r47;

        goto label67;

     label53:
        $r43 := @caughtexception;

        r59 = $r43;

        goto label67;

     label54:
        $r50 := @caughtexception;

        r59 = $r50;

        goto label67;

     label55:
        if z17 == 0 goto label62;

     label56:
        l26 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label57:
        i27 = 0;

     label58:
        $r18 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $i9 = virtualinvoke $r18.<android.util.ArrayMap: int size()>();

        if i27 >= $i9 goto label62;

        $r19 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r20 = virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i27);

        r67 = (android.os.storage.VolumeRecord) $r20;

        $r21 = r67.<android.os.storage.VolumeRecord: java.lang.String fsUuid>;

        $z9 = virtualinvoke $r6.<android.util.ArraySet: boolean contains(java.lang.Object)>($r21);

        if $z9 == 0 goto label60;

     label59:
        goto label61;

     label60:
        $l10 = r67.<android.os.storage.VolumeRecord: long lastSeenMillis>;

        $b11 = $l10 cmp 0L;

        if $b11 <= 0 goto label61;

        $l13 = r67.<android.os.storage.VolumeRecord: long lastSeenMillis>;

        $l12 = l26 - 604800000L;

        $b14 = $l13 cmp $l12;

        if $b14 >= 0 goto label61;

        $r22 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        r68 = virtualinvoke r67.<android.os.storage.VolumeRecord: android.os.storage.StorageVolume buildStorageVolume(android.content.Context)>($r22);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r68);

        $r23 = virtualinvoke r68.<android.os.storage.StorageVolume: java.lang.String getUuid()>();

        virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>($r23);

     label61:
        i27 = i27 + 1;

        goto label58;

     label62:
        exitmonitor r55;

     label63:
        if z3 == 0 goto label64;

        r69 = staticinvoke <android.os.Environment: java.io.File getDataPreloadsMediaDirectory()>();

        $r14 = new android.os.UserHandle;

        specialinvoke $r14.<android.os.UserHandle: void <init>(int)>(i0);

        $r15 = new android.os.storage.StorageVolume;

        $r16 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: java.lang.String getString(int)>(17039374);

        specialinvoke $r15.<android.os.storage.StorageVolume: void <init>(java.lang.String,java.io.File,java.io.File,java.lang.String,boolean,boolean,boolean,boolean,long,android.os.UserHandle,java.lang.String,java.lang.String)>("demo", r69, r69, $r17, 0, 0, 1, 0, 0L, $r14, "demo", "mounted_ro");

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label64:
        if z18 != 0 goto label65;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", "No primary storage defined yet; hacking together a stub");

        z23 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.vold.primary_physical", 0);

        r71 = staticinvoke <android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>();

        $r10 = new android.os.storage.StorageVolume;

        $r11 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.String getString(int)>(17039374);

        $z7 = z23 ^ 1;

        $r13 = new android.os.UserHandle;

        specialinvoke $r13.<android.os.UserHandle: void <init>(int)>(i0);

        specialinvoke $r10.<android.os.storage.StorageVolume: void <init>(java.lang.String,java.io.File,java.io.File,java.lang.String,boolean,boolean,boolean,boolean,long,android.os.UserHandle,java.lang.String,java.lang.String)>("stub_primary", r71, r71, $r12, 1, z23, $z7, 0, 0L, $r13, null, "removed");

        virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r10);

     label65:
        $i7 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r7 = newarray (android.os.storage.StorageVolume)[$i7];

        $r8 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (android.os.storage.StorageVolume[]) $r8;

        return $r9;

     label66:
        $r44 := @caughtexception;

        r59 = $r44;

     label67:
        exitmonitor r55;

     label68:
        throw r59;

     label69:
        $r51 := @caughtexception;

        r59 = $r51;

        goto label67;

     label70:
        $r42 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l21);

        throw $r42;

        catch java.lang.Throwable from label09 to label10 with label70;
        catch java.lang.Throwable from label11 to label12 with label66;
        catch java.lang.Throwable from label12 to label13 with label54;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label19 to label20 with label17;
        catch java.lang.Throwable from label21 to label22 with label54;
        catch java.lang.Throwable from label23 to label24 with label17;
        catch java.lang.Throwable from label31 to label32 with label34;
        catch java.lang.Throwable from label32 to label33 with label39;
        catch java.lang.Throwable from label35 to label36 with label53;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label41 to label42 with label39;
        catch java.lang.Throwable from label43 to label44 with label53;
        catch java.lang.Throwable from label45 to label46 with label47;
        catch java.lang.Throwable from label48 to label49 with label52;
        catch java.lang.Throwable from label49 to label50 with label52;
        catch java.lang.Throwable from label50 to label51 with label69;
        catch java.lang.Throwable from label56 to label57 with label69;
        catch java.lang.Throwable from label58 to label59 with label69;
        catch java.lang.Throwable from label60 to label61 with label69;
        catch java.lang.Throwable from label62 to label63 with label69;
        catch java.lang.Throwable from label67 to label68 with label69;
    }

    public android.os.storage.VolumeRecord[] getVolumeRecords(int)
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r5;
        android.util.ArrayMap $r2, $r3, $r4;
        int $i0, $i1, i2, i3;
        android.os.storage.VolumeRecord $r6;
        java.lang.Throwable $r7;
        android.os.storage.VolumeRecord[] r8;

        r0 := @this: com.android.server.StorageManagerService;

        i2 := @parameter0: int;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        r8 = newarray (android.os.storage.VolumeRecord)[$i0];

     label2:
        i3 = 0;

     label3:
        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i3 >= $i1 goto label5;

        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r6 = (android.os.storage.VolumeRecord) $r5;

        r8[i3] = $r6;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        exitmonitor r1;

     label6:
        return r8;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.os.storage.VolumeInfo[] getVolumes(int)
    {
        com.android.server.StorageManagerService r0;
        java.lang.Object r1, $r5;
        android.util.ArrayMap $r2, $r3, $r4;
        int $i0, $i1, i2, i3;
        android.os.storage.VolumeInfo $r6;
        java.lang.Throwable $r7;
        android.os.storage.VolumeInfo[] r8;

        r0 := @this: com.android.server.StorageManagerService;

        i2 := @parameter0: int;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        r8 = newarray (android.os.storage.VolumeInfo)[$i0];

     label2:
        i3 = 0;

     label3:
        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i3 >= $i1 goto label5;

        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mVolumes>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r6 = (android.os.storage.VolumeInfo) $r5;

        r8[i3] = $r6;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        exitmonitor r1;

     label6:
        return r8;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isConvertibleToFBE() throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        boolean z0;
        android.content.Context $r2;
        android.os.IVold $r3;
        java.lang.Exception $r4;

        r0 := @this: com.android.server.StorageManagerService;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        z0 = interfaceinvoke $r3.<android.os.IVold: boolean isConvertibleToFbe()>();

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean isObbMounted(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.util.Map r1, $r3;
        boolean z0;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.StorageManagerService;

        r5 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "rawPath cannot be null");

        r1 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap>;

        z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isUserKeyUnlocked(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.StorageManagerService$WatchedLockedUsers $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$WatchedLockedUsers mLocalUnlockedUsers>;

        z0 = virtualinvoke $r3.<com.android.server.StorageManagerService$WatchedLockedUsers: boolean contains(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$connectStoraged$3$StorageManagerService()
    {
        com.android.server.StorageManagerService r0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void connectStoraged()>();

        return;
    }

    public void lambda$connectVold$4$StorageManagerService()
    {
        com.android.server.StorageManagerService r0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void connectVold()>();

        return;
    }

    public void lambda$decryptStorage$6$StorageManagerService()
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.StorageManagerService;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void fdeRestart()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void lambda$handleSystemReady$0$StorageManagerService(android.provider.DeviceConfig$Properties)
    {
        com.android.server.StorageManagerService r0;
        android.provider.DeviceConfig$Properties r1;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.provider.DeviceConfig$Properties;

        specialinvoke r0.<com.android.server.StorageManagerService: void refreshIsolatedStorageSettings()>();

        specialinvoke r0.<com.android.server.StorageManagerService: void refreshFuseSettings()>();

        return;
    }

    public void lambda$onVolumeStateChangedLocked$2$StorageManagerService(android.os.storage.VolumeInfo, int)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.VolumeInfo r1;
        int i0, $i1, i2;
        java.lang.Object $r2;
        android.app.ActivityManagerInternal $r3;
        java.lang.Throwable $r4;
        java.util.Map r5;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        i0 := @parameter1: int;

        i2 = 0;

     label1:
        r5 = null;

        if i2 >= 5 goto label5;

     label2:
        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r3 = (android.app.ActivityManagerInternal) $r2;

        $i1 = virtualinvoke r1.<android.os.storage.VolumeInfo: int getMountUserId()>();

        r5 = virtualinvoke $r3.<android.app.ActivityManagerInternal: java.util.Map getProcessesWithPendingBindMounts(int)>($i1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", "Some processes are starting, retry");

        staticinvoke <android.os.SystemClock: void sleep(long)>(100L);

        i2 = i2 + 1;

        goto label1;

     label5:
        if r5 == null goto label6;

        specialinvoke r0.<com.android.server.StorageManagerService: void remountAppStorageDirs(java.util.Map,int)>(r5, i0);

        goto label7;

     label6:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("StorageManagerService", "Not able to getStorageNotOptimizedProcesses() after 5 retries");

     label7:
        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
    }

    public void lambda$resetIfBootedAndConnected$1$StorageManagerService()
    {
        com.android.server.StorageManagerService r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        return;
    }

    public void lambda$setDebugFlags$5$StorageManagerService()
    {
        com.android.server.StorageManagerService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.PowerManager $r3;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r3 = (android.os.PowerManager) $r2;

        virtualinvoke $r3.<android.os.PowerManager: void reboot(java.lang.String)>(null);

        return;
    }

    public long lastMaintenance()
    {
        com.android.server.StorageManagerService r0;
        long $l0;

        r0 := @this: com.android.server.StorageManagerService;

        $l0 = r0.<com.android.server.StorageManagerService: long mLastMaintenance>;

        return $l0;
    }

    public void lockUserKey(int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        java.lang.Object r1;
        android.os.IVold $r2;
        com.android.server.StorageManagerService$WatchedLockedUsers $r3;
        java.lang.Throwable $r4;
        java.lang.Exception $r5;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void lockUserKey(int)>(i0);

     label2:
        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label3:
        $r3 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$WatchedLockedUsers mLocalUnlockedUsers>;

        virtualinvoke $r3.<com.android.server.StorageManagerService$WatchedLockedUsers: void remove(int)>(i0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

     label8:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r5);

        return;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void mkdirs(java.lang.String, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, $i2;
        java.io.File r1, r70;
        java.lang.StringBuilder $r2, $r6, $r15, $r22, $r32, $r41, $r44, $r50, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r9, $r47, $r55, $r63;
        java.lang.String $r10, $r20, $r21, $r28, $r29, $r30, $r38, $r39, $r40, $r48, $r56, $r64, r65, r66, r68, r71, r72;
        android.content.Context $r11;
        java.lang.Object $r12;
        android.app.AppOpsManager $r13;
        java.util.regex.Pattern $r14;
        java.lang.SecurityException $r19, $r27, $r37;
        android.os.IVold $r31;
        android.os.RemoteException $r49;
        java.lang.Throwable $r57;
        java.util.regex.Matcher r74;

        r0 := @this: com.android.server.StorageManagerService;

        r65 := @parameter0: java.lang.String;

        r66 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sys.user.");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".ce_available");

        r68 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<com.android.server.StorageManagerService: boolean isUserKeyUnlocked(int)>(i1);

        if $z0 == 0 goto label14;

        if i1 != 0 goto label02;

        $z5 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>(r68, 0);

        if $z5 == 0 goto label01;

        goto label02;

     label01:
        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare ");

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        $r47 = new java.lang.IllegalStateException;

        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r48);

        throw $r47;

     label02:
        $r11 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r13 = (android.app.AppOpsManager) $r12;

        virtualinvoke $r13.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r65);

     label03:
        r70 = new java.io.File;

        specialinvoke r70.<java.io.File: void <init>(java.lang.String)>(r66);

        r1 = virtualinvoke r70.<java.io.File: java.io.File getCanonicalFile()>();

     label04:
        r71 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        r72 = r71;

        $z1 = virtualinvoke r71.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 != 0 goto label05;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r72 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $r14 = <com.android.server.StorageManagerService: java.util.regex.Pattern KNOWN_APP_DIR_PATHS>;

        r74 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r72);

        $z2 = virtualinvoke r74.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label12;

        $r21 = virtualinvoke r74.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r65);

        if $z3 == 0 goto label11;

        $r29 = virtualinvoke r74.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if $r29 == null goto label06;

        $r39 = virtualinvoke r74.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r40 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $z4 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r40);

        if $z4 == 0 goto label07;

     label06:
        $r30 = virtualinvoke r74.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if $r30 != null goto label08;

        $i2 = r0.<com.android.server.StorageManagerService: int mCurrentUserId>;

        if i1 != $i2 goto label07;

        goto label08;

     label07:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mkdirs path: ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match calling user id ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r37 = new java.lang.SecurityException;

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.SecurityException: void <init>(java.lang.String)>($r38);

        throw $r37;

     label08:
        $r31 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r31.<android.os.IVold: void setupAppDir(java.lang.String,int)>(r72, i0);

     label09:
        return;

     label10:
        $r49 := @caughtexception;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare ");

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r55 = new java.lang.IllegalStateException;

        $r56 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r56);

        throw $r55;

     label11:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mkdirs path: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not contain calling package ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        $r27 = new java.lang.SecurityException;

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.SecurityException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label12:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mkdirs path: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a known app path.");

        $r19 = new java.lang.SecurityException;

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label13:
        $r57 := @caughtexception;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve ");

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r57);

        $r63 = new java.lang.IllegalStateException;

        $r64 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r63.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r64);

        throw $r63;

     label14:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch java.io.IOException from label03 to label04 with label13;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public void monitor()
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.StorageManagerService;

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void monitor()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void mount(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r6;
        android.os.storage.VolumeInfo r8;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        r8 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeInfo findVolumeByIdOrThrow(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<com.android.server.StorageManagerService: boolean isMountDisallowed(android.os.storage.VolumeInfo)>(r8);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.StorageManagerService: void mount(android.os.storage.VolumeInfo)>(r8);

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mounting ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restricted by policy");

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public void mountObb(java.lang.String, java.lang.String, java.lang.String, android.os.storage.IObbActionListener, int, android.content.res.ObbInfo)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, r11, r12;
        android.os.storage.IObbActionListener r2;
        int i0, i1;
        android.content.res.ObbInfo r3;
        com.android.server.StorageManagerService$MountObbAction $r8;
        com.android.server.StorageManagerService$ObbState $r9;
        android.os.Message $r10;
        com.android.server.StorageManagerService$ObbActionHandler r14;

        r0 := @this: com.android.server.StorageManagerService;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.storage.IObbActionListener;

        i0 := @parameter4: int;

        r3 := @parameter5: android.content.res.ObbInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "rawPath cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "canonicalPath cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "token cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "obbIfno cannot be null");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = new com.android.server.StorageManagerService$MountObbAction;

        $r9 = new com.android.server.StorageManagerService$ObbState;

        specialinvoke $r9.<com.android.server.StorageManagerService$ObbState: void <init>(com.android.server.StorageManagerService,java.lang.String,java.lang.String,int,android.os.storage.IObbActionListener,int,java.lang.String)>(r0, r11, r12, i1, r2, i0, null);

        specialinvoke $r8.<com.android.server.StorageManagerService$MountObbAction: void <init>(com.android.server.StorageManagerService,com.android.server.StorageManagerService$ObbState,java.lang.String,int,android.content.res.ObbInfo)>(r0, $r9, r1, i1, r3);

        r14 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$ObbActionHandler mObbActionHandler>;

        $r10 = virtualinvoke r14.<com.android.server.StorageManagerService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r8);

        virtualinvoke r14.<com.android.server.StorageManagerService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r10);

        return;
    }

    public com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, $i3;
        java.lang.Object r1;
        com.android.internal.os.AppFuseMount r2;
        com.android.server.StorageManagerService$AppFuseMountScope r3;
        com.android.server.storage.AppFuseBridge $r4, $r6, r11, r13;
        android.os.ParcelFileDescriptor $r5;
        com.android.internal.os.FuseUnavailableMountException $r7;
        java.lang.Throwable $r8;
        com.android.server.NativeDaemonConnectorException $r9;
        java.lang.IllegalArgumentException $r10;
        boolean z0;
        java.lang.Thread r12;

        r0 := @this: com.android.server.StorageManagerService;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", "mountProxyFileDescriptorBridge");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label01:
        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mAppFuseLock>;

        entermonitor r1;

        z0 = 0;

     label02:
        $r4 = r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge>;

        if $r4 != null goto label04;

        r11 = new com.android.server.storage.AppFuseBridge;

        specialinvoke r11.<com.android.server.storage.AppFuseBridge: void <init>()>();

        r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge> = r11;

        r12 = new java.lang.Thread;

        $r6 = r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge>;

        specialinvoke r12.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r6, "AppFuseBridge");

        virtualinvoke r12.<java.lang.Thread: void start()>();

     label03:
        z0 = 1;

     label04:
        i1 = r0.<com.android.server.StorageManagerService: int mNextAppFuseName>;

        $i3 = i1 + 1;

        r0.<com.android.server.StorageManagerService: int mNextAppFuseName> = $i3;

     label05:
        r2 = new com.android.internal.os.AppFuseMount;

        r13 = r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge>;

        r3 = new com.android.server.StorageManagerService$AppFuseMountScope;

        specialinvoke r3.<com.android.server.StorageManagerService$AppFuseMountScope: void <init>(com.android.server.StorageManagerService,int,int)>(r0, i0, i1);

        $r5 = virtualinvoke r13.<com.android.server.storage.AppFuseBridge: android.os.ParcelFileDescriptor addBridge(com.android.server.storage.AppFuseBridge$MountScope)>(r3);

        specialinvoke r2.<com.android.internal.os.AppFuseMount: void <init>(int,android.os.ParcelFileDescriptor)>(i1, $r5);

     label06:
        exitmonitor r1;

     label07:
        return r2;

     label08:
        $r7 := @caughtexception;

        if z0 == 0 goto label12;

     label09:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "", $r7);

     label10:
        exitmonitor r1;

     label11:
        return null;

     label12:
        r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge> = null;

     label13:
        exitmonitor r1;

     label14:
        goto label01;

     label15:
        $r9 := @caughtexception;

     label16:
        $r10 = virtualinvoke $r9.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r10;

     label17:
        $r8 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch com.android.server.NativeDaemonConnectorException from label04 to label05 with label15;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch com.android.internal.os.FuseUnavailableMountException from label05 to label06 with label08;
        catch com.android.server.NativeDaemonConnectorException from label05 to label06 with label15;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch com.android.server.NativeDaemonConnectorException from label09 to label10 with label15;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch com.android.server.NativeDaemonConnectorException from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public boolean needsCheckpoint() throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold $r1;
        boolean $z0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        $r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $z0 = interfaceinvoke $r1.<android.os.IVold: boolean needsCheckpoint()>();

        return $z0;
    }

    public void onAwakeStateChanged(boolean)
    {
        com.android.server.StorageManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.StorageManagerService;

        z0 := @parameter0: boolean;

        return;
    }

    public void onDaemonConnected()
    {
        com.android.server.StorageManagerService r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.StorageManagerService;

        r0.<com.android.server.StorageManagerService: boolean mDaemonConnected> = 1;

        $r1 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onKeyguardStateChanged(boolean)
    {
        com.android.server.StorageManagerService r0;
        android.content.Context $r2;
        java.lang.Object $r3;
        int $i0;
        android.app.KeyguardManager $r4;
        boolean $z0, z1, z2, $z3;
        java.lang.Exception $r5;
        android.os.IVold $r6;

        r0 := @this: com.android.server.StorageManagerService;

        z1 := @parameter0: boolean;

        if z1 == 0 goto label1;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/KeyguardManager;");

        $r4 = (android.app.KeyguardManager) $r3;

        $i0 = r0.<com.android.server.StorageManagerService: int mCurrentUserId>;

        $z0 = virtualinvoke $r4.<android.app.KeyguardManager: boolean isDeviceSecure(int)>($i0);

        if $z0 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        r0.<com.android.server.StorageManagerService: boolean mSecureKeyguardShowing> = z2;

     label3:
        $r6 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $z3 = r0.<com.android.server.StorageManagerService: boolean mSecureKeyguardShowing>;

        interfaceinvoke $r6.<android.os.IVold: void onSecureKeyguardStateChanged(boolean)>($z3);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r5);

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public android.os.ParcelFileDescriptor openProxyFileDescriptor(int, int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, i2, $i4;
        com.android.server.storage.AppFuseBridge $r1, $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.Object r5;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("StorageManagerService", "mountProxyFileDescriptor");

     label1:
        r5 = r0.<com.android.server.StorageManagerService: java.lang.Object mAppFuseLock>;

        entermonitor r5;

     label2:
        $r1 = r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge>;

        if $r1 != null goto label4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StorageManagerService", "FuseBridge has not been created");

        exitmonitor r5;

     label3:
        return null;

     label4:
        $r2 = r0.<com.android.server.StorageManagerService: com.android.server.storage.AppFuseBridge mAppFuseBridge>;

        $i4 = i2 & 805306368;

        r6 = virtualinvoke $r2.<com.android.server.storage.AppFuseBridge: android.os.ParcelFileDescriptor openFile(int,int,int)>(i0, i1, $i4);

        exitmonitor r5;

     label5:
        return r6;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r5;

     label8:
        throw $r3;

     label9:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManagerService", "The mount point has already been invalid", $r4);

        return null;

        catch com.android.internal.os.FuseUnavailableMountException from label1 to label2 with label9;
        catch java.lang.InterruptedException from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch com.android.internal.os.FuseUnavailableMountException from label8 to label9 with label9;
        catch java.lang.InterruptedException from label8 to label9 with label9;
    }

    public void partitionMixed(java.lang.String, int)
    {
        com.android.server.StorageManagerService r0;
        int i0;
        java.util.concurrent.CountDownLatch r1;
        android.os.IVold $r2;
        java.lang.Exception $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.StorageManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.StorageManagerService: void enforceAdminUser()>();

        r1 = specialinvoke r0.<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>(r4);

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void partition(java.lang.String,int,int)>(r4, 2, i0);

        specialinvoke r0.<com.android.server.StorageManagerService: void waitForLatch(java.util.concurrent.CountDownLatch,java.lang.String,long)>(r1, "partitionMixed", 180000L);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void partitionPrivate(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.util.concurrent.CountDownLatch r1;
        android.os.IVold $r2;
        java.lang.Exception $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.StorageManagerService;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.StorageManagerService: void enforceAdminUser()>();

        r1 = specialinvoke r0.<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>(r4);

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void partition(java.lang.String,int,int)>(r4, 1, -1);

        specialinvoke r0.<com.android.server.StorageManagerService: void waitForLatch(java.util.concurrent.CountDownLatch,java.lang.String,long)>(r1, "partitionPrivate", 180000L);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void partitionPublic(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.util.concurrent.CountDownLatch r1;
        android.os.IVold $r2;
        java.lang.Exception $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.StorageManagerService;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        r1 = specialinvoke r0.<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>(r4);

     label1:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void partition(java.lang.String,int,int)>(r4, 0, -1);

        specialinvoke r0.<com.android.server.StorageManagerService: void waitForLatch(java.util.concurrent.CountDownLatch,java.lang.String,long)>(r1, "partitionPublic", 180000L);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void prepareUserStorage(java.lang.String, int, int, int)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

        specialinvoke r0.<com.android.server.StorageManagerService: void prepareUserStorageInternal(java.lang.String,int,int,int)>(r1, i0, i1, i2);

        return;
    }

    public void registerListener(android.os.storage.IStorageEventListener)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.IStorageEventListener r1;
        com.android.server.StorageManagerService$Callbacks $r2;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.IStorageEventListener;

        $r2 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        virtualinvoke $r2.<com.android.server.StorageManagerService$Callbacks: void register(android.os.storage.IStorageEventListener)>(r1);

        return;
    }

    void runIdleMaint(java.lang.Runnable)
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold r1;
        com.android.server.StorageManagerService$11 r2;
        boolean $z0, $z1;
        java.lang.Exception $r3;
        java.lang.Runnable r4;

        r0 := @this: com.android.server.StorageManagerService;

        r4 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

     label1:
        $z0 = virtualinvoke r0.<com.android.server.StorageManagerService: boolean needsCheckpoint()>();

        if $z0 == 0 goto label5;

        $z1 = specialinvoke r0.<com.android.server.StorageManagerService: boolean supportsBlockCheckpoint()>();

        if $z1 != 0 goto label3;

     label2:
        goto label5;

     label3:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", "Skipping idle maintenance - block based checkpoint in progress");

     label4:
        goto label6;

     label5:
        r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r2 = new com.android.server.StorageManagerService$11;

        specialinvoke r2.<com.android.server.StorageManagerService$11: void <init>(com.android.server.StorageManagerService,java.lang.Runnable)>(r0, r4);

        interfaceinvoke r1.<android.os.IVold: void runIdleMaint(android.os.IVoldTaskListener)>(r2);

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r3);

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void runIdleMaintenance()
    {
        com.android.server.StorageManagerService r0;

        r0 := @this: com.android.server.StorageManagerService;

        virtualinvoke r0.<com.android.server.StorageManagerService: void runIdleMaint(java.lang.Runnable)>(null);

        return;
    }

    void runIdleMaintenance(java.lang.Runnable)
    {
        com.android.server.StorageManagerService r0;
        java.lang.Runnable r1;
        android.os.Handler r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r3 = virtualinvoke r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r1);

        virtualinvoke r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void runMaintenance()
    {
        com.android.server.StorageManagerService r0;

        r0 := @this: com.android.server.StorageManagerService;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        virtualinvoke r0.<com.android.server.StorageManagerService: void runIdleMaintenance(java.lang.Runnable)>(null);

        return;
    }

    public void setDebugFlags(int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        com.android.server._$$Lambda$StorageManagerService$BseoOaqQft6Zl5fkxkPPeceEDjQ r1;
        java.lang.String $r2, $r8, r18, r22;
        android.os.Handler $r3, $r19, $r23, r29;
        android.os.Message $r4, $r20, $r24;
        boolean $z3, $z4, z5, z6;
        java.lang.IllegalStateException $r5, $r7;
        com.android.internal.widget.LockPatternUtils $r6;
        android.content.Context $r9, $r27;
        java.lang.Object $r10;
        android.os.PowerManager $r11;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16;
        long l15, l16, l17, l18, l20;
        byte b19;
        android.content.ContentResolver $r28;

        r0 := @this: com.android.server.StorageManagerService;

        i14 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        $i1 = i0 & 4;

        if $i1 == 0 goto label07;

        $z3 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()>();

        if $z3 != 0 goto label06;

        $r6 = r0.<com.android.server.StorageManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z4 = virtualinvoke $r6.<com.android.internal.widget.LockPatternUtils: boolean isCredentialRequiredToDecrypt(boolean)>(0);

        if $z4 != 0 goto label05;

        l15 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $i13 = i14 & 4;

        if $i13 == 0 goto label01;

        z5 = 1;

        goto label02;

     label01:
        z5 = 0;

     label02:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z5);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.emulate_fbe", $r8);

        $r9 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r11 = (android.os.PowerManager) $r10;

        virtualinvoke $r11.<android.os.PowerManager: void reboot(java.lang.String)>(null);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

        goto label07;

     label04:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

        throw $r16;

     label05:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Emulation requires disabling \'Secure start-up\' in Settings > Security");

        throw $r7;

     label06:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Emulation not supported on device with native FBE");

        throw $r5;

     label07:
        $i2 = i0 & 3;

        if $i2 == 0 goto label14;

        $i11 = i14 & 1;

        if $i11 == 0 goto label08;

        r18 = "force_on";

        goto label10;

     label08:
        $i12 = i14 & 2;

        if $i12 == 0 goto label09;

        r18 = "force_off";

        goto label10;

     label09:
        r18 = "";

     label10:
        l16 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label11:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.adoptable", r18);

        $r19 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r20 = virtualinvoke $r19.<android.os.Handler: android.os.Message obtainMessage(int)>(10);

        virtualinvoke $r20.<android.os.Message: void sendToTarget()>();

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l16);

        goto label14;

     label13:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l16);

        throw $r12;

     label14:
        $i3 = i0 & 24;

        if $i3 == 0 goto label21;

        $i9 = i14 & 8;

        if $i9 == 0 goto label15;

        r22 = "force_on";

        goto label17;

     label15:
        $i10 = i14 & 16;

        if $i10 == 0 goto label16;

        r22 = "force_off";

        goto label17;

     label16:
        r22 = "";

     label17:
        l17 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label18:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.sdcardfs", r22);

        $r23 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r24 = virtualinvoke $r23.<android.os.Handler: android.os.Message obtainMessage(int)>(10);

        virtualinvoke $r24.<android.os.Message: void sendToTarget()>();

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l17);

        goto label21;

     label20:
        $r15 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l17);

        throw $r15;

     label21:
        $i4 = i0 & 32;

        if $i4 == 0 goto label26;

        z6 = 0;

        $i8 = i14 & 32;

        if $i8 == 0 goto label22;

        z6 = 1;

     label22:
        l18 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label23:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z6);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.virtual_disk", $r2);

        $r3 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(10);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

     label24:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l18);

        goto label26;

     label25:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l18);

        throw $r14;

     label26:
        $i5 = i0 & 192;

        if $i5 == 0 goto label33;

        $i6 = i14 & 64;

        if $i6 == 0 goto label27;

        b19 = 1;

        goto label29;

     label27:
        $i7 = i14 & 128;

        if $i7 == 0 goto label28;

        b19 = -1;

        goto label29;

     label28:
        b19 = 0;

     label29:
        l20 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label30:
        $r27 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r28 = virtualinvoke $r27.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r28, "isolated_storage_local", b19);

        specialinvoke r0.<com.android.server.StorageManagerService: void refreshIsolatedStorageSettings()>();

        r29 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        r1 = new com.android.server._$$Lambda$StorageManagerService$BseoOaqQft6Zl5fkxkPPeceEDjQ;

        specialinvoke r1.<com.android.server._$$Lambda$StorageManagerService$BseoOaqQft6Zl5fkxkPPeceEDjQ: void <init>(com.android.server.StorageManagerService)>(r0);

        virtualinvoke r29.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

     label31:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l20);

        goto label33;

     label32:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l20);

        throw $r13;

     label33:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label30 to label31 with label32;
    }

    public void setField(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, r5;
        android.content.Context $r2;
        boolean $z0;
        android.os.IVold $r3;
        java.lang.Exception $r4;

        r0 := @this: com.android.server.StorageManagerService;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isBlockEncrypted()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r3.<android.os.IVold: void fdeSetField(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r4);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setPrimaryStorageUuid(java.lang.String, android.content.pm.IPackageMoveObserver)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String $r1, $r4, $r10, $r13, $r16, $r18, $r20, $r24, r27, r38, r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.pm.IPackageMoveObserver $r5, r28;
        android.content.Context $r6;
        java.lang.Object $r7, $r21, r29;
        android.os.UserManager $r8;
        java.util.List $r9;
        android.os.Handler $r11;
        android.os.Message $r12;
        int $i3, $i4;
        java.lang.Throwable $r25;
        java.lang.Exception $r26;
        java.util.Iterator r30;
        android.content.pm.UserInfo r31;
        java.lang.StringBuilder r32, r35, r36, r44;
        android.os.storage.VolumeInfo r33, r34;
        android.os.IVold r37;
        com.android.server.StorageManagerService$13 r40;
        java.lang.IllegalStateException r42;
        java.lang.IllegalArgumentException r43;

        r0 := @this: com.android.server.StorageManagerService;

        r27 := @parameter0: java.lang.String;

        r28 := @parameter1: android.content.pm.IPackageMoveObserver;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        r29 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r29;

     label01:
        $r1 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r1, r27);

        if $z0 != 0 goto label22;

        $r5 = r0.<com.android.server.StorageManagerService: android.content.pm.IPackageMoveObserver mMoveCallback>;

        if $r5 != null goto label21;

        r0.<com.android.server.StorageManagerService: android.content.pm.IPackageMoveObserver mMoveCallback> = r28;

        r0.<com.android.server.StorageManagerService: java.lang.String mMoveTargetUuid> = r27;

        $r6 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r8 = (android.os.UserManager) $r7;

        $r9 = virtualinvoke $r8.<android.os.UserManager: java.util.List getUsers()>();

        r30 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r21 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (android.content.pm.UserInfo) $r21;

        $z4 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        if $z4 == 0 goto label04;

        $i3 = r31.<android.content.pm.UserInfo: int id>;

        $z5 = virtualinvoke r0.<com.android.server.StorageManagerService: boolean isUserKeyUnlocked(int)>($i3);

        if $z5 != 0 goto label04;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failing move due to locked user ");

        $i4 = r31.<android.content.pm.UserInfo: int id>;

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r24 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r24);

        specialinvoke r0.<com.android.server.StorageManagerService: void onMoveStatusLocked(int)>(-10);

        exitmonitor r29;

     label03:
        return;

     label04:
        goto label02;

     label05:
        $r10 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", $r10);

        if $z2 != 0 goto label19;

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", r27);

        if $z3 == 0 goto label07;

     label06:
        goto label19;

     label07:
        $r13 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        r33 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeInfo findStorageForUuid(java.lang.String)>($r13);

        r34 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeInfo findStorageForUuid(java.lang.String)>(r27);

     label08:
        if r33 != null goto label11;

     label09:
        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failing move due to missing from volume ");

        $r18 = r0.<com.android.server.StorageManagerService: java.lang.String mPrimaryStorageUuid>;

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r20);

        specialinvoke r0.<com.android.server.StorageManagerService: void onMoveStatusLocked(int)>(-6);

        exitmonitor r29;

     label10:
        return;

     label11:
        if r34 != null goto label14;

     label12:
        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failing move due to missing to volume ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r16 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r16);

        specialinvoke r0.<com.android.server.StorageManagerService: void onMoveStatusLocked(int)>(-6);

        exitmonitor r29;

     label13:
        return;

     label14:
        exitmonitor r29;

     label15:
        r37 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        r38 = r33.<android.os.storage.VolumeInfo: java.lang.String id>;

        r39 = r34.<android.os.storage.VolumeInfo: java.lang.String id>;

        r40 = new com.android.server.StorageManagerService$13;

        specialinvoke r40.<com.android.server.StorageManagerService$13: void <init>(com.android.server.StorageManagerService)>(r0);

        interfaceinvoke r37.<android.os.IVold: void moveStorage(java.lang.String,java.lang.String,android.os.IVoldTaskListener)>(r38, r39, r40);

     label16:
        goto label18;

     label17:
        $r26 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r26);

     label18:
        return;

     label19:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", "Skipping move to/from primary physical");

        specialinvoke r0.<com.android.server.StorageManagerService: void onMoveStatusLocked(int)>(82);

        specialinvoke r0.<com.android.server.StorageManagerService: void onMoveStatusLocked(int)>(-100);

        $r11 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r12 = virtualinvoke $r11.<android.os.Handler: android.os.Message obtainMessage(int)>(10);

        virtualinvoke $r12.<android.os.Message: void sendToTarget()>();

        exitmonitor r29;

     label20:
        return;

     label21:
        r42 = new java.lang.IllegalStateException;

        specialinvoke r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Move already in progress");

        throw r42;

     label22:
        r43 = new java.lang.IllegalArgumentException;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Primary storage already at ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r4 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r43;

     label23:
        $r25 := @caughtexception;

     label24:
        exitmonitor r29;

     label25:
        throw $r25;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    public void setVolumeNickname(java.lang.String, java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1, r8;
        java.lang.Object r2, $r5;
        android.util.ArrayMap $r4;
        com.android.server.StorageManagerService$Callbacks $r6;
        java.lang.Throwable $r7;
        android.os.storage.VolumeRecord r9;

        r0 := @this: com.android.server.StorageManagerService;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        r2 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (android.os.storage.VolumeRecord) $r5;

        r9.<android.os.storage.VolumeRecord: java.lang.String nickname> = r1;

        $r6 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$5000(com.android.server.StorageManagerService$Callbacks,android.os.storage.VolumeRecord)>($r6, r9);

        specialinvoke r0.<com.android.server.StorageManagerService: void writeSettingsLocked()>();

        exitmonitor r2;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setVolumeUserFlags(java.lang.String, int, int)
    {
        com.android.server.StorageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r3;
        com.android.server.StorageManagerService$Callbacks $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        android.os.storage.VolumeRecord r8;

        r0 := @this: com.android.server.StorageManagerService;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        r1 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.StorageManagerService: android.util.ArrayMap mRecords>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (android.os.storage.VolumeRecord) $r4;

        $i2 = r8.<android.os.storage.VolumeRecord: int userFlags>;

        $i4 = $i2 & i1;

        $i3 = i0 & i1;

        $i5 = $i4 | $i3;

        r8.<android.os.storage.VolumeRecord: int userFlags> = $i5;

        $r5 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        staticinvoke <com.android.server.StorageManagerService$Callbacks: void access$5000(com.android.server.StorageManagerService$Callbacks,android.os.storage.VolumeRecord)>($r5, r8);

        specialinvoke r0.<com.android.server.StorageManagerService: void writeSettingsLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void shutdown(android.os.storage.IStorageShutdownObserver)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.IStorageShutdownObserver r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.IStorageShutdownObserver;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.SHUTDOWN");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StorageManagerService", "Shutting down");

        $r2 = r0.<com.android.server.StorageManagerService: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void startCheckpoint(int) throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        java.lang.SecurityException $r1;
        android.os.IVold $r2;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i1 == 1000 goto label2;

        if i1 == 0 goto label2;

        if i1 != 2000 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("no permission to start filesystem checkpoint");

        throw $r1;

     label2:
        $r2 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r2.<android.os.IVold: void startCheckpoint(int)>(i0);

        return;
    }

    public boolean supportsCheckpoint() throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        android.os.IVold $r1;
        boolean $z0;

        r0 := @this: com.android.server.StorageManagerService;

        $r1 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $z0 = interfaceinvoke $r1.<android.os.IVold: boolean supportsCheckpoint()>();

        return $z0;
    }

    public void unlockUserKey(int, int, byte[], byte[])
    {
        com.android.server.StorageManagerService r0;
        int i0, i1;
        boolean z0, z2, z3;
        java.lang.StringBuilder $r2;
        java.lang.String $r11, $r14, $r15;
        com.android.server.StorageManagerService$WatchedLockedUsers $r12;
        android.os.IVold $r13;
        java.lang.Throwable $r16;
        java.lang.Exception $r17;
        byte[] r18, r19;
        java.lang.Object r21;

        r0 := @this: com.android.server.StorageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r18 := @parameter2: byte[];

        r19 := @parameter3: byte[];

        z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unlockUserKey: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isFileEncryptedNativeOrEmulated: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hasToken: ");

        if r18 == null goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hasSecret: ");

        if r19 == null goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManagerService", $r11);

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.STORAGE_INTERNAL");

        if z0 == 0 goto label08;

     label05:
        $r13 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        $r14 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(r18);

        $r15 = specialinvoke r0.<com.android.server.StorageManagerService: java.lang.String encodeBytes(byte[])>(r19);

        interfaceinvoke $r13.<android.os.IVold: void unlockUserKey(int,int,java.lang.String,java.lang.String)>(i0, i1, $r14, $r15);

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r17);

        return;

     label08:
        r21 = r0.<com.android.server.StorageManagerService: java.lang.Object mLock>;

        entermonitor r21;

     label09:
        $r12 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$WatchedLockedUsers mLocalUnlockedUsers>;

        virtualinvoke $r12.<com.android.server.StorageManagerService$WatchedLockedUsers: void append(int)>(i0);

        exitmonitor r21;

     label10:
        return;

     label11:
        $r16 := @caughtexception;

     label12:
        exitmonitor r21;

     label13:
        throw $r16;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void unmount(java.lang.String)
    {
        com.android.server.StorageManagerService r0;
        java.lang.String r1;
        android.os.storage.VolumeInfo $r2;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.StorageManagerService: void enforcePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        $r2 = specialinvoke r0.<com.android.server.StorageManagerService: android.os.storage.VolumeInfo findVolumeByIdOrThrow(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.StorageManagerService: void unmount(android.os.storage.VolumeInfo)>($r2);

        return;
    }

    public void unmountObb(java.lang.String, boolean, android.os.storage.IObbActionListener, int)
    {
        com.android.server.StorageManagerService r0;
        boolean z0;
        int i0, i1;
        java.util.Map r1, $r4;
        com.android.server.StorageManagerService$ObbState r2, $r11;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9, $r12, $r13, r16;
        com.android.server.StorageManagerService$UnmountObbAction $r10;
        android.os.Message $r14;
        java.lang.Throwable $r15;
        android.os.storage.IObbActionListener r17;
        com.android.server.StorageManagerService$ObbActionHandler r19;

        r0 := @this: com.android.server.StorageManagerService;

        r16 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r17 := @parameter2: android.os.storage.IObbActionListener;

        i0 := @parameter3: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "rawPath cannot be null");

        r1 = r0.<com.android.server.StorageManagerService: java.util.Map mObbMounts>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.StorageManagerService: java.util.Map mObbPathToStateMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);

        r2 = (com.android.server.StorageManagerService$ObbState) $r5;

        exitmonitor r1;

     label2:
        if r2 == null goto label3;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = new com.android.server.StorageManagerService$UnmountObbAction;

        $r11 = new com.android.server.StorageManagerService$ObbState;

        $r13 = r2.<com.android.server.StorageManagerService$ObbState: java.lang.String canonicalPath>;

        $r12 = r2.<com.android.server.StorageManagerService$ObbState: java.lang.String volId>;

        specialinvoke $r11.<com.android.server.StorageManagerService$ObbState: void <init>(com.android.server.StorageManagerService,java.lang.String,java.lang.String,int,android.os.storage.IObbActionListener,int,java.lang.String)>(r0, r16, $r13, i1, r17, i0, $r12);

        specialinvoke $r10.<com.android.server.StorageManagerService$UnmountObbAction: void <init>(com.android.server.StorageManagerService,com.android.server.StorageManagerService$ObbState,boolean)>(r0, $r11, z0);

        r19 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$ObbActionHandler mObbActionHandler>;

        $r14 = virtualinvoke r19.<com.android.server.StorageManagerService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r10);

        virtualinvoke r19.<com.android.server.StorageManagerService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r14);

        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown OBB mount at ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManagerService", $r9);

     label4:
        return;

     label5:
        $r15 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void unregisterListener(android.os.storage.IStorageEventListener)
    {
        com.android.server.StorageManagerService r0;
        android.os.storage.IStorageEventListener r1;
        com.android.server.StorageManagerService$Callbacks $r2;

        r0 := @this: com.android.server.StorageManagerService;

        r1 := @parameter0: android.os.storage.IStorageEventListener;

        $r2 = r0.<com.android.server.StorageManagerService: com.android.server.StorageManagerService$Callbacks mCallbacks>;

        virtualinvoke $r2.<com.android.server.StorageManagerService$Callbacks: void unregister(android.os.storage.IStorageEventListener)>(r1);

        return;
    }

    public int verifyEncryptionPassword(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.StorageManagerService r0;
        int $i0;
        java.lang.SecurityException $r1;
        android.content.Context $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        android.os.IVold $r4;
        java.lang.Exception $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.StorageManagerService;

        r6 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label5;

        $r2 = r0.<com.android.server.StorageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z0 != 0 goto label4;

     label1:
        $r4 = r0.<com.android.server.StorageManagerService: android.os.IVold mVold>;

        interfaceinvoke $r4.<android.os.IVold: void fdeVerifyPassword(java.lang.String)>(r6);

     label2:
        return 0;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("StorageManagerService", $r5);

        return -1;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r3;

     label5:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("no permission to access the crypt keeper");

        throw $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
