public final class com.android.server.SystemServer extends java.lang.Object
{
    private static final java.lang.String ACCESSIBILITY_MANAGER_SERVICE_CLASS;
    private static final java.lang.String ACCOUNT_SERVICE_CLASS;
    private static final java.lang.String ADB_SERVICE_CLASS;
    private static final java.lang.String APPWIDGET_SERVICE_CLASS;
    private static final java.lang.String APP_PREDICTION_MANAGER_SERVICE_CLASS;
    private static final java.lang.String AUTO_FILL_MANAGER_SERVICE_CLASS;
    private static final java.lang.String BACKUP_MANAGER_SERVICE_CLASS;
    private static final java.lang.String BLOB_STORE_MANAGER_SERVICE_CLASS;
    private static final java.lang.String BLOCK_MAP_FILE;
    private static final java.lang.String CAR_SERVICE_HELPER_SERVICE_CLASS;
    private static final java.lang.String COMPANION_DEVICE_MANAGER_SERVICE_CLASS;
    private static final java.lang.String CONTENT_CAPTURE_MANAGER_SERVICE_CLASS;
    private static final java.lang.String CONTENT_SERVICE_CLASS;
    private static final java.lang.String CONTENT_SUGGESTIONS_SERVICE_CLASS;
    private static final int DEFAULT_SYSTEM_THEME;
    private static final java.lang.String DEVICE_IDLE_CONTROLLER_CLASS;
    private static final long EARLIEST_SUPPORTED_TIME;
    private static final java.lang.String ENCRYPTED_STATE;
    private static final java.lang.String ENCRYPTING_STATE;
    private static final java.lang.String ETHERNET_SERVICE_CLASS;
    private static final java.lang.String GSI_RUNNING_PROP;
    private static final java.lang.String IOT_SERVICE_CLASS;
    private static final java.lang.String JOB_SCHEDULER_SERVICE_CLASS;
    private static final java.lang.String LOCK_SETTINGS_SERVICE_CLASS;
    private static final java.lang.String LOWPAN_SERVICE_CLASS;
    private static final java.lang.String MIDI_SERVICE_CLASS;
    private static final java.lang.String PERSISTENT_DATA_BLOCK_PROP;
    private static final java.lang.String PRINT_MANAGER_SERVICE_CLASS;
    private static final java.lang.String ROLLBACK_MANAGER_SERVICE_CLASS;
    private static final java.lang.String SEARCH_MANAGER_SERVICE_CLASS;
    private static final java.lang.String SLICE_MANAGER_SERVICE_CLASS;
    private static final long SLOW_DELIVERY_THRESHOLD_MS;
    private static final long SLOW_DISPATCH_THRESHOLD_MS;
    private static final long SNAPSHOT_INTERVAL;
    private static final java.lang.String START_BLOB_STORE_SERVICE;
    private static final java.lang.String START_HIDL_SERVICES;
    private static final java.lang.String START_SENSOR_SERVICE;
    private static final java.lang.String STATS_COMPANION_APEX_PATH;
    private static final java.lang.String STATS_COMPANION_LIFECYCLE_CLASS;
    private static final java.lang.String STATS_PULL_ATOM_SERVICE_CLASS;
    private static final java.lang.String STORAGE_MANAGER_SERVICE_CLASS;
    private static final java.lang.String STORAGE_STATS_SERVICE_CLASS;
    private static final java.lang.String SYSPROP_START_COUNT;
    private static final java.lang.String SYSPROP_START_ELAPSED;
    private static final java.lang.String SYSPROP_START_UPTIME;
    private static final java.lang.String SYSTEM_CAPTIONS_MANAGER_SERVICE_CLASS;
    private static final java.lang.String TAG;
    private static final java.lang.String TETHERING_CONNECTOR_CLASS;
    private static final java.lang.String THERMAL_OBSERVER_CLASS;
    private static final java.lang.String TIME_DETECTOR_SERVICE_CLASS;
    private static final java.lang.String TIME_ZONE_DETECTOR_SERVICE_CLASS;
    private static final java.lang.String TIME_ZONE_RULES_MANAGER_SERVICE_CLASS;
    private static final java.lang.String UNCRYPT_PACKAGE_FILE;
    private static final java.lang.String USB_SERVICE_CLASS;
    private static final java.lang.String VOICE_RECOGNITION_MANAGER_SERVICE_CLASS;
    private static final java.lang.String WALLPAPER_SERVICE_CLASS;
    private static final java.lang.String WEAR_CONNECTIVITY_SERVICE_CLASS;
    private static final java.lang.String WEAR_DISPLAY_SERVICE_CLASS;
    private static final java.lang.String WEAR_GLOBAL_ACTIONS_SERVICE_CLASS;
    private static final java.lang.String WEAR_LEFTY_SERVICE_CLASS;
    private static final java.lang.String WEAR_POWER_SERVICE_CLASS;
    private static final java.lang.String WEAR_SIDEKICK_SERVICE_CLASS;
    private static final java.lang.String WEAR_TIME_SERVICE_CLASS;
    private static final java.lang.String WIFI_AWARE_SERVICE_CLASS;
    private static final java.lang.String WIFI_P2P_SERVICE_CLASS;
    private static final java.lang.String WIFI_SERVICE_CLASS;
    private static final int sMaxBinderThreads;
    private static java.util.LinkedList sPendingWtfs;
    private com.android.server.am.ActivityManagerService mActivityManagerService;
    private java.util.concurrent.Future mBlobStoreServiceStart;
    private android.content.ContentResolver mContentResolver;
    private com.android.server.pm.DataLoaderManagerService mDataLoaderManagerService;
    private com.android.server.display.DisplayManagerService mDisplayManagerService;
    private com.android.server.EntropyMixer mEntropyMixer;
    private final int mFactoryTestMode;
    private boolean mFirstBoot;
    private long mIncrementalServiceHandle;
    private boolean mOnlyCore;
    private android.content.pm.PackageManager mPackageManager;
    private com.android.server.pm.PackageManagerService mPackageManagerService;
    private com.android.server.power.PowerManagerService mPowerManagerService;
    private java.util.Timer mProfilerSnapshotTimer;
    private final boolean mRuntimeRestart;
    private final long mRuntimeStartElapsedTime;
    private final long mRuntimeStartUptime;
    private java.util.concurrent.Future mSensorServiceStart;
    private final int mStartCount;
    private android.content.Context mSystemContext;
    private com.android.server.SystemServiceManager mSystemServiceManager;
    private com.android.server.webkit.WebViewUpdateService mWebViewUpdateService;
    private com.android.server.wm.WindowManagerGlobalLock mWindowManagerGlobalLock;
    private java.util.concurrent.Future mZygotePreload;

    public void <init>()
    {
        com.android.server.SystemServer r0;
        long l0, $l4, $l5;
        int $i1, $i2, $i3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.SystemServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.SystemServer: long mIncrementalServiceHandle> = 0L;

        $i1 = staticinvoke <android.os.FactoryTest: int getMode()>();

        r0.<com.android.server.SystemServer: int mFactoryTestMode> = $i1;

        $i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("sys.system_server.start_count", 0);

        $i3 = $i2 + 1;

        r0.<com.android.server.SystemServer: int mStartCount> = $i3;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.SystemServer: long mRuntimeStartElapsedTime> = $l4;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.SystemServer: long mRuntimeStartUptime> = l0;

        $l5 = r0.<com.android.server.SystemServer: long mRuntimeStartElapsedTime>;

        staticinvoke <android.os.Process: void setStartTimes(long,long)>($l5, l0);

        $r1 = "1";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("sys.boot_completed");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        r0.<com.android.server.SystemServer: boolean mRuntimeRestart> = $z0;

        return;
    }

    private void createSystemContext()
    {
        com.android.server.SystemServer r0;
        android.app.ActivityThread r1;
        android.app.ContextImpl r2, $r3;

        r0 := @this: com.android.server.SystemServer;

        r1 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread systemMain()>();

        r2 = virtualinvoke r1.<android.app.ActivityThread: android.app.ContextImpl getSystemContext()>();

        r0.<com.android.server.SystemServer: android.content.Context mSystemContext> = r2;

        virtualinvoke r2.<android.content.Context: void setTheme(int)>(16974851);

        $r3 = virtualinvoke r1.<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()>();

        virtualinvoke $r3.<android.content.Context: void setTheme(int)>(16974851);

        return;
    }

    private boolean deviceHasConfigString(android.content.Context, int)
    {
        com.android.server.SystemServer r0;
        android.content.Context r1;
        int i0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.SystemServer;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private static boolean handleEarlySystemWtf(android.os.IBinder, java.lang.String, boolean, android.app.ApplicationErrorReport$ParcelableCrashInfo, int)
    {
        java.lang.String r0, $r3;
        boolean z0;
        android.app.ApplicationErrorReport$ParcelableCrashInfo r1;
        java.util.LinkedList r2, $r4, r7;
        int $i0, i1, i2;
        java.lang.Throwable $r5;
        android.os.IBinder r6;
        android.util.Pair r8;

        r6 := @parameter0: android.os.IBinder;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r1 := @parameter3: android.app.ApplicationErrorReport$ParcelableCrashInfo;

        i1 := @parameter4: int;

        i2 = staticinvoke <android.os.Process: int myPid()>();

        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(1000);

        $r3 = r1.<android.app.ApplicationErrorReport$ParcelableCrashInfo: java.lang.String exceptionMessage>;

        staticinvoke <com.android.server.am.EventLogTags: void writeAmWtf(int,int,java.lang.String,int,java.lang.String,java.lang.String)>($i0, i2, "system_server", -1, r0, $r3);

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,java.lang.String,java.lang.String,int,int)>(80, 1000, r0, "system_server", i2, 3);

        entermonitor class "Lcom/android/server/SystemServer;";

     label1:
        $r4 = <com.android.server.SystemServer: java.util.LinkedList sPendingWtfs>;

        if $r4 != null goto label2;

        r7 = new java.util.LinkedList;

        specialinvoke r7.<java.util.LinkedList: void <init>()>();

        <com.android.server.SystemServer: java.util.LinkedList sPendingWtfs> = r7;

     label2:
        r2 = <com.android.server.SystemServer: java.util.LinkedList sPendingWtfs>;

        r8 = new android.util.Pair;

        specialinvoke r8.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r8);

        exitmonitor class "Lcom/android/server/SystemServer;";

     label3:
        return 0;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor class "Lcom/android/server/SystemServer;";

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static native void initZygoteChildHeapProfiling();

    private boolean isFirstBootOrUpgrade()
    {
        com.android.server.SystemServer r0;
        com.android.server.pm.PackageManagerService $r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.SystemServer;

        $r1 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $z0 = virtualinvoke $r1.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $z1 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public static boolean lambda$-CPwHnC0JLmQ1R_LlAGbc_jvNjw(android.os.IBinder, java.lang.String, boolean, android.app.ApplicationErrorReport$ParcelableCrashInfo, int)
    {
        android.os.IBinder r0;
        java.lang.String r1;
        boolean z0, $z1;
        android.app.ApplicationErrorReport$ParcelableCrashInfo r2;
        int i0;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 := @parameter3: android.app.ApplicationErrorReport$ParcelableCrashInfo;

        i0 := @parameter4: int;

        $z1 = staticinvoke <com.android.server.SystemServer: boolean handleEarlySystemWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>(r0, r1, z0, r2, i0);

        return $z1;
    }

    static void lambda$startBootstrapServices$0()
    {
        com.android.server.utils.TimingsTraceAndSlog r0;

        r0 = staticinvoke <com.android.server.utils.TimingsTraceAndSlog: com.android.server.utils.TimingsTraceAndSlog newAsyncLog()>();

        virtualinvoke r0.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSensorService");

        staticinvoke <com.android.server.SystemServer: void startSensorService()>();

        virtualinvoke r0.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    static void lambda$startOtherServices$1()
    {
        java.lang.String[] $r0;
        java.lang.String $r1;
        android.os.ZygoteProcess $r2;
        boolean $z0;
        java.lang.Exception $r3;
        com.android.server.utils.TimingsTraceAndSlog r4;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "SecondaryZygotePreload");

        r4 = staticinvoke <com.android.server.utils.TimingsTraceAndSlog: com.android.server.utils.TimingsTraceAndSlog newAsyncLog()>();

        virtualinvoke r4.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("SecondaryZygotePreload");

        $r2 = <android.os.Process: android.os.ZygoteProcess ZYGOTE_PROCESS>;

        $r0 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r1 = $r0[0];

        $z0 = virtualinvoke $r2.<android.os.ZygoteProcess: boolean preloadDefault(java.lang.String)>($r1);

        if $z0 != 0 goto label2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SystemServer", "Unable to preload default resources");

     label2:
        virtualinvoke r4.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", "Exception preloading default resources", $r3);

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    static void lambda$startOtherServices$2()
    {
        com.android.server.utils.TimingsTraceAndSlog r0;

        r0 = staticinvoke <com.android.server.utils.TimingsTraceAndSlog: com.android.server.utils.TimingsTraceAndSlog newAsyncLog()>();

        virtualinvoke r0.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartHidlServices");

        staticinvoke <com.android.server.SystemServer: void startHidlServices()>();

        virtualinvoke r0.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    static void lambda$startOtherServices$5(android.os.IBinder)
    {
        android.os.IBinder r0;

        r0 := @parameter0: android.os.IBinder;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder,boolean,int)>("tethering", r0, 0, 6);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.server.SystemServer $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new com.android.server.SystemServer;

        specialinvoke $r1.<com.android.server.SystemServer: void <init>()>();

        specialinvoke $r1.<com.android.server.SystemServer: void run()>();

        return;
    }

    private void performPendingShutdown()
    {
        com.android.server.SystemServer r0;
        int $i0, $i2, $i4;
        char $c1;
        boolean $z1, $z2, $z3, $z4, z5;
        java.io.File $r1, $r2;
        java.lang.Throwable $r3;
        java.lang.String r4, r5, r7, r8;
        com.android.server.SystemServer$1 $r10;
        android.os.Handler $r12, $r14;
        android.os.Message r13;

        r0 := @this: com.android.server.SystemServer;

        r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("sys.shutdown.requested", "");

        if r4 == null goto label10;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label10;

        $c1 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        if $c1 != 49 goto label01;

        z5 = 1;

        goto label02;

     label01:
        z5 = 0;

     label02:
        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i2 <= 1 goto label03;

        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(1, $i4);

        goto label04;

     label03:
        r5 = null;

     label04:
        if r5 == null goto label09;

        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("recovery-update");

        if $z1 == 0 goto label09;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/cache/recovery/uncrypt_file");

        $z2 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label09;

        r7 = null;

     label05:
        r8 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r1, 0, null);

     label06:
        r7 = r8;

        goto label08;

     label07:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", "Error reading uncrypt package file", $r3);

     label08:
        if r7 == null goto label09;

        $z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("/data");

        if $z3 == 0 goto label09;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/cache/recovery/block.map");

        $z4 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z4 != 0 goto label09;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SystemServer", "Can\'t find block map file, uncrypt failed or unexpected runtime restart?");

        return;

     label09:
        $r10 = new com.android.server.SystemServer$1;

        specialinvoke $r10.<com.android.server.SystemServer$1: void <init>(com.android.server.SystemServer,boolean,java.lang.String)>(r0, z5, r5);

        $r12 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        r13 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r12, $r10);

        virtualinvoke r13.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r14 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        virtualinvoke $r14.<android.os.Handler: boolean sendMessage(android.os.Message)>(r13);

     label10:
        return;

        catch java.io.IOException from label05 to label06 with label07;
    }

    private void reportWtf(java.lang.String, java.lang.Throwable)
    {
        com.android.server.SystemServer r0;
        java.lang.String r1, $r7;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.SystemServer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "***********************************************");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BOOT FAILURE ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", $r7, r2);

        return;
    }

    private void run()
    {
        com.android.server.SystemServer r0;
        int i0, $i1, $i4, $i15, $i16;
        java.lang.String r1, $r3, $r4, $r5, $r11, $r20, $r22, $r28, r33, $r35, r38, r39;
        long $l2, $l3, $l5, $l6, $l11, l21, l22, l23;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.Long $r8, $r9;
        dalvik.system.VMRuntime $r10, $r12;
        android.os.Looper $r13;
        android.content.Context $r14;
        com.android.server.SystemServiceManager $r15, r47;
        boolean $z0, $z1, z2, z3, z4, z5, z6, z7, $z8, $z9;
        byte $b13;
        java.util.Locale $r21;
        java.lang.Throwable $r23, $r24, $r29, $r30, $r31, r34;
        java.lang.Exception $r25;
        com.android.server.'-$$Lambda$SystemServer$-CPwHnC0JLmQ1R_LlAGbc_jvNjw' $r42;
        com.android.server.utils.TimingsTraceAndSlog r46;
        java.lang.StringBuilder r48, r49;
        java.lang.RuntimeException r50;
        com.android.internal.os.RuntimeInit$ApplicationWtfHandler r51;

        r0 := @this: com.android.server.SystemServer;

        r46 = new com.android.server.utils.TimingsTraceAndSlog;

        specialinvoke r46.<com.android.server.utils.TimingsTraceAndSlog: void <init>()>();

     label01:
        virtualinvoke r46.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("InitBeforeStartServices");

        $i1 = r0.<com.android.server.SystemServer: int mStartCount>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.system_server.start_count", $r3);

        $l2 = r0.<com.android.server.SystemServer: long mRuntimeStartElapsedTime>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.system_server.start_elapsed", $r4);

        $l3 = r0.<com.android.server.SystemServer: long mRuntimeStartUptime>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l3);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.system_server.start_uptime", $r5);

        $r6 = newarray (java.lang.Object)[3];

        $i4 = r0.<com.android.server.SystemServer: int mStartCount>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r6[0] = $r7;

        $l5 = r0.<com.android.server.SystemServer: long mRuntimeStartUptime>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r6[1] = $r8;

        $l6 = r0.<com.android.server.SystemServer: long mRuntimeStartElapsedTime>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r6[2] = $r9;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(3011, $r6);

        r33 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.sys.timezone");

     label02:
        if r33 == null goto label06;

     label03:
        z2 = virtualinvoke r33.<java.lang.String: boolean isEmpty()>();

     label04:
        if z2 == 0 goto label07;

        goto label06;

     label05:
        $r31 := @caughtexception;

        r34 = $r31;

        goto label35;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "Timezone not set; setting to GMT.");

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.timezone", "GMT");

     label07:
        $r35 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.sys.language");

        z3 = virtualinvoke $r35.<java.lang.String: boolean isEmpty()>();

     label08:
        if z3 != 0 goto label10;

     label09:
        $r21 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r22 = virtualinvoke $r21.<java.util.Locale: java.lang.String toLanguageTag()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.locale", $r22);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.language", "");

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.country", "");

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.localevar", "");

     label10:
        staticinvoke <android.os.Binder: void setWarnOnBlocking(boolean)>(1);

        staticinvoke <android.content.pm.PackageItemInfo: void forceSafeLabels()>();

        <android.database.sqlite.SQLiteGlobal: java.lang.String sDefaultSyncMode> = "FULL";

        staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: void init(java.lang.String)>(null);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Entered the Android system server!");

        l21 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3010, l21);

        z4 = r0.<com.android.server.SystemServer: boolean mRuntimeRestart>;

     label11:
        if z4 != 0 goto label13;

     label12:
        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(240, 19, l21);

     label13:
        $r10 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r11 = virtualinvoke $r10.<dalvik.system.VMRuntime: java.lang.String vmLibrary()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.dalvik.vm.lib.2", $r11);

        $r12 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r12.<dalvik.system.VMRuntime: void clearGrowthLimit()>();

        staticinvoke <android.os.Build: void ensureFingerprintProperty()>();

        staticinvoke <android.os.Environment: void setUserRequired(boolean)>(1);

        staticinvoke <android.os.BaseBundle: void setShouldDefuse(boolean)>(1);

        staticinvoke <android.os.Parcel: void setStackTraceParceling(boolean)>(1);

        staticinvoke <com.android.internal.os.BinderInternal: void disableBackgroundScheduling(boolean)>(1);

        staticinvoke <com.android.internal.os.BinderInternal: void setMaxThreads(int)>(31);

        staticinvoke <android.os.Process: void setThreadPriority(int)>(-2);

        staticinvoke <android.os.Process: void setCanSelfBackground(boolean)>(0);

        staticinvoke <android.os.Looper: void prepareMainLooper()>();

        $r13 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        virtualinvoke $r13.<android.os.Looper: void setSlowLogThresholdMs(long,long)>(100L, 200L);

        <android.app.SystemServiceRegistry: boolean sEnableServiceNotFoundWtf> = 1;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("android_servers");

        staticinvoke <com.android.server.SystemServer: void initZygoteChildHeapProfiling()>();

        z5 = <android.os.Build: boolean IS_DEBUGGABLE>;

     label14:
        if z5 == 0 goto label16;

     label15:
        staticinvoke <com.android.server.SystemServer: void spawnFdLeakCheckThread()>();

     label16:
        specialinvoke r0.<com.android.server.SystemServer: void performPendingShutdown()>();

        specialinvoke r0.<com.android.server.SystemServer: void createSystemContext()>();

        staticinvoke <android.app.ActivityThread: void initializeMainlineModules()>();

        r47 = new com.android.server.SystemServiceManager;

        $r14 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        specialinvoke r47.<com.android.server.SystemServiceManager: void <init>(android.content.Context)>($r14);

        r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager> = r47;

        z6 = r0.<com.android.server.SystemServer: boolean mRuntimeRestart>;

        l22 = r0.<com.android.server.SystemServer: long mRuntimeStartElapsedTime>;

     label17:
        $l11 = r0.<com.android.server.SystemServer: long mRuntimeStartUptime>;

        virtualinvoke r47.<com.android.server.SystemServiceManager: void setStartInfo(boolean,long,long)>(z6, l22, $l11);

        $r15 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/SystemServiceManager;", $r15);

        staticinvoke <com.android.server.SystemServerInitThreadPool: void start()>();

        z7 = <android.os.Build: boolean IS_DEBUGGABLE>;

     label18:
        if z7 == 0 goto label24;

     label19:
        r38 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.sys.dalvik.jvmtiagent");

        $z1 = virtualinvoke r38.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label24;

        i0 = virtualinvoke r38.<java.lang.String: int indexOf(int)>(61);

        r39 = virtualinvoke r38.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i15 = i0 + 1;

        $i16 = virtualinvoke r38.<java.lang.String: int length()>();

        r1 = virtualinvoke r38.<java.lang.String: java.lang.String substring(int,int)>($i15, $i16);

     label20:
        staticinvoke <android.os.Debug: void attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)>(r39, r1, null);

     label21:
        goto label24;

     label22:
        $r25 := @caughtexception;

     label23:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("System", "*************************************************");

        r48 = new java.lang.StringBuilder;

        specialinvoke r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("********** Failed to load jvmti plugin: ");

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r28 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("System", $r28);

     label24:
        virtualinvoke r46.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r42 = <com.android.server._$$Lambda$SystemServer$_CPwHnC0JLmQ1R_LlAGbc_jvNjw: com.android.server.'-$$Lambda$SystemServer$-CPwHnC0JLmQ1R_LlAGbc_jvNjw' INSTANCE>;

        r51 = (com.android.internal.os.RuntimeInit$ApplicationWtfHandler) $r42;

        staticinvoke <com.android.internal.os.RuntimeInit: void setDefaultApplicationWtfHandler(com.android.internal.os.RuntimeInit$ApplicationWtfHandler)>(r51);

     label25:
        virtualinvoke r46.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartServices");

        specialinvoke r0.<com.android.server.SystemServer: void startBootstrapServices(com.android.server.utils.TimingsTraceAndSlog)>(r46);

        specialinvoke r0.<com.android.server.SystemServer: void startCoreServices(com.android.server.utils.TimingsTraceAndSlog)>(r46);

        specialinvoke r0.<com.android.server.SystemServer: void startOtherServices(com.android.server.utils.TimingsTraceAndSlog)>(r46);

     label26:
        virtualinvoke r46.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        staticinvoke <android.os.StrictMode: void initVmDefaults(android.content.pm.ApplicationInfo)>(null);

        $z8 = r0.<com.android.server.SystemServer: boolean mRuntimeRestart>;

        if $z8 != 0 goto label27;

        $z0 = specialinvoke r0.<com.android.server.SystemServer: boolean isFirstBootOrUpgrade()>();

        if $z0 != 0 goto label27;

        l23 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(240, 20, l23);

        $b13 = l23 cmp 60000L;

        if $b13 <= 0 goto label27;

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SystemServer init took too long. uptimeMillis=");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l23);

        $r20 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("SystemServerTiming", $r20);

     label27:
        $z9 = staticinvoke <dalvik.system.VMRuntime: boolean hasBootImageSpaces()>();

        if $z9 != 0 goto label28;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("SystemServer", "Runtime is not running with a boot image!");

     label28:
        staticinvoke <android.os.Looper: void loop()>();

        r50 = new java.lang.RuntimeException;

        specialinvoke r50.<java.lang.RuntimeException: void <init>(java.lang.String)>("Main thread loop unexpectedly exited");

        throw r50;

     label29:
        $r30 := @caughtexception;

     label30:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("System", "******************************************");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("System", "************ Failure starting system services", $r30);

     label31:
        throw $r30;

     label32:
        $r29 := @caughtexception;

        virtualinvoke r46.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        throw $r29;

     label33:
        $r24 := @caughtexception;

        r34 = $r24;

        goto label35;

     label34:
        $r23 := @caughtexception;

        r34 = $r23;

     label35:
        virtualinvoke r46.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        throw r34;

        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label34;
        catch java.lang.Throwable from label07 to label08 with label34;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label10 to label11 with label34;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label13 to label14 with label34;
        catch java.lang.Throwable from label15 to label16 with label05;
        catch java.lang.Throwable from label16 to label17 with label34;
        catch java.lang.Throwable from label17 to label18 with label33;
        catch java.lang.Throwable from label19 to label20 with label33;
        catch java.lang.Exception from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label33;
        catch java.lang.Throwable from label23 to label24 with label33;
        catch java.lang.Throwable from label25 to label26 with label29;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label31 to label32 with label32;
    }

    private static native void setIncrementalServiceSystemReady(long);

    private static native void spawnFdLeakCheckThread();

    private void startAttentionService(android.content.Context, com.android.server.utils.TimingsTraceAndSlog)
    {
        com.android.server.SystemServer r0;
        android.content.Context r1;
        com.android.server.utils.TimingsTraceAndSlog r2;
        boolean $z0;
        com.android.server.SystemServiceManager $r3;

        r0 := @this: com.android.server.SystemServer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.utils.TimingsTraceAndSlog;

        $z0 = staticinvoke <com.android.server.attention.AttentionManagerService: boolean isServiceConfigured(android.content.Context)>(r1);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemServer", "AttentionService is not configured on this device");

        return;

     label1:
        virtualinvoke r2.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAttentionManagerService");

        $r3 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r3.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/attention/AttentionManagerService;");

        virtualinvoke r2.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    private void startBootstrapServices(com.android.server.utils.TimingsTraceAndSlog)
    {
        com.android.server.SystemServer r0;
        com.android.server.am.ActivityManagerService r1, $r21, $r31, $r57, $r83, $r85;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10;
        com.android.server.'-$$Lambda$YWiwiKm_Qgqb55C6tTuq_n2JzdY' $r2;
        android.content.Context $r5, $r34, $r35, $r52, $r62, r78, $r82, $r84, $r89, $r92;
        long[] $r7;
        com.android.server.SystemServiceManager $r8, $r10, $r12, $r14, $r16, $r19, $r20, $r23, $r26, $r29, $r32, $r37, $r39, $r42, $r65, $r81, $r87, $r90;
        com.android.server.SystemService $r11, $r17, $r24, $r27, $r40;
        com.android.server.wm.ActivityTaskManagerService$Lifecycle $r18;
        com.android.server.wm.WindowManagerGlobalLock $r22;
        com.android.server.pm.DataLoaderManagerService $r25;
        long $l1, $l3, $l4;
        com.android.server.power.PowerManagerService $r28;
        com.android.server.PackageWatchdog $r36;
        com.android.server.display.DisplayManagerService $r41, $r86;
        java.util.Optional $r43;
        java.lang.Object $r44, $r58;
        java.lang.String $r45, $r46, r77;
        com.android.server.Watchdog $r47, $r49, $r60, $r64, $r69, $r71, r73;
        int $i2, $i7;
        com.android.server.pm.PackageManagerService $r48, $r50, $r51, $r61;
        android.content.pm.PackageManager $r53;
        com.android.server.'-$$Lambda$SystemServer$UyrPns7R814g-ZEylCbDKhe8It4' $r55;
        java.util.concurrent.Future $r56;
        android.hardware.display.DisplayManagerInternal $r59;
        java.lang.Throwable $r67, $r68, $r70;
        com.android.server.utils.TimingsTraceAndSlog r72;
        com.android.server.pm.Installer r75;
        com.android.server.wm.ActivityTaskManagerService r76;
        com.android.server.compat.PlatformCompat r94;
        com.android.server.compat.PlatformCompatNative r95;
        com.android.server.om.OverlayManagerService r96;
        com.android.server.SensorPrivacyService r97;
        java.lang.Runnable r98, r99;

        r0 := @this: com.android.server.SystemServer;

        r72 := @parameter0: com.android.server.utils.TimingsTraceAndSlog;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("startBootstrapServices");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWatchdog");

        r73 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke r73.<com.android.server.Watchdog: void start()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Reading configuration...");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("ReadingSystemConfig");

        $r2 = <com.android.server._$$Lambda$YWiwiKm_Qgqb55C6tTuq_n2JzdY: com.android.server.'-$$Lambda$YWiwiKm_Qgqb55C6tTuq_n2JzdY' INSTANCE>;

        r98 = (java.lang.Runnable) $r2;

        staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r98, "ReadingSystemConfig");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("PlatformCompat");

        r94 = new com.android.server.compat.PlatformCompat;

        $r5 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        specialinvoke r94.<com.android.server.compat.PlatformCompat: void <init>(android.content.Context)>($r5);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("platform_compat", r94);

        r95 = new com.android.server.compat.PlatformCompatNative;

        specialinvoke r95.<com.android.server.compat.PlatformCompatNative: void <init>(com.android.server.compat.PlatformCompat)>(r94);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("platform_compat_native", r95);

        $r7 = newarray (long)[0];

        staticinvoke <android.app.AppCompatCallbacks: void install(long[])>($r7);

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartFileIntegrityService");

        $r8 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r8.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/security/FileIntegrityService;");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartInstaller");

        $r10 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r11 = virtualinvoke $r10.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/pm/Installer;");

        r75 = (com.android.server.pm.Installer) $r11;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("DeviceIdentifiersPolicyService");

        $r12 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r12.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/os/DeviceIdentifiersPolicyService;");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("UriGrantsManagerService");

        $r14 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r14.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/uri/UriGrantsManagerService$Lifecycle;");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartActivityManager");

        $r16 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r17 = virtualinvoke $r16.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerService$Lifecycle;");

        $r18 = (com.android.server.wm.ActivityTaskManagerService$Lifecycle) $r17;

        r76 = virtualinvoke $r18.<com.android.server.wm.ActivityTaskManagerService$Lifecycle: com.android.server.wm.ActivityTaskManagerService getService()>();

        $r19 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        r1 = staticinvoke <com.android.server.am.ActivityManagerService$Lifecycle: com.android.server.am.ActivityManagerService startService(com.android.server.SystemServiceManager,com.android.server.wm.ActivityTaskManagerService)>($r19, r76);

        r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService> = r1;

        $r20 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke r1.<com.android.server.am.ActivityManagerService: void setSystemServiceManager(com.android.server.SystemServiceManager)>($r20);

        $r21 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r21.<com.android.server.am.ActivityManagerService: void setInstaller(com.android.server.pm.Installer)>(r75);

        $r22 = virtualinvoke r76.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock getGlobalLock()>();

        r0.<com.android.server.SystemServer: com.android.server.wm.WindowManagerGlobalLock mWindowManagerGlobalLock> = $r22;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDataLoaderManagerService");

        $r23 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r24 = virtualinvoke $r23.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/pm/DataLoaderManagerService;");

        $r25 = (com.android.server.pm.DataLoaderManagerService) $r24;

        r0.<com.android.server.SystemServer: com.android.server.pm.DataLoaderManagerService mDataLoaderManagerService> = $r25;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartIncrementalService");

        $l1 = staticinvoke <com.android.server.SystemServer: long startIncrementalService()>();

        r0.<com.android.server.SystemServer: long mIncrementalServiceHandle> = $l1;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartPowerManager");

        $r26 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r27 = virtualinvoke $r26.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/power/PowerManagerService;");

        $r28 = (com.android.server.power.PowerManagerService) $r27;

        r0.<com.android.server.SystemServer: com.android.server.power.PowerManagerService mPowerManagerService> = $r28;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartThermalManager");

        $r29 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r29.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/power/ThermalManagerService;");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("InitPowerManagement");

        $r31 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r31.<com.android.server.am.ActivityManagerService: void initPowerManagement()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartRecoverySystemService");

        $r32 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r32.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/recoverysystem/RecoverySystemService$Lifecycle;");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r34 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        staticinvoke <com.android.server.RescueParty: void registerHealthObserver(android.content.Context)>($r34);

        $r35 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $r36 = staticinvoke <com.android.server.PackageWatchdog: com.android.server.PackageWatchdog getInstance(android.content.Context)>($r35);

        virtualinvoke $r36.<com.android.server.PackageWatchdog: void noteBoot()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartLightsService");

        $r37 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r37.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/lights/LightsService;");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSidekickService");

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.enable_sidekick_graphics", 0);

        if $z1 == 0 goto label01;

        $r65 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r65.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.google.android.clockwork.sidekick.SidekickService");

     label01:
        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDisplayManager");

        $r39 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r40 = virtualinvoke $r39.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/display/DisplayManagerService;");

        $r41 = (com.android.server.display.DisplayManagerService) $r40;

        r0.<com.android.server.SystemServer: com.android.server.display.DisplayManagerService mDisplayManagerService> = $r41;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("WaitForDisplay");

        $r42 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r42.<com.android.server.SystemServiceManager: void startBootPhase(com.android.server.utils.TimingsTraceAndSlog,int)>(r72, 100);

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r43 = staticinvoke <android.sysprop.VoldProperties: java.util.Optional decrypt()>();

        $r44 = virtualinvoke $r43.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        r77 = (java.lang.String) $r44;

        $r45 = "trigger_restart_min_framework";

        z0 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>(r77);

        z8 = 1;

        if z0 == 0 goto label02;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "Detected encryption in progress - only parsing core apps");

        r0.<com.android.server.SystemServer: boolean mOnlyCore> = 1;

        goto label03;

     label02:
        $r46 = "1";

        $z2 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>(r77);

        if $z2 == 0 goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "Device encrypted - only parsing core apps");

        r0.<com.android.server.SystemServer: boolean mOnlyCore> = 1;

     label03:
        $z9 = r0.<com.android.server.SystemServer: boolean mRuntimeRestart>;

        if $z9 != 0 goto label04;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(240, 14, $l4);

     label04:
        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartPackageManagerService");

     label05:
        $r47 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r47.<com.android.server.Watchdog: void pauseWatchingCurrentThread(java.lang.String)>("packagemanagermain");

        r78 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $i2 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i2 == 0 goto label07;

     label06:
        goto label08;

     label07:
        z8 = 0;

     label08:
        $z3 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        $r48 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)>(r78, r75, z8, $z3);

        r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService> = $r48;

     label09:
        $r49 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r49.<com.android.server.Watchdog: void resumeWatchingCurrentThread(java.lang.String)>("packagemanagermain");

        $r50 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        staticinvoke <com.android.server.pm.dex.SystemServerDexLoadReporter: void configureSystemServerDexReporter(android.content.pm.IPackageManager)>($r50);

        $r51 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $z4 = virtualinvoke $r51.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        r0.<com.android.server.SystemServer: boolean mFirstBoot> = $z4;

        $r52 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $r53 = virtualinvoke $r52.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager> = $r53;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $z5 = r0.<com.android.server.SystemServer: boolean mRuntimeRestart>;

        if $z5 != 0 goto label10;

        $z7 = specialinvoke r0.<com.android.server.SystemServer: boolean isFirstBootOrUpgrade()>();

        if $z7 != 0 goto label10;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(240, 15, $l3);

     label10:
        $z10 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        if $z10 != 0 goto label17;

        $z6 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_otadexopt", 0);

        if $z6 != 0 goto label17;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartOtaDexOptService");

     label11:
        $r60 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r60.<com.android.server.Watchdog: void pauseWatchingCurrentThread(java.lang.String)>("moveab");

        $r62 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $r61 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        staticinvoke <com.android.server.pm.OtaDexoptService: com.android.server.pm.OtaDexoptService main(android.content.Context,com.android.server.pm.PackageManagerService)>($r62, $r61);

     label12:
        goto label15;

     label13:
        $r67 := @caughtexception;

     label14:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting OtaDexOptService", $r67);

     label15:
        $r64 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r64.<com.android.server.Watchdog: void resumeWatchingCurrentThread(java.lang.String)>("moveab");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label17;

     label16:
        $r68 := @caughtexception;

        $r69 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r69.<com.android.server.Watchdog: void resumeWatchingCurrentThread(java.lang.String)>("moveab");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        throw $r68;

     label17:
        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartUserManagerService");

        $r81 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r81.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/pm/UserManagerService$LifeCycle;");

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("InitAttributerCache");

        $r82 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        staticinvoke <com.android.server.AttributeCache: void init(android.content.Context)>($r82);

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("SetSystemProcess");

        $r83 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r83.<com.android.server.am.ActivityManagerService: void setSystemProcess()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("InitWatchdog");

        $r84 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $r85 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke r73.<com.android.server.Watchdog: void init(android.content.Context,com.android.server.am.ActivityManagerService)>($r84, $r85);

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r86 = r0.<com.android.server.SystemServer: com.android.server.display.DisplayManagerService mDisplayManagerService>;

        virtualinvoke $r86.<com.android.server.display.DisplayManagerService: void setupSchedulerPolicies()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartOverlayManagerService");

        $r87 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        r96 = new com.android.server.om.OverlayManagerService;

        $r89 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        specialinvoke r96.<com.android.server.om.OverlayManagerService: void <init>(android.content.Context)>($r89);

        virtualinvoke $r87.<com.android.server.SystemServiceManager: void startService(com.android.server.SystemService)>(r96);

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSensorPrivacyService");

        $r90 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        r97 = new com.android.server.SensorPrivacyService;

        $r92 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        specialinvoke r97.<com.android.server.SensorPrivacyService: void <init>(android.content.Context)>($r92);

        virtualinvoke $r90.<com.android.server.SystemServiceManager: void startService(com.android.server.SystemService)>(r97);

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $i7 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.displayinset.top", 0);

        if $i7 <= 0 goto label18;

        $r57 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r57.<com.android.server.am.ActivityManagerService: void updateSystemUiContext()>();

        $r58 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r59 = (android.hardware.display.DisplayManagerInternal) $r58;

        virtualinvoke $r59.<android.hardware.display.DisplayManagerInternal: void onOverlayChanged()>();

     label18:
        $r55 = <com.android.server._$$Lambda$SystemServer$UyrPns7R814g_ZEylCbDKhe8It4: com.android.server.'-$$Lambda$SystemServer$UyrPns7R814g-ZEylCbDKhe8It4' INSTANCE>;

        r99 = (java.lang.Runnable) $r55;

        $r56 = staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r99, "StartSensorService");

        r0.<com.android.server.SystemServer: java.util.concurrent.Future mSensorServiceStart> = $r56;

        virtualinvoke r72.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;

     label19:
        $r70 := @caughtexception;

        $r71 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r71.<com.android.server.Watchdog: void resumeWatchingCurrentThread(java.lang.String)>("packagemanagermain");

        throw $r70;

        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    private void startContentCaptureService(android.content.Context, com.android.server.utils.TimingsTraceAndSlog)
    {
        com.android.server.SystemServer r0;
        com.android.server.utils.TimingsTraceAndSlog r1;
        com.android.server.SystemServiceManager $r2;
        java.lang.Object $r4;
        boolean $z1, $z2, z3;
        android.content.Context r5;
        java.lang.String r6;
        com.android.server.contentcapture.ContentCaptureManagerInternal r7;
        com.android.server.am.ActivityManagerService r8;

        r0 := @this: com.android.server.SystemServer;

        r5 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.utils.TimingsTraceAndSlog;

        r6 = staticinvoke <android.provider.DeviceConfig: java.lang.String getProperty(java.lang.String,java.lang.String)>("content_capture", "service_explicitly_enabled");

        z3 = 0;

        if r6 == null goto label2;

        z3 = 0;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("default");

        if $z2 != 0 goto label2;

        z3 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r6);

        if z3 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemServer", "ContentCaptureService explicitly enabled by DeviceConfig");

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemServer", "ContentCaptureService explicitly disabled by DeviceConfig");

        return;

     label2:
        if z3 != 0 goto label3;

        $z1 = specialinvoke r0.<com.android.server.SystemServer: boolean deviceHasConfigString(android.content.Context,int)>(r5, 17039861);

        if $z1 != 0 goto label3;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemServer", "ContentCaptureService disabled because resource is not overlaid");

        return;

     label3:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartContentCaptureService");

        $r2 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r2.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.contentcapture.ContentCaptureManagerService");

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/contentcapture/ContentCaptureManagerInternal;");

        r7 = (com.android.server.contentcapture.ContentCaptureManagerInternal) $r4;

        if r7 == null goto label4;

        r8 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        if r8 == null goto label4;

        virtualinvoke r8.<com.android.server.am.ActivityManagerService: void setContentCaptureManager(com.android.server.contentcapture.ContentCaptureManagerInternal)>(r7);

     label4:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    private void startCoreServices(com.android.server.utils.TimingsTraceAndSlog)
    {
        com.android.server.SystemServer r0;
        com.android.server.utils.TimingsTraceAndSlog r1;
        com.android.server.SystemServiceManager $r2, $r4, $r6, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        com.android.server.am.ActivityManagerService $r8;
        java.lang.Object $r9;
        android.app.usage.UsageStatsManagerInternal $r10;
        android.content.pm.PackageManager $r11;
        boolean $z0;
        com.android.server.SystemService $r25;
        com.android.server.webkit.WebViewUpdateService $r26;

        r0 := @this: com.android.server.SystemServer;

        r1 := @parameter0: com.android.server.utils.TimingsTraceAndSlog;

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("startCoreServices");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSystemConfigService");

        $r2 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r2.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/SystemConfigService;");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBatteryService");

        $r4 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r4.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/BatteryService;");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartUsageService");

        $r6 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r6.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/usage/UsageStatsService;");

        $r8 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r9 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        $r10 = (android.app.usage.UsageStatsManagerInternal) $r9;

        virtualinvoke $r8.<com.android.server.am.ActivityManagerService: void setUsageStatsManager(android.app.usage.UsageStatsManagerInternal)>($r10);

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r11 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z0 = virtualinvoke $r11.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.webview");

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWebViewUpdateService");

        $r24 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r25 = virtualinvoke $r24.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/webkit/WebViewUpdateService;");

        $r26 = (com.android.server.webkit.WebViewUpdateService) $r25;

        r0.<com.android.server.SystemServer: com.android.server.webkit.WebViewUpdateService mWebViewUpdateService> = $r26;

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label1:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartCachedDeviceStateService");

        $r12 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r12.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/CachedDeviceStateService;");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBinderCallsStatsService");

        $r14 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r14.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/BinderCallsStatsService$LifeCycle;");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartLooperStatsService");

        $r16 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r16.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/LooperStatsService$Lifecycle;");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartRollbackManagerService");

        $r18 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r18.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.rollback.RollbackManagerService");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBugreportManagerService");

        $r20 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r20.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/os/BugreportManagerService;");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("GpuService");

        $r22 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r22.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/gpu/GpuService;");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    private static native void startHidlServices();

    private static native long startIncrementalService();

    private void startOtherServices(com.android.server.utils.TimingsTraceAndSlog)
    {
        com.android.server.SystemServer r0;
        android.content.Context r1, $r45, $r251, r321;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, z40, z41, z42, z43, z44, z45, $z46, z47, z48, $z49, $z50, $z51, $z52, $z53, z54, $z55, z56, z57, z58, $z59;
        com.android.server.wm.WindowManagerService r5;
        java.lang.String $r6, $r52, $r71, $r90, $r153, $r154, $r195, r298, $r304, r376;
        android.content.pm.PackageManager $r7, $r8, $r9, $r23, $r26, $r32, $r78, $r79, $r80, $r81, $r82, $r92, $r94, $r95, $r98, $r104, $r105, $r108, $r109, $r111, $r112, $r121, $r132, $r139, $r282, $r306, $r319, $r333, $r336, $r337, $r338, $r361;
        com.android.server.'-$$Lambda$SystemServer$VBGb9VpEls6bUcVBPwYLtX7qDTs' $r10;
        java.util.concurrent.Future $r11, $r19, $r48, $r101;
        com.android.server.SystemServiceManager $r12, $r13, $r15, $r16, $r18, $r24, $r27, $r28, $r29, $r30, $r33, $r34, $r41, $r44, $r47, $r53, $r57, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r72, $r75, $r76, $r83, $r84, $r86, $r87, $r88, $r91, $r93, $r96, $r97, $r99, $r102, $r106, $r107, $r110, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r122, $r123, $r124, $r126, $r128, $r129, $r131, $r133, $r134, $r135, $r136, $r137, $r138, $r140, $r141, $r142, $r143, $r144, $r145, $r146, $r147, $r148, $r149, $r155, $r157, $r158, $r159, $r161, r241, $r247, $r248, $r249, $r250, $r252, r256, $r258, $r264, $r265, $r266, $r293, r299, $r305, $r309, $r314, $r315, $r316, $r317, $r318, r320, $r324, $r342, $r343, $r344, $r345, $r365, $r366;
        android.content.ContentResolver $r14, $r160;
        com.android.server.am.ActivityManagerService $r17, $r20, $r21, $r38, $r50, $r54, $r56, $r58, $r77;
        com.android.server.'-$$Lambda$SystemServer$NlJmG18aPrQduhRqASIdcn7G0z8' $r22;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        com.android.server.pm.PackageManagerService $r25, $r42, $r151;
        com.android.server.SystemService $r31;
        android.view.Display $r36;
        android.content.res.Resources $r37, $r46, $r89, $r127, $r130, $r297, $r325;
        com.android.server.power.PowerManagerService $r39;
        com.android.internal.app.IAppOpsService $r40;
        com.android.server.display.DisplayManagerService $r43, $r246;
        java.util.LinkedList $r55, r368;
        android.os.IBinder $r70, $r85, $r156;
        android.net.ConnectivityModuleConnector $r73;
        android.net.NetworkStackClient $r74;
        com.android.server.Watchdog $r150, $r152, $r186;
        java.lang.Throwable $r163, $r164, $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r177, $r178, $r179, $r180, $r181, $r182, $r183, $r184, $r185, $r187, $r188, $r189, $r190, $r191, $r192, $r193, $r196, $r197, $r198, $r199, $r200, $r201, $r202, $r203, $r204, $r205, $r206, $r207, $r208, $r209, $r210, $r211, $r212, $r213, $r214, $r215, $r216, $r217, $r218, $r219, $r220, $r221, $r222, $r223, $r224, $r225, $r226, $r227, $r228, $r229, $r230, $r231, $r232, r240, r257, r268, r281, r284, r286, r292, r301, r311, r313, r331, r335, r369;
        com.android.server.utils.TimingsTraceAndSlog r233;
        com.android.server.wm.ActivityTaskManagerService r244;
        com.android.server.wm.InputManagerCallback $r245;
        com.android.internal.widget.ILockSettings r262, r354;
        com.android.server.NetworkManagementService r271, r272, r355;
        com.android.server.IpSecService r274, r275, r357;
        com.android.server.net.NetworkStatsService r277, r278, r349;
        com.android.server.net.NetworkPolicyManagerService r280, r353, r393;
        com.android.server.ConnectivityService r283, r358, r394;
        com.android.server.NsdService r285;
        com.android.server.CountryDetectorService r291, r356, r397;
        com.android.server.NetworkTimeUpdateService r330, r360, r407;
        com.android.server.media.MediaRouterService r334, r359, r412;
        com.android.server.MmsServiceBroker r362;
        android.content.res.Configuration r370;
        android.content.res.Resources$Theme r372;
        java.lang.String[] r375;
        java.lang.RuntimeException r380;
        com.android.server.security.KeyAttestationApplicationIdProviderService r381;
        com.android.server.os.SchedulingPolicyService r382;
        com.android.server.TelephonyRegistry$ConfigurationProvider r383;
        com.android.server.TelephonyRegistry r384;
        com.android.server.EntropyMixer r385;
        com.android.server.VibratorService r386;
        com.android.server.DynamicSystemService r387;
        com.android.server.ConsumerIrService r388;
        com.android.server.AlarmManagerService r389;
        com.android.server.input.InputManagerService r390;
        com.android.server.policy.PhoneWindowManager r391;
        com.android.server.statusbar.StatusBarManagerService r392;
        com.android.server.SystemUpdateManagerService r395;
        com.android.server.UpdateLockService r396;
        java.lang.StringBuilder r398, r399, r414, r415;
        com.android.server.WiredAccessoryManager r400;
        com.android.server.SerialService r401;
        com.android.server.HardwarePropertiesManagerService r402;
        com.android.server.policy.role.LegacyRoleResolutionPolicy r403;
        com.android.server.role.RoleManagerService r404;
        com.android.server.DiskStatsService r405;
        com.android.server.RuntimeService r406;
        com.android.server.CertBlacklister r408;
        com.android.server._$$Lambda$SystemServer$Y1gEdKr_Hb7K7cbTDAo_WOJ_SYI r409;
        android.graphics.GraphicsStatsService r410;
        com.android.server.coverage.CoverageService r411;
        android.util.DisplayMetrics r413;
        com.android.server._$$Lambda$SystemServer$c50amMOcae1K0NdkHHoWNGvSMJQ r416;
        java.lang.Runnable r417, r418;

        r0 := @this: com.android.server.SystemServer;

        r233 := @parameter0: com.android.server.utils.TimingsTraceAndSlog;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("startOtherServices");

        r1 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        z40 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_systemtextclassifier", 0);

        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_networktime", 0);

        z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_cameraservice", 0);

        z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.enable_lefty", 0);

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.kernel.qemu");

        z41 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("1");

        $r7 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z3 = virtualinvoke $r7.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        $r8 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z42 = virtualinvoke $r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("org.chromium.arc");

        $r9 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z4 = virtualinvoke $r9.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.vr.high_performance");

        $z6 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z6 == 0 goto label002;

        $z39 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.crash_system", 0);

        if $z39 != 0 goto label001;

        goto label002;

     label001:
        r380 = new java.lang.RuntimeException;

        specialinvoke r380.<java.lang.RuntimeException: void <init>()>();

        throw r380;

     label002:
        $r10 = <com.android.server._$$Lambda$SystemServer$VBGb9VpEls6bUcVBPwYLtX7qDTs: com.android.server.'-$$Lambda$SystemServer$VBGb9VpEls6bUcVBPwYLtX7qDTs' INSTANCE>;

        r417 = (java.lang.Runnable) $r10;

        $r11 = staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r417, "SecondaryZygotePreload");

        r0.<com.android.server.SystemServer: java.util.concurrent.Future mZygotePreload> = $r11;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartKeyAttestationApplicationIdProviderService");

        r381 = new com.android.server.security.KeyAttestationApplicationIdProviderService;

        specialinvoke r381.<com.android.server.security.KeyAttestationApplicationIdProviderService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("sec_key_att_app_id_provider", r381);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartKeyChainSystemService");

        $r12 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r12.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/security/KeyChainSystemService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSchedulingPolicyService");

        r382 = new com.android.server.os.SchedulingPolicyService;

        specialinvoke r382.<com.android.server.os.SchedulingPolicyService: void <init>()>();

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("scheduling_policy", r382);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTelecomLoaderService");

        $r13 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r13.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/telecom/TelecomLoaderService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTelephonyRegistry");

        r384 = new com.android.server.TelephonyRegistry;

        r383 = new com.android.server.TelephonyRegistry$ConfigurationProvider;

        specialinvoke r383.<com.android.server.TelephonyRegistry$ConfigurationProvider: void <init>()>();

        specialinvoke r384.<com.android.server.TelephonyRegistry: void <init>(android.content.Context,com.android.server.TelephonyRegistry$ConfigurationProvider)>(r1, r383);

     label003:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("telephony.registry", r384);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartEntropyMixer");

        r385 = new com.android.server.EntropyMixer;

        specialinvoke r385.<com.android.server.EntropyMixer: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.SystemServer: com.android.server.EntropyMixer mEntropyMixer> = r385;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r14 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.SystemServer: android.content.ContentResolver mContentResolver> = $r14;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAccountManagerService");

        $r15 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r15.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.accounts.AccountManagerService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartContentService");

        $r16 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r16.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.content.ContentService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("InstallSystemProviders");

        $r17 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r17.<com.android.server.am.ActivityManagerService: void installSystemProviders()>();

        staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: void reset()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDropBoxManager");

        $r18 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r18.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/DropBoxManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartVibratorService");

        r386 = new com.android.server.VibratorService;

        specialinvoke r386.<com.android.server.VibratorService: void <init>(android.content.Context)>(r1);

     label004:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("vibrator", r386);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDynamicSystemService");

        r387 = new com.android.server.DynamicSystemService;

        specialinvoke r387.<com.android.server.DynamicSystemService: void <init>(android.content.Context)>(r1);

     label005:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("dynamic_system", r387);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label006:
        if z3 != 0 goto label010;

     label007:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartConsumerIrService");

        r388 = new com.android.server.ConsumerIrService;

        specialinvoke r388.<com.android.server.ConsumerIrService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("consumer_ir", r388);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label008:
        goto label010;

     label009:
        $r179 := @caughtexception;

        r240 = $r179;

        goto label329;

     label010:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAlarmManagerService");

        r241 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        r389 = new com.android.server.AlarmManagerService;

        specialinvoke r389.<com.android.server.AlarmManagerService: void <init>(android.content.Context)>(r1);

        virtualinvoke r241.<com.android.server.SystemServiceManager: void startService(com.android.server.SystemService)>(r389);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartInputManagerService");

        r390 = new com.android.server.input.InputManagerService;

        specialinvoke r390.<com.android.server.input.InputManagerService: void <init>(android.content.Context)>(r1);

     label011:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWindowManagerService");

        $r19 = r0.<com.android.server.SystemServer: java.util.concurrent.Future mSensorServiceStart>;

        staticinvoke <com.android.internal.util.ConcurrentUtils: java.lang.Object waitForFutureNoInterrupt(java.util.concurrent.Future,java.lang.String)>($r19, "StartSensorService");

        r0.<com.android.server.SystemServer: java.util.concurrent.Future mSensorServiceStart> = null;

        $z7 = r0.<com.android.server.SystemServer: boolean mFirstBoot>;

        if $z7 != 0 goto label013;

     label012:
        z43 = 1;

        goto label014;

     label013:
        z43 = 0;

     label014:
        z5 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        r391 = new com.android.server.policy.PhoneWindowManager;

        specialinvoke r391.<com.android.server.policy.PhoneWindowManager: void <init>()>();

        $r20 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        r244 = $r20.<com.android.server.am.ActivityManagerService: com.android.server.wm.ActivityTaskManagerService mActivityTaskManager>;

     label015:
        r5 = staticinvoke <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService main(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,com.android.server.policy.WindowManagerPolicy,com.android.server.wm.ActivityTaskManagerService)>(r1, r390, z43, z5, r391, r244);

     label016:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder,boolean,int)>("window", r5, 0, 17);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder,boolean,int)>("input", r390, 0, 1);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("SetWindowManagerService");

        $r21 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r21.<com.android.server.am.ActivityManagerService: void setWindowManager(com.android.server.wm.WindowManagerService)>(r5);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("WindowManagerServiceOnInitReady");

        virtualinvoke r5.<com.android.server.wm.WindowManagerService: void onInitReady()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r22 = <com.android.server._$$Lambda$SystemServer$NlJmG18aPrQduhRqASIdcn7G0z8: com.android.server.'-$$Lambda$SystemServer$NlJmG18aPrQduhRqASIdcn7G0z8' INSTANCE>;

        r418 = (java.lang.Runnable) $r22;

        staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r418, "StartHidlServices");

     label017:
        if z3 != 0 goto label021;

        if z4 == 0 goto label021;

     label018:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartVrManagerService");

        $r161 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r161.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/vr/VrManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label019:
        goto label021;

     label020:
        $r205 := @caughtexception;

        r240 = $r205;

        goto label329;

     label021:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartInputManager");

        $r245 = virtualinvoke r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback getInputManagerCallback()>();

        virtualinvoke r390.<com.android.server.input.InputManagerService: void setWindowManagerCallbacks(com.android.server.input.InputManagerService$WindowManagerCallbacks)>($r245);

        virtualinvoke r390.<com.android.server.input.InputManagerService: void start()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("DisplayManagerWindowManagerAndInputReady");

        $r246 = r0.<com.android.server.SystemServer: com.android.server.display.DisplayManagerService mDisplayManagerService>;

        virtualinvoke $r246.<com.android.server.display.DisplayManagerService: void windowManagerAndInputReady()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        i5 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

     label022:
        if i5 != 1 goto label025;

     label023:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "No Bluetooth Service (factory test)");

     label024:
        goto label030;

     label025:
        $r23 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z44 = virtualinvoke $r23.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.bluetooth");

     label026:
        if z44 != 0 goto label029;

     label027:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "No Bluetooth Service (Bluetooth Hardware Not Present)");

     label028:
        goto label030;

     label029:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBluetoothService");

        $r24 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r24.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/BluetoothService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label030:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("IpConnectivityMetrics");

        $r247 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r247.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/connectivity/IpConnectivityMetrics;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("NetworkWatchlistService");

        $r248 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r248.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/net/watchlist/NetworkWatchlistService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("PinnerService");

        $r249 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r249.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/PinnerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("IorapForwardingService");

        $r250 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r250.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/google/android/startop/iorap/IorapForwardingService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("SignedConfigService");

        $r251 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        staticinvoke <com.android.server.signedconfig.SignedConfigService: void registerUpdateReceiver(android.content.Context)>($r251);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("AppIntegrityService");

        $r252 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r252.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/integrity/AppIntegrityManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label031:
        z45 = virtualinvoke r5.<com.android.server.wm.WindowManagerService: boolean detectSafeMode()>();

        if z45 == 0 goto label032;

        $r160 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r160, "airplane_mode_on", 1);

     label032:
        $i0 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i0 == 1 goto label039;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartInputMethodManagerLifecycle");

        $z38 = <com.android.server.inputmethod.InputMethodSystemProperty: boolean MULTI_CLIENT_IME_ENABLED>;

        if $z38 == 0 goto label033;

        $r159 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r159.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/inputmethod/MultiClientInputMethodManagerService$Lifecycle;");

        goto label034;

     label033:
        $r157 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r157.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/inputmethod/InputMethodManagerService$Lifecycle;");

     label034:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAccessibilityManagerService");

     label035:
        $r158 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r158.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.accessibility.AccessibilityManagerService$Lifecycle");

     label036:
        goto label038;

     label037:
        $r172 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Accessibility Manager", $r172);

     label038:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label039:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeDisplayReady");

     label040:
        virtualinvoke r5.<com.android.server.wm.WindowManagerService: void displayReady()>();

     label041:
        goto label043;

     label042:
        $r164 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making display ready", $r164);

     label043:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $i1 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i1 == 1 goto label055;

        $r153 = "0";

        $r154 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("system_init.startmountservice");

        $z37 = virtualinvoke $r153.<java.lang.String: boolean equals(java.lang.Object)>($r154);

        if $z37 != 0 goto label055;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartStorageManagerService");

     label044:
        $r155 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r155.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.StorageManagerService$Lifecycle");

        $r156 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r156);

     label045:
        goto label047;

     label046:
        $r200 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting StorageManagerService", $r200);

     label047:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartStorageStatsService");

     label048:
        r256 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

     label049:
        virtualinvoke r256.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.usage.StorageStatsService$Lifecycle");

     label050:
        goto label054;

     label051:
        $r202 := @caughtexception;

        r257 = $r202;

        goto label053;

     label052:
        $r231 := @caughtexception;

        r257 = $r231;

     label053:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting StorageStatsService", r257);

     label054:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label055;

     label055:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartUiModeManager");

        $r258 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r258.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/UiModeManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $z46 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        if $z46 != 0 goto label062;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("UpdatePackagesIfNeeded");

     label056:
        $r150 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r150.<com.android.server.Watchdog: void pauseWatchingCurrentThread(java.lang.String)>("dexopt");

        $r151 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        virtualinvoke $r151.<com.android.server.pm.PackageManagerService: void updatePackagesIfNeeded()>();

     label057:
        goto label060;

     label058:
        $r165 := @caughtexception;

     label059:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("update packages", $r165);

     label060:
        $r152 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r152.<com.android.server.Watchdog: void resumeWatchingCurrentThread(java.lang.String)>("dexopt");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label062;

     label061:
        $r185 := @caughtexception;

        $r186 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r186.<com.android.server.Watchdog: void resumeWatchingCurrentThread(java.lang.String)>("dexopt");

        throw $r185;

     label062:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("PerformFstrimIfNeeded");

     label063:
        $r25 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        virtualinvoke $r25.<com.android.server.pm.PackageManagerService: void performFstrimIfNeeded()>();

     label064:
        goto label066;

     label065:
        $r228 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("performing fstrim", $r228);

     label066:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $i2 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i2 == 1 goto label272;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartLockSettingsService");

     label067:
        $r69 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r69.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.locksettings.LockSettingsService$Lifecycle");

        $r70 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("lock_settings");

        r262 = staticinvoke <com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings asInterface(android.os.IBinder)>($r70);

     label068:
        goto label070;

     label069:
        $r223 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting LockSettingsService service", $r223);

        r262 = null;

     label070:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r71 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.frp.pst");

        $z11 = virtualinvoke $r71.<java.lang.String: boolean equals(java.lang.Object)>("");

        z47 = $z11 ^ 1;

        $i4 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.gsid.image_running", 0);

        if $i4 <= 0 goto label071;

        z48 = 1;

        goto label072;

     label071:
        z48 = 0;

     label072:
        if z47 == 0 goto label073;

        if z48 != 0 goto label073;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartPersistentDataBlock");

        $r149 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r149.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/PersistentDataBlockService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label073;

     label073:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTestHarnessMode");

        $r264 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r264.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/testharness/TestHarnessModeService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z47 != 0 goto label074;

        $z36 = staticinvoke <com.android.server.oemlock.OemLockService: boolean isHalPresent()>();

        if $z36 == 0 goto label075;

     label074:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartOemLockService");

        $r72 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r72.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/oemlock/OemLockService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label075:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDeviceIdleController");

        $r265 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r265.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.DeviceIdleController");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDevicePolicyManager");

        $r266 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r266.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z3 != 0 goto label083;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartStatusBarManagerService");

     label076:
        r392 = new com.android.server.statusbar.StatusBarManagerService;

        specialinvoke r392.<com.android.server.statusbar.StatusBarManagerService: void <init>(android.content.Context)>(r1);

     label077:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("statusbar", r392);

     label078:
        goto label082;

     label079:
        $r219 := @caughtexception;

        r268 = $r219;

        goto label081;

     label080:
        $r174 := @caughtexception;

        r268 = $r174;

     label081:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting StatusBarManagerService", r268);

     label082:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label083;

     label083:
        specialinvoke r0.<com.android.server.SystemServer: void startContentCaptureService(android.content.Context,com.android.server.utils.TimingsTraceAndSlog)>(r1, r233);

        specialinvoke r0.<com.android.server.SystemServer: void startAttentionService(android.content.Context,com.android.server.utils.TimingsTraceAndSlog)>(r1, r233);

        specialinvoke r0.<com.android.server.SystemServer: void startSystemCaptionsManagerService(android.content.Context,com.android.server.utils.TimingsTraceAndSlog)>(r1, r233);

        $z12 = specialinvoke r0.<com.android.server.SystemServer: boolean deviceHasConfigString(android.content.Context,int)>(r1, 17039855);

        if $z12 == 0 goto label084;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAppPredictionService");

        $r148 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r148.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.appprediction.AppPredictionManagerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label085;

     label084:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemServer", "AppPredictionService not defined by OEM");

     label085:
        $z13 = specialinvoke r0.<com.android.server.SystemServer: boolean deviceHasConfigString(android.content.Context,int)>(r1, 17039862);

        if $z13 == 0 goto label086;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartContentSuggestionsService");

        $r147 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r147.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.contentsuggestions.ContentSuggestionsManagerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label087;

     label086:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemServer", "ContentSuggestionsService not defined by OEM");

     label087:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("InitConnectivityModuleConnector");

     label088:
        $r73 = staticinvoke <android.net.ConnectivityModuleConnector: android.net.ConnectivityModuleConnector getInstance()>();

        virtualinvoke $r73.<android.net.ConnectivityModuleConnector: void init(android.content.Context)>(r1);

     label089:
        goto label091;

     label090:
        $r184 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("initializing ConnectivityModuleConnector", $r184);

     label091:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("InitNetworkStackClient");

     label092:
        $r74 = staticinvoke <android.net.NetworkStackClient: android.net.NetworkStackClient getInstance()>();

        virtualinvoke $r74.<android.net.NetworkStackClient: void init()>();

     label093:
        goto label095;

     label094:
        $r213 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("initializing NetworkStackClient", $r213);

     label095:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNetworkManagementService");

        r271 = null;

     label096:
        r272 = staticinvoke <com.android.server.NetworkManagementService: com.android.server.NetworkManagementService create(android.content.Context)>(r1);

     label097:
        r271 = r272;

     label098:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("network_management", r272);

     label099:
        r271 = r272;

        goto label101;

     label100:
        $r209 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkManagement Service", $r209);

     label101:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartIpSecService");

        r274 = null;

     label102:
        r275 = staticinvoke <com.android.server.IpSecService: com.android.server.IpSecService create(android.content.Context,android.os.INetworkManagementService)>(r1, r271);

     label103:
        r274 = r275;

     label104:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("ipsec", r275);

     label105:
        r274 = r275;

        goto label107;

     label106:
        $r230 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting IpSec Service", $r230);

     label107:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTextServicesManager");

        $r75 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r75.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/textservices/TextServicesManagerService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z40 != 0 goto label108;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTextClassificationManagerService");

        $r146 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r146.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label108:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNetworkScoreService");

        $r76 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r76.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/NetworkScoreService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNetworkStatsService");

        r277 = null;

     label109:
        r278 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService create(android.content.Context,android.os.INetworkManagementService)>(r1, r271);

     label110:
        r277 = r278;

     label111:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("netstats", r278);

     label112:
        r277 = r278;

        goto label114;

     label113:
        $r191 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkStats Service", $r191);

     label114:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNetworkPolicyManagerService");

     label115:
        r393 = new com.android.server.net.NetworkPolicyManagerService;

        r280 = r393;

        $r77 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        specialinvoke r393.<com.android.server.net.NetworkPolicyManagerService: void <init>(android.content.Context,android.app.IActivityManager,android.os.INetworkManagementService)>(r1, $r77, r271);

     label116:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("netpolicy", r393);

     label117:
        goto label121;

     label118:
        $r189 := @caughtexception;

        r281 = $r189;

        goto label120;

     label119:
        $r208 := @caughtexception;

        r281 = $r208;

        r280 = null;

     label120:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkPolicy Service", r281);

     label121:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r282 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z49 = virtualinvoke $r282.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.wifi");

        if $z49 == 0 goto label122;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWifi");

        $r144 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r144.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.WifiService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWifiScanning");

        $r145 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r145.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.scanner.WifiScanningService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label122:
        $r78 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z14 = virtualinvoke $r78.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.wifi.rtt");

        if $z14 == 0 goto label123;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartRttService");

        $r143 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r143.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.rtt.RttService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label123:
        $r79 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z15 = virtualinvoke $r79.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.wifi.aware");

        if $z15 == 0 goto label124;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWifiAware");

        $r142 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r142.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.aware.WifiAwareService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label124:
        $r80 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z16 = virtualinvoke $r80.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.wifi.direct");

        if $z16 == 0 goto label125;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWifiP2P");

        $r141 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r141.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.p2p.WifiP2pService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label125:
        $r81 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z17 = virtualinvoke $r81.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.lowpan");

        if $z17 == 0 goto label126;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartLowpan");

        $r140 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r140.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.lowpan.LowpanService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label126:
        $r82 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z18 = virtualinvoke $r82.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.ethernet");

        if $z18 != 0 goto label127;

        $r139 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z35 = virtualinvoke $r139.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.host");

        if $z35 == 0 goto label128;

     label127:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartEthernet");

        $r83 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r83.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.ethernet.EthernetService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label128:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartConnectivityService");

     label129:
        r394 = new com.android.server.ConnectivityService;

        r283 = r394;

        specialinvoke r394.<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)>(r1, r271, r277, r280);

     label130:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder,boolean,int)>("connectivity", r394, 0, 6);

        virtualinvoke r280.<com.android.server.net.NetworkPolicyManagerService: void bindConnectivityManager(android.net.IConnectivityManager)>(r394);

     label131:
        goto label135;

     label132:
        $r232 := @caughtexception;

        r284 = $r232;

        goto label134;

     label133:
        $r182 := @caughtexception;

        r284 = $r182;

        r283 = null;

     label134:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Connectivity Service", r284);

     label135:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNsdService");

     label136:
        r285 = staticinvoke <com.android.server.NsdService: com.android.server.NsdService create(android.content.Context)>(r1);

     label137:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("servicediscovery", r285);

     label138:
        goto label142;

     label139:
        $r183 := @caughtexception;

        r286 = $r183;

        goto label141;

     label140:
        $r216 := @caughtexception;

        r286 = $r216;

     label141:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Service Discovery Service", r286);

     label142:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSystemUpdateManagerService");

     label143:
        r395 = new com.android.server.SystemUpdateManagerService;

        specialinvoke r395.<com.android.server.SystemUpdateManagerService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("system_update", r395);

     label144:
        goto label146;

     label145:
        $r171 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting SystemUpdateManagerService", $r171);

     label146:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartUpdateLockService");

     label147:
        r396 = new com.android.server.UpdateLockService;

        specialinvoke r396.<com.android.server.UpdateLockService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("updatelock", r396);

     label148:
        goto label150;

     label149:
        $r166 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting UpdateLockService", $r166);

     label150:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNotificationManager");

        $r84 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r84.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/notification/NotificationManagerService;");

        staticinvoke <com.android.internal.notification.SystemNotificationChannels: void removeDeprecated(android.content.Context)>(r1);

        staticinvoke <com.android.internal.notification.SystemNotificationChannels: void createAll(android.content.Context)>(r1);

        $r85 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("notification");

        staticinvoke <android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>($r85);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDeviceMonitor");

        $r86 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r86.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/storage/DeviceStorageMonitorService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartLocationManagerService");

        $r87 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r87.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/location/LocationManagerService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartCountryDetectorService");

     label151:
        r397 = new com.android.server.CountryDetectorService;

        r291 = r397;

        specialinvoke r397.<com.android.server.CountryDetectorService: void <init>(android.content.Context)>(r1);

     label152:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("country_detector", r397);

     label153:
        goto label157;

     label154:
        $r220 := @caughtexception;

        r292 = $r220;

        goto label156;

     label155:
        $r169 := @caughtexception;

        r292 = $r169;

        r291 = null;

     label156:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Country Detector", r292);

     label157:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTimeDetectorService");

     label158:
        $r293 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r293.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.timedetector.TimeDetectorService$Lifecycle");

     label159:
        goto label161;

     label160:
        $r204 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting StartTimeDetectorService service", $r204);

     label161:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTimeZoneDetectorService");

     label162:
        $r88 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r88.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.timezonedetector.TimeZoneDetectorService$Lifecycle");

     label163:
        goto label165;

     label164:
        $r192 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting StartTimeZoneDetectorService service", $r192);

     label165:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z3 != 0 goto label170;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSearchManagerService");

     label166:
        $r138 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r138.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.search.SearchManagerService$Lifecycle");

     label167:
        goto label169;

     label168:
        $r199 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Search Service", $r199);

     label169:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label170:
        $r297 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z50 = virtualinvoke $r297.<android.content.res.Resources: boolean getBoolean(int)>(17891453);

        if $z50 == 0 goto label171;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWallpaperManagerService");

        $r137 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r137.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wallpaper.WallpaperManagerService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label172;

     label171:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Wallpaper service disabled by config");

     label172:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAudioService");

        if z42 != 0 goto label173;

        $r136 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r136.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/audio/AudioService$Lifecycle;");

        goto label182;

     label173:
        $r89 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r298 = virtualinvoke $r89.<android.content.res.Resources: java.lang.String getString(int)>(17039879);

     label174:
        r299 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

     label175:
        r398 = new java.lang.StringBuilder;

        specialinvoke r398.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r398.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r298);

     label176:
        virtualinvoke r398.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$Lifecycle");

        $r90 = virtualinvoke r398.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r299.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>($r90);

     label177:
        goto label182;

     label178:
        $r197 := @caughtexception;

        r301 = $r197;

        goto label181;

     label179:
        $r178 := @caughtexception;

        r301 = $r178;

        goto label181;

     label180:
        $r221 := @caughtexception;

        r301 = $r221;

     label181:
        r399 = new java.lang.StringBuilder;

        specialinvoke r399.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r399.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("starting ");

        virtualinvoke r399.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r298);

        $r304 = virtualinvoke r399.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>($r304, r301);

     label182:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSoundTriggerMiddlewareService");

        $r305 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r305.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/soundtrigger_middleware/SoundTriggerMiddlewareService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r306 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z51 = virtualinvoke $r306.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.broadcastradio");

        if $z51 == 0 goto label183;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBroadcastRadioService");

        $r135 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r135.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/broadcastradio/BroadcastRadioService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label183:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDockObserver");

        $r91 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r91.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/DockObserver;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z3 == 0 goto label184;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartThermalObserver");

        $r134 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r134.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.google.android.clockwork.ThermalObserver");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label184:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWiredAccessoryManager");

     label185:
        r400 = new com.android.server.WiredAccessoryManager;

        specialinvoke r400.<com.android.server.WiredAccessoryManager: void <init>(android.content.Context,com.android.server.input.InputManagerService)>(r1, r390);

        virtualinvoke r390.<com.android.server.input.InputManagerService: void setWiredAccessoryCallbacks(com.android.server.input.InputManagerService$WiredAccessoryCallbacks)>(r400);

     label186:
        goto label188;

     label187:
        $r173 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting WiredAccessoryManager", $r173);

     label188:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r92 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z19 = virtualinvoke $r92.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.midi");

        if $z19 == 0 goto label189;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartMidiManager");

        $r133 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r133.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.midi.MidiService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label189:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAdbService");

     label190:
        $r93 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r93.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.adb.AdbService$Lifecycle");

     label191:
        goto label193;

     label192:
        $r215 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SystemServer", "Failure starting AdbService");

     label193:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r94 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z20 = virtualinvoke $r94.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.host");

        if $z20 != 0 goto label194;

        $r132 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z34 = virtualinvoke $r132.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.accessory");

        if $z34 != 0 goto label194;

        if z41 == 0 goto label195;

     label194:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartUsbService");

        $r309 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r309.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.usb.UsbService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label195:
        if z3 != 0 goto label203;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSerialService");

     label196:
        r401 = new com.android.server.SerialService;

        specialinvoke r401.<com.android.server.SerialService: void <init>(android.content.Context)>(r1);

     label197:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("serial", r401);

     label198:
        goto label202;

     label199:
        $r188 := @caughtexception;

        r311 = $r188;

        goto label201;

     label200:
        $r168 := @caughtexception;

        r311 = $r168;

     label201:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", "Failure starting SerialService", r311);

     label202:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label203:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartHardwarePropertiesManagerService");

     label204:
        r402 = new com.android.server.HardwarePropertiesManagerService;

        specialinvoke r402.<com.android.server.HardwarePropertiesManagerService: void <init>(android.content.Context)>(r1);

     label205:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("hardware_properties", r402);

     label206:
        goto label210;

     label207:
        $r167 := @caughtexception;

        r313 = $r167;

        goto label209;

     label208:
        $r170 := @caughtexception;

        r313 = $r170;

     label209:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", "Failure starting HardwarePropertiesManagerService", r313);

     label210:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTwilightService");

        $r314 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r314.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/twilight/TwilightService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartColorDisplay");

        $r315 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r315.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/display/color/ColorDisplayService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartJobScheduler");

        $r316 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r316.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.job.JobSchedulerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSoundTrigger");

        $r317 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r317.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/soundtrigger/SoundTriggerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTrustManager");

        $r318 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r318.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/trust/TrustManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r319 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z52 = virtualinvoke $r319.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.backup");

        if $z52 == 0 goto label211;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBackupManager");

        $r131 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r131.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.backup.BackupManagerService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label211:
        $r95 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z21 = virtualinvoke $r95.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.app_widgets");

        if $z21 != 0 goto label212;

        $r130 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z33 = virtualinvoke $r130.<android.content.res.Resources: boolean getBoolean(int)>(17891435);

        if $z33 == 0 goto label213;

     label212:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAppWidgetService");

        $r96 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r96.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.appwidget.AppWidgetService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label213:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartRoleManagerService");

        r320 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        r321 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        r404 = new com.android.server.role.RoleManagerService;

        r403 = new com.android.server.policy.role.LegacyRoleResolutionPolicy;

        specialinvoke r403.<com.android.server.policy.role.LegacyRoleResolutionPolicy: void <init>(android.content.Context)>(r321);

        specialinvoke r404.<com.android.server.role.RoleManagerService: void <init>(android.content.Context,com.android.server.role.RoleManagerService$RoleHoldersResolver)>(r321, r403);

        virtualinvoke r320.<com.android.server.SystemServiceManager: void startService(com.android.server.SystemService)>(r404);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartVoiceRecognitionManager");

        $r324 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r324.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.voiceinteraction.VoiceInteractionManagerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r325 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z53 = staticinvoke <com.android.server.GestureLauncherService: boolean isGestureLauncherEnabled(android.content.res.Resources)>($r325);

        if $z53 == 0 goto label214;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartGestureLauncher");

        $r129 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r129.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/GestureLauncherService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label214:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSensorNotification");

        $r97 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r97.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/SensorNotificationService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r98 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z22 = virtualinvoke $r98.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.context_hub");

        if $z22 == 0 goto label215;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartContextHubSystemService");

        $r128 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r128.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/ContextHubSystemService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label215:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDiskStatsService");

     label216:
        r405 = new com.android.server.DiskStatsService;

        specialinvoke r405.<com.android.server.DiskStatsService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("diskstats", r405);

     label217:
        goto label219;

     label218:
        $r190 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting DiskStats Service", $r190);

     label219:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("RuntimeService");

     label220:
        r406 = new com.android.server.RuntimeService;

        specialinvoke r406.<com.android.server.RuntimeService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("runtime", r406);

     label221:
        goto label223;

     label222:
        $r210 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting RuntimeService", $r210);

     label223:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $z23 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        if $z23 != 0 goto label224;

        $r127 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z32 = virtualinvoke $r127.<android.content.res.Resources: boolean getBoolean(int)>(17891452);

        if $z32 == 0 goto label224;

        z54 = 1;

        goto label225;

     label224:
        z54 = 0;

     label225:
        if z54 == 0 goto label226;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTimeZoneRulesManagerService");

        $r126 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r126.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.timezone.RulesManagerService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label226:
        r330 = null;

        if z3 != 0 goto label234;

        r330 = null;

        if z0 != 0 goto label234;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNetworkTimeUpdateService");

     label227:
        r407 = new com.android.server.NetworkTimeUpdateService;

        r330 = r407;

        specialinvoke r407.<com.android.server.NetworkTimeUpdateService: void <init>(android.content.Context)>(r1);

     label228:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("network_time_update_service", r407);

     label229:
        goto label233;

     label230:
        $r224 := @caughtexception;

        r331 = $r224;

        goto label232;

     label231:
        $r196 := @caughtexception;

        r331 = $r196;

        r330 = null;

     label232:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkTimeUpdate service", r331);

     label233:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label234:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("CertBlacklister");

     label235:
        r408 = new com.android.server.CertBlacklister;

        specialinvoke r408.<com.android.server.CertBlacklister: void <init>(android.content.Context)>(r1);

     label236:
        goto label238;

     label237:
        $r227 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting CertBlacklister", $r227);

     label238:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartEmergencyAffordanceService");

        $r99 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r99.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/emergency/EmergencyAffordanceService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        r409 = new com.android.server._$$Lambda$SystemServer$Y1gEdKr_Hb7K7cbTDAo_WOJ_SYI;

        specialinvoke r409.<com.android.server._$$Lambda$SystemServer$Y1gEdKr_Hb7K7cbTDAo_WOJ_SYI: void <init>(com.android.server.SystemServer)>(r0);

        $r101 = staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r409, "startBlobStoreManagerService");

        r0.<com.android.server.SystemServer: java.util.concurrent.Future mBlobStoreServiceStart> = $r101;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDreamManager");

        $r102 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r102.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/dreams/DreamManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("AddGraphicsStatsService");

        r410 = new android.graphics.GraphicsStatsService;

        specialinvoke r410.<android.graphics.GraphicsStatsService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("graphicsstats", r410);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $z24 = <com.android.server.coverage.CoverageService: boolean ENABLED>;

        if $z24 == 0 goto label239;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("AddCoverageService");

        r411 = new com.android.server.coverage.CoverageService;

        specialinvoke r411.<com.android.server.coverage.CoverageService: void <init>()>();

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("coverage", r411);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label239:
        $r104 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z25 = virtualinvoke $r104.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.print");

        if $z25 == 0 goto label240;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartPrintManager");

        $r124 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r124.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.print.PrintManagerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label240:
        $r105 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z26 = virtualinvoke $r105.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.companion_device_setup");

        if $z26 == 0 goto label241;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartCompanionDeviceManager");

        $r123 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r123.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.companion.CompanionDeviceManagerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label241:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartRestrictionManager");

        $r106 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r106.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/restrictions/RestrictionsManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartMediaSessionService");

        $r107 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r107.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/media/MediaSessionService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r108 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z27 = virtualinvoke $r108.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.hdmi.cec");

        if $z27 == 0 goto label242;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartHdmiControlService");

        $r122 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r122.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/hdmi/HdmiControlService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label242:
        $r109 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z28 = virtualinvoke $r109.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.live_tv");

        if $z28 != 0 goto label243;

        $r121 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z31 = virtualinvoke $r121.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        if $z31 == 0 goto label244;

     label243:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTvInputManager");

        $r110 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r110.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/tv/TvInputManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label244:
        $r333 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z55 = virtualinvoke $r333.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.tv.tuner");

        if $z55 == 0 goto label245;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTunerResourceManager");

        $r120 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r120.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/tv/tunerresourcemanager/TunerResourceManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label245:
        $r111 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z29 = virtualinvoke $r111.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.picture_in_picture");

        if $z29 == 0 goto label246;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartMediaResourceMonitor");

        $r119 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r119.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/media/MediaResourceMonitorService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label246:
        $r112 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z30 = virtualinvoke $r112.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        if $z30 == 0 goto label247;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTvRemoteService");

        $r118 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r118.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/tv/TvRemoteService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label247:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartMediaRouterService");

     label248:
        r412 = new com.android.server.media.MediaRouterService;

        r334 = r412;

        specialinvoke r412.<com.android.server.media.MediaRouterService: void <init>(android.content.Context)>(r1);

     label249:
        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("media_router", r412);

     label250:
        goto label254;

     label251:
        $r206 := @caughtexception;

        r335 = $r206;

        goto label253;

     label252:
        $r175 := @caughtexception;

        r335 = $r175;

        r334 = null;

     label253:
        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting MediaRouterService", r335);

     label254:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r336 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        z56 = virtualinvoke $r336.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.biometrics.face");

        $r337 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        z57 = virtualinvoke $r337.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.biometrics.iris");

        $r338 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        z58 = virtualinvoke $r338.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.fingerprint");

        if z56 == 0 goto label255;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartFaceSensor");

        $r117 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r117.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/biometrics/face/FaceService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        goto label255;

     label255:
        if z57 == 0 goto label256;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartIrisSensor");

        $r116 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r116.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/biometrics/iris/IrisService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label256:
        if z58 == 0 goto label257;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartFingerprintSensor");

        $r115 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r115.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/biometrics/fingerprint/FingerprintService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label257:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBiometricService");

        $r113 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r113.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/biometrics/BiometricService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAuthService");

        $r114 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r114.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/biometrics/AuthService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBackgroundDexOptService");

     label258:
        staticinvoke <com.android.server.pm.BackgroundDexOptService: void schedule(android.content.Context)>(r1);

     label259:
        goto label261;

     label260:
        $r212 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting StartBackgroundDexOptService", $r212);

     label261:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z3 != 0 goto label266;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDynamicCodeLoggingService");

     label262:
        staticinvoke <com.android.server.pm.DynamicCodeLoggingService: void schedule(android.content.Context)>(r1);

     label263:
        goto label265;

     label264:
        $r211 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting DynamicCodeLoggingService", $r211);

     label265:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label266:
        if z3 != 0 goto label271;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartPruneInstantAppsJobService");

     label267:
        staticinvoke <com.android.server.PruneInstantAppsJobService: void schedule(android.content.Context)>(r1);

     label268:
        goto label270;

     label269:
        $r181 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("StartPruneInstantAppsJobService", $r181);

     label270:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label271:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartShortcutServiceLifecycle");

        $r342 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r342.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/pm/ShortcutService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartLauncherAppsService");

        $r343 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r343.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/pm/LauncherAppsService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartCrossProfileAppsService");

        $r344 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r344.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/pm/CrossProfileAppsService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartPeopleService");

        $r345 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r345.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/people/PeopleService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        r349 = r277;

        r353 = r280;

        r354 = r262;

        r355 = r271;

        r356 = r291;

        r357 = r274;

        r358 = r283;

        r359 = r334;

        r360 = r330;

        goto label273;

     label272:
        r356 = null;

        r354 = null;

        r355 = null;

        r357 = null;

        r349 = null;

        r358 = null;

        r359 = null;

        r360 = null;

        r353 = null;

     label273:
        if z3 != 0 goto label274;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartMediaProjectionManager");

        $r68 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r68.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/media/projection/MediaProjectionManagerService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label274:
        if z3 == 0 goto label276;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWearPowerService");

        $r62 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r62.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.clockwork.power.WearPowerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWearConnectivityService");

        $r63 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r63.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.clockwork.connectivity.WearConnectivityService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWearDisplayService");

        $r64 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r64.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.google.android.clockwork.display.WearDisplayService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWearTimeService");

        $r65 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r65.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.google.android.clockwork.time.WearTimeService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z2 == 0 goto label275;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWearLeftyService");

        $r67 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r67.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.google.android.clockwork.lefty.WearLeftyService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label275:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartWearGlobalActionsService");

        $r66 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r66.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.clockwork.globalactions.GlobalActionsService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label276:
        $r361 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z59 = virtualinvoke $r361.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.slices_disabled");

        if $z59 != 0 goto label277;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSliceManagerService");

        $r61 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r61.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.slice.SliceManagerService$Lifecycle");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label277:
        if z1 != 0 goto label278;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartCameraServiceProxy");

        $r60 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r60.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/camera/CameraServiceProxy;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label278:
        $r26 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z8 = virtualinvoke $r26.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.embedded");

        if $z8 == 0 goto label279;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartIoTSystemService");

        $r59 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r59.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.things.server.IoTSystemService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label279:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartStatsCompanion");

        $r27 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r27.<com.android.server.SystemServiceManager: com.android.server.SystemService startServiceFromJar(java.lang.String,java.lang.String)>("com.android.server.stats.StatsCompanion$Lifecycle", "/apex/com.android.os.statsd/javalib/service-statsd.jar");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartStatsPullAtomService");

        $r28 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r28.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.stats.pull.StatsPullAtomService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartIncidentCompanionService");

        $r29 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r29.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/incident/IncidentCompanionService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z45 == 0 goto label280;

        $r58 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r58.<com.android.server.am.ActivityManagerService: void enterSafeMode()>();

     label280:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartMmsService");

        $r30 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r31 = virtualinvoke $r30.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/MmsServiceBroker;");

        r362 = (com.android.server.MmsServiceBroker) $r31;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r32 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z9 = virtualinvoke $r32.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.autofill");

        if $z9 == 0 goto label281;

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartAutoFillService");

        $r57 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r57.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.autofill.AutofillManagerService");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label281:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartClipboardService");

        $r33 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r33.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/clipboard/ClipboardService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("AppServiceManager");

        $r34 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r34.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/appbinding/AppBindingService$Lifecycle;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeVibratorServiceReady");

     label282:
        virtualinvoke r386.<com.android.server.VibratorService: void systemReady()>();

     label283:
        goto label285;

     label284:
        $r187 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Vibrator Service ready", $r187);

     label285:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeLockSettingsServiceReady");

        if r354 == null goto label289;

     label286:
        interfaceinvoke r354.<com.android.internal.widget.ILockSettings: void systemReady()>();

     label287:
        goto label289;

     label288:
        $r201 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Lock Settings Service ready", $r201);

     label289:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBootPhaseLockSettingsReady");

        $r365 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r365.<com.android.server.SystemServiceManager: void startBootPhase(com.android.server.utils.TimingsTraceAndSlog,int)>(r233, 480);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBootPhaseSystemServicesReady");

        $r366 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r366.<com.android.server.SystemServiceManager: void startBootPhase(com.android.server.utils.TimingsTraceAndSlog,int)>(r233, 500);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeWindowManagerServiceReady");

     label290:
        virtualinvoke r5.<com.android.server.wm.WindowManagerService: void systemReady()>();

     label291:
        goto label293;

     label292:
        $r203 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Window Manager Service ready", $r203);

     label293:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        entermonitor class "Lcom/android/server/SystemService;";

     label294:
        r368 = <com.android.server.SystemServer: java.util.LinkedList sPendingWtfs>;

     label295:
        if r368 == null goto label299;

     label296:
        $r56 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r55 = <com.android.server.SystemServer: java.util.LinkedList sPendingWtfs>;

        virtualinvoke $r56.<com.android.server.am.ActivityManagerService: void schedulePendingSystemServerWtfs(java.util.LinkedList)>($r55);

        <com.android.server.SystemServer: java.util.LinkedList sPendingWtfs> = null;

     label297:
        goto label299;

     label298:
        $r222 := @caughtexception;

        r369 = $r222;

        goto label318;

     label299:
        exitmonitor class "Lcom/android/server/SystemService;";

     label300:
        if z45 == 0 goto label301;

        $r54 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r54.<com.android.server.am.ActivityManagerService: void showSafeModeOverlay()>();

     label301:
        i6 = 0;

        r370 = virtualinvoke r5.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration(int)>(0);

        r413 = new android.util.DisplayMetrics;

        specialinvoke r413.<android.util.DisplayMetrics: void <init>()>();

        $r36 = virtualinvoke r1.<android.content.Context: android.view.Display getDisplay()>();

        virtualinvoke $r36.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r413);

        $r37 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        virtualinvoke $r37.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>(r370, r413);

        r372 = virtualinvoke r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $i3 = virtualinvoke r372.<android.content.res.Resources$Theme: int getChangingConfigurations()>();

        if $i3 == 0 goto label302;

        virtualinvoke r372.<android.content.res.Resources$Theme: void rebase()>();

     label302:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakePowerManagerServiceReady");

     label303:
        $r39 = r0.<com.android.server.SystemServer: com.android.server.power.PowerManagerService mPowerManagerService>;

        $r38 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r40 = virtualinvoke $r38.<com.android.server.am.ActivityManagerService: com.android.internal.app.IAppOpsService getAppOpsService()>();

        virtualinvoke $r39.<com.android.server.power.PowerManagerService: void systemReady(com.android.internal.app.IAppOpsService)>($r40);

     label304:
        goto label306;

     label305:
        $r198 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Power Manager Service ready", $r198);

     label306:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartPermissionPolicyService");

        $r41 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r41.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "Lcom/android/server/policy/PermissionPolicyService;");

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakePackageManagerServiceReady");

        $r42 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        virtualinvoke $r42.<com.android.server.pm.PackageManagerService: void systemReady()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeDisplayManagerServiceReady");

     label307:
        $r43 = r0.<com.android.server.SystemServer: com.android.server.display.DisplayManagerService mDisplayManagerService>;

        $z10 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        virtualinvoke $r43.<com.android.server.display.DisplayManagerService: void systemReady(boolean,boolean)>(z45, $z10);

     label308:
        goto label310;

     label309:
        $r226 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Display Manager Service ready", $r226);

     label310:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r44 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r44.<com.android.server.SystemServiceManager: void setSafeMode(boolean)>(z45);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartDeviceSpecificServices");

        $r45 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $r46 = virtualinvoke $r45.<android.content.Context: android.content.res.Resources getResources()>();

        r375 = virtualinvoke $r46.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236011);

        i7 = lengthof r375;

     label311:
        if i6 >= i7 goto label316;

        r376 = r375[i6];

        r414 = new java.lang.StringBuilder;

        specialinvoke r414.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r414.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StartDeviceSpecificServices ");

        virtualinvoke r414.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r376);

        $r52 = virtualinvoke r414.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>($r52);

     label312:
        $r53 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r53.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>(r376);

     label313:
        goto label315;

     label314:
        $r193 := @caughtexception;

        r415 = new java.lang.StringBuilder;

        specialinvoke r415.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r415.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("starting ");

        virtualinvoke r415.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r376);

        $r195 = virtualinvoke r415.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>($r195, $r193);

     label315:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        i6 = i6 + 1;

        goto label311;

     label316:
        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartBootPhaseDeviceSpecificServicesReady");

        $r47 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r47.<com.android.server.SystemServiceManager: void startBootPhase(com.android.server.utils.TimingsTraceAndSlog,int)>(r233, 520);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r48 = r0.<com.android.server.SystemServer: java.util.concurrent.Future mBlobStoreServiceStart>;

        staticinvoke <com.android.internal.util.ConcurrentUtils: java.lang.Object waitForFutureNoInterrupt(java.util.concurrent.Future,java.lang.String)>($r48, "startBlobStoreManagerService");

        $r50 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        r416 = new com.android.server._$$Lambda$SystemServer$c50amMOcae1K0NdkHHoWNGvSMJQ;

        specialinvoke r416.<com.android.server._$$Lambda$SystemServer$c50amMOcae1K0NdkHHoWNGvSMJQ: void <init>(com.android.server.SystemServer,com.android.server.utils.TimingsTraceAndSlog,android.content.Context,com.android.server.wm.WindowManagerService,boolean,com.android.server.ConnectivityService,com.android.server.NetworkManagementService,com.android.server.net.NetworkPolicyManagerService,com.android.server.IpSecService,com.android.server.net.NetworkStatsService,com.android.server.CountryDetectorService,com.android.server.NetworkTimeUpdateService,com.android.server.input.InputManagerService,com.android.server.TelephonyRegistry,com.android.server.media.MediaRouterService,com.android.server.MmsServiceBroker)>(r0, r233, r1, r5, z45, r358, r355, r353, r357, r349, r356, r360, r390, r384, r359, r362);

        virtualinvoke $r50.<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable,com.android.server.utils.TimingsTraceAndSlog)>(r416, r233);

        virtualinvoke r233.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;

     label317:
        $r218 := @caughtexception;

        r369 = $r218;

     label318:
        exitmonitor class "Lcom/android/server/SystemService;";

     label319:
        throw r369;

     label320:
        $r207 := @caughtexception;

        r369 = $r207;

        goto label318;

     label321:
        $r225 := @caughtexception;

        r240 = $r225;

        goto label329;

     label322:
        $r176 := @caughtexception;

        r240 = $r176;

        goto label329;

     label323:
        $r229 := @caughtexception;

        r240 = $r229;

        goto label329;

     label324:
        $r214 := @caughtexception;

        r240 = $r214;

        goto label329;

     label325:
        $r163 := @caughtexception;

        r240 = $r163;

        goto label329;

     label326:
        $r217 := @caughtexception;

        r240 = $r217;

        goto label329;

     label327:
        $r177 := @caughtexception;

        r240 = $r177;

        goto label329;

     label328:
        $r180 := @caughtexception;

        r240 = $r180;

     label329:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("System", "******************************************");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("System", "************ Failure starting core service");

        throw r240;

        catch java.lang.Throwable from label002 to label003 with label328;
        catch java.lang.Throwable from label003 to label004 with label327;
        catch java.lang.Throwable from label004 to label005 with label326;
        catch java.lang.Throwable from label005 to label006 with label325;
        catch java.lang.Throwable from label007 to label008 with label009;
        catch java.lang.Throwable from label010 to label011 with label324;
        catch java.lang.Throwable from label011 to label012 with label323;
        catch java.lang.Throwable from label014 to label015 with label323;
        catch java.lang.Throwable from label015 to label016 with label322;
        catch java.lang.Throwable from label016 to label017 with label321;
        catch java.lang.Throwable from label018 to label019 with label020;
        catch java.lang.Throwable from label021 to label022 with label321;
        catch java.lang.Throwable from label023 to label024 with label020;
        catch java.lang.Throwable from label025 to label026 with label321;
        catch java.lang.Throwable from label027 to label028 with label020;
        catch java.lang.Throwable from label029 to label030 with label321;
        catch java.lang.Throwable from label030 to label031 with label321;
        catch java.lang.Throwable from label035 to label036 with label037;
        catch java.lang.Throwable from label040 to label041 with label042;
        catch java.lang.Throwable from label044 to label045 with label046;
        catch java.lang.Throwable from label048 to label049 with label052;
        catch java.lang.Throwable from label049 to label050 with label051;
        catch java.lang.Throwable from label056 to label057 with label058;
        catch java.lang.Throwable from label059 to label060 with label061;
        catch java.lang.Throwable from label063 to label064 with label065;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label076 to label077 with label080;
        catch java.lang.Throwable from label077 to label078 with label079;
        catch java.lang.Throwable from label088 to label089 with label090;
        catch java.lang.Throwable from label092 to label093 with label094;
        catch java.lang.Throwable from label096 to label097 with label100;
        catch java.lang.Throwable from label098 to label099 with label100;
        catch java.lang.Throwable from label102 to label103 with label106;
        catch java.lang.Throwable from label104 to label105 with label106;
        catch java.lang.Throwable from label109 to label110 with label113;
        catch java.lang.Throwable from label111 to label112 with label113;
        catch java.lang.Throwable from label115 to label116 with label119;
        catch java.lang.Throwable from label116 to label117 with label118;
        catch java.lang.Throwable from label129 to label130 with label133;
        catch java.lang.Throwable from label130 to label131 with label132;
        catch java.lang.Throwable from label136 to label137 with label140;
        catch java.lang.Throwable from label137 to label138 with label139;
        catch java.lang.Throwable from label143 to label144 with label145;
        catch java.lang.Throwable from label147 to label148 with label149;
        catch java.lang.Throwable from label151 to label152 with label155;
        catch java.lang.Throwable from label152 to label153 with label154;
        catch java.lang.Throwable from label158 to label159 with label160;
        catch java.lang.Throwable from label162 to label163 with label164;
        catch java.lang.Throwable from label166 to label167 with label168;
        catch java.lang.Throwable from label174 to label175 with label180;
        catch java.lang.Throwable from label175 to label176 with label179;
        catch java.lang.Throwable from label176 to label177 with label178;
        catch java.lang.Throwable from label185 to label186 with label187;
        catch java.lang.Throwable from label190 to label191 with label192;
        catch java.lang.Throwable from label196 to label197 with label200;
        catch java.lang.Throwable from label197 to label198 with label199;
        catch java.lang.Throwable from label204 to label205 with label208;
        catch java.lang.Throwable from label205 to label206 with label207;
        catch java.lang.Throwable from label216 to label217 with label218;
        catch java.lang.Throwable from label220 to label221 with label222;
        catch java.lang.Throwable from label227 to label228 with label231;
        catch java.lang.Throwable from label228 to label229 with label230;
        catch java.lang.Throwable from label235 to label236 with label237;
        catch java.lang.Throwable from label248 to label249 with label252;
        catch java.lang.Throwable from label249 to label250 with label251;
        catch java.lang.Throwable from label258 to label259 with label260;
        catch java.lang.Throwable from label262 to label263 with label264;
        catch java.lang.Throwable from label267 to label268 with label269;
        catch java.lang.Throwable from label282 to label283 with label284;
        catch java.lang.Throwable from label286 to label287 with label288;
        catch java.lang.Throwable from label290 to label291 with label292;
        catch java.lang.Throwable from label294 to label295 with label317;
        catch java.lang.Throwable from label296 to label297 with label298;
        catch java.lang.Throwable from label299 to label300 with label317;
        catch java.lang.Throwable from label303 to label304 with label305;
        catch java.lang.Throwable from label307 to label308 with label309;
        catch java.lang.Throwable from label312 to label313 with label314;
        catch java.lang.Throwable from label318 to label319 with label320;
    }

    private static native void startSensorService();

    private void startSystemCaptionsManagerService(android.content.Context, com.android.server.utils.TimingsTraceAndSlog)
    {
        com.android.server.SystemServer r0;
        android.content.Context r1;
        com.android.server.utils.TimingsTraceAndSlog r2;
        boolean $z0;
        com.android.server.SystemServiceManager $r3;

        r0 := @this: com.android.server.SystemServer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.utils.TimingsTraceAndSlog;

        $z0 = specialinvoke r0.<com.android.server.SystemServer: boolean deviceHasConfigString(android.content.Context,int)>(r1, 17039871);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SystemServer", "SystemCaptionsManagerService disabled because resource is not overlaid");

        return;

     label1:
        virtualinvoke r2.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSystemCaptionsManagerService");

        $r3 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r3.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.systemcaptions.SystemCaptionsManagerService");

        virtualinvoke r2.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    private static void startSystemUi(android.content.Context, com.android.server.wm.WindowManagerService)
    {
        android.content.Context r0;
        com.android.server.wm.WindowManagerService r1;
        android.content.pm.PackageManagerInternal r2;
        java.lang.Object $r4;
        android.content.Intent $r5;
        android.content.ComponentName $r6;
        android.os.UserHandle $r9;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.wm.WindowManagerService;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r2 = (android.content.pm.PackageManagerInternal) $r4;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>()>();

        $r6 = virtualinvoke r2.<android.content.pm.PackageManagerInternal: android.content.ComponentName getSystemUiServiceComponent()>();

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r6);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(256);

        $r9 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke r0.<android.content.Context: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)>($r5, $r9);

        virtualinvoke r1.<com.android.server.wm.WindowManagerService: void onSystemUiStarted()>();

        return;
    }

    public void lambda$startOtherServices$3$SystemServer()
    {
        com.android.server.SystemServer r0;
        com.android.server.utils.TimingsTraceAndSlog r1;
        com.android.server.SystemServiceManager $r2;

        r0 := @this: com.android.server.SystemServer;

        r1 = staticinvoke <com.android.server.utils.TimingsTraceAndSlog: com.android.server.utils.TimingsTraceAndSlog newAsyncLog()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("startBlobStoreManagerService");

        $r2 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r2.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.blob.BlobStoreManagerService");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    public void lambda$startOtherServices$4$SystemServer()
    {
        com.android.server.SystemServer r0;
        com.android.server.utils.TimingsTraceAndSlog r1;
        java.util.concurrent.Future $r2;
        com.android.server.webkit.WebViewUpdateService $r4;

        r0 := @this: com.android.server.SystemServer;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "WebViewFactoryPreparation");

        r1 = staticinvoke <com.android.server.utils.TimingsTraceAndSlog: com.android.server.utils.TimingsTraceAndSlog newAsyncLog()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("WebViewFactoryPreparation");

        $r2 = r0.<com.android.server.SystemServer: java.util.concurrent.Future mZygotePreload>;

        staticinvoke <com.android.internal.util.ConcurrentUtils: java.lang.Object waitForFutureNoInterrupt(java.util.concurrent.Future,java.lang.String)>($r2, "Zygote preload");

        r0.<com.android.server.SystemServer: java.util.concurrent.Future mZygotePreload> = null;

        $r4 = r0.<com.android.server.SystemServer: com.android.server.webkit.WebViewUpdateService mWebViewUpdateService>;

        virtualinvoke $r4.<com.android.server.webkit.WebViewUpdateService: void prepareWebViewInSystemServer()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;
    }

    public void lambda$startOtherServices$6$SystemServer(com.android.server.utils.TimingsTraceAndSlog, android.content.Context, com.android.server.wm.WindowManagerService, boolean, com.android.server.ConnectivityService, com.android.server.NetworkManagementService, com.android.server.net.NetworkPolicyManagerService, com.android.server.IpSecService, com.android.server.net.NetworkStatsService, com.android.server.CountryDetectorService, com.android.server.NetworkTimeUpdateService, com.android.server.input.InputManagerService, com.android.server.TelephonyRegistry, com.android.server.media.MediaRouterService, com.android.server.MmsServiceBroker)
    {
        com.android.server.SystemServer r0;
        com.android.server.utils.TimingsTraceAndSlog r1;
        boolean z0, $z1, $z2;
        com.android.server.ConnectivityService r2;
        com.android.server.NetworkManagementService r3;
        com.android.server.net.NetworkPolicyManagerService r4;
        com.android.server.IpSecService r5;
        com.android.server.net.NetworkStatsService r6;
        com.android.server.CountryDetectorService r7;
        com.android.server.NetworkTimeUpdateService r8;
        com.android.server.input.InputManagerService r9;
        com.android.server.TelephonyRegistry r10;
        com.android.server.media.MediaRouterService r11;
        com.android.server.MmsServiceBroker r12;
        com.android.server.SystemServiceManager $r13, $r15, $r20;
        com.android.server.am.ActivityManagerService $r14;
        android.net.NetworkStackClient $r16;
        android.net.ConnectivityModuleConnector $r17;
        com.android.server.'-$$Lambda$SystemServer$zn6ji6g70a_qrK5QZEPCaarZSik' $r18;
        long $l1, $l3;
        byte $b2;
        com.android.server.webkit.WebViewUpdateService $r22;
        java.lang.Throwable $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40;
        android.content.Context r41;
        com.android.server.wm.WindowManagerService r42;
        java.util.concurrent.Future r44;
        android.content.pm.PackageManager $r45;
        java.util.concurrent.CountDownLatch r49;
        com.android.server.pm.PackageManagerService $r54;
        android.os.IBinder $r63;
        android.os.IIncidentManager r64;
        com.android.server._$$Lambda$SystemServer$72PvntN28skIthlRYR9w5EhsdX8 r66;
        android.net.ConnectivityModuleConnector$ModuleServiceCallback r67;

        r0 := @this: com.android.server.SystemServer;

        r1 := @parameter0: com.android.server.utils.TimingsTraceAndSlog;

        r41 := @parameter1: android.content.Context;

        r42 := @parameter2: com.android.server.wm.WindowManagerService;

        z0 := @parameter3: boolean;

        r2 := @parameter4: com.android.server.ConnectivityService;

        r3 := @parameter5: com.android.server.NetworkManagementService;

        r4 := @parameter6: com.android.server.net.NetworkPolicyManagerService;

        r5 := @parameter7: com.android.server.IpSecService;

        r6 := @parameter8: com.android.server.net.NetworkStatsService;

        r7 := @parameter9: com.android.server.CountryDetectorService;

        r8 := @parameter10: com.android.server.NetworkTimeUpdateService;

        r9 := @parameter11: com.android.server.input.InputManagerService;

        r10 := @parameter12: com.android.server.TelephonyRegistry;

        r11 := @parameter13: com.android.server.media.MediaRouterService;

        r12 := @parameter14: com.android.server.MmsServiceBroker;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Making services ready");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartActivityManagerReadyPhase");

        $r13 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r13.<com.android.server.SystemServiceManager: void startBootPhase(com.android.server.utils.TimingsTraceAndSlog,int)>(r1, 550);

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartObservingNativeCrashes");

     label01:
        $r14 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r14.<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()>();

     label02:
        goto label04;

     label03:
        $r36 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("observing native crashes", $r36);

     label04:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $z1 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        if $z1 != 0 goto label05;

        $r22 = r0.<com.android.server.SystemServer: com.android.server.webkit.WebViewUpdateService mWebViewUpdateService>;

        if $r22 == null goto label05;

        r66 = new com.android.server._$$Lambda$SystemServer$72PvntN28skIthlRYR9w5EhsdX8;

        specialinvoke r66.<com.android.server._$$Lambda$SystemServer$72PvntN28skIthlRYR9w5EhsdX8: void <init>(com.android.server.SystemServer)>(r0);

        r44 = staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r66, "WebViewFactoryPreparation");

        goto label06;

     label05:
        r44 = null;

     label06:
        $r45 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z2 = virtualinvoke $r45.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        if $z2 == 0 goto label07;

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartCarServiceHelperService");

        $r20 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r20.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.internal.car.CarServiceHelperService");

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label07:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartSystemUI");

     label08:
        staticinvoke <com.android.server.SystemServer: void startSystemUi(android.content.Context,com.android.server.wm.WindowManagerService)>(r41, r42);

     label09:
        goto label11;

     label10:
        $r33 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting System UI", $r33);

     label11:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        if z0 == 0 goto label16;

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("EnableAirplaneModeInSafeMode");

     label12:
        virtualinvoke r2.<com.android.server.ConnectivityService: void setAirplaneMode(boolean)>(1);

     label13:
        goto label15;

     label14:
        $r38 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("enabling Airplane Mode during Safe Mode bootup", $r38);

     label15:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label16:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeNetworkManagementServiceReady");

        if r3 == null goto label20;

     label17:
        virtualinvoke r3.<com.android.server.NetworkManagementService: void systemReady()>();

     label18:
        goto label20;

     label19:
        $r31 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Network Managment Service ready", $r31);

        goto label20;

     label20:
        if r4 == null goto label21;

        r49 = virtualinvoke r4.<com.android.server.net.NetworkPolicyManagerService: java.util.concurrent.CountDownLatch networkScoreAndNetworkManagementServiceReady()>();

        goto label22;

     label21:
        r49 = null;

     label22:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeIpSecServiceReady");

        if r5 == null goto label26;

     label23:
        virtualinvoke r5.<com.android.server.IpSecService: void systemReady()>();

     label24:
        goto label26;

     label25:
        $r35 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making IpSec Service ready", $r35);

        goto label26;

     label26:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeNetworkStatsServiceReady");

        if r6 == null goto label30;

     label27:
        virtualinvoke r6.<com.android.server.net.NetworkStatsService: void systemReady()>();

     label28:
        goto label30;

     label29:
        $r27 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Network Stats Service ready", $r27);

        goto label30;

     label30:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeConnectivityServiceReady");

        if r2 == null goto label34;

     label31:
        virtualinvoke r2.<com.android.server.ConnectivityService: void systemReady()>();

     label32:
        goto label34;

     label33:
        $r24 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Connectivity Service ready", $r24);

        goto label34;

     label34:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeNetworkPolicyServiceReady");

        if r4 == null goto label38;

     label35:
        virtualinvoke r4.<com.android.server.net.NetworkPolicyManagerService: void systemReady(java.util.concurrent.CountDownLatch)>(r49);

     label36:
        goto label38;

     label37:
        $r40 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Network Policy Service ready", $r40);

        goto label38;

     label38:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r54 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        virtualinvoke $r54.<com.android.server.pm.PackageManagerService: void waitForAppDataPrepared()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("PhaseThirdPartyAppsCanStart");

        if r44 == null goto label39;

        staticinvoke <com.android.internal.util.ConcurrentUtils: java.lang.Object waitForFutureNoInterrupt(java.util.concurrent.Future,java.lang.String)>(r44, "WebViewFactoryPreparation");

     label39:
        $r15 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r15.<com.android.server.SystemServiceManager: void startBootPhase(com.android.server.utils.TimingsTraceAndSlog,int)>(r1, 600);

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartNetworkStack");

     label40:
        $r16 = staticinvoke <android.net.NetworkStackClient: android.net.NetworkStackClient getInstance()>();

        virtualinvoke $r16.<android.net.NetworkStackClient: void start()>();

     label41:
        goto label43;

     label42:
        $r26 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Network Stack", $r26);

     label43:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("StartTethering");

     label44:
        $r17 = staticinvoke <android.net.ConnectivityModuleConnector: android.net.ConnectivityModuleConnector getInstance()>();

        $r18 = <com.android.server._$$Lambda$SystemServer$zn6ji6g70a_qrK5QZEPCaarZSik: com.android.server.'-$$Lambda$SystemServer$zn6ji6g70a_qrK5QZEPCaarZSik' INSTANCE>;

        r67 = (android.net.ConnectivityModuleConnector$ModuleServiceCallback) $r18;

        virtualinvoke $r17.<android.net.ConnectivityModuleConnector: void startModuleService(java.lang.String,java.lang.String,android.net.ConnectivityModuleConnector$ModuleServiceCallback)>("android.net.ITetheringConnector", "android.permission.MAINLINE_NETWORK_STACK", r67);

     label45:
        goto label47;

     label46:
        $r29 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Tethering", $r29);

     label47:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeCountryDetectionServiceReady");

        if r7 == null goto label51;

     label48:
        virtualinvoke r7.<com.android.server.CountryDetectorService: void systemRunning()>();

     label49:
        goto label51;

     label50:
        $r39 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("Notifying CountryDetectorService running", $r39);

        goto label51;

     label51:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeNetworkTimeUpdateReady");

        if r8 == null goto label55;

     label52:
        virtualinvoke r8.<com.android.server.NetworkTimeUpdateService: void systemRunning()>();

     label53:
        goto label55;

     label54:
        $r34 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("Notifying NetworkTimeService running", $r34);

        goto label55;

     label55:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeInputManagerServiceReady");

        if r9 == null goto label59;

     label56:
        virtualinvoke r9.<com.android.server.input.InputManagerService: void systemRunning()>();

     label57:
        goto label59;

     label58:
        $r28 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("Notifying InputManagerService running", $r28);

        goto label59;

     label59:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeTelephonyRegistryReady");

        if r10 == null goto label63;

     label60:
        virtualinvoke r10.<com.android.server.TelephonyRegistry: void systemRunning()>();

     label61:
        goto label63;

     label62:
        $r32 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("Notifying TelephonyRegistry running", $r32);

        goto label63;

     label63:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeMediaRouterServiceReady");

        if r11 == null goto label67;

     label64:
        virtualinvoke r11.<com.android.server.media.MediaRouterService: void systemRunning()>();

     label65:
        goto label67;

     label66:
        $r30 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("Notifying MediaRouterService running", $r30);

        goto label67;

     label67:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeMmsServiceReady");

        if r12 == null goto label71;

     label68:
        virtualinvoke r12.<com.android.server.MmsServiceBroker: void systemRunning()>();

     label69:
        goto label71;

     label70:
        $r37 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("Notifying MmsService running", $r37);

        goto label71;

     label71:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("IncidentDaemonReady");

     label72:
        $r63 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("incident");

        r64 = staticinvoke <android.os.IIncidentManager$Stub: android.os.IIncidentManager asInterface(android.os.IBinder)>($r63);

     label73:
        if r64 == null goto label75;

     label74:
        interfaceinvoke r64.<android.os.IIncidentManager: void systemRunning()>();

     label75:
        goto label77;

     label76:
        $r25 := @caughtexception;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("Notifying incident daemon running", $r25);

     label77:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $l1 = r0.<com.android.server.SystemServer: long mIncrementalServiceHandle>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label78;

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("MakeIncrementalServiceReady");

        $l3 = r0.<com.android.server.SystemServer: long mIncrementalServiceHandle>;

        staticinvoke <com.android.server.SystemServer: void setIncrementalServiceSystemReady(long)>($l3);

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label78:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label44 to label45 with label46;
        catch java.lang.Throwable from label48 to label49 with label50;
        catch java.lang.Throwable from label52 to label53 with label54;
        catch java.lang.Throwable from label56 to label57 with label58;
        catch java.lang.Throwable from label60 to label61 with label62;
        catch java.lang.Throwable from label64 to label65 with label66;
        catch java.lang.Throwable from label68 to label69 with label70;
        catch java.lang.Throwable from label72 to label73 with label76;
        catch java.lang.Throwable from label74 to label75 with label76;
    }

    public static void <clinit>()
    {
        <com.android.server.SystemServer: int sMaxBinderThreads> = 31;

        <com.android.server.SystemServer: java.lang.String WIFI_SERVICE_CLASS> = "com.android.server.wifi.WifiService";

        <com.android.server.SystemServer: java.lang.String WIFI_P2P_SERVICE_CLASS> = "com.android.server.wifi.p2p.WifiP2pService";

        <com.android.server.SystemServer: java.lang.String WIFI_AWARE_SERVICE_CLASS> = "com.android.server.wifi.aware.WifiAwareService";

        <com.android.server.SystemServer: java.lang.String WEAR_TIME_SERVICE_CLASS> = "com.google.android.clockwork.time.WearTimeService";

        <com.android.server.SystemServer: java.lang.String WEAR_SIDEKICK_SERVICE_CLASS> = "com.google.android.clockwork.sidekick.SidekickService";

        <com.android.server.SystemServer: java.lang.String WEAR_POWER_SERVICE_CLASS> = "com.android.clockwork.power.WearPowerService";

        <com.android.server.SystemServer: java.lang.String WEAR_LEFTY_SERVICE_CLASS> = "com.google.android.clockwork.lefty.WearLeftyService";

        <com.android.server.SystemServer: java.lang.String WEAR_GLOBAL_ACTIONS_SERVICE_CLASS> = "com.android.clockwork.globalactions.GlobalActionsService";

        <com.android.server.SystemServer: java.lang.String WEAR_DISPLAY_SERVICE_CLASS> = "com.google.android.clockwork.display.WearDisplayService";

        <com.android.server.SystemServer: java.lang.String WEAR_CONNECTIVITY_SERVICE_CLASS> = "com.android.clockwork.connectivity.WearConnectivityService";

        <com.android.server.SystemServer: java.lang.String WALLPAPER_SERVICE_CLASS> = "com.android.server.wallpaper.WallpaperManagerService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String VOICE_RECOGNITION_MANAGER_SERVICE_CLASS> = "com.android.server.voiceinteraction.VoiceInteractionManagerService";

        <com.android.server.SystemServer: java.lang.String USB_SERVICE_CLASS> = "com.android.server.usb.UsbService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String UNCRYPT_PACKAGE_FILE> = "/cache/recovery/uncrypt_file";

        <com.android.server.SystemServer: java.lang.String TIME_ZONE_RULES_MANAGER_SERVICE_CLASS> = "com.android.server.timezone.RulesManagerService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String TIME_ZONE_DETECTOR_SERVICE_CLASS> = "com.android.server.timezonedetector.TimeZoneDetectorService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String TIME_DETECTOR_SERVICE_CLASS> = "com.android.server.timedetector.TimeDetectorService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String THERMAL_OBSERVER_CLASS> = "com.google.android.clockwork.ThermalObserver";

        <com.android.server.SystemServer: java.lang.String TETHERING_CONNECTOR_CLASS> = "android.net.ITetheringConnector";

        <com.android.server.SystemServer: java.lang.String TAG> = "SystemServer";

        <com.android.server.SystemServer: java.lang.String SYSTEM_CAPTIONS_MANAGER_SERVICE_CLASS> = "com.android.server.systemcaptions.SystemCaptionsManagerService";

        <com.android.server.SystemServer: java.lang.String SYSPROP_START_UPTIME> = "sys.system_server.start_uptime";

        <com.android.server.SystemServer: java.lang.String SYSPROP_START_ELAPSED> = "sys.system_server.start_elapsed";

        <com.android.server.SystemServer: java.lang.String SYSPROP_START_COUNT> = "sys.system_server.start_count";

        <com.android.server.SystemServer: java.lang.String STORAGE_STATS_SERVICE_CLASS> = "com.android.server.usage.StorageStatsService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String STORAGE_MANAGER_SERVICE_CLASS> = "com.android.server.StorageManagerService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String STATS_PULL_ATOM_SERVICE_CLASS> = "com.android.server.stats.pull.StatsPullAtomService";

        <com.android.server.SystemServer: java.lang.String STATS_COMPANION_LIFECYCLE_CLASS> = "com.android.server.stats.StatsCompanion$Lifecycle";

        <com.android.server.SystemServer: java.lang.String STATS_COMPANION_APEX_PATH> = "/apex/com.android.os.statsd/javalib/service-statsd.jar";

        <com.android.server.SystemServer: java.lang.String START_SENSOR_SERVICE> = "StartSensorService";

        <com.android.server.SystemServer: java.lang.String START_HIDL_SERVICES> = "StartHidlServices";

        <com.android.server.SystemServer: java.lang.String START_BLOB_STORE_SERVICE> = "startBlobStoreManagerService";

        <com.android.server.SystemServer: long SNAPSHOT_INTERVAL> = 3600000L;

        <com.android.server.SystemServer: long SLOW_DISPATCH_THRESHOLD_MS> = 100L;

        <com.android.server.SystemServer: long SLOW_DELIVERY_THRESHOLD_MS> = 200L;

        <com.android.server.SystemServer: java.lang.String SLICE_MANAGER_SERVICE_CLASS> = "com.android.server.slice.SliceManagerService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String SEARCH_MANAGER_SERVICE_CLASS> = "com.android.server.search.SearchManagerService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String ROLLBACK_MANAGER_SERVICE_CLASS> = "com.android.server.rollback.RollbackManagerService";

        <com.android.server.SystemServer: java.lang.String PRINT_MANAGER_SERVICE_CLASS> = "com.android.server.print.PrintManagerService";

        <com.android.server.SystemServer: java.lang.String PERSISTENT_DATA_BLOCK_PROP> = "ro.frp.pst";

        <com.android.server.SystemServer: java.lang.String MIDI_SERVICE_CLASS> = "com.android.server.midi.MidiService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String LOWPAN_SERVICE_CLASS> = "com.android.server.lowpan.LowpanService";

        <com.android.server.SystemServer: java.lang.String LOCK_SETTINGS_SERVICE_CLASS> = "com.android.server.locksettings.LockSettingsService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String JOB_SCHEDULER_SERVICE_CLASS> = "com.android.server.job.JobSchedulerService";

        <com.android.server.SystemServer: java.lang.String IOT_SERVICE_CLASS> = "com.android.things.server.IoTSystemService";

        <com.android.server.SystemServer: java.lang.String GSI_RUNNING_PROP> = "ro.gsid.image_running";

        <com.android.server.SystemServer: java.lang.String ETHERNET_SERVICE_CLASS> = "com.android.server.ethernet.EthernetService";

        <com.android.server.SystemServer: java.lang.String ENCRYPTING_STATE> = "trigger_restart_min_framework";

        <com.android.server.SystemServer: java.lang.String ENCRYPTED_STATE> = "1";

        <com.android.server.SystemServer: long EARLIEST_SUPPORTED_TIME> = 86400000L;

        <com.android.server.SystemServer: java.lang.String DEVICE_IDLE_CONTROLLER_CLASS> = "com.android.server.DeviceIdleController";

        <com.android.server.SystemServer: int DEFAULT_SYSTEM_THEME> = 16974851;

        <com.android.server.SystemServer: java.lang.String CONTENT_SUGGESTIONS_SERVICE_CLASS> = "com.android.server.contentsuggestions.ContentSuggestionsManagerService";

        <com.android.server.SystemServer: java.lang.String CONTENT_SERVICE_CLASS> = "com.android.server.content.ContentService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String CONTENT_CAPTURE_MANAGER_SERVICE_CLASS> = "com.android.server.contentcapture.ContentCaptureManagerService";

        <com.android.server.SystemServer: java.lang.String COMPANION_DEVICE_MANAGER_SERVICE_CLASS> = "com.android.server.companion.CompanionDeviceManagerService";

        <com.android.server.SystemServer: java.lang.String CAR_SERVICE_HELPER_SERVICE_CLASS> = "com.android.internal.car.CarServiceHelperService";

        <com.android.server.SystemServer: java.lang.String BLOCK_MAP_FILE> = "/cache/recovery/block.map";

        <com.android.server.SystemServer: java.lang.String BLOB_STORE_MANAGER_SERVICE_CLASS> = "com.android.server.blob.BlobStoreManagerService";

        <com.android.server.SystemServer: java.lang.String BACKUP_MANAGER_SERVICE_CLASS> = "com.android.server.backup.BackupManagerService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String AUTO_FILL_MANAGER_SERVICE_CLASS> = "com.android.server.autofill.AutofillManagerService";

        <com.android.server.SystemServer: java.lang.String APP_PREDICTION_MANAGER_SERVICE_CLASS> = "com.android.server.appprediction.AppPredictionManagerService";

        <com.android.server.SystemServer: java.lang.String APPWIDGET_SERVICE_CLASS> = "com.android.server.appwidget.AppWidgetService";

        <com.android.server.SystemServer: java.lang.String ADB_SERVICE_CLASS> = "com.android.server.adb.AdbService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String ACCOUNT_SERVICE_CLASS> = "com.android.server.accounts.AccountManagerService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String ACCESSIBILITY_MANAGER_SERVICE_CLASS> = "com.android.server.accessibility.AccessibilityManagerService$Lifecycle";

        return;
    }
}
