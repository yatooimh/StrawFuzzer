public class com.android.server.SystemServerInitThreadPool extends java.lang.Object
{
    private static final boolean IS_DEBUGGABLE;
    private static final java.lang.Object LOCK;
    private static final int SHUTDOWN_TIMEOUT_MILLIS;
    private static final java.lang.String TAG;
    private static com.android.server.SystemServerInitThreadPool sInstance;
    private final java.util.List mPendingTasks;
    private final java.util.concurrent.ExecutorService mService;
    private boolean mShutDown;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Object $r2;

        <com.android.server.SystemServerInitThreadPool: int SHUTDOWN_TIMEOUT_MILLIS> = 20000;

        $r0 = class "Lcom/android/server/SystemServerInitThreadPool;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.SystemServerInitThreadPool: java.lang.String TAG> = $r1;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        <com.android.server.SystemServerInitThreadPool: boolean IS_DEBUGGABLE> = $z0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <com.android.server.SystemServerInitThreadPool: java.lang.Object LOCK> = $r2;

        return;
    }

    private void <init>()
    {
        com.android.server.SystemServerInitThreadPool r0;
        int i0;
        java.lang.String r1, $r9;
        java.util.ArrayList $r3;
        java.lang.Runtime $r4;
        java.lang.StringBuilder $r5;
        java.util.concurrent.ExecutorService $r10;

        r0 := @this: com.android.server.SystemServerInitThreadPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks> = $r3;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        i0 = virtualinvoke $r4.<java.lang.Runtime: int availableProcessors()>();

        r1 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating instance with ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threads");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r1, $r9);

        $r10 = staticinvoke <com.android.internal.util.ConcurrentUtils: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.lang.String,int)>(i0, "system-server-init-thread", -2);

        r0.<com.android.server.SystemServerInitThreadPool: java.util.concurrent.ExecutorService mService> = $r10;

        return;
    }

    private static void dumpStackTraces()
    {
        java.util.ArrayList $r1, $r3;
        int $i0;
        java.lang.Integer $r2;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r3 = staticinvoke <com.android.server.Watchdog: java.util.ArrayList getInterestingNativePids()>();

        staticinvoke <com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(java.util.ArrayList,com.android.internal.os.ProcessCpuTracker,android.util.SparseArray,java.util.ArrayList,java.io.StringWriter)>($r1, null, null, $r3, null);

        return;
    }

    static void shutdown()
    {
        java.lang.Object r0;
        boolean z0;
        java.lang.String $r1, $r19, $r20, $r24, $r27, r31;
        com.android.server.SystemServerInitThreadPool $r2, $r3, $r4, $r5, $r7, $r10, $r12, $r13;
        java.util.concurrent.ExecutorService $r6, $r9, $r11;
        java.util.concurrent.TimeUnit $r8;
        java.util.List $r14, r33, r34, r36;
        java.lang.Throwable $r21, $r22, $r28, $r29;
        java.lang.Thread $r23;
        com.android.server.utils.TimingsTraceAndSlog r30;
        java.lang.Exception r32;
        java.util.ArrayList r35;
        java.lang.IllegalStateException r37, r41;
        java.lang.StringBuilder r38, r42;

        $r1 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r1, "Shutdown requested");

        r0 = <com.android.server.SystemServerInitThreadPool: java.lang.Object LOCK>;

        entermonitor r0;

     label01:
        r30 = new com.android.server.utils.TimingsTraceAndSlog;

        specialinvoke r30.<com.android.server.utils.TimingsTraceAndSlog: void <init>()>();

        virtualinvoke r30.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("WaitInitThreadPoolShutdown");

        $r2 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        if $r2 != null goto label03;

        virtualinvoke r30.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        r31 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        r32 = new java.lang.Exception;

        specialinvoke r32.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>(r31, "Already shutdown", r32);

        exitmonitor r0;

     label02:
        return;

     label03:
        $r3 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        r33 = $r3.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks>;

        entermonitor r33;

     label04:
        $r4 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        $r4.<com.android.server.SystemServerInitThreadPool: boolean mShutDown> = 1;

        exitmonitor r33;

     label05:
        $r5 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        $r6 = $r5.<com.android.server.SystemServerInitThreadPool: java.util.concurrent.ExecutorService mService>;

        interfaceinvoke $r6.<java.util.concurrent.ExecutorService: void shutdown()>();

     label06:
        $r7 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        $r9 = $r7.<com.android.server.SystemServerInitThreadPool: java.util.concurrent.ExecutorService mService>;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z0 = interfaceinvoke $r9.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(20000L, $r8);

     label07:
        if z0 != 0 goto label09;

     label08:
        staticinvoke <com.android.server.SystemServerInitThreadPool: void dumpStackTraces()>();

     label09:
        $r10 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        $r11 = $r10.<com.android.server.SystemServerInitThreadPool: java.util.concurrent.ExecutorService mService>;

        r34 = interfaceinvoke $r11.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label10:
        if z0 == 0 goto label13;

     label11:
        <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance> = null;

        $r20 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r20, "Shutdown successful");

        virtualinvoke r30.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        exitmonitor r0;

     label12:
        return;

     label13:
        r35 = new java.util.ArrayList;

        specialinvoke r35.<java.util.ArrayList: void <init>()>();

        $r12 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        r36 = $r12.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks>;

        entermonitor r36;

     label14:
        $r13 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        $r14 = $r13.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks>;

        interfaceinvoke r35.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        exitmonitor r36;

     label15:
        virtualinvoke r30.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        r37 = new java.lang.IllegalStateException;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot shutdown. Unstarted tasks ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Unfinished tasks ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r19 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r37.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw r37;

     label16:
        $r28 := @caughtexception;

     label17:
        exitmonitor r36;

     label18:
        throw $r28;

     label19:
        $r22 := @caughtexception;

     label20:
        $r23 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r23.<java.lang.Thread: void interrupt()>();

        staticinvoke <com.android.server.SystemServerInitThreadPool: void dumpStackTraces()>();

        virtualinvoke r30.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        r41 = new java.lang.IllegalStateException;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        $r24 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" init interrupted");

        $r27 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw r41;

     label21:
        $r21 := @caughtexception;

     label22:
        exitmonitor r33;

     label23:
        throw $r21;

     label24:
        $r29 := @caughtexception;

     label25:
        exitmonitor r0;

     label26:
        throw $r29;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.InterruptedException from label06 to label07 with label19;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label23 to label24 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    static void start()
    {
        java.lang.Object r0;
        com.android.server.SystemServerInitThreadPool $r1, r8;
        java.lang.String $r2, $r5;
        java.lang.Throwable $r6;
        boolean z0;
        java.lang.StringBuilder r7;

        r0 = <com.android.server.SystemServerInitThreadPool: java.lang.Object LOCK>;

        entermonitor r0;

     label1:
        $r1 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        if $r1 != null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already started");

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, $r5);

        r8 = new com.android.server.SystemServerInitThreadPool;

        specialinvoke r8.<com.android.server.SystemServerInitThreadPool: void <init>()>();

        <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance> = r8;

        exitmonitor r0;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static java.util.concurrent.Future submit(java.lang.Runnable, java.lang.String)
    {
        java.lang.String r0, $r5, $r8;
        java.lang.Object r1;
        com.android.server.SystemServerInitThreadPool $r3, r13;
        java.util.concurrent.Future $r9;
        java.lang.Throwable $r10;
        java.lang.Runnable r11;
        boolean z0;
        java.lang.StringBuilder r12;

        r11 := @parameter0: java.lang.Runnable;

        r0 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "description cannot be null");

        r1 = <com.android.server.SystemServerInitThreadPool: java.lang.Object LOCK>;

        entermonitor r1;

     label1:
        $r3 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        if $r3 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get ");

        $r5 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - it has been shut down");

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, $r8);

        r13 = <com.android.server.SystemServerInitThreadPool: com.android.server.SystemServerInitThreadPool sInstance>;

        exitmonitor r1;

     label5:
        $r9 = specialinvoke r13.<com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submitTask(java.lang.Runnable,java.lang.String)>(r11, r0);

        return $r9;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private java.util.concurrent.Future submitTask(java.lang.Runnable, java.lang.String)
    {
        com.android.server.SystemServerInitThreadPool r0;
        java.lang.String r1, $r4, $r7;
        java.util.List r2, $r8;
        java.lang.StringBuilder r3;
        boolean $z0, z2;
        com.android.server._$$Lambda$SystemServerInitThreadPool$o2_GLo0lnkotYmRdTfg66UETEwQ $r9;
        java.util.concurrent.ExecutorService $r10;
        java.util.concurrent.Future $r11;
        java.lang.Throwable $r12;
        java.lang.Runnable r13;

        r0 := @this: com.android.server.SystemServerInitThreadPool;

        r13 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks>;

        entermonitor r2;

     label1:
        $z0 = r0.<com.android.server.SystemServerInitThreadPool: boolean mShutDown>;

        if $z0 != 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already shut down");

        $r7 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, $r7);

        $r8 = r0.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label5:
        $r10 = r0.<com.android.server.SystemServerInitThreadPool: java.util.concurrent.ExecutorService mService>;

        $r9 = new com.android.server._$$Lambda$SystemServerInitThreadPool$o2_GLo0lnkotYmRdTfg66UETEwQ;

        specialinvoke $r9.<com.android.server._$$Lambda$SystemServerInitThreadPool$o2_GLo0lnkotYmRdTfg66UETEwQ: void <init>(com.android.server.SystemServerInitThreadPool,java.lang.String,java.lang.Runnable)>(r0, r1, r13);

        $r11 = interfaceinvoke $r10.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r9);

        return $r11;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void lambda$submitTask$0$SystemServerInitThreadPool(java.lang.String, java.lang.Runnable)
    {
        com.android.server.SystemServerInitThreadPool r0;
        com.android.server.utils.TimingsTraceAndSlog r1;
        java.lang.StringBuilder $r2, $r7, $r11, $r17;
        java.lang.String $r5, $r10, $r14, $r22, r23, r26, r29, r33;
        boolean $z0, $z2;
        java.util.List $r6, r28;
        java.lang.Throwable $r15;
        java.lang.RuntimeException $r16;
        java.lang.Runnable r24;

        r0 := @this: com.android.server.SystemServerInitThreadPool;

        r23 := @parameter0: java.lang.String;

        r24 := @parameter1: java.lang.Runnable;

        r1 = staticinvoke <com.android.server.utils.TimingsTraceAndSlog: com.android.server.utils.TimingsTraceAndSlog newAsyncLog()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InitThreadPoolExec:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>($r5);

        $z0 = <com.android.server.SystemServerInitThreadPool: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        r26 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Started executing ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r26, $r14);

     label1:
        interfaceinvoke r24.<java.lang.Runnable: void run()>();

     label2:
        r28 = r0.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks>;

        entermonitor r28;

     label3:
        $r6 = r0.<com.android.server.SystemServerInitThreadPool: java.util.List mPendingTasks>;

        interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>(r23);

        exitmonitor r28;

     label4:
        $z2 = <com.android.server.SystemServerInitThreadPool: boolean IS_DEBUGGABLE>;

        if $z2 == 0 goto label5;

        r29 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished executing ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r29, $r10);

     label5:
        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;

     label6:
        $r15 := @caughtexception;

     label7:
        exitmonitor r28;

     label8:
        throw $r15;

     label9:
        $r16 := @caughtexception;

        r33 = <com.android.server.SystemServerInitThreadPool: java.lang.String TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure in ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r33, $r22, $r16);

        virtualinvoke r1.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        throw $r16;

        catch java.lang.RuntimeException from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
