public class com.android.server.SystemUpdateManagerService extends android.os.ISystemUpdateManager$Stub
{
    private static final java.lang.String INFO_FILE;
    private static final int INFO_FILE_VERSION;
    private static final java.lang.String KEY_BOOT_COUNT;
    private static final java.lang.String KEY_INFO_BUNDLE;
    private static final java.lang.String KEY_UID;
    private static final java.lang.String KEY_VERSION;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_INFO;
    private static final int UID_UNKNOWN;
    private final android.content.Context mContext;
    private final android.util.AtomicFile mFile;
    private int mLastStatus;
    private int mLastUid;
    private final java.lang.Object mLock;

    public void <init>(android.content.Context)
    {
        com.android.server.SystemUpdateManagerService r0;
        java.lang.Object r1, $r2;
        android.util.AtomicFile $r3;
        java.io.File $r4, $r5;
        java.lang.Throwable $r7;
        android.content.Context r8;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        r8 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.ISystemUpdateManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.SystemUpdateManagerService: java.lang.Object mLock> = $r2;

        r0.<com.android.server.SystemUpdateManagerService: int mLastUid> = -1;

        r0.<com.android.server.SystemUpdateManagerService: int mLastStatus> = 0;

        r0.<com.android.server.SystemUpdateManagerService: android.content.Context mContext> = r8;

        $r3 = new android.util.AtomicFile;

        $r4 = new java.io.File;

        $r5 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "system-update-info.xml");

        specialinvoke $r3.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

        r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile> = $r3;

        r1 = r0.<com.android.server.SystemUpdateManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle loadSystemUpdateInfoLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private int getBootCount()
    {
        com.android.server.SystemUpdateManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        $r1 = r0.<com.android.server.SystemUpdateManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "boot_count", 0);

        return $i0;
    }

    private android.os.Bundle loadSystemUpdateInfoLocked()
    {
        com.android.server.SystemUpdateManagerService r0;
        int i0, $i1, $i2, i3, i4;
        android.util.AtomicFile $r2, $r15;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r17;
        android.os.Bundle $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Throwable $r12, $r13, $r18, $r19, $r20;
        java.lang.StringBuilder $r14;
        java.io.File $r16;
        android.os.PersistableBundle r21, r22, r23, r26, r32;
        java.io.FileInputStream r24;
        org.xmlpull.v1.XmlPullParser r25;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        r21 = null;

        r22 = null;

        r23 = null;

     label01:
        $r2 = r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile>;

        r24 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r25 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r25.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r24, $r4);

        r26 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.PersistableBundle readInfoFileLocked(org.xmlpull.v1.XmlPullParser)>(r25);

     label03:
        r23 = r26;

        if r24 == null goto label16;

        r21 = r26;

        r22 = r26;

        r23 = r26;

     label04:
        virtualinvoke r24.<java.io.FileInputStream: void close()>();

     label05:
        r23 = r26;

        goto label16;

     label06:
        $r18 := @caughtexception;

        if r24 == null goto label11;

     label07:
        virtualinvoke r24.<java.io.FileInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        r21 = null;

        r22 = null;

        r23 = null;

     label10:
        virtualinvoke $r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label11:
        r21 = null;

        r22 = null;

        r23 = null;

     label12:
        throw $r18;

     label13:
        $r20 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemUpdateManagerService", "Failed to read the info file:", $r20);

        r23 = r21;

        goto label16;

     label14:
        $r19 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemUpdateManagerService", "Failed to parse the info file:", $r19);

        r23 = r22;

        goto label16;

     label15:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No existing info file ");

        $r15 = r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile>;

        $r16 = virtualinvoke $r15.<android.util.AtomicFile: java.io.File getBaseFile()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemUpdateManagerService", $r17);

     label16:
        if r23 != null goto label17;

        $r11 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle removeInfoFileAndGetDefaultInfoBundleLocked()>();

        return $r11;

     label17:
        $i1 = virtualinvoke r23.<android.os.PersistableBundle: int getInt(java.lang.String,int)>("version", -1);

        if $i1 != -1 goto label18;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Invalid info file (invalid version). Ignored");

        $r10 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle removeInfoFileAndGetDefaultInfoBundleLocked()>();

        return $r10;

     label18:
        i0 = virtualinvoke r23.<android.os.PersistableBundle: int getInt(java.lang.String,int)>("uid", -1);

        if i0 != -1 goto label19;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Invalid info file (invalid UID). Ignored");

        $r9 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle removeInfoFileAndGetDefaultInfoBundleLocked()>();

        return $r9;

     label19:
        i3 = virtualinvoke r23.<android.os.PersistableBundle: int getInt(java.lang.String,int)>("boot-count", -1);

        if i3 == -1 goto label23;

        $i2 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: int getBootCount()>();

        if i3 == $i2 goto label20;

        goto label23;

     label20:
        r32 = virtualinvoke r23.<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)>("info-bundle");

        if r32 != null goto label21;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Invalid info file (missing info). Ignored");

        $r8 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle removeInfoFileAndGetDefaultInfoBundleLocked()>();

        return $r8;

     label21:
        i4 = virtualinvoke r32.<android.os.PersistableBundle: int getInt(java.lang.String,int)>("status", 0);

        if i4 != 0 goto label22;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Invalid info file (invalid status). Ignored");

        $r7 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle removeInfoFileAndGetDefaultInfoBundleLocked()>();

        return $r7;

     label22:
        r0.<com.android.server.SystemUpdateManagerService: int mLastStatus> = i4;

        r0.<com.android.server.SystemUpdateManagerService: int mLastUid> = i0;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>(android.os.PersistableBundle)>(r32);

        return $r6;

     label23:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Outdated info file. Ignored");

        $r5 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle removeInfoFileAndGetDefaultInfoBundleLocked()>();

        return $r5;

        catch java.io.FileNotFoundException from label01 to label02 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label14;
        catch java.io.IOException from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.FileNotFoundException from label04 to label05 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label14;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.FileNotFoundException from label10 to label11 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label14;
        catch java.io.IOException from label10 to label11 with label13;
        catch java.io.FileNotFoundException from label12 to label13 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label14;
        catch java.io.IOException from label12 to label13 with label13;
    }

    private android.os.PersistableBundle readInfoFileLocked(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.SystemUpdateManagerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;
        java.lang.String $r2, $r3;
        boolean $z0;
        android.os.PersistableBundle $r4;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

     label1:
        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        $r2 = "info";

        $r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        return $r4;

     label2:
        return null;
    }

    private android.os.Bundle removeInfoFileAndGetDefaultInfoBundleLocked()
    {
        com.android.server.SystemUpdateManagerService r0;
        android.util.AtomicFile $r2, $r4;
        boolean $z0;
        android.os.Bundle $r3;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        $r2 = r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile>;

        $z0 = virtualinvoke $r2.<android.util.AtomicFile: boolean exists()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Removing info file");

        $r4 = r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile>;

        virtualinvoke $r4.<android.util.AtomicFile: void delete()>();

     label1:
        r0.<com.android.server.SystemUpdateManagerService: int mLastStatus> = 0;

        r0.<com.android.server.SystemUpdateManagerService: int mLastUid> = -1;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("status", 0);

        return $r3;
    }

    private void saveSystemUpdateInfoLocked(android.os.PersistableBundle, int)
    {
        com.android.server.SystemUpdateManagerService r0;
        android.os.PersistableBundle r1, $r3;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        r1 := @parameter0: android.os.PersistableBundle;

        i0 := @parameter1: int;

        $r3 = new android.os.PersistableBundle;

        specialinvoke $r3.<android.os.PersistableBundle: void <init>()>();

        virtualinvoke $r3.<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)>("info-bundle", r1);

        virtualinvoke $r3.<android.os.PersistableBundle: void putInt(java.lang.String,int)>("version", 0);

        virtualinvoke $r3.<android.os.PersistableBundle: void putInt(java.lang.String,int)>("uid", i0);

        $i1 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: int getBootCount()>();

        virtualinvoke $r3.<android.os.PersistableBundle: void putInt(java.lang.String,int)>("boot-count", $i1);

        $z0 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: boolean writeInfoFileLocked(android.os.PersistableBundle)>($r3);

        if $z0 == 0 goto label1;

        r0.<com.android.server.SystemUpdateManagerService: int mLastUid> = i0;

        $i2 = virtualinvoke r1.<android.os.PersistableBundle: int getInt(java.lang.String)>("status");

        r0.<com.android.server.SystemUpdateManagerService: int mLastStatus> = $i2;

     label1:
        return;
    }

    private boolean writeInfoFileLocked(android.os.PersistableBundle)
    {
        com.android.server.SystemUpdateManagerService r0;
        java.io.FileOutputStream r1, r13;
        com.android.internal.util.FastXmlSerializer r2;
        android.util.AtomicFile $r3, $r9, $r11;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Boolean $r6;
        java.lang.Throwable $r10;
        android.os.PersistableBundle r12;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        r12 := @parameter0: android.os.PersistableBundle;

        r13 = null;

     label01:
        $r3 = r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile>;

        r1 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r13 = r1;

     label03:
        r2 = new com.android.internal.util.FastXmlSerializer;

     label04:
        r13 = r1;

     label05:
        specialinvoke r2.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label06:
        r13 = r1;

     label07:
        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, $r5);

     label08:
        r13 = r1;

     label09:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

     label10:
        r13 = r1;

     label11:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "info");

     label12:
        r13 = r1;

     label13:
        virtualinvoke r12.<android.os.PersistableBundle: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r2);

     label14:
        r13 = r1;

     label15:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "info");

     label16:
        r13 = r1;

     label17:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label18:
        r13 = r1;

     label19:
        $r9 = r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile>;

        virtualinvoke $r9.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r1);

     label20:
        return 1;

     label21:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemUpdateManagerService", "Failed to save the info file:", $r10);

        if r13 == null goto label22;

        $r11 = r0.<com.android.server.SystemUpdateManagerService: android.util.AtomicFile mFile>;

        virtualinvoke $r11.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r13);

     label22:
        return 0;

        catch java.io.IOException from label01 to label02 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label21;
        catch java.io.IOException from label05 to label06 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label21;
        catch java.io.IOException from label07 to label08 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label21;
        catch java.io.IOException from label09 to label10 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label21;
        catch java.io.IOException from label11 to label12 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label21;
        catch java.io.IOException from label13 to label14 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label21;
        catch java.io.IOException from label15 to label16 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label21;
        catch java.io.IOException from label17 to label18 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label21;
        catch java.io.IOException from label19 to label20 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label21;
    }

    public android.os.Bundle retrieveSystemUpdateInfo()
    {
        com.android.server.SystemUpdateManagerService r0;
        java.lang.Object r1;
        android.content.Context $r2, $r3;
        int $i0, $i1;
        java.lang.SecurityException $r4;
        java.lang.Throwable $r5;
        android.os.Bundle r6;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        $r2 = r0.<com.android.server.SystemUpdateManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_SYSTEM_UPDATE_INFO");

        if $i0 != -1 goto label2;

        $r3 = r0.<com.android.server.SystemUpdateManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.RECOVERY");

        if $i1 == -1 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Can\'t read system update info. Requiring READ_SYSTEM_UPDATE_INFO or RECOVERY permission.");

        throw $r4;

     label2:
        r1 = r0.<com.android.server.SystemUpdateManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label3:
        r6 = specialinvoke r0.<com.android.server.SystemUpdateManagerService: android.os.Bundle loadSystemUpdateInfoLocked()>();

        exitmonitor r1;

     label4:
        return r6;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void updateSystemUpdateInfo(android.os.PersistableBundle)
    {
        com.android.server.SystemUpdateManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1;
        android.content.Context $r2;
        java.lang.Throwable $r3;
        android.os.PersistableBundle r4;

        r0 := @this: com.android.server.SystemUpdateManagerService;

        r4 := @parameter0: android.os.PersistableBundle;

        $r2 = r0.<com.android.server.SystemUpdateManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.RECOVERY", "SystemUpdateManagerService");

        i0 = virtualinvoke r4.<android.os.PersistableBundle: int getInt(java.lang.String,int)>("status", 0);

        if i0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Invalid status info. Ignored");

        return;

     label1:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = r0.<com.android.server.SystemUpdateManagerService: int mLastUid>;

        if i2 == -1 goto label3;

        if i2 == i1 goto label3;

        if i0 == 1 goto label2;

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemUpdateManagerService", "Inactive updater reporting IDLE status. Ignored");

        goto label5;

     label3:
        r1 = r0.<com.android.server.SystemUpdateManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label4:
        specialinvoke r0.<com.android.server.SystemUpdateManagerService: void saveSystemUpdateInfoLocked(android.os.PersistableBundle,int)>(r4, i1);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <com.android.server.SystemUpdateManagerService: int UID_UNKNOWN> = -1;

        <com.android.server.SystemUpdateManagerService: java.lang.String TAG_INFO> = "info";

        <com.android.server.SystemUpdateManagerService: java.lang.String TAG> = "SystemUpdateManagerService";

        <com.android.server.SystemUpdateManagerService: java.lang.String KEY_VERSION> = "version";

        <com.android.server.SystemUpdateManagerService: java.lang.String KEY_UID> = "uid";

        <com.android.server.SystemUpdateManagerService: java.lang.String KEY_INFO_BUNDLE> = "info-bundle";

        <com.android.server.SystemUpdateManagerService: java.lang.String KEY_BOOT_COUNT> = "boot-count";

        <com.android.server.SystemUpdateManagerService: int INFO_FILE_VERSION> = 0;

        <com.android.server.SystemUpdateManagerService: java.lang.String INFO_FILE> = "system-update-info.xml";

        return;
    }
}
