class com.android.server.TestNetworkService extends android.net.ITestNetworkManager$Stub
{
    private static final java.lang.String PERMISSION_NAME;
    private static final java.lang.String TAG;
    private static final java.lang.String TEST_NETWORK_TYPE;
    private static final java.util.concurrent.atomic.AtomicInteger sTestTunIndex;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private final android.os.HandlerThread mHandlerThread;
    private final android.os.INetworkManagementService mNMS;
    private final android.net.INetd mNetd;
    private final android.util.SparseArray mTestNetworkTracker;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        <com.android.server.TestNetworkService: java.lang.String TEST_NETWORK_TYPE> = "TEST_NETWORK";

        <com.android.server.TestNetworkService: java.lang.String PERMISSION_NAME> = "android.permission.MANAGE_TEST_NETWORKS";

        $r0 = class "Lcom/android/server/TestNetworkService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.TestNetworkService: java.lang.String TAG> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <com.android.server.TestNetworkService: java.util.concurrent.atomic.AtomicInteger sTestTunIndex> = $r2;

        return;
    }

    protected void <init>(android.content.Context, android.os.INetworkManagementService)
    {
        com.android.server.TestNetworkService r0;
        android.os.INetworkManagementService r1, $r11;
        android.util.SparseArray $r3;
        android.os.HandlerThread $r4, $r6;
        android.os.Handler $r5;
        android.os.Looper $r7;
        android.content.Context $r9, r14;
        android.net.INetd $r13, r15;

        r0 := @this: com.android.server.TestNetworkService;

        r14 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.INetworkManagementService;

        specialinvoke r0.<android.net.ITestNetworkManager$Stub: void <init>()>();

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.TestNetworkService: android.util.SparseArray mTestNetworkTracker> = $r3;

        $r4 = new android.os.HandlerThread;

        specialinvoke $r4.<android.os.HandlerThread: void <init>(java.lang.String)>("TestNetworkServiceThread");

        r0.<com.android.server.TestNetworkService: android.os.HandlerThread mHandlerThread> = $r4;

        virtualinvoke $r4.<android.os.HandlerThread: void start()>();

        $r5 = new android.os.Handler;

        $r6 = r0.<com.android.server.TestNetworkService: android.os.HandlerThread mHandlerThread>;

        $r7 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<com.android.server.TestNetworkService: android.os.Handler mHandler> = $r5;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "missing Context");

        $r9 = (android.content.Context) r14;

        r0.<com.android.server.TestNetworkService: android.content.Context mContext> = $r9;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "missing INetworkManagementService");

        $r11 = (android.os.INetworkManagementService) r1;

        r0.<com.android.server.TestNetworkService: android.os.INetworkManagementService mNMS> = $r11;

        r15 = staticinvoke <android.net.util.NetdService: android.net.INetd getInstance()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "could not get netd instance");

        $r13 = (android.net.INetd) r15;

        r0.<com.android.server.TestNetworkService: android.net.INetd mNetd> = $r13;

        return;
    }

    static android.util.SparseArray access$000(com.android.server.TestNetworkService)
    {
        com.android.server.TestNetworkService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.TestNetworkService;

        $r1 = r0.<com.android.server.TestNetworkService: android.util.SparseArray mTestNetworkTracker>;

        return $r1;
    }

    private android.net.TestNetworkInterface createInterface(boolean, android.net.LinkAddress[])
    {
        com.android.server.TestNetworkService r0;
        boolean z0;
        android.net.LinkAddress[] r1;
        android.content.Context $r3;
        java.lang.StringBuilder $r5;
        java.util.concurrent.atomic.AtomicInteger $r7;
        int $i0;
        com.android.server._$$Lambda$TestNetworkService$kNsToB0Cr6DV8jrvpBel_EzoIHE $r9;
        java.lang.String $r10, r13;
        java.lang.Object $r11;
        android.net.TestNetworkInterface $r12;

        r0 := @this: com.android.server.TestNetworkService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.LinkAddress[];

        $r3 = r0.<com.android.server.TestNetworkService: android.content.Context mContext>;

        staticinvoke <com.android.server.TestNetworkService: void enforceTestNetworkPermissions(android.content.Context)>($r3);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "missing linkAddrs");

        if z0 == 0 goto label1;

        r13 = "testtun";

        goto label2;

     label1:
        r13 = "testtap";

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r7 = <com.android.server.TestNetworkService: java.util.concurrent.atomic.AtomicInteger sTestTunIndex>;

        $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = new com.android.server._$$Lambda$TestNetworkService$kNsToB0Cr6DV8jrvpBel_EzoIHE;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.android.server._$$Lambda$TestNetworkService$kNsToB0Cr6DV8jrvpBel_EzoIHE: void <init>(com.android.server.TestNetworkService,boolean,java.lang.String,android.net.LinkAddress[])>(r0, z0, $r10, r1);

        $r11 = staticinvoke <android.os.Binder: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r9);

        $r12 = (android.net.TestNetworkInterface) $r11;

        return $r12;
    }

    public static void enforceTestNetworkPermissions(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        virtualinvoke r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_TEST_NETWORKS", "TestNetworkService");

        return;
    }

    private static native int jniCreateTunTap(boolean, java.lang.String);

    private com.android.server.TestNetworkService$TestNetworkAgent registerTestNetworkAgent(android.os.Looper, android.content.Context, java.lang.String, android.net.LinkProperties, boolean, int, int[], android.os.IBinder) throws android.os.RemoteException, java.net.SocketException
    {
        com.android.server.TestNetworkService r0;
        android.os.Looper r1;
        android.content.Context r2;
        java.lang.String r3, $r23;
        boolean z0, $z4, $z5, $z6, $z7, z8, z9, $z10, z11;
        int i0;
        android.os.IBinder r4;
        android.net.NetworkInfo $r9;
        android.net.NetworkInfo$DetailedState $r10;
        android.net.NetworkCapabilities $r11;
        android.net.StringNetworkSpecifier $r15;
        android.net.LinkProperties $r18, $r39, r41, r43;
        java.util.ArrayList $r19;
        java.lang.StringBuilder $r20;
        java.util.List $r25;
        com.android.server.TestNetworkService$TestNetworkAgent $r26;
        android.net.RouteInfo $r27, $r30;
        android.net.IpPrefix $r28, $r31;
        java.net.InetAddress $r29, $r32, $r35, $r36, $r37, $r38;
        java.lang.Object $r33;
        android.net.LinkAddress $r34;
        short $s1;
        int[] r42;
        java.net.NetworkInterface r44;
        java.util.Iterator r46;
        java.net.InterfaceAddress r47;

        r0 := @this: com.android.server.TestNetworkService;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.lang.String;

        r41 := @parameter3: android.net.LinkProperties;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        r42 := @parameter6: int[];

        r4 := @parameter7: android.os.IBinder;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "missing Looper");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "missing Context");

        $r9 = new android.net.NetworkInfo;

        specialinvoke $r9.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(18, 0, "TEST_NETWORK", "");

        $r10 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        virtualinvoke $r9.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r10, null, null);

        virtualinvoke $r9.<android.net.NetworkInfo: void setIsAvailable(boolean)>(1);

        $r11 = new android.net.NetworkCapabilities;

        specialinvoke $r11.<android.net.NetworkCapabilities: void <init>()>();

        virtualinvoke $r11.<android.net.NetworkCapabilities: void clearAll()>();

        virtualinvoke $r11.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(7);

        virtualinvoke $r11.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(21);

        virtualinvoke $r11.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(13);

        $r15 = new android.net.StringNetworkSpecifier;

        specialinvoke $r15.<android.net.StringNetworkSpecifier: void <init>(java.lang.String)>(r3);

        virtualinvoke $r11.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setNetworkSpecifier(android.net.NetworkSpecifier)>($r15);

        virtualinvoke $r11.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setAdministratorUids(int[])>(r42);

        if z0 != 0 goto label1;

        virtualinvoke $r11.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(11);

     label1:
        if r41 != null goto label2;

        $r39 = new android.net.LinkProperties;

        specialinvoke $r39.<android.net.LinkProperties: void <init>()>();

        r43 = $r39;

        goto label3;

     label2:
        $r18 = new android.net.LinkProperties;

        specialinvoke $r18.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>(r41);

        r43 = $r18;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r18.<android.net.LinkProperties: void setLinkAddresses(java.util.Collection)>($r19);

     label3:
        virtualinvoke r43.<android.net.LinkProperties: void setInterfaceName(java.lang.String)>(r3);

        r44 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>(r3);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such network interface found: ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r44);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r44, $r23);

        $r25 = virtualinvoke r44.<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>();

        r46 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

        z8 = 0;

        z9 = 0;

     label4:
        $z10 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label7;

        $r33 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (java.net.InterfaceAddress) $r33;

        $r34 = new android.net.LinkAddress;

        $r35 = virtualinvoke r47.<java.net.InterfaceAddress: java.net.InetAddress getAddress()>();

        $s1 = virtualinvoke r47.<java.net.InterfaceAddress: short getNetworkPrefixLength()>();

        specialinvoke $r34.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>($r35, $s1);

        virtualinvoke r43.<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>($r34);

        $r36 = virtualinvoke r47.<java.net.InterfaceAddress: java.net.InetAddress getAddress()>();

        $z4 = $r36 instanceof java.net.Inet6Address;

        if $z4 == 0 goto label5;

        $r38 = virtualinvoke r47.<java.net.InterfaceAddress: java.net.InetAddress getAddress()>();

        $z6 = virtualinvoke $r38.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        $z7 = $z6 ^ 1;

        z11 = z9 | $z7;

        goto label6;

     label5:
        z11 = z9;

        $r37 = virtualinvoke r47.<java.net.InterfaceAddress: java.net.InetAddress getAddress()>();

        $z5 = $r37 instanceof java.net.Inet4Address;

        if $z5 == 0 goto label6;

        z8 = 1;

        z11 = z9;

     label6:
        z9 = z11;

        goto label4;

     label7:
        if z8 == 0 goto label8;

        $r30 = new android.net.RouteInfo;

        $r31 = new android.net.IpPrefix;

        $r32 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        specialinvoke $r31.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r32, 0);

        specialinvoke $r30.<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress,java.lang.String)>($r31, null, r3);

        virtualinvoke r43.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>($r30);

     label8:
        if z9 == 0 goto label9;

        $r27 = new android.net.RouteInfo;

        $r28 = new android.net.IpPrefix;

        $r29 = <java.net.Inet6Address: java.net.InetAddress ANY>;

        specialinvoke $r28.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r29, 0);

        specialinvoke $r27.<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress,java.lang.String)>($r28, null, r3);

        virtualinvoke r43.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>($r27);

     label9:
        $r26 = new com.android.server.TestNetworkService$TestNetworkAgent;

        specialinvoke $r26.<com.android.server.TestNetworkService$TestNetworkAgent: void <init>(com.android.server.TestNetworkService,android.os.Looper,android.content.Context,android.net.NetworkInfo,android.net.NetworkCapabilities,android.net.LinkProperties,int,android.os.IBinder,com.android.server.TestNetworkService$1)>(r0, r1, r2, $r9, $r11, r43, i0, r4, null);

        return $r26;
    }

    public android.net.TestNetworkInterface createTapInterface()
    {
        com.android.server.TestNetworkService r0;
        android.net.LinkAddress[] $r1;
        android.net.TestNetworkInterface $r2;

        r0 := @this: com.android.server.TestNetworkService;

        $r1 = newarray (android.net.LinkAddress)[0];

        $r2 = specialinvoke r0.<com.android.server.TestNetworkService: android.net.TestNetworkInterface createInterface(boolean,android.net.LinkAddress[])>(0, $r1);

        return $r2;
    }

    public android.net.TestNetworkInterface createTunInterface(android.net.LinkAddress[])
    {
        com.android.server.TestNetworkService r0;
        android.net.LinkAddress[] r1;
        android.net.TestNetworkInterface $r2;

        r0 := @this: com.android.server.TestNetworkService;

        r1 := @parameter0: android.net.LinkAddress[];

        $r2 = specialinvoke r0.<com.android.server.TestNetworkService: android.net.TestNetworkInterface createInterface(boolean,android.net.LinkAddress[])>(1, r1);

        return $r2;
    }

    public android.net.TestNetworkInterface lambda$createInterface$0$TestNetworkService(boolean, java.lang.String, android.net.LinkAddress[]) throws java.lang.Exception
    {
        com.android.server.TestNetworkService r0;
        boolean z0;
        android.net.LinkAddress[] r1;
        android.os.ParcelFileDescriptor r2;
        int i0, $i1, $i2, i3;
        android.net.LinkAddress r3;
        android.net.TestNetworkInterface $r4;
        android.net.INetd $r5;
        java.net.InetAddress $r6;
        java.lang.String $r7, r10;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.android.server.TestNetworkService;

        z0 := @parameter0: boolean;

        r10 := @parameter1: java.lang.String;

        r1 := @parameter2: android.net.LinkAddress[];

     label1:
        $i1 = staticinvoke <com.android.server.TestNetworkService: int jniCreateTunTap(boolean,java.lang.String)>(z0, r10);

        r2 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>($i1);

        i0 = lengthof r1;

     label2:
        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        r3 = r1[i3];

     label4:
        $r5 = r0.<com.android.server.TestNetworkService: android.net.INetd mNetd>;

        $r6 = virtualinvoke r3.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $r7 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke r3.<android.net.LinkAddress: int getPrefixLength()>();

        interfaceinvoke $r5.<android.net.INetd: void interfaceAddAddress(java.lang.String,java.lang.String,int)>(r10, $r7, $i2);

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        $r4 = new android.net.TestNetworkInterface;

        specialinvoke $r4.<android.net.TestNetworkInterface: void <init>(android.os.ParcelFileDescriptor,java.lang.String)>(r2, r10);

     label7:
        return $r4;

     label8:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void lambda$setupTestNetwork$1$TestNetworkService(java.lang.String) throws java.lang.Exception
    {
        com.android.server.TestNetworkService r0;
        java.lang.String r1;
        android.os.INetworkManagementService $r2;

        r0 := @this: com.android.server.TestNetworkService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.TestNetworkService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setInterfaceUp(java.lang.String)>(r1);

        return;
    }

    public void setupTestNetwork(java.lang.String, android.net.LinkProperties, boolean, int[], android.os.IBinder)
    {
        com.android.server.TestNetworkService r0;
        android.net.LinkProperties r1;
        boolean z0, $z1, $z2;
        int[] r2;
        android.os.IBinder r3;
        android.content.Context $r4, $r9;
        android.os.Handler $r7;
        android.os.Looper $r8;
        int $i0, $i1;
        android.util.SparseArray $r10, r20;
        android.net.Network $r11;
        java.lang.Throwable $r13, $r16;
        android.os.RemoteException $r14;
        java.lang.RuntimeException $r15;
        java.lang.String r18;
        com.android.server.TestNetworkService$TestNetworkAgent r21;
        java.lang.IllegalArgumentException r25;
        com.android.server._$$Lambda$TestNetworkService$1hp_BCN_pFkUplS_GtzJEkxX10Y r26;
        java.io.UncheckedIOException r27;
        java.io.IOException r28;

        r0 := @this: com.android.server.TestNetworkService;

        r18 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkProperties;

        z0 := @parameter2: boolean;

        r2 := @parameter3: int[];

        r3 := @parameter4: android.os.IBinder;

        $r4 = r0.<com.android.server.TestNetworkService: android.content.Context mContext>;

        staticinvoke <com.android.server.TestNetworkService: void enforceTestNetworkPermissions(android.content.Context)>($r4);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r18, "missing Iface");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "missing IBinder");

        $z1 = virtualinvoke r18.<java.lang.String: boolean startsWith(java.lang.String)>("ipsec");

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke r18.<java.lang.String: boolean startsWith(java.lang.String)>("testtun");

        if $z2 == 0 goto label01;

        goto label02;

     label01:
        r25 = new java.lang.IllegalArgumentException;

        specialinvoke r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create network for non ipsec, non-testtun interface");

        throw r25;

     label02:
        r26 = new com.android.server._$$Lambda$TestNetworkService$1hp_BCN_pFkUplS_GtzJEkxX10Y;

        specialinvoke r26.<com.android.server._$$Lambda$TestNetworkService$1hp_BCN_pFkUplS_GtzJEkxX10Y: void <init>(com.android.server.TestNetworkService,java.lang.String)>(r0, r18);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r26);

        r20 = r0.<com.android.server.TestNetworkService: android.util.SparseArray mTestNetworkTracker>;

        entermonitor r20;

     label03:
        $r7 = r0.<com.android.server.TestNetworkService: android.os.Handler mHandler>;

        $r8 = virtualinvoke $r7.<android.os.Handler: android.os.Looper getLooper()>();

        $r9 = r0.<com.android.server.TestNetworkService: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r21 = specialinvoke r0.<com.android.server.TestNetworkService: com.android.server.TestNetworkService$TestNetworkAgent registerTestNetworkAgent(android.os.Looper,android.content.Context,java.lang.String,android.net.LinkProperties,boolean,int,int[],android.os.IBinder)>($r8, $r9, r18, r1, z0, $i0, r2, r3);

        $r10 = r0.<com.android.server.TestNetworkService: android.util.SparseArray mTestNetworkTracker>;

        $r11 = virtualinvoke r21.<com.android.server.TestNetworkService$TestNetworkAgent: android.net.Network getNetwork()>();

        $i1 = $r11.<android.net.Network: int netId>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, r21);

        exitmonitor r20;

     label04:
        return;

     label05:
        $r13 := @caughtexception;

     label06:
        exitmonitor r20;

     label07:
        throw $r13;

     label08:
        $r14 := @caughtexception;

        goto label10;

     label09:
        $r16 := @caughtexception;

        goto label11;

     label10:
        $r15 = virtualinvoke $r14.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r15;

     label11:
        r27 = new java.io.UncheckedIOException;

        r28 = (java.io.IOException) $r16;

        specialinvoke r27.<java.io.UncheckedIOException: void <init>(java.io.IOException)>(r28);

        throw r27;

        catch java.net.SocketException from label02 to label03 with label09;
        catch android.os.RemoteException from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.net.SocketException from label07 to label08 with label09;
        catch android.os.RemoteException from label07 to label08 with label08;
    }

    public void teardownTestNetwork(int)
    {
        com.android.server.TestNetworkService r0;
        int i0, $i1, $i2;
        android.util.SparseArray r1, $r3;
        android.content.Context $r2;
        java.lang.Object $r4;
        java.lang.SecurityException $r5;
        java.lang.Throwable $r6;
        com.android.server.TestNetworkService$TestNetworkAgent r7;

        r0 := @this: com.android.server.TestNetworkService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.TestNetworkService: android.content.Context mContext>;

        staticinvoke <com.android.server.TestNetworkService: void enforceTestNetworkPermissions(android.content.Context)>($r2);

        r1 = r0.<com.android.server.TestNetworkService: android.util.SparseArray mTestNetworkTracker>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.TestNetworkService: android.util.SparseArray mTestNetworkTracker>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.TestNetworkService$TestNetworkAgent) $r4;

        exitmonitor r1;

     label2:
        if r7 != null goto label3;

        return;

     label3:
        $i1 = staticinvoke <com.android.server.TestNetworkService$TestNetworkAgent: int access$200(com.android.server.TestNetworkService$TestNetworkAgent)>(r7);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != $i2 goto label4;

        staticinvoke <com.android.server.TestNetworkService$TestNetworkAgent: void access$300(com.android.server.TestNetworkService$TestNetworkAgent)>(r7);

        return;

     label4:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Attempted to modify other user\'s test networks");

        throw $r5;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
