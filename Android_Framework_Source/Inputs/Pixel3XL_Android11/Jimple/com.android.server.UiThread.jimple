public final class com.android.server.UiThread extends com.android.server.ServiceThread
{
    private static final long SLOW_DELIVERY_THRESHOLD_MS;
    private static final long SLOW_DISPATCH_THRESHOLD_MS;
    private static android.os.Handler sHandler;
    private static com.android.server.UiThread sInstance;

    private void <init>()
    {
        com.android.server.UiThread r0;

        r0 := @this: com.android.server.UiThread;

        specialinvoke r0.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("android.ui", -2, 0);

        return;
    }

    public static void dispose()
    {
        android.os.Handler r0;
        com.android.server.UiThread r1, $r2;
        java.lang.Throwable $r4;
        com.android.server._$$Lambda$OiriEnuntH0IJYDPdRjKdzSjR0o r5;

        entermonitor class "Lcom/android/server/UiThread;";

     label1:
        $r2 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        if $r2 != null goto label3;

        exitmonitor class "Lcom/android/server/UiThread;";

     label2:
        return;

     label3:
        r0 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        r1 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r5 = new com.android.server._$$Lambda$OiriEnuntH0IJYDPdRjKdzSjR0o;

        specialinvoke r5.<com.android.server._$$Lambda$OiriEnuntH0IJYDPdRjKdzSjR0o: void <init>(com.android.server.UiThread)>(r1);

        virtualinvoke r0.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>(r5, 0L);

        <com.android.server.UiThread: com.android.server.UiThread sInstance> = null;

        exitmonitor class "Lcom/android/server/UiThread;";

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor class "Lcom/android/server/UiThread;";

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static void ensureThreadLocked()
    {
        com.android.server.UiThread $r0, $r1, $r2, $r4;
        android.os.Handler $r3;
        android.os.Looper $r5, r7;

        $r0 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        if $r0 != null goto label1;

        $r1 = new com.android.server.UiThread;

        specialinvoke $r1.<com.android.server.UiThread: void <init>()>();

        <com.android.server.UiThread: com.android.server.UiThread sInstance> = $r1;

        virtualinvoke $r1.<com.android.server.UiThread: void start()>();

        $r2 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        r7 = virtualinvoke $r2.<com.android.server.UiThread: android.os.Looper getLooper()>();

        virtualinvoke r7.<android.os.Looper: void setTraceTag(long)>(524288L);

        virtualinvoke r7.<android.os.Looper: void setSlowLogThresholdMs(long,long)>(100L, 200L);

        $r3 = new android.os.Handler;

        $r4 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        $r5 = virtualinvoke $r4.<com.android.server.UiThread: android.os.Looper getLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r5);

        <com.android.server.UiThread: android.os.Handler sHandler> = $r3;

     label1:
        return;
    }

    public static com.android.server.UiThread get()
    {
        java.lang.Throwable $r0;
        com.android.server.UiThread r1;

        entermonitor class "Lcom/android/server/UiThread;";

     label1:
        staticinvoke <com.android.server.UiThread: void ensureThreadLocked()>();

        r1 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        exitmonitor class "Lcom/android/server/UiThread;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/UiThread;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.os.Handler getHandler()
    {
        java.lang.Throwable $r0;
        android.os.Handler r1;

        entermonitor class "Lcom/android/server/UiThread;";

     label1:
        staticinvoke <com.android.server.UiThread: void ensureThreadLocked()>();

        r1 = <com.android.server.UiThread: android.os.Handler sHandler>;

        exitmonitor class "Lcom/android/server/UiThread;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/UiThread;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void run()
    {
        com.android.server.UiThread r0;
        int $i0;

        r0 := @this: com.android.server.UiThread;

        $i0 = staticinvoke <android.os.Process: int myTid()>();

        staticinvoke <android.os.Process: void setThreadGroup(int,int)>($i0, 5);

        specialinvoke r0.<com.android.server.ServiceThread: void run()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.UiThread: long SLOW_DISPATCH_THRESHOLD_MS> = 100L;

        <com.android.server.UiThread: long SLOW_DELIVERY_THRESHOLD_MS> = 200L;

        return;
    }
}
