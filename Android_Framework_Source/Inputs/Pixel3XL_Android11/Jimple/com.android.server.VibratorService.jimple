public class com.android.server.VibratorService extends android.os.IVibratorService$Stub implements android.hardware.input.InputManager$InputDeviceListener
{
    private static final long ASYNC_TIMEOUT_MULTIPLIER;
    private static final boolean DEBUG;
    private static final android.os.VibrationAttributes DEFAULT_ATTRIBUTES;
    private static final long[] DOUBLE_CLICK_EFFECT_FALLBACK_TIMINGS;
    private static final java.lang.String EXTERNAL_VIBRATOR_SERVICE;
    private static final int SCALE_HIGH;
    private static final float SCALE_HIGH_GAMMA;
    private static final int SCALE_LOW;
    private static final float SCALE_LOW_GAMMA;
    private static final int SCALE_LOW_MAX_AMPLITUDE;
    private static final int SCALE_MUTE;
    private static final int SCALE_NONE;
    private static final float SCALE_NONE_GAMMA;
    private static final int SCALE_VERY_HIGH;
    private static final float SCALE_VERY_HIGH_GAMMA;
    private static final int SCALE_VERY_LOW;
    private static final float SCALE_VERY_LOW_GAMMA;
    private static final int SCALE_VERY_LOW_MAX_AMPLITUDE;
    private static final java.lang.String TAG;
    private final boolean mAllowPriorityVibrationsInLowPowerMode;
    private android.util.SparseArray mAlwaysOnEffects;
    private final android.app.AppOpsManager mAppOps;
    private final com.android.internal.app.IBatteryStats mBatteryStatsService;
    private final long mCapabilities;
    private final android.content.Context mContext;
    private int mCurVibUid;
    private android.os.ExternalVibration mCurrentExternalVibration;
    private com.android.server.VibratorService$Vibration mCurrentVibration;
    private final int mDefaultVibrationAmplitude;
    private final android.util.SparseArray mFallbackEffects;
    private final android.os.Handler mH;
    private int mHapticFeedbackIntensity;
    private android.hardware.input.InputManager mIm;
    private boolean mInputDeviceListenerRegistered;
    private final java.util.ArrayList mInputDeviceVibrators;
    android.content.BroadcastReceiver mIntentReceiver;
    private boolean mIsVibrating;
    private final java.lang.Object mLock;
    private boolean mLowPowerMode;
    private int mNotificationIntensity;
    private android.os.PowerManagerInternal mPowerManagerInternal;
    private final java.util.LinkedList mPreviousAlarmVibrations;
    private final java.util.LinkedList mPreviousExternalVibrations;
    private final java.util.LinkedList mPreviousNotificationVibrations;
    private final java.util.LinkedList mPreviousRingVibrations;
    private final java.util.LinkedList mPreviousVibrations;
    private final int mPreviousVibrationsLimit;
    private final android.util.SparseArray mProcStatesCache;
    private int mRingIntensity;
    private final android.util.SparseArray mScaleLevels;
    private com.android.server.VibratorService$SettingsObserver mSettingObserver;
    private final java.util.List mSupportedEffects;
    private final boolean mSupportsAmplitudeControl;
    private final boolean mSupportsExternalControl;
    private final java.lang.String mSystemUiPackage;
    private volatile com.android.server.VibratorService$VibrateThread mThread;
    private final android.os.WorkSource mTmpWorkSource;
    private final android.app.IUidObserver mUidObserver;
    private boolean mVibrateInputDevicesSetting;
    private final java.lang.Runnable mVibrationEndRunnable;
    private android.os.Vibrator mVibrator;
    private final android.os.RemoteCallbackList mVibratorStateListeners;
    private boolean mVibratorUnderExternalControl;
    private final android.os.PowerManager$WakeLock mWakeLock;

    static void <clinit>()
    {
        long[] $r0;
        android.os.VibrationAttributes$Builder $r1;
        android.os.VibrationAttributes $r2;

        <com.android.server.VibratorService: java.lang.String TAG> = "VibratorService";

        <com.android.server.VibratorService: int SCALE_VERY_LOW_MAX_AMPLITUDE> = 168;

        <com.android.server.VibratorService: float SCALE_VERY_LOW_GAMMA> = 2.0F;

        <com.android.server.VibratorService: int SCALE_VERY_LOW> = -2;

        <com.android.server.VibratorService: float SCALE_VERY_HIGH_GAMMA> = 0.25F;

        <com.android.server.VibratorService: int SCALE_VERY_HIGH> = 2;

        <com.android.server.VibratorService: float SCALE_NONE_GAMMA> = 1.0F;

        <com.android.server.VibratorService: int SCALE_NONE> = 0;

        <com.android.server.VibratorService: int SCALE_MUTE> = -100;

        <com.android.server.VibratorService: int SCALE_LOW_MAX_AMPLITUDE> = 192;

        <com.android.server.VibratorService: float SCALE_LOW_GAMMA> = 1.5F;

        <com.android.server.VibratorService: int SCALE_LOW> = -1;

        <com.android.server.VibratorService: float SCALE_HIGH_GAMMA> = 0.5F;

        <com.android.server.VibratorService: int SCALE_HIGH> = 1;

        <com.android.server.VibratorService: java.lang.String EXTERNAL_VIBRATOR_SERVICE> = "external_vibrator_service";

        <com.android.server.VibratorService: boolean DEBUG> = 0;

        <com.android.server.VibratorService: long ASYNC_TIMEOUT_MULTIPLIER> = 2L;

        $r0 = newarray (long)[4];

        $r0[0] = 0L;

        $r0[1] = 30L;

        $r0[2] = 100L;

        $r0[3] = 30L;

        <com.android.server.VibratorService: long[] DOUBLE_CLICK_EFFECT_FALLBACK_TIMINGS> = $r0;

        $r1 = new android.os.VibrationAttributes$Builder;

        specialinvoke $r1.<android.os.VibrationAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>();

        <com.android.server.VibratorService: android.os.VibrationAttributes DEFAULT_ATTRIBUTES> = $r2;

        return;
    }

    void <init>(android.content.Context)
    {
        com.android.server.VibratorService r0;
        android.os.VibrationEffect r1, r2, r3, $r47, r62;
        android.util.SparseArray $r4, $r10, $r42, $r43, $r44, $r45, $r46, $r48, $r51, $r53, $r55, $r57;
        android.os.WorkSource $r5;
        android.os.Handler $r6;
        java.lang.Object $r7, $r16, $r19, $r23;
        java.util.ArrayList $r8;
        android.os.RemoteCallbackList $r9;
        com.android.server.VibratorService$1 $r11;
        com.android.server.VibratorService$4 $r12;
        com.android.server.VibratorService$5 $r13;
        boolean $z0, $z1, $z2;
        int[] $r14;
        java.util.List $r15;
        long $l0;
        android.os.PowerManager $r17;
        android.content.Context $r18, $r27, $r29, $r31, r59;
        android.app.AppOpsManager $r20;
        android.os.IBinder $r21;
        com.android.internal.app.IBatteryStats $r22;
        android.content.pm.PackageManagerInternal $r24;
        android.content.ComponentName $r25;
        java.lang.String $r26;
        android.content.res.Resources $r28, $r30, $r32;
        int $i1, $i2;
        java.util.LinkedList $r33, $r34, $r35, $r36, $r37;
        android.content.IntentFilter $r38;
        android.content.BroadcastReceiver $r39;
        long[] $r41;
        com.android.server.VibratorService$ScaleLevel $r49, $r50, $r52, $r54, $r56;
        com.android.server.VibratorService$ExternalVibratorService $r58;
        android.os.PowerManager$WakeLock r60;

        r0 := @this: com.android.server.VibratorService;

        r59 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.IVibratorService$Stub: void <init>()>();

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.VibratorService: android.util.SparseArray mProcStatesCache> = $r4;

        $r5 = new android.os.WorkSource;

        specialinvoke $r5.<android.os.WorkSource: void <init>()>();

        r0.<com.android.server.VibratorService: android.os.WorkSource mTmpWorkSource> = $r5;

        $r6 = new android.os.Handler;

        specialinvoke $r6.<android.os.Handler: void <init>()>();

        r0.<com.android.server.VibratorService: android.os.Handler mH> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<com.android.server.VibratorService: java.lang.Object mLock> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators> = $r8;

        r0.<com.android.server.VibratorService: int mCurVibUid> = -1;

        $r9 = new android.os.RemoteCallbackList;

        specialinvoke $r9.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners> = $r9;

        $r10 = new android.util.SparseArray;

        specialinvoke $r10.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.VibratorService: android.util.SparseArray mAlwaysOnEffects> = $r10;

        $r11 = new com.android.server.VibratorService$1;

        specialinvoke $r11.<com.android.server.VibratorService$1: void <init>(com.android.server.VibratorService)>(r0);

        r0.<com.android.server.VibratorService: android.app.IUidObserver mUidObserver> = $r11;

        $r12 = new com.android.server.VibratorService$4;

        specialinvoke $r12.<com.android.server.VibratorService$4: void <init>(com.android.server.VibratorService)>(r0);

        r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationEndRunnable> = $r12;

        $r13 = new com.android.server.VibratorService$5;

        specialinvoke $r13.<com.android.server.VibratorService$5: void <init>(com.android.server.VibratorService)>(r0);

        r0.<com.android.server.VibratorService: android.content.BroadcastReceiver mIntentReceiver> = $r13;

        staticinvoke <com.android.server.VibratorService: void vibratorInit()>();

        staticinvoke <com.android.server.VibratorService: void vibratorOff()>();

        $z0 = staticinvoke <com.android.server.VibratorService: boolean vibratorSupportsAmplitudeControl()>();

        r0.<com.android.server.VibratorService: boolean mSupportsAmplitudeControl> = $z0;

        $z1 = staticinvoke <com.android.server.VibratorService: boolean vibratorSupportsExternalControl()>();

        r0.<com.android.server.VibratorService: boolean mSupportsExternalControl> = $z1;

        $r14 = staticinvoke <com.android.server.VibratorService: int[] vibratorGetSupportedEffects()>();

        $r15 = staticinvoke <com.android.server.VibratorService: java.util.List asList(int[])>($r14);

        r0.<com.android.server.VibratorService: java.util.List mSupportedEffects> = $r15;

        $l0 = staticinvoke <com.android.server.VibratorService: long vibratorGetCapabilities()>();

        r0.<com.android.server.VibratorService: long mCapabilities> = $l0;

        r0.<com.android.server.VibratorService: android.content.Context mContext> = r59;

        $r16 = virtualinvoke r59.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r17 = (android.os.PowerManager) $r16;

        r60 = virtualinvoke $r17.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "*vibrator*");

        r0.<com.android.server.VibratorService: android.os.PowerManager$WakeLock mWakeLock> = r60;

        virtualinvoke r60.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(1);

        $r18 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r20 = (android.app.AppOpsManager) $r19;

        r0.<com.android.server.VibratorService: android.app.AppOpsManager mAppOps> = $r20;

        $r21 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batterystats");

        $r22 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r21);

        r0.<com.android.server.VibratorService: com.android.internal.app.IBatteryStats mBatteryStatsService> = $r22;

        $r23 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r24 = (android.content.pm.PackageManagerInternal) $r23;

        $r25 = virtualinvoke $r24.<android.content.pm.PackageManagerInternal: android.content.ComponentName getSystemUiServiceComponent()>();

        $r26 = virtualinvoke $r25.<android.content.ComponentName: java.lang.String getPackageName()>();

        r0.<com.android.server.VibratorService: java.lang.String mSystemUiPackage> = $r26;

        $r27 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r28 = virtualinvoke $r27.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r28.<android.content.res.Resources: int getInteger(int)>(17694879);

        r0.<com.android.server.VibratorService: int mPreviousVibrationsLimit> = $i1;

        $r29 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r30 = virtualinvoke $r29.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r30.<android.content.res.Resources: int getInteger(int)>(17694787);

        r0.<com.android.server.VibratorService: int mDefaultVibrationAmplitude> = $i2;

        $r31 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r32 = virtualinvoke $r31.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r32.<android.content.res.Resources: boolean getBoolean(int)>(17891346);

        r0.<com.android.server.VibratorService: boolean mAllowPriorityVibrationsInLowPowerMode> = $z2;

        $r33 = new java.util.LinkedList;

        specialinvoke $r33.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousRingVibrations> = $r33;

        $r34 = new java.util.LinkedList;

        specialinvoke $r34.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousNotificationVibrations> = $r34;

        $r35 = new java.util.LinkedList;

        specialinvoke $r35.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousAlarmVibrations> = $r35;

        $r36 = new java.util.LinkedList;

        specialinvoke $r36.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousVibrations> = $r36;

        $r37 = new java.util.LinkedList;

        specialinvoke $r37.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousExternalVibrations> = $r37;

        $r38 = new android.content.IntentFilter;

        specialinvoke $r38.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r38.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        $r39 = r0.<com.android.server.VibratorService: android.content.BroadcastReceiver mIntentReceiver>;

        virtualinvoke r59.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r39, $r38);

        r1 = specialinvoke r0.<com.android.server.VibratorService: android.os.VibrationEffect createEffectFromResource(int)>(17236092);

        $r41 = <com.android.server.VibratorService: long[] DOUBLE_CLICK_EFFECT_FALLBACK_TIMINGS>;

        r2 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>($r41, -1);

        r62 = specialinvoke r0.<com.android.server.VibratorService: android.os.VibrationEffect createEffectFromResource(int)>(17236049);

        r3 = specialinvoke r0.<com.android.server.VibratorService: android.os.VibrationEffect createEffectFromResource(int)>(17236003);

        $r42 = new android.util.SparseArray;

        specialinvoke $r42.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.VibratorService: android.util.SparseArray mFallbackEffects> = $r42;

        virtualinvoke $r42.<android.util.SparseArray: void put(int,java.lang.Object)>(0, r1);

        $r43 = r0.<com.android.server.VibratorService: android.util.SparseArray mFallbackEffects>;

        virtualinvoke $r43.<android.util.SparseArray: void put(int,java.lang.Object)>(1, r2);

        $r44 = r0.<com.android.server.VibratorService: android.util.SparseArray mFallbackEffects>;

        virtualinvoke $r44.<android.util.SparseArray: void put(int,java.lang.Object)>(2, r3);

        $r45 = r0.<com.android.server.VibratorService: android.util.SparseArray mFallbackEffects>;

        virtualinvoke $r45.<android.util.SparseArray: void put(int,java.lang.Object)>(5, r62);

        $r46 = r0.<com.android.server.VibratorService: android.util.SparseArray mFallbackEffects>;

        $r47 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int,boolean)>(2, 0);

        virtualinvoke $r46.<android.util.SparseArray: void put(int,java.lang.Object)>(21, $r47);

        $r48 = new android.util.SparseArray;

        specialinvoke $r48.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.VibratorService: android.util.SparseArray mScaleLevels> = $r48;

        $r49 = new com.android.server.VibratorService$ScaleLevel;

        specialinvoke $r49.<com.android.server.VibratorService$ScaleLevel: void <init>(float,int)>(2.0F, 168);

        virtualinvoke $r48.<android.util.SparseArray: void put(int,java.lang.Object)>(-2, $r49);

        $r51 = r0.<com.android.server.VibratorService: android.util.SparseArray mScaleLevels>;

        $r50 = new com.android.server.VibratorService$ScaleLevel;

        specialinvoke $r50.<com.android.server.VibratorService$ScaleLevel: void <init>(float,int)>(1.5F, 192);

        virtualinvoke $r51.<android.util.SparseArray: void put(int,java.lang.Object)>(-1, $r50);

        $r53 = r0.<com.android.server.VibratorService: android.util.SparseArray mScaleLevels>;

        $r52 = new com.android.server.VibratorService$ScaleLevel;

        specialinvoke $r52.<com.android.server.VibratorService$ScaleLevel: void <init>(float)>(1.0F);

        virtualinvoke $r53.<android.util.SparseArray: void put(int,java.lang.Object)>(0, $r52);

        $r55 = r0.<com.android.server.VibratorService: android.util.SparseArray mScaleLevels>;

        $r54 = new com.android.server.VibratorService$ScaleLevel;

        specialinvoke $r54.<com.android.server.VibratorService$ScaleLevel: void <init>(float)>(0.5F);

        virtualinvoke $r55.<android.util.SparseArray: void put(int,java.lang.Object)>(1, $r54);

        $r57 = r0.<com.android.server.VibratorService: android.util.SparseArray mScaleLevels>;

        $r56 = new com.android.server.VibratorService$ScaleLevel;

        specialinvoke $r56.<com.android.server.VibratorService$ScaleLevel: void <init>(float)>(0.25F);

        virtualinvoke $r57.<android.util.SparseArray: void put(int,java.lang.Object)>(2, $r56);

        $r58 = new com.android.server.VibratorService$ExternalVibratorService;

        specialinvoke $r58.<com.android.server.VibratorService$ExternalVibratorService: void <init>(com.android.server.VibratorService)>(r0);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("external_vibrator_service", $r58);

        return;
    }

    static android.util.SparseArray access$000(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.util.SparseArray mProcStatesCache>;

        return $r1;
    }

    static java.lang.Object access$100(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        return $r1;
    }

    static android.os.WorkSource access$1100(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.os.WorkSource $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.os.WorkSource mTmpWorkSource>;

        return $r1;
    }

    static android.os.PowerManager$WakeLock access$1200(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static void access$1300(com.android.server.VibratorService, long, int, int, android.os.VibrationAttributes)
    {
        com.android.server.VibratorService r0;
        long l0;
        int i1, i2;
        android.os.VibrationAttributes r1;

        r0 := @parameter0: com.android.server.VibratorService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: android.os.VibrationAttributes;

        specialinvoke r0.<com.android.server.VibratorService: void doVibratorOn(long,int,int,android.os.VibrationAttributes)>(l0, i1, i2, r1);

        return;
    }

    static void access$1400(com.android.server.VibratorService, int)
    {
        com.android.server.VibratorService r0;
        int i0;

        r0 := @parameter0: com.android.server.VibratorService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.VibratorService: void doVibratorSetAmplitude(int)>(i0);

        return;
    }

    static com.android.server.VibratorService$VibrateThread access$1500(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$VibrateThread $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        return $r1;
    }

    static boolean access$1700(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.VibratorService;

        $z0 = r0.<com.android.server.VibratorService: boolean mSupportsExternalControl>;

        return $z0;
    }

    static android.os.ExternalVibration access$1800(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.os.ExternalVibration $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.os.ExternalVibration mCurrentExternalVibration>;

        return $r1;
    }

    static android.os.ExternalVibration access$1802(com.android.server.VibratorService, android.os.ExternalVibration)
    {
        com.android.server.VibratorService r0;
        android.os.ExternalVibration r1;

        r0 := @parameter0: com.android.server.VibratorService;

        r1 := @parameter1: android.os.ExternalVibration;

        r0.<com.android.server.VibratorService: android.os.ExternalVibration mCurrentExternalVibration> = r1;

        return r1;
    }

    static void access$1900(com.android.server.VibratorService, boolean)
    {
        com.android.server.VibratorService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.VibratorService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.VibratorService: void setVibratorUnderExternalControl(boolean)>(z0);

        return;
    }

    static com.android.server.VibratorService$Vibration access$200(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        return $r1;
    }

    static java.util.LinkedList access$2100(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousExternalVibrations>;

        return $r1;
    }

    static int access$2200(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        int $i0;

        r0 := @parameter0: com.android.server.VibratorService;

        $i0 = r0.<com.android.server.VibratorService: int mPreviousVibrationsLimit>;

        return $i0;
    }

    static android.os.Vibrator access$2300(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.os.Vibrator $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator>;

        return $r1;
    }

    static int access$2400(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        int $i0;

        r0 := @parameter0: com.android.server.VibratorService;

        $i0 = r0.<com.android.server.VibratorService: int mRingIntensity>;

        return $i0;
    }

    static int access$2500(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        int $i0;

        r0 := @parameter0: com.android.server.VibratorService;

        $i0 = r0.<com.android.server.VibratorService: int mNotificationIntensity>;

        return $i0;
    }

    static int access$2600(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        int $i0;

        r0 := @parameter0: com.android.server.VibratorService;

        $i0 = r0.<com.android.server.VibratorService: int mHapticFeedbackIntensity>;

        return $i0;
    }

    static android.content.Context access$2700(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$2900(com.android.server.VibratorService, long)
    {
        com.android.server.VibratorService r0;
        long l0;
        boolean $z0;

        r0 := @parameter0: com.android.server.VibratorService;

        l0 := @parameter1: long;

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean hasCapability(long)>(l0);

        return $z0;
    }

    static void access$300(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;

        r0 := @parameter0: com.android.server.VibratorService;

        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

        return;
    }

    static boolean access$3000(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.VibratorService;

        $z0 = r0.<com.android.server.VibratorService: boolean mSupportsAmplitudeControl>;

        return $z0;
    }

    static boolean access$400(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean isHapticFeedback(int)>(i0);

        return $z0;
    }

    static boolean access$500(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean isNotification(int)>(i0);

        return $z0;
    }

    static boolean access$600(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean isRingtone(int)>(i0);

        return $z0;
    }

    static boolean access$700(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean isAlarm(int)>(i0);

        return $z0;
    }

    static java.lang.String access$800(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: java.lang.String mSystemUiPackage>;

        return $r1;
    }

    static void access$900(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;

        r0 := @parameter0: com.android.server.VibratorService;

        specialinvoke r0.<com.android.server.VibratorService: void updateVibrators()>();

        return;
    }

    private void addToPreviousVibrationsLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        boolean $z0, $z1, $z2;
        com.android.server.VibratorService$VibrationInfo $r2;
        java.util.LinkedList r4;
        int $i0, $i1;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

        $z0 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isRingtone()>();

        if $z0 == 0 goto label1;

        r4 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousRingVibrations>;

        goto label4;

     label1:
        $z1 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isNotification()>();

        if $z1 == 0 goto label2;

        r4 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousNotificationVibrations>;

        goto label4;

     label2:
        $z2 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isAlarm()>();

        if $z2 == 0 goto label3;

        r4 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousAlarmVibrations>;

        goto label4;

     label3:
        r4 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousVibrations>;

     label4:
        $i0 = virtualinvoke r4.<java.util.LinkedList: int size()>();

        $i1 = r0.<com.android.server.VibratorService: int mPreviousVibrationsLimit>;

        if $i0 <= $i1 goto label5;

        virtualinvoke r4.<java.util.LinkedList: java.lang.Object removeFirst()>();

     label5:
        $r2 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: com.android.server.VibratorService$VibrationInfo toInfo()>();

        virtualinvoke r4.<java.util.LinkedList: void addLast(java.lang.Object)>($r2);

        return;
    }

    private void applyVibrationIntensityScalingLocked(com.android.server.VibratorService$Vibration, int)
    {
        com.android.server.VibratorService r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i8, i9, $i10;
        com.android.server.VibratorService$ScaleLevel r1;
        android.os.VibrationEffect $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r12, $r25, r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        float $f0, $f1, $f2;
        android.os.VibrationEffect$Composed $r8;
        android.os.VibrationEffect$Waveform $r10, $r11;
        android.os.VibrationEffect$OneShot $r13, $r14;
        java.lang.StringBuilder $r15;
        java.lang.String $r21;
        android.os.Vibrator $r22, $r23, $r24;
        android.os.VibrationEffect$Prebaked $r26;
        com.android.server.VibratorService$Vibration r27;
        android.util.SparseArray $r28;
        java.lang.Object $r29;

        r0 := @this: com.android.server.VibratorService;

        r27 := @parameter0: com.android.server.VibratorService$Vibration;

        i0 := @parameter1: int;

        $r2 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z0 = $r2 instanceof android.os.VibrationEffect$Prebaked;

        if $z0 == 0 goto label01;

        $r25 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $r26 = (android.os.VibrationEffect$Prebaked) $r25;

        $i8 = staticinvoke <com.android.server.VibratorService: int intensityToEffectStrength(int)>(i0);

        virtualinvoke $r26.<android.os.VibrationEffect$Prebaked: void setEffectStrength(int)>($i8);

        return;

     label01:
        $z1 = virtualinvoke r27.<com.android.server.VibratorService$Vibration: boolean isRingtone()>();

        if $z1 == 0 goto label02;

        $r24 = r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator>;

        i9 = virtualinvoke $r24.<android.os.Vibrator: int getDefaultRingVibrationIntensity()>();

        goto label05;

     label02:
        $z2 = virtualinvoke r27.<com.android.server.VibratorService$Vibration: boolean isNotification()>();

        if $z2 == 0 goto label03;

        $r23 = r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator>;

        i9 = virtualinvoke $r23.<android.os.Vibrator: int getDefaultNotificationVibrationIntensity()>();

        goto label05;

     label03:
        $z3 = virtualinvoke r27.<com.android.server.VibratorService$Vibration: boolean isHapticFeedback()>();

        if $z3 == 0 goto label04;

        $r22 = r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator>;

        i9 = virtualinvoke $r22.<android.os.Vibrator: int getDefaultHapticFeedbackIntensity()>();

        goto label05;

     label04:
        $z4 = virtualinvoke r27.<com.android.server.VibratorService$Vibration: boolean isAlarm()>();

        if $z4 == 0 goto label12;

        i9 = 3;

     label05:
        $r28 = r0.<com.android.server.VibratorService: android.util.SparseArray mScaleLevels>;

        $i10 = i0 - i9;

        $r29 = virtualinvoke $r28.<android.util.SparseArray: java.lang.Object get(int)>($i10);

        r1 = (com.android.server.VibratorService$ScaleLevel) $r29;

        if r1 != null goto label06;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No configured scaling level! (current=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", default= ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("VibratorService", $r21);

        return;

     label06:
        r31 = null;

        $r3 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z5 = $r3 instanceof android.os.VibrationEffect$OneShot;

        if $z5 == 0 goto label07;

        $r12 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $r13 = (android.os.VibrationEffect$OneShot) $r12;

        $i5 = r0.<com.android.server.VibratorService: int mDefaultVibrationAmplitude>;

        $r14 = virtualinvoke $r13.<android.os.VibrationEffect$OneShot: android.os.VibrationEffect$OneShot resolve(int)>($i5);

        $f2 = r1.<com.android.server.VibratorService$ScaleLevel: float gamma>;

        $i6 = r1.<com.android.server.VibratorService$ScaleLevel: int maxAmplitude>;

        r31 = virtualinvoke $r14.<android.os.VibrationEffect$OneShot: android.os.VibrationEffect$OneShot scale(float,int)>($f2, $i6);

        goto label10;

     label07:
        $r4 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z6 = $r4 instanceof android.os.VibrationEffect$Waveform;

        if $z6 == 0 goto label08;

        $r9 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $r10 = (android.os.VibrationEffect$Waveform) $r9;

        $i3 = r0.<com.android.server.VibratorService: int mDefaultVibrationAmplitude>;

        $r11 = virtualinvoke $r10.<android.os.VibrationEffect$Waveform: android.os.VibrationEffect$Waveform resolve(int)>($i3);

        $f1 = r1.<com.android.server.VibratorService$ScaleLevel: float gamma>;

        $i4 = r1.<com.android.server.VibratorService$ScaleLevel: int maxAmplitude>;

        r31 = virtualinvoke $r11.<android.os.VibrationEffect$Waveform: android.os.VibrationEffect$Waveform scale(float,int)>($f1, $i4);

        goto label10;

     label08:
        $r5 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z7 = $r5 instanceof android.os.VibrationEffect$Composed;

        if $z7 == 0 goto label09;

        $r7 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $r8 = (android.os.VibrationEffect$Composed) $r7;

        $f0 = r1.<com.android.server.VibratorService$ScaleLevel: float gamma>;

        $i2 = r1.<com.android.server.VibratorService$ScaleLevel: int maxAmplitude>;

        r31 = virtualinvoke $r8.<android.os.VibrationEffect$Composed: android.os.VibrationEffect$Composed scale(float,int)>($f0, $i2);

        goto label10;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("VibratorService", "Unable to apply intensity scaling, unknown VibrationEffect type");

     label10:
        if r31 == null goto label11;

        $r6 = r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect originalEffect> = $r6;

        r27.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect> = r31;

     label11:
        return;

     label12:
        return;
    }

    private static transient java.util.List asList(int[])
    {
        int[] r0;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r0;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $i2 = r0[i3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        return $r2;
    }

    private android.os.VibrationEffect createEffectFromResource(int)
    {
        com.android.server.VibratorService r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        long[] $r3;
        android.os.VibrationEffect $r4;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = staticinvoke <com.android.server.VibratorService: long[] getLongIntArray(android.content.res.Resources,int)>($r2, i0);

        $r4 = staticinvoke <com.android.server.VibratorService: android.os.VibrationEffect createEffectFromTimings(long[])>($r3);

        return $r4;
    }

    private static android.os.VibrationEffect createEffectFromTimings(long[])
    {
        long[] r0;
        int $i0, $i1;
        android.os.VibrationEffect $r1, $r2;
        long $l2;

        r0 := @parameter0: long[];

        if r0 == null goto label3;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        goto label3;

     label1:
        $i1 = lengthof r0;

        if $i1 != 1 goto label2;

        $l2 = r0[0];

        $r2 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>($l2, -1);

        return $r2;

     label2:
        $r1 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>(r0, -1);

        return $r1;

     label3:
        return null;
    }

    private void doCancelVibrateLocked()
    {
        com.android.server.VibratorService r0;
        java.lang.Runnable $r2;
        android.os.Handler $r3;
        com.android.server.VibratorService$VibrateThread $r4, $r7;
        android.os.ExternalVibration $r5, $r6;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.VibratorService;

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(8388608L, "vibration", 0);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "doCancelVibrateLocked");

     label1:
        $r3 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        $r2 = r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationEndRunnable>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r2);

        $r4 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        if $r4 == null goto label2;

        $r7 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        virtualinvoke $r7.<com.android.server.VibratorService$VibrateThread: void cancel()>();

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread> = null;

     label2:
        $r5 = r0.<com.android.server.VibratorService: android.os.ExternalVibration mCurrentExternalVibration>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.VibratorService: android.os.ExternalVibration mCurrentExternalVibration>;

        virtualinvoke $r6.<android.os.ExternalVibration: boolean mute()>();

        r0.<com.android.server.VibratorService: android.os.ExternalVibration mCurrentExternalVibration> = null;

        specialinvoke r0.<com.android.server.VibratorService: void setVibratorUnderExternalControl(boolean)>(0);

     label3:
        specialinvoke r0.<com.android.server.VibratorService: void doVibratorOff()>();

        specialinvoke r0.<com.android.server.VibratorService: void reportFinishVibrationLocked()>();

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void doVibratorComposedEffectLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        android.os.VibrationEffect$Composed r1;
        boolean z0, $z1, z2;
        android.os.VibrationEffect $r2;
        java.util.ArrayList $r3, r10;
        java.util.List $r4;
        android.os.VibrationEffect$Composition$PrimitiveEffect[] $r5, r11;
        java.lang.Object[] $r6;
        int $i0, $i1, $i3;
        long $l2;
        java.lang.Throwable $r7, $r8;
        com.android.server.VibratorService$Vibration r9;

        r0 := @this: com.android.server.VibratorService;

        r9 := @parameter0: com.android.server.VibratorService$Vibration;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "doVibratorComposedEffectLocked");

     label01:
        $r2 = r9.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        r1 = (android.os.VibrationEffect$Composed) $r2;

        r10 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r10;

     label02:
        $r3 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label04;

     label03:
        z2 = 1;

        goto label05;

     label04:
        z2 = 0;

     label05:
        exitmonitor r10;

     label06:
        if z2 == 0 goto label07;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label07:
        z0 = specialinvoke r0.<com.android.server.VibratorService: boolean hasCapability(long)>(32L);

     label08:
        if z0 != 0 goto label09;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label09:
        $r4 = virtualinvoke r1.<android.os.VibrationEffect$Composed: java.util.List getPrimitiveEffects()>();

        $r5 = newarray (android.os.VibrationEffect$Composition$PrimitiveEffect)[0];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r11 = (android.os.VibrationEffect$Composition$PrimitiveEffect[]) $r6;

        staticinvoke <com.android.server.VibratorService: void vibratorPerformComposedEffect(android.os.VibrationEffect$Composition$PrimitiveEffect[],com.android.server.VibratorService$Vibration)>(r11, r9);

        $i3 = r9.<com.android.server.VibratorService$Vibration: int uid>;

        $i0 = lengthof r11;

        $i1 = $i0 * 10;

        $l2 = (long) $i1;

        specialinvoke r0.<com.android.server.VibratorService: void noteVibratorOnLocked(int,long)>($i3, $l2);

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r10;

     label13:
        throw $r8;

     label14:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    private boolean doVibratorExists()
    {
        com.android.server.VibratorService r0;
        boolean $z0;

        r0 := @this: com.android.server.VibratorService;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean vibratorExists()>();

        return $z0;
    }

    private void doVibratorOff()
    {
        com.android.server.VibratorService r0;
        int i0, i1;
        java.util.ArrayList $r2, $r3, r8;
        java.lang.Object $r4;
        android.os.Vibrator $r5;
        java.lang.Throwable $r6, $r7;

        r0 := @this: com.android.server.VibratorService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "doVibratorOff");

     label01:
        r8 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r8;

     label02:
        specialinvoke r0.<com.android.server.VibratorService: void noteVibratorOffLocked()>();

        $r2 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label03:
        if i0 == 0 goto label08;

        i1 = 0;

     label04:
        if i1 >= i0 goto label07;

     label05:
        $r3 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.os.Vibrator) $r4;

        virtualinvoke $r5.<android.os.Vibrator: void cancel()>();

     label06:
        i1 = i1 + 1;

        goto label04;

     label07:
        goto label09;

     label08:
        staticinvoke <com.android.server.VibratorService: void vibratorOff()>();

     label09:
        exitmonitor r8;

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r8;

     label13:
        throw $r6;

     label14:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    private void doVibratorOn(long, int, int, android.os.VibrationAttributes)
    {
        com.android.server.VibratorService r0;
        long l0;
        java.util.ArrayList r1, $r2, $r3;
        java.lang.Object $r4;
        android.os.Vibrator $r5;
        android.media.AudioAttributes $r6;
        java.lang.Throwable $r7, $r8;
        int i1, i2, i3, i4, i5;
        android.os.VibrationAttributes r9;

        r0 := @this: com.android.server.VibratorService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r9 := @parameter3: android.os.VibrationAttributes;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "doVibratorOn");

     label01:
        r1 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r1;

     label02:
        i3 = i1;

        if i1 != -1 goto label04;

     label03:
        i3 = r0.<com.android.server.VibratorService: int mDefaultVibrationAmplitude>;

     label04:
        specialinvoke r0.<com.android.server.VibratorService: void noteVibratorOnLocked(int,long)>(i2, l0);

        $r2 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        i4 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label05:
        if i4 == 0 goto label10;

        i5 = 0;

     label06:
        if i5 >= i4 goto label09;

     label07:
        $r3 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r5 = (android.os.Vibrator) $r4;

        $r6 = virtualinvoke r9.<android.os.VibrationAttributes: android.media.AudioAttributes getAudioAttributes()>();

        virtualinvoke $r5.<android.os.Vibrator: void vibrate(long,android.media.AudioAttributes)>(l0, $r6);

     label08:
        i5 = i5 + 1;

        goto label06;

     label09:
        goto label11;

     label10:
        staticinvoke <com.android.server.VibratorService: void vibratorOn(long)>(l0);

        specialinvoke r0.<com.android.server.VibratorService: void doVibratorSetAmplitude(int)>(i3);

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r7;

     label16:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    private long doVibratorPrebakedEffectLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        long l0, $l5, $l7, l10;
        boolean z0, $z1, $z2, $z3, z4;
        android.os.VibrationEffect r1, $r5;
        android.os.IBinder r2;
        android.os.VibrationAttributes r3;
        java.lang.StringBuilder r4;
        java.util.ArrayList $r6, r15;
        int $i2, $i4, $i6, $i9, i11, i12;
        java.lang.String $r7, $r10, r17;
        byte $b8;
        java.lang.Throwable $r11, $r12;
        com.android.server.VibratorService$Vibration r13, r16;
        android.os.VibrationEffect$Prebaked r14;

        r0 := @this: com.android.server.VibratorService;

        r13 := @parameter0: com.android.server.VibratorService$Vibration;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "doVibratorPrebakedEffectLocked");

     label01:
        $r5 = r13.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        r14 = (android.os.VibrationEffect$Prebaked) $r5;

        r15 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r15;

     label02:
        $r6 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label04;

     label03:
        z4 = 1;

        goto label05;

     label04:
        z4 = 0;

     label05:
        exitmonitor r15;

     label06:
        if z4 != 0 goto label14;

     label07:
        $i4 = virtualinvoke r14.<android.os.VibrationEffect$Prebaked: int getId()>();

        $l5 = (long) $i4;

        $i6 = virtualinvoke r14.<android.os.VibrationEffect$Prebaked: int getEffectStrength()>();

        $l7 = (long) $i6;

        $z2 = specialinvoke r0.<com.android.server.VibratorService: boolean hasCapability(long)>(2L);

        l0 = staticinvoke <com.android.server.VibratorService: long vibratorPerformEffect(long,long,com.android.server.VibratorService$Vibration,boolean)>($l5, $l7, r13, $z2);

     label08:
        l10 = l0;

     label09:
        $z3 = specialinvoke r0.<com.android.server.VibratorService: boolean hasCapability(long)>(2L);

        if $z3 == 0 goto label11;

     label10:
        l10 = l0 * 2L;

     label11:
        $b8 = l10 cmp 0L;

        if $b8 <= 0 goto label14;

     label12:
        $i9 = r13.<com.android.server.VibratorService$Vibration: int uid>;

        specialinvoke r0.<com.android.server.VibratorService: void noteVibratorOnLocked(int,long)>($i9, l0);

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return l10;

     label14:
        z0 = virtualinvoke r14.<android.os.VibrationEffect$Prebaked: boolean shouldFallback()>();

     label15:
        if z0 != 0 goto label16;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return 0L;

     label16:
        $i2 = virtualinvoke r14.<android.os.VibrationEffect$Prebaked: int getId()>();

        r1 = specialinvoke r0.<com.android.server.VibratorService: android.os.VibrationEffect getFallbackEffect(int)>($i2);

     label17:
        if r1 != null goto label20;

     label18:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("VibratorService", "Failed to play prebaked effect, no fallback");

     label19:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return 0L;

     label20:
        r16 = new com.android.server.VibratorService$Vibration;

        r2 = r13.<com.android.server.VibratorService$Vibration: android.os.IBinder token>;

        r3 = r13.<com.android.server.VibratorService$Vibration: android.os.VibrationAttributes attrs>;

        i11 = r13.<com.android.server.VibratorService$Vibration: int uid>;

        r17 = r13.<com.android.server.VibratorService$Vibration: java.lang.String opPkg>;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = r13.<com.android.server.VibratorService$Vibration: java.lang.String reason>;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (fallback)");

        $r10 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,android.os.VibrationEffect,android.os.VibrationAttributes,int,java.lang.String,java.lang.String,com.android.server.VibratorService$1)>(r0, r2, r1, r3, i11, r17, $r10, null);

        i12 = specialinvoke r0.<com.android.server.VibratorService: int getCurrentIntensityLocked(com.android.server.VibratorService$Vibration)>(r16);

        specialinvoke r0.<com.android.server.VibratorService: void linkVibration(com.android.server.VibratorService$Vibration)>(r16);

        specialinvoke r0.<com.android.server.VibratorService: void applyVibrationIntensityScalingLocked(com.android.server.VibratorService$Vibration,int)>(r16, i12);

        specialinvoke r0.<com.android.server.VibratorService: void startVibrationInnerLocked(com.android.server.VibratorService$Vibration)>(r16);

     label21:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return 0L;

     label22:
        $r12 := @caughtexception;

     label23:
        exitmonitor r15;

     label24:
        throw $r12;

     label25:
        $r11 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label25;
    }

    private void doVibratorSetAmplitude(int)
    {
        com.android.server.VibratorService r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.VibratorService: boolean mSupportsAmplitudeControl>;

        if $z0 == 0 goto label1;

        staticinvoke <com.android.server.VibratorService: void vibratorSetAmplitude(int)>(i0);

     label1:
        return;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.VibratorService r0;
        java.lang.Object r1, $r38, $r42, $r46, $r50, $r54;
        com.android.server.VibratorService$Vibration $r2, $r56;
        android.os.ExternalVibration $r4, r82;
        java.lang.String $r6, $r9, $r12, $r16, $r19, $r22, $r25, $r28, $r32, $r41, $r45, $r49, $r53, $r55, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.os.RemoteCallbackList $r14;
        int $i0, $i1, $i2, $i3;
        java.util.List $r30;
        java.util.LinkedList $r33, $r34, $r35, $r36, $r37;
        com.android.server.VibratorService$VibrationInfo $r57, r71, r73, r76, r79;
        java.lang.Throwable $r59;
        java.io.PrintWriter r60;
        java.lang.StringBuilder r61, r62, r63, r64, r65, r66, r67, r68, r69, r74, r77, r80, r83;
        java.util.Iterator r70, r72, r75, r78, r81;

        r0 := @this: com.android.server.VibratorService;

        r60 := @parameter0: java.io.PrintWriter;

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>("Vibrator Service:");

        r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        virtualinvoke r60.<java.io.PrintWriter: void print(java.lang.String)>("  mCurrentVibration=");

        $r2 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r2 == null goto label03;

        $r56 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r57 = virtualinvoke $r56.<com.android.server.VibratorService$Vibration: com.android.server.VibratorService$VibrationInfo toInfo()>();

        $r58 = virtualinvoke $r57.<com.android.server.VibratorService$VibrationInfo: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r58);

     label02:
        goto label04;

     label03:
        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>("null");

     label04:
        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCurrentExternalVibration=");

        $r4 = r0.<com.android.server.VibratorService: android.os.ExternalVibration mCurrentExternalVibration>;

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mVibratorUnderExternalControl=");

        $z0 = r0.<com.android.server.VibratorService: boolean mVibratorUnderExternalControl>;

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mIsVibrating=");

        $z1 = r0.<com.android.server.VibratorService: boolean mIsVibrating>;

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r12 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mVibratorStateListeners Count=");

        $r14 = r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners>;

        $i0 = virtualinvoke $r14.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r16 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        r65 = new java.lang.StringBuilder;

        specialinvoke r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLowPowerMode=");

        $z2 = r0.<com.android.server.VibratorService: boolean mLowPowerMode>;

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r19 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHapticFeedbackIntensity=");

        $i1 = r0.<com.android.server.VibratorService: int mHapticFeedbackIntensity>;

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r22 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNotificationIntensity=");

        $i2 = r0.<com.android.server.VibratorService: int mNotificationIntensity>;

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r25 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        r68 = new java.lang.StringBuilder;

        specialinvoke r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRingIntensity=");

        $i3 = r0.<com.android.server.VibratorService: int mRingIntensity>;

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r28 = virtualinvoke r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSupportedEffects=");

        $r30 = r0.<com.android.server.VibratorService: java.util.List mSupportedEffects>;

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        virtualinvoke r60.<java.io.PrintWriter: void println()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>("  Previous ring vibrations:");

        $r33 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousRingVibrations>;

        r70 = virtualinvoke $r33.<java.util.LinkedList: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke r70.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $r54 = interfaceinvoke r70.<java.util.Iterator: java.lang.Object next()>();

        r71 = (com.android.server.VibratorService$VibrationInfo) $r54;

        virtualinvoke r60.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r55 = virtualinvoke r71.<com.android.server.VibratorService$VibrationInfo: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r55);

     label06:
        goto label05;

     label07:
        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>("  Previous notification vibrations:");

        $r34 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousNotificationVibrations>;

        r72 = virtualinvoke $r34.<java.util.LinkedList: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r50 = interfaceinvoke r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (com.android.server.VibratorService$VibrationInfo) $r50;

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r73);

        $r53 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r53);

     label09:
        goto label08;

     label10:
        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>("  Previous alarm vibrations:");

        $r35 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousAlarmVibrations>;

        r75 = virtualinvoke $r35.<java.util.LinkedList: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r46 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        r76 = (com.android.server.VibratorService$VibrationInfo) $r46;

        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r76);

        $r49 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r49);

     label12:
        goto label11;

     label13:
        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>("  Previous vibrations:");

        $r36 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousVibrations>;

        r78 = virtualinvoke $r36.<java.util.LinkedList: java.util.Iterator iterator()>();

     label14:
        $z5 = interfaceinvoke r78.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label16;

        $r42 = interfaceinvoke r78.<java.util.Iterator: java.lang.Object next()>();

        r79 = (com.android.server.VibratorService$VibrationInfo) $r42;

        r80 = new java.lang.StringBuilder;

        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r79);

        $r45 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r45);

     label15:
        goto label14;

     label16:
        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>("  Previous external vibrations:");

        $r37 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousExternalVibrations>;

        r81 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();

     label17:
        $z6 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label19;

        $r38 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>();

        r82 = (android.os.ExternalVibration) $r38;

        r83 = new java.lang.StringBuilder;

        specialinvoke r83.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r82);

        $r41 = virtualinvoke r83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<java.io.PrintWriter: void println(java.lang.String)>($r41);

     label18:
        goto label17;

     label19:
        exitmonitor r1;

     label20:
        return;

     label21:
        $r59 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r59;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private void dumpProto(java.io.FileDescriptor)
    {
        com.android.server.VibratorService r0;
        android.util.proto.ProtoOutputStream $r1;
        com.android.server.VibratorService$Vibration $r2, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2;
        java.util.LinkedList $r3, $r4, $r5, $r6;
        java.lang.Object $r7, $r9, $r11, $r13, r20;
        com.android.server.VibratorService$VibrationInfo $r8, $r10, $r12, $r14, $r16;
        java.lang.Throwable $r17;
        java.io.FileDescriptor r18;
        java.util.Iterator r21, r22, r23, r24;

        r0 := @this: com.android.server.VibratorService;

        r18 := @parameter0: java.io.FileDescriptor;

        $r1 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r1.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r18);

        r20 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r20;

     label01:
        $r2 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r2 == null goto label02;

        $r15 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r16 = virtualinvoke $r15.<com.android.server.VibratorService$Vibration: com.android.server.VibratorService$VibrationInfo toInfo()>();

        virtualinvoke $r16.<com.android.server.VibratorService$VibrationInfo: void dumpProto(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268033L);

     label02:
        $z0 = r0.<com.android.server.VibratorService: boolean mIsVibrating>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, $z0);

        $z1 = r0.<com.android.server.VibratorService: boolean mVibratorUnderExternalControl>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z1);

        $z2 = r0.<com.android.server.VibratorService: boolean mLowPowerMode>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z2);

        $i0 = r0.<com.android.server.VibratorService: int mHapticFeedbackIntensity>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464262L, $i0);

        $i1 = r0.<com.android.server.VibratorService: int mNotificationIntensity>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464263L, $i1);

        $i2 = r0.<com.android.server.VibratorService: int mRingIntensity>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464264L, $i2);

        $r3 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousRingVibrations>;

        r21 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r13 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (com.android.server.VibratorService$VibrationInfo) $r13;

        virtualinvoke $r14.<com.android.server.VibratorService$VibrationInfo: void dumpProto(android.util.proto.ProtoOutputStream,long)>($r1, 2246267895817L);

     label04:
        goto label03;

     label05:
        $r4 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousNotificationVibrations>;

        r22 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r11 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.android.server.VibratorService$VibrationInfo) $r11;

        virtualinvoke $r12.<com.android.server.VibratorService$VibrationInfo: void dumpProto(android.util.proto.ProtoOutputStream,long)>($r1, 2246267895818L);

     label07:
        goto label06;

     label08:
        $r5 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousAlarmVibrations>;

        r23 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r9 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.VibratorService$VibrationInfo) $r9;

        virtualinvoke $r10.<com.android.server.VibratorService$VibrationInfo: void dumpProto(android.util.proto.ProtoOutputStream,long)>($r1, 2246267895819L);

     label10:
        goto label09;

     label11:
        $r6 = r0.<com.android.server.VibratorService: java.util.LinkedList mPreviousVibrations>;

        r24 = virtualinvoke $r6.<java.util.LinkedList: java.util.Iterator iterator()>();

     label12:
        $z5 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r7 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.android.server.VibratorService$VibrationInfo) $r7;

        virtualinvoke $r8.<com.android.server.VibratorService$VibrationInfo: void dumpProto(android.util.proto.ProtoOutputStream,long)>($r1, 2246267895820L);

     label13:
        goto label12;

     label14:
        exitmonitor r20;

     label15:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void flush()>();

        return;

     label16:
        $r17 := @caughtexception;

     label17:
        exitmonitor r20;

     label18:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private android.os.VibrationAttributes fixupVibrationAttributes(android.os.VibrationAttributes)
    {
        com.android.server.VibratorService r0;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        android.os.VibrationAttributes$Builder $r1, $r2;
        android.os.VibrationAttributes r3, r4, r5;

        r0 := @this: com.android.server.VibratorService;

        r3 := @parameter0: android.os.VibrationAttributes;

        r4 = r3;

        if r3 != null goto label1;

        r4 = <com.android.server.VibratorService: android.os.VibrationAttributes DEFAULT_ATTRIBUTES>;

     label1:
        r5 = r4;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean shouldBypassDnd(android.os.VibrationAttributes)>(r4);

        if $z0 == 0 goto label2;

        r5 = r4;

        $z1 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $z1 != 0 goto label2;

        r5 = r4;

        $z2 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $z2 != 0 goto label2;

        r5 = r4;

        $z3 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $z3 != 0 goto label2;

        i0 = virtualinvoke r4.<android.os.VibrationAttributes: int getFlags()>();

        $r1 = new android.os.VibrationAttributes$Builder;

        specialinvoke $r1.<android.os.VibrationAttributes$Builder: void <init>(android.os.VibrationAttributes)>(r4);

        $i1 = i0 & -2;

        $r2 = virtualinvoke $r1.<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder replaceFlags(int)>($i1);

        r5 = virtualinvoke $r2.<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>();

     label2:
        return r5;
    }

    private int getAppOpMode(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        android.os.VibrationAttributes $r3, $r7;
        android.app.AppOpsManager $r4, $r13;
        android.media.AudioAttributes $r5;
        int $i0, $i1, $i3, i4, i5, i6;
        java.lang.String $r6, $r11, $r12;
        boolean $z0;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

        $r4 = r0.<com.android.server.VibratorService: android.app.AppOpsManager mAppOps>;

        $r3 = r1.<com.android.server.VibratorService$Vibration: android.os.VibrationAttributes attrs>;

        $r5 = virtualinvoke $r3.<android.os.VibrationAttributes: android.media.AudioAttributes getAudioAttributes()>();

        $i0 = virtualinvoke $r5.<android.media.AudioAttributes: int getUsage()>();

        $i1 = r1.<com.android.server.VibratorService$Vibration: int uid>;

        $r6 = r1.<com.android.server.VibratorService$Vibration: java.lang.String opPkg>;

        i4 = virtualinvoke $r4.<android.app.AppOpsManager: int checkAudioOpNoThrow(int,int,int,java.lang.String)>(3, $i0, $i1, $r6);

        i5 = i4;

        if i4 != 0 goto label1;

        $r13 = r0.<com.android.server.VibratorService: android.app.AppOpsManager mAppOps>;

        $i3 = r1.<com.android.server.VibratorService$Vibration: int uid>;

        $r12 = r1.<com.android.server.VibratorService$Vibration: java.lang.String opPkg>;

        i5 = virtualinvoke $r13.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String)>(3, $i3, $r12);

     label1:
        i6 = i5;

        if i5 != 1 goto label2;

        i6 = i5;

        $r7 = r1.<com.android.server.VibratorService$Vibration: android.os.VibrationAttributes attrs>;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean shouldBypassDnd(android.os.VibrationAttributes)>($r7);

        if $z0 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bypassing DND for vibration: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("VibratorService", $r11);

        i6 = 0;

     label2:
        return i6;
    }

    private int getCurrentIntensityLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

        $z0 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isRingtone()>();

        if $z0 == 0 goto label1;

        $i2 = r0.<com.android.server.VibratorService: int mRingIntensity>;

        return $i2;

     label1:
        $z1 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isNotification()>();

        if $z1 == 0 goto label2;

        $i1 = r0.<com.android.server.VibratorService: int mNotificationIntensity>;

        return $i1;

     label2:
        $z2 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isHapticFeedback()>();

        if $z2 == 0 goto label3;

        $i0 = r0.<com.android.server.VibratorService: int mHapticFeedbackIntensity>;

        return $i0;

     label3:
        $z3 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isAlarm()>();

        if $z3 == 0 goto label4;

        return 3;

     label4:
        return 2;
    }

    private android.os.VibrationEffect getFallbackEffect(int)
    {
        com.android.server.VibratorService r0;
        int i0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        android.os.VibrationEffect $r3;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.VibratorService: android.util.SparseArray mFallbackEffects>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (android.os.VibrationEffect) $r2;

        return $r3;
    }

    private static long[] getLongIntArray(android.content.res.Resources, int)
    {
        long[] r0;
        int $i0, $i1, $i2, i4, i5;
        long $l3;
        android.content.res.Resources r1;
        int[] r2;

        r1 := @parameter0: android.content.res.Resources;

        i4 := @parameter1: int;

        r2 = virtualinvoke r1.<android.content.res.Resources: int[] getIntArray(int)>(i4);

        if r2 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r2;

        r0 = newarray (long)[$i0];

        i5 = 0;

     label2:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label3;

        $i2 = r2[i5];

        $l3 = (long) $i2;

        r0[i5] = $l3;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r0;
    }

    private boolean hasCapability(long)
    {
        com.android.server.VibratorService r0;
        long l0, $l1, $l2;
        byte $b3;
        boolean z0;

        r0 := @this: com.android.server.VibratorService;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.VibratorService: long mCapabilities>;

        $l2 = $l1 & l0;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasPermission(java.lang.String)
    {
        com.android.server.VibratorService r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static int intensityToEffectStrength(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got unexpected vibration intensity: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("VibratorService", $r4);

        return 2;

     label1:
        return 2;

     label2:
        return 1;

     label3:
        return 0;
    }

    private static boolean isAlarm(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 != 17 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isAllowedToVibrateLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        int i0;
        android.os.VibrationAttributes $r2;
        boolean z1, z2;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

        z1 = r0.<com.android.server.VibratorService: boolean mLowPowerMode>;

        if z1 != 0 goto label1;

        return 1;

     label1:
        $r2 = r1.<com.android.server.VibratorService$Vibration: android.os.VibrationAttributes attrs>;

        i0 = virtualinvoke $r2.<android.os.VibrationAttributes: int getUsage()>();

        z2 = 1;

        if i0 == 33 goto label3;

        z2 = 1;

        if i0 == 17 goto label3;

        if i0 != 65 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    private static boolean isHapticFeedback(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 != 18 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isNotification(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 != 49 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isRepeatingVibration(android.os.VibrationEffect)
    {
        android.os.VibrationEffect r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @parameter0: android.os.VibrationEffect;

        $l0 = virtualinvoke r0.<android.os.VibrationEffect: long getDuration()>();

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isRingtone(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 != 33 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void linkVibration(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        android.os.VibrationEffect $r1;
        boolean $z0;
        android.os.IBinder $r2;
        android.os.RemoteException $r3;
        com.android.server.VibratorService$Vibration r4;

        r0 := @this: com.android.server.VibratorService;

        r4 := @parameter0: com.android.server.VibratorService$Vibration;

        $r1 = r4.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z0 = $r1 instanceof android.os.VibrationEffect$Waveform;

        if $z0 == 0 goto label4;

     label1:
        $r2 = r4.<com.android.server.VibratorService$Vibration: android.os.IBinder token>;

        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        return;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void noteVibratorOffLocked()
    {
        com.android.server.VibratorService r0;
        int i0, $i1;
        com.android.internal.app.IBatteryStats $r2;
        android.os.RemoteException $r3;
        boolean $z0;

        r0 := @this: com.android.server.VibratorService;

        i0 = r0.<com.android.server.VibratorService: int mCurVibUid>;

        if i0 < 0 goto label5;

     label1:
        $r2 = r0.<com.android.server.VibratorService: com.android.internal.app.IBatteryStats mBatteryStatsService>;

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteVibratorOff(int)>(i0);

        $i1 = r0.<com.android.server.VibratorService: int mCurVibUid>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write_non_chained(int,int,java.lang.String,int,int)>(84, $i1, null, 0, 0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<com.android.server.VibratorService: int mCurVibUid> = -1;

     label5:
        $z0 = r0.<com.android.server.VibratorService: boolean mIsVibrating>;

        if $z0 == 0 goto label6;

        r0.<com.android.server.VibratorService: boolean mIsVibrating> = 0;

        specialinvoke r0.<com.android.server.VibratorService: void notifyStateListenersLocked()>();

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void noteVibratorOnLocked(int, long)
    {
        com.android.server.VibratorService r0;
        int i0;
        long l1;
        com.android.internal.app.IBatteryStats $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

     label1:
        $r2 = r0.<com.android.server.VibratorService: com.android.internal.app.IBatteryStats mBatteryStatsService>;

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteVibratorOn(int,long)>(i0, l1);

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write_non_chained(int,int,java.lang.String,int,long)>(84, i0, null, 1, l1);

        r0.<com.android.server.VibratorService: int mCurVibUid> = i0;

        $z0 = r0.<com.android.server.VibratorService: boolean mIsVibrating>;

        if $z0 != 0 goto label2;

        r0.<com.android.server.VibratorService: boolean mIsVibrating> = 1;

        specialinvoke r0.<com.android.server.VibratorService: void notifyStateListenersLocked()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyStateListenerLocked(android.os.IVibratorStateListener)
    {
        com.android.server.VibratorService r0;
        boolean $z0;
        java.lang.Exception $r1;
        android.os.IVibratorStateListener r2;

        r0 := @this: com.android.server.VibratorService;

        r2 := @parameter0: android.os.IVibratorStateListener;

     label1:
        $z0 = r0.<com.android.server.VibratorService: boolean mIsVibrating>;

        interfaceinvoke r2.<android.os.IVibratorStateListener: void onVibrating(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("VibratorService", "Vibrator callback failed to call", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void notifyStateListenersLocked()
    {
        com.android.server.VibratorService r0;
        int i0, i1;
        android.os.RemoteCallbackList $r2, $r3, $r4, $r8;
        android.os.IInterface $r5;
        android.os.IVibratorStateListener $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.VibratorService;

        $r2 = r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners>;

        i0 = virtualinvoke $r2.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

     label2:
        $r4 = r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners>;

        $r5 = virtualinvoke $r4.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r6 = (android.os.IVibratorStateListener) $r5;

        specialinvoke r0.<com.android.server.VibratorService: void notifyStateListenerLocked(android.os.IVibratorStateListener)>($r6);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r7 := @caughtexception;

        $r8 = r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners>;

        virtualinvoke $r8.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw $r7;

     label5:
        $r3 = r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: void finishBroadcast()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void reportFinishVibrationLocked()
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration $r2, $r3, $r4, $r7;
        java.lang.String $r5;
        int $i0;
        android.app.AppOpsManager $r6;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.VibratorService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "reportFinishVibrationLocked");

     label1:
        $r2 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r2 == null goto label2;

        $r6 = r0.<com.android.server.VibratorService: android.app.AppOpsManager mAppOps>;

        $r3 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $i0 = $r3.<com.android.server.VibratorService$Vibration: int uid>;

        $r4 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r5 = $r4.<com.android.server.VibratorService$Vibration: java.lang.String opPkg>;

        virtualinvoke $r6.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String)>(3, $i0, $r5);

        $r7 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        specialinvoke r0.<com.android.server.VibratorService: void unlinkVibration(com.android.server.VibratorService$Vibration)>($r7);

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration> = null;

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setVibratorUnderExternalControl(boolean)
    {
        com.android.server.VibratorService r0;
        boolean z0;

        r0 := @this: com.android.server.VibratorService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.VibratorService: boolean mVibratorUnderExternalControl> = z0;

        staticinvoke <com.android.server.VibratorService: void vibratorSetExternalControl(boolean)>(z0);

        return;
    }

    private static boolean shouldBypassDnd(android.os.VibrationAttributes)
    {
        android.os.VibrationAttributes r0;
        boolean $z0;

        r0 := @parameter0: android.os.VibrationAttributes;

        $z0 = virtualinvoke r0.<android.os.VibrationAttributes: boolean isFlagSet(int)>(1);

        return $z0;
    }

    private boolean shouldVibrate(com.android.server.VibratorService$Vibration, int)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3;
        int $i0, i2, i3;
        java.lang.String $r6;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

        i2 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean isAllowedToVibrateLocked(com.android.server.VibratorService$Vibration)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if i2 != 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r1.<com.android.server.VibratorService$Vibration: boolean isRingtone()>();

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.VibratorService: boolean shouldVibrateForRingtone()>();

        if $z2 != 0 goto label3;

        return 0;

     label3:
        i3 = specialinvoke r0.<com.android.server.VibratorService: int getAppOpMode(com.android.server.VibratorService$Vibration)>(r1);

        if i3 == 0 goto label5;

        if i3 != 2 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Would be an error: vibrate from uid ");

        $i0 = r1.<com.android.server.VibratorService$Vibration: int uid>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("VibratorService", $r6);

     label4:
        return 0;

     label5:
        return 1;
    }

    private boolean shouldVibrateForRingtone()
    {
        com.android.server.VibratorService r0;
        int i0, $i1, $i2;
        android.content.ContentResolver r1, $r7;
        android.content.Context $r2, $r5, $r6;
        java.lang.Object $r3;
        android.media.AudioManager $r4;
        boolean z2, z3, z4;

        r0 := @this: com.android.server.VibratorService;

        $r2 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/media/AudioManager;");

        $r4 = (android.media.AudioManager) $r3;

        i0 = virtualinvoke $r4.<android.media.AudioManager: int getRingerModeInternal()>();

        $r5 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        r1 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z2 = 0;

        $i1 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "vibrate_when_ringing", 0);

        if $i1 == 0 goto label2;

        if i0 == 0 goto label1;

        z2 = 1;

     label1:
        return z2;

     label2:
        $r6 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r7, "apply_ramping_ringer", 0);

        if $i2 == 0 goto label4;

        z3 = 0;

        if i0 == 0 goto label3;

        z3 = 1;

     label3:
        return z3;

     label4:
        z4 = 0;

        if i0 != 1 goto label5;

        z4 = 1;

     label5:
        return z4;
    }

    private void startVibrationInnerLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        boolean z0, $z1, $z2, $z3;
        android.os.VibrationEffect$Waveform r1;
        long l0, $l4, $l7;
        android.os.VibrationEffect $r2, $r3, $r4, $r5, $r10, $r13;
        java.lang.Runnable $r6, $r8, $r16;
        android.os.Handler $r7, $r9, $r15;
        byte $b2;
        android.os.VibrationAttributes $r11, $r14;
        int $i3, $i5, $i6;
        com.android.server.VibratorService$VibrateThread $r12, r20;
        java.lang.Throwable $r17;
        com.android.server.VibratorService$Vibration r18;
        android.os.VibrationEffect$OneShot r19;

        r0 := @this: com.android.server.VibratorService;

        r18 := @parameter0: com.android.server.VibratorService$Vibration;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "startVibrationInnerLocked");

     label01:
        r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration> = r18;

        $r2 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        z0 = $r2 instanceof android.os.VibrationEffect$OneShot;

     label02:
        if z0 == 0 goto label05;

     label03:
        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(8388608L, "vibration", 0);

        $r13 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        r19 = (android.os.VibrationEffect$OneShot) $r13;

        $l4 = virtualinvoke r19.<android.os.VibrationEffect$OneShot: long getDuration()>();

        $i5 = virtualinvoke r19.<android.os.VibrationEffect$OneShot: int getAmplitude()>();

        $i6 = r18.<com.android.server.VibratorService$Vibration: int uid>;

        $r14 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationAttributes attrs>;

        specialinvoke r0.<com.android.server.VibratorService: void doVibratorOn(long,int,int,android.os.VibrationAttributes)>($l4, $i5, $i6, $r14);

        $r15 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        $r16 = r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationEndRunnable>;

        $l7 = virtualinvoke r19.<android.os.VibrationEffect$OneShot: long getDuration()>();

        virtualinvoke $r15.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r16, $l7);

     label04:
        goto label14;

     label05:
        $r3 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z1 = $r3 instanceof android.os.VibrationEffect$Waveform;

        if $z1 == 0 goto label07;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(8388608L, "vibration", 0);

        $r10 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        r1 = (android.os.VibrationEffect$Waveform) $r10;

        r20 = new com.android.server.VibratorService$VibrateThread;

        $i3 = r18.<com.android.server.VibratorService$Vibration: int uid>;

        $r11 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationAttributes attrs>;

        specialinvoke r20.<com.android.server.VibratorService$VibrateThread: void <init>(com.android.server.VibratorService,android.os.VibrationEffect$Waveform,int,android.os.VibrationAttributes)>(r0, r1, $i3, $r11);

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread> = r20;

        $r12 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        virtualinvoke $r12.<com.android.server.VibratorService$VibrateThread: void start()>();

     label06:
        goto label14;

     label07:
        $r4 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z2 = $r4 instanceof android.os.VibrationEffect$Prebaked;

        if $z2 == 0 goto label11;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(8388608L, "vibration", 0);

        l0 = specialinvoke r0.<com.android.server.VibratorService: long doVibratorPrebakedEffectLocked(com.android.server.VibratorService$Vibration)>(r18);

     label08:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label10;

     label09:
        $r9 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        $r8 = r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationEndRunnable>;

        virtualinvoke $r9.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r8, l0);

     label10:
        goto label14;

     label11:
        $r5 = r18.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z3 = $r5 instanceof android.os.VibrationEffect$Composed;

        if $z3 == 0 goto label13;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(8388608L, "vibration", 0);

        specialinvoke r0.<com.android.server.VibratorService: void doVibratorComposedEffectLocked(com.android.server.VibratorService$Vibration)>(r18);

        $r7 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        $r6 = r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationEndRunnable>;

        virtualinvoke $r7.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, 10000L);

     label12:
        goto label14;

     label13:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("VibratorService", "Unknown vibration type, ignoring");

     label14:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label15:
        $r17 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    private void startVibrationLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        int i0;
        boolean z0;
        java.lang.Throwable $r1;
        com.android.server.VibratorService$Vibration r2;

        r0 := @this: com.android.server.VibratorService;

        r2 := @parameter0: com.android.server.VibratorService$Vibration;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "startVibrationLocked");

     label1:
        i0 = specialinvoke r0.<com.android.server.VibratorService: int getCurrentIntensityLocked(com.android.server.VibratorService$Vibration)>(r2);

        z0 = specialinvoke r0.<com.android.server.VibratorService: boolean shouldVibrate(com.android.server.VibratorService$Vibration,int)>(r2, i0);

     label2:
        if z0 != 0 goto label3;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label3:
        specialinvoke r0.<com.android.server.VibratorService: void applyVibrationIntensityScalingLocked(com.android.server.VibratorService$Vibration,int)>(r2, i0);

        specialinvoke r0.<com.android.server.VibratorService: void startVibrationInnerLocked(com.android.server.VibratorService$Vibration)>(r2);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void unlinkVibration(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        android.os.VibrationEffect $r2;
        boolean $z0;
        android.os.IBinder $r3;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

        $r2 = r1.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z0 = $r2 instanceof android.os.VibrationEffect$Waveform;

        if $z0 == 0 goto label1;

        $r3 = r1.<com.android.server.VibratorService$Vibration: android.os.IBinder token>;

        interfaceinvoke $r3.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

     label1:
        return;
    }

    private void updateAlwaysOnLocked()
    {
        com.android.server.VibratorService r0;
        android.util.SparseArray $r1, $r2, $r3;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        com.android.server.VibratorService$Vibration $r5;

        r0 := @this: com.android.server.VibratorService;

        i2 = 0;

     label1:
        $r1 = r0.<com.android.server.VibratorService: android.util.SparseArray mAlwaysOnEffects>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label2;

        $r2 = r0.<com.android.server.VibratorService: android.util.SparseArray mAlwaysOnEffects>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int keyAt(int)>(i2);

        $r3 = r0.<com.android.server.VibratorService: android.util.SparseArray mAlwaysOnEffects>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r5 = (com.android.server.VibratorService$Vibration) $r4;

        specialinvoke r0.<com.android.server.VibratorService: void updateAlwaysOnLocked(int,com.android.server.VibratorService$Vibration)>($i1, $r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void updateAlwaysOnLocked(int, com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        int i0, $i2, i6, i7;
        boolean $z0;
        android.os.VibrationEffect $r1;
        long $l1, $l3, $l4, $l5;
        com.android.server.VibratorService$Vibration r2;
        android.os.VibrationEffect$Prebaked r3;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        r2 := @parameter1: com.android.server.VibratorService$Vibration;

        i6 = specialinvoke r0.<com.android.server.VibratorService: int getCurrentIntensityLocked(com.android.server.VibratorService$Vibration)>(r2);

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean shouldVibrate(com.android.server.VibratorService$Vibration,int)>(r2, i6);

        if $z0 != 0 goto label1;

        $l5 = (long) i0;

        staticinvoke <com.android.server.VibratorService: void vibratorAlwaysOnDisable(long)>($l5);

        goto label2;

     label1:
        $r1 = r2.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        r3 = (android.os.VibrationEffect$Prebaked) $r1;

        i7 = staticinvoke <com.android.server.VibratorService: int intensityToEffectStrength(int)>(i6);

        $l1 = (long) i0;

        $i2 = virtualinvoke r3.<android.os.VibrationEffect$Prebaked: int getId()>();

        $l4 = (long) $i2;

        $l3 = (long) i7;

        staticinvoke <com.android.server.VibratorService: void vibratorAlwaysOnEnable(long,long,long)>($l1, $l4, $l3);

     label2:
        return;
    }

    private boolean updateInputDeviceVibratorsLocked()
    {
        com.android.server.VibratorService r0;
        int[] r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        boolean $z0, $z1, $z2, $z3, $z5, z6, z7, $z8;
        android.hardware.input.InputManager $r4, $r5, $r8, $r10;
        int $i0, $i1, i2, i3;
        android.view.InputDevice $r6;
        java.util.ArrayList $r7, $r13;
        android.os.Handler $r9;
        android.provider.Settings$SettingNotFoundException $r11;
        android.os.Vibrator r14;

        r0 := @this: com.android.server.VibratorService;

        z6 = 0;

        z7 = 0;

     label01:
        $r2 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i2 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>($r3, "vibrate_input_devices", -2);

     label02:
        if i2 <= 0 goto label03;

        z7 = 1;

        goto label04;

     label03:
        z7 = 0;

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

     label06:
        $z0 = r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting>;

        if z7 == $z0 goto label07;

        z6 = 1;

        r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting> = z7;

     label07:
        $z1 = r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting>;

        if $z1 == 0 goto label08;

        $z5 = r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered>;

        if $z5 != 0 goto label09;

        r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered> = 1;

        $r10 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        $r9 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        virtualinvoke $r10.<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>(r0, $r9);

        goto label09;

     label08:
        $z2 = r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered>;

        if $z2 == 0 goto label09;

        r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered> = 0;

        $r8 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        virtualinvoke $r8.<android.hardware.input.InputManager: void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener)>(r0);

     label09:
        $r13 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        virtualinvoke $r13.<java.util.ArrayList: void clear()>();

        $z8 = r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting>;

        if $z8 == 0 goto label13;

        $r4 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        r1 = virtualinvoke $r4.<android.hardware.input.InputManager: int[] getInputDeviceIds()>();

        i3 = 0;

     label10:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label12;

        $r5 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        $i1 = r1[i3];

        $r6 = virtualinvoke $r5.<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>($i1);

        r14 = virtualinvoke $r6.<android.view.InputDevice: android.os.Vibrator getVibrator()>();

        $z3 = virtualinvoke r14.<android.os.Vibrator: boolean hasVibrator()>();

        if $z3 == 0 goto label11;

        $r7 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;

     label13:
        return z6;

        catch android.provider.Settings$SettingNotFoundException from label01 to label02 with label05;
    }

    private boolean updateLowPowerModeLocked()
    {
        com.android.server.VibratorService r0;
        boolean z0, $z1;
        android.os.PowerManagerInternal $r1;
        android.os.PowerSaveState $r2;

        r0 := @this: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r2 = virtualinvoke $r1.<android.os.PowerManagerInternal: android.os.PowerSaveState getLowPowerState(int)>(2);

        z0 = $r2.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        $z1 = r0.<com.android.server.VibratorService: boolean mLowPowerMode>;

        if z0 == $z1 goto label1;

        r0.<com.android.server.VibratorService: boolean mLowPowerMode> = z0;

        return 1;

     label1:
        return 0;
    }

    private void updateVibrationIntensityLocked()
    {
        com.android.server.VibratorService r0;
        android.content.Context $r1, $r4, $r7;
        android.content.ContentResolver $r2, $r5, $r8;
        android.os.Vibrator $r3, $r6, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator>;

        $i0 = virtualinvoke $r3.<android.os.Vibrator: int getDefaultHapticFeedbackIntensity()>();

        $i1 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "haptic_feedback_intensity", $i0, -2);

        r0.<com.android.server.VibratorService: int mHapticFeedbackIntensity> = $i1;

        $r4 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator>;

        $i2 = virtualinvoke $r6.<android.os.Vibrator: int getDefaultNotificationVibrationIntensity()>();

        $i3 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r5, "notification_vibration_intensity", $i2, -2);

        r0.<com.android.server.VibratorService: int mNotificationIntensity> = $i3;

        $r7 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator>;

        $i4 = virtualinvoke $r9.<android.os.Vibrator: int getDefaultRingVibrationIntensity()>();

        $i5 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r8, "ring_vibration_intensity", $i4, -2);

        r0.<com.android.server.VibratorService: int mRingIntensity> = $i5;

        return;
    }

    private void updateVibrators()
    {
        com.android.server.VibratorService r0;
        java.lang.Object r1;
        boolean z0, z1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.VibratorService;

        r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = specialinvoke r0.<com.android.server.VibratorService: boolean updateInputDeviceVibratorsLocked()>();

        z1 = specialinvoke r0.<com.android.server.VibratorService: boolean updateLowPowerModeLocked()>();

        specialinvoke r0.<com.android.server.VibratorService: void updateVibrationIntensityLocked()>();

     label2:
        if z0 != 0 goto label3;

        if z1 == 0 goto label4;

     label3:
        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

     label4:
        specialinvoke r0.<com.android.server.VibratorService: void updateAlwaysOnLocked()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void verifyIncomingUid(int)
    {
        com.android.server.VibratorService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.content.Context $r1;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 != $i1 goto label1;

        return;

     label1:
        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        if $i2 != $i3 goto label2;

        return;

     label2:
        $r1 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>("android.permission.UPDATE_APP_OPS_STATS", $i4, $i5, null);

        return;
    }

    private static boolean verifyVibrationEffect(android.os.VibrationEffect)
    {
        java.lang.Exception $r0;
        android.os.VibrationEffect r1;

        r1 := @parameter0: android.os.VibrationEffect;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("VibratorService", "effect must not be null");

        return 0;

     label1:
        virtualinvoke r1.<android.os.VibrationEffect: void validate()>();

     label2:
        return 1;

     label3:
        $r0 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("VibratorService", "Encountered issue when verifying VibrationEffect.", $r0);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static native void vibratorAlwaysOnDisable(long);

    static native void vibratorAlwaysOnEnable(long, long, long);

    static native boolean vibratorExists();

    static native long vibratorGetCapabilities();

    static native int[] vibratorGetSupportedEffects();

    static native void vibratorInit();

    static native void vibratorOff();

    static native void vibratorOn(long);

    static native void vibratorPerformComposedEffect(android.os.VibrationEffect$Composition$PrimitiveEffect[], com.android.server.VibratorService$Vibration);

    static native long vibratorPerformEffect(long, long, com.android.server.VibratorService$Vibration, boolean);

    static native void vibratorSetAmplitude(int);

    static native void vibratorSetExternalControl(boolean);

    static native boolean vibratorSupportsAmplitudeControl();

    static native boolean vibratorSupportsExternalControl();

    public int[] areEffectsSupported(int[])
    {
        com.android.server.VibratorService r0;
        int[] r1, r2;
        int $i0, $i1, $i2, i3;
        java.util.List $r3, $r4;
        java.lang.Integer $r5;
        boolean $z0;
        byte b4;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: int[];

        $i0 = lengthof r1;

        r2 = newarray (int)[$i0];

        $r3 = r0.<com.android.server.VibratorService: java.util.List mSupportedEffects>;

        if $r3 != null goto label1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r2, 0);

        goto label5;

     label1:
        i3 = 0;

     label2:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label5;

        $r4 = r0.<com.android.server.VibratorService: java.util.List mSupportedEffects>;

        $i2 = r1[i3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        b4 = 1;

        goto label4;

     label3:
        b4 = 2;

     label4:
        r2[i3] = b4;

        i3 = i3 + 1;

        goto label2;

     label5:
        return r2;
    }

    public boolean[] arePrimitivesSupported(int[])
    {
        com.android.server.VibratorService r0;
        int $i0;
        boolean $z0;
        int[] r1;
        boolean[] r2;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: int[];

        $i0 = lengthof r1;

        r2 = newarray (boolean)[$i0];

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean hasCapability(long)>(32L);

        if $z0 == 0 goto label1;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r2, 1);

     label1:
        return r2;
    }

    public void cancelVibrate(android.os.IBinder)
    {
        com.android.server.VibratorService r0;
        java.lang.Object r1;
        long l0;
        android.content.Context $r2;
        com.android.server.VibratorService$Vibration $r3, $r4;
        android.os.IBinder $r5, r8;
        java.lang.Throwable $r6, $r7;

        r0 := @this: com.android.server.VibratorService;

        r8 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.VIBRATE", "cancelVibrate");

        r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r3 == null goto label08;

        $r4 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r5 = $r4.<com.android.server.VibratorService$Vibration: android.os.IBinder token>;

        if $r5 != r8 goto label08;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        goto label08;

     label05:
        $r7 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label07:
        throw $r7;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.VibratorService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        long l0;
        int i1, i2;
        android.content.Context $r3;
        boolean $z0, $z1, z2;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.io.FileDescriptor r6;

        r0 := @this: com.android.server.VibratorService;

        r6 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r3, "VibratorService", r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        z2 = 0;

        i1 = lengthof r2;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $r4 = r2[i2];

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("--proto");

        if $z1 == 0 goto label3;

        z2 = 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        if z2 == 0 goto label7;

     label5:
        specialinvoke r0.<com.android.server.VibratorService: void dumpProto(java.io.FileDescriptor)>(r6);

     label6:
        goto label8;

     label7:
        specialinvoke r0.<com.android.server.VibratorService: void dumpInternal(java.io.PrintWriter)>(r1);

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label9:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public boolean hasAmplitudeControl()
    {
        com.android.server.VibratorService r0;
        java.util.ArrayList r1, $r3;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.VibratorService;

        r1 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.VibratorService: boolean mSupportsAmplitudeControl>;

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z2;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean hasVibrator()
    {
        com.android.server.VibratorService r0;
        boolean $z0;

        r0 := @this: com.android.server.VibratorService;

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean doVibratorExists()>();

        return $z0;
    }

    public boolean isVibrating()
    {
        com.android.server.VibratorService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.SecurityException $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.VibratorService;

        $z1 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.ACCESS_VIBRATOR_STATE");

        if $z1 == 0 goto label6;

        r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.VibratorService: boolean mIsVibrating>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_VIBRATOR_STATE permission");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onInputDeviceAdded(int)
    {
        com.android.server.VibratorService r0;
        int i0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.VibratorService: void updateVibrators()>();

        return;
    }

    public void onInputDeviceChanged(int)
    {
        com.android.server.VibratorService r0;
        int i0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.VibratorService: void updateVibrators()>();

        return;
    }

    public void onInputDeviceRemoved(int)
    {
        com.android.server.VibratorService r0;
        int i0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.VibratorService: void updateVibrators()>();

        return;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.VibratorService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.VibratorService$VibratorShellCommand $r7;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.VibratorService$VibratorShellCommand;

        specialinvoke $r7.<com.android.server.VibratorService$VibratorShellCommand: void <init>(com.android.server.VibratorService,android.os.IBinder,com.android.server.VibratorService$1)>(r0, r0, null);

        virtualinvoke $r7.<com.android.server.VibratorService$VibratorShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void onVibrationFinished()
    {
        com.android.server.VibratorService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.VibratorService;

        r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean registerVibratorStateListener(android.os.IVibratorStateListener)
    {
        com.android.server.VibratorService r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        java.lang.SecurityException $r2;
        android.os.RemoteCallbackList $r3;
        java.lang.Throwable $r4, $r5;
        android.os.IVibratorStateListener r6;

        r0 := @this: com.android.server.VibratorService;

        r6 := @parameter0: android.os.IVibratorStateListener;

        $z1 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.ACCESS_VIBRATOR_STATE");

        if $z1 == 0 goto label15;

        r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners>;

        z0 = virtualinvoke $r3.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r6);

     label03:
        if z0 != 0 goto label06;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label05:
        return 0;

     label06:
        specialinvoke r0.<com.android.server.VibratorService: void notifyStateListenerLocked(android.os.IVibratorStateListener)>(r6);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label08:
        return 1;

     label09:
        $r4 := @caughtexception;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label11:
        throw $r4;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r5;

     label15:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_VIBRATOR_STATE permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean setAlwaysOnEffect(int, java.lang.String, int, android.os.VibrationEffect, android.os.VibrationAttributes)
    {
        com.android.server.VibratorService r0;
        int i0, i1;
        android.os.VibrationAttributes r1, r10;
        com.android.server.VibratorService$Vibration r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.SecurityException $r3;
        android.util.SparseArray $r4, $r5;
        long $l3;
        java.lang.Throwable $r6, $r7;
        java.lang.String r8;
        android.os.VibrationEffect r9;
        java.lang.Object r11, r13;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r9 := @parameter3: android.os.VibrationEffect;

        r10 := @parameter4: android.os.VibrationAttributes;

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.VIBRATE_ALWAYS_ON");

        if $z0 == 0 goto label15;

        $z1 = specialinvoke r0.<com.android.server.VibratorService: boolean hasCapability(long)>(64L);

        if $z1 != 0 goto label01;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("VibratorService", "Always-on effects not supported.");

        return 0;

     label01:
        if r9 != null goto label07;

        r11 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r11;

     label02:
        $r5 = r0.<com.android.server.VibratorService: android.util.SparseArray mAlwaysOnEffects>;

        virtualinvoke $r5.<android.util.SparseArray: void delete(int)>(i1);

        $l3 = (long) i1;

        staticinvoke <com.android.server.VibratorService: void vibratorAlwaysOnDisable(long)>($l3);

        exitmonitor r11;

     label03:
        goto label11;

     label04:
        $r7 := @caughtexception;

     label05:
        exitmonitor r11;

     label06:
        throw $r7;

     label07:
        $z2 = staticinvoke <com.android.server.VibratorService: boolean verifyVibrationEffect(android.os.VibrationEffect)>(r9);

        if $z2 != 0 goto label08;

        return 0;

     label08:
        $z3 = r9 instanceof android.os.VibrationEffect$Prebaked;

        if $z3 != 0 goto label09;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("VibratorService", "Only prebaked effects supported for always-on.");

        return 0;

     label09:
        r1 = specialinvoke r0.<com.android.server.VibratorService: android.os.VibrationAttributes fixupVibrationAttributes(android.os.VibrationAttributes)>(r10);

        r13 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r13;

     label10:
        r2 = new com.android.server.VibratorService$Vibration;

        specialinvoke r2.<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,android.os.VibrationEffect,android.os.VibrationAttributes,int,java.lang.String,java.lang.String,com.android.server.VibratorService$1)>(r0, null, r9, r1, i0, r8, null, null);

        $r4 = r0.<com.android.server.VibratorService: android.util.SparseArray mAlwaysOnEffects>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r2);

        specialinvoke r0.<com.android.server.VibratorService: void updateAlwaysOnLocked(int,com.android.server.VibratorService$Vibration)>(i1, r2);

        exitmonitor r13;

     label11:
        return 1;

     label12:
        $r6 := @caughtexception;

     label13:
        exitmonitor r13;

     label14:
        throw $r6;

     label15:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires VIBRATE_ALWAYS_ON permission");

        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void systemReady()
    {
        com.android.server.VibratorService r0;
        android.content.Context r1, $r2, $r5, $r10, $r14, $r18, $r22, $r26;
        java.lang.Object $r3, $r6, $r9;
        android.hardware.input.InputManager $r4;
        android.os.Vibrator $r7;
        android.os.Handler $r8, $r30;
        android.content.ContentResolver $r11, $r15, $r19, $r23, $r27;
        android.net.Uri $r12, $r16, $r20, $r24, $r28;
        com.android.server.VibratorService$SettingsObserver $r13, $r17, $r21, $r25, $r29, r36;
        android.app.IActivityManager $r32;
        android.app.IUidObserver $r33;
        java.lang.Throwable $r34;
        android.os.RemoteException $r35;
        android.os.PowerManagerInternal r37;
        com.android.server.VibratorService$2 r38;
        com.android.server.VibratorService$3 r39;
        android.content.IntentFilter r40;

        r0 := @this: com.android.server.VibratorService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, "VibratorService#systemReady");

     label1:
        $r2 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/input/InputManager;");

        $r4 = (android.hardware.input.InputManager) $r3;

        r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm> = $r4;

        $r5 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/Vibrator;");

        $r7 = (android.os.Vibrator) $r6;

        r0.<com.android.server.VibratorService: android.os.Vibrator mVibrator> = $r7;

        r36 = new com.android.server.VibratorService$SettingsObserver;

        $r8 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        specialinvoke r36.<com.android.server.VibratorService$SettingsObserver: void <init>(com.android.server.VibratorService,android.os.Handler)>(r0, $r8);

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$SettingsObserver mSettingObserver> = r36;

        $r9 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/PowerManagerInternal;");

        r37 = (android.os.PowerManagerInternal) $r9;

        r0.<com.android.server.VibratorService: android.os.PowerManagerInternal mPowerManagerInternal> = r37;

        r38 = new com.android.server.VibratorService$2;

        specialinvoke r38.<com.android.server.VibratorService$2: void <init>(com.android.server.VibratorService)>(r0);

        virtualinvoke r37.<android.os.PowerManagerInternal: void registerLowPowerModeObserver(android.os.PowerManagerInternal$LowPowerModeListener)>(r38);

        $r10 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r12 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("vibrate_input_devices");

        $r13 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$SettingsObserver mSettingObserver>;

        virtualinvoke $r11.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r12, 1, $r13, -1);

        $r14 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("haptic_feedback_intensity");

        $r17 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$SettingsObserver mSettingObserver>;

        virtualinvoke $r15.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r16, 1, $r17, -1);

        $r18 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r20 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("notification_vibration_intensity");

        $r21 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$SettingsObserver mSettingObserver>;

        virtualinvoke $r19.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r20, 1, $r21, -1);

        $r22 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r24 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("ring_vibration_intensity");

        $r25 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$SettingsObserver mSettingObserver>;

        virtualinvoke $r23.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r24, 1, $r25, -1);

        $r26 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r27 = virtualinvoke $r26.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r28 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("zen_mode");

        $r29 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$SettingsObserver mSettingObserver>;

        virtualinvoke $r27.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r28, 1, $r29, -1);

        r1 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        r39 = new com.android.server.VibratorService$3;

        specialinvoke r39.<com.android.server.VibratorService$3: void <init>(com.android.server.VibratorService)>(r0);

        r40 = new android.content.IntentFilter;

        specialinvoke r40.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r30 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r39, r40, null, $r30);

     label2:
        $r32 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r33 = r0.<com.android.server.VibratorService: android.app.IUidObserver mUidObserver>;

        interfaceinvoke $r32.<android.app.IActivityManager: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>($r33, 3, -1, null);

     label3:
        goto label5;

     label4:
        $r35 := @caughtexception;

     label5:
        specialinvoke r0.<com.android.server.VibratorService: void updateVibrators()>();

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label7:
        $r34 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw $r34;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)
    {
        com.android.server.VibratorService r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        java.lang.SecurityException $r2;
        android.os.RemoteCallbackList $r3;
        java.lang.Throwable $r4, $r5;
        android.os.IVibratorStateListener r6;

        r0 := @this: com.android.server.VibratorService;

        r6 := @parameter0: android.os.IVibratorStateListener;

        $z1 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.ACCESS_VIBRATOR_STATE");

        if $z1 == 0 goto label11;

        r1 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<com.android.server.VibratorService: android.os.RemoteCallbackList mVibratorStateListeners>;

        z0 = virtualinvoke $r3.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r6);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label04:
        return z0;

     label05:
        $r4 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label07:
        throw $r4;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

     label11:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_VIBRATOR_STATE permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void vibrate(int, java.lang.String, android.os.VibrationEffect, android.os.VibrationAttributes, java.lang.String, android.os.IBinder)
    {
        com.android.server.VibratorService r0;
        int i0, $i4, $i5, $i7;
        java.lang.String r1, $r7, $r13, r29;
        android.os.IBinder r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.os.VibrationAttributes r3, $r11, r31;
        long l1, $l3;
        java.lang.StringBuilder $r4, r44;
        com.android.server.VibratorService$Vibration $r14, $r15, $r17, $r18, $r20, $r22, r37;
        android.os.VibrationEffect $r16, $r19, $r21, r30;
        java.lang.Throwable $r23, $r24, $r25, $r26, $r27, $r28, r46, r48;
        java.lang.Object r33, r39, $r42, r47;
        android.os.VibrationEffect$OneShot r34, r35;
        android.os.ExternalVibration $r36;
        android.util.SparseArray $r40;
        java.lang.Integer $r41, $r43;
        java.lang.SecurityException r49;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        r29 := @parameter1: java.lang.String;

        r30 := @parameter2: android.os.VibrationEffect;

        r31 := @parameter3: android.os.VibrationAttributes;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: android.os.IBinder;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vibrate, reason = ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8388608L, $r7);

     label01:
        $z1 = specialinvoke r0.<com.android.server.VibratorService: boolean hasPermission(java.lang.String)>("android.permission.VIBRATE");

        if $z1 == 0 goto label63;

     label02:
        if r2 != null goto label05;

     label03:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("VibratorService", "token must not be null");

     label04:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label05:
        specialinvoke r0.<com.android.server.VibratorService: void verifyIncomingUid(int)>(i0);

        z0 = staticinvoke <com.android.server.VibratorService: boolean verifyVibrationEffect(android.os.VibrationEffect)>(r30);

     label06:
        if z0 != 0 goto label07;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label07:
        r3 = specialinvoke r0.<com.android.server.VibratorService: android.os.VibrationAttributes fixupVibrationAttributes(android.os.VibrationAttributes)>(r31);

     label08:
        r33 = r0.<com.android.server.VibratorService: java.lang.Object mLock>;

        entermonitor r33;

     label09:
        $z2 = r30 instanceof android.os.VibrationEffect$OneShot;

        if $z2 == 0 goto label11;

        $r17 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r17 == null goto label11;

        $r18 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r19 = $r18.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z8 = $r19 instanceof android.os.VibrationEffect$OneShot;

        if $z8 == 0 goto label11;

        r34 = (android.os.VibrationEffect$OneShot) r30;

        $r20 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r21 = $r20.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        r35 = (android.os.VibrationEffect$OneShot) $r21;

        $r22 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $l3 = virtualinvoke r34.<android.os.VibrationEffect$OneShot: long getDuration()>();

        $z9 = virtualinvoke $r22.<com.android.server.VibratorService$Vibration: boolean hasTimeoutLongerThan(long)>($l3);

        if $z9 == 0 goto label11;

        $i4 = virtualinvoke r34.<android.os.VibrationEffect$OneShot: int getAmplitude()>();

        $i5 = virtualinvoke r35.<android.os.VibrationEffect$OneShot: int getAmplitude()>();

        if $i4 != $i5 goto label11;

        exitmonitor r33;

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label11:
        $r36 = r0.<com.android.server.VibratorService: android.os.ExternalVibration mCurrentExternalVibration>;

        if $r36 == null goto label13;

        exitmonitor r33;

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label13:
        $z3 = staticinvoke <com.android.server.VibratorService: boolean isRepeatingVibration(android.os.VibrationEffect)>(r30);

        if $z3 != 0 goto label15;

        $r14 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r14 == null goto label15;

        $r15 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r16 = $r15.<com.android.server.VibratorService$Vibration: android.os.VibrationEffect effect>;

        $z7 = staticinvoke <com.android.server.VibratorService: boolean isRepeatingVibration(android.os.VibrationEffect)>($r16);

        if $z7 == 0 goto label15;

        exitmonitor r33;

     label14:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label15:
        r37 = new com.android.server.VibratorService$Vibration;

     label16:
        r39 = r33;

     label17:
        specialinvoke r37.<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,android.os.VibrationEffect,android.os.VibrationAttributes,int,java.lang.String,java.lang.String,com.android.server.VibratorService$1)>(r0, r2, r30, r3, i0, r29, r1, null);

     label18:
        r39 = r33;

     label19:
        $r40 = r0.<com.android.server.VibratorService: android.util.SparseArray mProcStatesCache>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r42 = virtualinvoke $r40.<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>(i0, $r41);

        $r43 = (java.lang.Integer) $r42;

        $i7 = virtualinvoke $r43.<java.lang.Integer: int intValue()>();

        if $i7 <= 6 goto label43;

     label20:
        r39 = r33;

     label21:
        $z4 = virtualinvoke r37.<com.android.server.VibratorService$Vibration: boolean isNotification()>();

        if $z4 != 0 goto label43;

     label22:
        r39 = r33;

     label23:
        $z5 = virtualinvoke r37.<com.android.server.VibratorService$Vibration: boolean isRingtone()>();

        if $z5 != 0 goto label43;

     label24:
        r39 = r33;

     label25:
        $z6 = virtualinvoke r37.<com.android.server.VibratorService$Vibration: boolean isAlarm()>();

        if $z6 != 0 goto label43;

     label26:
        r39 = r33;

     label27:
        r44 = new java.lang.StringBuilder;

     label28:
        r39 = r33;

     label29:
        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

     label30:
        r39 = r33;

     label31:
        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring incoming vibration as process with uid= ");

     label32:
        r39 = r33;

     label33:
        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label34:
        r39 = r33;

     label35:
        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is background, attrs= ");

     label36:
        r39 = r33;

     label37:
        $r11 = r37.<com.android.server.VibratorService$Vibration: android.os.VibrationAttributes attrs>;

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

     label38:
        r39 = r33;

     label39:
        $r13 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("VibratorService", $r13);

     label40:
        r39 = r33;

     label41:
        exitmonitor r33;

     label42:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label43:
        r39 = r33;

     label44:
        specialinvoke r0.<com.android.server.VibratorService: void linkVibration(com.android.server.VibratorService$Vibration)>(r37);

     label45:
        r39 = r33;

     label46:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label47:
        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

        specialinvoke r0.<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)>(r37);

        specialinvoke r0.<com.android.server.VibratorService: void addToPreviousVibrationsLocked(com.android.server.VibratorService$Vibration)>(r37);

     label48:
        r39 = r33;

     label49:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label50:
        r39 = r33;

     label51:
        exitmonitor r33;

     label52:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        return;

     label53:
        $r24 := @caughtexception;

        r39 = r33;

     label54:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label55:
        r39 = r33;

     label56:
        throw $r24;

     label57:
        $r27 := @caughtexception;

        r46 = $r27;

        r47 = r33;

     label58:
        r39 = r47;

     label59:
        exitmonitor r47;

     label60:
        throw r46;

     label61:
        $r25 := @caughtexception;

        r46 = $r25;

        r47 = r39;

        goto label58;

     label62:
        $r23 := @caughtexception;

        r48 = $r23;

        goto label66;

     label63:
        r49 = new java.lang.SecurityException;

        specialinvoke r49.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires VIBRATE permission");

        throw r49;

     label64:
        $r26 := @caughtexception;

        r48 = $r26;

        goto label66;

     label65:
        $r28 := @caughtexception;

        r48 = $r28;

     label66:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8388608L);

        throw r48;

        catch java.lang.Throwable from label01 to label02 with label65;
        catch java.lang.Throwable from label03 to label04 with label65;
        catch java.lang.Throwable from label05 to label06 with label65;
        catch java.lang.Throwable from label07 to label08 with label64;
        catch java.lang.Throwable from label08 to label09 with label62;
        catch java.lang.Throwable from label09 to label10 with label57;
        catch java.lang.Throwable from label11 to label12 with label57;
        catch java.lang.Throwable from label13 to label14 with label57;
        catch java.lang.Throwable from label15 to label16 with label57;
        catch java.lang.Throwable from label17 to label18 with label61;
        catch java.lang.Throwable from label19 to label20 with label61;
        catch java.lang.Throwable from label21 to label22 with label61;
        catch java.lang.Throwable from label23 to label24 with label61;
        catch java.lang.Throwable from label25 to label26 with label61;
        catch java.lang.Throwable from label27 to label28 with label61;
        catch java.lang.Throwable from label29 to label30 with label61;
        catch java.lang.Throwable from label31 to label32 with label61;
        catch java.lang.Throwable from label33 to label34 with label61;
        catch java.lang.Throwable from label35 to label36 with label61;
        catch java.lang.Throwable from label37 to label38 with label61;
        catch java.lang.Throwable from label39 to label40 with label61;
        catch java.lang.Throwable from label41 to label42 with label61;
        catch java.lang.Throwable from label44 to label45 with label61;
        catch java.lang.Throwable from label46 to label47 with label61;
        catch java.lang.Throwable from label47 to label48 with label53;
        catch java.lang.Throwable from label49 to label50 with label61;
        catch java.lang.Throwable from label51 to label52 with label61;
        catch java.lang.Throwable from label54 to label55 with label61;
        catch java.lang.Throwable from label56 to label57 with label61;
        catch java.lang.Throwable from label59 to label60 with label61;
        catch java.lang.Throwable from label60 to label61 with label62;
        catch java.lang.Throwable from label63 to label64 with label64;
    }
}
