public final class com.android.server.Watchdog$OpenFdMonitor extends java.lang.Object
{
    private static final int FD_HIGH_WATER_MARK;
    private final java.io.File mDumpDir;
    private final java.io.File mFdHighWaterMark;

    void <init>(java.io.File, java.io.File)
    {
        com.android.server.Watchdog$OpenFdMonitor r0;
        java.io.File r1, r2;

        r0 := @this: com.android.server.Watchdog$OpenFdMonitor;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.Watchdog$OpenFdMonitor: java.io.File mDumpDir> = r1;

        r0.<com.android.server.Watchdog$OpenFdMonitor: java.io.File mFdHighWaterMark> = r2;

        return;
    }

    public static com.android.server.Watchdog$OpenFdMonitor create()
    {
        android.system.StructRlimit r0;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r1;
        long $l1, $l2;
        java.io.File $r4, $r7;
        java.lang.String $r5;
        com.android.server.Watchdog$OpenFdMonitor $r6;
        java.lang.Throwable $r8;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = <android.system.OsConstants: int RLIMIT_NOFILE>;

        r0 = staticinvoke <android.system.Os: android.system.StructRlimit getrlimit(int)>($i0);

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/proc/self/fd/");

        $l1 = r0.<android.system.StructRlimit: long rlim_cur>;

        $l2 = $l1 - 12L;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = new java.io.File;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        $r6 = new com.android.server.Watchdog$OpenFdMonitor;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("/data/anr");

        specialinvoke $r6.<com.android.server.Watchdog$OpenFdMonitor: void <init>(java.io.File,java.io.File)>($r7, $r4);

        return $r6;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Watchdog", "Error thrown from getrlimit(RLIMIT_NOFILE)", $r8);

        return null;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private void dumpOpenDescriptors()
    {
        com.android.server.Watchdog$OpenFdMonitor r0;
        int i0, $i1, i3;
        java.lang.String r1, $r9, $r20, $r24, $r30, r32, r35;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.io.File $r7, $r8, $r15, r40;
        java.lang.String[] $r10;
        java.nio.file.Path $r11;
        java.nio.file.OpenOption[] $r12;
        java.nio.charset.Charset $r13;
        java.lang.Throwable $r25, $r26;
        java.io.File[] r33;
        java.util.ArrayList r39;
        java.lang.StringBuilder r41, r42, r43;
        android.system.ErrnoException r44;

        r0 := @this: com.android.server.Watchdog$OpenFdMonitor;

        r39 = new java.util.ArrayList;

        specialinvoke r39.<java.util.ArrayList: void <init>()>();

        $r4 = newarray (java.lang.Object)[1];

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[0] = $r5;

        r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/proc/%d/fd/", $r4);

        r40 = new java.io.File;

        specialinvoke r40.<java.io.File: void <init>(java.lang.String)>(r32);

        r33 = virtualinvoke r40.<java.io.File: java.io.File[] listFiles()>();

        if r33 != null goto label01;

        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to list ");

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r24 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r39.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label07;

     label01:
        i0 = lengthof r33;

        i3 = 0;

     label02:
        if i3 >= i0 goto label07;

        $r15 = r33[i3];

        r1 = virtualinvoke $r15.<java.io.File: java.lang.String getAbsolutePath()>();

     label03:
        r35 = staticinvoke <android.system.Os: java.lang.String readlink(java.lang.String)>(r1);

     label04:
        goto label06;

     label05:
        $r25 := @caughtexception;

        r44 = (android.system.ErrnoException) $r25;

        r35 = virtualinvoke r44.<android.system.ErrnoException: java.lang.String getMessage()>();

     label06:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r20 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r39.<java.util.List: boolean add(java.lang.Object)>($r20);

        i3 = i3 + 1;

        goto label02;

     label07:
        $r7 = r0.<com.android.server.Watchdog$OpenFdMonitor: java.io.File mDumpDir>;

        $r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("anr_fd_", "", $r7);

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $r10 = newarray (java.lang.String)[0];

        $r11 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r9, $r10);

        $r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r12 = newarray (java.nio.file.OpenOption)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r11, r39, $r13, $r12);

     label08:
        goto label10;

     label09:
        $r26 := @caughtexception;

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to write open descriptors to file: ");

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r30 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", $r30);

     label10:
        return;

        catch android.system.ErrnoException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public boolean monitor()
    {
        com.android.server.Watchdog$OpenFdMonitor r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: com.android.server.Watchdog$OpenFdMonitor;

        $r1 = r0.<com.android.server.Watchdog$OpenFdMonitor: java.io.File mFdHighWaterMark>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.Watchdog$OpenFdMonitor: void dumpOpenDescriptors()>();

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <com.android.server.Watchdog$OpenFdMonitor: int FD_HIGH_WATER_MARK> = 12;

        return;
    }
}
