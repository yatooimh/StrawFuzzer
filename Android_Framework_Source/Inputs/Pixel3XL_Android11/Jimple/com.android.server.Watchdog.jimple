public class com.android.server.Watchdog extends java.lang.Thread
{
    private static final long CHECK_INTERVAL;
    private static final int COMPLETED;
    private static final boolean DB;
    public static final boolean DEBUG;
    private static final long DEFAULT_TIMEOUT;
    public static final java.util.List HAL_INTERFACES_OF_INTEREST;
    public static final java.lang.String[] NATIVE_STACKS_OF_INTEREST;
    private static final int OVERDUE;
    static final java.lang.String TAG;
    private static final int WAITED_HALF;
    private static final int WAITING;
    private static com.android.server.Watchdog sWatchdog;
    private com.android.server.am.ActivityManagerService mActivity;
    private boolean mAllowRestart;
    private android.app.IActivityController mController;
    private final java.util.ArrayList mHandlerCheckers;
    private final java.util.List mInterestingJavaPids;
    private final com.android.server.Watchdog$HandlerChecker mMonitorChecker;
    private final com.android.server.Watchdog$OpenFdMonitor mOpenFdMonitor;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;
        java.util.List $r2;

        <com.android.server.Watchdog: int WAITING> = 1;

        <com.android.server.Watchdog: int WAITED_HALF> = 2;

        <com.android.server.Watchdog: java.lang.String TAG> = "Watchdog";

        <com.android.server.Watchdog: int OVERDUE> = 3;

        <com.android.server.Watchdog: long DEFAULT_TIMEOUT> = 60000L;

        <com.android.server.Watchdog: boolean DEBUG> = 0;

        <com.android.server.Watchdog: boolean DB> = 0;

        <com.android.server.Watchdog: int COMPLETED> = 0;

        <com.android.server.Watchdog: long CHECK_INTERVAL> = 30000L;

        $r0 = newarray (java.lang.String)[15];

        $r0[0] = "/system/bin/audioserver";

        $r0[1] = "/system/bin/cameraserver";

        $r0[2] = "/system/bin/drmserver";

        $r0[3] = "/system/bin/mediadrmserver";

        $r0[4] = "/system/bin/mediaserver";

        $r0[5] = "/system/bin/netd";

        $r0[6] = "/system/bin/sdcard";

        $r0[7] = "/system/bin/surfaceflinger";

        $r0[8] = "/system/bin/vold";

        $r0[9] = "media.extractor";

        $r0[10] = "media.metrics";

        $r0[11] = "media.codec";

        $r0[12] = "media.swcodec";

        $r0[13] = "com.android.bluetooth";

        $r0[14] = "/apex/com.android.os.statsd/bin/statsd";

        <com.android.server.Watchdog: java.lang.String[] NATIVE_STACKS_OF_INTEREST> = $r0;

        $r1 = newarray (java.lang.String)[23];

        $r1[0] = "android.hardware.audio@2.0::IDevicesFactory";

        $r1[1] = "android.hardware.audio@4.0::IDevicesFactory";

        $r1[2] = "android.hardware.audio@5.0::IDevicesFactory";

        $r1[3] = "android.hardware.audio@6.0::IDevicesFactory";

        $r1[4] = "android.hardware.biometrics.face@1.0::IBiometricsFace";

        $r1[5] = "android.hardware.biometrics.fingerprint@2.1::IBiometricsFingerprint";

        $r1[6] = "android.hardware.bluetooth@1.0::IBluetoothHci";

        $r1[7] = "android.hardware.camera.provider@2.4::ICameraProvider";

        $r1[8] = "android.hardware.gnss@1.0::IGnss";

        $r1[9] = "android.hardware.graphics.allocator@2.0::IAllocator";

        $r1[10] = "android.hardware.graphics.composer@2.1::IComposer";

        $r1[11] = "android.hardware.health@2.0::IHealth";

        $r1[12] = "android.hardware.light@2.0::ILight";

        $r1[13] = "android.hardware.media.c2@1.0::IComponentStore";

        $r1[14] = "android.hardware.media.omx@1.0::IOmx";

        $r1[15] = "android.hardware.media.omx@1.0::IOmxStore";

        $r1[16] = "android.hardware.neuralnetworks@1.0::IDevice";

        $r1[17] = "android.hardware.power.stats@1.0::IPowerStats";

        $r1[18] = "android.hardware.sensors@1.0::ISensors";

        $r1[19] = "android.hardware.sensors@2.0::ISensors";

        $r1[20] = "android.hardware.sensors@2.1::ISensors";

        $r1[21] = "android.hardware.vr@1.0::IVr";

        $r1[22] = "android.system.suspend@1.0::ISystemSuspend";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <com.android.server.Watchdog: java.util.List HAL_INTERFACES_OF_INTEREST> = $r2;

        return;
    }

    private void <init>()
    {
        com.android.server.Watchdog r0;
        java.util.ArrayList $r2, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24;
        com.android.server.Watchdog$HandlerChecker $r4, $r7, $r11, $r14, $r17, $r20, $r23;
        android.os.Handler $r5, $r8, $r13, $r16, $r19, $r22, $r25;
        android.os.Looper $r10;
        com.android.server.Watchdog$BinderThreadMonitor $r26;
        com.android.server.Watchdog$OpenFdMonitor $r27;
        java.util.List $r28;
        int $i0;
        java.lang.Integer $r29;

        r0 := @this: com.android.server.Watchdog;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("watchdog");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers> = $r2;

        r0.<com.android.server.Watchdog: boolean mAllowRestart> = 1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.Watchdog: java.util.List mInterestingJavaPids> = $r3;

        $r4 = new com.android.server.Watchdog$HandlerChecker;

        $r5 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        specialinvoke $r4.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r5, "foreground thread", 60000L);

        r0.<com.android.server.Watchdog: com.android.server.Watchdog$HandlerChecker mMonitorChecker> = $r4;

        $r6 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r7 = new com.android.server.Watchdog$HandlerChecker;

        $r8 = new android.os.Handler;

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper)>($r10);

        specialinvoke $r7.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r8, "main thread", 60000L);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $r12 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r11 = new com.android.server.Watchdog$HandlerChecker;

        $r13 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        specialinvoke $r11.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r13, "ui thread", 60000L);

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $r15 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r14 = new com.android.server.Watchdog$HandlerChecker;

        $r16 = staticinvoke <com.android.server.IoThread: android.os.Handler getHandler()>();

        specialinvoke $r14.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r16, "i/o thread", 60000L);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        $r18 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r17 = new com.android.server.Watchdog$HandlerChecker;

        $r19 = staticinvoke <com.android.server.DisplayThread: android.os.Handler getHandler()>();

        specialinvoke $r17.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r19, "display thread", 60000L);

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        $r21 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r20 = new com.android.server.Watchdog$HandlerChecker;

        $r22 = staticinvoke <com.android.server.AnimationThread: android.os.Handler getHandler()>();

        specialinvoke $r20.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r22, "animation thread", 60000L);

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

        $r24 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r23 = new com.android.server.Watchdog$HandlerChecker;

        $r25 = staticinvoke <com.android.server.wm.SurfaceAnimationThread: android.os.Handler getHandler()>();

        specialinvoke $r23.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r25, "surface animation thread", 60000L);

        virtualinvoke $r24.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        $r26 = new com.android.server.Watchdog$BinderThreadMonitor;

        specialinvoke $r26.<com.android.server.Watchdog$BinderThreadMonitor: void <init>(com.android.server.Watchdog$1)>(null);

        virtualinvoke r0.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>($r26);

        $r27 = staticinvoke <com.android.server.Watchdog$OpenFdMonitor: com.android.server.Watchdog$OpenFdMonitor create()>();

        r0.<com.android.server.Watchdog: com.android.server.Watchdog$OpenFdMonitor mOpenFdMonitor> = $r27;

        $r28 = r0.<com.android.server.Watchdog: java.util.List mInterestingJavaPids>;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r29);

        return;
    }

    static com.android.server.am.ActivityManagerService access$100(com.android.server.Watchdog)
    {
        com.android.server.Watchdog r0;
        com.android.server.am.ActivityManagerService $r1;

        r0 := @parameter0: com.android.server.Watchdog;

        $r1 = r0.<com.android.server.Watchdog: com.android.server.am.ActivityManagerService mActivity>;

        return $r1;
    }

    private java.lang.String describeCheckersLocked(java.util.List)
    {
        com.android.server.Watchdog r0;
        java.util.List r1;
        java.lang.StringBuilder $r3;
        int $i0, $i1, i2;
        java.lang.String $r4, $r7;
        java.lang.Object $r5;
        com.android.server.Watchdog$HandlerChecker $r6;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: java.util.List;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(128);

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.Watchdog$HandlerChecker) $r5;

        $r7 = virtualinvoke $r6.<com.android.server.Watchdog$HandlerChecker: java.lang.String describeBlockedStateLocked()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void doSysRq(char)
    {
        com.android.server.Watchdog r0;
        char c0;
        java.lang.Throwable $r1;
        java.io.FileWriter r2;

        r0 := @this: com.android.server.Watchdog;

        c0 := @parameter0: char;

     label1:
        r2 = new java.io.FileWriter;

        specialinvoke r2.<java.io.FileWriter: void <init>(java.lang.String)>("/proc/sysrq-trigger");

        virtualinvoke r2.<java.io.FileWriter: void write(int)>(c0);

        virtualinvoke r2.<java.io.FileWriter: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Watchdog", "Failed to write to /proc/sysrq-trigger", $r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private int evaluateCheckerCompletionLocked()
    {
        com.android.server.Watchdog r0;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1, i2, i3;
        java.lang.Object $r3;
        com.android.server.Watchdog$HandlerChecker $r4;

        r0 := @this: com.android.server.Watchdog;

        i2 = 0;

        i3 = 0;

     label1:
        $r1 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i3 >= $i0 goto label2;

        $r2 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r4 = (com.android.server.Watchdog$HandlerChecker) $r3;

        $i1 = virtualinvoke $r4.<com.android.server.Watchdog$HandlerChecker: int getCompletionStateLocked()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    private java.util.ArrayList getBlockedCheckersLocked()
    {
        com.android.server.Watchdog r0;
        com.android.server.Watchdog$HandlerChecker r2;
        java.util.ArrayList $r3, $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.Watchdog;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $r4 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label3;

        $r5 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.Watchdog$HandlerChecker) $r6;

        $z0 = virtualinvoke r2.<com.android.server.Watchdog$HandlerChecker: boolean isOverdueLocked()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r3;
    }

    public static com.android.server.Watchdog getInstance()
    {
        com.android.server.Watchdog $r0, $r1, $r2;

        $r0 = <com.android.server.Watchdog: com.android.server.Watchdog sWatchdog>;

        if $r0 != null goto label1;

        $r2 = new com.android.server.Watchdog;

        specialinvoke $r2.<com.android.server.Watchdog: void <init>()>();

        <com.android.server.Watchdog: com.android.server.Watchdog sWatchdog> = $r2;

     label1:
        $r1 = <com.android.server.Watchdog: com.android.server.Watchdog sWatchdog>;

        return $r1;
    }

    private static java.util.ArrayList getInterestingHalPids()
    {
        java.util.Iterator r0;
        java.util.ArrayList $r1, $r7, r9;
        java.lang.Object $r2;
        int $i0, $i1;
        java.lang.String $r3;
        java.util.List $r4;
        boolean $z0, $z2;
        java.lang.Integer $r5;
        android.os.RemoteException $r6;
        android.hidl.manager.V1_0.IServiceManager r8;
        java.util.HashSet r10;
        android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo r11;

     label01:
        r8 = staticinvoke <android.hidl.manager.V1_0.IServiceManager: android.hidl.manager.V1_0.IServiceManager getService()>();

     label02:
        r9 = interfaceinvoke r8.<android.hidl.manager.V1_0.IServiceManager: java.util.ArrayList debugDump()>();

        r10 = new java.util.HashSet;

        specialinvoke r10.<java.util.HashSet: void <init>()>();

        r0 = virtualinvoke r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo) $r2;

        $i0 = r11.<android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo: int pid>;

        if $i0 != -1 goto label05;

     label04:
        goto label03;

     label05:
        $r4 = <com.android.server.Watchdog: java.util.List HAL_INTERFACES_OF_INTEREST>;

        $r3 = r11.<android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo: java.lang.String interfaceName>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label07;

     label06:
        goto label03;

     label07:
        $i1 = r11.<android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo: int pid>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r10.<java.util.HashSet: boolean add(java.lang.Object)>($r5);

     label08:
        goto label03;

     label09:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r10);

     label10:
        return $r1;

     label11:
        $r6 := @caughtexception;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        return $r7;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label02 to label03 with label11;
        catch android.os.RemoteException from label03 to label04 with label11;
        catch android.os.RemoteException from label05 to label06 with label11;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    static java.util.ArrayList getInterestingNativePids()
    {
        java.util.ArrayList r0;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String[] $r2;
        java.lang.Integer $r3;

        r0 = staticinvoke <com.android.server.Watchdog: java.util.ArrayList getInterestingHalPids()>();

        $r2 = <com.android.server.Watchdog: java.lang.String[] NATIVE_STACKS_OF_INTEREST>;

        r1 = staticinvoke <android.os.Process: int[] getPidsForCommands(java.lang.String[])>($r2);

        if r1 == null goto label2;

        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $i2 = lengthof r1;

        $i3 = $i1 + $i2;

        virtualinvoke r0.<java.util.ArrayList: void ensureCapacity(int)>($i3);

        i0 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $i4 = r1[i5];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        i5 = i5 + 1;

        goto label1;

     label2:
        return r0;
    }

    private static boolean isInterestingJavaProcess(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.android.server.StorageManagerService: java.lang.String sMediaStoreAuthorityProcessName>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("com.android.phone");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public void addMonitor(com.android.server.Watchdog$Monitor)
    {
        com.android.server.Watchdog r0;
        com.android.server.Watchdog$HandlerChecker $r1;
        java.lang.Throwable $r2;
        com.android.server.Watchdog$Monitor r3;

        r0 := @this: com.android.server.Watchdog;

        r3 := @parameter0: com.android.server.Watchdog$Monitor;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.Watchdog: com.android.server.Watchdog$HandlerChecker mMonitorChecker>;

        virtualinvoke $r1.<com.android.server.Watchdog$HandlerChecker: void addMonitorLocked(com.android.server.Watchdog$Monitor)>(r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addThread(android.os.Handler)
    {
        com.android.server.Watchdog r0;
        android.os.Handler r1;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: android.os.Handler;

        virtualinvoke r0.<com.android.server.Watchdog: void addThread(android.os.Handler,long)>(r1, 60000L);

        return;
    }

    public void addThread(android.os.Handler, long)
    {
        com.android.server.Watchdog r0;
        long l0;
        java.lang.String r1;
        java.util.ArrayList r2;
        com.android.server.Watchdog$HandlerChecker r3;
        android.os.Looper $r4;
        java.lang.Thread $r5;
        java.lang.Throwable $r6;
        android.os.Handler r7;

        r0 := @this: com.android.server.Watchdog;

        r7 := @parameter0: android.os.Handler;

        l0 := @parameter1: long;

        entermonitor r0;

     label1:
        $r4 = virtualinvoke r7.<android.os.Handler: android.os.Looper getLooper()>();

        $r5 = virtualinvoke $r4.<android.os.Looper: java.lang.Thread getThread()>();

        r1 = virtualinvoke $r5.<java.lang.Thread: java.lang.String getName()>();

        r2 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        r3 = new com.android.server.Watchdog$HandlerChecker;

        specialinvoke r3.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, r7, r1, l0);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void init(android.content.Context, com.android.server.am.ActivityManagerService)
    {
        com.android.server.Watchdog r0;
        android.content.Context r1;
        com.android.server.am.ActivityManagerService r2;
        com.android.server.Watchdog$RebootRequestReceiver $r3;
        android.content.IntentFilter $r4;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.am.ActivityManagerService;

        r0.<com.android.server.Watchdog: com.android.server.am.ActivityManagerService mActivity> = r2;

        $r3 = new com.android.server.Watchdog$RebootRequestReceiver;

        specialinvoke $r3.<com.android.server.Watchdog$RebootRequestReceiver: void <init>(com.android.server.Watchdog)>(r0);

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.REBOOT");

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r3, $r4, "android.permission.REBOOT", null);

        return;
    }

    public void pauseWatchingCurrentThread(java.lang.String)
    {
        com.android.server.Watchdog r0;
        java.util.Iterator r1;
        com.android.server.Watchdog$HandlerChecker r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.Thread $r5, $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.Watchdog;

        r8 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.Watchdog$HandlerChecker) $r4;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = virtualinvoke r2.<com.android.server.Watchdog$HandlerChecker: java.lang.Thread getThread()>();

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        virtualinvoke r2.<com.android.server.Watchdog$HandlerChecker: void pauseLocked(java.lang.String)>(r8);

     label3:
        goto label2;

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void processDied(java.lang.String, int)
    {
        com.android.server.Watchdog r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r7, r11;
        java.util.List $r8;
        java.lang.Integer $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.Watchdog;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = staticinvoke <com.android.server.Watchdog: boolean isInterestingJavaProcess(java.lang.String)>(r11);

        if $z0 == 0 goto label6;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interesting Java process ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" died. Pid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", $r7);

        entermonitor r0;

     label1:
        $r8 = r0.<com.android.server.Watchdog: java.util.List mInterestingJavaPids>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.List: boolean remove(java.lang.Object)>($r9);

        exitmonitor r0;

     label2:
        goto label6;

     label3:
        $r10 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void processStarted(java.lang.String, int)
    {
        com.android.server.Watchdog r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r7, r11;
        java.util.List $r8;
        java.lang.Integer $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.Watchdog;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = staticinvoke <com.android.server.Watchdog: boolean isInterestingJavaProcess(java.lang.String)>(r11);

        if $z0 == 0 goto label6;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interesting Java process ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" started. Pid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", $r7);

        entermonitor r0;

     label1:
        $r8 = r0.<com.android.server.Watchdog: java.util.List mInterestingJavaPids>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        exitmonitor r0;

     label2:
        goto label6;

     label3:
        $r10 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void rebootSystem(java.lang.String)
    {
        com.android.server.Watchdog r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, r7;
        android.os.IBinder $r5;
        android.os.RemoteException $r6;
        android.os.IPowerManager r9;

        r0 := @this: com.android.server.Watchdog;

        r7 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rebooting system because: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", $r4);

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        r9 = (android.os.IPowerManager) $r5;

     label1:
        interfaceinvoke r9.<android.os.IPowerManager: void reboot(boolean,java.lang.String,boolean)>(0, r7, 0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resumeWatchingCurrentThread(java.lang.String)
    {
        com.android.server.Watchdog r0;
        java.util.Iterator r1;
        com.android.server.Watchdog$HandlerChecker r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.Thread $r5, $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.Watchdog;

        r8 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.Watchdog$HandlerChecker) $r4;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = virtualinvoke r2.<com.android.server.Watchdog$HandlerChecker: java.lang.Thread getThread()>();

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        virtualinvoke r2.<com.android.server.Watchdog$HandlerChecker: void resumeLocked(java.lang.String)>(r8);

     label3:
        goto label2;

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void run()
    {
        com.android.server.Watchdog r0;
        long l0, $l12, $l13, l16, l39;
        com.android.server.Watchdog$OpenFdMonitor $r3, $r25;
        java.util.List $r5, $r22, r58, r59;
        java.lang.String $r7, $r13, $r21, r39;
        java.util.ArrayList $r12, $r23, $r26, $r35, r50, r51;
        java.lang.StringBuffer $r15;
        int $i4, $i9, i17, $i18, i19, i26;
        java.lang.Object $r27, r38;
        com.android.server.Watchdog$HandlerChecker $r28;
        android.os.RemoteException $r29;
        java.lang.Throwable $r30, $r31, $r32, $r33, $r34, r49;
        boolean z0, z1, z2, z3, z4, z5, $z6;
        byte $b20;
        java.io.File r42;
        android.app.IActivityController r45;
        java.lang.StringBuilder r52, r57;
        com.android.internal.os.ProcessCpuTracker r53;
        java.io.StringWriter r54;
        android.util.SparseArray r55;
        com.android.server.Watchdog$1 r56;

        r0 := @this: com.android.server.Watchdog;

        z0 = 0;

     label01:
        entermonitor r0;

        l16 = 30000L;

        i17 = 0;

     label02:
        $r35 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $i18 = virtualinvoke $r35.<java.util.ArrayList: int size()>();

        if i17 >= $i18 goto label04;

        $r26 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r27 = virtualinvoke $r26.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        $r28 = (com.android.server.Watchdog$HandlerChecker) $r27;

        virtualinvoke $r28.<com.android.server.Watchdog$HandlerChecker: void scheduleCheckLocked()>();

     label03:
        i17 = i17 + 1;

        goto label02;

     label04:
        i19 = 0;

        goto label05;

     label05:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label06:
        $b20 = l16 cmp 0L;

        if $b20 <= 0 goto label17;

     label07:
        z1 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

     label08:
        if z1 == 0 goto label09;

        i19 = 2;

        goto label09;

     label09:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(l16);

     label10:
        goto label13;

     label11:
        $r31 := @caughtexception;

     label12:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Watchdog", $r31);

     label13:
        z2 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

     label14:
        if z2 == 0 goto label15;

        i19 = 2;

        goto label15;

     label15:
        $l12 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l13 = $l12 - l0;

        l16 = 30000L - $l13;

     label16:
        goto label06;

     label17:
        z3 = 0;

     label18:
        $r3 = r0.<com.android.server.Watchdog: com.android.server.Watchdog$OpenFdMonitor mOpenFdMonitor>;

        if $r3 == null goto label20;

     label19:
        $r25 = r0.<com.android.server.Watchdog: com.android.server.Watchdog$OpenFdMonitor mOpenFdMonitor>;

        z3 = virtualinvoke $r25.<com.android.server.Watchdog$OpenFdMonitor: boolean monitor()>();

     label20:
        if z3 != 0 goto label39;

     label21:
        i26 = specialinvoke r0.<com.android.server.Watchdog: int evaluateCheckerCompletionLocked()>();

     label22:
        if i26 != 0 goto label25;

        z0 = 0;

     label23:
        exitmonitor r0;

     label24:
        goto label01;

     label25:
        if i26 != 1 goto label28;

     label26:
        exitmonitor r0;

     label27:
        goto label01;

     label28:
        if i26 != 2 goto label36;

        z4 = z0;

        if z0 != 0 goto label34;

     label29:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", "WAITED_HALF");

     label30:
        r50 = new java.util.ArrayList;

     label31:
        $r22 = r0.<com.android.server.Watchdog: java.util.List mInterestingJavaPids>;

        specialinvoke r50.<java.util.ArrayList: void <init>(java.util.Collection)>($r22);

     label32:
        $r23 = staticinvoke <com.android.server.Watchdog: java.util.ArrayList getInterestingNativePids()>();

        staticinvoke <com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(java.util.ArrayList,com.android.internal.os.ProcessCpuTracker,android.util.SparseArray,java.util.ArrayList,java.io.StringWriter)>(r50, null, null, $r23, null);

     label33:
        z4 = 1;

     label34:
        exitmonitor r0;

     label35:
        z0 = z4;

        goto label01;

     label36:
        r38 = specialinvoke r0.<com.android.server.Watchdog: java.util.ArrayList getBlockedCheckersLocked()>();

     label37:
        r58 = (java.util.List) r38;

        r39 = specialinvoke r0.<com.android.server.Watchdog: java.lang.String describeCheckersLocked(java.util.List)>(r58);

     label38:
        goto label41;

     label39:
        r38 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label40:
        r39 = "Open FD high water mark reached";

     label41:
        z5 = r0.<com.android.server.Watchdog: boolean mAllowRestart>;

     label42:
        exitmonitor r0;

     label43:
        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(2802, r39);

        r51 = new java.util.ArrayList;

        $r5 = r0.<com.android.server.Watchdog: java.util.List mInterestingJavaPids>;

        specialinvoke r51.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        l39 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        $r7 = staticinvoke <com.android.server.MemoryPressureUtil: java.lang.String currentPsiState()>();

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r53 = new com.android.internal.os.ProcessCpuTracker;

        specialinvoke r53.<com.android.internal.os.ProcessCpuTracker: void <init>(boolean)>(0);

        r54 = new java.io.StringWriter;

        specialinvoke r54.<java.io.StringWriter: void <init>()>();

        r55 = new android.util.SparseArray;

        specialinvoke r55.<android.util.SparseArray: void <init>()>();

        $r12 = staticinvoke <com.android.server.Watchdog: java.util.ArrayList getInterestingNativePids()>();

        r42 = staticinvoke <com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(java.util.ArrayList,com.android.internal.os.ProcessCpuTracker,android.util.SparseArray,java.util.ArrayList,java.io.StringWriter)>(r51, r53, r55, $r12, r54);

        staticinvoke <android.os.SystemClock: void sleep(long)>(5000L);

        virtualinvoke r53.<com.android.internal.os.ProcessCpuTracker: void update()>();

        $r13 = virtualinvoke r53.<com.android.internal.os.ProcessCpuTracker: java.lang.String printCurrentState(long)>(l39);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r54.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>($r15);

        specialinvoke r0.<com.android.server.Watchdog: void doSysRq(char)>(119);

        specialinvoke r0.<com.android.server.Watchdog: void doSysRq(char)>(108);

        r56 = new com.android.server.Watchdog$1;

        specialinvoke r56.<com.android.server.Watchdog$1: void <init>(com.android.server.Watchdog,java.lang.String,java.lang.String,java.lang.StringBuilder,java.io.File)>(r0, "watchdogWriteToDropbox", r39, r52, r42);

        virtualinvoke r56.<java.lang.Thread: void start()>();

     label44:
        virtualinvoke r56.<java.lang.Thread: void join(long)>(2000L);

     label45:
        goto label47;

     label46:
        $r30 := @caughtexception;

        goto label45;

     label47:
        entermonitor r0;

     label48:
        r45 = r0.<com.android.server.Watchdog: android.app.IActivityController mController>;

        exitmonitor r0;

     label49:
        if r45 == null goto label54;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", "Reporting stuck state to activity controller");

     label50:
        staticinvoke <android.os.Binder: void setDumpDisabled(java.lang.String)>("Service dumps disabled due to hung system process.");

        $i9 = interfaceinvoke r45.<android.app.IActivityController: int systemNotResponding(java.lang.String)>(r39);

        if $i9 < 0 goto label52;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", "Activity controller requested to coninue to wait");

     label51:
        z0 = 0;

        goto label01;

     label52:
        goto label54;

     label53:
        $r29 := @caughtexception;

     label54:
        $z6 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z6 == 0 goto label55;

        i19 = 2;

     label55:
        if i19 < 2 goto label56;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "Debugger connected: Watchdog is *not* killing the system process");

        goto label59;

     label56:
        if i19 <= 0 goto label57;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "Debugger was connected: Watchdog is *not* killing the system process");

        goto label59;

     label57:
        if z5 != 0 goto label58;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "Restart not allowed: Watchdog is *not* killing the system process");

        goto label59;

     label58:
        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** WATCHDOG KILLING SYSTEM PROCESS: ");

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r21 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", $r21);

        r59 = (java.util.List) r38;

        staticinvoke <com.android.server.WatchdogDiagnostics: void diagnoseCheckers(java.util.List)>(r59);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "*** GOODBYE!");

        $i4 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i4);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label59:
        z0 = 0;

        goto label01;

     label60:
        $r32 := @caughtexception;

     label61:
        exitmonitor r0;

     label62:
        throw $r32;

     label63:
        $r34 := @caughtexception;

        r49 = $r34;

        goto label65;

     label64:
        $r33 := @caughtexception;

        r49 = $r33;

     label65:
        exitmonitor r0;

     label66:
        throw r49;

        catch java.lang.Throwable from label02 to label03 with label64;
        catch java.lang.Throwable from label05 to label06 with label64;
        catch java.lang.Throwable from label07 to label08 with label63;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label64;
        catch java.lang.Throwable from label12 to label13 with label64;
        catch java.lang.Throwable from label13 to label14 with label64;
        catch java.lang.Throwable from label15 to label16 with label63;
        catch java.lang.Throwable from label18 to label19 with label63;
        catch java.lang.Throwable from label19 to label20 with label63;
        catch java.lang.Throwable from label21 to label22 with label63;
        catch java.lang.Throwable from label23 to label24 with label63;
        catch java.lang.Throwable from label26 to label27 with label63;
        catch java.lang.Throwable from label29 to label30 with label63;
        catch java.lang.Throwable from label30 to label31 with label63;
        catch java.lang.Throwable from label31 to label32 with label63;
        catch java.lang.Throwable from label32 to label33 with label63;
        catch java.lang.Throwable from label34 to label35 with label63;
        catch java.lang.Throwable from label36 to label37 with label63;
        catch java.lang.Throwable from label37 to label38 with label63;
        catch java.lang.Throwable from label39 to label40 with label63;
        catch java.lang.Throwable from label41 to label42 with label63;
        catch java.lang.Throwable from label42 to label43 with label63;
        catch java.lang.InterruptedException from label44 to label45 with label46;
        catch java.lang.Throwable from label48 to label49 with label60;
        catch android.os.RemoteException from label50 to label51 with label53;
        catch java.lang.Throwable from label61 to label62 with label60;
        catch java.lang.Throwable from label65 to label66 with label64;
    }

    public void setActivityController(android.app.IActivityController)
    {
        com.android.server.Watchdog r0;
        java.lang.Throwable $r1;
        android.app.IActivityController r2;

        r0 := @this: com.android.server.Watchdog;

        r2 := @parameter0: android.app.IActivityController;

        entermonitor r0;

     label1:
        r0.<com.android.server.Watchdog: android.app.IActivityController mController> = r2;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setAllowRestart(boolean)
    {
        com.android.server.Watchdog r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.Watchdog;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.android.server.Watchdog: boolean mAllowRestart> = z0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
