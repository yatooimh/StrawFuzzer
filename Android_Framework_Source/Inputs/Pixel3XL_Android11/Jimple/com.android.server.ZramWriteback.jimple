public final class com.android.server.ZramWriteback extends android.app.job.JobService
{
    private static final java.lang.String BDEV_SYS;
    private static final boolean DEBUG;
    private static final java.lang.String FIRST_WB_DELAY_PROP;
    private static final java.lang.String FORCE_WRITEBACK_PROP;
    private static final java.lang.String IDLE_SYS;
    private static final java.lang.String IDLE_SYS_ALL_PAGES;
    private static final java.lang.String MARK_IDLE_DELAY_PROP;
    private static final int MARK_IDLE_JOB_ID;
    private static final int MAX_ZRAM_DEVICES;
    private static final java.lang.String PERIODIC_WB_DELAY_PROP;
    private static final java.lang.String TAG;
    private static final int WB_STATS_MAX_FILE_SIZE;
    private static final java.lang.String WB_STATS_SYS;
    private static final java.lang.String WB_SYS;
    private static final java.lang.String WB_SYS_IDLE_PAGES;
    private static final int WRITEBACK_IDLE_JOB_ID;
    private static int sZramDeviceId;
    private static final android.content.ComponentName sZramWriteback;

    static void <clinit>()
    {
        android.content.ComponentName $r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        <com.android.server.ZramWriteback: int WRITEBACK_IDLE_JOB_ID> = 812;

        <com.android.server.ZramWriteback: java.lang.String WB_SYS_IDLE_PAGES> = "idle";

        <com.android.server.ZramWriteback: java.lang.String WB_SYS> = "/sys/block/zram%d/writeback";

        <com.android.server.ZramWriteback: java.lang.String WB_STATS_SYS> = "/sys/block/zram%d/bd_stat";

        <com.android.server.ZramWriteback: int WB_STATS_MAX_FILE_SIZE> = 128;

        <com.android.server.ZramWriteback: java.lang.String TAG> = "ZramWriteback";

        <com.android.server.ZramWriteback: java.lang.String PERIODIC_WB_DELAY_PROP> = "ro.zram.periodic_wb_delay_hours";

        <com.android.server.ZramWriteback: int MAX_ZRAM_DEVICES> = 256;

        <com.android.server.ZramWriteback: int MARK_IDLE_JOB_ID> = 811;

        <com.android.server.ZramWriteback: java.lang.String MARK_IDLE_DELAY_PROP> = "ro.zram.mark_idle_delay_mins";

        <com.android.server.ZramWriteback: java.lang.String IDLE_SYS_ALL_PAGES> = "all";

        <com.android.server.ZramWriteback: java.lang.String IDLE_SYS> = "/sys/block/zram%d/idle";

        <com.android.server.ZramWriteback: java.lang.String FORCE_WRITEBACK_PROP> = "zram.force_writeback";

        <com.android.server.ZramWriteback: java.lang.String FIRST_WB_DELAY_PROP> = "ro.zram.first_wb_delay_mins";

        <com.android.server.ZramWriteback: boolean DEBUG> = 0;

        <com.android.server.ZramWriteback: java.lang.String BDEV_SYS> = "/sys/block/zram%d/backing_dev";

        $r0 = new android.content.ComponentName;

        $r1 = class "Lcom/android/server/ZramWriteback;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("android", $r2);

        <com.android.server.ZramWriteback: android.content.ComponentName sZramWriteback> = $r0;

        <com.android.server.ZramWriteback: int sZramDeviceId> = 0;

        return;
    }

    public void <init>()
    {
        com.android.server.ZramWriteback r0;

        r0 := @this: com.android.server.ZramWriteback;

        specialinvoke r0.<android.app.job.JobService: void <init>()>();

        return;
    }

    static void access$000(com.android.server.ZramWriteback)
    {
        com.android.server.ZramWriteback r0;

        r0 := @parameter0: com.android.server.ZramWriteback;

        specialinvoke r0.<com.android.server.ZramWriteback: void markAndFlushPages()>();

        return;
    }

    static void access$100(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        staticinvoke <com.android.server.ZramWriteback: void schedNextWriteback(android.content.Context)>(r0);

        return;
    }

    private void flushIdlePages()
    {
        com.android.server.ZramWriteback r0;
        java.lang.String r1, $r8;
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Integer $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.io.File r9;

        r0 := @this: com.android.server.ZramWriteback;

        $r2 = newarray (java.lang.Object)[1];

        $i0 = <com.android.server.ZramWriteback: int sZramDeviceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/sys/block/zram%d/writeback", $r2);

     label1:
        r9 = new java.io.File;

        specialinvoke r9.<java.io.File: void <init>(java.lang.String)>(r1);

        staticinvoke <android.os.FileUtils: void stringToFile(java.io.File,java.lang.String)>(r9, "idle");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write to ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ZramWriteback", $r8);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private int getWrittenPageCount()
    {
        com.android.server.ZramWriteback r0;
        java.lang.String r1, $r4, $r5, $r7, $r12;
        int i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String[] $r6;
        java.lang.Throwable $r8;
        java.lang.StringBuilder $r9;
        java.io.File r13;

        r0 := @this: com.android.server.ZramWriteback;

        $r2 = newarray (java.lang.Object)[1];

        $i1 = <com.android.server.ZramWriteback: int sZramDeviceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[0] = $r3;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/sys/block/zram%d/bd_stat", $r2);

     label1:
        r13 = new java.io.File;

        specialinvoke r13.<java.io.File: void <init>(java.lang.String)>(r1);

        $r4 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>(r13, 128, "");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r7 = $r6[2];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r7, 10);

     label2:
        return i0;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read writeback stats from ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ZramWriteback", $r12);

        return -1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static boolean isWritebackEnabled()
    {
        java.lang.Object[] $r0;
        int $i0;
        java.lang.Integer $r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0;
        java.lang.Throwable $r6;
        java.io.File r7;

     label1:
        r7 = new java.io.File;

        $r0 = newarray (java.lang.Object)[1];

        $i0 = <com.android.server.ZramWriteback: int sZramDeviceId>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/sys/block/zram%d/backing_dev", $r0);

        specialinvoke r7.<java.io.File: void <init>(java.lang.String)>($r2);

        $r3 = "none";

        $r4 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>(r7, 128, "");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

     label2:
        return 1;

     label3:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ZramWriteback", "Writeback device is not set");

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ZramWriteback", "Writeback is not enabled on zram");

     label6:
        return 0;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private void markAndFlushPages()
    {
        com.android.server.ZramWriteback r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.server.ZramWriteback;

        i0 = specialinvoke r0.<com.android.server.ZramWriteback: int getWrittenPageCount()>();

        specialinvoke r0.<com.android.server.ZramWriteback: void flushIdlePages()>();

        specialinvoke r0.<com.android.server.ZramWriteback: void markPagesAsIdle()>();

        if i0 == -1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total pages written to disk is ");

        $i1 = specialinvoke r0.<com.android.server.ZramWriteback: int getWrittenPageCount()>();

        $i2 = $i1 - i0;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ZramWriteback", $r5);

     label1:
        return;
    }

    private void markPagesAsIdle()
    {
        com.android.server.ZramWriteback r0;
        java.lang.String r1, $r8;
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Integer $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.io.File r9;

        r0 := @this: com.android.server.ZramWriteback;

        $r2 = newarray (java.lang.Object)[1];

        $i0 = <com.android.server.ZramWriteback: int sZramDeviceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/sys/block/zram%d/idle", $r2);

     label1:
        r9 = new java.io.File;

        specialinvoke r9.<java.io.File: void <init>(java.lang.String)>(r1);

        staticinvoke <android.os.FileUtils: void stringToFile(java.io.File,java.lang.String)>(r9, "all");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write to ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ZramWriteback", $r8);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void schedNextWriteback(android.content.Context)
    {
        android.content.Context r0;
        int i0;
        boolean z0, $z1;
        java.lang.Object $r1;
        android.app.job.JobInfo$Builder $r2, $r6, $r7;
        android.content.ComponentName $r3;
        android.app.job.JobScheduler $r4;
        long $l1, $l2;
        java.util.concurrent.TimeUnit $r5;
        android.app.job.JobInfo $r8;

        r0 := @parameter0: android.content.Context;

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.zram.periodic_wb_delay_hours", 24);

        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("zram.force_writeback", 0);

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("jobscheduler");

        $r4 = (android.app.job.JobScheduler) $r1;

        $r2 = new android.app.job.JobInfo$Builder;

        $r3 = <com.android.server.ZramWriteback: android.content.ComponentName sZramWriteback>;

        specialinvoke $r2.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>(812, $r3);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $l1 = (long) i0;

        $l2 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>($l1);

        $r6 = virtualinvoke $r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>($l2);

        $z1 = z0 ^ 1;

        $r7 = virtualinvoke $r6.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>($z1);

        $r8 = virtualinvoke $r7.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        virtualinvoke $r4.<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>($r8);

        return;
    }

    public static void scheduleZramWriteback(android.content.Context)
    {
        int i0, i1;
        boolean z0, $z1;
        java.lang.Object $r0;
        android.app.job.JobInfo$Builder $r1, $r4, $r6, $r8, $r11, $r12;
        android.content.ComponentName $r2, $r9;
        long $l2, $l3, $l4, $l5, $l7, $l8;
        java.util.concurrent.TimeUnit $r3, $r5, $r10;
        android.app.job.JobInfo $r7, $r13;
        android.content.Context r14;
        android.app.job.JobScheduler r15;

        r14 := @parameter0: android.content.Context;

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.zram.mark_idle_delay_mins", 20);

        i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.zram.first_wb_delay_mins", 180);

        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("zram.force_writeback", 0);

        $r0 = virtualinvoke r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("jobscheduler");

        r15 = (android.app.job.JobScheduler) $r0;

        $r1 = new android.app.job.JobInfo$Builder;

        $r2 = <com.android.server.ZramWriteback: android.content.ComponentName sZramWriteback>;

        specialinvoke $r1.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>(811, $r2);

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l2 = (long) i0;

        $l3 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>($l2);

        $r4 = virtualinvoke $r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>($l3);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l4 = (long) i0;

        $l5 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>($l4);

        $r6 = virtualinvoke $r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setOverrideDeadline(long)>($l5);

        $r7 = virtualinvoke $r6.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        virtualinvoke r15.<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>($r7);

        $r8 = new android.app.job.JobInfo$Builder;

        $r9 = <com.android.server.ZramWriteback: android.content.ComponentName sZramWriteback>;

        specialinvoke $r8.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>(812, $r9);

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l7 = (long) i1;

        $l8 = virtualinvoke $r10.<java.util.concurrent.TimeUnit: long toMillis(long)>($l7);

        $r11 = virtualinvoke $r8.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>($l8);

        $z1 = z0 ^ 1;

        $r12 = virtualinvoke $r11.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>($z1);

        $r13 = virtualinvoke $r12.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        virtualinvoke r15.<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>($r13);

        return;
    }

    public boolean onStartJob(android.app.job.JobParameters)
    {
        com.android.server.ZramWriteback r0;
        android.app.job.JobParameters r1;
        boolean $z0;
        int $i0;
        com.android.server.ZramWriteback$1 $r2;

        r0 := @this: com.android.server.ZramWriteback;

        r1 := @parameter0: android.app.job.JobParameters;

        $z0 = staticinvoke <com.android.server.ZramWriteback: boolean isWritebackEnabled()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.ZramWriteback: void jobFinished(android.app.job.JobParameters,boolean)>(r1, 0);

        return 0;

     label1:
        $i0 = virtualinvoke r1.<android.app.job.JobParameters: int getJobId()>();

        if $i0 != 811 goto label2;

        specialinvoke r0.<com.android.server.ZramWriteback: void markPagesAsIdle()>();

        virtualinvoke r0.<com.android.server.ZramWriteback: void jobFinished(android.app.job.JobParameters,boolean)>(r1, 0);

        return 0;

     label2:
        $r2 = new com.android.server.ZramWriteback$1;

        specialinvoke $r2.<com.android.server.ZramWriteback$1: void <init>(com.android.server.ZramWriteback,java.lang.String,android.app.job.JobParameters)>(r0, "ZramWriteback_WritebackIdlePages", r1);

        virtualinvoke $r2.<com.android.server.ZramWriteback$1: void start()>();

        return 1;
    }

    public boolean onStopJob(android.app.job.JobParameters)
    {
        com.android.server.ZramWriteback r0;
        android.app.job.JobParameters r1;

        r0 := @this: com.android.server.ZramWriteback;

        r1 := @parameter0: android.app.job.JobParameters;

        return 0;
    }
}
