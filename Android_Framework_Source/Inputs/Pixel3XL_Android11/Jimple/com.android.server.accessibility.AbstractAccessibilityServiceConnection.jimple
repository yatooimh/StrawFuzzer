abstract class com.android.server.accessibility.AbstractAccessibilityServiceConnection extends android.accessibilityservice.IAccessibilityServiceConnection$Stub implements android.content.ServiceConnection, android.os.IBinder$DeathRecipient, com.android.server.accessibility.KeyEventDispatcher$KeyEventFilter, com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    protected static final java.lang.String TAKE_SCREENSHOT;
    private static final int WAIT_WINDOWS_TIMEOUT_MILLIS;
    private final com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager;
    protected final android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo;
    boolean mCaptureFingerprintGestures;
    final android.content.ComponentName mComponentName;
    protected final android.content.Context mContext;
    private final android.hardware.display.DisplayManager mDisplayManager;
    public android.os.Handler mEventDispatchHandler;
    int mEventTypes;
    int mFeedbackType;
    int mFetchFlags;
    private final com.android.internal.compat.IPlatformCompat mIPlatformCompat;
    final int mId;
    public final com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler;
    boolean mIsDefault;
    boolean mLastAccessibilityButtonCallbackState;
    protected final java.lang.Object mLock;
    private final android.os.Handler mMainHandler;
    long mNotificationTimeout;
    final android.util.SparseArray mOverlayWindowTokens;
    java.util.Set mPackageNames;
    final android.util.SparseArray mPendingEvents;
    private final android.os.PowerManager mPowerManager;
    boolean mReceivedAccessibilityButtonCallbackSinceBind;
    boolean mRequestAccessibilityButton;
    boolean mRequestFilterKeyEvents;
    private boolean mRequestMultiFingerGestures;
    private long mRequestTakeScreenshotTimestampMs;
    boolean mRequestTouchExplorationMode;
    boolean mRetrieveInteractiveWindows;
    protected final com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy;
    android.os.IBinder mService;
    private boolean mServiceHandlesDoubleTap;
    android.accessibilityservice.IAccessibilityServiceClient mServiceInterface;
    private final com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer;
    protected final com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport;
    boolean mUsesAccessibilityCache;
    protected final com.android.server.wm.WindowManagerInternal mWindowManagerService;

    public void <init>(android.content.Context, android.content.ComponentName, android.accessibilityservice.AccessibilityServiceInfo, int, android.os.Handler, java.lang.Object, com.android.server.accessibility.AccessibilitySecurityPolicy, com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport, com.android.server.wm.WindowManagerInternal, com.android.server.accessibility.SystemActionPerformer, com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.content.Context r1, $r18;
        android.content.ComponentName r2;
        android.accessibilityservice.AccessibilityServiceInfo r3;
        int i0;
        android.os.Handler r4;
        java.lang.Object r5, $r16, $r19;
        com.android.server.accessibility.AccessibilitySecurityPolicy r6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport r7;
        com.android.server.wm.WindowManagerInternal r8;
        com.android.server.accessibility.SystemActionPerformer r9;
        com.android.server.accessibility.AccessibilityWindowManager r10;
        java.util.HashSet $r11;
        android.util.SparseArray $r12, $r13;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r14;
        android.os.Looper $r15, $r24;
        android.hardware.display.DisplayManager $r17;
        android.os.PowerManager $r20;
        android.os.IBinder $r21;
        com.android.internal.compat.IPlatformCompat $r22;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$1 $r23;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: android.accessibilityservice.AccessibilityServiceInfo;

        i0 := @parameter3: int;

        r4 := @parameter4: android.os.Handler;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r7 := @parameter7: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport;

        r8 := @parameter8: com.android.server.wm.WindowManagerInternal;

        r9 := @parameter9: com.android.server.accessibility.SystemActionPerformer;

        r10 := @parameter10: com.android.server.accessibility.AccessibilityWindowManager;

        specialinvoke r0.<android.accessibilityservice.IAccessibilityServiceConnection$Stub: void <init>()>();

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.util.Set mPackageNames> = $r11;

        $r12 = new android.util.SparseArray;

        specialinvoke $r12.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mPendingEvents> = $r12;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mUsesAccessibilityCache> = 0;

        $r13 = new android.util.SparseArray;

        specialinvoke $r13.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mOverlayWindowTokens> = $r13;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.Context mContext> = r1;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.wm.WindowManagerInternal mWindowManagerService> = r8;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mId> = i0;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.ComponentName mComponentName> = r2;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo> = r3;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock> = r5;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy> = r6;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer> = r9;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport> = r7;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mMainHandler> = r4;

        $r14 = new com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler;

        $r15 = virtualinvoke r4.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r14.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: void <init>(com.android.server.accessibility.AbstractAccessibilityServiceConnection,android.os.Looper)>(r0, $r15);

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler> = $r14;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager> = r10;

        $r16 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r17 = (android.hardware.display.DisplayManager) $r16;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.hardware.display.DisplayManager mDisplayManager> = $r17;

        $r18 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r20 = (android.os.PowerManager) $r19;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.PowerManager mPowerManager> = $r20;

        $r21 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("platform_compat");

        $r22 = staticinvoke <com.android.internal.compat.IPlatformCompat$Stub: com.android.internal.compat.IPlatformCompat asInterface(android.os.IBinder)>($r21);

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.internal.compat.IPlatformCompat mIPlatformCompat> = $r22;

        $r23 = new com.android.server.accessibility.AbstractAccessibilityServiceConnection$1;

        $r24 = virtualinvoke r4.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r23.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$1: void <init>(com.android.server.accessibility.AbstractAccessibilityServiceConnection,android.os.Looper)>(r0, $r24);

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mEventDispatchHandler> = $r23;

        virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void setDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)>(r3);

        return;
    }

    static void access$000(com.android.server.accessibility.AbstractAccessibilityServiceConnection, int, android.view.accessibility.AccessibilityEvent, boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.view.accessibility.AccessibilityEvent r1;
        boolean z0;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.accessibility.AccessibilityEvent;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifyAccessibilityEventInternal(int,android.view.accessibility.AccessibilityEvent,boolean)>(i0, r1, z0);

        return;
    }

    static void access$100(com.android.server.accessibility.AbstractAccessibilityServiceConnection, android.accessibilityservice.AccessibilityGestureEvent)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.accessibilityservice.AccessibilityGestureEvent r1;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 := @parameter1: android.accessibilityservice.AccessibilityGestureEvent;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifyGestureInternal(android.accessibilityservice.AccessibilityGestureEvent)>(r1);

        return;
    }

    static void access$200(com.android.server.accessibility.AbstractAccessibilityServiceConnection)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifyClearAccessibilityCacheInternal()>();

        return;
    }

    static void access$300(com.android.server.accessibility.AbstractAccessibilityServiceConnection, int, android.graphics.Region, float, float, float)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.graphics.Region r1;
        float f0, f1, f2;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Region;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifyMagnificationChangedInternal(int,android.graphics.Region,float,float,float)>(i0, r1, f0, f1, f2);

        return;
    }

    static void access$400(com.android.server.accessibility.AbstractAccessibilityServiceConnection, int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifySoftKeyboardShowModeChangedInternal(int)>(i0);

        return;
    }

    static void access$500(com.android.server.accessibility.AbstractAccessibilityServiceConnection, int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifyAccessibilityButtonClickedInternal(int)>(i0);

        return;
    }

    static void access$600(com.android.server.accessibility.AbstractAccessibilityServiceConnection, boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean z0;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifyAccessibilityButtonAvailabilityChangedInternal(boolean)>(z0);

        return;
    }

    static void access$700(com.android.server.accessibility.AbstractAccessibilityServiceConnection)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;

        r0 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void notifySystemActionsChangedInternal()>();

        return;
    }

    private void ensureWindowsAvailableTimedLocked(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        long l1, l2, $l3, $l4;
        com.android.server.accessibility.AccessibilityWindowManager $r2, $r4, $r5, $r6;
        java.util.List $r3, $r7;
        boolean $z0, $z1;
        byte $b5;
        java.lang.Object $r8;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r3 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: java.util.List getWindowListLocked(int)>(i0);

        if $r3 == null goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z0 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked(int)>(i0);

        if $z0 != 0 goto label2;

        $r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        interfaceinvoke $r9.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: void onClientChangeLocked(boolean)>(0);

     label2:
        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked(int)>(i0);

        if $z1 != 0 goto label3;

        return;

     label3:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label4:
        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r7 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityWindowManager: java.util.List getWindowListLocked(int)>(i0);

        if $r7 != null goto label9;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = $l3 - l1;

        l2 = 5000L - $l4;

        $b5 = l2 cmp 0L;

        if $b5 > 0 goto label5;

        return;

     label5:
        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        virtualinvoke $r8.<java.lang.Object: void wait(long)>(l2);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

     label8:
        goto label4;

     label9:
        return;

        catch java.lang.InterruptedException from label5 to label6 with label7;
    }

    private android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.accessibilityservice.IAccessibilityServiceClient r3;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private java.util.List getWindowsByDisplayLocked(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        java.util.List r1;
        int i0, $i1, i2, i3;
        com.android.server.accessibility.AccessibilityWindowManager $r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        android.view.accessibility.AccessibilityWindowInfo r6, r7;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i2 := @parameter0: int;

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r1 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: java.util.List getWindowListLocked(int)>(i2);

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (android.view.accessibility.AccessibilityWindowInfo) $r5;

        r7 = staticinvoke <android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>(r6);

        $i1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mId>;

        virtualinvoke r7.<android.view.accessibility.AccessibilityWindowInfo: void setConnectionId(int)>($i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r7);

        i3 = i3 + 1;

        goto label2;

     label3:
        return $r4;
    }

    static void lambda$sendScreenshotFailure$1(int, android.os.RemoteCallback, java.lang.Object)
    {
        int i0;
        android.os.RemoteCallback r0;
        android.os.Bundle $r1;
        java.lang.Object r2;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.RemoteCallback;

        r2 := @parameter2: java.lang.Object;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("screenshot_status", i0);

        virtualinvoke r0.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>($r1);

        return;
    }

    private void notifyAccessibilityButtonAvailabilityChangedInternal(boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean z0, $z1, $z2;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        android.os.IBinder $r5;
        java.lang.String $r7;
        android.accessibilityservice.IAccessibilityServiceClient r8;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mReceivedAccessibilityButtonCallbackSinceBind>;

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mLastAccessibilityButtonCallbackState>;

        if $z2 != z0 goto label1;

        return;

     label1:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mReceivedAccessibilityButtonCallbackSinceBind> = 1;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mLastAccessibilityButtonCallbackState> = z0;

        r8 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()>();

        if r8 == null goto label5;

     label2:
        interfaceinvoke r8.<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityButtonAvailabilityChanged(boolean)>(z0);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error sending accessibility button availability change to ");

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", $r7, $r2);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void notifyAccessibilityButtonClickedInternal(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        android.os.IBinder $r5;
        java.lang.String $r7;
        android.accessibilityservice.IAccessibilityServiceClient r8;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r8 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()>();

        if r8 == null goto label4;

     label1:
        interfaceinvoke r8.<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityButtonClicked(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error sending accessibility button click to ");

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", $r7, $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyAccessibilityEventInternal(int, android.view.accessibility.AccessibilityEvent, boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, $i1;
        boolean z0, $z1;
        android.accessibilityservice.IAccessibilityServiceClient r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        android.view.View $r3;
        android.util.SparseArray $r4, $r6;
        java.lang.Object $r5, r16;
        java.lang.Throwable $r7, $r8;
        android.os.RemoteException $r9;
        java.lang.String $r14;
        android.view.accessibility.AccessibilityEvent r15, r17;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r15 := @parameter1: android.view.accessibility.AccessibilityEvent;

        z0 := @parameter2: boolean;

        r16 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r16;

     label01:
        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

     label02:
        if r1 != null goto label05;

     label03:
        exitmonitor r16;

     label04:
        return;

     label05:
        r17 = r15;

        if r15 != null goto label11;

     label06:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mPendingEvents>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r17 = (android.view.accessibility.AccessibilityEvent) $r5;

     label07:
        if r17 != null goto label10;

     label08:
        exitmonitor r16;

     label09:
        return;

     label10:
        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r6.<android.util.SparseArray: void remove(int)>(i0);

     label11:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 == 0 goto label13;

        $i1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mId>;

        virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: void setConnectionId(int)>($i1);

     label12:
        goto label14;

     label13:
        $r3 = (android.view.View) null;

        virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View)>($r3);

     label14:
        virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: void setSealed(boolean)>(1);

        exitmonitor r16;

     label15:
        interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent,boolean)>(r17, z0);

     label16:
        virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        goto label21;

     label17:
        $r8 := @caughtexception;

        goto label22;

     label18:
        $r9 := @caughtexception;

     label19:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error during sending ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", $r14, $r9);

     label20:
        goto label16;

     label21:
        return;

     label22:
        virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        throw $r8;

     label23:
        $r7 := @caughtexception;

     label24:
        exitmonitor r16;

     label25:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.lang.Throwable from label10 to label11 with label23;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch android.os.RemoteException from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label17;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    private void notifyClearAccessibilityCacheInternal()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.os.RemoteException $r1;
        android.accessibilityservice.IAccessibilityServiceClient r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r2 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()>();

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.accessibilityservice.IAccessibilityServiceClient: void clearAccessibilityCache()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", "Error during requesting accessibility info cache to be cleared.", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyGestureInternal(android.accessibilityservice.AccessibilityGestureEvent)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.accessibilityservice.AccessibilityGestureEvent r1;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4;
        android.os.IBinder $r8;
        java.lang.String $r10;
        android.accessibilityservice.IAccessibilityServiceClient r11;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 := @parameter0: android.accessibilityservice.AccessibilityGestureEvent;

        r11 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()>();

        if r11 == null goto label4;

     label1:
        interfaceinvoke r11.<android.accessibilityservice.IAccessibilityServiceClient: void onGesture(android.accessibilityservice.AccessibilityGestureEvent)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error during sending gesture ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", $r10, $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyMagnificationChangedInternal(int, android.graphics.Region, float, float, float)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        float f0, f1, f2;
        android.os.RemoteException $r1;
        java.lang.StringBuilder $r2;
        android.os.IBinder $r4;
        java.lang.String $r6;
        android.graphics.Region r7;
        android.accessibilityservice.IAccessibilityServiceClient r8;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r7 := @parameter1: android.graphics.Region;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        r8 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()>();

        if r8 == null goto label4;

     label1:
        interfaceinvoke r8.<android.accessibilityservice.IAccessibilityServiceClient: void onMagnificationChanged(int,android.graphics.Region,float,float,float)>(i0, r7, f0, f1, f2);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error sending magnification changes to ");

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", $r6, $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifySoftKeyboardShowModeChangedInternal(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        android.os.IBinder $r5;
        java.lang.String $r7;
        android.accessibilityservice.IAccessibilityServiceClient r8;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r8 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()>();

        if r8 == null goto label4;

     label1:
        interfaceinvoke r8.<android.accessibilityservice.IAccessibilityServiceClient: void onSoftKeyboardShowModeChanged(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error sending soft keyboard show mode changes to ");

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", $r7, $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifySystemActionsChangedInternal()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        android.os.IBinder $r5;
        java.lang.String $r7;
        android.accessibilityservice.IAccessibilityServiceClient r8;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r8 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient getServiceInterfaceSafely()>();

        if r8 == null goto label4;

     label1:
        interfaceinvoke r8.<android.accessibilityservice.IAccessibilityServiceClient: void onSystemActionsChanged()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error sending system actions change to ");

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AbstractAccessibilityServiceConnection", $r7, $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean performAccessibilityActionInternal(int, int, long, int, android.os.Bundle, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, i1, i3, i4, i5, i8;
        long l2, l6, l7, $l9;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r1;
        java.lang.Object r2, $r6;
        android.view.accessibility.AccessibilityWindowInfo r3;
        com.android.server.accessibility.AccessibilityWindowManager $r4, $r5, $r8, $r10, $r11, $r25;
        com.android.server.wm.ActivityTaskManagerInternal $r7;
        boolean $z0, z1;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection $r9, r22;
        android.os.RemoteException $r12, $r13, $r20;
        java.lang.Throwable $r14, $r15, $r16, $r17, $r18, $r19, r26, r28;
        android.os.Bundle r21;
        android.view.WindowInfo r23;
        android.os.IBinder r24;
        android.os.PowerManager $r27;
        android.view.accessibility.IAccessibilityInteractionConnection r30;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        r21 := @parameter4: android.os.Bundle;

        i4 := @parameter5: int;

        r1 := @parameter6: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        i5 := @parameter7: int;

        l6 := @parameter8: long;

        r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r22 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>(i0, i1);

     label02:
        if r22 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        return 0;

     label05:
        if i3 == 64 goto label07;

        if i3 != 128 goto label06;

        goto label07;

     label06:
        z1 = 0;

        goto label08;

     label07:
        z1 = 1;

     label08:
        if z1 != 0 goto label13;

     label09:
        $r11 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r23 = virtualinvoke $r11.<com.android.server.accessibility.AccessibilityWindowManager: android.view.WindowInfo findWindowInfoByIdLocked(int)>(i1);

     label10:
        if r23 == null goto label13;

     label11:
        r24 = r23.<android.view.WindowInfo: android.os.IBinder activityToken>;

     label12:
        goto label14;

     label13:
        r24 = null;

     label14:
        $r25 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r3 = virtualinvoke $r25.<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)>(i1);

     label15:
        if r3 == null goto label21;

     label16:
        $z0 = virtualinvoke r3.<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>();

        if $z0 == 0 goto label21;

        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r9 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getPictureInPictureActionReplacingConnection()>();

        if $r9 == null goto label21;

     label17:
        if z1 != 0 goto label21;

     label18:
        $r10 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r22 = virtualinvoke $r10.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getPictureInPictureActionReplacingConnection()>();

     label19:
        goto label21;

     label20:
        $r15 := @caughtexception;

        r26 = $r15;

        goto label42;

     label21:
        exitmonitor r2;

     label22:
        i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l7 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label23:
        $r27 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.PowerManager mPowerManager>;

        $l9 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r27.<android.os.PowerManager: void userActivity(long,int,int)>($l9, 3, 0);

     label24:
        if i3 == 16 goto label25;

        if i3 != 32 goto label26;

     label25:
        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r5.<com.android.server.accessibility.AccessibilityWindowManager: void notifyOutsideTouch(int,int)>(i0, i1);

     label26:
        if r24 == null goto label31;

     label27:
        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r7 = (com.android.server.wm.ActivityTaskManagerInternal) $r6;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerInternal: void setFocusedActivity(android.os.IBinder)>(r24);

     label28:
        goto label31;

     label29:
        $r17 := @caughtexception;

        r28 = $r17;

        goto label37;

     label30:
        $r12 := @caughtexception;

        goto label39;

     label31:
        r30 = virtualinvoke r22.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

     label32:
        interfaceinvoke r30.<android.view.accessibility.IAccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>(l2, i3, r21, i4, r1, i5, i8, l6);

     label33:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l7);

        return 1;

     label34:
        $r19 := @caughtexception;

        r28 = $r19;

        goto label37;

     label35:
        $r20 := @caughtexception;

        goto label39;

     label36:
        $r18 := @caughtexception;

        r28 = $r18;

     label37:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l7);

        throw r28;

     label38:
        $r13 := @caughtexception;

     label39:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l7);

        return 0;

     label40:
        $r14 := @caughtexception;

        r26 = $r14;

        goto label42;

     label41:
        $r16 := @caughtexception;

        r26 = $r16;

     label42:
        exitmonitor r2;

     label43:
        throw r26;

        catch java.lang.Throwable from label01 to label02 with label41;
        catch java.lang.Throwable from label03 to label04 with label41;
        catch java.lang.Throwable from label09 to label10 with label41;
        catch java.lang.Throwable from label11 to label12 with label41;
        catch java.lang.Throwable from label14 to label15 with label40;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label40;
        catch android.os.RemoteException from label23 to label24 with label38;
        catch java.lang.Throwable from label23 to label24 with label36;
        catch android.os.RemoteException from label25 to label26 with label38;
        catch java.lang.Throwable from label25 to label26 with label36;
        catch android.os.RemoteException from label27 to label28 with label30;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch android.os.RemoteException from label31 to label32 with label38;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch android.os.RemoteException from label32 to label33 with label35;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.lang.Throwable from label42 to label43 with label41;
    }

    private boolean registerMagnificationIfNeeded(int, com.android.server.accessibility.MagnificationController)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        com.android.server.accessibility.MagnificationController r1;
        boolean $z0, $z1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.accessibility.MagnificationController;

        $z0 = virtualinvoke r1.<com.android.server.accessibility.MagnificationController: boolean isRegistered(int)>(i0);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canControlMagnification(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 == 0 goto label1;

        virtualinvoke r1.<com.android.server.accessibility.MagnificationController: void register(int)>(i0);

        return 1;

     label1:
        return 0;
    }

    private android.view.accessibility.IAccessibilityInteractionConnectionCallback replaceCallbackIfNeeded(android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, int, int, long)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, i1, i2;
        long l3;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r1;
        java.lang.Object r2;
        com.android.server.accessibility.AccessibilityWindowManager $r3, r9;
        boolean $z0;
        com.android.server.accessibility.ActionReplacingCallback $r4;
        android.view.accessibility.IAccessibilityInteractionConnection $r5;
        java.lang.Throwable $r6, $r7, r11;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r8;
        android.view.accessibility.AccessibilityWindowInfo r10;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r8 := @parameter0: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        l3 := @parameter4: long;

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r1 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getPictureInPictureActionReplacingConnection()>();

        r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

     label02:
        r10 = virtualinvoke r9.<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)>(i0);

     label03:
        if r10 == null goto label08;

     label04:
        $z0 = virtualinvoke r10.<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>();

        if $z0 == 0 goto label08;

     label05:
        if r1 != null goto label06;

        goto label08;

     label06:
        exitmonitor r2;

     label07:
        $r4 = new com.android.server.accessibility.ActionReplacingCallback;

        $r5 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        specialinvoke $r4.<com.android.server.accessibility.ActionReplacingCallback: void <init>(android.view.accessibility.IAccessibilityInteractionConnectionCallback,android.view.accessibility.IAccessibilityInteractionConnection,int,int,long)>(r8, $r5, i1, i2, l3);

        return $r4;

     label08:
        exitmonitor r2;

     label09:
        return r8;

     label10:
        $r7 := @caughtexception;

        r11 = $r7;

        goto label12;

     label11:
        $r6 := @caughtexception;

        r11 = $r6;

     label12:
        exitmonitor r2;

     label13:
        throw r11;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
    }

    private int resolveAccessibilityWindowIdForFindFocusLocked(int, int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, i1, $i2, $i3, $i4;
        com.android.server.accessibility.AccessibilityWindowManager $r1, $r3;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 2147483647 goto label1;

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i3 = interfaceinvoke $r2.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $i4 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: int getActiveWindowId(int)>($i3);

        return $i4;

     label1:
        if i0 != -2 goto label2;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i2 = virtualinvoke $r1.<com.android.server.accessibility.AccessibilityWindowManager: int getFocusedWindowId(int)>(i1);

        return $i2;

     label2:
        return i0;
    }

    private int resolveAccessibilityWindowIdLocked(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, $i1, $i2;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r1;
        com.android.server.accessibility.AccessibilityWindowManager $r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        if i0 != 2147483647 goto label1;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i1 = interfaceinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $i2 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: int getActiveWindowId(int)>($i1);

        return $i2;

     label1:
        return i0;
    }

    private void sendScreenshotFailure(int, android.os.RemoteCallback)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.os.RemoteCallback r1;
        com.android.server.accessibility._$$Lambda$AbstractAccessibilityServiceConnection$g9riCCZ1Q65sgTLJyka5Kl5oFso $r2;
        android.os.Handler $r3;
        com.android.internal.util.function.pooled.PooledRunnable $r4, $r5;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.RemoteCallback;

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mMainHandler>;

        $r2 = new com.android.server.accessibility._$$Lambda$AbstractAccessibilityServiceConnection$g9riCCZ1Q65sgTLJyka5Kl5oFso;

        specialinvoke $r2.<com.android.server.accessibility._$$Lambda$AbstractAccessibilityServiceConnection$g9riCCZ1Q65sgTLJyka5Kl5oFso: void <init>(int,android.os.RemoteCallback)>(i0, r1);

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(java.util.function.Consumer,java.lang.Object)>($r2, null);

        $r5 = interfaceinvoke $r4.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return;
    }

    private void sendScreenshotSuccess(android.view.SurfaceControl$ScreenshotGraphicBuffer, android.os.RemoteCallback)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.graphics.ParcelableColorSpace r1;
        android.graphics.ColorSpace $r2;
        long $l0;
        java.lang.Throwable $r3, $r4;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r5;
        android.os.RemoteCallback r6;
        android.graphics.GraphicBuffer r7;
        android.hardware.HardwareBuffer r8;
        android.os.Bundle r9;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r5 := @parameter0: android.view.SurfaceControl$ScreenshotGraphicBuffer;

        r6 := @parameter1: android.os.RemoteCallback;

        r7 = virtualinvoke r5.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()>();

        r8 = staticinvoke <android.hardware.HardwareBuffer: android.hardware.HardwareBuffer createFromGraphicBuffer(android.graphics.GraphicBuffer)>(r7);

     label1:
        r1 = new android.graphics.ParcelableColorSpace;

        $r2 = virtualinvoke r5.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace getColorSpace()>();

        specialinvoke r1.<android.graphics.ParcelableColorSpace: void <init>(android.graphics.ColorSpace)>($r2);

        r9 = new android.os.Bundle;

        specialinvoke r9.<android.os.Bundle: void <init>()>();

        virtualinvoke r9.<android.os.Bundle: void putInt(java.lang.String,int)>("screenshot_status", 0);

        virtualinvoke r9.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("screenshot_hardwareBuffer", r8);

        virtualinvoke r9.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("screenshot_colorSpace", r1);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r9.<android.os.Bundle: void putLong(java.lang.String,long)>("screenshot_timestamp", $l0);

        virtualinvoke r6.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(r9);

        virtualinvoke r8.<android.hardware.HardwareBuffer: void close()>();

     label2:
        if r8 == null goto label3;

        virtualinvoke r8.<android.hardware.HardwareBuffer: void close()>();

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        if r8 == null goto label8;

     label5:
        virtualinvoke r8.<android.hardware.HardwareBuffer: void close()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private boolean wantsEventLocked(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean z0, $z1, $z2, $z3, z4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Set r1;
        java.lang.CharSequence $r2, $r3;
        android.view.accessibility.AccessibilityEvent r4;
        java.lang.String r5;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r4 := @parameter0: android.view.accessibility.AccessibilityEvent;

        z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean canReceiveEventsLocked()>();

        z4 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r4.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        if $i1 == -1 goto label2;

        $z3 = virtualinvoke r4.<android.view.accessibility.AccessibilityEvent: boolean isImportantForAccessibility()>();

        if $z3 != 0 goto label2;

        $i2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        $i3 = $i2 & 8;

        if $i3 != 0 goto label2;

        return 0;

     label2:
        i0 = virtualinvoke r4.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mEventTypes>;

        $i5 = $i4 & i0;

        if $i5 == i0 goto label3;

        return 0;

     label3:
        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.util.Set mPackageNames>;

        $r2 = virtualinvoke r4.<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>();

        if $r2 == null goto label4;

        $r3 = virtualinvoke r4.<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>();

        r5 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        goto label5;

     label4:
        r5 = null;

     label5:
        $z1 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $z2 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z2 == 0 goto label7;

     label6:
        z4 = 1;

     label7:
        return z4;
    }

    public boolean canReceiveEventsLocked()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int $i0;
        android.os.IBinder $r1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $i0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mEventTypes>;

        if $i0 == 0 goto label1;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void dispatchGesture(int, android.content.pm.ParceledListSlice, int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, i1;
        android.content.pm.ParceledListSlice r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.ParceledListSlice;

        i1 := @parameter2: int;

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.content.Context $r1, $r5;
        boolean $z0, $z1;
        android.accessibilityservice.AccessibilityServiceInfo $r3, $r17;
        android.content.pm.ResolveInfo $r4;
        android.content.pm.PackageManager $r6;
        java.lang.CharSequence $r7;
        java.lang.String $r9, $r12, $r14, $r19, $r22, $r24, $r28, $r32;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.Throwable $r35;
        java.io.FileDescriptor r36;
        java.io.PrintWriter r37;
        java.lang.String[] r38;
        java.lang.Object r39;
        java.lang.StringBuilder r40, r41, r42, r43, r44, r45;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r36 := @parameter0: java.io.FileDescriptor;

        r37 := @parameter1: java.io.PrintWriter;

        r38 := @parameter2: java.lang.String[];

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r1, "AbstractAccessibilityServiceConnection", r37);

        if $z0 != 0 goto label1;

        return;

     label1:
        r39 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r39;

     label2:
        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service[label=");

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $r4 = virtualinvoke $r3.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r7 = virtualinvoke $r4.<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>($r6);

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r9);

        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", feedbackType");

        $i0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFeedbackType>;

        $r12 = staticinvoke <android.accessibilityservice.AccessibilityServiceInfo: java.lang.String feedbackTypeToString(int)>($i0);

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r14);

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", capabilities=");

        $r17 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i1 = virtualinvoke $r17.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r19);

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", eventTypes=");

        $i2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mEventTypes>;

        $r22 = staticinvoke <android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>($i2);

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r24);

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", notificationTimeout=");

        $l3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: long mNotificationTimeout>;

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r28 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r28);

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requestA11yBtn=");

        $z1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRequestAccessibilityButton>;

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r32 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r32);

        virtualinvoke r37.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("]");

        exitmonitor r39;

     label3:
        return;

     label4:
        $r35 := @caughtexception;

     label5:
        exitmonitor r39;

     label6:
        throw $r35;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String[] findAccessibilityNodeInfoByAccessibilityId(int, long, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long, android.os.Bundle) throws android.os.RemoteException
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        long l0, l3, l5;
        int i1, i2, i4, $i6, $i7, $i8, $i9, $i10, i11, i12;
        android.os.Bundle r1;
        java.lang.Object r2;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r3;
        android.view.MagnificationSpec r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r5, $r7, $r10;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r6, $r11, $r13;
        com.android.server.accessibility.AccessibilityWindowManager $r8, $r9;
        android.view.accessibility.IAccessibilityInteractionConnection $r12, $r15, $r17, $r19;
        java.lang.String $r14;
        java.lang.Throwable $r16, $r20, $r21, r28;
        android.os.RemoteException $r18;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r22, r24;
        android.graphics.Region r23;
        java.lang.String[] r25;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i11 := @parameter0: int;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r22 := @parameter3: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        i2 := @parameter4: int;

        l3 := @parameter5: long;

        r1 := @parameter6: android.os.Bundle;

        r23 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mUsesAccessibilityCache> = 1;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r2;

     label02:
        return null;

     label03:
        i12 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int resolveAccessibilityWindowIdLocked(int)>(i11);

        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i6 = interfaceinvoke $r5.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $z1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(int,com.android.server.accessibility.AbstractAccessibilityServiceConnection,int)>($i6, r0, i12);

        if $z1 != 0 goto label05;

        exitmonitor r2;

     label04:
        return null;

     label05:
        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i7 = interfaceinvoke $r7.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        r3 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>($i7, i12);

     label06:
        if r3 != null goto label09;

     label07:
        exitmonitor r2;

     label08:
        return null;

     label09:
        $r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z2 = virtualinvoke $r9.<com.android.server.accessibility.AccessibilityWindowManager: boolean computePartialInteractiveRegionForWindowLocked(int,android.graphics.Region)>(i12, r23);

        if $z2 != 0 goto label11;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label10:
        r23 = null;

        goto label11;

     label11:
        $r10 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r4 = interfaceinvoke $r10.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>(i12);

        exitmonitor r2;

     label12:
        $r11 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z3 = virtualinvoke $r11.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z3 != 0 goto label13;

        return null;

     label13:
        i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r24 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.view.accessibility.IAccessibilityInteractionConnectionCallback replaceCallbackIfNeeded(android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,int,long)>(r22, i12, i1, i4, l3);

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        $r12 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $i8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        $i9 = $i8 | i2;

        interfaceinvoke $r12.<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,android.os.Bundle)>(l0, r23, i1, r24, $i9, i4, l3, r4, r1);

        $r13 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r14 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: java.lang.String getPackageName()>();

        $i10 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: int getUid()>();

        r25 = virtualinvoke $r13.<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String[] computeValidReportedPackages(java.lang.String,int)>($r14, $i10);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        if r23 == null goto label16;

        $r15 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z4 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r15);

        if $z4 == 0 goto label16;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label16:
        return r25;

     label17:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        if r23 == null goto label18;

        $r17 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z5 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r17);

        if $z5 == 0 goto label18;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label18:
        throw $r16;

     label19:
        $r18 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        if r23 == null goto label20;

        $r19 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z6 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r19);

        if $z6 == 0 goto label20;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label20:
        return null;

     label21:
        $r20 := @caughtexception;

        r28 = $r20;

        goto label23;

     label22:
        $r21 := @caughtexception;

        r28 = $r21;

     label23:
        exitmonitor r2;

     label24:
        throw r28;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch android.os.RemoteException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public java.lang.String[] findAccessibilityNodeInfosByText(int, long, java.lang.String, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        long l0, l2, l4;
        int i1, i3, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r2;
        android.view.MagnificationSpec r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r4, $r6, $r9;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r5, $r10, $r12;
        com.android.server.accessibility.AccessibilityWindowManager $r7, $r8;
        android.view.accessibility.IAccessibilityInteractionConnection $r11, $r14, $r17, $r20;
        java.lang.String $r13, r21;
        java.lang.Throwable $r15, $r16, $r18, r28;
        android.os.RemoteException $r19;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r22, r24;
        android.graphics.Region r23;
        java.lang.String[] r25;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i9 := @parameter0: int;

        l0 := @parameter1: long;

        r21 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r22 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l2 := @parameter5: long;

        r23 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mUsesAccessibilityCache> = 1;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        i10 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int resolveAccessibilityWindowIdLocked(int)>(i9);

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i5 = interfaceinvoke $r4.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $z1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(int,com.android.server.accessibility.AbstractAccessibilityServiceConnection,int)>($i5, r0, i10);

        if $z1 != 0 goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        $r7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i6 = interfaceinvoke $r6.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        r2 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>($i6, i10);

     label06:
        if r2 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z2 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityWindowManager: boolean computePartialInteractiveRegionForWindowLocked(int,android.graphics.Region)>(i10, r23);

        if $z2 != 0 goto label11;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label10:
        r23 = null;

        goto label11;

     label11:
        $r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r3 = interfaceinvoke $r9.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>(i10);

        exitmonitor r1;

     label12:
        $r10 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z3 = virtualinvoke $r10.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z3 != 0 goto label13;

        return null;

     label13:
        i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r24 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.view.accessibility.IAccessibilityInteractionConnectionCallback replaceCallbackIfNeeded(android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,int,long)>(r22, i10, i1, i3, l2);

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        $r11 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $i7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        interfaceinvoke $r11.<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfosByText(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>(l0, r21, r23, i1, r24, $i7, i3, l2, r3);

        $r12 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r13 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: java.lang.String getPackageName()>();

        $i8 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: int getUid()>();

        r25 = virtualinvoke $r12.<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String[] computeValidReportedPackages(java.lang.String,int)>($r13, $i8);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label16;

        $r14 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z4 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r14);

        if $z4 == 0 goto label16;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label16:
        return r25;

     label17:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label18;

        $r17 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z5 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r17);

        if $z5 == 0 goto label18;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label18:
        throw $r16;

     label19:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label20;

        $r20 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z6 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r20);

        if $z6 == 0 goto label20;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label20:
        return null;

     label21:
        $r18 := @caughtexception;

        r28 = $r18;

        goto label23;

     label22:
        $r15 := @caughtexception;

        r28 = $r15;

     label23:
        exitmonitor r1;

     label24:
        throw r28;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch android.os.RemoteException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public java.lang.String[] findAccessibilityNodeInfosByViewId(int, long, java.lang.String, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        long l0, l2, l4;
        int i1, i3, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r2;
        android.view.MagnificationSpec r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r4, $r6, $r9;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r5, $r10, $r12;
        com.android.server.accessibility.AccessibilityWindowManager $r7, $r8;
        android.view.accessibility.IAccessibilityInteractionConnection $r11, $r14, $r17, $r20;
        java.lang.String $r13, r21;
        java.lang.Throwable $r15, $r18, $r19, r28;
        android.os.RemoteException $r16;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r22, r24;
        android.graphics.Region r23;
        java.lang.String[] r25;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i9 := @parameter0: int;

        l0 := @parameter1: long;

        r21 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r22 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l2 := @parameter5: long;

        r23 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mUsesAccessibilityCache> = 1;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        i3 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int resolveAccessibilityWindowIdLocked(int)>(i9);

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i5 = interfaceinvoke $r4.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $z1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(int,com.android.server.accessibility.AbstractAccessibilityServiceConnection,int)>($i5, r0, i3);

        if $z1 != 0 goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        $r7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i6 = interfaceinvoke $r6.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        r2 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>($i6, i3);

     label06:
        if r2 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z2 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityWindowManager: boolean computePartialInteractiveRegionForWindowLocked(int,android.graphics.Region)>(i3, r23);

        if $z2 != 0 goto label11;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label10:
        r23 = null;

        goto label11;

     label11:
        $r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r3 = interfaceinvoke $r9.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>(i3);

        exitmonitor r1;

     label12:
        $r10 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z3 = virtualinvoke $r10.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z3 != 0 goto label13;

        return null;

     label13:
        i10 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r24 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.view.accessibility.IAccessibilityInteractionConnectionCallback replaceCallbackIfNeeded(android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,int,long)>(r22, i3, i1, i10, l2);

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        $r11 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $i7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        interfaceinvoke $r11.<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfosByViewId(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>(l0, r21, r23, i1, r24, $i7, i10, l2, r3);

        $r12 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r13 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: java.lang.String getPackageName()>();

        $i8 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: int getUid()>();

        r25 = virtualinvoke $r12.<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String[] computeValidReportedPackages(java.lang.String,int)>($r13, $i8);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label16;

        $r14 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z4 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r14);

        if $z4 == 0 goto label16;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label16:
        return r25;

     label17:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label18;

        $r20 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z6 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r20);

        if $z6 == 0 goto label18;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label18:
        throw $r19;

     label19:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label20;

        $r17 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z5 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r17);

        if $z5 == 0 goto label20;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label20:
        return null;

     label21:
        $r18 := @caughtexception;

        r28 = $r18;

        goto label23;

     label22:
        $r15 := @caughtexception;

        r28 = $r15;

     label23:
        exitmonitor r1;

     label24:
        throw r28;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch android.os.RemoteException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public java.lang.String[] findFocus(int, long, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        long l0, l3, l4;
        int i1, i2, $i5, $i6, $i7, i8, i9, i10, i11;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r1;
        android.view.MagnificationSpec r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r3, $r5, $r8;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r4, $r9, $r10;
        com.android.server.accessibility.AccessibilityWindowManager $r6, $r7;
        java.lang.String $r11;
        android.view.accessibility.IAccessibilityInteractionConnection $r12, $r15, $r18, r26;
        java.lang.Throwable $r13, $r14, $r16, $r19, $r21, r28, r31;
        android.os.RemoteException $r17, $r20;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r22, r25;
        android.graphics.Region r23;
        java.lang.Object r24;
        java.lang.String[] r27;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i8 := @parameter0: int;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r22 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l3 := @parameter5: long;

        r23 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        r24 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r24;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r24;

     label02:
        return null;

     label03:
        i9 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int resolveAccessibilityWindowIdForFindFocusLocked(int,int)>(i8, i1);

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i5 = interfaceinvoke $r3.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $z1 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(int,com.android.server.accessibility.AbstractAccessibilityServiceConnection,int)>($i5, r0, i9);

        if $z1 != 0 goto label05;

        exitmonitor r24;

     label04:
        return null;

     label05:
        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i6 = interfaceinvoke $r5.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        r1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>($i6, i9);

     label06:
        if r1 != null goto label09;

     label07:
        exitmonitor r24;

     label08:
        return null;

     label09:
        $r7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z2 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilityWindowManager: boolean computePartialInteractiveRegionForWindowLocked(int,android.graphics.Region)>(i9, r23);

        if $z2 != 0 goto label11;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label10:
        r23 = null;

        goto label11;

     label11:
        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r2 = interfaceinvoke $r8.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>(i9);

        exitmonitor r24;

     label12:
        $r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z3 = virtualinvoke $r9.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z3 != 0 goto label13;

        return null;

     label13:
        i10 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r25 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.view.accessibility.IAccessibilityInteractionConnectionCallback replaceCallbackIfNeeded(android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,int,long)>(r22, i9, i2, i10, l3);

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        r26 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        i11 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

     label15:
        interfaceinvoke r26.<android.view.accessibility.IAccessibilityInteractionConnection: void findFocus(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>(l0, i1, r23, i2, r25, i11, i10, l3, r2);

        $r10 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r11 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: java.lang.String getPackageName()>();

        $i7 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: int getUid()>();

        r27 = virtualinvoke $r10.<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String[] computeValidReportedPackages(java.lang.String,int)>($r11, $i7);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label17;

        $r12 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z4 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r12);

        if $z4 == 0 goto label17;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label17:
        return r27;

     label18:
        $r19 := @caughtexception;

        r28 = $r19;

        goto label21;

     label19:
        $r17 := @caughtexception;

        goto label24;

     label20:
        $r14 := @caughtexception;

        r28 = $r14;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label22;

        $r15 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z5 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r15);

        if $z5 == 0 goto label22;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label22:
        throw r28;

     label23:
        $r20 := @caughtexception;

     label24:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        if r23 == null goto label25;

        $r18 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z6 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r18);

        if $z6 == 0 goto label25;

        virtualinvoke r23.<android.graphics.Region: void recycle()>();

     label25:
        return null;

     label26:
        $r13 := @caughtexception;

        r31 = $r13;

        goto label28;

     label27:
        $r16 := @caughtexception;

        r31 = $r16;

     label28:
        exitmonitor r24;

     label29:
        throw r31;

     label30:
        $r21 := @caughtexception;

        r31 = $r21;

        goto label28;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch android.os.RemoteException from label14 to label15 with label23;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch android.os.RemoteException from label15 to label16 with label19;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label28 to label29 with label30;
    }

    public java.lang.String[] focusSearch(int, long, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        long l0, l3, l5;
        int i1, i2, i4, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r2;
        android.view.MagnificationSpec r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r4, $r6, $r9;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r5, $r10, $r12;
        com.android.server.accessibility.AccessibilityWindowManager $r7, $r8;
        android.view.accessibility.IAccessibilityInteractionConnection $r11, $r14, $r17, $r19;
        java.lang.String $r13;
        java.lang.Throwable $r15, $r16, $r20, r27;
        android.os.RemoteException $r18;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r21, r23;
        android.graphics.Region r22;
        java.lang.String[] r24;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i10 := @parameter0: int;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r21 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l3 := @parameter5: long;

        r22 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        i11 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int resolveAccessibilityWindowIdLocked(int)>(i10);

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i6 = interfaceinvoke $r4.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $z1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(int,com.android.server.accessibility.AbstractAccessibilityServiceConnection,int)>($i6, r0, i11);

        if $z1 != 0 goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        $r7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i7 = interfaceinvoke $r6.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        r2 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>($i7, i11);

     label06:
        if r2 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z2 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityWindowManager: boolean computePartialInteractiveRegionForWindowLocked(int,android.graphics.Region)>(i11, r22);

        if $z2 != 0 goto label11;

        virtualinvoke r22.<android.graphics.Region: void recycle()>();

     label10:
        r22 = null;

        goto label11;

     label11:
        $r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r3 = interfaceinvoke $r9.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>(i11);

        exitmonitor r1;

     label12:
        $r10 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z3 = virtualinvoke $r10.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z3 != 0 goto label13;

        return null;

     label13:
        i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r23 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.view.accessibility.IAccessibilityInteractionConnectionCallback replaceCallbackIfNeeded(android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,int,long)>(r21, i11, i2, i4, l3);

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        $r11 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $i8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        interfaceinvoke $r11.<android.view.accessibility.IAccessibilityInteractionConnection: void focusSearch(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>(l0, i1, r22, i2, r23, $i8, i4, l3, r3);

        $r12 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r13 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: java.lang.String getPackageName()>();

        $i9 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: int getUid()>();

        r24 = virtualinvoke $r12.<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String[] computeValidReportedPackages(java.lang.String,int)>($r13, $i9);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        if r22 == null goto label16;

        $r14 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z4 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r14);

        if $z4 == 0 goto label16;

        virtualinvoke r22.<android.graphics.Region: void recycle()>();

     label16:
        return r24;

     label17:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        if r22 == null goto label18;

        $r17 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z5 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r17);

        if $z5 == 0 goto label18;

        virtualinvoke r22.<android.graphics.Region: void recycle()>();

     label18:
        throw $r16;

     label19:
        $r18 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        if r22 == null goto label20;

        $r19 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        $z6 = staticinvoke <android.os.Binder: boolean isProxy(android.os.IInterface)>($r19);

        if $z6 == 0 goto label20;

        virtualinvoke r22.<android.graphics.Region: void recycle()>();

     label20:
        return null;

     label21:
        $r20 := @caughtexception;

        r27 = $r20;

        goto label23;

     label22:
        $r15 := @caughtexception;

        r27 = $r15;

     label23:
        exitmonitor r1;

     label24:
        throw r27;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch android.os.RemoteException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public int getCapabilities()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.accessibilityservice.AccessibilityServiceInfo $r1;
        int $i0;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i0 = virtualinvoke $r1.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        return $i0;
    }

    public android.content.ComponentName getComponentName()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.ComponentName mComponentName>;

        return $r1;
    }

    public float getMagnificationCenterX(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        java.lang.Object r1;
        boolean z0, $z1;
        long l1;
        float f0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.accessibility.MagnificationController r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return 0.0F;

     label03:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r6 = interfaceinvoke $r3.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.MagnificationController getMagnificationController()>();

     label04:
        z0 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean registerMagnificationIfNeeded(int,com.android.server.accessibility.MagnificationController)>(i0, r6);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        f0 = virtualinvoke r6.<com.android.server.accessibility.MagnificationController: float getCenterX(int)>(i0);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        if z0 == 0 goto label09;

     label08:
        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void unregister(int)>(i0);

     label09:
        exitmonitor r1;

     label10:
        return f0;

     label11:
        $r5 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        if z0 == 0 goto label15;

     label14:
        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void unregister(int)>(i0);

     label15:
        throw $r5;

     label16:
        $r4 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public float getMagnificationCenterY(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        java.lang.Object r1;
        boolean z0, $z1;
        long l1;
        float f0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.accessibility.MagnificationController r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return 0.0F;

     label03:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r6 = interfaceinvoke $r3.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.MagnificationController getMagnificationController()>();

     label04:
        z0 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean registerMagnificationIfNeeded(int,com.android.server.accessibility.MagnificationController)>(i0, r6);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        f0 = virtualinvoke r6.<com.android.server.accessibility.MagnificationController: float getCenterY(int)>(i0);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        if z0 == 0 goto label09;

     label08:
        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void unregister(int)>(i0);

     label09:
        exitmonitor r1;

     label10:
        return f0;

     label11:
        $r5 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        if z0 == 0 goto label15;

     label14:
        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void unregister(int)>(i0);

     label15:
        throw $r5;

     label16:
        $r4 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public android.graphics.Region getMagnificationRegion(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        java.lang.Object r1;
        boolean z0, $z1;
        long l1;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r2;
        java.lang.Throwable $r3, $r4;
        android.graphics.Region r5;
        com.android.server.accessibility.MagnificationController r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r5 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        $z1 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return r5;

     label03:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r6 = interfaceinvoke $r2.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.MagnificationController getMagnificationController()>();

     label04:
        z0 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean registerMagnificationIfNeeded(int,com.android.server.accessibility.MagnificationController)>(i0, r6);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void getMagnificationRegion(int,android.graphics.Region)>(i0, r5);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        if z0 == 0 goto label09;

     label08:
        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void unregister(int)>(i0);

     label09:
        exitmonitor r1;

     label10:
        return r5;

     label11:
        $r3 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        if z0 == 0 goto label15;

     label14:
        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void unregister(int)>(i0);

     label15:
        throw $r3;

     label16:
        $r4 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public float getMagnificationScale(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        java.lang.Object r1;
        long l1;
        float f0;
        boolean $z0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r2;
        com.android.server.accessibility.MagnificationController $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return 1.0F;

     label03:
        exitmonitor r1;

     label04:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $r3 = interfaceinvoke $r2.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.MagnificationController getMagnificationController()>();

        f0 = virtualinvoke $r3.<com.android.server.accessibility.MagnificationController: float getScale(int)>(i0);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return f0;

     label07:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.os.IBinder getOverlayWindowToken(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        java.lang.Object r1, $r3;
        android.util.SparseArray $r2;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mOverlayWindowTokens>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (android.os.IBinder) $r3;

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int getRelevantEventTypes()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean $z0;
        int $i0, $i1, i2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $z0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mUsesAccessibilityCache>;

        if $z0 == 0 goto label1;

        i2 = 4307005;

        goto label2;

     label1:
        i2 = 32;

     label2:
        $i0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mEventTypes>;

        $i1 = i2 | $i0;

        return $i1;
    }

    public android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.accessibilityservice.AccessibilityServiceInfo r3;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List getSystemActions()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.accessibility.SystemActionPerformer $r2;
        java.util.List $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label3;

        r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r1;

     label2:
        return r5;

     label3:
        exitmonitor r1;

     label4:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer>;

        $r3 = virtualinvoke $r2.<com.android.server.accessibility.SystemActionPerformer: java.util.List getSystemActions()>();

        return $r3;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.view.accessibility.AccessibilityWindowInfo getWindow(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, $i1, $i2, i3;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2, $r3;
        com.android.server.accessibility.AccessibilityWindowManager $r4, $r6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r5;
        java.lang.Throwable $r7;
        android.view.accessibility.AccessibilityWindowInfo r8, r9;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

        i3 = -1;

        if i0 == -1 goto label02;

     label01:
        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i2 = interfaceinvoke $r5.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        i3 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityWindowManager: int getDisplayIdByUserIdAndWindowIdLocked(int,int)>($i2, i0);

     label02:
        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void ensureWindowsAvailableTimedLocked(int)>(i3);

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label04;

        exitmonitor r1;

     label03:
        return null;

     label04:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRetrieveWindowsLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 != 0 goto label06;

        exitmonitor r1;

     label05:
        return null;

     label06:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z2 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z2 != 0 goto label08;

        exitmonitor r1;

     label07:
        return null;

     label08:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r8 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)>(i0);

     label09:
        if r8 == null goto label12;

     label10:
        r9 = staticinvoke <android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>(r8);

        $i1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mId>;

        virtualinvoke r9.<android.view.accessibility.AccessibilityWindowInfo: void setConnectionId(int)>($i1);

        exitmonitor r1;

     label11:
        return r9;

     label12:
        exitmonitor r1;

     label13:
        return null;

     label14:
        $r7 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public int getWindowIdForLeashToken(android.os.IBinder)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        java.lang.Object r1;
        int i0;
        com.android.server.accessibility.AccessibilityWindowManager $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        i0 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: int getWindowIdLocked(android.os.IBinder)>(r4);

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray getWindows()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        java.lang.Object r1, $r7;
        android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray r2;
        java.util.ArrayList r3;
        int i0, i1, i2;
        boolean $z0, $z1, $z2;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r4, $r5;
        com.android.server.accessibility.AccessibilityWindowManager $r6;
        java.lang.Integer $r8;
        java.lang.Throwable $r9;
        java.util.List r10;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRetrieveWindowsLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 != 0 goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z2 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z2 != 0 goto label07;

        exitmonitor r1;

     label06:
        return null;

     label07:
        r2 = new android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray;

        specialinvoke r2.<android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray: void <init>()>();

        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r3 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityWindowManager: java.util.ArrayList getDisplayListLocked()>();

        i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();

     label08:
        if i0 <= 0 goto label14;

        i2 = 0;

     label09:
        if i2 >= i0 goto label14;

     label10:
        $r7 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r8 = (java.lang.Integer) $r7;

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void ensureWindowsAvailableTimedLocked(int)>(i1);

        r10 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.util.List getWindowsByDisplayLocked(int)>(i1);

     label11:
        if r10 == null goto label13;

     label12:
        virtualinvoke r2.<android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray: void put(int,java.lang.Object)>(i1, r10);

     label13:
        i2 = i2 + 1;

        goto label09;

     label14:
        exitmonitor r1;

     label15:
        return r2;

     label16:
        $r9 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    protected abstract boolean hasRightsToCurrentUserLocked();

    public boolean isConnectedLocked()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.os.IBinder $r1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isFingerprintGestureDetectionAvailable()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        com.android.server.accessibility.FingerprintGestureDispatcher r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        boolean $z1, $z2, z3, z4;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r4;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z3 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.fingerprint");

        if z3 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean isCapturingFingerprintGestures()>();

        if $z1 == 0 goto label3;

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r1 = interfaceinvoke $r4.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.FingerprintGestureDispatcher getFingerprintGestureDispatcher()>();

        z4 = 0;

        if r1 == null goto label2;

        z4 = 0;

        $z2 = virtualinvoke r1.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean isFingerprintGestureDetectionAvailable()>();

        if $z2 == 0 goto label2;

        z4 = 1;

     label2:
        return z4;

     label3:
        return 0;
    }

    public boolean isMagnificationCallbackEnabled(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        $z0 = virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: boolean isMagnificationCallbackEnabled(int)>(i0);

        return $z0;
    }

    public boolean isMultiFingerGesturesEnabled()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $z0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRequestMultiFingerGestures>;

        return $z0;
    }

    public boolean isServiceHandlesDoubleTapEnabled()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $z0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mServiceHandlesDoubleTap>;

        return $z0;
    }

    public void lambda$takeScreenshot$0$AbstractAccessibilityServiceConnection(int, android.os.RemoteCallback, java.lang.Object)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.os.RemoteCallback r1;
        java.lang.Object $r2, r4;
        android.hardware.display.DisplayManagerInternal $r3;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r5;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.RemoteCallback;

        r4 := @parameter2: java.lang.Object;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r3 = (android.hardware.display.DisplayManagerInternal) $r2;

        r5 = virtualinvoke $r3.<android.hardware.display.DisplayManagerInternal: android.view.SurfaceControl$ScreenshotGraphicBuffer userScreenshot(int)>(i0);

        if r5 == null goto label1;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void sendScreenshotSuccess(android.view.SurfaceControl$ScreenshotGraphicBuffer,android.os.RemoteCallback)>(r5, r1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void sendScreenshotFailure(int,android.os.RemoteCallback)>(4, r1);

     label2:
        return;
    }

    public void notifyAccessibilityButtonAvailabilityChangedLocked(boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean z0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: void notifyAccessibilityButtonAvailabilityChangedLocked(boolean)>(z0);

        return;
    }

    public void notifyAccessibilityButtonClickedLocked(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: void notifyAccessibilityButtonClickedLocked(int)>(i0);

        return;
    }

    public void notifyAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        java.lang.Object r1, $r7;
        int i0, $i5;
        boolean z0, z1, $z2, z4;
        android.view.accessibility.AccessibilityEvent r2, r12, r13;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r3;
        long $l2, $l4;
        byte $b3, b6;
        android.os.Handler $r4, $r5, $r9, $r10;
        android.util.SparseArray $r6, $r8;
        java.lang.Throwable $r11;
        android.os.Message r14;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r12 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i0 = virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        z0 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean wantsEventLocked(android.view.accessibility.AccessibilityEvent)>(r12);

        z1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mUsesAccessibilityCache>;

     label02:
        if z1 == 0 goto label03;

        $i5 = 4307005 & i0;

        if $i5 == 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        if z0 != 0 goto label07;

        if z4 != 0 goto label07;

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z2 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z2 != 0 goto label09;

        exitmonitor r1;

     label08:
        return;

     label09:
        r13 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>(r12);

        $l2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: long mNotificationTimeout>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label16;

     label10:
        if i0 == 2048 goto label16;

     label11:
        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mPendingEvents>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.view.accessibility.AccessibilityEvent) $r7;

        $r8 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r13);

     label12:
        if r2 == null goto label14;

     label13:
        $r10 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mEventDispatchHandler>;

        virtualinvoke $r10.<android.os.Handler: void removeMessages(int)>(i0);

        virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label14:
        $r9 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mEventDispatchHandler>;

        r14 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int)>(i0);

     label15:
        goto label17;

     label16:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mEventDispatchHandler>;

        r14 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(i0, r13);

     label17:
        if z0 == 0 goto label18;

        b6 = 1;

        goto label19;

     label18:
        b6 = 0;

     label19:
        r14.<android.os.Message: int arg1> = b6;

        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mEventDispatchHandler>;

        $l4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: long mNotificationTimeout>;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r14, $l4);

     label20:
        exitmonitor r1;

     label21:
        return;

     label22:
        $r11 := @caughtexception;

     label23:
        exitmonitor r1;

     label24:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public void notifyClearAccessibilityNodeInfoCache()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: boolean sendEmptyMessage(int)>(2);

        return;
    }

    public void notifyGesture(android.accessibilityservice.AccessibilityGestureEvent)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.accessibilityservice.AccessibilityGestureEvent r1;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 := @parameter0: android.accessibilityservice.AccessibilityGestureEvent;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyMagnificationChangedLocked(int, android.graphics.Region, float, float, float)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.graphics.Region r1;
        float f0, f1, f2;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r2.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: void notifyMagnificationChangedLocked(int,android.graphics.Region,float,float,float)>(i0, r1, f0, f1, f2);

        return;
    }

    public void notifySoftKeyboardShowModeChangedLocked(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: void notifySoftKeyboardShowModeChangedLocked(int)>(i0);

        return;
    }

    public void notifySystemActionsChangedLocked()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: boolean sendEmptyMessage(int)>(9);

        return;
    }

    public void onAdded()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.view.Display[] r1;
        android.hardware.display.DisplayManager $r2;
        int $i0, $i1, i2;
        android.view.Display $r3;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.hardware.display.DisplayManager mDisplayManager>;

        r1 = virtualinvoke $r2.<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label2;

        $r3 = r1[i2];

        $i1 = virtualinvoke $r3.<android.view.Display: int getDisplayId()>();

        virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void onDisplayAdded(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void onDisplayAdded(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        long l1;
        com.android.server.wm.WindowManagerInternal $r1;
        android.util.SparseArray $r2;
        java.lang.Throwable $r3, $r4;
        android.os.Binder r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r5 = new android.os.Binder;

        specialinvoke r5.<android.os.Binder: void <init>()>();

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerInternal: void addWindowToken(android.os.IBinder,int,int)>(r5, 2032, i0);

        r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r6;

     label2:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mOverlayWindowTokens>;

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5);

        exitmonitor r6;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r6;

     label6:
        throw $r4;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void onDisplayRemoved(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        long l1;
        java.lang.Object r1, $r4;
        android.util.SparseArray $r2, $r6;
        com.android.server.wm.WindowManagerInternal $r3;
        android.os.IBinder $r5;
        java.lang.Throwable $r7, $r8;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mOverlayWindowTokens>;

        $r4 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = (android.os.IBinder) $r4;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerInternal: void removeWindowToken(android.os.IBinder,boolean,int)>($r5, 1, i0);

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.util.SparseArray mOverlayWindowTokens>;

        virtualinvoke $r6.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public boolean onKeyEvent(android.view.KeyEvent, int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        android.accessibilityservice.IAccessibilityServiceClient $r1, $r4;
        android.accessibilityservice.AccessibilityServiceInfo $r2;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r3;
        android.os.RemoteException $r5;
        android.view.KeyEvent r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r6 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRequestFilterKeyEvents>;

        if $z0 == 0 goto label6;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        if $r1 != null goto label1;

        goto label6;

     label1:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i1 = virtualinvoke $r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i2 = $i1 & 8;

        if $i2 != 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        interfaceinvoke $r4.<android.accessibilityservice.IAccessibilityServiceClient: void onKeyEvent(android.view.KeyEvent,int)>(r6, i0);

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        return 0;

     label6:
        return 0;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void onRemoved()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.view.Display[] r1;
        android.hardware.display.DisplayManager $r2;
        int $i0, $i1, i2;
        android.view.Display $r3;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.hardware.display.DisplayManager mDisplayManager>;

        r1 = virtualinvoke $r2.<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label2;

        $r3 = r1[i2];

        $i1 = virtualinvoke $r3.<android.view.Display: int getDisplayId()>();

        virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void onDisplayRemoved(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean performAccessibilityAction(int, long, int, android.os.Bundle, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        long l0, l3;
        int i1, i2, $i4, $i5, $i6, i7, i8;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r1;
        java.lang.Object r2;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r3, $r6;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r4, $r5;
        java.lang.Throwable $r7;
        android.os.Bundle r8;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i7 := @parameter0: int;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r8 := @parameter3: android.os.Bundle;

        i2 := @parameter4: int;

        r1 := @parameter5: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l3 := @parameter6: long;

        r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r2;

     label02:
        return 0;

     label03:
        i8 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int resolveAccessibilityWindowIdLocked(int)>(i7);

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i4 = interfaceinvoke $r3.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $z1 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(int,com.android.server.accessibility.AbstractAccessibilityServiceConnection,int)>($i4, r0, i8);

        if $z1 != 0 goto label05;

        exitmonitor r2;

     label04:
        return 0;

     label05:
        exitmonitor r2;

     label06:
        $r5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z2 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z2 != 0 goto label07;

        return 0;

     label07:
        $r6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $i5 = interfaceinvoke $r6.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: int getCurrentUserIdLocked()>();

        $i6 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        $z3 = specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean performAccessibilityActionInternal(int,int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>($i5, i8, l0, i1, r8, i2, r1, $i6, l3);

        return $z3;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean performGlobalAction(int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1;
        com.android.server.accessibility.SystemActionPerformer $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        exitmonitor r1;

     label4:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer>;

        $z1 = virtualinvoke $r3.<com.android.server.accessibility.SystemActionPerformer: boolean performSystemAction(int)>(i0);

        return $z1;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void resetLocked()
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r1;
        com.android.server.accessibility.KeyEventDispatcher $r2;
        android.accessibilityservice.IAccessibilityServiceClient $r3, $r4;
        int $i0;
        android.os.RemoteException $r5;
        android.os.IBinder r7;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $r2 = interfaceinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.KeyEventDispatcher getKeyEventDispatcher()>();

        virtualinvoke $r2.<com.android.server.accessibility.KeyEventDispatcher: void flush(com.android.server.accessibility.KeyEventDispatcher$KeyEventFilter)>(r0);

     label1:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        $i0 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mId>;

        interfaceinvoke $r4.<android.accessibilityservice.IAccessibilityServiceClient: void init(android.accessibilityservice.IAccessibilityServiceConnection,int,android.os.IBinder)>(null, $i0, null);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        r7 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService>;

        if r7 == null goto label5;

        interfaceinvoke r7.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.IBinder mService> = null;

     label5:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface> = null;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mReceivedAccessibilityButtonCallbackSinceBind> = 0;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean resetMagnification(int, boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        java.lang.Object r1;
        long l1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        boolean $z1, $z2, z3, z4, z5, z6;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.accessibility.MagnificationController r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        z3 := @parameter1: boolean;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        z4 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

     label02:
        if z4 != 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0;

     label05:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canControlMagnification(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 != 0 goto label07;

        exitmonitor r1;

     label06:
        return 0;

     label07:
        exitmonitor r1;

     label08:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r6 = interfaceinvoke $r3.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.MagnificationController getMagnificationController()>();

        $z2 = virtualinvoke r6.<com.android.server.accessibility.MagnificationController: boolean reset(int,boolean)>(i0, z3);

        if $z2 != 0 goto label11;

        z5 = virtualinvoke r6.<com.android.server.accessibility.MagnificationController: boolean isMagnifying(int)>(i0);

     label10:
        z6 = 0;

        if z5 != 0 goto label12;

     label11:
        z6 = 1;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z6;

     label13:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

     label14:
        $r5 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void sendGesture(int, android.content.pm.ParceledListSlice)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.content.pm.ParceledListSlice r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.ParceledListSlice;

        return;
    }

    public void setDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.accessibilityservice.AccessibilityServiceInfo r1;
        java.lang.String[] r2;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        long $l3;
        boolean $z1, z3, z4, z5, z6, z7, z8, z9, z10;
        java.util.Set $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        $i1 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int eventTypes>;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mEventTypes> = $i1;

        $i2 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int feedbackType>;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFeedbackType> = $i2;

        r2 = r1.<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String[] packageNames>;

        if r2 == null goto label01;

        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.util.Set mPackageNames>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label01:
        $l3 = r1.<android.accessibilityservice.AccessibilityServiceInfo: long notificationTimeout>;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: long mNotificationTimeout> = $l3;

        i0 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i4 = i0 & 1;

        if $i4 == 0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mIsDefault> = z3;

        $z1 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean supportsFlagForNotImportantViews(android.accessibilityservice.AccessibilityServiceInfo)>(r1);

        if $z1 == 0 goto label05;

        $i23 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i24 = $i23 & 2;

        if $i24 == 0 goto label04;

        $i27 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        $i28 = $i27 | 8;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags> = $i28;

        goto label05;

     label04:
        $i25 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        $i26 = $i25 & -9;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags> = $i26;

     label05:
        $i29 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i30 = $i29 & 16;

        if $i30 == 0 goto label06;

        $i21 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        $i22 = $i21 | 16;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags> = $i22;

        goto label07;

     label06:
        $i5 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags>;

        $i6 = $i5 & -17;

        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mFetchFlags> = $i6;

     label07:
        $i7 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i8 = $i7 & 4;

        if $i8 == 0 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRequestTouchExplorationMode> = z4;

        $i9 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i10 = $i9 & 2048;

        if $i10 == 0 goto label10;

        z5 = 1;

        goto label11;

     label10:
        z5 = 0;

     label11:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mServiceHandlesDoubleTap> = z5;

        $i11 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i12 = $i11 & 4096;

        if $i12 == 0 goto label12;

        z6 = 1;

        goto label13;

     label12:
        z6 = 0;

     label13:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRequestMultiFingerGestures> = z6;

        $i13 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i14 = $i13 & 32;

        if $i14 == 0 goto label14;

        z7 = 1;

        goto label15;

     label14:
        z7 = 0;

     label15:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRequestFilterKeyEvents> = z7;

        $i15 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i16 = $i15 & 64;

        if $i16 == 0 goto label16;

        z8 = 1;

        goto label17;

     label16:
        z8 = 0;

     label17:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRetrieveInteractiveWindows> = z8;

        $i17 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i18 = $i17 & 512;

        if $i18 == 0 goto label18;

        z9 = 1;

        goto label19;

     label18:
        z9 = 0;

     label19:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mCaptureFingerprintGestures> = z9;

        $i19 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i20 = $i19 & 256;

        if $i20 == 0 goto label20;

        z10 = 1;

        goto label21;

     label20:
        z10 = 0;

     label21:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRequestAccessibilityButton> = z10;

        return;
    }

    public void setGestureDetectionPassthroughRegion(int, android.graphics.Region)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.graphics.Region r1;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        interfaceinvoke $r2.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: void setGestureDetectionPassthroughRegion(int,android.graphics.Region)>(i0, r1);

        return;
    }

    public void setMagnificationCallbackEnabled(int, boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        boolean z0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: void setMagnificationCallbackEnabled(int,boolean)>(i0, z0);

        return;
    }

    public boolean setMagnificationScaleAndCenter(int, float, float, float, boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, $i2;
        float f0, f1, f2;
        java.lang.Object r1;
        long l1;
        boolean $z0, $z1, $z2, z3, z4;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.accessibility.MagnificationController r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        z3 := @parameter4: boolean;

        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canControlMagnification(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 != 0 goto label05;

        exitmonitor r1;

     label04:
        return 0;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        r6 = interfaceinvoke $r3.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.MagnificationController getMagnificationController()>();

        $z2 = virtualinvoke r6.<com.android.server.accessibility.MagnificationController: boolean isRegistered(int)>(i0);

        if $z2 != 0 goto label07;

        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void register(int)>(i0);

     label07:
        $i2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int mId>;

        z4 = virtualinvoke r6.<com.android.server.accessibility.MagnificationController: boolean setScaleAndCenter(int,float,float,float,boolean,int)>(i0, f0, f1, f2, z3, $i2);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r1;

     label09:
        return z4;

     label10:
        $r5 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label12:
        throw $r5;

     label13:
        $r4 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setOnKeyEventResult(boolean, int)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean z0;
        int i0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r1;
        com.android.server.accessibility.KeyEventDispatcher $r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        $r2 = interfaceinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: com.android.server.accessibility.KeyEventDispatcher getKeyEventDispatcher()>();

        virtualinvoke $r2.<com.android.server.accessibility.KeyEventDispatcher: void setOnKeyEventResult(com.android.server.accessibility.KeyEventDispatcher$KeyEventFilter,boolean,int)>(r0, z0, i0);

        return;
    }

    public void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        long l0;
        java.lang.Object r1;
        android.accessibilityservice.AccessibilityServiceInfo r2, r7;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r3;
        com.android.internal.compat.IPlatformCompat $r4;
        java.lang.Throwable $r5, $r6;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r7 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

     label03:
        if r2 == null goto label06;

     label04:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.internal.compat.IPlatformCompat mIPlatformCompat>;

        virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: void updateDynamicallyConfigurableProperties(com.android.internal.compat.IPlatformCompat,android.accessibilityservice.AccessibilityServiceInfo)>($r4, r7);

        virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void setDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)>(r2);

     label05:
        goto label07;

     label06:
        virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void setDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)>(r7);

     label07:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        interfaceinvoke $r3.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: void onClientChangeLocked(boolean)>(1);

        exitmonitor r1;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

     label12:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void setSoftKeyboardCallbackEnabled(boolean)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        boolean z0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler $r1;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler mInvocationHandler>;

        virtualinvoke $r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$InvocationHandler: void setSoftKeyboardCallbackEnabled(boolean)>(z0);

        return;
    }

    public void setTouchExplorationPassthroughRegion(int, android.graphics.Region)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0;
        android.graphics.Region r1;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport $r2;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport mSystemSupport>;

        interfaceinvoke $r2.<com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport: void setTouchExplorationPassthroughRegion(int,android.graphics.Region)>(i0, r1);

        return;
    }

    protected boolean supportsFlagForNotImportantViews(android.accessibilityservice.AccessibilityServiceInfo)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        android.accessibilityservice.AccessibilityServiceInfo r1;
        android.content.pm.ResolveInfo $r2;
        android.content.pm.ServiceInfo $r3;
        android.content.pm.ApplicationInfo $r4;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        r1 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        $r2 = virtualinvoke r1.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r3 = $r2.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r4 = $r3.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 16 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void takeScreenshot(int, android.os.RemoteCallback)
    {
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r0;
        int i0, $i3, $i4, $i5;
        long l1, $l6, l8, l9;
        android.os.Handler r1;
        byte $b2, $b7;
        boolean $z0, $z1, $z2;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2, $r3;
        android.content.Context $r4;
        java.lang.Object $r5, r12;
        android.hardware.display.DisplayManager $r6;
        com.android.internal.util.function.pooled.PooledRunnable $r7, $r8;
        java.lang.Throwable $r9, $r10;
        android.os.RemoteCallback r11;
        android.view.Display r13;
        com.android.server.accessibility._$$Lambda$AbstractAccessibilityServiceConnection$2KWbrhNaPTRK49IzRgPA_muj7Go r14;
        java.lang.SecurityException r16;

        r0 := @this: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 := @parameter0: int;

        r11 := @parameter1: android.os.RemoteCallback;

        l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: long mRequestTakeScreenshotTimestampMs>;

        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label01;

        $l6 = l8 - l1;

        $b7 = $l6 cmp 1000L;

        if $b7 > 0 goto label01;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void sendScreenshotFailure(int,android.os.RemoteCallback)>(3, r11);

        return;

     label01:
        r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: long mRequestTakeScreenshotTimestampMs> = l8;

        r12 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.Object mLock>;

        entermonitor r12;

     label02:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean hasRightsToCurrentUserLocked()>();

        if $z0 != 0 goto label04;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void sendScreenshotFailure(int,android.os.RemoteCallback)>(1, r11);

        exitmonitor r12;

     label03:
        return;

     label04:
        $r2 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canTakeScreenshotLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z1 == 0 goto label12;

        exitmonitor r12;

     label05:
        $r3 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z2 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r0);

        if $z2 != 0 goto label06;

        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void sendScreenshotFailure(int,android.os.RemoteCallback)>(2, r11);

        return;

     label06:
        $r4 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r6 = (android.hardware.display.DisplayManager) $r5;

        r13 = virtualinvoke $r6.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        if r13 == null goto label11;

        $i3 = virtualinvoke r13.<android.view.Display: int getType()>();

        if $i3 != 5 goto label07;

        $i4 = virtualinvoke r13.<android.view.Display: int getFlags()>();

        $i5 = $i4 & 4;

        if $i5 == 0 goto label07;

        goto label11;

     label07:
        l9 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        r1 = r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.os.Handler mMainHandler>;

        r14 = new com.android.server.accessibility._$$Lambda$AbstractAccessibilityServiceConnection$2KWbrhNaPTRK49IzRgPA_muj7Go;

        specialinvoke r14.<com.android.server.accessibility._$$Lambda$AbstractAccessibilityServiceConnection$2KWbrhNaPTRK49IzRgPA_muj7Go: void <init>(com.android.server.accessibility.AbstractAccessibilityServiceConnection,int,android.os.RemoteCallback)>(r0, i0, r11);

        $r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(java.util.function.Consumer,java.lang.Object)>(r14, null);

        $r8 = interfaceinvoke $r7.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        virtualinvoke r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r8);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

        return;

     label10:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

        throw $r10;

     label11:
        specialinvoke r0.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: void sendScreenshotFailure(int,android.os.RemoteCallback)>(4, r11);

        return;

     label12:
        r16 = new java.lang.SecurityException;

        specialinvoke r16.<java.lang.SecurityException: void <init>(java.lang.String)>("Services don\'t have the capability of taking the screenshot.");

        throw r16;

     label13:
        $r9 := @caughtexception;

     label14:
        exitmonitor r12;

     label15:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.AbstractAccessibilityServiceConnection: int WAIT_WINDOWS_TIMEOUT_MILLIS> = 5000;

        <com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.String TAKE_SCREENSHOT> = "takeScreenshot";

        <com.android.server.accessibility.AbstractAccessibilityServiceConnection: java.lang.String LOG_TAG> = "AbstractAccessibilityServiceConnection";

        <com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean DEBUG> = 0;

        return;
    }
}
