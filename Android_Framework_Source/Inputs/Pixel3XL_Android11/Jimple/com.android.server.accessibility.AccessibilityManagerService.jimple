public class com.android.server.accessibility.AccessibilityManagerService extends android.view.accessibility.IAccessibilityManager$Stub implements com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport, com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener, com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender, com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager, com.android.server.accessibility.SystemActionPerformer$SystemActionsChangedListener
{
    private static final char COMPONENT_NAME_SEPARATOR;
    private static final boolean DEBUG;
    static final java.lang.String FUNCTION_REGISTER_SYSTEM_ACTION;
    private static final java.lang.String FUNCTION_REGISTER_UI_TEST_AUTOMATION_SERVICE;
    static final java.lang.String FUNCTION_UNREGISTER_SYSTEM_ACTION;
    private static final java.lang.String GET_WINDOW_TOKEN;
    private static final java.lang.String LOG_TAG;
    public static final int MAGNIFICATION_GESTURE_HANDLER_ID;
    private static final int OWN_PROCESS_ID;
    private static final java.lang.String SET_PIP_ACTION_REPLACEMENT;
    private static final java.lang.String TEMPORARY_ENABLE_ACCESSIBILITY_UNTIL_KEYGUARD_REMOVED;
    private static final int WAIT_FOR_USER_STATE_FULLY_INITIALIZED_MILLIS;
    private static final int WAIT_MOTION_INJECTOR_TIMEOUT_MILLIS;
    private static int sIdCounter;
    private final com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener mA11yDisplayListener;
    private final com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager;
    private final com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerService;
    private final android.content.Context mContext;
    private int mCurrentUserId;
    private android.app.AlertDialog mEnableTouchExplorationDialog;
    private com.android.server.accessibility.FingerprintGestureDispatcher mFingerprintGestureDispatcher;
    private final android.os.RemoteCallbackList mGlobalClients;
    private boolean mHasInputFilter;
    private boolean mInitialized;
    private com.android.server.accessibility.AccessibilityInputFilter mInputFilter;
    private com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge;
    private boolean mIsAccessibilityButtonShown;
    private com.android.server.accessibility.KeyEventDispatcher mKeyEventDispatcher;
    private final java.lang.Object mLock;
    private com.android.server.accessibility.MagnificationController mMagnificationController;
    private final com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler;
    private android.util.SparseArray mMotionEventInjectors;
    private final android.content.pm.PackageManager mPackageManager;
    private final android.os.PowerManager mPowerManager;
    private final com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy;
    private final android.text.TextUtils$SimpleStringSplitter mStringColonSplitter;
    private com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer;
    private final java.util.List mTempAccessibilityServiceInfoList;
    private final java.util.Set mTempComponentNameSet;
    private final android.util.IntArray mTempIntArray;
    private android.graphics.Point mTempPoint;
    private final android.graphics.Rect mTempRect;
    private final android.graphics.Rect mTempRect1;
    private final com.android.server.accessibility.UiAutomationManager mUiAutomationManager;
    private final android.util.SparseArray mUserStates;
    private com.android.server.accessibility.magnification.WindowMagnificationManager mWindowMagnificationMgr;
    private final com.android.server.wm.WindowManagerInternal mWindowManagerService;

    static void <clinit>()
    {
        int $i0;

        <com.android.server.accessibility.AccessibilityManagerService: int WAIT_MOTION_INJECTOR_TIMEOUT_MILLIS> = 1000;

        <com.android.server.accessibility.AccessibilityManagerService: int WAIT_FOR_USER_STATE_FULLY_INITIALIZED_MILLIS> = 3000;

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String TEMPORARY_ENABLE_ACCESSIBILITY_UNTIL_KEYGUARD_REMOVED> = "temporaryEnableAccessibilityStateUntilKeyguardRemoved";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String SET_PIP_ACTION_REPLACEMENT> = "setPictureInPictureActionReplacingConnection";

        <com.android.server.accessibility.AccessibilityManagerService: int MAGNIFICATION_GESTURE_HANDLER_ID> = 0;

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String LOG_TAG> = "AccessibilityManagerService";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String GET_WINDOW_TOKEN> = "getWindowToken";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String FUNCTION_UNREGISTER_SYSTEM_ACTION> = "unregisterSystemAction";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String FUNCTION_REGISTER_UI_TEST_AUTOMATION_SERVICE> = "registerUiTestAutomationService";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String FUNCTION_REGISTER_SYSTEM_ACTION> = "registerSystemAction";

        <com.android.server.accessibility.AccessibilityManagerService: boolean DEBUG> = 0;

        <com.android.server.accessibility.AccessibilityManagerService: char COMPONENT_NAME_SEPARATOR> = 58;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        <com.android.server.accessibility.AccessibilityManagerService: int OWN_PROCESS_ID> = $i0;

        <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter> = 1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object $r1, $r11, $r13, $r15, $r20, $r29;
        android.text.TextUtils$SimpleStringSplitter $r2;
        android.graphics.Rect $r3, $r4;
        java.util.HashSet $r5;
        java.util.ArrayList $r6;
        android.util.IntArray $r7;
        android.os.RemoteCallbackList $r8;
        android.util.SparseArray $r9;
        com.android.server.accessibility.UiAutomationManager $r10;
        android.graphics.Point $r12;
        android.os.PowerManager $r14;
        com.android.server.wm.WindowManagerInternal $r16, $r27;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r17, $r28, $r31;
        android.content.Context $r18, $r22, $r25, $r32, r33;
        android.os.Looper $r19;
        com.android.server.wm.ActivityTaskManagerInternal $r21;
        android.content.pm.PackageManager $r23;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r24;
        com.android.server.accessibility.AccessibilityWindowManager $r26;
        com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener $r30;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r33 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.accessibility.IAccessibilityManager$Stub: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock> = $r1;

        $r2 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r2.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(58);

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.text.TextUtils$SimpleStringSplitter mStringColonSplitter> = $r2;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect> = $r3;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect1> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList> = $r6;

        $r7 = new android.util.IntArray;

        specialinvoke $r7.<android.util.IntArray: void <init>(int)>(0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.IntArray mTempIntArray> = $r7;

        $r8 = new android.os.RemoteCallbackList;

        specialinvoke $r8.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients> = $r8;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates> = $r9;

        $r10 = new com.android.server.accessibility.UiAutomationManager;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        specialinvoke $r10.<com.android.server.accessibility.UiAutomationManager: void <init>(java.lang.Object)>($r11);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager> = $r10;

        r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId> = 0;

        $r12 = new android.graphics.Point;

        specialinvoke $r12.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Point mTempPoint> = $r12;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext> = r33;

        $r13 = virtualinvoke r33.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r14 = (android.os.PowerManager) $r13;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.PowerManager mPowerManager> = $r14;

        $r15 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r16 = (com.android.server.wm.WindowManagerInternal) $r15;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService> = $r16;

        $r17 = new com.android.server.accessibility.AccessibilityManagerService$MainHandler;

        $r18 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r17.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Looper)>(r0, $r19);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler> = $r17;

        $r20 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r21 = (com.android.server.wm.ActivityTaskManagerInternal) $r20;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerService> = $r21;

        $r22 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager> = $r23;

        $r24 = new com.android.server.accessibility.AccessibilitySecurityPolicy;

        $r25 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke $r24.<com.android.server.accessibility.AccessibilitySecurityPolicy: void <init>(android.content.Context,com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager)>($r25, r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy> = $r24;

        $r26 = new com.android.server.accessibility.AccessibilityWindowManager;

        $r29 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        $r28 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r27 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        specialinvoke $r26.<com.android.server.accessibility.AccessibilityWindowManager: void <init>(java.lang.Object,android.os.Handler,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager)>($r29, $r28, $r27, r0, $r24, r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager> = $r26;

        $r30 = new com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener;

        $r32 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r31 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        specialinvoke $r30.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.content.Context,com.android.server.accessibility.AccessibilityManagerService$MainHandler)>(r0, $r32, $r31);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener mA11yDisplayListener> = $r30;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void init()>();

        return;
    }

    void <init>(android.content.Context, android.content.pm.PackageManager, com.android.server.accessibility.AccessibilitySecurityPolicy, com.android.server.accessibility.SystemActionPerformer, com.android.server.accessibility.AccessibilityWindowManager, com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.Context r1, $r24;
        android.content.pm.PackageManager r2;
        com.android.server.accessibility.AccessibilitySecurityPolicy r3;
        com.android.server.accessibility.SystemActionPerformer r4;
        com.android.server.accessibility.AccessibilityWindowManager r5;
        com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener r6;
        java.lang.Object $r7, $r17, $r19, $r21, $r26;
        android.text.TextUtils$SimpleStringSplitter $r8;
        android.graphics.Rect $r9, $r10;
        java.util.HashSet $r11;
        java.util.ArrayList $r12;
        android.util.IntArray $r13;
        android.os.RemoteCallbackList $r14;
        android.util.SparseArray $r15;
        com.android.server.accessibility.UiAutomationManager $r16;
        android.graphics.Point $r18;
        android.os.PowerManager $r20;
        com.android.server.wm.WindowManagerInternal $r22;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r23;
        android.os.Looper $r25;
        com.android.server.wm.ActivityTaskManagerInternal $r27;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.PackageManager;

        r3 := @parameter2: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r4 := @parameter3: com.android.server.accessibility.SystemActionPerformer;

        r5 := @parameter4: com.android.server.accessibility.AccessibilityWindowManager;

        r6 := @parameter5: com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener;

        specialinvoke r0.<android.view.accessibility.IAccessibilityManager$Stub: void <init>()>();

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock> = $r7;

        $r8 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r8.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(58);

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.text.TextUtils$SimpleStringSplitter mStringColonSplitter> = $r8;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect> = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect1> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList> = $r12;

        $r13 = new android.util.IntArray;

        specialinvoke $r13.<android.util.IntArray: void <init>(int)>(0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.IntArray mTempIntArray> = $r13;

        $r14 = new android.os.RemoteCallbackList;

        specialinvoke $r14.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients> = $r14;

        $r15 = new android.util.SparseArray;

        specialinvoke $r15.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates> = $r15;

        $r16 = new com.android.server.accessibility.UiAutomationManager;

        $r17 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        specialinvoke $r16.<com.android.server.accessibility.UiAutomationManager: void <init>(java.lang.Object)>($r17);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager> = $r16;

        r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId> = 0;

        $r18 = new android.graphics.Point;

        specialinvoke $r18.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Point mTempPoint> = $r18;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext> = r1;

        $r19 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r20 = (android.os.PowerManager) $r19;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.PowerManager mPowerManager> = $r20;

        $r21 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r22 = (com.android.server.wm.WindowManagerInternal) $r21;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService> = $r22;

        $r23 = new com.android.server.accessibility.AccessibilityManagerService$MainHandler;

        $r24 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r25 = virtualinvoke $r24.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r23.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Looper)>(r0, $r25);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler> = $r23;

        $r26 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r27 = (com.android.server.wm.ActivityTaskManagerInternal) $r26;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerService> = $r27;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager> = r2;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy> = r3;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer> = r4;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager> = r5;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener mA11yDisplayListener> = r6;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void init()>();

        return;
    }

    static void access$000(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onBootPhase(int)>(i0);

        return;
    }

    static java.lang.Object access$100(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static void access$1000(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void removeUser(int)>(i0);

        return;
    }

    static void access$1100(com.android.server.accessibility.AccessibilityManagerService, java.lang.String, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void restoreLegacyDisplayMagnificationNavBarIfNeededLocked(java.lang.String,int)>(r1, i0);

        return;
    }

    static android.content.Context access$1300(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$1400(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        return $z0;
    }

    static com.android.server.accessibility.AccessibilityInputFilter access$1500(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityInputFilter $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        return $r1;
    }

    static int access$1608()
    {
        int i0, $i1;

        i0 = <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter>;

        $i1 = i0 + 1;

        <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter> = $i1;

        return i0;
    }

    static com.android.server.accessibility.AccessibilityManagerService$MainHandler access$1700(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        return $r1;
    }

    static com.android.server.accessibility.AccessibilitySecurityPolicy access$1800(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        return $r1;
    }

    static com.android.server.wm.WindowManagerInternal access$1900(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.wm.WindowManagerInternal $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        return $r1;
    }

    static int access$200(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        return $i0;
    }

    static com.android.server.accessibility.SystemActionPerformer access$2000(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.SystemActionPerformer $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer getSystemActionPerformer()>();

        return $r1;
    }

    static com.android.server.accessibility.AccessibilityWindowManager access$2100(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityWindowManager $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        return $r1;
    }

    static com.android.server.wm.ActivityTaskManagerInternal access$2200(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.wm.ActivityTaskManagerInternal $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerService>;

        return $r1;
    }

    static com.android.server.accessibility.AccessibilityManagerService$InteractionBridge access$2300(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$InteractionBridge $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge getInteractionBridge()>();

        return $r1;
    }

    static android.graphics.Rect access$2400(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect>;

        return $r1;
    }

    static android.graphics.Rect access$2500(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect1>;

        return $r1;
    }

    static android.graphics.Point access$2600(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Point $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Point mTempPoint>;

        return $r1;
    }

    static void access$2700(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateMagnificationLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    static void access$2800(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateWindowsForAccessibilityCallbackLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    static com.android.server.accessibility.MagnificationController access$2900(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.MagnificationController $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController mMagnificationController>;

        return $r1;
    }

    static com.android.server.accessibility.AccessibilityUserState access$300(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        return $r1;
    }

    static android.content.pm.PackageManager access$3000(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.pm.PackageManager $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager>;

        return $r1;
    }

    static int access$3100(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState, com.android.server.accessibility.AccessibilityManagerService$Client)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility.AccessibilityManagerService$Client r2;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        r2 := @parameter2: com.android.server.accessibility.AccessibilityManagerService$Client;

        $i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int computeRelevantEventTypesLocked(com.android.server.accessibility.AccessibilityUserState,com.android.server.accessibility.AccessibilityManagerService$Client)>(r1, r2);

        return $i0;
    }

    static boolean access$3200(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$3300(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readMagnificationEnabledSettingsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$3400(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAutoclickEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$3500(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$3600(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$3700(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readHighTextContrastEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$3800(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityShortcutKeySettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$3900(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityButtonTargetComponentLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$400(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$4000(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityButtonTargetsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static boolean access$4100(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readUserRecommendedUiTimeoutSettingsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return $z0;
    }

    static void access$500(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    static com.android.server.accessibility.AccessibilityUserState access$600(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        com.android.server.accessibility.AccessibilityUserState $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i0);

        return $r1;
    }

    static void access$700(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void migrateAccessibilityButtonSettingsIfNecessaryLocked(com.android.server.accessibility.AccessibilityUserState,java.lang.String)>(r1, r2);

        return;
    }

    static void access$800(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void switchUser(int)>(i0);

        return;
    }

    static void access$900(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void unlockUser(int)>(i0);

        return;
    }

    private void announceNewUserIfNeeded()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1, $r5;
        java.lang.String r2, $r9;
        com.android.server.accessibility.AccessibilityUserState $r3;
        boolean $z0;
        android.content.Context $r4, $r7;
        java.lang.Object[] $r6;
        int $i0, $i1;
        android.content.pm.UserInfo $r8;
        java.util.List $r10;
        java.lang.Throwable $r11;
        android.os.UserManager r12;
        android.view.accessibility.AccessibilityEvent r13;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        $z0 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityUserState: boolean isHandlingAccessibilityEventsLocked()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r12 = (android.os.UserManager) $r5;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r6 = newarray (java.lang.Object)[1];

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $r8 = virtualinvoke r12.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i0);

        $r9 = $r8.<android.content.pm.UserInfo: java.lang.String name>;

        $r6[0] = $r9;

        r2 = virtualinvoke $r7.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17041407, $r6);

        r13 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(16384);

        $r10 = virtualinvoke r13.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r2);

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEventLocked(android.view.accessibility.AccessibilityEvent,int)>(r13, $i1);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void broadcastToClients(com.android.server.accessibility.AccessibilityUserState, java.util.function.Consumer)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.function.Consumer r2;
        android.os.RemoteCallbackList $r3, $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r2 := @parameter1: java.util.function.Consumer;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: void broadcastForEachCookie(java.util.function.Consumer)>(r2);

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: android.os.RemoteCallbackList mUserClients>;

        virtualinvoke $r4.<android.os.RemoteCallbackList: void broadcastForEachCookie(java.util.function.Consumer)>(r2);

        return;
    }

    private boolean canRequestAndRequestsTouchExplorationLocked(com.android.server.accessibility.AccessibilityServiceConnection, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityServiceConnection r1;
        boolean $z0, $z1, $z2, $z4;
        android.accessibilityservice.AccessibilityServiceInfo $r2;
        android.content.pm.ResolveInfo $r3;
        android.content.pm.ServiceInfo $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0, $i1, $i2;
        android.content.ComponentName $r6;
        java.util.Set $r7;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$bNCuysjTCG2afhYMHuqu25CfY5g' $r8;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r9;
        android.os.Message $r10;
        com.android.server.accessibility.AccessibilityUserState r11;
        android.app.AlertDialog r12;
        java.util.function.BiConsumer r13;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityServiceConnection;

        r11 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: boolean canReceiveEventsLocked()>();

        if $z0 == 0 goto label6;

        $z1 = r1.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestTouchExplorationMode>;

        if $z1 != 0 goto label1;

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $r3 = virtualinvoke $r2.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r4 = $r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r5 = $r4.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 > 17 goto label4;

        $r7 = r11.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        $r6 = r1.<com.android.server.accessibility.AccessibilityServiceConnection: android.content.ComponentName mComponentName>;

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        r12 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        if r12 == null goto label3;

        $z4 = virtualinvoke r12.<android.app.AlertDialog: boolean isShowing()>();

        if $z4 != 0 goto label5;

     label3:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r8 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$bNCuysjTCG2afhYMHuqu25CfY5g: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$bNCuysjTCG2afhYMHuqu25CfY5g' INSTANCE>;

        r13 = (java.util.function.BiConsumer) $r8;

        $r10 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r13, r0, r1);

        virtualinvoke $r9.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r10);

        goto label5;

     label4:
        $i1 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: int getCapabilities()>();

        $i2 = $i1 & 2;

        if $i2 == 0 goto label5;

        return 1;

     label5:
        return 0;

     label6:
        return 0;
    }

    private int computeRelevantEventTypesLocked(com.android.server.accessibility.AccessibilityUserState, com.android.server.accessibility.AccessibilityManagerService$Client)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility.AccessibilityManagerService$Client r2;
        int i0, $i2, i3, i4, i5, i6;
        com.android.server.accessibility.AccessibilityServiceConnection r3;
        java.util.ArrayList $r4, $r8;
        com.android.server.accessibility.UiAutomationManager $r5, $r7;
        android.accessibilityservice.AccessibilityServiceInfo $r6, $r10;
        boolean $z0, $z1;
        java.lang.Object $r9;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r2 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$Client;

        i3 = 0;

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i4 = 0;

     label1:
        i5 = 0;

        if i4 >= i0 goto label3;

        $r8 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r3 = (com.android.server.accessibility.AccessibilityServiceConnection) $r9;

        $r10 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $z1 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: boolean isClientInPackageWhitelist(android.accessibilityservice.AccessibilityServiceInfo,com.android.server.accessibility.AccessibilityManagerService$Client)>($r10, r2);

        if $z1 == 0 goto label2;

        i5 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityServiceConnection: int getRelevantEventTypes()>();

        goto label2;

     label2:
        i3 = i3 | i5;

        i4 = i4 + 1;

        goto label1;

     label3:
        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        $r6 = virtualinvoke $r5.<com.android.server.accessibility.UiAutomationManager: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $z0 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: boolean isClientInPackageWhitelist(android.accessibilityservice.AccessibilityServiceInfo,com.android.server.accessibility.AccessibilityManagerService$Client)>($r6, r2);

        if $z0 == 0 goto label4;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        i6 = virtualinvoke $r7.<com.android.server.accessibility.UiAutomationManager: int getRelevantEventTypes()>();

        goto label5;

     label4:
        i6 = 0;

     label5:
        $i2 = i3 | i6;

        return $i2;
    }

    private void disableAccessibilityServiceLocked(android.content.ComponentName, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.accessibility.AccessibilityUserState r2;
        java.util.Set $r3, $r4, $r5, $r6, $r7;
        boolean $z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)>("enabled_accessibility_services", i0, $r4);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistComponentNamesToSettingLocked(java.lang.String,java.util.Set,int)>("enabled_accessibility_services", $r6, i0);

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i0);

        $r7 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $z1 = interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r2);

     label1:
        return;
    }

    private void enableAccessibilityServiceLocked(android.content.ComponentName, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.accessibility.AccessibilityUserState r2;
        java.util.Set $r3, $r4, $r5, $r6, $r7;
        boolean $z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)>("enabled_accessibility_services", i0, $r4);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistComponentNamesToSettingLocked(java.lang.String,java.util.Set,int)>("enabled_accessibility_services", $r6, i0);

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i0);

        $r7 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $z1 = interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r2);

     label1:
        return;
    }

    private java.util.List getAccessibilityShortcutTargetsInternal(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1, $r6;
        java.util.ArrayList r2, $r4, $r5;
        android.util.ArraySet $r3;
        int $i0, $i1, i2, i3;
        boolean $z0, $z1;
        android.accessibilityservice.AccessibilityServiceInfo $r7;
        android.content.pm.ResolveInfo $r8;
        android.content.pm.ServiceInfo $r9;
        android.content.pm.ApplicationInfo $r10;
        android.content.ComponentName $r11;
        java.lang.Throwable $r12;
        com.android.server.accessibility.AccessibilityUserState r13;
        com.android.server.accessibility.AccessibilityServiceConnection r14;
        java.lang.String r15;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i2 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r13 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        r2 = new java.util.ArrayList;

        $r3 = virtualinvoke r13.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(i2);

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

     label02:
        if i2 == 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return r2;

     label05:
        $r4 = r13.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i3 = $i0 - 1;

     label06:
        if i3 < 0 goto label11;

     label07:
        $r5 = r13.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r14 = (com.android.server.accessibility.AccessibilityServiceConnection) $r6;

        $z0 = r14.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestAccessibilityButton>;

        if $z0 == 0 goto label10;

        $r7 = virtualinvoke r14.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $r8 = virtualinvoke $r7.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r9 = $r8.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r10 = $r9.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r10.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 <= 29 goto label09;

     label08:
        goto label10;

     label09:
        $r11 = virtualinvoke r14.<com.android.server.accessibility.AccessibilityServiceConnection: android.content.ComponentName getComponentName()>();

        r15 = virtualinvoke $r11.<android.content.ComponentName: java.lang.String flattenToString()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r15);

        if $z1 != 0 goto label10;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r15);

     label10:
        i3 = i3 + -1;

        goto label06;

     label11:
        exitmonitor r1;

     label12:
        return r2;

     label13:
        $r12 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private int getClientStateLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility.UiAutomationManager $r2;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.UiAutomationManager: boolean isUiAutomationRunningLocked()>();

        $i0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getClientStateLocked(boolean)>($z0);

        return $i0;
    }

    private com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int $i0;
        com.android.server.accessibility.AccessibilityUserState $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>($i0);

        return $r1;
    }

    private com.android.server.accessibility.AccessibilityManagerService$InteractionBridge getInteractionBridge()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityManagerService$InteractionBridge $r2, r4, r5;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge>;

        if $r2 != null goto label2;

        r4 = new com.android.server.accessibility.AccessibilityManagerService$InteractionBridge;

        specialinvoke r4.<com.android.server.accessibility.AccessibilityManagerService$InteractionBridge: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge> = r4;

     label2:
        r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge>;

        exitmonitor r1;

     label3:
        return r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private long getRecommendedTimeoutMillisLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int $i0, $i1;
        long $l2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $i0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getInteractiveUiTimeoutLocked()>();

        $i1 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getNonInteractiveUiTimeoutLocked()>();

        $l2 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i0, $i1);

        return $l2;
    }

    private com.android.server.accessibility.SystemActionPerformer getSystemActionPerformer()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.SystemActionPerformer $r1, $r2, $r3;
        com.android.server.wm.WindowManagerInternal $r4;
        android.content.Context $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer>;

        if $r1 != null goto label1;

        $r3 = new com.android.server.accessibility.SystemActionPerformer;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        specialinvoke $r3.<com.android.server.accessibility.SystemActionPerformer: void <init>(android.content.Context,com.android.server.wm.WindowManagerInternal,java.util.function.Supplier,com.android.server.accessibility.SystemActionPerformer$SystemActionsChangedListener)>($r5, $r4, null, r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer> = $r3;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer>;

        return $r2;
    }

    private com.android.server.accessibility.AccessibilityUserState getUserState(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.accessibility.AccessibilityUserState r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i0);

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        com.android.server.accessibility.AccessibilityUserState r1, $r4, r7;
        android.util.SparseArray $r2, $r6;
        java.lang.Object $r3;
        android.content.Context $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.accessibility.AccessibilityUserState) $r3;

        r7 = r1;

        if r1 != null goto label1;

        $r4 = new com.android.server.accessibility.AccessibilityUserState;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke $r4.<com.android.server.accessibility.AccessibilityUserState: void <init>(int,android.content.Context,com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener)>(i0, $r5, r0);

        r7 = $r4;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r4);

     label1:
        return r7;
    }

    private void init()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityWindowManager $r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver $r3;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: void setAccessibilityWindowManager(com.android.server.accessibility.AccessibilityWindowManager)>($r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void registerBroadcastReceivers()>();

        $r3 = new com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        specialinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)>(r0, $r4);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void register(android.content.ContentResolver)>($r6);

        return;
    }

    private static boolean isClientInPackageWhitelist(android.accessibilityservice.AccessibilityServiceInfo, com.android.server.accessibility.AccessibilityManagerService$Client)
    {
        android.accessibilityservice.AccessibilityServiceInfo r0;
        boolean z0, $z1, z2;
        int i0, i1;
        java.lang.String r1;
        java.lang.String[] $r2, $r3, r5;
        com.android.server.accessibility.AccessibilityManagerService$Client r4;

        r0 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        r4 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$Client;

        i1 = 0;

        if r0 != null goto label1;

        return 0;

     label1:
        r5 = r4.<com.android.server.accessibility.AccessibilityManagerService$Client: java.lang.String[] mPackageNames>;

        $r2 = r0.<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String[] packageNames>;

        z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r2);

        z2 = z0;

        if z0 != 0 goto label4;

        z2 = z0;

        if r5 == null goto label4;

        i0 = lengthof r5;

     label2:
        z2 = z0;

        if i1 >= i0 goto label4;

        r1 = r5[i1];

        $r3 = r0.<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String[] packageNames>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r3, r1);

        if $z1 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return z2;
    }

    public static void lambda$5vwr6qV-eqdCr73CeDmVnsJlZHM(com.android.server.accessibility.AccessibilityManagerService, int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendStateToAllClients(int,int)>(i0, i1);

        return;
    }

    public static void lambda$BX2CMQr5jU9WhPYx7Aaae4zgxf4(com.android.server.accessibility.AccessibilityManagerService, android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.AccessibilityEvent r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEventToInputFilter(android.view.accessibility.AccessibilityEvent)>(r1);

        return;
    }

    public static void lambda$Gu-W_dQ2mWyy8l4tm19TzFxGbeM(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void announceNewUserIfNeeded()>();

        return;
    }

    public static void lambda$NCeV24lEcO5W6ZZr1GqGK-ylU9g(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateInputFilter(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    public static void lambda$bNCuysjTCG2afhYMHuqu25CfY5g(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityServiceConnection r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityServiceConnection;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void showEnableTouchExplorationDialog(com.android.server.accessibility.AccessibilityServiceConnection)>(r1);

        return;
    }

    public static void lambda$eSvVtuaJKbqaBq9Bpz8jbEk5c_4(com.android.server.accessibility.AccessibilityManagerService, int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.graphics.Region r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Region;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void setGestureDetectionPassthroughRegionInternal(int,android.graphics.Region)>(i0, r1);

        return;
    }

    public static void lambda$eskhivxnBVBZCLZ0d5oWdhYVtfs(com.android.server.accessibility.AccessibilityManagerService, int, int, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void performAccessibilityShortcutInternal(int,int,java.lang.String)>(i0, i1, r1);

        return;
    }

    public static void lambda$heq1MRdQjg8BGWFbpV3PEpnDVcg(com.android.server.accessibility.AccessibilityManagerService, android.os.RemoteCallbackList, long)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.RemoteCallbackList r1;
        long l0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: android.os.RemoteCallbackList;

        l0 := @parameter2: long;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendServicesStateChanged(android.os.RemoteCallbackList,long)>(r1, l0);

        return;
    }

    public static void lambda$luI_C3QiJWsM08i8m3lx484SyyY(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateFingerprintGestureHandling(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    static boolean lambda$migrateAccessibilityButtonSettingsIfNecessaryLocked$15(java.lang.String, com.android.server.accessibility.AccessibilityUserState, java.lang.String)
    {
        android.content.pm.ResolveInfo $r0;
        android.content.pm.ServiceInfo $r1;
        android.content.pm.ApplicationInfo $r2;
        int $i0, $i1, $i2;
        java.util.Set $r3;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r4, $r9;
        java.lang.String $r8, $r13, r14, r16;
        com.android.server.accessibility.AccessibilityUserState r15;
        android.content.ComponentName r17;
        android.accessibilityservice.AccessibilityServiceInfo r18;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        r16 := @parameter2: java.lang.String;

        if r14 == null goto label1;

        if r16 == null goto label1;

        $z1 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(r14);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        r17 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r16);

        if r17 != null goto label2;

        return 0;

     label2:
        r18 = virtualinvoke r15.<com.android.server.accessibility.AccessibilityUserState: android.accessibilityservice.AccessibilityServiceInfo getInstalledServiceInfoLocked(android.content.ComponentName)>(r17);

        if r18 != null goto label3;

        return 0;

     label3:
        $r0 = virtualinvoke r18.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r1 = $r0.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r2 = $r1.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 > 29 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Legacy service ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not in the button");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r13);

        return 1;

     label4:
        $i1 = r18.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i2 = $i1 & 256;

        if $i2 == 0 goto label5;

        z2 = 1;

        goto label6;

     label5:
        z2 = 0;

     label6:
        if z2 == 0 goto label7;

        $r3 = r15.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r17);

        if $z0 != 0 goto label7;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service requesting a11y button and be assigned to the button");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be enabled state");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r8);

        return 1;

     label7:
        return 0;
    }

    static void lambda$migrateAccessibilityButtonSettingsIfNecessaryLocked$16(java.lang.String, com.android.server.accessibility.AccessibilityUserState, java.util.Set, java.util.Set, android.content.ComponentName)
    {
        java.util.Set r0, r1;
        android.content.ComponentName r2;
        int $i0, $i1, $i2;
        android.content.pm.ResolveInfo $r3;
        android.content.pm.ServiceInfo $r4;
        android.content.pm.ApplicationInfo $r5;
        boolean $z0, $z1, $z2, $z4, z5;
        java.lang.StringBuilder $r6;
        java.lang.String $r10, $r11, r12, r15;
        com.android.server.accessibility.AccessibilityUserState r13;
        android.accessibilityservice.AccessibilityServiceInfo r14;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: com.android.server.accessibility.AccessibilityUserState;

        r0 := @parameter2: java.util.Set;

        r1 := @parameter3: java.util.Set;

        r2 := @parameter4: android.content.ComponentName;

        if r12 == null goto label1;

        if r2 == null goto label1;

        $r11 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z4 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 != 0 goto label1;

        return;

     label1:
        r14 = virtualinvoke r13.<com.android.server.accessibility.AccessibilityUserState: android.accessibilityservice.AccessibilityServiceInfo getInstalledServiceInfoLocked(android.content.ComponentName)>(r2);

        if r14 != null goto label2;

        return;

     label2:
        $i0 = r14.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label3;

        z5 = 1;

        goto label4;

     label3:
        z5 = 0;

     label4:
        $r3 = virtualinvoke r14.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r4 = $r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r5 = $r4.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 <= 29 goto label9;

        if z5 != 0 goto label5;

        goto label9;

     label5:
        r15 = virtualinvoke r2.<android.content.ComponentName: java.lang.String flattenToString()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r15);

        if $z0 == 0 goto label6;

        return;

     label6:
        $z1 = staticinvoke <com.android.server.accessibility.AccessibilityUserState: boolean doesShortcutTargetsStringContain(java.util.Collection,java.lang.String)>(r0, r15);

        if $z1 != 0 goto label8;

        $z2 = staticinvoke <com.android.server.accessibility.AccessibilityUserState: boolean doesShortcutTargetsStringContain(java.util.Collection,java.lang.String)>(r1, r15);

        if $z2 == 0 goto label7;

        goto label8;

     label7:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A enabled service requesting a11y button ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be assign to the button or shortcut.");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r10);

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r15);

        return;

     label8:
        return;

     label9:
        return;
    }

    static java.lang.String lambda$migrateAccessibilityButtonSettingsIfNecessaryLocked$17(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static void lambda$notifyClientsOfServicesStateChange$8(long, android.view.accessibility.IAccessibilityManagerClient) throws android.os.RemoteException
    {
        long l0;
        android.view.accessibility.IAccessibilityManagerClient r0;

        l0 := @parameter0: long;

        r0 := @parameter1: android.view.accessibility.IAccessibilityManagerClient;

        interfaceinvoke r0.<android.view.accessibility.IAccessibilityManagerClient: void notifyServicesStateChanged(long)>(l0);

        return;
    }

    static java.lang.String lambda$persistComponentNamesToSettingLocked$6(android.content.ComponentName)
    {
        android.content.ComponentName r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.ComponentName;

        $r1 = virtualinvoke r0.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        return $r1;
    }

    static java.lang.String lambda$readAccessibilityButtonTargetsLocked$10(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static java.lang.String lambda$readAccessibilityShortcutKeySettingLocked$9(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static android.content.ComponentName lambda$readComponentNamesFromSettingLocked$4(java.lang.String)
    {
        java.lang.String r0;
        android.content.ComponentName $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r0);

        return $r1;
    }

    static android.content.ComponentName lambda$readComponentNamesFromStringLocked$5(java.lang.String)
    {
        java.lang.String r0;
        android.content.ComponentName $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r0);

        return $r1;
    }

    static java.lang.String lambda$removeShortcutTargetForUnboundServiceLocked$18(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static java.lang.String lambda$removeShortcutTargetForUnboundServiceLocked$19(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static java.lang.String lambda$restoreLegacyDisplayMagnificationNavBarIfNeededLocked$0(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static java.lang.String lambda$restoreLegacyDisplayMagnificationNavBarIfNeededLocked$1(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static void lambda$sendStateToClients$7(int, android.view.accessibility.IAccessibilityManagerClient) throws android.os.RemoteException
    {
        int i0;
        android.view.accessibility.IAccessibilityManagerClient r0;

        i0 := @parameter0: int;

        r0 := @parameter1: android.view.accessibility.IAccessibilityManagerClient;

        interfaceinvoke r0.<android.view.accessibility.IAccessibilityManagerClient: void setState(int)>(i0);

        return;
    }

    static boolean lambda$updateAccessibilityButtonTargetsLocked$13(com.android.server.accessibility.AccessibilityUserState, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean isShortcutTargetInstalledLocked(java.lang.String)>(r1);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    static java.lang.String lambda$updateAccessibilityButtonTargetsLocked$14(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static boolean lambda$updateAccessibilityShortcutKeyTargetsLocked$11(com.android.server.accessibility.AccessibilityUserState, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean isShortcutTargetInstalledLocked(java.lang.String)>(r1);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    static java.lang.String lambda$updateAccessibilityShortcutKeyTargetsLocked$12(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public static void lambda$zXJtauhUptSkQJSF-M55-grAVbo(com.android.server.accessibility.AccessibilityManagerService, int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendStateToClients(int,int)>(i0, i1);

        return;
    }

    public static void lambda$zajP-hb_Pu4KrBx9lo0SCrvm0I4(com.android.server.accessibility.AccessibilityManagerService, int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.graphics.Region r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Region;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void setTouchExplorationPassthroughRegionInternal(int,android.graphics.Region)>(i0, r1);

        return;
    }

    private void launchShortcutTargetActivity(int, android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1;
        android.os.Bundle r2;
        android.content.Intent $r3;
        android.app.ActivityOptions $r4, $r5;
        android.content.Context $r8;
        android.os.UserHandle $r9;
        android.content.ActivityNotFoundException $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r11 := @parameter1: android.content.ComponentName;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        $r4 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

        $r5 = virtualinvoke $r4.<android.app.ActivityOptions: android.app.ActivityOptions setLaunchDisplayId(int)>(i0);

        r2 = virtualinvoke $r5.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r11);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label1:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $r9 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        virtualinvoke $r8.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>($r3, r2, $r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private void migrateAccessibilityButtonSettingsIfNecessaryLocked(com.android.server.accessibility.AccessibilityUserState, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.lang.String r2;
        android.util.ArraySet r3, r4;
        int i0, $i1, $i2, $i3, i4;
        java.util.Set $r7;
        boolean $z1, z2, z3;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$izifS7Le9TQuxSikL_j2KI9n6Jo' $r8;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$qMRX_NUgMKPJgFkUHbwhO0kqGYQ r9;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$_bTcOt6lEs3SZ7qHMklsaQbaIGM r10;
        java.util.function.Function r11;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r2 := @parameter1: java.lang.String;

        z2 = 0;

        r3 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(0);

        i4 = interfaceinvoke r3.<java.util.Set: int size()>();

        r9 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$qMRX_NUgMKPJgFkUHbwhO0kqGYQ;

        specialinvoke r9.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$qMRX_NUgMKPJgFkUHbwhO0kqGYQ: void <init>(java.lang.String,com.android.server.accessibility.AccessibilityUserState)>(r2, r1);

        interfaceinvoke r3.<java.util.Set: boolean removeIf(java.util.function.Predicate)>(r9);

        $i1 = interfaceinvoke r3.<java.util.Set: int size()>();

        if i4 == $i1 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        i0 = interfaceinvoke r3.<java.util.Set: int size()>();

        r4 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(1);

        $r7 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        r10 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$_bTcOt6lEs3SZ7qHMklsaQbaIGM;

        specialinvoke r10.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$_bTcOt6lEs3SZ7qHMklsaQbaIGM: void <init>(java.lang.String,com.android.server.accessibility.AccessibilityUserState,java.util.Set,java.util.Set)>(r2, r1, r3, r4);

        interfaceinvoke $r7.<java.util.Set: void forEach(java.util.function.Consumer)>(r10);

        $i2 = interfaceinvoke r3.<java.util.Set: int size()>();

        if i0 == $i2 goto label3;

        z2 = 1;

     label3:
        $z1 = z2 | z3;

        if $z1 != 0 goto label4;

        return;

     label4:
        $i3 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r8 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$izifS7Le9TQuxSikL_j2KI9n6Jo: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$izifS7Le9TQuxSikL_j2KI9n6Jo' INSTANCE>;

        r11 = (java.util.function.Function) $r8;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistColonDelimitedSetToSettingLocked(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_button_targets", $i3, r3, r11);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    private void notifyAccessibilityButtonVisibilityChangedLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean z0, $z1, $z2;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility.AccessibilityServiceConnection r2;
        java.util.ArrayList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        z0 := @parameter0: boolean;

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mIsAccessibilityButtonShown> = z0;

        $r3 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        $z1 = r2.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestAccessibilityButton>;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityServiceConnection: boolean isAccessibilityButtonAvailableLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityServiceConnection: void notifyAccessibilityButtonAvailabilityChangedLocked(boolean)>($z2);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    private void notifyAccessibilityServicesDelayedLocked(android.view.accessibility.AccessibilityEvent, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean z0, $z1;
        com.android.server.accessibility.AccessibilityUserState r1;
        int i0, i1;
        com.android.server.accessibility.AccessibilityServiceConnection r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        java.lang.IndexOutOfBoundsException $r6;
        android.view.accessibility.AccessibilityEvent r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r7 := @parameter0: android.view.accessibility.AccessibilityEvent;

        z0 := @parameter1: boolean;

     label1:
        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

     label2:
        i1 = 0;

     label3:
        $r3 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label4:
        if i1 >= i0 goto label7;

     label5:
        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        $z1 = r2.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mIsDefault>;

        if $z1 != z0 goto label6;

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityServiceConnection: void notifyAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r7);

     label6:
        i1 = i1 + 1;

        goto label4;

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;

     label9:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label8;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label8;
        catch java.lang.IndexOutOfBoundsException from label5 to label6 with label8;
    }

    private void notifyClearAccessibilityCacheLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.accessibility.AccessibilityServiceConnection $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        $r2 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.accessibility.AccessibilityServiceConnection) $r4;

        virtualinvoke $r5.<com.android.server.accessibility.AccessibilityServiceConnection: void notifyClearAccessibilityNodeInfoCache()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    private void notifyClientsOfServicesStateChange(android.os.RemoteCallbackList, long)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.RemoteCallbackList r1;
        long l0;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$sGdMPxvBcGKDALNlLBuP2gGcyp0 $r2;
        java.util.function.Consumer $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.os.RemoteCallbackList;

        l0 := @parameter1: long;

        $r2 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$sGdMPxvBcGKDALNlLBuP2gGcyp0;

        specialinvoke $r2.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$sGdMPxvBcGKDALNlLBuP2gGcyp0: void <init>(long)>(l0);

        $r3 = staticinvoke <com.android.internal.util.FunctionalUtils: java.util.function.Consumer ignoreRemoteException(com.android.internal.util.FunctionalUtils$RemoteExceptionIgnoringConsumer)>($r2);

        virtualinvoke r1.<android.os.RemoteCallbackList: void broadcast(java.util.function.Consumer)>($r3);

        return;
    }

    private boolean notifyGestureLocked(android.accessibilityservice.AccessibilityGestureEvent, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.accessibilityservice.AccessibilityGestureEvent r1;
        boolean z0, $z1, $z2;
        com.android.server.accessibility.AccessibilityUserState r2;
        com.android.server.accessibility.AccessibilityServiceConnection r3;
        java.util.ArrayList $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.accessibilityservice.AccessibilityGestureEvent;

        z0 := @parameter1: boolean;

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        $r4 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r5 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.accessibility.AccessibilityServiceConnection) $r6;

        $z1 = r3.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestTouchExplorationMode>;

        if $z1 == 0 goto label2;

        $z2 = r3.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mIsDefault>;

        if $z2 != z0 goto label2;

        virtualinvoke r3.<com.android.server.accessibility.AccessibilityServiceConnection: void notifyGesture(android.accessibilityservice.AccessibilityGestureEvent)>(r1);

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    private void notifyMagnificationChangedLocked(int, android.graphics.Region, float, float, float)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1, i2;
        android.graphics.Region r1;
        float f0, f1, f2;
        com.android.server.accessibility.AccessibilityUserState r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        com.android.server.accessibility.AccessibilityServiceConnection $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        $r3 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label2;

        $r4 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        virtualinvoke $r6.<com.android.server.accessibility.AccessibilityServiceConnection: void notifyMagnificationChangedLocked(int,android.graphics.Region,float,float,float)>(i0, r1, f0, f1, f2);

        i2 = i2 + -1;

        goto label1;

     label2:
        return;
    }

    private void onBootPhase(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.content.pm.PackageManager $r1;
        boolean $z0;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        java.lang.Object $r3;
        android.appwidget.AppWidgetManagerInternal $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        if i0 != 500 goto label1;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager>;

        $z0 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.app_widgets");

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/appwidget/AppWidgetManagerInternal;");

        $r4 = (android.appwidget.AppWidgetManagerInternal) $r3;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: void setAppWidgetManager(android.appwidget.AppWidgetManagerInternal)>($r4);

     label1:
        return;
    }

    private void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mInitialized> = 1;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateLegacyCapabilitiesLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateServicesLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateWindowsForAccessibilityCallbackLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateFilterKeyEventsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateTouchExplorationLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updatePerformGesturesLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateMagnificationLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleUpdateFingerprintGestureHandling(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleUpdateInputFilter(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateRelevantEventsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleUpdateClientsIfNeededLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateAccessibilityShortcutKeyTargetsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateAccessibilityButtonTargetsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    private boolean performAccessibilityFrameworkFeature(android.content.ComponentName, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        com.android.internal.accessibility.AccessibilityShortcutController$ToggleableFrameworkFeatureInfo r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        android.provider.SettingsStringUtil$SettingStringHelper $r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;
        java.lang.String $r7, $r8, $r9, $r10, $r11;
        java.util.Map r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r12 = staticinvoke <com.android.internal.accessibility.AccessibilityShortcutController: java.util.Map getFrameworkShortcutFeaturesMap()>();

        $z0 = interfaceinvoke r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.internal.accessibility.AccessibilityShortcutController$ToggleableFrameworkFeatureInfo) $r3;

        $r4 = new android.provider.SettingsStringUtil$SettingStringHelper;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = virtualinvoke r2.<com.android.internal.accessibility.AccessibilityShortcutController$ToggleableFrameworkFeatureInfo: java.lang.String getSettingKey()>();

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        specialinvoke $r4.<android.provider.SettingsStringUtil$SettingStringHelper: void <init>(android.content.ContentResolver,java.lang.String,int)>($r6, $r7, $i1);

        $r8 = virtualinvoke r2.<com.android.internal.accessibility.AccessibilityShortcutController$ToggleableFrameworkFeatureInfo: java.lang.String getSettingOnValue()>();

        $r9 = virtualinvoke $r4.<android.provider.SettingsStringUtil$SettingStringHelper: java.lang.String read()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r8, $r9);

        if $z1 != 0 goto label2;

        staticinvoke <com.android.internal.accessibility.util.AccessibilityStatsLogUtils: void logAccessibilityShortcutActivated(android.content.ComponentName,int,boolean)>(r1, i0, 1);

        $r11 = virtualinvoke r2.<com.android.internal.accessibility.AccessibilityShortcutController$ToggleableFrameworkFeatureInfo: java.lang.String getSettingOnValue()>();

        virtualinvoke $r4.<android.provider.SettingsStringUtil$SettingStringHelper: boolean write(java.lang.String)>($r11);

        goto label3;

     label2:
        staticinvoke <com.android.internal.accessibility.util.AccessibilityStatsLogUtils: void logAccessibilityShortcutActivated(android.content.ComponentName,int,boolean)>(r1, i0, 0);

        $r10 = virtualinvoke r2.<com.android.internal.accessibility.AccessibilityShortcutController$ToggleableFrameworkFeatureInfo: java.lang.String getSettingOffValue()>();

        virtualinvoke $r4.<android.provider.SettingsStringUtil$SettingStringHelper: boolean write(java.lang.String)>($r10);

     label3:
        return 1;
    }

    private void performAccessibilityShortcutInternal(int, int, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i3;
        java.util.List r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r2, $r9, $r13;
        java.lang.String $r5, $r12, $r16, r17, r19, r21;
        com.android.server.accessibility.MagnificationController $r6;
        android.content.ComponentName $r7, r22;
        java.lang.Object $r8;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r17 := @parameter2: java.lang.String;

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List getAccessibilityShortcutTargetsInternal(int)>(i1);

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No target to perform shortcut, shortcutType=");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r16);

        return;

     label1:
        r19 = r17;

        if r17 == null goto label2;

        r19 = r17;

        $z7 = staticinvoke <com.android.server.accessibility.AccessibilityUserState: boolean doesShortcutTargetsStringContain(java.util.Collection,java.lang.String)>(r1, r17);

        if $z7 != 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Perform shortcut failed, invalid target name:");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r12);

        r19 = null;

     label2:
        r21 = r19;

        if r19 != null goto label4;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i3 <= 1 goto label3;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void showAccessibilityTargetsSelection(int,int)>(i0, i1);

        return;

     label3:
        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r21 = (java.lang.String) $r8;

     label4:
        $z2 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

        if $z2 == 0 goto label5;

        $r6 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController getMagnificationController()>();

        z0 = virtualinvoke $r6.<com.android.server.accessibility.MagnificationController: boolean isMagnifying(int)>(i0);

        $r7 = <com.android.internal.accessibility.AccessibilityShortcutController: android.content.ComponentName MAGNIFICATION_COMPONENT_NAME>;

        $z6 = z0 ^ 1;

        staticinvoke <com.android.internal.accessibility.util.AccessibilityStatsLogUtils: void logAccessibilityShortcutActivated(android.content.ComponentName,int,boolean)>($r7, i1, $z6);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityButtonToInputFilter(int)>(i0);

        return;

     label5:
        r22 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r21);

        if r22 != null goto label6;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Perform shortcut failed, invalid target name:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r5);

        return;

     label6:
        $z3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean performAccessibilityFrameworkFeature(android.content.ComponentName,int)>(r22, i1);

        if $z3 == 0 goto label7;

        return;

     label7:
        $z4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean performAccessibilityShortcutTargetActivity(int,android.content.ComponentName)>(i0, r22);

        if $z4 == 0 goto label8;

        staticinvoke <com.android.internal.accessibility.util.AccessibilityStatsLogUtils: void logAccessibilityShortcutActivated(android.content.ComponentName,int)>(r22, i1);

        return;

     label8:
        $z5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean performAccessibilityShortcutTargetService(int,int,android.content.ComponentName)>(i0, i1, r22);

        if $z5 == 0 goto label9;

        return;

     label9:
        return;
    }

    private boolean performAccessibilityShortcutTargetActivity(int, android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1, i2;
        java.lang.Object r1, $r5;
        com.android.server.accessibility.AccessibilityUserState r2;
        java.util.List $r3, $r4;
        android.accessibilityservice.AccessibilityShortcutInfo $r6;
        android.content.ComponentName $r7, r9;
        boolean $z0;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r9 := @parameter1: android.content.ComponentName;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

     label02:
        i2 = 0;

     label03:
        $r3 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i1 goto label07;

        $r4 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (android.accessibilityservice.AccessibilityShortcutInfo) $r5;

        $r7 = virtualinvoke $r6.<android.accessibilityservice.AccessibilityShortcutInfo: android.content.ComponentName getComponentName()>();

        $z0 = virtualinvoke $r7.<android.content.ComponentName: boolean equals(java.lang.Object)>(r9);

        if $z0 != 0 goto label05;

     label04:
        i2 = i2 + 1;

        goto label03;

     label05:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void launchShortcutTargetActivity(int,android.content.ComponentName)>(i0, r9);

        exitmonitor r1;

     label06:
        return 1;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private boolean performAccessibilityShortcutTargetService(int, int, android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityUserState r2;
        android.accessibilityservice.AccessibilityServiceInfo r3;
        android.content.pm.ResolveInfo $r4;
        android.content.pm.ServiceInfo $r5;
        android.content.pm.ApplicationInfo $r6;
        java.util.ArrayList $r9;
        boolean $z0, $z1, $z2, z3;
        java.util.Set $r10;
        java.lang.String $r13, $r19;
        java.lang.Throwable $r14;
        android.content.ComponentName r15;
        java.lang.StringBuilder r16, r18;
        com.android.server.accessibility.AccessibilityServiceConnection r17;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r15 := @parameter2: android.content.ComponentName;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

     label02:
        r3 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: android.accessibilityservice.AccessibilityServiceInfo getInstalledServiceInfoLocked(android.content.ComponentName)>(r15);

     label03:
        if r3 != null goto label06;

     label04:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Perform shortcut failed, invalid component name:");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r13 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r13);

        exitmonitor r1;

     label05:
        return 0;

     label06:
        r17 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: com.android.server.accessibility.AccessibilityServiceConnection getServiceConnectionLocked(android.content.ComponentName)>(r15);

        $r4 = virtualinvoke r3.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r6 = $r5.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i2 = $r6.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $i3 = r3.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i4 = $i3 & 256;

        if $i4 == 0 goto label08;

     label07:
        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        if i2 > 29 goto label10;

        if i1 == 1 goto label11;

     label10:
        if i2 <= 29 goto label17;

        if z3 != 0 goto label17;

     label11:
        if r17 != null goto label14;

     label12:
        staticinvoke <com.android.internal.accessibility.util.AccessibilityStatsLogUtils: void logAccessibilityShortcutActivated(android.content.ComponentName,int,boolean)>(r15, i1, 1);

        $i8 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void enableAccessibilityServiceLocked(android.content.ComponentName,int)>(r15, $i8);

     label13:
        goto label15;

     label14:
        staticinvoke <com.android.internal.accessibility.util.AccessibilityStatsLogUtils: void logAccessibilityShortcutActivated(android.content.ComponentName,int,boolean)>(r15, i1, 0);

        $i7 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void disableAccessibilityServiceLocked(android.content.ComponentName,int)>(r15, $i7);

     label15:
        exitmonitor r1;

     label16:
        return 1;

     label17:
        if i1 != 1 goto label20;

        if i2 <= 29 goto label20;

        if z3 == 0 goto label20;

     label18:
        $r10 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set getEnabledServicesLocked()>();

        $z2 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r15);

        if $z2 != 0 goto label20;

        $i6 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void enableAccessibilityServiceLocked(android.content.ComponentName,int)>(r15, $i6);

        exitmonitor r1;

     label19:
        return 1;

     label20:
        if r17 == null goto label25;

     label21:
        $r9 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $z0 = virtualinvoke $r9.<java.util.ArrayList: boolean contains(java.lang.Object)>(r17);

        if $z0 == 0 goto label25;

        $z1 = r17.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestAccessibilityButton>;

        if $z1 != 0 goto label23;

     label22:
        goto label25;

     label23:
        staticinvoke <com.android.internal.accessibility.util.AccessibilityStatsLogUtils: void logAccessibilityShortcutActivated(android.content.ComponentName,int,boolean)>(r15, i1, 1);

        virtualinvoke r17.<com.android.server.accessibility.AccessibilityServiceConnection: void notifyAccessibilityButtonClickedLocked(int)>(i0);

        exitmonitor r1;

     label24:
        return 1;

     label25:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Perform shortcut failed, service is not ready:");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r19 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r19);

        exitmonitor r1;

     label26:
        return 0;

     label27:
        $r14 := @caughtexception;

     label28:
        exitmonitor r1;

     label29:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label02 to label03 with label27;
        catch java.lang.Throwable from label04 to label05 with label27;
        catch java.lang.Throwable from label06 to label07 with label27;
        catch java.lang.Throwable from label12 to label13 with label27;
        catch java.lang.Throwable from label14 to label15 with label27;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
    }

    private void persistColonDelimitedSetToSettingLocked(java.lang.String, int, java.util.Set, java.util.function.Function)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i2;
        java.util.Iterator r2;
        boolean z0, $z1, $z2;
        java.lang.Object r3, $r6;
        long l1;
        java.lang.StringBuilder $r4;
        android.content.Context $r5;
        java.lang.Throwable $r7;
        java.lang.String r8, r11, r12, r13;
        java.util.Set r9;
        java.util.function.Function r10;
        android.content.ContentResolver r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r9 := @parameter2: java.util.Set;

        r10 := @parameter3: java.util.function.Function;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r2 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        r11 = null;

        if z0 == 0 goto label05;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = null;

        if r3 == null goto label02;

        $r6 = interfaceinvoke r10.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r3);

        r12 = (java.lang.String) $r6;

     label02:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r12);

        if $z2 == 0 goto label03;

        goto label01;

     label03:
        $i2 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label04;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label04:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        goto label01;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        r14 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r13);

        if $z1 == 0 goto label08;

     label07:
        goto label09;

     label08:
        r11 = r13;

     label09:
        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r14, r8, r11, i0);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label11:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    private boolean readAccessibilityButtonTargetComponentLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.lang.String r2, $r5, $r6;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r4, "accessibility_button_target_component", $i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: java.lang.String getTargetAssignedToAccessibilityButton()>();

        if $r6 != null goto label1;

        return 0;

     label1:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setTargetAssignedToAccessibilityButton(java.lang.String)>(null);

        return 1;

     label2:
        $r5 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: java.lang.String getTargetAssignedToAccessibilityButton()>();

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setTargetAssignedToAccessibilityButton(java.lang.String)>(r2);

        return 1;
    }

    private boolean readAccessibilityButtonTargetsLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.util.ArraySet r3, r6;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eQYUc4U2i8Xl3NCvLKTNFpnxaAo' $r5;
        int $i0;
        boolean $z0;
        java.util.function.Function r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r6 = new android.util.ArraySet;

        specialinvoke r6.<android.util.ArraySet: void <init>()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r5 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$eQYUc4U2i8Xl3NCvLKTNFpnxaAo: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eQYUc4U2i8Xl3NCvLKTNFpnxaAo' INSTANCE>;

        r7 = (java.util.function.Function) $r5;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readColonDelimitedSettingToSet(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_button_targets", $i0, r6, r7);

        r3 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(0);

        $z0 = interfaceinvoke r6.<java.util.Set: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        interfaceinvoke r3.<java.util.Set: void clear()>();

        interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>(r6);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return 1;
    }

    private boolean readAccessibilityShortcutKeySettingLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.content.Context $r3, $r7;
        android.content.ContentResolver $r4;
        int $i0;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$Gfpf42F-WgaKLjT8H9wQIIdsOHg' $r6;
        boolean $z1, $z3;
        java.lang.String r8, r9;
        android.util.ArraySet r10, r11;
        java.util.function.Function r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        r8 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r4, "accessibility_shortcut_target_service", $i0);

        r11 = new android.util.ArraySet;

        specialinvoke r11.<android.util.ArraySet: void <init>()>();

        $r6 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$Gfpf42F_WgaKLjT8H9wQIIdsOHg: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$Gfpf42F-WgaKLjT8H9wQIIdsOHg' INSTANCE>;

        r12 = (java.util.function.Function) $r6;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readColonDelimitedStringToSet(java.lang.String,java.util.Set,boolean,java.util.function.Function)>(r8, r11, 0, r12);

        if r8 != null goto label1;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        r9 = virtualinvoke $r7.<android.content.Context: java.lang.String getString(int)>(17039854);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r9);

        if $z1 != 0 goto label1;

        interfaceinvoke r11.<java.util.Set: boolean add(java.lang.Object)>(r9);

     label1:
        r10 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(1);

        $z3 = interfaceinvoke r11.<java.util.Set: boolean equals(java.lang.Object)>(r10);

        if $z3 == 0 goto label2;

        return 0;

     label2:
        interfaceinvoke r10.<java.util.Set: void clear()>();

        interfaceinvoke r10.<java.util.Set: boolean addAll(java.util.Collection)>(r11);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return 1;
    }

    private boolean readAutoclickEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "accessibility_autoclick_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: boolean isAutoclickEnabledLocked()>();

        if z1 == $z0 goto label3;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setAutoclickEnabledLocked(boolean)>(z1);

        return 1;

     label3:
        return 0;
    }

    private void readColonDelimitedSettingToSet(java.lang.String, int, java.util.Set, java.util.function.Function)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1, $r6;
        int i0;
        java.util.Set r2;
        java.util.function.Function r3;
        android.content.Context $r4;
        android.content.ContentResolver $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: java.util.function.Function;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r5, r1, i0);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readColonDelimitedStringToSet(java.lang.String,java.util.Set,boolean,java.util.function.Function)>($r6, r2, 0, r3);

        return;
    }

    private void readColonDelimitedStringToSet(java.lang.String, java.util.Set, boolean, java.util.function.Function)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.util.Set r1;
        boolean z0, $z1, $z2, $z4;
        java.util.function.Function r2;
        android.text.TextUtils$SimpleStringSplitter r3;
        java.lang.String r4, r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.util.function.Function;

        if z0 != 0 goto label1;

        interfaceinvoke r1.<java.util.Set: void clear()>();

     label1:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z1 != 0 goto label5;

        r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.text.TextUtils$SimpleStringSplitter mStringColonSplitter>;

        virtualinvoke r3.<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>(r4);

     label2:
        $z4 = virtualinvoke r3.<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>();

        if $z4 == 0 goto label5;

        r5 = virtualinvoke r3.<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z2 == 0 goto label3;

        goto label2;

     label3:
        r6 = interfaceinvoke r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r5);

        if r6 == null goto label4;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r6);

     label4:
        goto label2;

     label5:
        return;
    }

    private void readComponentNamesFromSettingLocked(java.lang.String, int, java.util.Set)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1;
        int i0;
        java.util.Set r2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$pAB0wmwYbzxpH0pn344udWaoe2o' $r3;
        java.util.function.Function r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Set;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$pAB0wmwYbzxpH0pn344udWaoe2o: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$pAB0wmwYbzxpH0pn344udWaoe2o' INSTANCE>;

        r4 = (java.util.function.Function) $r3;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readColonDelimitedSettingToSet(java.lang.String,int,java.util.Set,java.util.function.Function)>(r1, i0, r2, r4);

        return;
    }

    private void readComponentNamesFromStringLocked(java.lang.String, java.util.Set, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1;
        java.util.Set r2;
        boolean z0;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$WSVclf7SW8Zyu3d3LwkuhR7n3vs' $r3;
        java.util.function.Function r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$WSVclf7SW8Zyu3d3LwkuhR7n3vs: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$WSVclf7SW8Zyu3d3LwkuhR7n3vs' INSTANCE>;

        r4 = (java.util.function.Function) $r3;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readColonDelimitedStringToSet(java.lang.String,java.util.Set,boolean,java.util.function.Function)>(r1, r2, z0, r4);

        return;
    }

    private boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readInstalledAccessibilityServiceLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readInstalledAccessibilityShortcutLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z2 = $z0 | $z1;

        $z3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z4 = $z2 | $z3;

        $z5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z6 = $z4 | $z5;

        $z7 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z8 = $z6 | $z7;

        $z9 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readHighTextContrastEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z10 = $z8 | $z9;

        $z11 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readMagnificationEnabledSettingsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z12 = $z10 | $z11;

        $z13 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAutoclickEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z14 = $z12 | $z13;

        $z15 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityShortcutKeySettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z16 = $z14 | $z15;

        $z17 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityButtonTargetsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z18 = $z16 | $z17;

        $z19 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityButtonTargetComponentLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z20 = $z18 | $z19;

        $z21 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readUserRecommendedUiTimeoutSettingsLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $z22 = $z20 | $z21;

        return $z22;
    }

    private boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)>("enabled_accessibility_services", $i0, $r3);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r7 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        $r9 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        return 1;

     label1:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        return 0;
    }

    private boolean readHighTextContrastEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "high_text_contrast_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: boolean isTextHighContrastEnabledLocked()>();

        if z1 == $z0 goto label3;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setTextHighContrastEnabledLocked(boolean)>(z1);

        return 1;

     label3:
        return 0;
    }

    private boolean readInstalledAccessibilityServiceLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.List r2, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r20;
        int i0, $i1, i3, i4;
        android.content.pm.ResolveInfo r3;
        android.accessibilityservice.AccessibilityServiceInfo r4;
        boolean $z0, $z1, $z3, $z4;
        android.content.Intent $r6;
        android.content.pm.PackageManager $r7;
        java.lang.Object $r15;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r16;
        android.content.Context $r17;
        java.util.Set $r18;
        android.content.ComponentName $r19;
        java.lang.Throwable $r21;
        android.content.pm.ServiceInfo r22;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        i3 = 819332;

        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: boolean getBindInstantServiceAllowedLocked()>();

        if $z0 == 0 goto label1;

        i3 = 819332 | 8388608;

     label1:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager>;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.accessibilityservice.AccessibilityService");

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        r2 = virtualinvoke $r7.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>($r6, i3, $i1);

        i4 = 0;

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

     label2:
        if i4 >= i0 goto label8;

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i4);

        r3 = (android.content.pm.ResolveInfo) $r15;

        r22 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r16 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z3 = virtualinvoke $r16.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRegisterService(android.content.pm.ServiceInfo)>(r22);

        if $z3 != 0 goto label3;

        goto label7;

     label3:
        r4 = new android.accessibilityservice.AccessibilityServiceInfo;

        $r17 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke r4.<android.accessibilityservice.AccessibilityServiceInfo: void <init>(android.content.pm.ResolveInfo,android.content.Context)>(r3, $r17);

        $r18 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices>;

        $r19 = virtualinvoke r22.<android.content.pm.ServiceInfo: android.content.ComponentName getComponentName()>();

        $z4 = interfaceinvoke $r18.<java.util.Set: boolean contains(java.lang.Object)>($r19);

        if $z4 == 0 goto label4;

        r4.<android.accessibilityservice.AccessibilityServiceInfo: boolean crashed> = 1;

     label4:
        $r20 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>(r4);

     label5:
        goto label7;

     label6:
        $r21 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManagerService", "Error while initializing AccessibilityServiceInfo", $r21);

     label7:
        i4 = i4 + 1;

        goto label2;

     label8:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        $r8 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $z1 = interfaceinvoke $r9.<java.util.List: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label9;

        $r11 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        interfaceinvoke $r11.<java.util.List: void clear()>();

        $r13 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $r12 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r13.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        $r14 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r14.<java.util.List: void clear()>();

        return 1;

     label9:
        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        return 0;

        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch org.xmlpull.v1.XmlPullParserException from label4 to label5 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    private boolean readInstalledAccessibilityShortcutLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.List r2, $r6, $r7, $r8;
        android.content.Context $r3, $r5;
        android.view.accessibility.AccessibilityManager $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        r2 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityShortcutListAsUser(android.content.Context,int)>($r5, $i0);

        $r6 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts>;

        $z0 = interfaceinvoke r2.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r7 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        $r8 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts>;

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>(r2);

        return 1;

     label1:
        return 0;
    }

    private boolean readMagnificationEnabledSettingsLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "accessibility_display_magnification_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: boolean isDisplayMagnificationEnabledLocked()>();

        if z1 == $z0 goto label3;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setDisplayMagnificationEnabledLocked(boolean)>(z1);

        return 1;

     label3:
        return 0;
    }

    private boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "touch_exploration_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: boolean isTouchExplorationEnabledLocked()>();

        if z1 == $z0 goto label3;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setTouchExplorationEnabledLocked(boolean)>(z1);

        return 1;

     label3:
        return 0;
    }

    private boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)>("touch_exploration_granted_accessibility_services", $i0, $r3);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r7 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        $r9 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        return 1;

     label1:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        return 0;
    }

    private boolean readUserRecommendedUiTimeoutSettingsLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.content.Context $r2, $r4;
        android.content.ContentResolver $r3, $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "accessibility_non_interactive_ui_timeout_ms", 0, $i2);

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i3 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r5, "accessibility_interactive_ui_timeout_ms", 0, $i3);

        $i4 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getUserNonInteractiveUiTimeoutLocked()>();

        if i0 != $i4 goto label2;

        $i5 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getUserInteractiveUiTimeoutLocked()>();

        if i1 == $i5 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setUserNonInteractiveUiTimeoutLocked(int)>(i0);

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setUserInteractiveUiTimeoutLocked(int)>(i1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return 1;
    }

    private void registerBroadcastReceivers()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$1 $r2;
        android.os.UserHandle $r3, $r8;
        android.content.Context $r4, $r7;
        android.content.IntentFilter $r5;
        com.android.server.accessibility.AccessibilityManagerService$2 $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r2 = new com.android.server.accessibility.AccessibilityManagerService$1;

        specialinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$1: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r2.<com.android.internal.content.PackageMonitor: void register(android.content.Context,android.os.Looper,android.os.UserHandle,boolean)>($r4, null, $r3, 1);

        $r5 = new android.content.IntentFilter;

        specialinvoke $r5.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_UNLOCKED");

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_PRESENT");

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.os.action.SETTING_RESTORED");

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r6 = new com.android.server.accessibility.AccessibilityManagerService$2;

        specialinvoke $r6.<com.android.server.accessibility.AccessibilityManagerService$2: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        $r8 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r7.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r6, $r8, $r5, null, null);

        return;
    }

    private void removeShortcutTargetForUnboundServiceLocked(com.android.server.accessibility.AccessibilityUserState, com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.util.ArraySet r2, r11;
        boolean $z0, $z1, $z2;
        android.accessibilityservice.AccessibilityServiceInfo $r3;
        android.content.pm.ResolveInfo $r4;
        android.content.pm.ServiceInfo $r5;
        android.content.pm.ApplicationInfo $r6;
        int $i0, $i1, $i2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$pzT62oocPlJK8m3BrYpDJvlljn0' $r7;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$Dr0UZNY6LcWGU-_qkFYs5k2BcRI' $r8;
        com.android.server.accessibility.AccessibilityServiceConnection r9;
        android.content.ComponentName r10;
        java.util.function.Function r12, r13;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r9 := @parameter1: com.android.server.accessibility.AccessibilityServiceConnection;

        $z0 = r9.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestAccessibilityButton>;

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r9.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $r4 = virtualinvoke $r3.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r6 = $r5.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r6.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 > 29 goto label1;

        goto label4;

     label1:
        r10 = virtualinvoke r9.<com.android.server.accessibility.AccessibilityServiceConnection: android.content.ComponentName getComponentName()>();

        $z1 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: boolean removeShortcutTargetLocked(int,android.content.ComponentName)>(1, r10);

        if $z1 == 0 goto label2;

        r2 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(1);

        $i2 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r8 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$Dr0UZNY6LcWGU__qkFYs5k2BcRI: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$Dr0UZNY6LcWGU-_qkFYs5k2BcRI' INSTANCE>;

        r12 = (java.util.function.Function) $r8;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistColonDelimitedSetToSettingLocked(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_shortcut_target_service", $i2, r2, r12);

     label2:
        $z2 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: boolean removeShortcutTargetLocked(int,android.content.ComponentName)>(0, r10);

        if $z2 == 0 goto label3;

        r11 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(0);

        $i1 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r7 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$pzT62oocPlJK8m3BrYpDJvlljn0: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$pzT62oocPlJK8m3BrYpDJvlljn0' INSTANCE>;

        r13 = (java.util.function.Function) $r7;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistColonDelimitedSetToSettingLocked(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_button_targets", $i1, r11, r13);

     label3:
        return;

     label4:
        return;
    }

    private void removeUser(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void restoreLegacyDisplayMagnificationNavBarIfNeededLocked(java.lang.String, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$PDMEev7fTw8IXlg6MUfoqAonhJ0' $r2;
        int $i0, $i1, i3, i4;
        boolean $z0, z4;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$IySyRJDkaJb7fkWGmJRSb1bpeTM' $r3;
        java.lang.Throwable $r4;
        java.lang.String $r8, r9;
        com.android.server.accessibility.AccessibilityUserState r10;
        android.util.ArraySet r14;
        java.lang.StringBuilder r15;
        java.util.function.Function r16, r17;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r9 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        if i3 < 30 goto label1;

        return;

     label1:
        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r9);

     label2:
        z4 = 1;

        if i4 != 1 goto label3;

        goto label4;

     label3:
        z4 = 0;

     label4:
        r10 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(0);

        r14 = new android.util.ArraySet;

        specialinvoke r14.<android.util.ArraySet: void <init>()>();

        $i0 = r10.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r2 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$PDMEev7fTw8IXlg6MUfoqAonhJ0: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$PDMEev7fTw8IXlg6MUfoqAonhJ0' INSTANCE>;

        r16 = (java.util.function.Function) $r2;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readColonDelimitedSettingToSet(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_button_targets", $i0, r14, r16);

        $z0 = interfaceinvoke r14.<java.util.Set: boolean contains(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

        if $z0 != z4 goto label5;

        return;

     label5:
        if z4 == 0 goto label6;

        interfaceinvoke r14.<java.util.Set: boolean add(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

        goto label7;

     label6:
        interfaceinvoke r14.<java.util.Set: boolean remove(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

     label7:
        $i1 = r10.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$IySyRJDkaJb7fkWGmJRSb1bpeTM: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$IySyRJDkaJb7fkWGmJRSb1bpeTM' INSTANCE>;

        r17 = (java.util.function.Function) $r3;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistColonDelimitedSetToSettingLocked(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_button_targets", $i1, r14, r17);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityButtonTargetsLocked(com.android.server.accessibility.AccessibilityUserState)>(r10);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r10);

        return;

     label8:
        $r4 := @caughtexception;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("number format is incorrect");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r8);

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label8;
    }

    private void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$heq1MRdQjg8BGWFbpV3PEpnDVcg' $r3;
        android.os.RemoteCallbackList $r4;
        long $l0;
        java.lang.Long $r5;
        android.os.Message $r6;
        com.android.internal.util.function.TriConsumer r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateRecommendedUiTimeoutLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$heq1MRdQjg8BGWFbpV3PEpnDVcg: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$heq1MRdQjg8BGWFbpV3PEpnDVcg' INSTANCE>;

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: android.os.RemoteCallbackList mUserClients>;

        $l0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: long getRecommendedTimeoutMillisLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        r7 = (com.android.internal.util.function.TriConsumer) $r3;

        $r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r7, r0, $r4, $r5);

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r6);

        return;
    }

    private void scheduleUpdateClientsIfNeededLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int i0, $i1, $i2, $i3, $i4;
        android.os.RemoteCallbackList $r2, $r8;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r3;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$5vwr6qV-eqdCr73CeDmVnsJlZHM' $r4;
        java.lang.Integer $r5, $r6;
        android.os.Message $r7;
        com.android.internal.util.function.TriConsumer r9;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int getClientStateLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        $i1 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getLastSentClientStateLocked()>();

        if $i1 == i0 goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        $i2 = virtualinvoke $r2.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i2 > 0 goto label1;

        $r8 = r1.<com.android.server.accessibility.AccessibilityUserState: android.os.RemoteCallbackList mUserClients>;

        $i4 = virtualinvoke $r8.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i4 <= 0 goto label2;

     label1:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setLastSentClientStateLocked(int)>(i0);

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r4 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$5vwr6qV_eqdCr73CeDmVnsJlZHM: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$5vwr6qV-eqdCr73CeDmVnsJlZHM' INSTANCE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $i3 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        r9 = (com.android.internal.util.function.TriConsumer) $r4;

        $r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r9, r0, $r5, $r6);

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r7);

     label2:
        return;
    }

    private void scheduleUpdateFingerprintGestureHandling(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$luI_C3QiJWsM08i8m3lx484SyyY' $r2;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r3;
        android.os.Message $r4;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r2 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$luI_C3QiJWsM08i8m3lx484SyyY: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$luI_C3QiJWsM08i8m3lx484SyyY' INSTANCE>;

        r5 = (java.util.function.BiConsumer) $r2;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r5, r0, r1);

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r4);

        return;
    }

    private void scheduleUpdateInputFilter(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$NCeV24lEcO5W6ZZr1GqGK-ylU9g' $r2;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r3;
        android.os.Message $r4;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r2 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$NCeV24lEcO5W6ZZr1GqGK_ylU9g: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$NCeV24lEcO5W6ZZr1GqGK-ylU9g' INSTANCE>;

        r5 = (java.util.function.BiConsumer) $r2;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r5, r0, r1);

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r4);

        return;
    }

    private void sendAccessibilityButtonToInputFilter(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.accessibility.AccessibilityInputFilter $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        virtualinvoke $r4.<com.android.server.accessibility.AccessibilityInputFilter: void notifyAccessibilityButtonClicked(int)>(i0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void sendAccessibilityEventLocked(android.view.accessibility.AccessibilityEvent, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.AccessibilityEvent r1;
        int i0;
        long $l1;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r2;
        com.android.server.accessibility.'-$$Lambda$X8i00nfnUx_qUoIgZixkfu6ddSY' $r3;
        java.lang.Integer $r4;
        android.os.Message $r5;
        com.android.internal.util.function.TriConsumer r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        i0 := @parameter1: int;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>($l1);

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r3 = <com.android.server.accessibility._$$Lambda$X8i00nfnUx_qUoIgZixkfu6ddSY: com.android.server.accessibility.'-$$Lambda$X8i00nfnUx_qUoIgZixkfu6ddSY' INSTANCE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6 = (com.android.internal.util.function.TriConsumer) $r3;

        $r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r6, r0, r1, $r4);

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    private void sendAccessibilityEventToInputFilter(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.accessibility.AccessibilityInputFilter $r2, $r3;
        java.lang.Throwable $r4;
        android.view.accessibility.AccessibilityEvent r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r5 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityInputFilter: void notifyAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r5);

     label2:
        exitmonitor r1;

     label3:
        virtualinvoke r5.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void sendServicesStateChanged(android.os.RemoteCallbackList, long)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.RemoteCallbackList r1, $r2;
        long l0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.os.RemoteCallbackList;

        l0 := @parameter1: long;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyClientsOfServicesStateChange(android.os.RemoteCallbackList,long)>($r2, l0);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyClientsOfServicesStateChange(android.os.RemoteCallbackList,long)>(r1, l0);

        return;
    }

    private void sendStateToAllClients(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;
        android.os.RemoteCallbackList $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendStateToClients(int,android.os.RemoteCallbackList)>(i0, $r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendStateToClients(int,int)>(i0, i1);

        return;
    }

    private void sendStateToClients(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;
        com.android.server.accessibility.AccessibilityUserState $r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserState(int)>(i1);

        $r2 = $r1.<com.android.server.accessibility.AccessibilityUserState: android.os.RemoteCallbackList mUserClients>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendStateToClients(int,android.os.RemoteCallbackList)>(i0, $r2);

        return;
    }

    private void sendStateToClients(int, android.os.RemoteCallbackList)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.os.RemoteCallbackList r1;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$5x6q6c6gSp0no05xKfQpGFp35yQ $r2;
        java.util.function.Consumer $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.RemoteCallbackList;

        $r2 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$5x6q6c6gSp0no05xKfQpGFp35yQ;

        specialinvoke $r2.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$5x6q6c6gSp0no05xKfQpGFp35yQ: void <init>(int)>(i0);

        $r3 = staticinvoke <com.android.internal.util.FunctionalUtils: java.util.function.Consumer ignoreRemoteException(com.android.internal.util.FunctionalUtils$RemoteExceptionIgnoringConsumer)>($r2);

        virtualinvoke r1.<android.os.RemoteCallbackList: void broadcast(java.util.function.Consumer)>($r3);

        return;
    }

    private void setGestureDetectionPassthroughRegionInternal(int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.accessibility.AccessibilityInputFilter $r2, $r3;
        java.lang.Throwable $r4;
        android.graphics.Region r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.graphics.Region;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityInputFilter: void setGestureDetectionPassthroughRegion(int,android.graphics.Region)>(i0, r5);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setTouchExplorationPassthroughRegionInternal(int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.accessibility.AccessibilityInputFilter $r2, $r3;
        java.lang.Throwable $r4;
        android.graphics.Region r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.graphics.Region;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityInputFilter: void setTouchExplorationPassthroughRegion(int,android.graphics.Region)>(i0, r5);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void showAccessibilityTargetsSelection(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i2;
        android.content.Intent $r2;
        java.lang.Class $r3, $r10;
        android.app.ActivityOptions $r6, $r7;
        android.content.Context $r8;
        android.os.UserHandle $r9;
        java.lang.String r11;
        android.os.Bundle r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("com.android.internal.intent.action.CHOOSE_ACCESSIBILITY_BUTTON");

        if i1 != 1 goto label1;

        $r10 = class "Lcom/android/internal/accessibility/dialog/AccessibilityShortcutChooserActivity;";

        r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r3 = class "Lcom/android/internal/accessibility/dialog/AccessibilityButtonChooserActivity;";

        r11 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

     label2:
        virtualinvoke $r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("android", r11);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(268468224);

        $r6 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

        $r7 = virtualinvoke $r6.<android.app.ActivityOptions: android.app.ActivityOptions setLaunchDisplayId(int)>(i0);

        r12 = virtualinvoke $r7.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $r9 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i2);

        virtualinvoke $r8.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>($r2, r12, $r9);

        return;
    }

    private void showEnableTouchExplorationDialog(com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        java.lang.String r2, $r15;
        com.android.server.accessibility.AccessibilityManagerService$4 r3;
        android.accessibilityservice.AccessibilityServiceInfo $r4;
        android.content.pm.ResolveInfo $r5;
        android.content.Context $r6, $r10, $r14;
        android.content.pm.PackageManager $r7;
        java.lang.CharSequence $r8;
        boolean $z0, $z1;
        android.app.AlertDialog $r9, $r18, $r20, $r21, $r22, r30;
        android.app.AlertDialog$Builder $r11, $r12, $r16, r26, r27, r28;
        java.lang.Object[] $r13;
        android.view.Window $r17, $r19;
        int $i0, $i1;
        java.lang.Throwable $r23;
        com.android.server.accessibility.AccessibilityServiceConnection r24;
        com.android.server.accessibility.AccessibilityUserState r25;
        com.android.server.accessibility.AccessibilityManagerService$3 r29;
        android.view.WindowManager$LayoutParams r31;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r24 := @parameter0: com.android.server.accessibility.AccessibilityServiceConnection;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = virtualinvoke r24.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $r5 = virtualinvoke $r4.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r8 = virtualinvoke $r5.<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>($r7);

        r2 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();

        r25 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        $z0 = virtualinvoke r25.<com.android.server.accessibility.AccessibilityUserState: boolean isTouchExplorationEnabledLocked()>();

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        if $r9 == null goto label5;

        $r22 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        $z1 = virtualinvoke $r22.<android.app.AlertDialog: boolean isShowing()>();

        if $z1 == 0 goto label5;

        exitmonitor r1;

     label4:
        return;

     label5:
        r26 = new android.app.AlertDialog$Builder;

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke r26.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>($r10);

        r27 = virtualinvoke r26.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>(16843605);

        r3 = new com.android.server.accessibility.AccessibilityManagerService$4;

        specialinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$4: void <init>(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityUserState,com.android.server.accessibility.AccessibilityServiceConnection)>(r0, r25, r24);

        r28 = virtualinvoke r27.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>(17039370, r3);

        r29 = new com.android.server.accessibility.AccessibilityManagerService$3;

        specialinvoke r29.<com.android.server.accessibility.AccessibilityManagerService$3: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        $r11 = virtualinvoke r28.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(17039360, r29);

        $r12 = virtualinvoke $r11.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>(17040086);

        $r14 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r2;

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17040085, $r13);

        $r16 = virtualinvoke $r12.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>($r15);

        r30 = virtualinvoke $r16.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog> = r30;

        $r17 = virtualinvoke r30.<android.app.AlertDialog: android.view.Window getWindow()>();

        virtualinvoke $r17.<android.view.Window: void setType(int)>(2003);

        $r18 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        $r19 = virtualinvoke $r18.<android.app.AlertDialog: android.view.Window getWindow()>();

        r31 = virtualinvoke $r19.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $i0 = r31.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i1 = $i0 | 16;

        r31.<android.view.WindowManager$LayoutParams: int privateFlags> = $i1;

        $r20 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        virtualinvoke $r20.<android.app.AlertDialog: void setCanceledOnTouchOutside(boolean)>(1);

        $r21 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        virtualinvoke $r21.<android.app.AlertDialog: void show()>();

        exitmonitor r1;

     label6:
        return;

     label7:
        $r23 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r23;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void switchUser(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r1, $r4;
        android.os.RemoteCallbackList $r2;
        android.content.Context $r3;
        android.os.UserManager $r5;
        java.util.List $r6;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$Gu-W_dQ2mWyy8l4tm19TzFxGbeM' $r7;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r8, $r10;
        android.os.Message $r9, $r14;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$zXJtauhUptSkQJSF-M55-grAVbo' $r11;
        java.lang.Integer $r12, $r13;
        boolean $z3, z4;
        java.lang.Throwable $r15;
        com.android.server.accessibility.AccessibilityUserState r16, r17;
        com.android.internal.util.function.TriConsumer r19;
        java.util.function.Consumer r20;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if $i2 != i0 goto label03;

        $z3 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mInitialized>;

        if $z3 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r16 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        virtualinvoke r16.<com.android.server.accessibility.AccessibilityUserState: void onSwitchToAnotherUserLocked()>();

        $r2 = r16.<com.android.server.accessibility.AccessibilityUserState: android.os.RemoteCallbackList mUserClients>;

        i1 = virtualinvoke $r2.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

     label04:
        z4 = 0;

        if i1 <= 0 goto label06;

     label05:
        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r11 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$zXJtauhUptSkQJSF_M55_grAVbo: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$zXJtauhUptSkQJSF-M55-grAVbo' INSTANCE>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i4 = r16.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        r19 = (com.android.internal.util.function.TriConsumer) $r11;

        $r14 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r19, r0, $r12, $r13);

        virtualinvoke $r10.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r14);

     label06:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r5 = (android.os.UserManager) $r4;

        $r6 = virtualinvoke $r5.<android.os.UserManager: java.util.List getUsers()>();

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i3 <= 1 goto label08;

     label07:
        z4 = 1;

     label08:
        r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId> = i0;

        r17 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityUserState)>(r17);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r17);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void migrateAccessibilityButtonSettingsIfNecessaryLocked(com.android.server.accessibility.AccessibilityUserState,java.lang.String)>(r17, null);

     label09:
        if z4 == 0 goto label11;

     label10:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r7 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$Gu_W_dQ2mWyy8l4tm19TzFxGbeM: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$Gu-W_dQ2mWyy8l4tm19TzFxGbeM' INSTANCE>;

        r20 = (java.util.function.Consumer) $r7;

        $r9 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.Consumer,java.lang.Object)>(r20, r0);

        virtualinvoke $r8.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessageDelayed(android.os.Message,long)>($r9, 3000L);

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r15 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void unlockUser(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r3;
        com.android.server.accessibility.AccessibilityUserState $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $i1 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveProfileParentLocked(int)>(i0);

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if $i1 != $i2 goto label2;

        $i3 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $r4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>($i3);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>($r4);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void updateAccessibilityButtonTargetsLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.ArrayList $r2, $r5;
        int $i0, $i1, $i2, i3, i4;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$rnbNCQJtFw_uMhQIrym3WuAg2Gc' $r4;
        java.lang.Object $r6;
        boolean $z1, $z2;
        com.android.server.accessibility.AccessibilityServiceConnection r7;
        android.util.ArraySet r8;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$GUp_mA8vmiAcg0R2_X_abqkp5m8 r9;
        java.util.function.Function r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label3;

        $r5 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.accessibility.AccessibilityServiceConnection) $r6;

        $z1 = r7.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestAccessibilityButton>;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r7.<com.android.server.accessibility.AccessibilityServiceConnection: boolean isAccessibilityButtonAvailableLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        virtualinvoke r7.<com.android.server.accessibility.AccessibilityServiceConnection: void notifyAccessibilityButtonAvailabilityChangedLocked(boolean)>($z2);

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        r8 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(0);

        i4 = interfaceinvoke r8.<java.util.Set: int size()>();

        if i4 != 0 goto label4;

        return;

     label4:
        r9 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$GUp_mA8vmiAcg0R2_X_abqkp5m8;

        specialinvoke r9.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$GUp_mA8vmiAcg0R2_X_abqkp5m8: void <init>(com.android.server.accessibility.AccessibilityUserState)>(r1);

        interfaceinvoke r8.<java.util.Set: boolean removeIf(java.util.function.Predicate)>(r9);

        $i1 = interfaceinvoke r8.<java.util.Set: int size()>();

        if i4 != $i1 goto label5;

        return;

     label5:
        $i2 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r4 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$rnbNCQJtFw_uMhQIrym3WuAg2Gc: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$rnbNCQJtFw_uMhQIrym3WuAg2Gc' INSTANCE>;

        r10 = (java.util.function.Function) $r4;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistColonDelimitedSetToSettingLocked(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_button_targets", $i2, r8, r10);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    private void updateAccessibilityEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        long l0;
        boolean z0, $z2, z3;
        android.content.ContentResolver r1;
        com.android.server.accessibility.UiAutomationManager $r2;
        int $i1;
        java.lang.Throwable $r3;
        com.android.server.accessibility.AccessibilityUserState r4;
        byte b2;
        android.content.Context $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        z0 = virtualinvoke $r2.<com.android.server.accessibility.UiAutomationManager: boolean isUiAutomationRunningLocked()>();

        b2 = 0;

        if z0 != 0 goto label2;

        $z2 = virtualinvoke r4.<com.android.server.accessibility.AccessibilityUserState: boolean isHandlingAccessibilityEventsLocked()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label4:
        if z3 == 0 goto label5;

        b2 = 1;

     label5:
        $i1 = r4.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accessibility_enabled", b2, $i1);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void updateAccessibilityShortcutKeyTargetsLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        android.util.ArraySet r2;
        int i0, $i1, $i2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$MhnuCBpuqBWYiFc16BnfACa9EFI' $r4;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$hFXGzgE7_VsXwOxnttp_rxyJY9U r5;
        java.util.function.Function r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r2 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(1);

        i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        if i0 != 0 goto label1;

        return;

     label1:
        r5 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$hFXGzgE7_VsXwOxnttp_rxyJY9U;

        specialinvoke r5.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$hFXGzgE7_VsXwOxnttp_rxyJY9U: void <init>(com.android.server.accessibility.AccessibilityUserState)>(r1);

        interfaceinvoke r2.<java.util.Set: boolean removeIf(java.util.function.Predicate)>(r5);

        $i1 = interfaceinvoke r2.<java.util.Set: int size()>();

        if i0 != $i1 goto label2;

        return;

     label2:
        $i2 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r4 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$MhnuCBpuqBWYiFc16BnfACa9EFI: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$MhnuCBpuqBWYiFc16BnfACa9EFI' INSTANCE>;

        r6 = (java.util.function.Function) $r4;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistColonDelimitedSetToSettingLocked(java.lang.String,int,java.util.Set,java.util.function.Function)>("accessibility_shortcut_target_service", $i2, r2, r6);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    private void updateFilterKeyEventsLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int i0, $i1, $i2, i3;
        com.android.server.accessibility.AccessibilityServiceConnection r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r2 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        $z0 = r2.<com.android.server.accessibility.AccessibilityServiceConnection: boolean mRequestFilterKeyEvents>;

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityServiceConnection: int getCapabilities()>();

        $i2 = $i1 & 8;

        if $i2 == 0 goto label2;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setFilterKeyEventsEnabledLocked(boolean)>(1);

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setFilterKeyEventsEnabledLocked(boolean)>(0);

        return;
    }

    private void updateFingerprintGestureHandling(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i2;
        long l1;
        android.hardware.fingerprint.IFingerprintService r1;
        com.android.server.accessibility.FingerprintGestureDispatcher r2, $r3, r17;
        android.content.pm.PackageManager $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r10, r14;
        com.android.server.accessibility.AccessibilityServiceConnection $r6;
        android.os.IBinder $r7;
        android.content.Context $r8;
        android.content.res.Resources $r9;
        java.lang.Throwable $r11, $r12;
        com.android.server.accessibility.AccessibilityUserState r13;
        java.util.ArrayList r15;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r13 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r14 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label01:
        r15 = r13.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.FingerprintGestureDispatcher mFingerprintGestureDispatcher>;

        if $r3 != null goto label14;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager>;

        $z0 = virtualinvoke $r4.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.fingerprint");

        if $z0 == 0 goto label14;

        i0 = interfaceinvoke r15.<java.util.List: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label14;

     label04:
        $r5 = interfaceinvoke r15.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        $z1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityServiceConnection: boolean isCapturingFingerprintGestures()>();

        if $z1 == 0 goto label13;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r7 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("fingerprint");

        r1 = staticinvoke <android.hardware.fingerprint.IFingerprintService$Stub: android.hardware.fingerprint.IFingerprintService asInterface(android.os.IBinder)>($r7);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        if r1 == null goto label13;

     label08:
        r2 = new com.android.server.accessibility.FingerprintGestureDispatcher;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        specialinvoke r2.<com.android.server.accessibility.FingerprintGestureDispatcher: void <init>(android.hardware.fingerprint.IFingerprintService,android.content.res.Resources,java.lang.Object)>(r1, $r9, $r10);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.FingerprintGestureDispatcher mFingerprintGestureDispatcher> = r2;

     label09:
        goto label14;

     label10:
        $r12 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label12:
        throw $r12;

     label13:
        i2 = i2 + 1;

        goto label03;

     label14:
        exitmonitor r14;

     label15:
        r17 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.FingerprintGestureDispatcher mFingerprintGestureDispatcher>;

        if r17 == null goto label16;

        virtualinvoke r17.<com.android.server.accessibility.FingerprintGestureDispatcher: void updateClientList(java.util.List)>(r15);

     label16:
        return;

     label17:
        $r11 := @caughtexception;

     label18:
        exitmonitor r14;

     label19:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void updateInputFilter(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        com.android.server.accessibility.UiAutomationManager $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13;
        com.android.server.wm.WindowManagerInternal $r3;
        int $i0, $i10;
        com.android.server.accessibility.AccessibilityInputFilter $r4, $r5, r9, r10, $r11;
        android.content.Context $r6;
        java.lang.Throwable $r7;
        com.android.server.accessibility.AccessibilityUserState r8;
        short s1, s2, s3, s4, s5, s6, s7, s8, s9;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r8 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.UiAutomationManager: boolean suppressingAccessibilityServicesLocked()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        r9 = null;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

        s1 = 0;

     label02:
        $z1 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isDisplayMagnificationEnabledLocked()>();

        if $z1 == 0 goto label04;

     label03:
        s1 = 1;

     label04:
        s2 = s1;

     label05:
        $z2 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isShortcutMagnificationEnabledLocked()>();

        if $z2 == 0 goto label07;

     label06:
        s2 = s1 | 64;

     label07:
        s3 = s2;

     label08:
        $z3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean userHasMagnificationServicesLocked(com.android.server.accessibility.AccessibilityUserState)>(r8);

        if $z3 == 0 goto label10;

     label09:
        s3 = s2 | 32;

     label10:
        s4 = s3;

     label11:
        $z4 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isHandlingAccessibilityEventsLocked()>();

        if $z4 == 0 goto label20;

     label12:
        s4 = s3;

     label13:
        $z9 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isTouchExplorationEnabledLocked()>();

        if $z9 == 0 goto label20;

     label14:
        s5 = s3 | 2;

        s6 = s5;

     label15:
        $z10 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isServiceHandlesDoubleTapEnabledLocked()>();

        if $z10 == 0 goto label17;

     label16:
        s6 = s5 | 128;

     label17:
        s4 = s6;

     label18:
        $z11 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isMultiFingerGesturesEnabledLocked()>();

        if $z11 == 0 goto label20;

     label19:
        s4 = s6 | 256;

     label20:
        s7 = s4;

     label21:
        $z12 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isFilterKeyEventsEnabledLocked()>();

        if $z12 == 0 goto label23;

     label22:
        s7 = s4 | 4;

     label23:
        s8 = s7;

     label24:
        $z5 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isAutoclickEnabledLocked()>();

        if $z5 == 0 goto label26;

     label25:
        s8 = s7 | 8;

     label26:
        s9 = s8;

     label27:
        $z6 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isPerformGesturesEnabledLocked()>();

        if $z6 == 0 goto label29;

     label28:
        s9 = s8 | 16;

     label29:
        if s9 == 0 goto label35;

        z13 = 0;

     label30:
        $z8 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z8 != 0 goto label33;

        r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter> = 1;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r5 != null goto label31;

        r10 = new com.android.server.accessibility.AccessibilityInputFilter;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke r10.<com.android.server.accessibility.AccessibilityInputFilter: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService)>($r6, r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter> = r10;

     label31:
        r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

     label32:
        z13 = 1;

     label33:
        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        $i10 = r8.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        virtualinvoke $r11.<com.android.server.accessibility.AccessibilityInputFilter: void setUserAndEnabledFeatures(int,int)>($i10, s9);

     label34:
        goto label38;

     label35:
        z13 = 0;

        r9 = null;

     label36:
        $z7 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z7 == 0 goto label38;

        r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter> = 0;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        $i0 = r8.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        virtualinvoke $r4.<com.android.server.accessibility.AccessibilityInputFilter: void setUserAndEnabledFeatures(int,int)>($i0, 0);

     label37:
        r9 = null;

        z13 = 1;

     label38:
        exitmonitor r1;

     label39:
        if z13 == 0 goto label40;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerInternal: void setInputFilter(android.view.IInputFilter)>(r9);

     label40:
        return;

     label41:
        $r7 := @caughtexception;

     label42:
        exitmonitor r1;

     label43:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label41;
        catch java.lang.Throwable from label05 to label06 with label41;
        catch java.lang.Throwable from label08 to label09 with label41;
        catch java.lang.Throwable from label11 to label12 with label41;
        catch java.lang.Throwable from label13 to label14 with label41;
        catch java.lang.Throwable from label15 to label16 with label41;
        catch java.lang.Throwable from label18 to label19 with label41;
        catch java.lang.Throwable from label21 to label22 with label41;
        catch java.lang.Throwable from label24 to label25 with label41;
        catch java.lang.Throwable from label27 to label28 with label41;
        catch java.lang.Throwable from label30 to label31 with label41;
        catch java.lang.Throwable from label31 to label32 with label41;
        catch java.lang.Throwable from label33 to label34 with label41;
        catch java.lang.Throwable from label36 to label37 with label41;
        catch java.lang.Throwable from label38 to label39 with label41;
        catch java.lang.Throwable from label42 to label43 with label41;
    }

    private void updateLegacyCapabilitiesLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        android.accessibilityservice.AccessibilityServiceInfo r2;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        android.content.pm.ServiceInfo $r6, $r9, $r10;
        android.content.pm.ApplicationInfo $r7;
        android.content.ComponentName $r8;
        java.lang.String $r11, $r12;
        java.util.Set $r13;
        boolean $z0;
        android.content.pm.ResolveInfo r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i6 = 0;

     label1:
        if i6 >= i0 goto label3;

        $r4 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i6);

        r2 = (android.accessibilityservice.AccessibilityServiceInfo) $r5;

        r14 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $i1 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i2 = $i1 & 2;

        if $i2 != 0 goto label2;

        $r6 = r14.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r7 = $r6.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r7.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 > 17 goto label2;

        $r8 = new android.content.ComponentName;

        $r9 = r14.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r12 = $r9.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r10 = r14.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r11 = $r10.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r8.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r12, $r11);

        $r13 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        $z0 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        $i4 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i5 = $i4 | 2;

        virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: void setCapabilities(int)>($i5);

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        return;
    }

    private void updateMagnificationLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        com.android.server.accessibility.MagnificationController r1, $r4, $r7, r9, r10;
        com.android.server.accessibility.UiAutomationManager $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3, $r5;
        android.view.Display $r6, r12;
        com.android.server.accessibility.AccessibilityUserState r8;
        java.util.ArrayList r11;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r8 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $i2 = r8.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if $i2 == $i1 goto label01;

        return;

     label01:
        r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController mMagnificationController>;

        if r9 == null goto label02;

        $i5 = r8.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        virtualinvoke r9.<com.android.server.accessibility.MagnificationController: void setUserId(int)>($i5);

     label02:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.UiAutomationManager: boolean suppressingAccessibilityServicesLocked()>();

        if $z0 == 0 goto label03;

        r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController mMagnificationController>;

        if r10 == null goto label03;

        virtualinvoke r10.<com.android.server.accessibility.MagnificationController: void unregisterAll()>();

        return;

     label03:
        r11 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.ArrayList getValidDisplayList()>();

        $z1 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isDisplayMagnificationEnabledLocked()>();

        if $z1 != 0 goto label09;

        $z2 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityUserState: boolean isShortcutMagnificationEnabledLocked()>();

        if $z2 == 0 goto label04;

        goto label09;

     label04:
        i6 = 0;

     label05:
        $i4 = virtualinvoke r11.<java.util.ArrayList: int size()>();

        if i6 >= $i4 goto label08;

        $r5 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r6 = (android.view.Display) $r5;

        i0 = virtualinvoke $r6.<android.view.Display: int getDisplayId()>();

        $z3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean userHasListeningMagnificationServicesLocked(com.android.server.accessibility.AccessibilityUserState,int)>(r8, i0);

        if $z3 == 0 goto label06;

        $r7 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController getMagnificationController()>();

        virtualinvoke $r7.<com.android.server.accessibility.MagnificationController: void register(int)>(i0);

        goto label07;

     label06:
        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController mMagnificationController>;

        if r1 == null goto label07;

        virtualinvoke r1.<com.android.server.accessibility.MagnificationController: void unregister(int)>(i0);

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        return;

     label09:
        i7 = 0;

     label10:
        $i8 = virtualinvoke r11.<java.util.ArrayList: int size()>();

        if i7 >= $i8 goto label11;

        $r3 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r12 = (android.view.Display) $r3;

        $r4 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController getMagnificationController()>();

        $i3 = virtualinvoke r12.<android.view.Display: int getDisplayId()>();

        virtualinvoke $r4.<com.android.server.accessibility.MagnificationController: void register(int)>($i3);

        i7 = i7 + 1;

        goto label10;

     label11:
        return;
    }

    private void updatePerformGesturesLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        com.android.server.accessibility.AccessibilityServiceConnection $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r3 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r5 = (com.android.server.accessibility.AccessibilityServiceConnection) $r4;

        $i1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilityServiceConnection: int getCapabilities()>();

        $i2 = $i1 & 32;

        if $i2 == 0 goto label2;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setPerformGesturesEnabledLocked(boolean)>(1);

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setPerformGesturesEnabledLocked(boolean)>(0);

        return;
    }

    private void updateRecommendedUiTimeoutLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, i8, i9, i10, i11, i12;
        java.util.ArrayList r2;
        java.lang.Object $r3, $r6;
        com.android.server.accessibility.AccessibilityServiceConnection $r4, $r7;
        android.accessibilityservice.AccessibilityServiceInfo $r5, $r8;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        i0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getUserNonInteractiveUiTimeoutLocked()>();

        i1 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: int getUserInteractiveUiTimeoutLocked()>();

        if i0 == 0 goto label1;

        i2 = i0;

        i3 = i1;

        if i1 != 0 goto label7;

     label1:
        i4 = 0;

        i5 = 0;

        r2 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i6 = 0;

     label2:
        $i7 = interfaceinvoke r2.<java.util.List: int size()>();

        if i6 >= $i7 goto label5;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6);

        $r4 = (com.android.server.accessibility.AccessibilityServiceConnection) $r3;

        $r5 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        i8 = virtualinvoke $r5.<android.accessibilityservice.AccessibilityServiceInfo: int getInteractiveUiTimeoutMillis()>();

        i9 = i5;

        if i5 >= i8 goto label3;

        i9 = i8;

     label3:
        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6);

        $r7 = (com.android.server.accessibility.AccessibilityServiceConnection) $r6;

        $r8 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        i10 = virtualinvoke $r8.<android.accessibilityservice.AccessibilityServiceInfo: int getNonInteractiveUiTimeoutMillis()>();

        i11 = i4;

        if i4 >= i10 goto label4;

        i11 = i10;

     label4:
        i6 = i6 + 1;

        i4 = i11;

        i5 = i9;

        goto label2;

     label5:
        i12 = i0;

        if i0 != 0 goto label6;

        i12 = i4;

     label6:
        i2 = i12;

        i3 = i1;

        if i1 != 0 goto label7;

        i3 = i5;

        i2 = i12;

     label7:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setNonInteractiveUiTimeoutLocked(int)>(i2);

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: void setInteractiveUiTimeoutLocked(int)>(i3);

        return;
    }

    private void updateRelevantEventsLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$OoFjRI6y1WlU95cVLgWQrJ3H0b0 $r2;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r2 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$OoFjRI6y1WlU95cVLgWQrJ3H0b0;

        specialinvoke $r2.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$OoFjRI6y1WlU95cVLgWQrJ3H0b0: void <init>(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityUserState)>(r0, r1);

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void updateServicesLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0, r39;
        com.android.server.accessibility.AccessibilityUserState r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.accessibilityservice.AccessibilityServiceInfo r2, $r14;
        android.content.ComponentName r3;
        int i0, $i1, $i2, $i3, i5, i6, i7, i8;
        java.lang.Object $r4, $r9, $r12, $r19, $r21, $r29;
        android.os.UserManagerInternal $r5;
        java.util.List $r6, $r18;
        java.util.ArrayList $r7, $r11, $r26;
        android.util.IntArray $r8, $r10, $r17;
        com.android.server.accessibility.AccessibilityServiceConnection $r13, $r27, r41, r44;
        android.content.pm.ServiceInfo $r15;
        android.content.pm.ApplicationInfo $r16;
        java.lang.String $r20, $r38;
        java.util.Set $r22, $r23, $r24;
        com.android.server.accessibility.UiAutomationManager $r25;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r28;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r30;
        com.android.server.wm.WindowManagerInternal $r31;
        com.android.server.accessibility.SystemActionPerformer $r32;
        com.android.server.wm.ActivityTaskManagerInternal $r33;
        com.android.server.accessibility.AccessibilityWindowManager $r34;
        java.lang.StringBuilder $r35;
        java.util.Map r40;
        android.content.Context r43;
        android.content.pm.ResolveInfo r45;
        android.media.AudioManagerInternal r46;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r39 = r0;

        r40 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Map mComponentNameToServiceMap>;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r5 = (android.os.UserManagerInternal) $r4;

        $i1 = r1.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        z0 = virtualinvoke $r5.<android.os.UserManagerInternal: boolean isUserUnlockingOrUnlocked(int)>($i1);

        $r6 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        i5 = interfaceinvoke $r6.<java.util.List: int size()>();

        i6 = 0;

     label01:
        if i6 >= i5 goto label11;

        $r18 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i6);

        r2 = (android.accessibilityservice.AccessibilityServiceInfo) $r19;

        $r20 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()>();

        r3 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r20);

        $r21 = interfaceinvoke r40.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r41 = (com.android.server.accessibility.AccessibilityServiceConnection) $r21;

        if z0 != 0 goto label02;

        $z6 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: boolean isDirectBootAware()>();

        if $z6 != 0 goto label02;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring non-encryption-aware service ");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r38);

        goto label10;

     label02:
        $r22 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set getBindingServicesLocked()>();

        $z1 = interfaceinvoke $r22.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label10;

        $r23 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set getCrashedServicesLocked()>();

        $z2 = interfaceinvoke $r23.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z2 == 0 goto label03;

        goto label10;

     label03:
        $r24 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $z3 = interfaceinvoke $r24.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z3 == 0 goto label08;

        $r25 = r39.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        $z4 = virtualinvoke $r25.<com.android.server.accessibility.UiAutomationManager: boolean suppressingAccessibilityServicesLocked()>();

        if $z4 != 0 goto label07;

        if r41 != null goto label04;

        r43 = r39.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        i0 = <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter>;

        $i3 = i0 + 1;

        <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter> = $i3;

        $r27 = new com.android.server.accessibility.AccessibilityServiceConnection;

        $r28 = r39.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r29 = r39.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        $r30 = r39.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r31 = r39.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        $r32 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer getSystemActionPerformer()>();

        $r34 = r39.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r33 = r39.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerService>;

        specialinvoke $r27.<com.android.server.accessibility.AccessibilityServiceConnection: void <init>(com.android.server.accessibility.AccessibilityUserState,android.content.Context,android.content.ComponentName,android.accessibilityservice.AccessibilityServiceInfo,int,android.os.Handler,java.lang.Object,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.SystemActionPerformer,com.android.server.accessibility.AccessibilityWindowManager,com.android.server.wm.ActivityTaskManagerInternal)>(r1, r43, r3, r2, i0, $r28, $r29, $r30, r0, $r31, $r32, $r34, $r33);

        r44 = $r27;

        goto label06;

     label04:
        $r26 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $z5 = virtualinvoke $r26.<java.util.ArrayList: boolean contains(java.lang.Object)>(r41);

        if $z5 == 0 goto label05;

        r39 = r0;

        goto label10;

     label05:
        r44 = r41;

     label06:
        virtualinvoke r44.<com.android.server.accessibility.AccessibilityServiceConnection: void bindLocked()>();

        r39 = r0;

        goto label10;

     label07:
        goto label08;

     label08:
        if r41 == null goto label09;

        virtualinvoke r41.<com.android.server.accessibility.AccessibilityServiceConnection: void unbindLocked()>();

        r39 = r0;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void removeShortcutTargetForUnboundServiceLocked(com.android.server.accessibility.AccessibilityUserState,com.android.server.accessibility.AccessibilityServiceConnection)>(r1, r41);

        goto label10;

     label09:
        r39 = r0;

        goto label10;

     label10:
        i6 = i6 + 1;

        goto label01;

     label11:
        $r7 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i7 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r8 = r39.<com.android.server.accessibility.AccessibilityManagerService: android.util.IntArray mTempIntArray>;

        virtualinvoke $r8.<android.util.IntArray: void clear()>();

        i8 = 0;

     label12:
        if i8 >= i7 goto label14;

        $r11 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r13 = (com.android.server.accessibility.AccessibilityServiceConnection) $r12;

        $r14 = $r13.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        r45 = virtualinvoke $r14.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        if r45 == null goto label13;

        $r17 = r39.<com.android.server.accessibility.AccessibilityManagerService: android.util.IntArray mTempIntArray>;

        $r15 = r45.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r16 = $r15.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r16.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke $r17.<android.util.IntArray: void add(int)>($i2);

     label13:
        i8 = i8 + 1;

        goto label12;

     label14:
        $r9 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/media/AudioManagerInternal;");

        r46 = (android.media.AudioManagerInternal) $r9;

        if r46 == null goto label15;

        $r10 = r39.<com.android.server.accessibility.AccessibilityManagerService: android.util.IntArray mTempIntArray>;

        virtualinvoke r46.<android.media.AudioManagerInternal: void setAccessibilityServiceUids(android.util.IntArray)>($r10);

     label15:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateAccessibilityEnabledSettingLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    private void updateTouchExplorationLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean z0, $z3, $z5, z6, z7, z8;
        int i0, $i2, i3;
        long l1;
        com.android.server.accessibility.UiAutomationManager $r1;
        java.util.ArrayList $r2, $r4;
        android.content.Context $r3;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        com.android.server.accessibility.AccessibilityUserState r7;
        com.android.server.accessibility.AccessibilityServiceConnection r8;
        android.content.ContentResolver r9;
        byte b4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r7 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        z0 = virtualinvoke $r1.<com.android.server.accessibility.UiAutomationManager: boolean isTouchExplorationEnabledLocked()>();

        $r2 = r7.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i3 = 0;

     label01:
        z6 = z0;

        z7 = 0;

        z8 = 0;

        if i3 >= i0 goto label03;

        $r4 = r7.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r8 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        $z5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean canRequestAndRequestsTouchExplorationLocked(com.android.server.accessibility.AccessibilityServiceConnection,com.android.server.accessibility.AccessibilityUserState)>(r8, r7);

        if $z5 == 0 goto label02;

        z6 = 1;

        z7 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityServiceConnection: boolean isServiceHandlesDoubleTapEnabled()>();

        z8 = virtualinvoke r8.<com.android.server.accessibility.AccessibilityServiceConnection: boolean isMultiFingerGesturesEnabled()>();

        goto label03;

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        $z3 = virtualinvoke r7.<com.android.server.accessibility.AccessibilityUserState: boolean isTouchExplorationEnabledLocked()>();

        if z6 == $z3 goto label10;

        virtualinvoke r7.<com.android.server.accessibility.AccessibilityUserState: void setTouchExplorationEnabledLocked(boolean)>(z6);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        r9 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label05:
        if z6 == 0 goto label06;

        b4 = 1;

        goto label07;

     label06:
        b4 = 0;

     label07:
        $i2 = r7.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r9, "touch_exploration_enabled", b4, $i2);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label10;

     label09:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

     label10:
        virtualinvoke r7.<com.android.server.accessibility.AccessibilityUserState: void setServiceHandlesDoubleTapLocked(boolean)>(z7);

        virtualinvoke r7.<com.android.server.accessibility.AccessibilityUserState: void setMultiFingerGesturesLocked(boolean)>(z8);

        return;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private void updateWindowsForAccessibilityCallbackLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1, $i2, i3, i4, $i5;
        com.android.server.accessibility.UiAutomationManager $r1;
        java.lang.Object $r2, $r5;
        com.android.server.accessibility.AccessibilityWindowManager $r3, $r4;
        com.android.server.accessibility.AccessibilityServiceConnection $r6;
        boolean $z0, z1;
        com.android.server.accessibility.AccessibilityUserState r7;
        java.util.ArrayList r8, r9;
        android.view.Display r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r7 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        z1 = virtualinvoke $r1.<com.android.server.accessibility.UiAutomationManager: boolean canRetrieveInteractiveWindowsLocked()>();

        r8 = r7.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i0 = interfaceinvoke r8.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if z1 != 0 goto label3;

        if i3 >= i0 goto label3;

        $r5 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        $z0 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityServiceConnection: boolean canRetrieveInteractiveWindowsLocked()>();

        if $z0 == 0 goto label2;

        virtualinvoke r7.<com.android.server.accessibility.AccessibilityUserState: void setAccessibilityFocusOnlyInActiveWindow(boolean)>(0);

        z1 = 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r7.<com.android.server.accessibility.AccessibilityUserState: void setAccessibilityFocusOnlyInActiveWindow(boolean)>(1);

        r9 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.ArrayList getValidDisplayList()>();

        i4 = 0;

     label4:
        $i5 = virtualinvoke r9.<java.util.ArrayList: int size()>();

        if i4 >= $i5 goto label7;

        $r2 = virtualinvoke r9.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r10 = (android.view.Display) $r2;

        if r10 == null goto label6;

        if z1 == 0 goto label5;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i2 = virtualinvoke r10.<android.view.Display: int getDisplayId()>();

        virtualinvoke $r4.<com.android.server.accessibility.AccessibilityWindowManager: void startTrackingWindows(int)>($i2);

        goto label6;

     label5:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i1 = virtualinvoke r10.<android.view.Display: int getDisplayId()>();

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: void stopTrackingWindows(int)>($i1);

     label6:
        i4 = i4 + 1;

        goto label4;

     label7:
        return;
    }

    private boolean userHasListeningMagnificationServicesLocked(com.android.server.accessibility.AccessibilityUserState, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, i2;
        com.android.server.accessibility.AccessibilityServiceConnection r1;
        java.lang.Object $r2;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r3;
        boolean $z0, $z1;
        com.android.server.accessibility.AccessibilityUserState r4;
        java.util.ArrayList r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter1: int;

        r5 = r4.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i2 = 0;

        i1 = interfaceinvoke r5.<java.util.List: int size()>();

     label1:
        if i2 >= i1 goto label3;

        $r2 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i2);

        r1 = (com.android.server.accessibility.AccessibilityServiceConnection) $r2;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z0 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canControlMagnification(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r1);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: boolean isMagnificationCallbackEnabled(int)>(i0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean userHasMagnificationServicesLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.util.ArrayList r1;
        int i0, i1;
        java.lang.Object $r2;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r3;
        boolean $z0;
        com.android.server.accessibility.AccessibilityUserState r4;
        com.android.server.accessibility.AccessibilityServiceConnection r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r1 = r4.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i1 = 0;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (com.android.server.accessibility.AccessibilityServiceConnection) $r2;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z0 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canControlMagnification(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r5);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean accessibilityFocusOnlyInActiveWindow()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.accessibility.AccessibilityWindowManager $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        z0 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int addAccessibilityInteractionConnection(android.view.IWindow, android.os.IBinder, android.view.accessibility.IAccessibilityInteractionConnection, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.IWindow r1;
        android.os.IBinder r2;
        android.view.accessibility.IAccessibilityInteractionConnection r3;
        java.lang.String r4;
        int i0, $i1;
        com.android.server.accessibility.AccessibilityWindowManager $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.view.accessibility.IAccessibilityInteractionConnection;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>(r1, r2, r3, r4, i0);

        return $i1;
    }

    public long addClient(android.view.accessibility.IAccessibilityManagerClient, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i8;
        com.android.server.accessibility.AccessibilityUserState r2;
        com.android.server.accessibility.AccessibilityManagerService$Client r3;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r4, $r5;
        boolean $z0;
        android.os.RemoteCallbackList $r6, $r7;
        java.lang.Throwable $r8;
        android.view.accessibility.IAccessibilityManagerClient r9;
        long l7, l9;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r9 := @parameter0: android.view.accessibility.IAccessibilityManagerClient;

        i6 := @parameter1: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        i0 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i6);

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i0);

        r3 = new com.android.server.accessibility.AccessibilityManagerService$Client;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$Client: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.view.accessibility.IAccessibilityManagerClient,int,com.android.server.accessibility.AccessibilityUserState,com.android.server.accessibility.AccessibilityManagerService$1)>(r0, r9, $i1, r2, null);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $z0 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean isCallerInteractingAcrossUsers(int)>(i6);

        if $z0 == 0 goto label04;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        virtualinvoke $r7.<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>(r9, r3);

     label02:
        $i4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int getClientStateLocked(com.android.server.accessibility.AccessibilityUserState)>(r2);

        $i5 = r3.<com.android.server.accessibility.AccessibilityManagerService$Client: int mLastSentRelevantEventTypes>;

        l7 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i4, $i5);

        exitmonitor r1;

     label03:
        return l7;

     label04:
        $r6 = r2.<com.android.server.accessibility.AccessibilityUserState: android.os.RemoteCallbackList mUserClients>;

        virtualinvoke $r6.<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>(r9, r3);

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if i0 != $i2 goto label06;

        i8 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int getClientStateLocked(com.android.server.accessibility.AccessibilityUserState)>(r2);

     label05:
        goto label07;

     label06:
        i8 = 0;

     label07:
        $i3 = r3.<com.android.server.accessibility.AccessibilityManagerService$Client: int mLastSentRelevantEventTypes>;

        l9 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>(i8, $i3);

        exitmonitor r1;

     label08:
        return l9;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void associateEmbeddedHierarchy(android.os.IBinder, android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.IBinder r1, r5;
        java.lang.Object r2;
        com.android.server.accessibility.AccessibilityWindowManager $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.os.IBinder;

        r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: void associateEmbeddedHierarchyLocked(android.os.IBinder,android.os.IBinder)>(r5, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void disassociateEmbeddedHierarchy(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityWindowManager $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: void disassociateEmbeddedHierarchyLocked(android.os.IBinder)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.io.PrintWriter r1, $r5;
        java.lang.String[] r2;
        java.lang.Object r3, $r13;
        int i0, $i1, i2;
        android.content.Context $r4;
        boolean $z0, $z1;
        java.lang.String $r6;
        android.util.SparseArray $r8, $r12;
        com.android.server.accessibility.UiAutomationManager $r9, $r11;
        com.android.server.accessibility.AccessibilityWindowManager $r10;
        com.android.server.accessibility.AccessibilityUserState $r14;
        java.lang.Throwable $r15;
        java.io.FileDescriptor r16;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r16 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "AccessibilityManagerService", r1);

        if $z0 != 0 goto label01;

        return;

     label01:
        r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label02:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ACCESSIBILITY MANAGER (dumpsys accessibility)");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r5 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("currentUserId=");

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        virtualinvoke $r5.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r6);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        i0 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label07;

     label05:
        $r12 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r14 = (com.android.server.accessibility.AccessibilityUserState) $r13;

        virtualinvoke $r14.<com.android.server.accessibility.AccessibilityUserState: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r16, r1, r2);

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        $z1 = virtualinvoke $r9.<com.android.server.accessibility.UiAutomationManager: boolean isUiAutomationRunningLocked()>();

        if $z1 == 0 goto label08;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        virtualinvoke $r11.<com.android.server.accessibility.UiAutomationManager: void dumpUiAutomationService(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r16, r1, r2);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label08:
        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r10.<com.android.server.accessibility.AccessibilityWindowManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r16, r1, r2);

        exitmonitor r3;

     label09:
        return;

     label10:
        $r15 := @caughtexception;

     label11:
        exitmonitor r3;

     label12:
        throw $r15;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean getAccessibilityFocusClickPointInScreen(android.graphics.Point)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Point r1;
        com.android.server.accessibility.AccessibilityManagerService$InteractionBridge $r2;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.graphics.Point;

        $r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge getInteractionBridge()>();

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$InteractionBridge: boolean getAccessibilityFocusClickPointInScreenNotLocked(android.graphics.Point)>(r1);

        return $z0;
    }

    public java.util.List getAccessibilityShortcutTargets(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1;
        android.content.Context $r1;
        java.lang.SecurityException $r2;
        java.util.List $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_ACCESSIBILITY");

        if $i1 != 0 goto label1;

        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List getAccessibilityShortcutTargetsInternal(int)>(i0);

        return $r3;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("getAccessibilityShortcutService requires the MANAGE_ACCESSIBILITY permission");

        throw $r2;
    }

    public int getAccessibilityWindowId(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        com.android.server.accessibility.AccessibilityWindowManager $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        java.lang.SecurityException r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        if $i2 != 1000 goto label3;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i3 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        i0 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: int findWindowIdLocked(int,android.os.IBinder)>($i3, r4);

        exitmonitor r1;

     label2:
        return i0;

     label3:
        r5 = new java.lang.SecurityException;

        specialinvoke r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Only SYSTEM can call getAccessibilityWindowId");

        throw r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getActiveWindowId()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int $i0, $i1;
        com.android.server.accessibility.AccessibilityWindowManager $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $i1 = virtualinvoke $r1.<com.android.server.accessibility.AccessibilityWindowManager: int getActiveWindowId(int)>($i0);

        return $i1;
    }

    boolean getBindInstantServiceAllowed(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.accessibility.AccessibilityUserState $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i0);

        z0 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityUserState: boolean getBindInstantServiceAllowedLocked()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1;
        android.os.IBinder r1;
        com.android.server.accessibility.AccessibilityWindowManager $r2;
        com.android.server.wm.WindowManagerInternal $r3;
        android.view.MagnificationSpec $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        r1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder getWindowTokenForUserAndWindowIdLocked(int,int)>($i1, i0);

        if r1 == null goto label1;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowManagerInternal: android.view.MagnificationSpec getCompatibleMagnificationSpecForWindow(android.os.IBinder)>(r1);

        return $r4;

     label1:
        return null;
    }

    public int getCurrentUserIdLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        return $i0;
    }

    public java.util.List getEnabledAccessibilityServiceList(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object r1, $r6;
        java.util.ArrayList r2, r11;
        com.android.server.accessibility.AccessibilityServiceConnection r3;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r4;
        com.android.server.accessibility.UiAutomationManager $r5;
        boolean $z0;
        android.accessibilityservice.AccessibilityServiceInfo $r7;
        java.lang.Throwable $r8;
        com.android.server.accessibility.AccessibilityUserState r9;
        java.util.List r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $i2 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i5);

        r9 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>($i2);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        $z0 = virtualinvoke $r5.<com.android.server.accessibility.UiAutomationManager: boolean suppressingAccessibilityServicesLocked()>();

        if $z0 == 0 goto label03;

        r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r1;

     label02:
        return r10;

     label03:
        r11 = r9.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i1 = interfaceinvoke r11.<java.util.List: int size()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(i1);

     label04:
        i6 = 0;

     label05:
        if i6 >= i1 goto label08;

     label06:
        $r6 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i6);

        r3 = (com.android.server.accessibility.AccessibilityServiceConnection) $r6;

        $i3 = r3.<com.android.server.accessibility.AccessibilityServiceConnection: int mFeedbackType>;

        $i4 = $i3 & i0;

        if $i4 == 0 goto label07;

        $r7 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        exitmonitor r1;

     label09:
        return r2;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public com.android.server.accessibility.FingerprintGestureDispatcher getFingerprintGestureDispatcher()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.FingerprintGestureDispatcher $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.FingerprintGestureDispatcher mFingerprintGestureDispatcher>;

        return $r1;
    }

    public java.util.List getInstalledAccessibilityServiceList(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        com.android.server.accessibility.AccessibilityUserState $r3;
        java.lang.Throwable $r4;
        java.util.List r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $i1 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i0);

        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>($i1);

        r5 = $r3.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public com.android.server.accessibility.KeyEventDispatcher getKeyEventDispatcher()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.KeyEventDispatcher $r1, $r2, $r3;
        android.os.PowerManager $r4;
        java.lang.Object $r5;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.KeyEventDispatcher mKeyEventDispatcher>;

        if $r1 != null goto label1;

        $r3 = new com.android.server.accessibility.KeyEventDispatcher;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.PowerManager mPowerManager>;

        specialinvoke $r3.<com.android.server.accessibility.KeyEventDispatcher: void <init>(android.os.Handler,int,java.lang.Object,android.os.PowerManager)>($r6, 8, $r5, $r4);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.KeyEventDispatcher mKeyEventDispatcher> = $r3;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.KeyEventDispatcher mKeyEventDispatcher>;

        return $r2;
    }

    public com.android.server.accessibility.MagnificationController getMagnificationController()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1, $r3;
        com.android.server.accessibility.MagnificationController $r2, r6, r7;
        android.content.Context $r4;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController mMagnificationController>;

        if $r2 != null goto label2;

        r6 = new com.android.server.accessibility.MagnificationController;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        specialinvoke r6.<com.android.server.accessibility.MagnificationController: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService,java.lang.Object)>($r4, r0, $r3);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController mMagnificationController> = r6;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        virtualinvoke r6.<com.android.server.accessibility.MagnificationController: void setUserId(int)>($i0);

     label2:
        r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController mMagnificationController>;

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public com.android.server.accessibility.MotionEventInjector getMotionEventInjectorForDisplayLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        long l1, $l2, $l4, $l6, $l7;
        android.util.SparseArray $r1, r7;
        java.lang.Object $r2, $r3;
        byte $b5;
        java.lang.Throwable $r4;
        com.android.server.accessibility.MotionEventInjector r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = $l2 + 1000L;

        r5 = null;

     label1:
        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mMotionEventInjectors>;

        if $r1 != null goto label6;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b5 = $l4 cmp l1;

        if $b5 >= 0 goto label6;

     label2:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        $l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l7 = l1 - $l6;

        virtualinvoke $r3.<java.lang.Object: void wait(long)>($l7);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        goto label1;

     label6:
        r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mMotionEventInjectors>;

        if r7 != null goto label7;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccessibilityManagerService", "MotionEventInjector installation timed out");

        goto label8;

     label7:
        $r2 = virtualinvoke r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.accessibility.MotionEventInjector) $r2;

     label8:
        return r5;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public android.app.PendingIntent getPendingIntentActivity(android.content.Context, int, android.content.Intent, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.Context r1;
        int i0, i1;
        android.content.Intent r2;
        android.app.PendingIntent $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.Intent;

        i1 := @parameter3: int;

        $r3 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>(r1, i0, r2, i1);

        return $r3;
    }

    public long getRecommendedTimeoutMillis()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        long l0;
        com.android.server.accessibility.AccessibilityUserState $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        l0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: long getRecommendedTimeoutMillisLocked(com.android.server.accessibility.AccessibilityUserState)>($r3);

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.ArrayList getValidDisplayList()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener mA11yDisplayListener>;

        $r2 = virtualinvoke $r1.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener: java.util.ArrayList getValidDisplayList()>();

        return $r2;
    }

    boolean getWindowBounds(int, android.graphics.Rect)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        android.os.IBinder r2;
        com.android.server.wm.WindowManagerInternal $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.graphics.Rect r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.graphics.Rect;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        r2 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.IBinder getWindowToken(int,int)>(i0, $i1);

        exitmonitor r1;

     label2:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerInternal: void getWindowFrame(android.os.IBinder,android.graphics.Rect)>(r2, r5);

        $z0 = virtualinvoke r5.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    com.android.server.accessibility.magnification.WindowMagnificationManager getWindowMagnificationMgr()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        com.android.server.accessibility.magnification.WindowMagnificationManager $r2, r4, r5;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.magnification.WindowMagnificationManager mWindowMagnificationMgr>;

        if $r2 != null goto label2;

        r4 = new com.android.server.accessibility.magnification.WindowMagnificationManager;

        specialinvoke r4.<com.android.server.accessibility.magnification.WindowMagnificationManager: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.magnification.WindowMagnificationManager mWindowMagnificationMgr> = r4;

     label2:
        r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.magnification.WindowMagnificationManager mWindowMagnificationMgr>;

        exitmonitor r1;

     label3:
        return r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.os.IBinder getWindowToken(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2, $r3;
        com.android.server.accessibility.AccessibilityWindowManager $r4, $r6;
        android.view.accessibility.AccessibilityWindowInfo $r5;
        java.lang.Throwable $r7;
        android.os.IBinder r8;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RETRIEVE_WINDOW_TOKEN", "getWindowToken");

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $i2 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i1);

        $i3 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if $i2 == $i3 goto label3;

        exitmonitor r1;

     label2:
        return null;

     label3:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $r5 = virtualinvoke $r4.<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)>(i0);

        if $r5 != null goto label5;

        exitmonitor r1;

     label4:
        return null;

     label5:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r8 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder getWindowTokenForUserAndWindowIdLocked(int,int)>(i1, i0);

        exitmonitor r1;

     label6:
        return r8;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void interrupt(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.IBinder r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        int $i0, i2, i3, i4, i5, i6, i7;
        com.android.server.accessibility.AccessibilityUserState $r3;
        java.lang.Object $r4, $r6, $r11, r14;
        android.accessibilityservice.IAccessibilityServiceClient $r5, r18;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r13;
        java.util.ArrayList r15, r16;
        com.android.server.accessibility.AccessibilityServiceConnection r17;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i2 := @parameter0: int;

        r14 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label01:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        i3 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i2);

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if i3 == $i0 goto label03;

        exitmonitor r14;

     label02:
        return;

     label03:
        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i3);

        r15 = $r3.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i4 = interfaceinvoke r15.<java.util.List: int size()>();

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>(int)>(i4);

     label04:
        i5 = 0;

     label05:
        if i5 >= i4 goto label10;

     label06:
        $r6 = interfaceinvoke r15.<java.util.List: java.lang.Object get(int)>(i5);

        r17 = (com.android.server.accessibility.AccessibilityServiceConnection) $r6;

        r1 = r17.<com.android.server.accessibility.AccessibilityServiceConnection: android.os.IBinder mService>;

        r18 = r17.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

     label07:
        if r1 == null goto label09;

        if r18 == null goto label09;

     label08:
        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>(r18);

     label09:
        i5 = i5 + 1;

        goto label05;

     label10:
        exitmonitor r14;

     label11:
        i6 = 0;

        i7 = interfaceinvoke r16.<java.util.List: int size()>();

     label12:
        if i6 >= i7 goto label17;

     label13:
        $r4 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(i6);

        $r5 = (android.accessibilityservice.IAccessibilityServiceClient) $r4;

        interfaceinvoke $r5.<android.accessibilityservice.IAccessibilityServiceClient: void onInterrupt()>();

     label14:
        goto label16;

     label15:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error sending interrupt request to ");

        $r11 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(i6);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManagerService", $r13, $r8);

     label16:
        i6 = i6 + 1;

        goto label12;

     label17:
        return;

     label18:
        $r7 := @caughtexception;

     label19:
        exitmonitor r14;

     label20:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public boolean isAccessibilityButtonShown()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mIsAccessibilityButtonShown>;

        return $z0;
    }

    public void lambda$updateRelevantEventsLocked$2$AccessibilityManagerService(com.android.server.accessibility.AccessibilityUserState, com.android.server.accessibility.AccessibilityManagerService$Client) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Client r1;
        java.lang.Object r2;
        int i0, $i1;
        android.view.accessibility.IAccessibilityManagerClient $r3;
        java.lang.Throwable $r4;
        com.android.server.accessibility.AccessibilityUserState r5;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r5 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$Client;

        z0 = 0;

        r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int computeRelevantEventTypesLocked(com.android.server.accessibility.AccessibilityUserState,com.android.server.accessibility.AccessibilityManagerService$Client)>(r5, r1);

     label2:
        $i1 = r1.<com.android.server.accessibility.AccessibilityManagerService$Client: int mLastSentRelevantEventTypes>;

        if $i1 == i0 goto label4;

        r1.<com.android.server.accessibility.AccessibilityManagerService$Client: int mLastSentRelevantEventTypes> = i0;

     label3:
        z0 = 1;

     label4:
        exitmonitor r2;

     label5:
        if z0 == 0 goto label6;

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$Client: android.view.accessibility.IAccessibilityManagerClient mCallback>;

        interfaceinvoke $r3.<android.view.accessibility.IAccessibilityManagerClient: void setRelevantEventTypes(int)>(i0);

     label6:
        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void lambda$updateRelevantEventsLocked$3$AccessibilityManagerService(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        com.android.server.accessibility._$$Lambda$AccessibilityManagerService$ZdLvxqIs4SwVXlG74hryDdIsj8Q $r2;
        java.util.function.Consumer $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = new com.android.server.accessibility._$$Lambda$AccessibilityManagerService$ZdLvxqIs4SwVXlG74hryDdIsj8Q;

        specialinvoke $r2.<com.android.server.accessibility._$$Lambda$AccessibilityManagerService$ZdLvxqIs4SwVXlG74hryDdIsj8Q: void <init>(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityUserState)>(r0, r1);

        $r3 = staticinvoke <com.android.internal.util.FunctionalUtils: java.util.function.Consumer ignoreRemoteException(com.android.internal.util.FunctionalUtils$RemoteExceptionIgnoringConsumer)>($r2);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void broadcastToClients(com.android.server.accessibility.AccessibilityUserState,java.util.function.Consumer)>(r1, $r3);

        return;
    }

    public void notifyAccessibilityButtonClicked(int, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1;
        android.content.Context $r1;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r3;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eskhivxnBVBZCLZ0d5oWdhYVtfs' $r4;
        java.lang.Integer $r5, $r6;
        android.os.Message $r7;
        com.android.server.accessibility.AccessibilityUserState $r8;
        java.lang.Throwable $r9;
        java.lang.String r10, r11;
        java.lang.Object r12;
        java.lang.SecurityException r14;
        com.android.internal.util.function.QuadConsumer r15;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR_SERVICE");

        if $i1 != 0 goto label7;

        r11 = r10;

        if r10 != null goto label6;

        r12 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r12;

     label1:
        $r8 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        r11 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityUserState: java.lang.String getTargetAssignedToAccessibilityButton()>();

        exitmonitor r12;

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r12;

     label5:
        throw $r9;

     label6:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r4 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$eskhivxnBVBZCLZ0d5oWdhYVtfs: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eskhivxnBVBZCLZ0d5oWdhYVtfs' INSTANCE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r15 = (com.android.internal.util.function.QuadConsumer) $r4;

        $r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.QuadConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r15, r0, $r5, $r6, r11);

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r7);

        return;

     label7:
        r14 = new java.lang.SecurityException;

        specialinvoke r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller does not hold permission android.permission.STATUS_BAR_SERVICE");

        throw r14;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void notifyAccessibilityButtonVisibilityChanged(boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean z0;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR_SERVICE");

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityButtonVisibilityChangedLocked(boolean)>(z0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean notifyKeyEvent(android.view.KeyEvent, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1;
        java.util.ArrayList r2;
        boolean z0, $z1;
        com.android.server.accessibility.AccessibilityUserState $r3;
        com.android.server.accessibility.KeyEventDispatcher $r4;
        java.lang.Throwable $r5;
        android.view.KeyEvent r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r6 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        r2 = $r3.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $r4 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.KeyEventDispatcher getKeyEventDispatcher()>();

        z0 = virtualinvoke $r4.<com.android.server.accessibility.KeyEventDispatcher: boolean notifyKeyEventLocked(android.view.KeyEvent,int,java.util.List)>(r6, i0, r2);

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void notifyMagnificationChanged(int, android.graphics.Region, float, float, float)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        float f0, f1, f2;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.graphics.Region r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Region;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyClearAccessibilityCacheLocked()>();

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyMagnificationChangedLocked(int,android.graphics.Region,float,float,float)>(i0, r3, f0, f1, f2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void notifySystemActionsChangedLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.accessibility.AccessibilityServiceConnection $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        $r2 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r1.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.accessibility.AccessibilityServiceConnection) $r4;

        virtualinvoke $r5.<com.android.server.accessibility.AccessibilityServiceConnection: void notifySystemActionsChangedLocked()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public void onClientChangeLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean z0;
        com.android.server.accessibility.AccessibilityUserState r1;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        z0 := @parameter0: boolean;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>($i0);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

     label1:
        return;
    }

    public boolean onGesture(android.accessibilityservice.AccessibilityGestureEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        boolean z0, z1;
        java.lang.Throwable $r2;
        android.accessibilityservice.AccessibilityGestureEvent r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r3 := @parameter0: android.accessibilityservice.AccessibilityGestureEvent;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean notifyGestureLocked(android.accessibilityservice.AccessibilityGestureEvent,boolean)>(r3, 0);

     label2:
        z1 = z0;

        if z0 != 0 goto label4;

     label3:
        z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean notifyGestureLocked(android.accessibilityservice.AccessibilityGestureEvent,boolean)>(r3, 1);

     label4:
        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onServiceInfoChangedLocked(com.android.server.accessibility.AccessibilityUserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityUserState r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleNotifyClientsOfServicesStateChangeLocked(com.android.server.accessibility.AccessibilityUserState)>(r1);

        return;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.accessibility.AccessibilityShellCommand $r7;
        com.android.server.accessibility.SystemActionPerformer $r8;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.accessibility.AccessibilityShellCommand;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer mSystemActionPerformer>;

        specialinvoke $r7.<com.android.server.accessibility.AccessibilityShellCommand: void <init>(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.SystemActionPerformer)>(r0, $r8);

        virtualinvoke $r7.<com.android.server.accessibility.AccessibilityShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void onSystemActionsChanged()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityUserState $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifySystemActionsChangedLocked(com.android.server.accessibility.AccessibilityUserState)>($r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onTouchInteractionEnd()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityWindowManager $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r1.<com.android.server.accessibility.AccessibilityWindowManager: void onTouchInteractionEnd()>();

        return;
    }

    public void onTouchInteractionStart()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityWindowManager $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r1.<com.android.server.accessibility.AccessibilityWindowManager: void onTouchInteractionStart()>();

        return;
    }

    public void performAccessibilityShortcut(java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1;
        int $i0, $i1, $i2;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eskhivxnBVBZCLZ0d5oWdhYVtfs' $r3;
        java.lang.Integer $r4, $r5;
        android.os.Message $r6;
        android.content.Context $r7;
        java.lang.SecurityException r9;
        com.android.internal.util.function.QuadConsumer r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i0);

        if $i1 == 1000 goto label2;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r7.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_ACCESSIBILITY");

        if $i2 != 0 goto label1;

        goto label2;

     label1:
        r9 = new java.lang.SecurityException;

        specialinvoke r9.<java.lang.SecurityException: void <init>(java.lang.String)>("performAccessibilityShortcut requires the MANAGE_ACCESSIBILITY permission");

        throw r9;

     label2:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$eskhivxnBVBZCLZ0d5oWdhYVtfs: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eskhivxnBVBZCLZ0d5oWdhYVtfs' INSTANCE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r10 = (com.android.internal.util.function.QuadConsumer) $r3;

        $r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.QuadConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r10, r0, $r4, $r5, r1);

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r6);

        return;
    }

    public boolean performActionOnAccessibilityFocusedItem(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction r1;
        com.android.server.accessibility.AccessibilityManagerService$InteractionBridge $r2;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction;

        $r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge getInteractionBridge()>();

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$InteractionBridge: boolean performActionOnAccessibilityFocusedItemNotLocked(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>(r1);

        return $z0;
    }

    public void persistComponentNamesToSettingLocked(java.lang.String, java.util.Set, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1;
        java.util.Set r2;
        int i0;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$w89etkvLWR-_CyLrTZBzMBGC7ZI' $r3;
        java.util.function.Function r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$w89etkvLWR__CyLrTZBzMBGC7ZI: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$w89etkvLWR-_CyLrTZBzMBGC7ZI' INSTANCE>;

        r4 = (java.util.function.Function) $r3;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistColonDelimitedSetToSettingLocked(java.lang.String,int,java.util.Set,java.util.function.Function)>(r1, i0, r2, r4);

        return;
    }

    public void registerSystemAction(android.app.RemoteAction, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.app.RemoteAction r1;
        int i0;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        com.android.server.accessibility.SystemActionPerformer $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.app.RemoteAction;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACCESSIBILITY", "registerSystemAction");

        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer getSystemActionPerformer()>();

        virtualinvoke $r3.<com.android.server.accessibility.SystemActionPerformer: void registerSystemAction(int,android.app.RemoteAction)>(i0, r1);

        return;
    }

    public void registerUiTestAutomationService(android.os.IBinder, android.accessibilityservice.IAccessibilityServiceClient, android.accessibilityservice.AccessibilityServiceInfo, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.accessibilityservice.IAccessibilityServiceClient r1;
        android.accessibilityservice.AccessibilityServiceInfo r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        com.android.server.accessibility.UiAutomationManager r4;
        android.content.Context r5;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r6, $r8;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r7;
        com.android.server.wm.WindowManagerInternal $r9;
        com.android.server.accessibility.SystemActionPerformer $r10;
        com.android.server.accessibility.AccessibilityWindowManager $r11;
        com.android.server.accessibility.AccessibilityUserState $r12;
        java.lang.Throwable $r13;
        android.os.IBinder r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r14 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.accessibilityservice.IAccessibilityServiceClient;

        r2 := @parameter2: android.accessibilityservice.AccessibilityServiceInfo;

        i0 := @parameter3: int;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r6.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RETRIEVE_WINDOW_CONTENT", "registerUiTestAutomationService");

        r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        i1 = <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter>;

        $i2 = i1 + 1;

        <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter> = $i2;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        $r10 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer getSystemActionPerformer()>();

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke r4.<com.android.server.accessibility.UiAutomationManager: void registerUiTestAutomationServiceLocked(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.content.Context,android.accessibilityservice.AccessibilityServiceInfo,int,android.os.Handler,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.SystemActionPerformer,com.android.server.accessibility.AccessibilityWindowManager,int)>(r14, r1, r5, r2, i1, $r7, $r8, r0, $r9, $r10, $r11, i0);

        $r12 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>($r12);

        exitmonitor r3;

     label2:
        return;

     label3:
        $r13 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeAccessibilityInteractionConnection(android.view.IWindow)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.IWindow r1;
        com.android.server.accessibility.AccessibilityWindowManager $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>(r1);

        return;
    }

    void restoreEnabledAccessibilityServicesLocked(java.lang.String, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1, r8;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7;
        com.android.server.accessibility.AccessibilityUserState r9;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromStringLocked(java.lang.String,java.util.Set,boolean)>(r8, $r2, 0);

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromStringLocked(java.lang.String,java.util.Set,boolean)>(r1, $r3, 1);

        r9 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(0);

        $r4 = r9.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

        $r6 = r9.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r6.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        $r7 = r9.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistComponentNamesToSettingLocked(java.lang.String,java.util.Set,int)>("enabled_accessibility_services", $r7, 0);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r9);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void migrateAccessibilityButtonSettingsIfNecessaryLocked(com.android.server.accessibility.AccessibilityUserState,java.lang.String)>(r9, null);

        return;
    }

    public void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.AccessibilityWindowInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, i13, i14, $i15, $i16, $i17, i19;
        com.android.server.accessibility.UiAutomationManager $r2;
        java.lang.Object $r3, r20, r25, r26;
        com.android.server.wm.WindowManagerInternal $r4;
        com.android.server.accessibility.AccessibilityWindowManager $r5, $r6, $r13, $r15;
        boolean $z0, $z1, $z2, z4, z6, z8;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r7, $r14, $r21, $r22;
        com.android.server.accessibility.AccessibilityInputFilter $r8;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r9;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$BX2CMQr5jU9WhPYx7Aaae4zgxf4' $r10;
        android.view.accessibility.AccessibilityEvent $r11, r19;
        android.os.Message $r12;
        long $l9;
        java.lang.Throwable $r16, $r17, $r18;
        java.lang.CharSequence $r23;
        java.lang.String $r24;
        java.util.function.BiConsumer r30;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r19 := @parameter0: android.view.accessibility.AccessibilityEvent;

        i13 := @parameter1: int;

        z4 = 0;

        r20 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r20;

     label01:
        $i1 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        if $i1 != -3 goto label04;

        $r15 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        r1 = virtualinvoke $r15.<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo getPictureInPictureWindowLocked()>();

     label02:
        if r1 == null goto label04;

     label03:
        $i12 = virtualinvoke r1.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: void setWindowId(int)>($i12);

     label04:
        $r21 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        i14 = virtualinvoke $r21.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i13);

        $r22 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $r23 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>();

        $i15 = staticinvoke <android.os.UserHandle: int getCallingAppId()>();

        $i16 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int getCallingPid()>();

        $r24 = virtualinvoke $r22.<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String resolveValidReportedPackageLocked(java.lang.CharSequence,int,int,int)>($r23, $i15, i14, $i16);

        virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>($r24);

     label05:
        $i17 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if i14 != $i17 goto label14;

     label06:
        z6 = 0;

     label07:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $i6 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $z1 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canDispatchAccessibilityEventLocked(int,android.view.accessibility.AccessibilityEvent)>($i6, r19);

        if $z1 == 0 goto label09;

        $r13 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i7 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $i8 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        $l9 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        $i10 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i11 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: int getAction()>();

        virtualinvoke $r13.<com.android.server.accessibility.AccessibilityWindowManager: void updateActiveAndAccessibilityFocusedWindowLocked(int,int,long,int,int)>($i7, $i8, $l9, $i10, $i11);

        $r14 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r14.<com.android.server.accessibility.AccessibilitySecurityPolicy: void updateEventSourceLocked(android.view.accessibility.AccessibilityEvent)>(r19);

     label08:
        z6 = 1;

     label09:
        z4 = z6;

     label10:
        $z2 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z2 == 0 goto label14;

     label11:
        z4 = z6;

     label12:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r8 == null goto label14;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r10 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$BX2CMQr5jU9WhPYx7Aaae4zgxf4: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$BX2CMQr5jU9WhPYx7Aaae4zgxf4' INSTANCE>;

        $r11 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>(r19);

        r30 = (java.util.function.BiConsumer) $r10;

        $r12 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r30, r0, $r11);

        virtualinvoke $r9.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r12);

     label13:
        z4 = z6;

     label14:
        exitmonitor r20;

     label15:
        if z4 == 0 goto label35;

        r25 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r25;

     label16:
        i0 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

     label17:
        i19 = -1;

     label18:
        $i4 = virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i4 != 32 goto label21;

     label19:
        i19 = -1;

        if i0 == -1 goto label21;

     label20:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $i5 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        i19 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityWindowManager: int getDisplayIdByUserIdAndWindowIdLocked(int,int)>($i5, i0);

     label21:
        z8 = 0;

        if i19 == -1 goto label24;

        z8 = 0;

     label22:
        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        $z0 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked(int)>(i19);

        if $z0 == 0 goto label24;

     label23:
        z8 = 1;

     label24:
        exitmonitor r25;

     label25:
        if z8 == 0 goto label26;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r4 = (com.android.server.wm.WindowManagerInternal) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerInternal: void computeWindowsForAccessibility(int)>(i19);

     label26:
        r26 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r26;

     label27:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityServicesDelayedLocked(android.view.accessibility.AccessibilityEvent,boolean)>(r19, 0);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityServicesDelayedLocked(android.view.accessibility.AccessibilityEvent,boolean)>(r19, 1);

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        virtualinvoke $r2.<com.android.server.accessibility.UiAutomationManager: void sendAccessibilityEventLocked(android.view.accessibility.AccessibilityEvent)>(r19);

        exitmonitor r26;

     label28:
        goto label35;

     label29:
        $r16 := @caughtexception;

     label30:
        exitmonitor r26;

     label31:
        throw $r16;

     label32:
        $r18 := @caughtexception;

     label33:
        exitmonitor r25;

     label34:
        throw $r18;

     label35:
        $i2 = <com.android.server.accessibility.AccessibilityManagerService: int OWN_PROCESS_ID>;

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if $i2 == $i3 goto label36;

        virtualinvoke r19.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label36:
        return;

     label37:
        $r17 := @caughtexception;

     label38:
        exitmonitor r20;

     label39:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label37;
        catch java.lang.Throwable from label03 to label04 with label37;
        catch java.lang.Throwable from label04 to label05 with label37;
        catch java.lang.Throwable from label05 to label06 with label37;
        catch java.lang.Throwable from label07 to label08 with label37;
        catch java.lang.Throwable from label10 to label11 with label37;
        catch java.lang.Throwable from label12 to label13 with label37;
        catch java.lang.Throwable from label14 to label15 with label37;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.Throwable from label18 to label19 with label32;
        catch java.lang.Throwable from label20 to label21 with label32;
        catch java.lang.Throwable from label22 to label23 with label32;
        catch java.lang.Throwable from label24 to label25 with label32;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
        catch java.lang.Throwable from label33 to label34 with label32;
        catch java.lang.Throwable from label38 to label39 with label37;
    }

    public void sendAccessibilityEventForCurrentUserLocked(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEventLocked(android.view.accessibility.AccessibilityEvent,int)>(r1, $i0);

        return;
    }

    public boolean sendFingerprintGesture(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1, $i2;
        boolean $z0;
        java.lang.Throwable $r1;
        java.lang.Object r2;
        com.android.server.accessibility.FingerprintGestureDispatcher r3;
        java.lang.SecurityException r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        if $i2 != 1000 goto label4;

        exitmonitor r2;

     label2:
        r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.FingerprintGestureDispatcher mFingerprintGestureDispatcher>;

        if r3 != null goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke r3.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean onFingerprintGesture(int)>(i0);

        return $z0;

     label4:
        r4 = new java.lang.SecurityException;

        specialinvoke r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Only SYSTEM can call sendFingerprintGesture");

        throw r4;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void setBindInstantServiceAllowed(int, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        boolean z0, $z1;
        java.lang.Object r1;
        android.content.Context $r2;
        java.lang.Throwable $r3;
        com.android.server.accessibility.AccessibilityUserState r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_BIND_INSTANT_SERVICE", "setBindInstantServiceAllowed");

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>(i0);

        $z1 = virtualinvoke r4.<com.android.server.accessibility.AccessibilityUserState: boolean getBindInstantServiceAllowedLocked()>();

        if z0 == $z1 goto label2;

        virtualinvoke r4.<com.android.server.accessibility.AccessibilityUserState: void setBindInstantServiceAllowedLocked(boolean)>(z0);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r4);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setGestureDetectionPassthroughRegion(int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.graphics.Region r1;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eSvVtuaJKbqaBq9Bpz8jbEk5c_4' $r3;
        java.lang.Integer $r4;
        android.os.Message $r5;
        com.android.internal.util.function.TriConsumer r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$eSvVtuaJKbqaBq9Bpz8jbEk5c_4: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$eSvVtuaJKbqaBq9Bpz8jbEk5c_4' INSTANCE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6 = (com.android.internal.util.function.TriConsumer) $r3;

        $r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r6, r0, $r4, r1);

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    void setMotionEventInjectors(android.util.SparseArray)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1, $r2;
        java.lang.Throwable $r3;
        android.util.SparseArray r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: android.util.SparseArray;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mMotionEventInjectors> = r4;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.IAccessibilityInteractionConnection r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        com.android.server.accessibility.AccessibilityWindowManager $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.IAccessibilityInteractionConnection;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MODIFY_ACCESSIBILITY_DATA", "setPictureInPictureActionReplacingConnection");

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityWindowManager mA11yWindowManager>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>(r1);

        return;
    }

    public void setTouchExplorationPassthroughRegion(int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.graphics.Region r1;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$zajP-hb_Pu4KrBx9lo0SCrvm0I4' $r3;
        java.lang.Integer $r4;
        android.os.Message $r5;
        com.android.internal.util.function.TriConsumer r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityManagerService$zajP_hb_Pu4KrBx9lo0SCrvm0I4: com.android.server.accessibility.'-$$Lambda$AccessibilityManagerService$zajP-hb_Pu4KrBx9lo0SCrvm0I4' INSTANCE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6 = (com.android.internal.util.function.TriConsumer) $r3;

        $r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r6, r0, $r4, r1);

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    public void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.IWindowMagnificationConnection r1;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        com.android.server.accessibility.magnification.WindowMagnificationManager $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.IWindowMagnificationConnection;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR_SERVICE");

        $r3 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.magnification.WindowMagnificationManager getWindowMagnificationMgr()>();

        virtualinvoke $r3.<com.android.server.accessibility.magnification.WindowMagnificationManager: void setConnection(android.view.accessibility.IWindowMagnificationConnection)>(r1);

        return;
    }

    public void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityUserState r2;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r3;
        com.android.server.wm.WindowManagerInternal $r4;
        java.util.Set $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r12 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.TEMPORARY_ENABLE_ACCESSIBILITY", "temporaryEnableAccessibilityStateUntilKeyguardRemoved");

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerService>;

        $z1 = virtualinvoke $r4.<com.android.server.wm.WindowManagerInternal: boolean isKeyguardLocked()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getCurrentUserStateLocked()>();

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: void setTouchExplorationEnabledLocked(boolean)>(z0);

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: void setDisplayMagnificationEnabledLocked(boolean)>(0);

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: void disableShortcutMagnificationLocked()>();

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: void setAutoclickEnabledLocked(boolean)>(0);

        $r5 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

        $r6 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r12);

        $r7 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set getBindingServicesLocked()>();

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        $r8 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set getCrashedServicesLocked()>();

        interfaceinvoke $r8.<java.util.Set: void clear()>();

        $r9 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        interfaceinvoke $r9.<java.util.Set: void clear()>();

        $r10 = r2.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r12);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r2);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void unregisterSystemAction(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r1;
        com.android.server.accessibility.SystemActionPerformer $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        virtualinvoke $r1.<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACCESSIBILITY", "unregisterSystemAction");

        $r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.SystemActionPerformer getSystemActionPerformer()>();

        virtualinvoke $r2.<com.android.server.accessibility.SystemActionPerformer: void unregisterSystemAction(int)>(i0);

        return;
    }

    public void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1;
        com.android.server.accessibility.UiAutomationManager $r2;
        java.lang.Throwable $r3;
        android.accessibilityservice.IAccessibilityServiceClient r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r4 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.UiAutomationManager mUiAutomationManager>;

        virtualinvoke $r2.<com.android.server.accessibility.UiAutomationManager: void unregisterUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
