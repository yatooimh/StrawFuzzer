public class com.android.server.accessibility.AccessibilitySecurityPolicy extends java.lang.Object
{
    private static final int KEEP_SOURCE_EVENT_TYPES;
    private static final java.lang.String LOG_TAG;
    private static final int OWN_PROCESS_ID;
    private final com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager;
    private com.android.server.accessibility.AccessibilityWindowManager mAccessibilityWindowManager;
    private final android.app.AppOpsManager mAppOpsManager;
    private android.appwidget.AppWidgetManagerInternal mAppWidgetService;
    private final com.android.server.wm.ActivityTaskManagerInternal mAtmInternal;
    private final android.content.Context mContext;
    private final android.content.pm.PackageManager mPackageManager;
    private final android.os.UserManager mUserManager;

    static void <clinit>()
    {
        int $i0;

        <com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String LOG_TAG> = "AccessibilitySecurityPolicy";

        <com.android.server.accessibility.AccessibilitySecurityPolicy: int KEEP_SOURCE_EVENT_TYPES> = 4438463;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        <com.android.server.accessibility.AccessibilitySecurityPolicy: int OWN_PROCESS_ID> = $i0;

        return;
    }

    public void <init>(android.content.Context, com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        android.content.Context r1, $r4;
        com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager r2;
        android.content.pm.PackageManager $r3;
        java.lang.Object $r5, $r7, $r9;
        android.os.UserManager $r6;
        android.app.AppOpsManager $r8;
        com.android.server.wm.ActivityTaskManagerInternal $r10;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.Context mContext> = r1;

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager> = r2;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.pm.PackageManager mPackageManager> = $r3;

        $r4 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r6 = (android.os.UserManager) $r5;

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.os.UserManager mUserManager> = $r6;

        $r7 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r8 = (android.app.AppOpsManager) $r7;

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.app.AppOpsManager mAppOpsManager> = $r8;

        $r9 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r10 = (com.android.server.wm.ActivityTaskManagerInternal) $r9;

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal> = $r10;

        return;
    }

    private boolean isRetrievalAllowingWindowLocked(int, int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, i1, i2, $i3, $i4, $i5;
        com.android.server.accessibility.AccessibilityWindowManager $r1, $r2, $r3;
        android.view.accessibility.AccessibilityWindowInfo $r4;
        boolean $z0, z1;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        z1 = 1;

        if i2 != 1000 goto label1;

        return 1;

     label1:
        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 != 2000 goto label2;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean isShellAllowedToRetrieveWindowLocked(int,int)>(i0, i1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilityWindowManager mAccessibilityWindowManager>;

        $i4 = virtualinvoke $r1.<com.android.server.accessibility.AccessibilityWindowManager: int resolveParentWindowIdLocked(int)>(i1);

        $r2 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilityWindowManager mAccessibilityWindowManager>;

        $i5 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: int getActiveWindowId(int)>(i0);

        if $i4 != $i5 goto label3;

        return 1;

     label3:
        $r3 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilityWindowManager mAccessibilityWindowManager>;

        $r4 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)>(i1);

        if $r4 == null goto label4;

        goto label5;

     label4:
        z1 = 0;

     label5:
        return z1;
    }

    private boolean isShellAllowedToRetrieveWindowLocked(int, int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, i2, i3;
        long l1;
        boolean z0, $z1;
        com.android.server.accessibility.AccessibilityWindowManager $r1, $r2;
        android.os.UserManager $r3;
        android.os.UserHandle $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilityWindowManager mAccessibilityWindowManager>;

        r6 = virtualinvoke $r1.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder getWindowTokenForUserAndWindowIdLocked(int,int)>(i2, i0);

     label2:
        if r6 != null goto label3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label3:
        $r2 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilityWindowManager mAccessibilityWindowManager>;

        i3 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager: int getWindowOwnerUserId(android.os.IBinder)>(r6);

     label4:
        if i3 != -10000 goto label5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label5:
        $r3 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.os.UserManager mUserManager>;

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i3);

        z0 = virtualinvoke $r3.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_debugging_features", $r4);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        $z1 = z0 ^ 1;

        return $z1;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private boolean isValidPackageForUid(java.lang.String, int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, i2, $i3;
        long l1;
        android.content.pm.PackageManager $r1;
        java.lang.Throwable $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String r4;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        z0 = 0;

     label1:
        $r1 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.pm.PackageManager mPackageManager>;

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        i2 = virtualinvoke $r1.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r4, $i3);

     label2:
        if i0 != i2 goto label3;

        z0 = 1;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public boolean canCaptureFingerprintGestures(com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        com.android.server.accessibility.AccessibilityServiceConnection r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityServiceConnection;

        $i0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: int getCapabilities()>();

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean canControlMagnification(com.android.server.accessibility.AbstractAccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $i0 = virtualinvoke r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int getCapabilities()>();

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean canDispatchAccessibilityEventLocked(int, android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, $i1, $i2;
        android.view.accessibility.AccessibilityEvent r1;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $i1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        lookupswitch($i1)
        {
            case 32: goto label2;
            case 64: goto label2;
            case 128: goto label2;
            case 256: goto label2;
            case 512: goto label2;
            case 1024: goto label2;
            case 16384: goto label2;
            case 262144: goto label2;
            case 524288: goto label2;
            case 1048576: goto label2;
            case 2097152: goto label2;
            case 4194304: goto label2;
            case 16777216: goto label2;
            default: goto label1;
        };

     label1:
        $i2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean isRetrievalAllowingWindowLocked(int,int)>(i0, $i2);

        return $z0;

     label2:
        return 1;
    }

    public boolean canGetAccessibilityNodeInfoLocked(int, com.android.server.accessibility.AbstractAccessibilityServiceConnection, int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, i1;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean isRetrievalAllowingWindowLocked(int,int)>(i0, i1);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean canPerformGestures(com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        com.android.server.accessibility.AccessibilityServiceConnection r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityServiceConnection;

        $i0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: int getCapabilities()>();

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean canRegisterService(android.content.pm.ServiceInfo)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        android.content.pm.ServiceInfo r1;
        int i0, $i1;
        java.lang.String $r2, $r3, $r5, $r10, $r11, $r12, $r15, $r19, $r20, $r21, $r25;
        boolean $z0;
        android.content.pm.ApplicationInfo $r4;
        android.app.AppOpsManager $r6;
        java.lang.StringBuilder $r7, $r16;
        android.content.ComponentName $r9, $r18;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: android.content.pm.ServiceInfo;

        $r3 = "android.permission.BIND_ACCESSIBILITY_SERVICE";

        $r2 = r1.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping accessibility service ");

        $r18 = new android.content.ComponentName;

        $r20 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r19 = r1.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r18.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r20, $r19);

        $r21 = virtualinvoke $r18.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": it does not require the permission ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.BIND_ACCESSIBILITY_SERVICE");

        $r25 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccessibilitySecurityPolicy", $r25);

        return 0;

     label1:
        $r4 = r1.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r4.<android.content.pm.ApplicationInfo: int uid>;

        $r6 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.app.AppOpsManager mAppOpsManager>;

        $r5 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $i1 = virtualinvoke $r6.<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>("android:bind_accessibility_service", i0, $r5);

        if $i1 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping accessibility service ");

        $r9 = new android.content.ComponentName;

        $r11 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r10 = r1.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r9.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r11, $r10);

        $r12 = virtualinvoke $r9.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": disallowed by AppOps");

        $r15 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccessibilitySecurityPolicy", $r15);

        return 0;

     label2:
        return 1;
    }

    public boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r1;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        i0 = virtualinvoke r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int getCapabilities()>();

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean canRetrieveWindowsLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>(r1);

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: boolean mRetrieveInteractiveWindows>;

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean canTakeScreenshotLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $i0 = virtualinvoke r1.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: int getCapabilities()>();

        $i1 = $i0 & 128;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        java.lang.String r1;
        int i0, i2, i3, i4, i5;
        long l1;
        android.content.ComponentName $r2;
        android.accessibilityservice.AccessibilityServiceInfo $r3;
        android.content.pm.ServiceInfo $r4;
        android.content.pm.ApplicationInfo $r5;
        android.app.AppOpsManager $r6, $r7;
        java.lang.Throwable $r8;
        com.android.server.accessibility.AbstractAccessibilityServiceConnection r9;
        android.content.pm.ResolveInfo r10;
        boolean z1, z2;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r9 := @parameter0: com.android.server.accessibility.AbstractAccessibilityServiceConnection;

        $r2 = virtualinvoke r9.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.content.ComponentName getComponentName()>();

        r1 = virtualinvoke $r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3 = virtualinvoke r9.<com.android.server.accessibility.AbstractAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        r10 = virtualinvoke $r3.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        z1 = 1;

        if r10 != null goto label01;

        return 1;

     label01:
        $r4 = r10.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r5 = $r4.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        i2 = <com.android.server.accessibility.AccessibilitySecurityPolicy: int OWN_PROCESS_ID>;

        i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

     label03:
        if i2 != i3 goto label08;

     label04:
        $r7 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.app.AppOpsManager mAppOpsManager>;

        i4 = virtualinvoke $r7.<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>("android:access_accessibility", i0, r1);

     label05:
        if i4 != 0 goto label06;

        goto label07;

     label06:
        z1 = 0;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z1;

     label08:
        $r6 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.app.AppOpsManager mAppOpsManager>;

        i5 = virtualinvoke $r6.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>("android:access_accessibility", i0, r1);

     label09:
        if i5 != 0 goto label10;

        z2 = 1;

        goto label11;

     label10:
        z2 = 0;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z2;

     label12:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
    }

    public java.lang.String[] computeValidReportedPackages(java.lang.String, int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        java.lang.String[] r1, r2, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4, r6;
        android.appwidget.AppWidgetManagerInternal r7;
        android.util.ArraySet r8;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r6 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i8);

        if $i1 != 1000 goto label1;

        $r5 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

        return $r5;

     label1:
        r1 = newarray (java.lang.String)[1];

        r1[0] = r6;

        r7 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.appwidget.AppWidgetManagerInternal mAppWidgetService>;

        if r7 == null goto label4;

        r8 = virtualinvoke r7.<android.appwidget.AppWidgetManagerInternal: android.util.ArraySet getHostedWidgetPackages(int)>(i8);

        if r8 == null goto label4;

        $z0 = virtualinvoke r8.<android.util.ArraySet: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $i2 = lengthof r1;

        $i3 = virtualinvoke r8.<android.util.ArraySet: int size()>();

        $i4 = $i2 + $i3;

        r2 = newarray (java.lang.String)[$i4];

        $i5 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i5);

        i0 = virtualinvoke r8.<android.util.ArraySet: int size()>();

        i9 = 0;

     label2:
        if i9 >= i0 goto label3;

        $i6 = lengthof r1;

        $i7 = $i6 + i9;

        $r3 = virtualinvoke r8.<android.util.ArraySet: java.lang.Object valueAt(int)>(i9);

        $r4 = (java.lang.String) $r3;

        r2[$i7] = $r4;

        i9 = i9 + 1;

        goto label2;

     label3:
        return r2;

     label4:
        return r1;
    }

    public void enforceCallerIsRecentsOrHasPermission(java.lang.String, java.lang.String)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        java.lang.String r1, r2;
        com.android.server.wm.ActivityTaskManagerInternal $r3;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerInternal: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void enforceCallingOrSelfPermission(java.lang.String)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        java.lang.String r1, $r8;
        android.content.Context $r3;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller does not hold permission ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        java.lang.String r1, r2, $r14;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r13;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = <com.android.server.accessibility.AccessibilitySecurityPolicy: int OWN_PROCESS_ID>;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if $i0 != $i1 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean hasPermission(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You do not have ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" required to call ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = new java.lang.SecurityException;

        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r13;
    }

    public boolean hasPermission(java.lang.String)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isCallerInteractingAcrossUsers(int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        if $i2 == $i3 goto label2;

        if i1 == 2000 goto label2;

        if i0 == -2 goto label2;

        if i0 != -3 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public int resolveCallingUserIdEnforcingPermissionsLocked(int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r9;
        java.lang.String $r10;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        i0 := @parameter0: int;

        i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager>;

        i1 = interfaceinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager: int getCurrentUserIdLocked()>();

        if i6 == 0 goto label09;

        if i6 == 1000 goto label09;

        if i6 != 2000 goto label01;

        goto label09;

     label01:
        i7 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i6);

        if i7 != i0 goto label02;

        $i5 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveProfileParentLocked(int)>(i0);

        return $i5;

     label02:
        $i3 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveProfileParentLocked(int)>(i7);

        if $i3 != i1 goto label04;

        if i0 == -2 goto label03;

        if i0 != -3 goto label04;

     label03:
        return i1;

     label04:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $z0 != 0 goto label06;

        $z1 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $z1 == 0 goto label05;

        goto label06;

     label05:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call from user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission INTERACT_ACROSS_USERS or INTERACT_ACROSS_USERS_FULL not allowed.");

        $r9 = new java.lang.SecurityException;

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label06:
        if i0 == -2 goto label08;

        if i0 != -3 goto label07;

        goto label08;

     label07:
        $i4 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveProfileParentLocked(int)>(i0);

        return $i4;

     label08:
        return i1;

     label09:
        if i0 == -2 goto label11;

        if i0 != -3 goto label10;

        goto label11;

     label10:
        $i2 = virtualinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveProfileParentLocked(int)>(i0);

        return $i2;

     label11:
        return i1;
    }

    public int resolveProfileParentLocked(int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        long l0;
        com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager $r1;
        int $i1, i2, i3;
        android.os.UserManager $r2;
        android.os.UserHandle $r3;
        java.lang.Throwable $r4;
        android.content.pm.UserInfo r5;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        i2 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager>;

        $i1 = interfaceinvoke $r1.<com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager: int getCurrentUserIdLocked()>();

        if i2 == $i1 goto label7;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.os.UserManager mUserManager>;

        r5 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i2);

     label2:
        if r5 == null goto label5;

     label3:
        $r3 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i3 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i3;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

     label7:
        return i2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public java.lang.String resolveValidReportedPackageLocked(java.lang.CharSequence, int, int, int)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        int i0, i1, $i2, i3, i4;
        java.lang.String r1, $r5, $r6, $r8, $r9, $r10;
        android.appwidget.AppWidgetManagerInternal r2;
        boolean $z0, $z1, $z2;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        android.util.ArraySet $r7;
        java.lang.CharSequence r11;
        java.lang.String[] r12;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r11 := @parameter0: java.lang.CharSequence;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r11 != null goto label1;

        return null;

     label1:
        if i3 != 1000 goto label2;

        $r10 = interfaceinvoke r11.<java.lang.CharSequence: java.lang.String toString()>();

        return $r10;

     label2:
        r1 = interfaceinvoke r11.<java.lang.CharSequence: java.lang.String toString()>();

        i4 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, i3);

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean isValidPackageForUid(java.lang.String,int)>(r1, i4);

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r11.<java.lang.CharSequence: java.lang.String toString()>();

        return $r9;

     label3:
        r2 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.appwidget.AppWidgetManagerInternal mAppWidgetService>;

        if r2 == null goto label4;

        $r7 = virtualinvoke r2.<android.appwidget.AppWidgetManagerInternal: android.util.ArraySet getHostedWidgetPackages(int)>(i4);

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.util.Collection,java.lang.Object)>($r7, r1);

        if $z2 == 0 goto label4;

        $r8 = interfaceinvoke r11.<java.lang.CharSequence: java.lang.String toString()>();

        return $r8;

     label4:
        $r3 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.Context mContext>;

        $i2 = virtualinvoke $r3.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACT_AS_PACKAGE_FOR_ACCESSIBILITY", i1, i4);

        if $i2 != 0 goto label5;

        $r6 = interfaceinvoke r11.<java.lang.CharSequence: java.lang.String toString()>();

        return $r6;

     label5:
        $r4 = r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.content.pm.PackageManager mPackageManager>;

        r12 = virtualinvoke $r4.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i4);

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r12);

        if $z1 == 0 goto label6;

        return null;

     label6:
        $r5 = r12[0];

        return $r5;
    }

    public void setAccessibilityWindowManager(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        com.android.server.accessibility.AccessibilityWindowManager r1;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: com.android.server.accessibility.AccessibilityWindowManager mAccessibilityWindowManager> = r1;

        return;
    }

    public void setAppWidgetManager(android.appwidget.AppWidgetManagerInternal)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        android.appwidget.AppWidgetManagerInternal r1;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: android.appwidget.AppWidgetManagerInternal;

        r0.<com.android.server.accessibility.AccessibilitySecurityPolicy: android.appwidget.AppWidgetManagerInternal mAppWidgetService> = r1;

        return;
    }

    public void updateEventSourceLocked(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilitySecurityPolicy r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i1 = $i0 & 4438463;

        if $i1 != 0 goto label1;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View)>(null);

     label1:
        return;
    }
}
