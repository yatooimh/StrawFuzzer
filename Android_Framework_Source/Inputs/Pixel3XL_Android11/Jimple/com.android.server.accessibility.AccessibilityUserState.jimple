class com.android.server.accessibility.AccessibilityUserState extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    final android.util.ArraySet mAccessibilityButtonTargets;
    private boolean mAccessibilityFocusOnlyInActiveWindow;
    final android.util.ArraySet mAccessibilityShortcutKeyTargets;
    private boolean mBindInstantServiceAllowed;
    final java.util.Set mBindingServices;
    final java.util.ArrayList mBoundServices;
    final java.util.Map mComponentNameToServiceMap;
    private android.content.Context mContext;
    final java.util.Set mCrashedServices;
    final java.util.Set mEnabledServices;
    final java.util.List mInstalledServices;
    final java.util.List mInstalledShortcuts;
    private int mInteractiveUiTimeout;
    private boolean mIsAutoclickEnabled;
    private boolean mIsDisplayMagnificationEnabled;
    private boolean mIsFilterKeyEventsEnabled;
    private boolean mIsPerformGesturesEnabled;
    private boolean mIsTextHighContrastEnabled;
    private boolean mIsTouchExplorationEnabled;
    private int mLastSentClientState;
    private int mNonInteractiveUiTimeout;
    private boolean mRequestMultiFingerGestures;
    private android.content.ComponentName mServiceChangingSoftKeyboardMode;
    private boolean mServiceHandlesDoubleTap;
    private final com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener mServiceInfoChangeListener;
    private int mSoftKeyboardShowMode;
    private java.lang.String mTargetAssignedToAccessibilityButton;
    final java.util.Set mTouchExplorationGrantedServices;
    final android.os.RemoteCallbackList mUserClients;
    final int mUserId;
    private int mUserInteractiveUiTimeout;
    private int mUserNonInteractiveUiTimeout;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Lcom/android/server/accessibility/AccessibilityUserState;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.accessibility.AccessibilityUserState: java.lang.String LOG_TAG> = $r1;

        return;
    }

    void <init>(int, android.content.Context, com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;
        android.content.Context r1;
        com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener r2;
        android.os.RemoteCallbackList $r3;
        java.util.ArrayList $r4, $r6, $r7;
        java.util.HashMap $r5;
        java.util.HashSet $r8, $r9, $r10, $r11;
        android.util.ArraySet $r12, $r13;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.os.RemoteCallbackList;

        specialinvoke $r3.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: android.os.RemoteCallbackList mUserClients> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Map mComponentNameToServiceMap> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mBindingServices> = $r8;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices> = $r11;

        $r12 = new android.util.ArraySet;

        specialinvoke $r12.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityShortcutKeyTargets> = $r12;

        $r13 = new android.util.ArraySet;

        specialinvoke $r13.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityButtonTargets> = $r13;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mNonInteractiveUiTimeout> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mInteractiveUiTimeout> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mLastSentClientState> = -1;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mSoftKeyboardShowMode> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId> = i0;

        r0.<com.android.server.accessibility.AccessibilityUserState: android.content.Context mContext> = r1;

        r0.<com.android.server.accessibility.AccessibilityUserState: com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener mServiceInfoChangeListener> = r2;

        return;
    }

    public static boolean doesShortcutTargetsStringContain(java.util.Collection, java.lang.String)
    {
        java.util.Iterator r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r1;
        android.content.ComponentName $r2, r5;
        java.util.Collection r3;
        java.lang.String r4, r6;

        r3 := @parameter0: java.util.Collection;

        r4 := @parameter1: java.lang.String;

        if r3 == null goto label7;

        if r4 != null goto label1;

        goto label7;

     label1:
        $z0 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r5 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r4);

        if r5 != null goto label3;

        return 0;

     label3:
        r0 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r1;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z2 != 0 goto label5;

        $r2 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r6);

        $z3 = virtualinvoke r5.<android.content.ComponentName: boolean equals(java.lang.Object)>($r2);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        goto label4;

     label6:
        return 0;

     label7:
        return 0;
    }

    private boolean getOriginalHardKeyboardValue()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        z0 = 0;

        $i1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", 0, i0);

        $i2 = $i1 & 536870912;

        if $i2 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    private int getSecureIntForUser(java.lang.String, int, int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, r1, i0, i1);

        return $i2;
    }

    private int getSoftKeyboardValueFromSettings()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", 0, $i0);

        $i2 = $i1 & 3;

        return $i2;
    }

    private boolean hasUserOverriddenHardKeyboardSetting()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        z0 = 0;

        $i1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", 0, i0);

        $i2 = 1073741824 & $i1;

        if $i2 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    static boolean lambda$removeShortcutTargetLocked$0(android.content.ComponentName, java.lang.String)
    {
        android.content.ComponentName r0, r2;
        boolean $z0;
        java.lang.String r1;

        r0 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label2;

        r2 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r1);

        if r2 != null goto label1;

        goto label2;

     label1:
        $z0 = virtualinvoke r2.<android.content.ComponentName: boolean equals(java.lang.Object)>(r0);

        return $z0;

     label2:
        return 0;
    }

    private void putSecureIntForUser(java.lang.String, int, int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0, i1;
        long l2;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, r4, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void saveSoftKeyboardValueToSettings(int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", 0, $i1);

        $i3 = $i2 & -4;

        $i5 = $i3 | i0;

        $i4 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void putSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", $i5, $i4);

        return;
    }

    private void setOriginalHardKeyboardValue(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;
        int $i0, $i1, $i2, i3, i4, i5;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        i3 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        i4 = 0;

        i5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", 0, i3);

        if z0 == 0 goto label1;

        i4 = 536870912;

     label1:
        $i0 = -536870913 & i5;

        $i2 = i4 | $i0;

        $i1 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void putSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", $i2, $i1);

        return;
    }

    private void setUserOverridesHardKeyboardSetting()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", 0, $i0);

        $i3 = 1073741824 | $i1;

        $i2 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void putSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", $i3, $i2);

        return;
    }

    private void unbindAllServicesLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.util.ArrayList r1;
        java.lang.Object $r2;
        com.android.server.accessibility.AccessibilityServiceConnection $r3;
        int i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i0 <= 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.android.server.accessibility.AccessibilityServiceConnection) $r2;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityServiceConnection: void unbindLocked()>();

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    void addServiceLocked(com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        com.android.server.accessibility.AccessibilityServiceConnection r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;
        java.util.Map $r4;
        android.content.ComponentName $r5;
        com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityServiceConnection;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: void onAdded()>();

        $r3 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Map mComponentNameToServiceMap>;

        $r5 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: android.content.ComponentName getComponentName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        $r7 = r0.<com.android.server.accessibility.AccessibilityUserState: com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener mServiceInfoChangeListener>;

        interfaceinvoke $r7.<com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener: void onServiceInfoChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r0);

     label1:
        return;
    }

    public void disableShortcutMagnificationLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.util.ArraySet $r1, $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityShortcutKeyTargets>;

        virtualinvoke $r1.<android.util.ArraySet: boolean remove(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityButtonTargets>;

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

        return;
    }

    void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.io.PrintWriter r1, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r36;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r29, $r37, $r49, $r53, $r57, $r61, $r65, $r69, $r78, $r83;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.List $r28;
        android.util.ArraySet $r33, $r35, $r76, $r81;
        java.util.ArrayList $r40, $r71;
        java.util.Set $r42, $r44, $r46;
        java.lang.Object $r47, $r51, $r55, $r59, $r63, $r67, $r72, $r77, $r82;
        android.content.ComponentName $r48, $r56, $r64, r89, r91, r93;
        com.android.server.accessibility.AccessibilityServiceConnection $r73;
        java.io.FileDescriptor r86;
        java.lang.String[] r87;
        java.util.Iterator r88, r90, r92;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r86 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r87 := @parameter2: java.lang.String[];

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("User state[");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r3 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     attributes:{id=");

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke $r3.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r4);

        $r6 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", touchExplorationEnabled=");

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTouchExplorationEnabled>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        virtualinvoke $r6.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r7);

        $r9 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", serviceHandlesDoubleTap=");

        $z1 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mServiceHandlesDoubleTap>;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z1);

        virtualinvoke $r9.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r10);

        $r12 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", requestMultiFingerGestures=");

        $z2 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mRequestMultiFingerGestures>;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z2);

        virtualinvoke $r12.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r13);

        $r15 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", displayMagnificationEnabled=");

        $z3 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsDisplayMagnificationEnabled>;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z3);

        virtualinvoke $r15.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r16);

        $r18 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", autoclickEnabled=");

        $z4 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsAutoclickEnabled>;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4);

        virtualinvoke $r18.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r19);

        $r21 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", nonInteractiveUiTimeout=");

        $i1 = r0.<com.android.server.accessibility.AccessibilityUserState: int mNonInteractiveUiTimeout>;

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        virtualinvoke $r21.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r22);

        $r24 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", interactiveUiTimeout=");

        $i2 = r0.<com.android.server.accessibility.AccessibilityUserState: int mInteractiveUiTimeout>;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        virtualinvoke $r24.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r25);

        $r27 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", installedServiceCount=");

        $r28 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $i3 = interfaceinvoke $r28.<java.util.List: int size()>();

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        virtualinvoke $r27.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r29);

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("}");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     shortcut key:{");

        $r33 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityShortcutKeyTargets>;

        i6 = virtualinvoke $r33.<android.util.ArraySet: int size()>();

        i7 = 0;

     label01:
        if i7 >= i6 goto label03;

        $r81 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityShortcutKeyTargets>;

        $r82 = virtualinvoke $r81.<android.util.ArraySet: java.lang.Object valueAt(int)>(i7);

        $r83 = (java.lang.String) $r82;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r83);

        $i5 = i7 + 1;

        if $i5 >= i6 goto label02;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

     label02:
        i7 = i7 + 1;

        goto label01;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("}");

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     button:{");

        $r35 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityButtonTargets>;

        i8 = virtualinvoke $r35.<android.util.ArraySet: int size()>();

        i9 = 0;

     label04:
        if i9 >= i8 goto label06;

        $r76 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityButtonTargets>;

        $r77 = virtualinvoke $r76.<android.util.ArraySet: java.lang.Object valueAt(int)>(i9);

        $r78 = (java.lang.String) $r77;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r78);

        $i4 = i9 + 1;

        if $i4 >= i8 goto label05;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

     label05:
        i9 = i9 + 1;

        goto label04;

     label06:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("}");

        $r36 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     button target:{");

        $r37 = r0.<com.android.server.accessibility.AccessibilityUserState: java.lang.String mTargetAssignedToAccessibilityButton>;

        virtualinvoke $r36.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r37);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("}");

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     Bound services:{");

        $r40 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        i10 = virtualinvoke $r40.<java.util.ArrayList: int size()>();

        i11 = 0;

     label07:
        if i11 >= i10 goto label09;

        if i11 <= 0 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("                     ");

     label08:
        $r71 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r72 = virtualinvoke $r71.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        $r73 = (com.android.server.accessibility.AccessibilityServiceConnection) $r72;

        virtualinvoke $r73.<com.android.server.accessibility.AccessibilityServiceConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r86, r1, r87);

        i11 = i11 + 1;

        goto label07;

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("}");

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     Enabled services:{");

        $r42 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        r88 = interfaceinvoke $r42.<java.util.Set: java.util.Iterator iterator()>();

        $z5 = interfaceinvoke r88.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $r63 = interfaceinvoke r88.<java.util.Iterator: java.lang.Object next()>();

        $r64 = (android.content.ComponentName) $r63;

        $r65 = virtualinvoke $r64.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r65);

     label10:
        $z10 = interfaceinvoke r88.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label11;

        $r67 = interfaceinvoke r88.<java.util.Iterator: java.lang.Object next()>();

        r89 = (android.content.ComponentName) $r67;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

        $r69 = virtualinvoke r89.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r69);

        goto label10;

     label11:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("}");

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     Binding services:{");

        $r44 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mBindingServices>;

        r90 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>();

        $z6 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $r55 = interfaceinvoke r90.<java.util.Iterator: java.lang.Object next()>();

        $r56 = (android.content.ComponentName) $r55;

        $r57 = virtualinvoke $r56.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r57);

     label12:
        $z9 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label13;

        $r59 = interfaceinvoke r90.<java.util.Iterator: java.lang.Object next()>();

        r91 = (android.content.ComponentName) $r59;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

        $r61 = virtualinvoke r91.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r61);

        goto label12;

     label13:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("}");

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("     Crashed services:{");

        $r46 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices>;

        r92 = interfaceinvoke $r46.<java.util.Set: java.util.Iterator iterator()>();

        $z7 = interfaceinvoke r92.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label15;

        $r47 = interfaceinvoke r92.<java.util.Iterator: java.lang.Object next()>();

        $r48 = (android.content.ComponentName) $r47;

        $r49 = virtualinvoke $r48.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r49);

     label14:
        $z8 = interfaceinvoke r92.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label15;

        $r51 = interfaceinvoke r92.<java.util.Iterator: java.lang.Object next()>();

        r93 = (android.content.ComponentName) $r51;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

        $r53 = virtualinvoke r93.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r53);

        goto label14;

     label15:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("}]");

        return;
    }

    boolean getBindInstantServiceAllowedLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mBindInstantServiceAllowed>;

        return $z0;
    }

    java.util.Set getBindingServicesLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.util.Set $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mBindingServices>;

        return $r1;
    }

    java.util.List getBoundServicesLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        return $r1;
    }

    int getClientStateLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0, $z1, $z2, z3, $z4;
        byte $b0, $b1, b2, b3, b4;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        b2 = 0;

        if z0 != 0 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean isHandlingAccessibilityEventsLocked()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        if z3 == 0 goto label4;

        b2 = 0 | 1;

     label4:
        b3 = b2;

        if z3 == 0 goto label5;

        b3 = b2;

        $z1 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTouchExplorationEnabled>;

        if $z1 == 0 goto label5;

        $b0 = b2 | 2;

        $b1 = $b0 | 8;

        b3 = $b1 | 16;

     label5:
        b4 = b3;

        $z4 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTextHighContrastEnabled>;

        if $z4 == 0 goto label6;

        b4 = b3 | 4;

     label6:
        return b4;
    }

    java.util.Set getCrashedServicesLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.util.Set $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices>;

        return $r1;
    }

    java.util.Set getEnabledServicesLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.util.Set $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        return $r1;
    }

    public android.accessibilityservice.AccessibilityServiceInfo getInstalledServiceInfoLocked(android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.content.ComponentName r1, $r6;
        android.accessibilityservice.AccessibilityServiceInfo r2;
        java.util.List $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter0: android.content.ComponentName;

        i1 = 0;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (android.accessibilityservice.AccessibilityServiceInfo) $r5;

        $r6 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: android.content.ComponentName getComponentName()>();

        $z0 = virtualinvoke $r6.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public int getInteractiveUiTimeoutLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mInteractiveUiTimeout>;

        return $i0;
    }

    public int getLastSentClientStateLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mLastSentClientState>;

        return $i0;
    }

    public int getNonInteractiveUiTimeoutLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mNonInteractiveUiTimeout>;

        return $i0;
    }

    public android.content.ComponentName getServiceChangingSoftKeyboardModeLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: android.content.ComponentName mServiceChangingSoftKeyboardMode>;

        return $r1;
    }

    public com.android.server.accessibility.AccessibilityServiceConnection getServiceConnectionLocked(android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.content.ComponentName r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.android.server.accessibility.AccessibilityServiceConnection $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Map mComponentNameToServiceMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.android.server.accessibility.AccessibilityServiceConnection) $r3;

        return $r4;
    }

    public android.util.ArraySet getShortcutTargetsLocked(int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;
        android.util.ArraySet $r1, $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityShortcutKeyTargets>;

        return $r2;

     label1:
        if i0 != 0 goto label2;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityButtonTargets>;

        return $r1;

     label2:
        return null;
    }

    int getSoftKeyboardShowModeLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mSoftKeyboardShowMode>;

        return $i0;
    }

    public java.lang.String getTargetAssignedToAccessibilityButton()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.lang.String mTargetAssignedToAccessibilityButton>;

        return $r1;
    }

    public int getUserInteractiveUiTimeoutLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserInteractiveUiTimeout>;

        return $i0;
    }

    public int getUserNonInteractiveUiTimeoutLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserNonInteractiveUiTimeout>;

        return $i0;
    }

    public boolean isAccessibilityFocusOnlyInActiveWindow()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mAccessibilityFocusOnlyInActiveWindow>;

        return $z0;
    }

    public boolean isAutoclickEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsAutoclickEnabled>;

        return $z0;
    }

    public boolean isDisplayMagnificationEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsDisplayMagnificationEnabled>;

        return $z0;
    }

    public boolean isFilterKeyEventsEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsFilterKeyEventsEnabled>;

        return $z0;
    }

    boolean isHandlingAccessibilityEventsLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.util.ArrayList $r1;
        boolean $z0, $z1, z2;
        java.util.Set $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mBindingServices>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean isMultiFingerGesturesEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mRequestMultiFingerGestures>;

        return $z0;
    }

    public boolean isPerformGesturesEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsPerformGesturesEnabled>;

        return $z0;
    }

    public boolean isServiceHandlesDoubleTapEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mServiceHandlesDoubleTap>;

        return $z0;
    }

    public boolean isShortcutMagnificationEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.util.ArraySet $r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityShortcutKeyTargets>;

        $z0 = virtualinvoke $r1.<android.util.ArraySet: boolean contains(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

        if $z0 != 0 goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityButtonTargets>;

        $z1 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>("com.android.server.accessibility.MagnificationController");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean isShortcutTargetInstalledLocked(java.lang.String)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, r9;
        java.util.Map $r2;
        android.accessibilityservice.AccessibilityServiceInfo $r3;
        java.util.List $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        android.accessibilityservice.AccessibilityShortcutInfo $r7;
        android.content.ComponentName $r8, r10;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r9 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r9);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = "com.android.server.accessibility.MagnificationController";

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r10 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r9);

        if r10 != null goto label3;

        return 0;

     label3:
        $r2 = staticinvoke <com.android.internal.accessibility.AccessibilityShortcutController: java.util.Map getFrameworkShortcutFeaturesMap()>();

        $z2 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $r3 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: android.accessibilityservice.AccessibilityServiceInfo getInstalledServiceInfoLocked(android.content.ComponentName)>(r10);

        if $r3 == null goto label5;

        return 1;

     label5:
        i1 = 0;

     label6:
        $r4 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i1 >= $i0 goto label8;

        $r5 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledShortcuts>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (android.accessibilityservice.AccessibilityShortcutInfo) $r6;

        $r8 = virtualinvoke $r7.<android.accessibilityservice.AccessibilityShortcutInfo: android.content.ComponentName getComponentName()>();

        $z3 = virtualinvoke $r8.<android.content.ComponentName: boolean equals(java.lang.Object)>(r10);

        if $z3 == 0 goto label7;

        return 1;

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        return 0;
    }

    public boolean isTextHighContrastEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTextHighContrastEnabled>;

        return $z0;
    }

    public boolean isTouchExplorationEnabledLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $z0 = r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTouchExplorationEnabled>;

        return $z0;
    }

    void onSwitchToAnotherUserLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.util.ArrayList $r1;
        java.util.Set $r2, $r3, $r4, $r5;
        android.util.ArraySet $r6, $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void unbindAllServicesLocked()>();

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mBindingServices>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r3 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: int mLastSentClientState> = -1;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mNonInteractiveUiTimeout> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mInteractiveUiTimeout> = 0;

        $r4 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

        $r5 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mTouchExplorationGrantedServices>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

        $r6 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityShortcutKeyTargets>;

        virtualinvoke $r6.<android.util.ArraySet: void clear()>();

        $r7 = r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet mAccessibilityButtonTargets>;

        virtualinvoke $r7.<android.util.ArraySet: void clear()>();

        r0.<com.android.server.accessibility.AccessibilityUserState: java.lang.String mTargetAssignedToAccessibilityButton> = null;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTouchExplorationEnabled> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mServiceHandlesDoubleTap> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mRequestMultiFingerGestures> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsDisplayMagnificationEnabled> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsAutoclickEnabled> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mUserNonInteractiveUiTimeout> = 0;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mUserInteractiveUiTimeout> = 0;

        return;
    }

    void reconcileSoftKeyboardModeWithSettingsLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int $i0, $i1, $i2, $i4, $i5, $i6;
        java.lang.String $r1;
        boolean z2;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        $i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("show_ime_with_hard_keyboard", 0, $i0);

        if $i1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $i2 = r0.<com.android.server.accessibility.AccessibilityUserState: int mSoftKeyboardShowMode>;

        if $i2 != 2 goto label3;

        if z2 != 0 goto label3;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean setSoftKeyboardModeLocked(int,android.content.ComponentName)>(0, null);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void setUserOverridesHardKeyboardSetting()>();

     label3:
        $i5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSoftKeyboardValueFromSettings()>();

        $i6 = r0.<com.android.server.accessibility.AccessibilityUserState: int mSoftKeyboardShowMode>;

        if $i5 == $i6 goto label4;

        $r1 = <com.android.server.accessibility.AccessibilityUserState: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r1, "Show IME setting inconsistent with internal state. Overwriting");

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean setSoftKeyboardModeLocked(int,android.content.ComponentName)>(0, null);

        $i4 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void putSecureIntForUser(java.lang.String,int,int)>("accessibility_soft_keyboard_mode", 0, $i4);

     label4:
        return;
    }

    void removeServiceLocked(com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.content.ComponentName r1, $r7, $r10;
        java.util.ArrayList $r2, $r4, $r13;
        com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener $r3;
        java.lang.Object $r5;
        java.util.Map $r6, $r12;
        android.accessibilityservice.AccessibilityServiceInfo $r9;
        boolean $z1;
        com.android.server.accessibility.AccessibilityServiceConnection r11, r14;
        int i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r11 := @parameter0: com.android.server.accessibility.AccessibilityServiceConnection;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r11);

        virtualinvoke r11.<com.android.server.accessibility.AccessibilityServiceConnection: void onRemoved()>();

        r1 = r0.<com.android.server.accessibility.AccessibilityUserState: android.content.ComponentName mServiceChangingSoftKeyboardMode>;

        if r1 == null goto label1;

        $r9 = virtualinvoke r11.<com.android.server.accessibility.AccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $r10 = virtualinvoke $r9.<android.accessibilityservice.AccessibilityServiceInfo: android.content.ComponentName getComponentName()>();

        $z1 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean setSoftKeyboardModeLocked(int,android.content.ComponentName)>(0, null);

     label1:
        $r12 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Map mComponentNameToServiceMap>;

        interfaceinvoke $r12.<java.util.Map: void clear()>();

        i0 = 0;

     label2:
        $r13 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i1 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label3;

        $r4 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r14 = (com.android.server.accessibility.AccessibilityServiceConnection) $r5;

        $r6 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Map mComponentNameToServiceMap>;

        $r7 = virtualinvoke r14.<com.android.server.accessibility.AccessibilityServiceConnection: android.content.ComponentName getComponentName()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r14);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r3 = r0.<com.android.server.accessibility.AccessibilityUserState: com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener mServiceInfoChangeListener>;

        interfaceinvoke $r3.<com.android.server.accessibility.AccessibilityUserState$ServiceInfoChangeListener: void onServiceInfoChangedLocked(com.android.server.accessibility.AccessibilityUserState)>(r0);

        return;
    }

    public boolean removeShortcutTargetLocked(int, android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;
        android.content.ComponentName r1;
        android.util.ArraySet $r2;
        com.android.server.accessibility._$$Lambda$AccessibilityUserState$UcR_snt8Os19AR8k8H_ATp3KMMQ $r3;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.ComponentName;

        $r2 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: android.util.ArraySet getShortcutTargetsLocked(int)>(i0);

        $r3 = new com.android.server.accessibility._$$Lambda$AccessibilityUserState$UcR_snt8Os19AR8k8H_ATp3KMMQ;

        specialinvoke $r3.<com.android.server.accessibility._$$Lambda$AccessibilityUserState$UcR_snt8Os19AR8k8H_ATp3KMMQ: void <init>(android.content.ComponentName)>(r1);

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean removeIf(java.util.function.Predicate)>($r3);

        return $z0;
    }

    void serviceDisconnectedLocked(com.android.server.accessibility.AccessibilityServiceConnection)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        com.android.server.accessibility.AccessibilityServiceConnection r1;
        java.util.Set $r2;
        android.content.ComponentName $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityServiceConnection;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void removeServiceLocked(com.android.server.accessibility.AccessibilityServiceConnection)>(r1);

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices>;

        $r3 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityServiceConnection: android.content.ComponentName getComponentName()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void setAccessibilityFocusOnlyInActiveWindow(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mAccessibilityFocusOnlyInActiveWindow> = z0;

        return;
    }

    public void setAutoclickEnabledLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsAutoclickEnabled> = z0;

        return;
    }

    void setBindInstantServiceAllowedLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mBindInstantServiceAllowed> = z0;

        return;
    }

    public void setDisplayMagnificationEnabledLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsDisplayMagnificationEnabled> = z0;

        return;
    }

    public void setFilterKeyEventsEnabledLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsFilterKeyEventsEnabled> = z0;

        return;
    }

    public void setInteractiveUiTimeoutLocked(int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mInteractiveUiTimeout> = i0;

        return;
    }

    public void setLastSentClientStateLocked(int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mLastSentClientState> = i0;

        return;
    }

    public void setMultiFingerGesturesLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mRequestMultiFingerGestures> = z0;

        return;
    }

    public void setNonInteractiveUiTimeoutLocked(int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mNonInteractiveUiTimeout> = i0;

        return;
    }

    public void setPerformGesturesEnabledLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsPerformGesturesEnabled> = z0;

        return;
    }

    public void setServiceChangingSoftKeyboardModeLocked(android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.content.ComponentName r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter0: android.content.ComponentName;

        r0.<com.android.server.accessibility.AccessibilityUserState: android.content.ComponentName mServiceChangingSoftKeyboardMode> = r1;

        return;
    }

    public void setServiceHandlesDoubleTapLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mServiceHandlesDoubleTap> = z0;

        return;
    }

    boolean setSoftKeyboardModeLocked(int, android.content.ComponentName)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        android.content.ComponentName r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i7, $i8, $i9, i10, i11;
        java.util.ArrayList $r2, $r6;
        java.lang.Object $r3;
        com.android.server.accessibility.AccessibilityServiceConnection $r4;
        boolean $z0, $z1, z2;
        java.lang.String $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i7 := @parameter0: int;

        r1 := @parameter1: android.content.ComponentName;

        z2 = 0;

        if i7 == 0 goto label1;

        if i7 == 1 goto label1;

        if i7 == 2 goto label1;

        $r5 = <com.android.server.accessibility.AccessibilityUserState: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r5, "Invalid soft keyboard mode");

        return 0;

     label1:
        i0 = r0.<com.android.server.accessibility.AccessibilityUserState: int mSoftKeyboardShowMode>;

        if i0 != i7 goto label2;

        return 1;

     label2:
        if i7 != 2 goto label6;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean hasUserOverriddenHardKeyboardSetting()>();

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $i3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSoftKeyboardValueFromSettings()>();

        if $i3 == 2 goto label5;

        $i4 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        $i5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: int getSecureIntForUser(java.lang.String,int,int)>("show_ime_with_hard_keyboard", 0, $i4);

        if $i5 == 0 goto label4;

        z2 = 1;

     label4:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void setOriginalHardKeyboardValue(boolean)>(z2);

     label5:
        $i8 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void putSecureIntForUser(java.lang.String,int,int)>("show_ime_with_hard_keyboard", 1, $i8);

        goto label7;

     label6:
        if i0 != 2 goto label7;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: boolean getOriginalHardKeyboardValue()>();

        $i2 = r0.<com.android.server.accessibility.AccessibilityUserState: int mUserId>;

        i11 = (int) $z0;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void putSecureIntForUser(java.lang.String,int,int)>("show_ime_with_hard_keyboard", i11, $i2);

     label7:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityUserState: void saveSoftKeyboardValueToSettings(int)>(i7);

        r0.<com.android.server.accessibility.AccessibilityUserState: int mSoftKeyboardShowMode> = i7;

        r0.<com.android.server.accessibility.AccessibilityUserState: android.content.ComponentName mServiceChangingSoftKeyboardMode> = r1;

        $r6 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $i9 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i10 = $i9 - 1;

     label8:
        if i10 < 0 goto label9;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.ArrayList mBoundServices>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        $r4 = (com.android.server.accessibility.AccessibilityServiceConnection) $r3;

        $i1 = r0.<com.android.server.accessibility.AccessibilityUserState: int mSoftKeyboardShowMode>;

        virtualinvoke $r4.<com.android.server.accessibility.AccessibilityServiceConnection: void notifySoftKeyboardShowModeChangedLocked(int)>($i1);

        i10 = i10 + -1;

        goto label8;

     label9:
        return 1;
    }

    public void setTargetAssignedToAccessibilityButton(java.lang.String)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        java.lang.String r1;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.server.accessibility.AccessibilityUserState: java.lang.String mTargetAssignedToAccessibilityButton> = r1;

        return;
    }

    public void setTextHighContrastEnabledLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTextHighContrastEnabled> = z0;

        return;
    }

    public void setTouchExplorationEnabledLocked(boolean)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.accessibility.AccessibilityUserState: boolean mIsTouchExplorationEnabled> = z0;

        return;
    }

    public void setUserInteractiveUiTimeoutLocked(int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mUserInteractiveUiTimeout> = i0;

        return;
    }

    public void setUserNonInteractiveUiTimeoutLocked(int)
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i0 := @parameter0: int;

        r0.<com.android.server.accessibility.AccessibilityUserState: int mUserNonInteractiveUiTimeout> = i0;

        return;
    }

    void updateCrashedServicesIfNeededLocked()
    {
        com.android.server.accessibility.AccessibilityUserState r0;
        int i0, i1;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.util.Set $r5, $r6, $r7;
        boolean $z0, $z1;
        android.accessibilityservice.AccessibilityServiceInfo r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.accessibility.AccessibilityUserState;

        i1 = 0;

        $r1 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.List mInstalledServices>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r8 = (android.accessibilityservice.AccessibilityServiceInfo) $r3;

        $r4 = virtualinvoke r8.<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()>();

        r9 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r4);

        $r5 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mEnabledServices>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z1 != 0 goto label2;

        $r7 = r0.<com.android.server.accessibility.AccessibilityUserState: java.util.Set mCrashedServices>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r9);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
}
