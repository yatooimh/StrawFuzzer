public class com.android.server.accessibility.AccessibilityWindowManager extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    private static int sNextWindowId;
    private final com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender mAccessibilityEventSender;
    private long mAccessibilityFocusNodeId;
    private int mAccessibilityFocusedDisplayId;
    private int mAccessibilityFocusedWindowId;
    private final com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager;
    private int mActiveWindowId;
    private final android.util.SparseArray mDisplayWindowsObservers;
    private final android.util.SparseArray mGlobalInteractionConnections;
    private final android.util.SparseArray mGlobalWindowTokens;
    private final android.os.Handler mHandler;
    private final android.util.ArrayMap mHostEmbeddedMap;
    private final android.util.SparseArray mInteractionConnections;
    private final java.lang.Object mLock;
    private com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection mPictureInPictureActionReplacingConnection;
    private final com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy;
    private int mTopFocusedDisplayId;
    private int mTopFocusedWindowId;
    private android.os.IBinder mTopFocusedWindowToken;
    private boolean mTouchInteractionInProgress;
    private final android.util.SparseArray mWindowIdMap;
    private final com.android.server.wm.WindowManagerInternal mWindowManagerInternal;
    private final android.util.SparseArray mWindowTokens;

    public void <init>(java.lang.Object, android.os.Handler, com.android.server.wm.WindowManagerInternal, com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender, com.android.server.accessibility.AccessibilitySecurityPolicy, com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.lang.Object r1;
        android.os.Handler r2;
        com.android.server.wm.WindowManagerInternal r3;
        com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender r4;
        com.android.server.accessibility.AccessibilitySecurityPolicy r5;
        com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager r6;
        android.util.SparseArray $r7, $r8, $r9, $r10, $r11, $r13;
        android.util.ArrayMap $r12;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: com.android.server.wm.WindowManagerInternal;

        r4 := @parameter3: com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender;

        r5 := @parameter4: com.android.server.accessibility.AccessibilitySecurityPolicy;

        r6 := @parameter5: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new android.util.SparseArray;

        specialinvoke $r7.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalInteractionConnections> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens> = $r8;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mInteractionConnections> = $r9;

        $r10 = new android.util.SparseArray;

        specialinvoke $r10.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowTokens> = $r10;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId> = -1;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedWindowId> = -1;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId> = -1;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: long mAccessibilityFocusNodeId> = 2147483647L;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedDisplayId> = -1;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers> = $r11;

        $r12 = new android.util.ArrayMap;

        specialinvoke $r12.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.ArrayMap mHostEmbeddedMap> = $r12;

        $r13 = new android.util.SparseArray;

        specialinvoke $r13.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowIdMap> = $r13;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock> = r1;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.Handler mHandler> = r2;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal> = r3;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender mAccessibilityEventSender> = r4;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy> = r5;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager> = r6;

        return;
    }

    static com.android.server.wm.WindowManagerInternal access$000(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        com.android.server.wm.WindowManagerInternal $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        return $r1;
    }

    static com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender access$100(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender mAccessibilityEventSender>;

        return $r1;
    }

    static int access$1000(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $i0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId>;

        return $i0;
    }

    static void access$1100(com.android.server.accessibility.AccessibilityWindowManager, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void clearAccessibilityFocusLocked(int)>(i0);

        return;
    }

    static void access$1200(com.android.server.accessibility.AccessibilityWindowManager, int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void removeAccessibilityInteractionConnectionLocked(int,int)>(i0, i1);

        return;
    }

    static int access$200(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $i0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedDisplayId>;

        return $i0;
    }

    static int access$202(com.android.server.accessibility.AccessibilityWindowManager, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter1: int;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedDisplayId> = i0;

        return i0;
    }

    static java.lang.Object access$300(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        return $r1;
    }

    static int access$400(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $i0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedDisplayId>;

        return $i0;
    }

    static int access$402(com.android.server.accessibility.AccessibilityWindowManager, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter1: int;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedDisplayId> = i0;

        return i0;
    }

    static android.os.IBinder access$500(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder mTopFocusedWindowToken>;

        return $r1;
    }

    static android.os.IBinder access$502(com.android.server.accessibility.AccessibilityWindowManager, android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter1: android.os.IBinder;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder mTopFocusedWindowToken> = r1;

        return r1;
    }

    static com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager access$600(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager>;

        return $r1;
    }

    static int access$700(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $i0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        return $i0;
    }

    static int access$702(com.android.server.accessibility.AccessibilityWindowManager, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter1: int;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId> = i0;

        return i0;
    }

    static int access$800(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $i0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedWindowId>;

        return $i0;
    }

    static int access$802(com.android.server.accessibility.AccessibilityWindowManager, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter1: int;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedWindowId> = i0;

        return i0;
    }

    static boolean access$900(com.android.server.accessibility.AccessibilityWindowManager)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        $z0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean mTouchInteractionInProgress>;

        return $z0;
    }

    private void clearAccessibilityFocusLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1;
        com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager $r1;
        android.os.Handler $r2;
        com.android.server.accessibility.'-$$Lambda$AccessibilityWindowManager$Ky3Q5Gg_NEaXwBlFb7wxyjIUci0' $r3;
        java.lang.Integer $r4, $r5;
        android.os.Message $r6;
        com.android.internal.util.function.TriConsumer r7;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.Handler mHandler>;

        $r3 = <com.android.server.accessibility._$$Lambda$AccessibilityWindowManager$Ky3Q5Gg_NEaXwBlFb7wxyjIUci0: com.android.server.accessibility.'-$$Lambda$AccessibilityWindowManager$Ky3Q5Gg_NEaXwBlFb7wxyjIUci0' INSTANCE>;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager mAccessibilityUserManager>;

        $i1 = interfaceinvoke $r1.<com.android.server.accessibility.AccessibilitySecurityPolicy$AccessibilityUserManager: int getCurrentUserIdLocked()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r7 = (com.android.internal.util.function.TriConsumer) $r3;

        $r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r7, r0, $r4, $r5);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r6);

        return;
    }

    private void clearAccessibilityFocusMainThread(int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1;
        android.view.accessibility.IAccessibilityInteractionConnection $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        java.lang.Object r4;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r5;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r4;

     label01:
        r5 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>(i0, i1);

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r4;

     label04:
        return;

     label05:
        exitmonitor r4;

     label06:
        $r1 = virtualinvoke r5.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        interfaceinvoke $r1.<android.view.accessibility.IAccessibilityInteractionConnection: void clearAccessibilityFocus()>();

     label07:
        goto label09;

     label08:
        $r3 := @caughtexception;

     label09:
        return;

     label10:
        $r2 := @caughtexception;

     label11:
        exitmonitor r4;

     label12:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private int findFocusedWindowId(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.lang.Object r1;
        com.android.server.wm.WindowManagerInternal $r2;
        java.lang.Throwable $r3;
        int i0, i1;
        android.os.IBinder r4;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        r4 = virtualinvoke $r2.<com.android.server.wm.WindowManagerInternal: android.os.IBinder getFocusedWindowToken()>();

        r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i1 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int findWindowIdLocked(int,android.os.IBinder)>(i0, r4);

        exitmonitor r1;

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver getDisplayWindowObserverByWindowIdLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1, $i2, i3;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r1, $r8;
        android.util.SparseArray $r2, $r3, $r6;
        java.lang.Object $r4, $r7;
        android.view.WindowInfo $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        $r3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r4;

        if r1 == null goto label2;

        $r5 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: android.view.WindowInfo findWindowInfoByIdLocked(int)>(i0);

        if $r5 == null goto label2;

        $r6 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $i2 = staticinvoke <com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: int access$1300(com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver)>(r1);

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        $r8 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r7;

        return $r8;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return null;
    }

    private android.util.SparseArray getInteractionConnectionsForUserLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        android.util.SparseArray r1, $r2, $r4, $r5, r6;
        java.lang.Object $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mInteractionConnections>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.SparseArray) $r3;

        r6 = r1;

        if r1 != null goto label1;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r6 = $r4;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mInteractionConnections>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r4);

     label1:
        return r6;
    }

    private android.util.SparseArray getWindowTokensForUserLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        android.util.SparseArray r1, $r2, $r4, $r5, r6;
        java.lang.Object $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowTokens>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.SparseArray) $r3;

        r6 = r1;

        if r1 != null goto label1;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r6 = $r4;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowTokens>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r4);

     label1:
        return r6;
    }

    private boolean isValidUserForInteractionConnectionsLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1;
        android.util.SparseArray $r1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mInteractionConnections>;

        $i1 = virtualinvoke $r1.<android.util.SparseArray: int indexOfKey(int)>(i0);

        if $i1 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isValidUserForWindowTokensLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1;
        android.util.SparseArray $r1;
        boolean z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowTokens>;

        $i1 = virtualinvoke $r1.<android.util.SparseArray: int indexOfKey(int)>(i0);

        if $i1 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void lambda$Ky3Q5Gg_NEaXwBlFb7wxyjIUci0(com.android.server.accessibility.AccessibilityWindowManager, int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void clearAccessibilityFocusMainThread(int,int)>(i0, i1);

        return;
    }

    private void onAccessibilityInteractionConnectionRemovedLocked(int, android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1;
        android.os.IBinder r1;
        boolean $z0;
        com.android.server.wm.WindowManagerInternal $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked()>();

        if $z0 != 0 goto label1;

        if i0 < 0 goto label1;

        $i1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        if $i1 != i0 goto label1;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId> = -1;

     label1:
        if r1 == null goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerInternal: void setAccessibilityIdToSurfaceMetadata(android.os.IBinder,int)>(r1, -1);

     label2:
        virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void unregisterIdLocked(int)>(i0);

        return;
    }

    private int removeAccessibilityInteractionConnectionInternalLocked(android.os.IBinder, android.util.SparseArray, android.util.SparseArray)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1;
        android.util.SparseArray r2, r3;
        java.lang.Object $r4, $r5;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection $r6;
        int i0, i1, i2;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.util.SparseArray;

        r3 := @parameter2: android.util.SparseArray;

        i0 = virtualinvoke r2.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        if $r4 != r1 goto label2;

        i2 = virtualinvoke r2.<android.util.SparseArray: int keyAt(int)>(i1);

        virtualinvoke r2.<android.util.SparseArray: void removeAt(int)>(i1);

        $r5 = virtualinvoke r3.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection) $r5;

        virtualinvoke $r6.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void unlinkToDeath()>();

        virtualinvoke r3.<android.util.SparseArray: void remove(int)>(i2);

        return i2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void removeAccessibilityInteractionConnectionLocked(int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1;
        boolean $z0, $z1;
        android.util.SparseArray $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.Object $r3, $r6;
        android.os.IBinder r9, r10;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r9 = null;

        if i1 != -1 goto label1;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r10 = (android.os.IBinder) $r6;

        $r7 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens>;

        virtualinvoke $r7.<android.util.SparseArray: void remove(int)>(i0);

        $r8 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalInteractionConnections>;

        virtualinvoke $r8.<android.util.SparseArray: void remove(int)>(i0);

        goto label3;

     label1:
        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isValidUserForWindowTokensLocked(int)>(i1);

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>(i1);

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r9 = (android.os.IBinder) $r3;

        $r4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>(i1);

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

     label2:
        r10 = r9;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isValidUserForInteractionConnectionsLocked(int)>(i1);

        if $z1 == 0 goto label3;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>(i1);

        virtualinvoke $r1.<android.util.SparseArray: void remove(int)>(i0);

        r10 = r9;

     label3:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void onAccessibilityInteractionConnectionRemovedLocked(int,android.os.IBinder)>(i0, r10);

        return;
    }

    private android.os.IBinder resolveTopParentTokenLocked(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1, r2, $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder getHostTokenLocked(android.os.IBinder)>(r1);

        if r2 != null goto label1;

        return r1;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder resolveTopParentTokenLocked(android.os.IBinder)>(r2);

        return $r3;
    }

    private void setAccessibilityFocusedWindowLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1, i2, i3;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r1;
        com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender $r2;
        android.view.accessibility.AccessibilityEvent $r3;
        android.util.SparseArray $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId>;

        if i2 == i0 goto label3;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender mAccessibilityEventSender>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtainWindowsChangedEvent(int,int)>(i2, 128);

        interfaceinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender: void sendAccessibilityEventForCurrentUserLocked(android.view.accessibility.AccessibilityEvent)>($r3);

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId> = i0;

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r6;

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: void setAccessibilityFocusedWindowLocked(int)>(i0);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private void setActiveWindowLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1, i2, i3;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r1;
        com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender $r2;
        android.view.accessibility.AccessibilityEvent $r3;
        android.util.SparseArray $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        if i2 == i0 goto label3;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender mAccessibilityEventSender>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtainWindowsChangedEvent(int,int)>(i2, 32);

        interfaceinvoke $r2.<com.android.server.accessibility.AccessibilityWindowManager$AccessibilityEventSender: void sendAccessibilityEventForCurrentUserLocked(android.view.accessibility.AccessibilityEvent)>($r3);

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId> = i0;

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r6;

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: void setActiveWindowLocked(int)>(i0);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public int addAccessibilityInteractionConnection(android.view.IWindow, android.os.IBinder, android.view.accessibility.IAccessibilityInteractionConnection, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1, r22;
        android.view.accessibility.IAccessibilityInteractionConnection r2;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8;
        java.lang.Object r3;
        com.android.server.wm.WindowManagerInternal $r4, $r9, $r10;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r5, $r6, r23;
        android.util.SparseArray $r7, $r8, $r11, $r12;
        java.lang.Throwable $r13, $r14, $r15, $r16, $r17, $r18, $r19, r26;
        android.view.IWindow r20;
        java.lang.String r21, r24;
        boolean z1, z2, z3;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r25, r27;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r20 := @parameter0: android.view.IWindow;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.view.accessibility.IAccessibilityInteractionConnection;

        r21 := @parameter3: java.lang.String;

        i6 := @parameter4: int;

        r22 = interfaceinvoke r20.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        i0 = virtualinvoke $r4.<com.android.server.wm.WindowManagerInternal: int getDisplayIdForWindow(android.os.IBinder)>(r22);

        r3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        i1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i6);

        $i4 = staticinvoke <android.os.UserHandle: int getCallingAppId()>();

        i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i1, $i4);

        r23 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        i3 = staticinvoke <android.os.UserHandle: int getCallingAppId()>();

        i7 = staticinvoke <android.os.Binder: int getCallingPid()>();

     label02:
        r24 = virtualinvoke r23.<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String resolveValidReportedPackageLocked(java.lang.CharSequence,int,int,int)>(r21, i3, i1, i7);

     label03:
        i8 = <com.android.server.accessibility.AccessibilityWindowManager: int sNextWindowId>;

        $i5 = i8 + 1;

        <com.android.server.accessibility.AccessibilityWindowManager: int sNextWindowId> = $i5;

        $r6 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        z1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean isCallerInteractingAcrossUsers(int)>(i6);

     label04:
        if z1 == 0 goto label08;

     label05:
        r25 = new com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection;

        specialinvoke r25.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void <init>(com.android.server.accessibility.AccessibilityWindowManager,int,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int,int)>(r0, i8, r2, r24, i2, -1);

        virtualinvoke r25.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void linkToDeath()>();

        $r11 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalInteractionConnections>;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i8, r25);

        $r12 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens>;

        virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i8, r22);

     label06:
        goto label10;

     label07:
        $r15 := @caughtexception;

        r26 = $r15;

        goto label21;

     label08:
        r27 = new com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection;

     label09:
        specialinvoke r27.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void <init>(com.android.server.accessibility.AccessibilityWindowManager,int,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int,int)>(r0, i8, r2, r24, i2, i1);

        virtualinvoke r27.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void linkToDeath()>();

        $r7 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>(i1);

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i8, r27);

        $r8 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>(i1);

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i8, r22);

     label10:
        z2 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked(int)>(i0);

     label11:
        z3 = 0;

        if z2 == 0 goto label12;

        z3 = 1;

     label12:
        virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void registerIdLocked(android.os.IBinder,int)>(r1, i8);

        exitmonitor r3;

     label13:
        if z3 == 0 goto label14;

        $r10 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        virtualinvoke $r10.<com.android.server.wm.WindowManagerInternal: void computeWindowsForAccessibility(int)>(i0);

     label14:
        $r9 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        virtualinvoke $r9.<com.android.server.wm.WindowManagerInternal: void setAccessibilityIdToSurfaceMetadata(android.os.IBinder,int)>(r22, i8);

        return i8;

     label15:
        $r16 := @caughtexception;

        r26 = $r16;

        goto label17;

     label16:
        $r17 := @caughtexception;

        r26 = $r17;

     label17:
        goto label21;

     label18:
        $r19 := @caughtexception;

        r26 = $r19;

        goto label21;

     label19:
        $r14 := @caughtexception;

        r26 = $r14;

        goto label21;

     label20:
        $r18 := @caughtexception;

        r26 = $r18;

     label21:
        exitmonitor r3;

     label22:
        throw r26;

     label23:
        $r13 := @caughtexception;

        r26 = $r13;

        goto label21;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label21 to label22 with label23;
    }

    public void associateEmbeddedHierarchyLocked(android.os.IBinder, android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1, r2;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.IBinder;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void associateLocked(android.os.IBinder,android.os.IBinder)>(r2, r1);

        return;
    }

    void associateLocked(android.os.IBinder, android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1, r2;
        android.util.ArrayMap $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.IBinder;

        $r3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.ArrayMap mHostEmbeddedMap>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public boolean computePartialInteractiveRegionForWindowLocked(int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.graphics.Region r1;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r2;
        boolean $z0;
        int i0, i1;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        i1 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int resolveParentWindowIdLocked(int)>(i0);

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver getDisplayWindowObserverByWindowIdLocked(int)>(i1);

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: boolean computePartialInteractiveRegionForWindowLocked(int,android.graphics.Region)>(i1, r1);

        return $z0;

     label1:
        return 0;
    }

    public void disassociateEmbeddedHierarchyLocked(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void disassociateLocked(android.os.IBinder)>(r1);

        return;
    }

    void disassociateLocked(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1, $r7;
        android.util.ArrayMap $r2, $r4, $r5, $r8;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.ArrayMap mHostEmbeddedMap>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.ArrayMap mHostEmbeddedMap>;

        $i0 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.ArrayMap mHostEmbeddedMap>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r7 = (android.os.IBinder) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r8 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.ArrayMap mHostEmbeddedMap>;

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i1);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        int i0, i1;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r4;
        android.util.SparseArray $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r6 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r4 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r7;

        if r4 == null goto label2;

        virtualinvoke r4.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r1;
        android.view.accessibility.AccessibilityWindowInfo $r2;
        int i0, i1;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int resolveParentWindowIdLocked(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver getDisplayWindowObserverByWindowIdLocked(int)>(i1);

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)>(i1);

        return $r2;

     label1:
        return null;
    }

    public int findWindowIdLocked(int, android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1, $i2, i3, i4;
        android.os.IBinder r1;
        android.util.SparseArray $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens>;

        i3 = virtualinvoke $r2.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r1);

        if i3 < 0 goto label1;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens>;

        $i2 = virtualinvoke $r5.<android.util.SparseArray: int keyAt(int)>(i3);

        return $i2;

     label1:
        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isValidUserForWindowTokensLocked(int)>(i0);

        if $z0 == 0 goto label2;

        $r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>(i0);

        i4 = virtualinvoke $r3.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r1);

        if i4 < 0 goto label2;

        $r4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>(i0);

        $i1 = virtualinvoke $r4.<android.util.SparseArray: int keyAt(int)>(i4);

        return $i1;

     label2:
        return -1;
    }

    public android.view.WindowInfo findWindowInfoByIdLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r1;
        android.view.WindowInfo $r2;
        int i0, i1;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int resolveParentWindowIdLocked(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver getDisplayWindowObserverByWindowIdLocked(int)>(i1);

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: android.view.WindowInfo findWindowInfoByIdLocked(int)>(i1);

        return $r2;

     label1:
        return null;
    }

    public int getActiveWindowId(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        if $i1 != -1 goto label1;

        $z0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean mTouchInteractionInProgress>;

        if $z0 != 0 goto label1;

        $i2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int findFocusedWindowId(int)>(i0);

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId> = $i2;

     label1:
        $i3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        return $i3;
    }

    public com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r1, r7;
        android.util.SparseArray $r2, $r5;
        java.lang.Object $r3, $r6;
        android.view.accessibility.IAccessibilityInteractionConnection $r4;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalInteractionConnections>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection) $r3;

        r7 = r1;

        if r1 != null goto label1;

        r7 = r1;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isValidUserForInteractionConnectionsLocked(int)>(i0);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>(i0);

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r7 = (com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection) $r6;

     label1:
        if r7 == null goto label2;

        $r4 = virtualinvoke r7.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        if $r4 == null goto label2;

        return r7;

     label2:
        return null;
    }

    public int getDisplayIdByUserIdAndWindowIdLocked(int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1, $i2;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerInternal $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder getWindowTokenForUserAndWindowIdLocked(int,int)>(i0, i1);

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        $i2 = virtualinvoke $r2.<com.android.server.wm.WindowManagerInternal: int getDisplayIdForWindow(android.os.IBinder)>(r1);

        return $i2;
    }

    public java.util.ArrayList getDisplayListLocked()
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1, i2;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r2;
        java.util.ArrayList $r3;
        android.util.SparseArray $r4, $r5;
        java.lang.Object $r6;
        java.lang.Integer $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r2 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r6;

        if r2 == null goto label2;

        $i1 = staticinvoke <com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: int access$1300(com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver)>(r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r3;
    }

    public int getFocusedWindowId(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $i2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedWindowId>;

        return $i2;

     label1:
        if i0 != 2 goto label2;

        $i1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId>;

        return $i1;

     label2:
        return -1;
    }

    android.os.IBinder getHostTokenLocked(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.ArrayMap mHostEmbeddedMap>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.os.IBinder) $r3;

        return $r4;
    }

    public com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getPictureInPictureActionReplacingConnection()
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection mPictureInPictureActionReplacingConnection>;

        return $r1;
    }

    public android.view.accessibility.AccessibilityWindowInfo getPictureInPictureWindowLocked()
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1;
        android.util.SparseArray $r1, $r2;
        java.lang.Object $r3;
        android.view.accessibility.AccessibilityWindowInfo r4, r5, r7, r8;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r6;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r4 = null;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        r5 = r4;

        if i1 >= i0 goto label3;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r6 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r3;

        r7 = r4;

        if r6 == null goto label2;

        r8 = virtualinvoke r6.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: android.view.accessibility.AccessibilityWindowInfo getPictureInPictureWindowLocked()>();

        r7 = r8;

        if r8 == null goto label2;

        r5 = r8;

        goto label3;

     label2:
        i1 = i1 + 1;

        r4 = r7;

        goto label1;

     label3:
        return r5;
    }

    android.os.IBinder getTokenLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        android.os.IBinder $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowIdMap>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (android.os.IBinder) $r2;

        return $r3;
    }

    int getWindowIdLocked(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1;
        int i0, $i1;
        android.util.SparseArray $r2, $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowIdMap>;

        i0 = virtualinvoke $r2.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r1);

        if i0 != -1 goto label1;

        return i0;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowIdMap>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i0);

        return $i1;
    }

    public java.util.List getWindowListLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r3;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: java.util.List getWindowListLocked()>();

        return $r4;

     label1:
        return null;
    }

    public int getWindowOwnerUserId(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerInternal $r2;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowManagerInternal: int getWindowOwnerUserId(android.os.IBinder)>(r1);

        return $i0;
    }

    public android.os.IBinder getWindowTokenForUserAndWindowIdLocked(int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i1;
        android.os.IBinder r1, r6;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (android.os.IBinder) $r3;

        r6 = r1;

        if r1 != null goto label1;

        r6 = r1;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isValidUserForWindowTokensLocked(int)>(i0);

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>(i0);

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r6 = (android.os.IBinder) $r5;

     label1:
        return r6;
    }

    public boolean isTrackingWindowsLocked()
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.util.SparseArray $r1;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        $r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isTrackingWindowsLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: boolean isTrackingWindowsLocked()>();

        return $z0;

     label1:
        return 0;
    }

    public void notifyOutsideTouch(int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2, $r4, r10;
        android.view.accessibility.IAccessibilityInteractionConnection $r3;
        int $i0, $i1, i2, i3, i4, i5, $i6;
        java.lang.Integer $r5;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection $r6, r13;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r11;
        java.util.List r12;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r10 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r10;

     label01:
        r11 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver getDisplayWindowObserverByWindowIdLocked(int)>(i3);

     label02:
        if r11 == null goto label07;

     label03:
        r12 = virtualinvoke r11.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: java.util.List getWatchOutsideTouchWindowIdLocked(int)>(i3);

     label04:
        i4 = 0;

     label05:
        $i0 = interfaceinvoke r12.<java.util.List: int size()>();

        if i4 >= $i0 goto label07;

        $r4 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(i4);

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r6 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection getConnectionLocked(int,int)>(i2, $i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        exitmonitor r10;

     label08:
        i5 = 0;

     label09:
        $i6 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i5 >= $i6 goto label14;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i5);

        r13 = (com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection) $r2;

        if r13 == null goto label13;

     label10:
        $r3 = virtualinvoke r13.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: android.view.accessibility.IAccessibilityInteractionConnection getRemote()>();

        interfaceinvoke $r3.<android.view.accessibility.IAccessibilityInteractionConnection: void notifyOutsideTouch()>();

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

     label13:
        i5 = i5 + 1;

        goto label09;

     label14:
        return;

     label15:
        $r8 := @caughtexception;

     label16:
        exitmonitor r10;

     label17:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void onTouchInteractionEnd()
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        boolean $z0, z1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r1;

        z1 = 0;

     label01:
        r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean mTouchInteractionInProgress> = 0;

        i0 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        $i1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedWindowId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void setActiveWindowLocked(int)>($i1);

     label02:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked()>();

        if $z0 != 0 goto label04;

     label03:
        z1 = 1;

     label04:
        $i2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        if i0 == $i2 goto label07;

        $i3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId>;

        if $i3 != i0 goto label07;

     label05:
        if z1 == 0 goto label07;

     label06:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void clearAccessibilityFocusLocked(int)>(i0);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void onTouchInteractionStart()
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean mTouchInteractionInProgress> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void registerIdLocked(android.os.IBinder, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1;
        int i0;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowIdMap>;

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        return;
    }

    public void removeAccessibilityInteractionConnection(android.view.IWindow)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.lang.Object r1;
        int i0, $i1, i3, i4, i5, i6;
        com.android.server.accessibility.AccessibilitySecurityPolicy $r2;
        android.util.SparseArray $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.Throwable $r9;
        android.view.IWindow r10;
        android.os.IBinder r11;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r10 := @parameter0: android.view.IWindow;

        r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilitySecurityPolicy mSecurityPolicy>;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>($i1);

        r11 = interfaceinvoke r10.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalWindowTokens>;

        $r3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mGlobalInteractionConnections>;

        i3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int removeAccessibilityInteractionConnectionInternalLocked(android.os.IBinder,android.util.SparseArray,android.util.SparseArray)>(r11, $r4, $r3);

     label02:
        if i3 < 0 goto label05;

     label03:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void onAccessibilityInteractionConnectionRemovedLocked(int,android.os.IBinder)>(i3, r11);

        exitmonitor r1;

     label04:
        return;

     label05:
        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowTokens>;

        i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

     label06:
        i4 = 0;

     label07:
        if i4 >= i0 goto label14;

     label08:
        $r6 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowTokens>;

        i5 = virtualinvoke $r6.<android.util.SparseArray: int keyAt(int)>(i4);

     label09:
        $r7 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>(i5);

        $r8 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>(i5);

        i6 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int removeAccessibilityInteractionConnectionInternalLocked(android.os.IBinder,android.util.SparseArray,android.util.SparseArray)>(r11, $r7, $r8);

     label10:
        if i6 < 0 goto label13;

     label11:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void onAccessibilityInteractionConnectionRemovedLocked(int,android.os.IBinder)>(i6, r11);

        exitmonitor r1;

     label12:
        return;

     label13:
        i4 = i4 + 1;

        goto label07;

     label14:
        exitmonitor r1;

     label15:
        return;

     label16:
        $r9 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public int resolveParentWindowIdLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        android.os.IBinder r1, $r2;
        int i0, i1;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i1 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder getTokenLocked(int)>(i1);

        if r1 != null goto label1;

        return i1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder resolveTopParentTokenLocked(android.os.IBinder)>(r1);

        i0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int getWindowIdLocked(android.os.IBinder)>($r2);

        if i0 == -1 goto label2;

        i1 = i0;

        goto label2;

     label2:
        return i1;
    }

    public void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        java.lang.Object r1;
        com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection r2, $r3, $r4;
        java.lang.Throwable $r5;
        android.view.accessibility.IAccessibilityInteractionConnection r6;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        r6 := @parameter0: android.view.accessibility.IAccessibilityInteractionConnection;

        r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection mPictureInPictureActionReplacingConnection>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection mPictureInPictureActionReplacingConnection>;

        virtualinvoke $r4.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void unlinkToDeath()>();

        r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection mPictureInPictureActionReplacingConnection> = null;

     label2:
        if r6 == null goto label4;

     label3:
        r2 = new com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection;

        specialinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void <init>(com.android.server.accessibility.AccessibilityWindowManager,int,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int,int)>(r0, -3, r6, "foo.bar.baz", 1000, -1);

        r0.<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection mPictureInPictureActionReplacingConnection> = r2;

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void linkToDeath()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void startTrackingWindows(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        java.lang.Object r1, $r4;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r2, r7;
        android.util.SparseArray $r3, $r5;
        boolean $z0, $z1;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r4;

     label02:
        r7 = r2;

        if r2 != null goto label04;

     label03:
        r7 = new com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver;

        specialinvoke r7.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: void <init>(com.android.server.accessibility.AccessibilityWindowManager,int)>(r0, i0);

     label04:
        $z0 = virtualinvoke r7.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: boolean isTrackingWindowsLocked()>();

        if $z0 == 0 goto label06;

        exitmonitor r1;

     label05:
        return;

     label06:
        $z1 = virtualinvoke r7.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: boolean startTrackingWindowsLocked()>();

        if $z1 == 0 goto label07;

        $r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void stopTrackingWindows(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        java.lang.Object r1, $r3;
        android.util.SparseArray $r2, $r4;
        java.lang.Throwable $r5;
        com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver r6;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver) $r3;

     label2:
        if r6 == null goto label4;

     label3:
        virtualinvoke r6.<com.android.server.accessibility.AccessibilityWindowManager$DisplayWindowsObserver: void stopTrackingWindowsLocked()>();

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mDisplayWindowsObservers>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void unregisterIdLocked(int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0;
        android.os.IBinder r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowIdMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.os.IBinder) $r3;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void disassociateLocked(android.os.IBinder)>(r1);

        $r4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray mWindowIdMap>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        return;
    }

    public void updateActiveAndAccessibilityFocusedWindowLocked(int, int, long, int, int)
    {
        com.android.server.accessibility.AccessibilityWindowManager r0;
        int i0, i2, i3, $i4, $i5, $i6, $i11, i12, i13;
        long l1, $l7, $l9;
        boolean $z0, $z1;
        byte $b8, $b10;
        java.lang.Throwable $r1, $r2, $r3, $r4;
        java.lang.Object r5, r7, r9, r11;

        r0 := @this: com.android.server.accessibility.AccessibilityWindowManager;

        i12 := @parameter0: int;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        if i2 == 32 goto label25;

        if i2 == 128 goto label18;

        if i2 == 32768 goto label11;

        if i2 == 65536 goto label01;

        goto label30;

     label01:
        r5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r5;

     label02:
        $l7 = r0.<com.android.server.accessibility.AccessibilityWindowManager: long mAccessibilityFocusNodeId>;

        $b8 = $l7 cmp l1;

        if $b8 != 0 goto label03;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: long mAccessibilityFocusNodeId> = 2147483647L;

     label03:
        $l9 = r0.<com.android.server.accessibility.AccessibilityWindowManager: long mAccessibilityFocusNodeId>;

        $b10 = $l9 cmp 2147483647L;

        if $b10 != 0 goto label06;

        $i11 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId>;

        if $i11 != i0 goto label06;

     label04:
        if i3 == 64 goto label06;

     label05:
        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId> = -1;

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedDisplayId> = -1;

     label06:
        exitmonitor r5;

     label07:
        goto label30;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r5;

     label10:
        throw $r2;

     label11:
        r7 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r7;

     label12:
        $i5 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId>;

        if $i5 == i0 goto label13;

        $i6 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mAccessibilityFocusedWindowId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void clearAccessibilityFocusLocked(int)>($i6);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void setAccessibilityFocusedWindowLocked(int)>(i0);

     label13:
        r0.<com.android.server.accessibility.AccessibilityWindowManager: long mAccessibilityFocusNodeId> = l1;

        exitmonitor r7;

     label14:
        goto label30;

     label15:
        $r4 := @caughtexception;

     label16:
        exitmonitor r7;

     label17:
        throw $r4;

     label18:
        r9 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r9;

     label19:
        $z1 = r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean mTouchInteractionInProgress>;

        if $z1 == 0 goto label20;

        $i4 = r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId>;

        if $i4 == i0 goto label20;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: void setActiveWindowLocked(int)>(i0);

     label20:
        exitmonitor r9;

     label21:
        goto label30;

     label22:
        $r1 := @caughtexception;

     label23:
        exitmonitor r9;

     label24:
        throw $r1;

     label25:
        r11 = r0.<com.android.server.accessibility.AccessibilityWindowManager: java.lang.Object mLock>;

        entermonitor r11;

     label26:
        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked()>();

        if $z0 != 0 goto label29;

        i13 = specialinvoke r0.<com.android.server.accessibility.AccessibilityWindowManager: int findFocusedWindowId(int)>(i12);

        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mTopFocusedWindowId> = i13;

     label27:
        if i0 != i13 goto label29;

     label28:
        r0.<com.android.server.accessibility.AccessibilityWindowManager: int mActiveWindowId> = i0;

     label29:
        exitmonitor r11;

     label30:
        return;

     label31:
        $r3 := @caughtexception;

     label32:
        exitmonitor r11;

     label33:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.lang.Throwable from label28 to label29 with label31;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label32 to label33 with label31;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.AccessibilityWindowManager: java.lang.String LOG_TAG> = "AccessibilityWindowManager";

        <com.android.server.accessibility.AccessibilityWindowManager: boolean DEBUG> = 0;

        return;
    }
}
