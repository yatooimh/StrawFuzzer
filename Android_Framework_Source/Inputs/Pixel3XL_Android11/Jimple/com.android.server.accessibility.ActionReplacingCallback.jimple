public class com.android.server.accessibility.ActionReplacingCallback extends android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    private final android.view.accessibility.IAccessibilityInteractionConnection mConnectionWithReplacementActions;
    boolean mDone;
    private final int mInteractionId;
    private final java.lang.Object mLock;
    boolean mMultiNodeCallbackHappened;
    android.view.accessibility.AccessibilityNodeInfo mNodeFromOriginalWindow;
    java.util.List mNodesFromOriginalWindow;
    java.util.List mNodesWithReplacementActions;
    private final android.view.accessibility.IAccessibilityInteractionConnectionCallback mServiceCallback;
    boolean mSingleNodeCallbackHappened;

    public void <init>(android.view.accessibility.IAccessibilityInteractionConnectionCallback, android.view.accessibility.IAccessibilityInteractionConnection, int, int, long)
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        android.view.accessibility.IAccessibilityInteractionConnection r1, $r3;
        int i0, i1, $i4;
        long l2, l3, $l5;
        java.lang.Object $r2;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r6;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        r6 := @parameter0: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        r1 := @parameter1: android.view.accessibility.IAccessibilityInteractionConnection;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        specialinvoke r0.<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accessibility.ActionReplacingCallback: java.lang.Object mLock> = $r2;

        r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.IAccessibilityInteractionConnectionCallback mServiceCallback> = r6;

        r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.IAccessibilityInteractionConnection mConnectionWithReplacementActions> = r1;

        r0.<com.android.server.accessibility.ActionReplacingCallback: int mInteractionId> = i0;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.IAccessibilityInteractionConnection mConnectionWithReplacementActions>;

        $l5 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        $i4 = i0 + 1;

        interfaceinvoke $r3.<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,android.os.Bundle)>($l5, null, $i4, r0, 0, i1, l2, null, null);

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mMultiNodeCallbackHappened> = 1;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private void recycleReplaceActionNodesLocked()
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        java.util.List r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        android.view.accessibility.AccessibilityNodeInfo $r4;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        r1 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesWithReplacementActions>;

        if r1 != null goto label1;

        return;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesWithReplacementActions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (android.view.accessibility.AccessibilityNodeInfo) $r3;

        virtualinvoke $r4.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        i1 = i1 + -1;

        goto label2;

     label3:
        r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesWithReplacementActions> = null;

        return;
    }

    private void replaceActionsOnInfoLocked(android.view.accessibility.AccessibilityNodeInfo)
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        android.view.accessibility.AccessibilityNodeInfo r1, r2;
        java.util.List r3, $r4, $r5, $r6;
        long $l0, $l1, $l4, $l5;
        byte $b2, $b6;
        int $i3, $i7, i8, i9;
        java.lang.Object $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r8, $r9, $r11;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void removeAllActions()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>(0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>(0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>(0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>(0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>(0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>(0);

        $l0 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $l1 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label6;

        $r4 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesWithReplacementActions>;

        if $r4 == null goto label6;

        i8 = 0;

     label1:
        $r5 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesWithReplacementActions>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i8 >= $i3 goto label6;

        $r6 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesWithReplacementActions>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i8);

        r2 = (android.view.accessibility.AccessibilityNodeInfo) $r7;

        $l4 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $l5 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label5;

        r3 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>();

        if r3 == null goto label4;

        i9 = 0;

     label2:
        $i7 = interfaceinvoke r3.<java.util.List: int size()>();

        if i9 >= $i7 goto label3;

        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i9);

        $r11 = (android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction) $r10;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r11);

        i9 = i9 + 1;

        goto label2;

     label3:
        $r8 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_ACCESSIBILITY_FOCUS>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r8);

        $r9 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_ACCESSIBILITY_FOCUS>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r9);

     label4:
        $z0 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>($z0);

        $z1 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>($z1);

        $z2 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>($z2);

        $z3 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>($z3);

        $z4 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>($z4);

        $z5 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>($z5);

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        return;
    }

    private void replaceInfoActionsAndCallService()
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        boolean $z0;
        android.view.accessibility.AccessibilityNodeInfo $r1, $r3, r7;
        int $i0;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback $r2;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        r6 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.lang.Object mLock>;

        entermonitor r6;

     label01:
        $z0 = r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mDone>;

        if $z0 == 0 goto label03;

        exitmonitor r6;

     label02:
        return;

     label03:
        $r1 = r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.AccessibilityNodeInfo mNodeFromOriginalWindow>;

        if $r1 == null goto label04;

        $r3 = r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.AccessibilityNodeInfo mNodeFromOriginalWindow>;

        specialinvoke r0.<com.android.server.accessibility.ActionReplacingCallback: void replaceActionsOnInfoLocked(android.view.accessibility.AccessibilityNodeInfo)>($r3);

     label04:
        specialinvoke r0.<com.android.server.accessibility.ActionReplacingCallback: void recycleReplaceActionNodesLocked()>();

        r7 = r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.AccessibilityNodeInfo mNodeFromOriginalWindow>;

        r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mDone> = 1;

        exitmonitor r6;

     label05:
        $r2 = r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.IAccessibilityInteractionConnectionCallback mServiceCallback>;

        $i0 = r0.<com.android.server.accessibility.ActionReplacingCallback: int mInteractionId>;

        interfaceinvoke $r2.<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>(r7, $i0);

     label06:
        goto label08;

     label07:
        $r5 := @caughtexception;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r6;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void replaceInfosActionsAndCallService()
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        java.lang.Object r1, $r9;
        boolean $z0;
        java.util.List $r2, $r3, $r5, $r7, $r8;
        java.util.ArrayList $r4, r13;
        int $i0, $i1, i2;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback $r6;
        android.view.accessibility.AccessibilityNodeInfo $r10;
        java.lang.Throwable $r11;
        android.os.RemoteException $r12;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        r1 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mDone>;

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r2 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesFromOriginalWindow>;

        if $r2 == null goto label07;

     label04:
        i2 = 0;

     label05:
        $r7 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesFromOriginalWindow>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i2 >= $i1 goto label07;

        $r8 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesFromOriginalWindow>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i2);

        $r10 = (android.view.accessibility.AccessibilityNodeInfo) $r9;

        specialinvoke r0.<com.android.server.accessibility.ActionReplacingCallback: void replaceActionsOnInfoLocked(android.view.accessibility.AccessibilityNodeInfo)>($r10);

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        specialinvoke r0.<com.android.server.accessibility.ActionReplacingCallback: void recycleReplaceActionNodesLocked()>();

        $r3 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesFromOriginalWindow>;

        if $r3 != null goto label09;

     label08:
        r13 = null;

        goto label10;

     label09:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesFromOriginalWindow>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        r13 = $r4;

     label10:
        r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mDone> = 1;

        exitmonitor r1;

     label11:
        $r6 = r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.IAccessibilityInteractionConnectionCallback mServiceCallback>;

        $i0 = r0.<com.android.server.accessibility.ActionReplacingCallback: int mInteractionId>;

        interfaceinvoke $r6.<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setFindAccessibilityNodeInfosResult(java.util.List,int)>(r13, $i0);

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

     label14:
        return;

     label15:
        $r11 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo, int)
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r2;
        android.view.accessibility.AccessibilityNodeInfo r3;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        r3 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.accessibility.ActionReplacingCallback: int mInteractionId>;

        if i0 != $i1 goto label4;

        r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.AccessibilityNodeInfo mNodeFromOriginalWindow> = r3;

        r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mSingleNodeCallbackHappened> = 1;

        z0 = r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mMultiNodeCallbackHappened>;

        exitmonitor r1;

     label2:
        if z0 == 0 goto label3;

        specialinvoke r0.<com.android.server.accessibility.ActionReplacingCallback: void replaceInfoActionsAndCallService()>();

     label3:
        return;

     label4:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActionReplacingCallback", "Callback with unexpected interactionId");

        exitmonitor r1;

     label5:
        return;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setFindAccessibilityNodeInfosResult(java.util.List, int)
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        boolean z0, z1;
        java.lang.Throwable $r2;
        java.util.List r3;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        r3 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.accessibility.ActionReplacingCallback: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<com.android.server.accessibility.ActionReplacingCallback: int mInteractionId>;

        if i0 != $i1 goto label03;

        r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesFromOriginalWindow> = r3;

     label02:
        goto label04;

     label03:
        $i2 = r0.<com.android.server.accessibility.ActionReplacingCallback: int mInteractionId>;

        $i3 = $i2 + 1;

        if i0 != $i3 goto label08;

        r0.<com.android.server.accessibility.ActionReplacingCallback: java.util.List mNodesWithReplacementActions> = r3;

     label04:
        z0 = r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mSingleNodeCallbackHappened>;

        z1 = r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mMultiNodeCallbackHappened>;

        r0.<com.android.server.accessibility.ActionReplacingCallback: boolean mMultiNodeCallbackHappened> = 1;

        exitmonitor r1;

     label05:
        if z0 == 0 goto label06;

        specialinvoke r0.<com.android.server.accessibility.ActionReplacingCallback: void replaceInfoActionsAndCallService()>();

     label06:
        if z1 == 0 goto label07;

        specialinvoke r0.<com.android.server.accessibility.ActionReplacingCallback: void replaceInfosActionsAndCallService()>();

     label07:
        return;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActionReplacingCallback", "Callback with unexpected interactionId");

        exitmonitor r1;

     label09:
        return;

     label10:
        $r2 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setPerformAccessibilityActionResult(boolean, int) throws android.os.RemoteException
    {
        com.android.server.accessibility.ActionReplacingCallback r0;
        boolean z0;
        int i0;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback $r1;

        r0 := @this: com.android.server.accessibility.ActionReplacingCallback;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.accessibility.ActionReplacingCallback: android.view.accessibility.IAccessibilityInteractionConnectionCallback mServiceCallback>;

        interfaceinvoke $r1.<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setPerformAccessibilityActionResult(boolean,int)>(z0, i0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.ActionReplacingCallback: java.lang.String LOG_TAG> = "ActionReplacingCallback";

        <com.android.server.accessibility.ActionReplacingCallback: boolean DEBUG> = 0;

        return;
    }
}
