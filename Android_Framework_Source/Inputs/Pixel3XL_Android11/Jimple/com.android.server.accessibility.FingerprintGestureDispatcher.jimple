public class com.android.server.accessibility.FingerprintGestureDispatcher extends android.hardware.fingerprint.IFingerprintClientActiveCallback$Stub implements android.os.Handler$Callback
{
    private static final java.lang.String LOG_TAG;
    private static final int MSG_REGISTER;
    private static final int MSG_UNREGISTER;
    private final java.util.List mCapturingClients;
    private final android.hardware.fingerprint.IFingerprintService mFingerprintService;
    private final android.os.Handler mHandler;
    private final boolean mHardwareSupportsGestures;
    private final java.lang.Object mLock;
    private boolean mRegisteredReadOnlyExceptInHandler;

    public void <init>(android.hardware.fingerprint.IFingerprintService, android.content.res.Resources, java.lang.Object)
    {
        com.android.server.accessibility.FingerprintGestureDispatcher r0;
        android.hardware.fingerprint.IFingerprintService r1;
        android.content.res.Resources r2;
        java.lang.Object r3;
        java.util.ArrayList $r4;
        boolean $z0;
        android.os.Handler $r5;

        r0 := @this: com.android.server.accessibility.FingerprintGestureDispatcher;

        r1 := @parameter0: android.hardware.fingerprint.IFingerprintService;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<android.hardware.fingerprint.IFingerprintClientActiveCallback$Stub: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(0);

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients> = $r4;

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.hardware.fingerprint.IFingerprintService mFingerprintService> = r1;

        $z0 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891461);

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mHardwareSupportsGestures> = $z0;

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.lang.Object mLock> = r3;

        $r5 = new android.os.Handler;

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Handler$Callback)>(r0);

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.os.Handler mHandler> = $r5;

        return;
    }

    public void <init>(android.hardware.fingerprint.IFingerprintService, android.content.res.Resources, java.lang.Object, android.os.Handler)
    {
        com.android.server.accessibility.FingerprintGestureDispatcher r0;
        android.hardware.fingerprint.IFingerprintService r1;
        android.content.res.Resources r2;
        java.lang.Object r3;
        android.os.Handler r4;
        java.util.ArrayList $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.FingerprintGestureDispatcher;

        r1 := @parameter0: android.hardware.fingerprint.IFingerprintService;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: android.os.Handler;

        specialinvoke r0.<android.hardware.fingerprint.IFingerprintClientActiveCallback$Stub: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(0);

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients> = $r5;

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.hardware.fingerprint.IFingerprintService mFingerprintService> = r1;

        $z0 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891461);

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mHardwareSupportsGestures> = $z0;

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.lang.Object mLock> = r3;

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.os.Handler mHandler> = r4;

        return;
    }

    public boolean handleMessage(android.os.Message)
    {
        com.android.server.accessibility.FingerprintGestureDispatcher r0;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        android.hardware.fingerprint.IFingerprintService $r6, $r7;
        android.os.RemoteException $r8, $r10;
        java.lang.Throwable $r9, $r11;
        android.os.Message r12;
        long l6, l7;

        r0 := @this: com.android.server.accessibility.FingerprintGestureDispatcher;

        r12 := @parameter0: android.os.Message;

        $i0 = r12.<android.os.Message: int what>;

        if $i0 != 1 goto label09;

        l6 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r7 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.hardware.fingerprint.IFingerprintService mFingerprintService>;

        interfaceinvoke $r7.<android.hardware.fingerprint.IFingerprintService: void addClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>(r0);

        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mRegisteredReadOnlyExceptInHandler> = 1;

     label02:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l6);

        goto label07;

     label03:
        $r9 := @caughtexception;

        goto label08;

     label04:
        $r8 := @caughtexception;

     label05:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("FingerprintGestureDispatcher", "Failed to register for fingerprint activity callbacks");

     label06:
        goto label02;

     label07:
        return 0;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l6);

        throw $r9;

     label09:
        $i1 = r12.<android.os.Message: int what>;

        if $i1 != 2 goto label18;

        l7 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label10:
        $r6 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.hardware.fingerprint.IFingerprintService mFingerprintService>;

        interfaceinvoke $r6.<android.hardware.fingerprint.IFingerprintService: void removeClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>(r0);

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l7);

        goto label16;

     label12:
        $r11 := @caughtexception;

        goto label17;

     label13:
        $r10 := @caughtexception;

     label14:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("FingerprintGestureDispatcher", "Failed to unregister for fingerprint activity callbacks");

     label15:
        goto label11;

     label16:
        r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mRegisteredReadOnlyExceptInHandler> = 0;

        return 1;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l7);

        throw $r11;

     label18:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown message: ");

        $i2 = r12.<android.os.Message: int what>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("FingerprintGestureDispatcher", $r5);

        return 0;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
    }

    public boolean isFingerprintGestureDetectionAvailable()
    {
        com.android.server.accessibility.FingerprintGestureDispatcher r0;
        long l0;
        boolean z0, $z1, $z2;
        android.hardware.fingerprint.IFingerprintService $r1;
        android.os.RemoteException $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.accessibility.FingerprintGestureDispatcher;

        $z1 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mHardwareSupportsGestures>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r1 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.hardware.fingerprint.IFingerprintService mFingerprintService>;

        z0 = interfaceinvoke $r1.<android.hardware.fingerprint.IFingerprintService: boolean isClientActive()>();

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $z2 = z0 ^ 1;

        return $z2;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void onClientActiveChanged(boolean)
    {
        com.android.server.accessibility.FingerprintGestureDispatcher r0;
        boolean z0, $z1, z2;
        java.lang.Object r1, $r4;
        java.util.List $r2, $r3;
        int $i0, i1;
        java.lang.Throwable $r5;
        com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient r6;

        r0 := @this: com.android.server.accessibility.FingerprintGestureDispatcher;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mHardwareSupportsGestures>;

        if $z1 != 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.lang.Object mLock>;

        entermonitor r1;

        i1 = 0;

     label02:
        $r2 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label07;

        $r3 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r6 = (com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient) $r4;

     label03:
        if z0 != 0 goto label04;

        z2 = 1;

        goto label05;

     label04:
        z2 = 0;

     label05:
        interfaceinvoke r6.<com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient: void onFingerprintGestureDetectionActiveChanged(boolean)>(z2);

     label06:
        i1 = i1 + 1;

        goto label02;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean onFingerprintGesture(int)
    {
        com.android.server.accessibility.FingerprintGestureDispatcher r0;
        java.lang.Object r1, $r3;
        java.util.List $r2, $r7;
        boolean $z0;
        com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient $r4;
        java.lang.Throwable $r5;
        int i0, i2, $i3;
        byte b1;
        java.util.ArrayList r6;

        r0 := @this: com.android.server.accessibility.FingerprintGestureDispatcher;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        tableswitch(i0)
        {
            case 280: goto label09;
            case 281: goto label08;
            case 282: goto label07;
            case 283: goto label06;
            default: goto label04;
        };

     label04:
        exitmonitor r1;

     label05:
        goto label14;

     label06:
        b1 = 1;

        goto label10;

     label07:
        b1 = 2;

        goto label10;

     label08:
        b1 = 8;

        goto label10;

     label09:
        b1 = 4;

     label10:
        r6 = new java.util.ArrayList;

        $r7 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients>;

        specialinvoke r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        exitmonitor r1;

     label11:
        i2 = 0;

     label12:
        $i3 = interfaceinvoke r6.<java.util.List: int size()>();

        if i2 >= $i3 goto label13;

        $r3 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient) $r3;

        interfaceinvoke $r4.<com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient: void onFingerprintGesture(int)>(b1);

        i2 = i2 + 1;

        goto label12;

     label13:
        return 1;

     label14:
        return 0;

     label15:
        $r5 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void updateClientList(java.util.List)
    {
        com.android.server.accessibility.FingerprintGestureDispatcher r0;
        java.lang.Object r1, $r9;
        com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r3, $r4, $r10, r12;
        int $i0, i1;
        android.os.Handler $r5, $r7;
        android.os.Message $r6, $r8;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.accessibility.FingerprintGestureDispatcher;

        r12 := @parameter0: java.util.List;

        $z0 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mHardwareSupportsGestures>;

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

     label03:
        i1 = 0;

     label04:
        $i0 = interfaceinvoke r12.<java.util.List: int size()>();

        if i1 >= $i0 goto label06;

        $r9 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient) $r9;

        $z4 = interfaceinvoke r2.<com.android.server.accessibility.FingerprintGestureDispatcher$FingerprintGestureClient: boolean isCapturingFingerprintGestures()>();

        if $z4 == 0 goto label05;

        $r10 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r2);

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        $r4 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: java.util.List mCapturingClients>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label08;

        $z3 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mRegisteredReadOnlyExceptInHandler>;

        if $z3 == 0 goto label09;

        $r7 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.os.Handler mHandler>;

        $r8 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke $r8.<android.os.Message: void sendToTarget()>();

     label07:
        goto label09;

     label08:
        $z2 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: boolean mRegisteredReadOnlyExceptInHandler>;

        if $z2 != 0 goto label09;

        $r5 = r0.<com.android.server.accessibility.FingerprintGestureDispatcher: android.os.Handler mHandler>;

        $r6 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r11 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.FingerprintGestureDispatcher: int MSG_UNREGISTER> = 2;

        <com.android.server.accessibility.FingerprintGestureDispatcher: int MSG_REGISTER> = 1;

        <com.android.server.accessibility.FingerprintGestureDispatcher: java.lang.String LOG_TAG> = "FingerprintGestureDispatcher";

        return;
    }
}
