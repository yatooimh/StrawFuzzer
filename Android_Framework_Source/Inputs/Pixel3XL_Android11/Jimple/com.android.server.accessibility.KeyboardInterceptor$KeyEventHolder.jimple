class com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder extends java.lang.Object
{
    private static final int MAX_POOL_SIZE;
    private static final android.util.Pools$SimplePool sPool;
    public long dispatchTime;
    public android.view.KeyEvent event;
    public com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder next;
    public int policyFlags;
    public com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder previous;

    static void <clinit>()
    {
        android.util.Pools$SimplePool $r0;

        <com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: int MAX_POOL_SIZE> = 32;

        $r0 = new android.util.Pools$SimplePool;

        specialinvoke $r0.<android.util.Pools$SimplePool: void <init>(int)>(32);

        <com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: android.util.Pools$SimplePool sPool> = $r0;

        return;
    }

    private void <init>()
    {
        com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder r0;

        r0 := @this: com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder obtain(android.view.KeyEvent, int, long)
    {
        android.view.KeyEvent r0, $r4;
        int i0;
        long l1;
        com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder r1, $r5, r6;
        android.util.Pools$SimplePool $r2;
        java.lang.Object $r3;

        r0 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r2 = <com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: android.util.Pools$SimplePool sPool>;

        $r3 = virtualinvoke $r2.<android.util.Pools$SimplePool: java.lang.Object acquire()>();

        r1 = (com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder) $r3;

        r6 = r1;

        if r1 != null goto label1;

        $r5 = new com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder;

        specialinvoke $r5.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: void <init>()>();

        r6 = $r5;

     label1:
        $r4 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent obtain(android.view.KeyEvent)>(r0);

        r6.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: android.view.KeyEvent event> = $r4;

        r6.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: int policyFlags> = i0;

        r6.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: long dispatchTime> = l1;

        return r6;
    }

    public void recycle()
    {
        com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder r0;
        android.view.KeyEvent $r1;
        android.util.Pools$SimplePool $r2;

        r0 := @this: com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder;

        $r1 = r0.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: android.view.KeyEvent event>;

        virtualinvoke $r1.<android.view.KeyEvent: void recycle()>();

        r0.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: android.view.KeyEvent event> = null;

        r0.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: int policyFlags> = 0;

        r0.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: long dispatchTime> = 0L;

        r0.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder next> = null;

        r0.<com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder previous> = null;

        $r2 = <com.android.server.accessibility.KeyboardInterceptor$KeyEventHolder: android.util.Pools$SimplePool sPool>;

        virtualinvoke $r2.<android.util.Pools$SimplePool: boolean release(java.lang.Object)>(r0);

        return;
    }
}
