abstract class com.android.server.accessibility.gestures.GestureMatcher extends java.lang.Object
{
    static final int STATE_CLEAR;
    static final int STATE_GESTURE_CANCELED;
    static final int STATE_GESTURE_COMPLETED;
    static final int STATE_GESTURE_STARTED;
    protected final com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition mDelayedTransition;
    private final int mGestureId;
    private final android.os.Handler mHandler;
    private final com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener mListener;
    private int mState;

    void <init>(int, android.os.Handler, com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        int i0;
        android.os.Handler r1;
        com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener r2;
        com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition $r3;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Handler;

        r2 := @parameter2: com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState> = 0;

        r0.<com.android.server.accessibility.gestures.GestureMatcher: int mGestureId> = i0;

        r0.<com.android.server.accessibility.gestures.GestureMatcher: android.os.Handler mHandler> = r1;

        $r3 = new com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition;

        specialinvoke $r3.<com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition: void <init>(com.android.server.accessibility.gestures.GestureMatcher)>(r0);

        r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition mDelayedTransition> = $r3;

        r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener mListener> = r2;

        return;
    }

    static android.os.Handler access$000(com.android.server.accessibility.gestures.GestureMatcher)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.accessibility.gestures.GestureMatcher;

        $r1 = r0.<com.android.server.accessibility.gestures.GestureMatcher: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$100(com.android.server.accessibility.gestures.GestureMatcher, int, android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        int i0, i1;
        android.view.MotionEvent r1, r2;

        r0 := @parameter0: com.android.server.accessibility.gestures.GestureMatcher;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.MotionEvent;

        r2 := @parameter3: android.view.MotionEvent;

        i1 := @parameter4: int;

        specialinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void setState(int,android.view.MotionEvent,android.view.MotionEvent,int)>(i0, r1, r2, i1);

        return;
    }

    public static java.lang.String getStateSymbolicName(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return "STATE_GESTURE_CANCELED";

     label2:
        return "STATE_GESTURE_COMPLETED";

     label3:
        return "STATE_GESTURE_STARTED";

     label4:
        return "STATE_CLEAR";
    }

    private void setState(int, android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        int i0, i1, $i2, $i3;
        android.view.MotionEvent r1, r2;
        com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener $r3;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.MotionEvent;

        r2 := @parameter2: android.view.MotionEvent;

        i1 := @parameter3: int;

        r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState> = i0;

        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void cancelPendingTransitions()>();

        $r3 = r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener mListener>;

        $i3 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mGestureId>;

        $i2 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState>;

        interfaceinvoke $r3.<com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener: void onStateChanged(int,int,android.view.MotionEvent,android.view.MotionEvent,int)>($i3, $i2, r1, r2, i1);

        return;
    }

    protected final void cancelAfter(long, android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        long l0;
        android.view.MotionEvent r1, r2;
        int i1;
        com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition $r3, $r4;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        l0 := @parameter0: long;

        r1 := @parameter1: android.view.MotionEvent;

        r2 := @parameter2: android.view.MotionEvent;

        i1 := @parameter3: int;

        $r3 = r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition mDelayedTransition>;

        virtualinvoke $r3.<com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition: void cancel()>();

        $r4 = r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition mDelayedTransition>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition: void post(int,long,android.view.MotionEvent,android.view.MotionEvent,int)>(3, l0, r1, r2, i1);

        return;
    }

    protected final void cancelAfterDoubleTapTimeout(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0, $i1;
        long $l2;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void cancelAfter(long,android.view.MotionEvent,android.view.MotionEvent,int)>($l2, r1, r2, i0);

        return;
    }

    protected void cancelAfterTapTimeout(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0, $i1;
        long $l2;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getTapTimeout()>();

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void cancelAfter(long,android.view.MotionEvent,android.view.MotionEvent,int)>($l2, r1, r2, i0);

        return;
    }

    protected final void cancelGesture(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void setState(int,android.view.MotionEvent,android.view.MotionEvent,int)>(3, r1, r2, i0);

        return;
    }

    protected final void cancelPendingTransitions()
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition $r1;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        $r1 = r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition mDelayedTransition>;

        virtualinvoke $r1.<com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition: void cancel()>();

        return;
    }

    protected void clear()
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState> = 0;

        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void cancelPendingTransitions()>();

        return;
    }

    protected final void completeAfter(long, android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        long l0;
        android.view.MotionEvent r1, r2;
        int i1;
        com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition $r3, $r4;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        l0 := @parameter0: long;

        r1 := @parameter1: android.view.MotionEvent;

        r2 := @parameter2: android.view.MotionEvent;

        i1 := @parameter3: int;

        $r3 = r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition mDelayedTransition>;

        virtualinvoke $r3.<com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition: void cancel()>();

        $r4 = r0.<com.android.server.accessibility.gestures.GestureMatcher: com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition mDelayedTransition>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.GestureMatcher$DelayedTransition: void post(int,long,android.view.MotionEvent,android.view.MotionEvent,int)>(2, l0, r1, r2, i1);

        return;
    }

    protected final void completeAfterDoubleTapTimeout(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0, $i1;
        long $l2;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void completeAfter(long,android.view.MotionEvent,android.view.MotionEvent,int)>($l2, r1, r2, i0);

        return;
    }

    protected final void completeAfterLongPressTimeout(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0, $i1;
        long $l2;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void completeAfter(long,android.view.MotionEvent,android.view.MotionEvent,int)>($l2, r1, r2, i0);

        return;
    }

    protected final void completeAfterTapTimeout(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0, $i1;
        long $l2;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getTapTimeout()>();

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void completeAfter(long,android.view.MotionEvent,android.view.MotionEvent,int)>($l2, r1, r2, i0);

        return;
    }

    protected final void completeGesture(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void setState(int,android.view.MotionEvent,android.view.MotionEvent,int)>(2, r1, r2, i0);

        return;
    }

    public int getGestureId()
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        $i0 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mGestureId>;

        return $i0;
    }

    abstract java.lang.String getGestureName();

    public int getState()
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        $i0 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState>;

        return $i0;
    }

    protected void onDown(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        return;
    }

    public final int onMotionEvent(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0, $i1, i2, i3, $i4;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        i2 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState>;

        if i2 == 3 goto label8;

        if i2 != 2 goto label1;

        goto label8;

     label1:
        i3 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i3 == 0 goto label6;

        if i3 == 1 goto label5;

        if i3 == 2 goto label4;

        if i3 == 5 goto label3;

        if i3 == 6 goto label2;

        specialinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void setState(int,android.view.MotionEvent,android.view.MotionEvent,int)>(3, r1, r2, i0);

        goto label7;

     label2:
        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void onPointerUp(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label7;

     label3:
        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void onPointerDown(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label7;

     label4:
        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void onMove(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label7;

     label5:
        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void onUp(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label7;

     label6:
        virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void onDown(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

     label7:
        $i4 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState>;

        return $i4;

     label8:
        $i1 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState>;

        return $i1;
    }

    protected void onMove(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        return;
    }

    protected void onPointerDown(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        return;
    }

    protected void onPointerUp(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        return;
    }

    protected void onUp(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        return;
    }

    protected final void startGesture(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        android.view.MotionEvent r1, r2;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: void setState(int,android.view.MotionEvent,android.view.MotionEvent,int)>(1, r1, r2, i0);

        return;
    }

    public java.lang.String toString()
    {
        com.android.server.accessibility.gestures.GestureMatcher r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r6, $r8;
        int $i0;

        r0 := @this: com.android.server.accessibility.gestures.GestureMatcher;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<com.android.server.accessibility.gestures.GestureMatcher: java.lang.String getGestureName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = r0.<com.android.server.accessibility.gestures.GestureMatcher: int mState>;

        $r6 = staticinvoke <com.android.server.accessibility.gestures.GestureMatcher: java.lang.String getStateSymbolicName(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.gestures.GestureMatcher: int STATE_GESTURE_STARTED> = 1;

        <com.android.server.accessibility.gestures.GestureMatcher: int STATE_GESTURE_COMPLETED> = 2;

        <com.android.server.accessibility.gestures.GestureMatcher: int STATE_GESTURE_CANCELED> = 3;

        <com.android.server.accessibility.gestures.GestureMatcher: int STATE_CLEAR> = 0;

        return;
    }
}
