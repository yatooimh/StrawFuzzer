public class com.android.server.accessibility.gestures.TouchExplorer extends com.android.server.accessibility.BaseEventStreamTransformation implements com.android.server.accessibility.gestures.GestureManifold$Listener
{
    static final boolean DEBUG;
    private static final int EXIT_GESTURE_DETECTION_TIMEOUT;
    private static final java.lang.String LOG_TAG;
    private static final float MAX_DRAGGING_ANGLE_COS;
    private final com.android.server.accessibility.AccessibilityManagerService mAms;
    private final android.content.Context mContext;
    private final int mDetermineUserIntentTimeout;
    private final com.android.server.accessibility.gestures.EventDispatcher mDispatcher;
    private final int mDoubleTapSlop;
    private int mDraggingPointerId;
    private final com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed mExitGestureDetectionModeDelayed;
    private android.graphics.Region mGestureDetectionPassthroughRegion;
    private final com.android.server.accessibility.gestures.GestureManifold mGestureDetector;
    private final android.os.Handler mHandler;
    private final com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker;
    private final com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed;
    private final com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed;
    private final com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed;
    private final com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed;
    private com.android.server.accessibility.gestures.TouchState mState;
    private android.graphics.Region mTouchExplorationPassthroughRegion;

    public void <init>(android.content.Context, com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.content.Context r1;
        com.android.server.accessibility.AccessibilityManagerService r2;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.accessibility.AccessibilityManagerService;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.gestures.GestureManifold)>(r1, r2, null);

        return;
    }

    public void <init>(android.content.Context, com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.gestures.GestureManifold)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.content.Context r1;
        com.android.server.accessibility.gestures.GestureManifold r2, $r19;
        com.android.server.accessibility.gestures.TouchState $r3, $r8, $r20;
        com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker $r4;
        com.android.server.accessibility.gestures.EventDispatcher $r5;
        com.android.server.accessibility.AccessibilityManagerService $r6, r21;
        com.android.server.accessibility.EventStreamTransformation $r7;
        int $i0, $i1, $i2, $i3;
        android.view.ViewConfiguration $r9;
        android.os.Handler $r10;
        android.os.Looper $r11;
        com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed $r12;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r13;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r14;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r15, $r16;
        android.graphics.Region $r17, $r18;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.content.Context;

        r21 := @parameter1: com.android.server.accessibility.AccessibilityManagerService;

        r2 := @parameter2: com.android.server.accessibility.gestures.GestureManifold;

        specialinvoke r0.<com.android.server.accessibility.BaseEventStreamTransformation: void <init>()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: android.content.Context mContext> = r1;

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms> = r21;

        $r3 = new com.android.server.accessibility.gestures.TouchState;

        specialinvoke $r3.<com.android.server.accessibility.gestures.TouchState: void <init>()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState> = $r3;

        $r4 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchState: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker getReceivedPointerTracker()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker> = $r4;

        $r5 = new com.android.server.accessibility.gestures.EventDispatcher;

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        $r7 = specialinvoke r0.<com.android.server.accessibility.BaseEventStreamTransformation: com.android.server.accessibility.EventStreamTransformation getNext()>();

        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        specialinvoke $r5.<com.android.server.accessibility.gestures.EventDispatcher: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.EventStreamTransformation,com.android.server.accessibility.gestures.TouchState)>(r1, $r6, $r7, $r8);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher> = $r5;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDetermineUserIntentTimeout> = $i0;

        $r9 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i1 = virtualinvoke $r9.<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDoubleTapSlop> = $i1;

        $r10 = new android.os.Handler;

        $r11 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r10.<android.os.Handler: void <init>(android.os.Looper)>($r11);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: android.os.Handler mHandler> = $r10;

        $r12 = new com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed;

        specialinvoke $r12.<com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed: void <init>(com.android.server.accessibility.gestures.TouchExplorer,com.android.server.accessibility.gestures.TouchExplorer$1)>(r0, null);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed mExitGestureDetectionModeDelayed> = $r12;

        $r13 = new com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed;

        specialinvoke $r13.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void <init>(com.android.server.accessibility.gestures.TouchExplorer)>(r0);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed> = $r13;

        $r14 = new com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed;

        specialinvoke $r14.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void <init>(com.android.server.accessibility.gestures.TouchExplorer)>(r0);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed> = $r14;

        $r15 = new com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed;

        $i2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDetermineUserIntentTimeout>;

        specialinvoke $r15.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void <init>(com.android.server.accessibility.gestures.TouchExplorer,int,int)>(r0, 1024, $i2);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed> = $r15;

        $r16 = new com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed;

        $i3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDetermineUserIntentTimeout>;

        specialinvoke $r16.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void <init>(com.android.server.accessibility.gestures.TouchExplorer,int,int)>(r0, 2097152, $i3);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed> = $r16;

        if r2 != null goto label1;

        $r19 = new com.android.server.accessibility.gestures.GestureManifold;

        $r20 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        specialinvoke $r19.<com.android.server.accessibility.gestures.GestureManifold: void <init>(android.content.Context,com.android.server.accessibility.gestures.GestureManifold$Listener,com.android.server.accessibility.gestures.TouchState)>(r1, r0, $r20);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector> = $r19;

        goto label2;

     label1:
        r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector> = r2;

     label2:
        $r17 = new android.graphics.Region;

        specialinvoke $r17.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mGestureDetectionPassthroughRegion> = $r17;

        $r18 = new android.graphics.Region;

        specialinvoke $r18.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mTouchExplorationPassthroughRegion> = $r18;

        return;
    }

    static android.os.Handler access$300(com.android.server.accessibility.gestures.TouchExplorer)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.accessibility.gestures.TouchExplorer;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: android.os.Handler mHandler>;

        return $r1;
    }

    static com.android.server.accessibility.gestures.EventDispatcher access$400(com.android.server.accessibility.gestures.TouchExplorer)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        com.android.server.accessibility.gestures.EventDispatcher $r1;

        r0 := @parameter0: com.android.server.accessibility.gestures.TouchExplorer;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        return $r1;
    }

    static void access$500(com.android.server.accessibility.gestures.TouchExplorer)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;

        r0 := @parameter0: com.android.server.accessibility.gestures.TouchExplorer;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear()>();

        return;
    }

    static int access$600(com.android.server.accessibility.gestures.TouchExplorer)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.gestures.TouchExplorer;

        $i0 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDetermineUserIntentTimeout>;

        return $i0;
    }

    static com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed access$700(com.android.server.accessibility.gestures.TouchExplorer)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r1;

        r0 := @parameter0: com.android.server.accessibility.gestures.TouchExplorer;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        return $r1;
    }

    static com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed access$800(com.android.server.accessibility.gestures.TouchExplorer)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r1;

        r0 := @parameter0: com.android.server.accessibility.gestures.TouchExplorer;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        return $r1;
    }

    private void adjustEventLocationForDrag(android.view.MotionEvent)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1;
        float f0, f1, $f2, $f3, f4, f5, f6, f7;
        int i0, $i1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(0);

        f4 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(0);

        f5 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(1);

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(1);

        $i1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int findPointerIndex(int)>($i1);

        if i0 != 0 goto label1;

        f6 = f5 - f0;

        goto label2;

     label1:
        f6 = f0 - f5;

     label2:
        if i0 != 0 goto label3;

        f7 = f1 - f4;

        goto label4;

     label3:
        f7 = f4 - f1;

     label4:
        $f3 = f6 / 2.0F;

        $f2 = f7 / 2.0F;

        virtualinvoke r1.<android.view.MotionEvent: void offsetLocation(float,float)>($f3, $f2);

        return;
    }

    private void clear()
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1;
        com.android.server.accessibility.gestures.TouchState $r2;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        r1 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastReceivedEvent()>();

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear(android.view.MotionEvent,int)>(r1, 33554432);

     label1:
        return;
    }

    private void clear(android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1;
        int i0;
        com.android.server.accessibility.gestures.TouchState $r2, $r3, $r4, $r5, $r14;
        boolean $z0, $z1, $z2;
        com.android.server.accessibility.gestures.EventDispatcher $r6, $r7;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r8;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r9;
        com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed $r10;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r11, $r12;
        com.android.server.accessibility.gestures.GestureManifold $r13;
        com.android.server.accessibility.AccessibilityManagerService $r15;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState: boolean isTouchExploring()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)>(i0);

        goto label4;

     label1:
        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z1 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchState: boolean isDragging()>();

        if $z1 == 0 goto label2;

        r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId> = -1;

        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.EventDispatcher: void sendUpForInjectedDownPointers(android.view.MotionEvent,int)>(r1, i0);

        goto label4;

     label2:
        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z2 = virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchState: boolean isDelegating()>();

        if $z2 == 0 goto label3;

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r6.<com.android.server.accessibility.gestures.EventDispatcher: void sendUpForInjectedDownPointers(android.view.MotionEvent,int)>(r1, i0);

        goto label4;

     label3:
        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchState: boolean isGestureDetecting()>();

     label4:
        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r8.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r9 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r9.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        $r10 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed mExitGestureDetectionModeDelayed>;

        virtualinvoke $r10.<com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed: void cancel()>();

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        virtualinvoke $r11.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        $r12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r12.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        $r13 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        virtualinvoke $r13.<com.android.server.accessibility.gestures.GestureManifold: void clear()>();

        $r14 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r14.<com.android.server.accessibility.gestures.TouchState: void clear()>();

        $r15 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r15.<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionEnd()>();

        return;
    }

    private void endGestureDetection(boolean)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        boolean z0;
        com.android.server.accessibility.AccessibilityManagerService $r1;
        com.android.server.accessibility.gestures.EventDispatcher $r2, $r4;
        com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed $r3;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r1.<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionEnd()>();

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r2.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(524288);

        if z0 == 0 goto label1;

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(2097152);

     label1:
        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed mExitGestureDetectionModeDelayed>;

        virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed: void cancel()>();

        return;
    }

    private void handleActionDown(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r21, r22;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.accessibility.AccessibilityManagerService $r2;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r3, $r8, $r9, $r15, $r18, $r20;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r4;
        com.android.server.accessibility.gestures.TouchState $r5, $r6, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r7, $r10, $r11;
        com.android.server.accessibility.gestures.EventDispatcher $r12, $r17;
        android.graphics.Region $r13, $r14;
        float $f0, $f1, $f2, $f3;
        com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker $r19;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r21 := @parameter0: android.view.MotionEvent;

        r1 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionStart()>();

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z0 = virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchState: boolean isTouchExploring()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)>(i0);

     label1:
        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z1 = virtualinvoke $r6.<com.android.server.accessibility.gestures.TouchState: boolean isClear()>();

        if $z1 == 0 goto label5;

        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $z2 = staticinvoke <com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: boolean access$200(com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed)>($r8);

        if $z2 != 0 goto label2;

        $r19 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        i1 = virtualinvoke $r19.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: int getPrimaryPointerId()>();

        $r20 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $i7 = 1 << i1;

        virtualinvoke $r20.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void post(android.view.MotionEvent,android.view.MotionEvent,int,int)>(r21, r1, $i7, i0);

        goto label3;

     label2:
        $r9 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r9.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void addEvent(android.view.MotionEvent,android.view.MotionEvent)>(r21, r1);

     label3:
        $r10 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        virtualinvoke $r10.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void forceSendAndRemove()>();

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r11.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void forceSendAndRemove()>();

        $r12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r12.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(1048576);

        $r13 = r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mTouchExplorationPassthroughRegion>;

        $f0 = virtualinvoke r21.<android.view.MotionEvent: float getX()>();

        $i2 = (int) $f0;

        $f1 = virtualinvoke r21.<android.view.MotionEvent: float getY()>();

        $i3 = (int) $f1;

        $z3 = virtualinvoke $r13.<android.graphics.Region: boolean contains(int,int)>($i2, $i3);

        if $z3 == 0 goto label4;

        $r16 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r16.<com.android.server.accessibility.gestures.TouchState: void startDelegating()>();

        r22 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r21);

        $r17 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $i6 = virtualinvoke r22.<android.view.MotionEvent: int getAction()>();

        virtualinvoke $r17.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r22, $i6, r1, -1, i0);

        $r18 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r18.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        goto label6;

     label4:
        $r14 = r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mGestureDetectionPassthroughRegion>;

        $f2 = virtualinvoke r21.<android.view.MotionEvent: float getX()>();

        $i4 = (int) $f2;

        $f3 = virtualinvoke r21.<android.view.MotionEvent: float getY()>();

        $i5 = (int) $f3;

        $z4 = virtualinvoke $r14.<android.graphics.Region: boolean contains(int,int)>($i4, $i5);

        if $z4 == 0 goto label6;

        $r15 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r15.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void forceSendAndRemove()>();

        goto label6;

     label5:
        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

     label6:
        return;
    }

    private void handleActionMoveStateTouchExploring(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0, i1, i2, i3, $i4, $i5;
        float f0, f1, f2, f3, $f4, $f5;
        com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker $r3, $r7, $r8;
        com.android.server.accessibility.gestures.EventDispatcher $r4;
        com.android.server.accessibility.gestures.GestureManifold $r5, $r11;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r6, $r9, $r12, $r13;
        double $d0, $d1, $d2, $d3;
        byte $b6;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r10, $r14;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        i1 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: int getPrimaryPointerId()>();

        i2 = virtualinvoke r1.<android.view.MotionEvent: int findPointerIndex(int)>(i1);

        i3 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if i3 == 1 goto label8;

        if i3 == 2 goto label4;

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        $z2 = virtualinvoke $r11.<com.android.server.accessibility.gestures.GestureManifold: boolean isMultiFingerGesturesEnabled()>();

        if $z2 == 0 goto label1;

        return;

     label1:
        $r12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $z3 = staticinvoke <com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: boolean access$200(com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed)>($r12);

        if $z3 == 0 goto label2;

        $r13 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r13.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r14 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r14.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)>(i0);

     label3:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionMoveStateTouchInteracting(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label9;

     label4:
        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        $z0 = virtualinvoke $r5.<com.android.server.accessibility.gestures.GestureManifold: boolean isMultiFingerGesturesEnabled()>();

        if $z0 == 0 goto label5;

        return;

     label5:
        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $z1 = staticinvoke <com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: boolean access$200(com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed)>($r6);

        if $z1 == 0 goto label6;

        $r9 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r9.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r10 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r10.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

     label6:
        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        f0 = virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: float getReceivedPointerDownX(int)>(i1);

        f1 = virtualinvoke r2.<android.view.MotionEvent: float getX(int)>(i2);

        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        f2 = virtualinvoke $r8.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: float getReceivedPointerDownY(int)>(i1);

        f3 = virtualinvoke r2.<android.view.MotionEvent: float getY(int)>(i2);

        $f4 = f0 - f1;

        $d1 = (double) $f4;

        $f5 = f2 - f3;

        $d0 = (double) $f5;

        $d2 = staticinvoke <java.lang.Math: double hypot(double,double)>($d1, $d0);

        $i5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDoubleTapSlop>;

        $d3 = (double) $i5;

        $b6 = $d2 cmpl $d3;

        if $b6 <= 0 goto label7;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionMoveStateTouchInteracting(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label9;

     label7:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)>(i0);

        goto label9;

     label8:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendTouchExplorationGestureStartAndHoverEnterIfNeeded(int)>(i0);

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $i4 = 1 << i1;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r1, 7, r2, $i4, i0);

     label9:
        return;
    }

    private void handleActionMoveStateTouchInteracting(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r16, r17, r18;
        int i0, i1, i2, $i4, $i5;
        com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker $r2, $r11;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r3, $r4, $r6;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.accessibility.gestures.GestureManifold $r5, $r13;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r7;
        com.android.server.accessibility.gestures.TouchState $r8, $r10, $r14;
        com.android.server.accessibility.gestures.EventDispatcher $r9, $r12, $r15;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r16 := @parameter0: android.view.MotionEvent;

        r1 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        i1 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: int getPrimaryPointerId()>();

        virtualinvoke r16.<android.view.MotionEvent: int findPointerIndex(int)>(i1);

        i2 = virtualinvoke r16.<android.view.MotionEvent: int getPointerCount()>();

        if i2 == 1 goto label5;

        if i2 == 2 goto label2;

        $r13 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        $z3 = virtualinvoke $r13.<com.android.server.accessibility.gestures.GestureManifold: boolean isMultiFingerGesturesEnabled()>();

        if $z3 == 0 goto label1;

        return;

     label1:
        $r14 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r14.<com.android.server.accessibility.gestures.TouchState: void startDelegating()>();

        r17 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r16);

        $r15 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r15.<com.android.server.accessibility.gestures.EventDispatcher: void sendDownForAllNotInjectedPointers(android.view.MotionEvent,int)>(r17, i0);

        goto label6;

     label2:
        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        $z1 = virtualinvoke $r5.<com.android.server.accessibility.gestures.GestureManifold: boolean isMultiFingerGesturesEnabled()>();

        if $z1 == 0 goto label3;

        return;

     label3:
        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r6.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        r18 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r16);

        $z2 = specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: boolean isDraggingGesture(android.view.MotionEvent)>(r18);

        if $z2 == 0 goto label4;

        $r10 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r10.<com.android.server.accessibility.gestures.TouchState: void startDragging()>();

        r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId> = i1;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void adjustEventLocationForDrag(android.view.MotionEvent)>(r18);

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        $i4 = virtualinvoke $r11.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: int getLastReceivedDownEdgeFlags()>();

        virtualinvoke r18.<android.view.MotionEvent: void setEdgeFlags(int)>($i4);

        $r12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $i5 = 1 << i1;

        virtualinvoke $r12.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r18, 0, r1, $i5, i0);

        goto label6;

     label4:
        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r8.<com.android.server.accessibility.gestures.TouchState: void startDelegating()>();

        $r9 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r9.<com.android.server.accessibility.gestures.EventDispatcher: void sendDownForAllNotInjectedPointers(android.view.MotionEvent,int)>(r18, i0);

        goto label6;

     label5:
        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $z0 = staticinvoke <com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: boolean access$200(com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed)>($r3);

        if $z0 == 0 goto label6;

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void addEvent(android.view.MotionEvent,android.view.MotionEvent)>(r16, r1);

     label6:
        return;
    }

    private void handleActionPointerDown(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r3, $r4;
        boolean $z0;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r5;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $z0 = staticinvoke <com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: boolean access$200(com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)>(i0);

     label2:
        return;
    }

    private void handleActionUp(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0, i1, $i2, $i3;
        com.android.server.accessibility.AccessibilityManagerService $r3;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r4;
        boolean $z0, $z1;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r5, $r6;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r7;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionEnd()>();

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>($i2);

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $z0 = staticinvoke <com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: boolean access$200(com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed)>($r4);

        if $z0 == 0 goto label1;

        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        $i3 = 1 << i1;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void post(android.view.MotionEvent,android.view.MotionEvent,int,int)>(r1, r2, $i3, i0);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)>(i0);

     label2:
        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        $z1 = virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: boolean isPending()>();

        if $z1 != 0 goto label3;

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r6.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void post()>();

     label3:
        return;
    }

    private void handleMotionEventStateClear(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0, $i1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionDown(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

     label2:
        return;
    }

    private void handleMotionEventStateDelegating(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0, i1, $i3, $i4;
        com.android.server.accessibility.gestures.EventDispatcher $r3, $r5, $r6, $r7;
        com.android.server.accessibility.AccessibilityManagerService $r4;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i1 == 0 goto label3;

        if i1 == 1 goto label1;

        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $i4 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        virtualinvoke $r7.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r1, $i4, r2, -1, i0);

        goto label2;

     label1:
        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        virtualinvoke $r3.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r1, $i3, r2, -1, i0);

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r4.<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionEnd()>();

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r5.<com.android.server.accessibility.gestures.EventDispatcher: void clear()>();

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r6.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(2097152);

     label2:
        return;

     label3:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("TouchExplorer", "Delegating state can only be reached if there is at least one pointer down!");

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear(android.view.MotionEvent,int)>(r1, i0);

        return;
    }

    private void handleMotionEventStateDragging(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r25, r26, r27;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16, i17;
        com.android.server.accessibility.gestures.GestureManifold $r3;
        boolean $z0, $z1;
        com.android.server.accessibility.AccessibilityManagerService $r4;
        com.android.server.accessibility.gestures.EventDispatcher $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r17;
        com.android.server.accessibility.gestures.TouchState $r7, $r11, $r14;
        java.lang.StringBuilder $r18;
        java.lang.String $r20, $r24;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r25 := @parameter0: android.view.MotionEvent;

        r1 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        $z0 = virtualinvoke $r3.<com.android.server.accessibility.gestures.GestureManifold: boolean isMultiFingerGesturesEnabled()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        i15 = 0;

        $i1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        $i2 = virtualinvoke r25.<android.view.MotionEvent: int findPointerIndex(int)>($i1);

        if $i2 != -1 goto label02;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDraggingPointerId doesn\'t match any pointers on current event. mDraggingPointerId: ");

        $i13 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i13);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Event: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("TouchExplorer", $r24);

        r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId> = -1;

        goto label03;

     label02:
        $i3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        i15 = 1 << $i3;

     label03:
        i16 = virtualinvoke r25.<android.view.MotionEvent: int getActionMasked()>();

        if i16 == 0 goto label15;

        if i16 == 1 goto label13;

        if i16 == 2 goto label08;

        if i16 == 5 goto label06;

        if i16 == 6 goto label04;

        goto label14;

     label04:
        $i10 = virtualinvoke r25.<android.view.MotionEvent: int getActionIndex()>();

        $i11 = virtualinvoke r25.<android.view.MotionEvent: int getPointerId(int)>($i10);

        $i12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        if $i11 != $i12 goto label05;

        r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId> = -1;

        $r17 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r17.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r25, 1, r1, i15, i0);

     label05:
        goto label14;

     label06:
        $r14 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r14.<com.android.server.accessibility.gestures.TouchState: void startDelegating()>();

        $i9 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        if $i9 == -1 goto label07;

        $r16 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r16.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r25, 1, r1, i15, i0);

     label07:
        $r15 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r15.<com.android.server.accessibility.gestures.EventDispatcher: void sendDownForAllNotInjectedPointers(android.view.MotionEvent,int)>(r25, i0);

        goto label14;

     label08:
        $i8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        if $i8 != -1 goto label09;

        goto label14;

     label09:
        i17 = virtualinvoke r25.<android.view.MotionEvent: int getPointerCount()>();

        if i17 == 1 goto label12;

        if i17 == 2 goto label10;

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r11.<com.android.server.accessibility.gestures.TouchState: void startDelegating()>();

        r26 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r25);

        $r12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r12.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r26, 1, r1, i15, i0);

        $r13 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r13.<com.android.server.accessibility.gestures.EventDispatcher: void sendDownForAllNotInjectedPointers(android.view.MotionEvent,int)>(r26, i0);

        goto label14;

     label10:
        $z1 = specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: boolean isDraggingGesture(android.view.MotionEvent)>(r25);

        if $z1 == 0 goto label11;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void adjustEventLocationForDrag(android.view.MotionEvent)>(r25);

        $r10 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r10.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r25, 2, r1, i15, i0);

        goto label14;

     label11:
        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchState: void startDelegating()>();

        r27 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r25);

        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r8.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r27, 1, r1, i15, i0);

        $r9 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r9.<com.android.server.accessibility.gestures.EventDispatcher: void sendDownForAllNotInjectedPointers(android.view.MotionEvent,int)>(r27, i0);

        goto label14;

     label12:
        goto label14;

     label13:
        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r4.<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionEnd()>();

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r5.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(2097152);

        $i5 = virtualinvoke r25.<android.view.MotionEvent: int getActionIndex()>();

        $i6 = virtualinvoke r25.<android.view.MotionEvent: int getPointerId(int)>($i5);

        $i7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        if $i6 != $i7 goto label14;

        r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId> = -1;

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r6.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r25, 1, r1, i15, i0);

     label14:
        return;

     label15:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("TouchExplorer", "Dragging state can be reached only if two pointers are already down");

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear(android.view.MotionEvent,int)>(r25, i0);

        return;
    }

    private void handleMotionEventStateTouchExploring(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0, i1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i1 == 1 goto label3;

        if i1 == 2 goto label2;

        if i1 == 5 goto label1;

        goto label4;

     label1:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionPointerDown(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label4;

     label2:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionMoveStateTouchExploring(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionUp(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

     label4:
        return;
    }

    private void handleMotionEventStateTouchInteracting(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0, i1;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r3;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i1 == 0 goto label4;

        if i1 == 1 goto label3;

        if i1 == 2 goto label2;

        if i1 == 5 goto label1;

        goto label5;

     label1:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionPointerDown(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label5;

     label2:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionMoveStateTouchInteracting(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label5;

     label3:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionUp(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        goto label5;

     label4:
        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleActionDown(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

     label5:
        return;
    }

    private boolean isDraggingGesture(android.view.MotionEvent)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7;
        com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(0);

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(0);

        f2 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(1);

        f3 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(1);

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        $f4 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: float getReceivedPointerDownX(int)>(0);

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        $f5 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: float getReceivedPointerDownY(int)>(0);

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        $f6 = virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: float getReceivedPointerDownX(int)>(1);

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        $f7 = virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: float getReceivedPointerDownY(int)>(1);

        $z0 = staticinvoke <com.android.server.accessibility.gestures.GestureUtils: boolean isDraggingGesture(float,float,float,float,float,float,float,float,float)>($f4, $f5, $f6, $f7, f0, f1, f2, f3, 0.52532196F);

        return $z0;
    }

    private void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        int i0, i1, $i2;
        android.view.MotionEvent r1, $r6;
        com.android.server.accessibility.gestures.TouchState $r2, $r4;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r3, $r7;
        boolean $z0;
        com.android.server.accessibility.gestures.EventDispatcher $r5;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        r1 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastInjectedHoverEvent()>();

        if r1 == null goto label2;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i2 == 10 goto label2;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerIdBits()>();

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        $z0 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: boolean isPending()>();

        if $z0 != 0 goto label1;

        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void post()>();

     label1:
        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $r6 = virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastReceivedEvent()>();

        virtualinvoke $r5.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r1, 10, $r6, i1, i0);

     label2:
        return;
    }

    private void sendTouchExplorationGestureStartAndHoverEnterIfNeeded(int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        int i0, i1, $i2;
        android.view.MotionEvent r1, $r5;
        com.android.server.accessibility.gestures.TouchState $r2, $r3;
        com.android.server.accessibility.gestures.EventDispatcher $r4;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        r1 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastInjectedHoverEvent()>();

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i2 != 10 goto label1;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerIdBits()>();

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $r5 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastReceivedEvent()>();

        virtualinvoke $r4.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r1, 9, $r5, i1, i0);

     label1:
        return;
    }

    private void sendsPendingA11yEventsIfNeed()
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r1;
        boolean $z0, $z1, $z2;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r2, $r3, $r4, $r6;
        com.android.server.accessibility.gestures.EventDispatcher $r5, $r7;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        $z0 = staticinvoke <com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: boolean access$100(com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        $z1 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: boolean isPending()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        virtualinvoke $r6.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(1024);

     label2:
        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        $z2 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: boolean isPending()>();

        if $z2 == 0 goto label3;

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r5.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(2097152);

     label3:
        return;
    }

    private boolean shouldPerformGestureDetection(android.view.MotionEvent)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1;
        int i0, i1, $i2;
        com.android.server.accessibility.gestures.TouchState $r2;
        boolean $z0, $z1, $z2;
        float $f0, $f1;
        android.graphics.Region $r3, $r4;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState: boolean isDelegating()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i2 != 0 goto label3;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        i0 = (int) $f0;

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        i1 = (int) $f1;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mTouchExplorationPassthroughRegion>;

        $z1 = virtualinvoke $r3.<android.graphics.Region: boolean contains(int,int)>(i0, i1);

        if $z1 != 0 goto label2;

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mGestureDetectionPassthroughRegion>;

        $z2 = virtualinvoke $r4.<android.graphics.Region: boolean contains(int,int)>(i0, i1);

        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public void clearEvents(int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        int i0;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        i0 := @parameter0: int;

        if i0 != 4098 goto label1;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear()>();

     label1:
        specialinvoke r0.<com.android.server.accessibility.BaseEventStreamTransformation: void clearEvents(int)>(i0);

        return;
    }

    public com.android.server.accessibility.gestures.TouchState getState()
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        com.android.server.accessibility.gestures.TouchState $r1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        return $r1;
    }

    public void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0;
        com.android.server.accessibility.gestures.TouchState $r2;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i0 != 256 goto label1;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendsPendingA11yEventsIfNeed()>();

     label1:
        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState: void onReceivedAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        specialinvoke r0.<com.android.server.accessibility.BaseEventStreamTransformation: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return;
    }

    public void onDestroy()
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear()>();

        return;
    }

    public boolean onDoubleTap(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0;
        com.android.server.accessibility.AccessibilityManagerService $r3, $r10;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r4;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r5;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r6, $r8, $r12;
        boolean $z0, $z1;
        com.android.server.accessibility.gestures.EventDispatcher $r7, $r11;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r9;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionEnd()>();

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        $z0 = virtualinvoke $r6.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: boolean isPending()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchExplorationEndDelayed>;

        virtualinvoke $r12.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void forceSendAndRemove()>();

     label1:
        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r7.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(2097152);

        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r8.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        $r10 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        $r9 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLICK>;

        $z1 = virtualinvoke $r10.<com.android.server.accessibility.AccessibilityManagerService: boolean performActionOnAccessibilityFocusedItem(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r9);

        if $z1 != 0 goto label2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("TouchExplorer", "ACTION_CLICK failed. Dispatching motion events to simulate click.");

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r11.<com.android.server.accessibility.gestures.EventDispatcher: void clickWithTouchEvents(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r2, i0);

        return 1;

     label2:
        return 1;
    }

    public void onDoubleTapAndHold(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2;
        int i0;
        com.android.server.accessibility.gestures.EventDispatcher $r3;
        boolean $z0;
        com.android.server.accessibility.gestures.TouchState $r4;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $z0 = virtualinvoke $r3.<com.android.server.accessibility.gestures.EventDispatcher: boolean longPressWithTouchEvents(android.view.MotionEvent,int)>(r1, i0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)>(i0);

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchState: void startDelegating()>();

     label1:
        return;
    }

    public boolean onGestureCancelled(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r2, $r8, $r13;
        int i0, i1, $i2, $i3, $i4;
        boolean z0, $z1, z2;
        com.android.server.accessibility.gestures.TouchState $r3, $r4, $r6, $r11;
        com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker $r5;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r7, $r9;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r10;
        com.android.server.accessibility.gestures.EventDispatcher $r12;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        z0 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchState: boolean isGestureDetecting()>();

        z2 = 0;

        if z0 == 0 goto label2;

        $i4 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i4 != 1 goto label1;

        z2 = 1;

     label1:
        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void endGestureDetection(boolean)>(z2);

        return 1;

     label2:
        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z1 = virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchState: boolean isTouchExploring()>();

        if $z1 == 0 goto label3;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i2 != 2 goto label3;

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker mReceivedPointerTracker>;

        i1 = virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchState$ReceivedPointerTracker: int getPrimaryPointerId()>();

        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $r8 = virtualinvoke $r6.<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastReceivedEvent()>();

        virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void addEvent(android.view.MotionEvent,android.view.MotionEvent)>(r1, $r8);

        $r9 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r9.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void forceSendAndRemove()>();

        $r10 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r10.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        $r12 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $r13 = virtualinvoke $r11.<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastReceivedEvent()>();

        $i3 = 1 << i1;

        virtualinvoke $r12.<com.android.server.accessibility.gestures.EventDispatcher: void sendMotionEvent(android.view.MotionEvent,int,android.view.MotionEvent,int,int)>(r1, 7, $r13, $i3, i0);

        return 1;

     label3:
        return 0;
    }

    public boolean onGestureCompleted(android.accessibilityservice.AccessibilityGestureEvent)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.accessibilityservice.AccessibilityGestureEvent r1;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r2;
        com.android.server.accessibility.AccessibilityManagerService $r3;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.accessibilityservice.AccessibilityGestureEvent;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void endGestureDetection(boolean)>(1);

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.AccessibilityManagerService mAms>;

        virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService: boolean onGesture(android.accessibilityservice.AccessibilityGestureEvent)>(r1);

        return 1;
    }

    public boolean onGestureStarted()
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        com.android.server.accessibility.gestures.TouchState $r1;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed $r2;
        com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed $r3;
        com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed $r4;
        com.android.server.accessibility.gestures.EventDispatcher $r5;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r1.<com.android.server.accessibility.gestures.TouchState: void startGestureDetecting()>();

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed mSendHoverEnterAndMoveDelayed>;

        virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverEnterAndMoveDelayed: void cancel()>();

        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed mSendHoverExitDelayed>;

        virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchExplorer$SendHoverExitDelayed: void cancel()>();

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed mExitGestureDetectionModeDelayed>;

        virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchExplorer$ExitGestureDetectionModeDelayed: void post()>();

        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r5.<com.android.server.accessibility.gestures.EventDispatcher: void sendAccessibilityEvent(int)>(262144);

        return 0;
    }

    public void onMotionEvent(android.view.MotionEvent, android.view.MotionEvent, int)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.view.MotionEvent r1, r16;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.server.accessibility.gestures.TouchState $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r11;
        java.lang.StringBuilder $r9;
        java.lang.String $r13;
        com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed $r14;
        com.android.server.accessibility.gestures.GestureManifold $r15;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.view.MotionEvent;

        r16 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isFromSource(int)>(4098);

        if $z0 != 0 goto label01;

        specialinvoke r0.<com.android.server.accessibility.BaseEventStreamTransformation: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r16, i0);

        return;

     label01:
        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r2.<com.android.server.accessibility.gestures.TouchState: void onReceivedMotionEvent(android.view.MotionEvent)>(r16);

        $z1 = specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: boolean shouldPerformGestureDetection(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label02;

        $r15 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        $z8 = virtualinvoke $r15.<com.android.server.accessibility.gestures.GestureManifold: boolean onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r16, i0);

        if $z8 == 0 goto label02;

        return;

     label02:
        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i1 != 3 goto label03;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear(android.view.MotionEvent,int)>(r1, i0);

        return;

     label03:
        $r3 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z2 = virtualinvoke $r3.<com.android.server.accessibility.gestures.TouchState: boolean isClear()>();

        if $z2 == 0 goto label04;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleMotionEventStateClear(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r16, i0);

        goto label10;

     label04:
        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z3 = virtualinvoke $r4.<com.android.server.accessibility.gestures.TouchState: boolean isTouchInteracting()>();

        if $z3 == 0 goto label05;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleMotionEventStateTouchInteracting(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r16, i0);

        goto label10;

     label05:
        $r5 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z4 = virtualinvoke $r5.<com.android.server.accessibility.gestures.TouchState: boolean isTouchExploring()>();

        if $z4 == 0 goto label06;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleMotionEventStateTouchExploring(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r16, i0);

        goto label10;

     label06:
        $r6 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z5 = virtualinvoke $r6.<com.android.server.accessibility.gestures.TouchState: boolean isDragging()>();

        if $z5 == 0 goto label07;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleMotionEventStateDragging(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r16, i0);

        goto label10;

     label07:
        $r7 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z6 = virtualinvoke $r7.<com.android.server.accessibility.gestures.TouchState: boolean isDelegating()>();

        if $z6 == 0 goto label08;

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void handleMotionEventStateDelegating(android.view.MotionEvent,android.view.MotionEvent,int)>(r1, r16, i0);

        goto label10;

     label08:
        $r8 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        $z7 = virtualinvoke $r8.<com.android.server.accessibility.gestures.TouchState: boolean isGestureDetecting()>();

        if $z7 == 0 goto label09;

        $r14 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed mSendTouchInteractionEndDelayed>;

        virtualinvoke $r14.<com.android.server.accessibility.gestures.TouchExplorer$SendAccessibilityEventDelayed: void cancel()>();

        goto label10;

     label09:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal state: ");

        $r11 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("TouchExplorer", $r13);

        specialinvoke r0.<com.android.server.accessibility.gestures.TouchExplorer: void clear(android.view.MotionEvent,int)>(r1, i0);

     label10:
        return;
    }

    public void setGestureDetectionPassthroughRegion(android.graphics.Region)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.graphics.Region r1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.graphics.Region;

        r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mGestureDetectionPassthroughRegion> = r1;

        return;
    }

    public void setMultiFingerGesturesEnabled(boolean)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        boolean z0;
        com.android.server.accessibility.gestures.GestureManifold $r1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        virtualinvoke $r1.<com.android.server.accessibility.gestures.GestureManifold: void setMultiFingerGesturesEnabled(boolean)>(z0);

        return;
    }

    public void setNext(com.android.server.accessibility.EventStreamTransformation)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        com.android.server.accessibility.EventStreamTransformation r1;
        com.android.server.accessibility.gestures.EventDispatcher $r2;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: com.android.server.accessibility.EventStreamTransformation;

        $r2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.EventDispatcher mDispatcher>;

        virtualinvoke $r2.<com.android.server.accessibility.gestures.EventDispatcher: void setReceiver(com.android.server.accessibility.EventStreamTransformation)>(r1);

        specialinvoke r0.<com.android.server.accessibility.BaseEventStreamTransformation: void setNext(com.android.server.accessibility.EventStreamTransformation)>(r1);

        return;
    }

    public void setServiceHandlesDoubleTap(boolean)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        boolean z0;
        com.android.server.accessibility.gestures.GestureManifold $r1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.GestureManifold mGestureDetector>;

        virtualinvoke $r1.<com.android.server.accessibility.gestures.GestureManifold: void setServiceHandlesDoubleTap(boolean)>(z0);

        return;
    }

    public void setTouchExplorationPassthroughRegion(android.graphics.Region)
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        android.graphics.Region r1;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        r1 := @parameter0: android.graphics.Region;

        r0.<com.android.server.accessibility.gestures.TouchExplorer: android.graphics.Region mTouchExplorationPassthroughRegion> = r1;

        return;
    }

    public java.lang.String toString()
    {
        com.android.server.accessibility.gestures.TouchExplorer r0;
        java.lang.StringBuilder $r2;
        com.android.server.accessibility.gestures.TouchState $r4;
        int $i0, $i1, $i2;
        java.lang.String $r13;

        r0 := @this: com.android.server.accessibility.gestures.TouchExplorer;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TouchExplorer { mTouchState: ");

        $r4 = r0.<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState mState>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDetermineUserIntentTimeout: ");

        $i0 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDetermineUserIntentTimeout>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDoubleTapSlop: ");

        $i1 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDoubleTapSlop>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDraggingPointerId: ");

        $i2 = r0.<com.android.server.accessibility.gestures.TouchExplorer: int mDraggingPointerId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.gestures.TouchExplorer: float MAX_DRAGGING_ANGLE_COS> = 0.52532196F;

        <com.android.server.accessibility.gestures.TouchExplorer: java.lang.String LOG_TAG> = "TouchExplorer";

        <com.android.server.accessibility.gestures.TouchExplorer: int EXIT_GESTURE_DETECTION_TIMEOUT> = 2000;

        <com.android.server.accessibility.gestures.TouchExplorer: boolean DEBUG> = 0;

        return;
    }
}
