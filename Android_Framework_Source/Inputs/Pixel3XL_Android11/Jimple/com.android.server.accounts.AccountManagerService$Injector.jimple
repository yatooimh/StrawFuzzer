class com.android.server.accounts.AccountManagerService$Injector extends java.lang.Object
{
    private final android.content.Context mContext;

    public void <init>(android.content.Context)
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$Injector: android.content.Context mContext> = r1;

        return;
    }

    void addLocalService(android.accounts.AccountManagerInternal)
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        android.accounts.AccountManagerInternal r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        r1 := @parameter0: android.accounts.AccountManagerInternal;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/accounts/AccountManagerInternal;", r1);

        return;
    }

    com.android.server.accounts.IAccountAuthenticatorCache getAccountAuthenticatorCache()
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        com.android.server.accounts.AccountAuthenticatorCache $r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        $r1 = new com.android.server.accounts.AccountAuthenticatorCache;

        $r2 = r0.<com.android.server.accounts.AccountManagerService$Injector: android.content.Context mContext>;

        specialinvoke $r1.<com.android.server.accounts.AccountAuthenticatorCache: void <init>(android.content.Context)>($r2);

        return $r1;
    }

    java.lang.String getCeDatabaseName(int)
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        int i0;
        java.io.File $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataSystemCeDirectory(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "accounts_ce.db");

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        return $r3;
    }

    android.content.Context getContext()
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$Injector: android.content.Context mContext>;

        return $r1;
    }

    java.lang.String getDeDatabaseName(int)
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        int i0;
        java.io.File $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataSystemDeDirectory(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "accounts_de.db");

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        return $r3;
    }

    android.os.Looper getMessageHandlerLooper()
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        com.android.server.ServiceThread $r2;
        android.os.Looper $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        $r2 = new com.android.server.ServiceThread;

        specialinvoke $r2.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("AccountManagerService", -2, 1);

        virtualinvoke $r2.<com.android.server.ServiceThread: void start()>();

        $r3 = virtualinvoke $r2.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        return $r3;
    }

    android.app.INotificationManager getNotificationManager()
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        android.app.INotificationManager $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        $r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        return $r1;
    }

    java.lang.String getPreNDatabaseName(int)
    {
        com.android.server.accounts.AccountManagerService$Injector r0;
        int i0;
        java.io.File $r2, $r3, $r4, r15, r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r5, $r10;
        java.lang.IllegalStateException $r8, $r13;
        java.lang.String $r9, $r14, $r20;

        r0 := @this: com.android.server.accounts.AccountManagerService$Injector;

        i0 := @parameter0: int;

        r15 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "accounts.db");

        if i0 != 0 goto label4;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r15, "accounts.db");

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label4;

        r17 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        $z2 = virtualinvoke r17.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label2;

        $z4 = virtualinvoke r17.<java.io.File: boolean mkdirs()>();

        if $z4 == 0 goto label1;

        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User dir cannot be created: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label2:
        $z3 = virtualinvoke $r4.<java.io.File: boolean renameTo(java.io.File)>($r2);

        if $z3 == 0 goto label3;

        goto label4;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User dir cannot be migrated: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        $r20 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        return $r20;
    }
}
