class com.android.server.accounts.AccountManagerService$UserAccounts extends java.lang.Object
{
    final java.util.HashMap accountCache;
    private final com.android.server.accounts.TokenCache accountTokenCaches;
    final com.android.server.accounts.AccountsDb accountsDb;
    private final java.util.Map authTokenCache;
    final java.lang.Object cacheLock;
    private final java.util.HashMap credentialsPermissionNotificationIds;
    final java.lang.Object dbLock;
    private final java.util.Map mReceiversForType;
    private final java.util.HashMap previousNameCache;
    private final java.util.HashMap signinRequiredNotificationIds;
    private final java.util.Map userDataCache;
    private final int userId;
    private final java.util.Map visibilityCache;

    void <init>(android.content.Context, int, java.io.File, java.io.File)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        int i0;
        java.io.File r1, r2;
        java.lang.Object r3, r4, $r7, $r8;
        java.util.HashMap $r5, $r6, $r10, $r11, $r13, $r14, $r15;
        java.util.LinkedHashMap $r9;
        com.android.server.accounts.TokenCache $r12;
        com.android.server.accounts.AccountsDb $r16;
        java.lang.Throwable $r17, $r18;
        android.content.Context r19;

        r0 := @this: com.android.server.accounts.AccountManagerService$UserAccounts;

        r19 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: java.io.File;

        r2 := @parameter3: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap credentialsPermissionNotificationIds> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap signinRequiredNotificationIds> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock> = $r8;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map userDataCache> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map authTokenCache> = $r11;

        $r12 = new com.android.server.accounts.TokenCache;

        specialinvoke $r12.<com.android.server.accounts.TokenCache: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache accountTokenCaches> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map visibilityCache> = $r13;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map mReceiversForType> = $r14;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap previousNameCache> = $r15;

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: int userId> = i0;

        r3 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r3;

     label01:
        r4 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r4;

     label02:
        $r16 = staticinvoke <com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb create(android.content.Context,int,java.io.File,java.io.File)>(r19, i0, r1, r2);

        r0.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb> = $r16;

        exitmonitor r4;

     label03:
        exitmonitor r3;

     label04:
        return;

     label05:
        $r18 := @caughtexception;

     label06:
        exitmonitor r4;

     label07:
        throw $r18;

     label08:
        $r17 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    static java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map mReceiversForType>;

        return $r1;
    }

    static java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map userDataCache>;

        return $r1;
    }

    static java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map authTokenCache>;

        return $r1;
    }

    static com.android.server.accounts.TokenCache access$1300(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        com.android.server.accounts.TokenCache $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache accountTokenCaches>;

        return $r1;
    }

    static java.util.HashMap access$1400(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap previousNameCache>;

        return $r1;
    }

    static java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap credentialsPermissionNotificationIds>;

        return $r1;
    }

    static java.util.HashMap access$2200(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap signinRequiredNotificationIds>;

        return $r1;
    }

    static int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        int $i0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $i0 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: int userId>;

        return $i0;
    }

    static java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService$UserAccounts r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r1 = r0.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map visibilityCache>;

        return $r1;
    }
}
