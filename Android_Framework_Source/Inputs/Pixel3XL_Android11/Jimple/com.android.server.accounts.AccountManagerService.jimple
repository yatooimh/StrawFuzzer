public class com.android.server.accounts.AccountManagerService extends android.accounts.IAccountManager$Stub implements android.content.pm.RegisteredServicesCacheListener
{
    private static final android.content.Intent ACCOUNTS_CHANGED_INTENT;
    private static final android.accounts.Account[] EMPTY_ACCOUNT_ARRAY;
    private static final int MESSAGE_COPY_SHARED_ACCOUNT;
    private static final int MESSAGE_TIMED_OUT;
    private static final java.lang.String PRE_N_DATABASE_NAME;
    private static final int SIGNATURE_CHECK_MATCH;
    private static final int SIGNATURE_CHECK_MISMATCH;
    private static final int SIGNATURE_CHECK_UID_MATCH;
    private static final java.lang.String TAG;
    private static java.util.concurrent.atomic.AtomicReference sThis;
    private final android.app.AppOpsManager mAppOpsManager;
    private java.util.concurrent.CopyOnWriteArrayList mAppPermissionChangeListeners;
    private final com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache;
    final android.content.Context mContext;
    private final java.text.SimpleDateFormat mDateFormat;
    final com.android.server.accounts.AccountManagerService$MessageHandler mHandler;
    private final com.android.server.accounts.AccountManagerService$Injector mInjector;
    private final android.util.SparseBooleanArray mLocalUnlockedUsers;
    private final android.content.pm.PackageManager mPackageManager;
    private final java.util.LinkedHashMap mSessions;
    private android.os.UserManager mUserManager;
    private final android.util.SparseArray mUsers;

    static void <clinit>()
    {
        android.content.Intent $r1;
        java.util.concurrent.atomic.AtomicReference $r3;
        android.accounts.Account[] $r4;

        <com.android.server.accounts.AccountManagerService: java.lang.String TAG> = "AccountManagerService";

        <com.android.server.accounts.AccountManagerService: int SIGNATURE_CHECK_UID_MATCH> = 2;

        <com.android.server.accounts.AccountManagerService: int SIGNATURE_CHECK_MISMATCH> = 0;

        <com.android.server.accounts.AccountManagerService: int SIGNATURE_CHECK_MATCH> = 1;

        <com.android.server.accounts.AccountManagerService: java.lang.String PRE_N_DATABASE_NAME> = "accounts.db";

        <com.android.server.accounts.AccountManagerService: int MESSAGE_TIMED_OUT> = 3;

        <com.android.server.accounts.AccountManagerService: int MESSAGE_COPY_SHARED_ACCOUNT> = 4;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.accounts.LOGIN_ACCOUNTS_CHANGED");

        <com.android.server.accounts.AccountManagerService: android.content.Intent ACCOUNTS_CHANGED_INTENT> = $r1;

        virtualinvoke $r1.<android.content.Intent: android.content.Intent setFlags(int)>(83886080);

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicReference sThis> = $r3;

        $r4 = newarray (android.accounts.Account)[0];

        <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY> = $r4;

        return;
    }

    public void <init>(com.android.server.accounts.AccountManagerService$Injector)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.util.LinkedHashMap $r1;
        android.util.SparseArray $r2;
        android.util.SparseBooleanArray $r3;
        java.text.SimpleDateFormat $r4;
        java.util.concurrent.CopyOnWriteArrayList $r5;
        android.content.pm.PackageManager $r6, $r32;
        android.content.Context $r7, $r16, $r21, $r26, r34;
        java.lang.Object $r8;
        android.app.AppOpsManager $r9, $r30;
        com.android.server.accounts.AccountManagerService$MessageHandler $r10, $r25;
        android.os.Looper $r11, $r27;
        com.android.server.accounts.AccountManagerService$Injector $r12, r33;
        java.util.concurrent.atomic.AtomicReference $r13;
        android.content.IntentFilter $r14, $r19;
        com.android.server.accounts.AccountManagerService$1 $r15;
        com.android.server.accounts.AccountManagerService$AccountManagerInternalImpl $r18;
        com.android.server.accounts.AccountManagerService$2 $r20;
        android.os.UserHandle $r22, $r28;
        com.android.server.accounts.AccountManagerService$3 $r24;
        com.android.server.accounts.AccountManagerService$4 $r29;
        com.android.server.accounts._$$Lambda$AccountManagerService$c6GExIY3Vh2fORdBziuAPJbExac $r31;
        com.android.server.accounts.IAccountAuthenticatorCache r35;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r33 := @parameter0: com.android.server.accounts.AccountManagerService$Injector;

        specialinvoke r0.<android.accounts.IAccountManager$Stub: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers> = $r2;

        $r3 = new android.util.SparseBooleanArray;

        specialinvoke $r3.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray mLocalUnlockedUsers> = $r3;

        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        r0.<com.android.server.accounts.AccountManagerService: java.text.SimpleDateFormat mDateFormat> = $r4;

        $r5 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService: java.util.concurrent.CopyOnWriteArrayList mAppPermissionChangeListeners> = $r5;

        r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$Injector mInjector> = r33;

        r34 = virtualinvoke r33.<com.android.server.accounts.AccountManagerService$Injector: android.content.Context getContext()>();

        r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext> = r34;

        $r6 = virtualinvoke r34.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager> = $r6;

        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r9 = (android.app.AppOpsManager) $r8;

        r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager> = $r9;

        $r10 = new com.android.server.accounts.AccountManagerService$MessageHandler;

        $r11 = virtualinvoke r33.<com.android.server.accounts.AccountManagerService$Injector: android.os.Looper getMessageHandlerLooper()>();

        specialinvoke $r10.<com.android.server.accounts.AccountManagerService$MessageHandler: void <init>(com.android.server.accounts.AccountManagerService,android.os.Looper)>(r0, $r11);

        r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler> = $r10;

        $r12 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$Injector mInjector>;

        r35 = virtualinvoke $r12.<com.android.server.accounts.AccountManagerService$Injector: com.android.server.accounts.IAccountAuthenticatorCache getAccountAuthenticatorCache()>();

        r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache> = r35;

        interfaceinvoke r35.<com.android.server.accounts.IAccountAuthenticatorCache: void setListener(android.content.pm.RegisteredServicesCacheListener,android.os.Handler)>(r0, null);

        $r13 = <com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicReference sThis>;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r0);

        $r14 = new android.content.IntentFilter;

        specialinvoke $r14.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r14.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r14.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r16 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r15 = new com.android.server.accounts.AccountManagerService$1;

        specialinvoke $r15.<com.android.server.accounts.AccountManagerService$1: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        virtualinvoke $r16.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r15, $r14);

        $r18 = new com.android.server.accounts.AccountManagerService$AccountManagerInternalImpl;

        specialinvoke $r18.<com.android.server.accounts.AccountManagerService$AccountManagerInternalImpl: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$1)>(r0, null);

        virtualinvoke r33.<com.android.server.accounts.AccountManagerService$Injector: void addLocalService(android.accounts.AccountManagerInternal)>($r18);

        $r19 = new android.content.IntentFilter;

        specialinvoke $r19.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r19.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r21 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r20 = new com.android.server.accounts.AccountManagerService$2;

        specialinvoke $r20.<com.android.server.accounts.AccountManagerService$2: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        $r22 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r21.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r20, $r22, $r19, null, null);

        $r24 = new com.android.server.accounts.AccountManagerService$3;

        specialinvoke $r24.<com.android.server.accounts.AccountManagerService$3: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        $r26 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r25 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler>;

        $r27 = virtualinvoke $r25.<com.android.server.accounts.AccountManagerService$MessageHandler: android.os.Looper getLooper()>();

        $r28 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r24.<com.android.server.accounts.AccountManagerService$3: void register(android.content.Context,android.os.Looper,android.os.UserHandle,boolean)>($r26, $r27, $r28, 1);

        $r30 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        $r29 = new com.android.server.accounts.AccountManagerService$4;

        specialinvoke $r29.<com.android.server.accounts.AccountManagerService$4: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        virtualinvoke $r30.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(62, null, $r29);

        $r32 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $r31 = new com.android.server.accounts._$$Lambda$AccountManagerService$c6GExIY3Vh2fORdBziuAPJbExac;

        specialinvoke $r31.<com.android.server.accounts._$$Lambda$AccountManagerService$c6GExIY3Vh2fORdBziuAPJbExac: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        virtualinvoke $r32.<android.content.pm.PackageManager: void addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)>($r31);

        return;
    }

    static void access$000(com.android.server.accounts.AccountManagerService, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void purgeUserData(int)>(i0);

        return;
    }

    static void access$100(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void purgeOldGrantsAll()>();

        return;
    }

    static void access$1500(com.android.server.accounts.AccountManagerService, android.accounts.IAccountManagerResponse, android.os.Bundle, android.accounts.Account, com.android.server.accounts.AccountManagerService$UserAccounts, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.os.Bundle r2;
        android.accounts.Account r3;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        int i0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.IAccountManagerResponse;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: android.accounts.Account;

        r4 := @parameter4: com.android.server.accounts.AccountManagerService$UserAccounts;

        i0 := @parameter5: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void completeCloningAccount(android.accounts.IAccountManagerResponse,android.os.Bundle,android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts,int)>(r1, r2, r3, r4, i0);

        return;
    }

    static boolean access$1700(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        i0 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,int)>(r1, r2, i0);

        return $z0;
    }

    static android.content.Intent access$1800(com.android.server.accounts.AccountManagerService, android.accounts.Account, java.lang.String, int, android.accounts.AccountAuthenticatorResponse, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r4;
        int i0;
        android.accounts.AccountAuthenticatorResponse r3;
        boolean z0;
        android.content.Intent $r5;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: android.accounts.AccountAuthenticatorResponse;

        r4 := @parameter5: java.lang.String;

        z0 := @parameter6: boolean;

        $r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Intent newGrantCredentialsPermissionIntent(android.accounts.Account,java.lang.String,int,android.accounts.AccountAuthenticatorResponse,java.lang.String,boolean)>(r1, r2, i0, r3, r4, z0);

        return $r5;
    }

    static boolean access$1900(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r4;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean saveAuthTokenToDatabase(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return $z0;
    }

    static void access$200(com.android.server.accounts.AccountManagerService, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeVisibilityValuesForPackage(java.lang.String)>(r1);

        return;
    }

    static void access$2000(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, byte[], java.lang.String, java.lang.String, long)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r5, r6;
        byte[] r4;
        long l0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: byte[];

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        l0 := @parameter7: long;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void saveCachedToken(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,byte[],java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, r6, l0);

        return;
    }

    static void access$2100(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.CharSequence, android.content.Intent, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.CharSequence r3;
        android.content.Intent r4;
        java.lang.String r5;
        int i0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        r3 := @parameter3: java.lang.CharSequence;

        r4 := @parameter4: android.content.Intent;

        r5 := @parameter5: java.lang.String;

        i0 := @parameter6: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void doNotification(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.CharSequence,android.content.Intent,java.lang.String,int)>(r1, r2, r3, r4, r5, i0);

        return;
    }

    static void access$2300(com.android.server.accounts.AccountManagerService, android.accounts.IAccountManagerResponse, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        int i0;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.IAccountManagerResponse;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendErrorResponse(android.accounts.IAccountManagerResponse,int,java.lang.String)>(r1, i0, r2);

        return;
    }

    static void access$2400(com.android.server.accounts.AccountManagerService, android.accounts.IAccountManagerResponse, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.os.Bundle r2;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.IAccountManagerResponse;

        r2 := @parameter2: android.os.Bundle;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendResponse(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r1, r2);

        return;
    }

    static com.android.server.accounts.AccountManagerService$NotificationId access$2500(com.android.server.accounts.AccountManagerService, android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0;
        com.android.server.accounts.AccountManagerService$NotificationId $r3;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }

    static void access$2600(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$NotificationId, java.lang.String, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$NotificationId r1;
        java.lang.String r2;
        android.os.UserHandle r3;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$NotificationId;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.UserHandle;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,java.lang.String,android.os.UserHandle)>(r1, r2, r3);

        return;
    }

    static void access$2700(com.android.server.accounts.AccountManagerService, android.accounts.IAccountManagerResponse, android.accounts.Account[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account[] r2;
        java.lang.String r3;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.IAccountManagerResponse;

        r2 := @parameter2: android.accounts.Account[];

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void handleGetAccountsResult(android.accounts.IAccountManagerResponse,android.accounts.Account[],java.lang.String)>(r1, r2, r3);

        return;
    }

    static java.util.LinkedHashMap access$2800(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.util.LinkedHashMap $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        return $r1;
    }

    static boolean access$2900(com.android.server.accounts.AccountManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountPresentForCaller(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    static boolean access$3000(com.android.server.accounts.AccountManagerService, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean updateLastAuthenticatedTime(android.accounts.Account)>(r1);

        return $z0;
    }

    static com.android.server.accounts.AccountManagerService$NotificationId access$3100(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        com.android.server.accounts.AccountManagerService$NotificationId $r3;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        return $r3;
    }

    static void access$3200(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$NotificationId, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$NotificationId r1;
        android.os.UserHandle r2;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$NotificationId;

        r2 := @parameter2: android.os.UserHandle;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>(r1, r2);

        return;
    }

    static com.android.server.accounts.IAccountAuthenticatorCache access$3300(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.IAccountAuthenticatorCache $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        return $r1;
    }

    static boolean access$3400(com.android.server.accounts.AccountManagerService, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>(i0);

        return $z0;
    }

    static java.text.SimpleDateFormat access$3500(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.text.SimpleDateFormat $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: java.text.SimpleDateFormat mDateFormat>;

        return $r1;
    }

    static java.lang.Integer access$3700(com.android.server.accounts.AccountManagerService, android.accounts.Account, java.lang.String, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        java.lang.Integer $r4;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r1, r2, r3);

        return $r4;
    }

    static android.content.Intent access$3800(com.android.server.accounts.AccountManagerService, android.accounts.Account, java.lang.String, int, android.os.RemoteCallback)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0;
        android.os.RemoteCallback r3;
        android.content.Intent $r4;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: android.os.RemoteCallback;

        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Intent newRequestAccountAccessIntent(android.accounts.Account,java.lang.String,int,android.os.RemoteCallback)>(r1, r2, i0, r3);

        return $r4;
    }

    static android.util.SparseArray access$3900(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        return $r1;
    }

    static void access$400(com.android.server.accounts.AccountManagerService, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(int,boolean)>(i0, z0);

        return;
    }

    static java.util.concurrent.CopyOnWriteArrayList access$4000(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: java.util.concurrent.CopyOnWriteArrayList mAppPermissionChangeListeners>;

        return $r1;
    }

    static boolean access$4100(com.android.server.accounts.AccountManagerService, android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

        return $z0;
    }

    static android.content.pm.PackageManager access$500(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.pm.PackageManager $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        return $r1;
    }

    static android.app.AppOpsManager access$600(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.app.AppOpsManager $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        return $r1;
    }

    static void access$700(com.android.server.accounts.AccountManagerService, java.lang.String, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(java.lang.String,int,boolean)>(r1, i0, z0);

        return;
    }

    private boolean accountExistsCache(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1, $r8;
        java.lang.Object r2, $r7;
        int i0, i1;
        java.lang.String $r3, $r5, $r9, $r10;
        java.util.HashMap $r4, $r6;
        boolean $z0, $z1;
        java.lang.Throwable $r11;
        com.android.server.accounts.AccountManagerService$UserAccounts r12;
        android.accounts.Account[] r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r2 = r12.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r2;

     label01:
        $r4 = r12.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r3 = r1.<android.accounts.Account: java.lang.String type>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label07;

        $r6 = r12.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r5 = r1.<android.accounts.Account: java.lang.String type>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r13 = (android.accounts.Account[]) $r7;

        i0 = lengthof r13;

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

     label04:
        $r8 = r13[i1];

        $r10 = $r8.<android.accounts.Account: java.lang.String name>;

        $r9 = r1.<android.accounts.Account: java.lang.String name>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label06;

        exitmonitor r2;

     label05:
        return 1;

     label06:
        i1 = i1 + 1;

        goto label03;

     label07:
        exitmonitor r2;

     label08:
        return 0;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private boolean accountTypeManagesContacts(java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        long l1;
        java.util.Iterator r1;
        com.android.server.accounts.IAccountAuthenticatorCache $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r4, $r7;
        android.accounts.AuthenticatorDescription $r5, $r8;
        java.lang.String $r6, $r10, r12;
        java.lang.String[] $r9;
        java.lang.Throwable $r11;
        java.util.Collection r13;
        android.content.pm.RegisteredServicesCache$ServiceInfo r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r12 != null goto label1;

        return 0;

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        r13 = interfaceinvoke $r2.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>(i0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        r1 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r14 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r3;

        $r4 = r14.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r5 = (android.accounts.AuthenticatorDescription) $r4;

        $r6 = $r5.<android.accounts.AuthenticatorDescription: java.lang.String type>;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label5;

        $r7 = r14.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r8 = (android.accounts.AuthenticatorDescription) $r7;

        $r10 = $r8.<android.accounts.AuthenticatorDescription: java.lang.String packageName>;

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = "android.permission.WRITE_CONTACTS";

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isPermittedForPackage(java.lang.String,int,java.lang.String[])>($r10, i0, $r9);

        return $z2;

     label5:
        goto label4;

     label6:
        return 0;

     label7:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label7;
    }

    private boolean addAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, android.os.Bundle, int, java.util.Map)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i2, $i8, $i9, $i10, $i11, $i18;
        java.util.Map r1;
        java.lang.Object r2, r3, $r16, $r17, $r19, $r22;
        long l1, $l3, $l6, $l12;
        java.lang.String r4, $r10, $r18, $r25, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r51, $r57, r67, r75;
        boolean $z0, $z1, $z2, $z4;
        com.android.server.accounts.AccountsDb $r6, $r7, $r8, $r9, $r12, $r23, $r30, $r36, $r42, $r48, $r61, r71;
        byte $b4, $b5, $b7, $b13;
        android.os.UserManager $r13;
        android.content.pm.UserInfo $r14;
        java.util.Set $r15, $r21;
        java.lang.Integer $r20;
        java.lang.StringBuilder $r49, r70, r72, r73, r76;
        java.lang.Throwable $r58, $r59, $r60, $r62, $r63, $r64, r79, r80, r81;
        com.android.server.accounts.AccountManagerService$UserAccounts r65;
        android.accounts.Account r66;
        android.os.Bundle r68;
        java.util.Iterator r74, r77;
        java.util.Map$Entry r78;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r65 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r66 := @parameter1: android.accounts.Account;

        r67 := @parameter2: java.lang.String;

        r68 := @parameter3: android.os.Bundle;

        i0 := @parameter4: int;

        r1 := @parameter5: java.util.Map;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r68, 1);

        if r66 != null goto label01;

        return 0;

     label01:
        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r65);

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>($i2);

        if $z0 != 0 goto label02;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Account ");

        $r51 = virtualinvoke r66.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be added - user ");

        $i18 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r65);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is locked. callingUid=");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r57 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r57);

        return 0;

     label02:
        r2 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r2;

     label03:
        r3 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label04:
        $r6 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r6.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label05:
        $r7 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $l3 = virtualinvoke $r7.<com.android.server.accounts.AccountsDb: long findCeAccountId(android.accounts.Account)>(r66);

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label09;

        r70 = new java.lang.StringBuilder;

        specialinvoke r70.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r44 = virtualinvoke r66.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping since the account already exists");

        $r47 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r47);

     label06:
        $r48 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r48.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r3;

     label07:
        exitmonitor r2;

     label08:
        return 0;

     label09:
        r71 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

     label10:
        l1 = virtualinvoke r71.<com.android.server.accounts.AccountsDb: long insertCeAccount(android.accounts.Account,java.lang.String)>(r66, r67);

     label11:
        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label16;

     label12:
        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r38 = virtualinvoke r66.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping the DB insert failed");

        $r41 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r41);

     label13:
        $r42 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r42.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r3;

     label14:
        exitmonitor r2;

     label15:
        return 0;

     label16:
        $r8 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $l6 = virtualinvoke $r8.<com.android.server.accounts.AccountsDb: long insertDeAccount(android.accounts.Account,long)>(r66, l1);

        $b7 = $l6 cmp 0L;

        if $b7 >= 0 goto label20;

        r73 = new java.lang.StringBuilder;

        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r32 = virtualinvoke r66.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping the DB insert failed");

        $r35 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r35);

     label17:
        $r36 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r36.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r3;

     label18:
        exitmonitor r2;

     label19:
        return 0;

     label20:
        if r68 == null goto label27;

     label21:
        $r21 = virtualinvoke r68.<android.os.Bundle: java.util.Set keySet()>();

        r74 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z4 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label27;

        $r22 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>();

        r75 = (java.lang.String) $r22;

        r4 = virtualinvoke r68.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r75);

        $r23 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $l12 = virtualinvoke $r23.<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>(l1, r75, r4);

        $b13 = $l12 cmp 0L;

        if $b13 >= 0 goto label26;

        r76 = new java.lang.StringBuilder;

        specialinvoke r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r25 = virtualinvoke r66.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping since insertExtra failed for key ");

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r75);

        $r29 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r29);

     label23:
        $r30 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r30.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r3;

     label24:
        exitmonitor r2;

     label25:
        return 0;

     label26:
        goto label22;

     label27:
        if r1 == null goto label32;

     label28:
        $r15 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r77 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label29:
        $z2 = interfaceinvoke r77.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label31;

        $r16 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>();

        r78 = (java.util.Map$Entry) $r16;

        $r17 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        $r19 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (java.lang.Integer) $r19;

        $i11 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int,boolean,com.android.server.accounts.AccountManagerService$UserAccounts)>(r66, $r18, $i11, 0, r65);

     label30:
        goto label29;

     label31:
        goto label32;

     label32:
        $r9 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r9.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

        $r10 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_ADD>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>($r10, "accounts", l1, r65, i0);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r65, r66);

     label33:
        $r12 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r12.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label34:
        exitmonitor r3;

     label35:
        exitmonitor r2;

     label36:
        $r13 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $i8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r65);

        $r14 = virtualinvoke $r13.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i8);

        $z1 = virtualinvoke $r14.<android.content.pm.UserInfo: boolean canHaveProfile()>();

        if $z1 == 0 goto label37;

        $i10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r65);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void addAccountToLinkedRestrictedUsers(android.accounts.Account,int)>(r66, $i10);

     label37:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendNotificationAccountUpdated(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r66, r65);

        $i9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r65);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i9);

        return 1;

     label38:
        $r63 := @caughtexception;

        r79 = $r63;

        goto label40;

     label39:
        $r60 := @caughtexception;

        r79 = $r60;

     label40:
        $r61 = r65.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r61.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label41:
        throw r79;

     label42:
        $r58 := @caughtexception;

        r80 = $r58;

     label43:
        exitmonitor r3;

     label44:
        throw r80;

     label45:
        $r64 := @caughtexception;

        r80 = $r64;

        goto label43;

     label46:
        $r59 := @caughtexception;

        r81 = $r59;

     label47:
        exitmonitor r2;

     label48:
        throw r81;

     label49:
        $r62 := @caughtexception;

        r81 = $r62;

        goto label47;

        catch java.lang.Throwable from label03 to label04 with label46;
        catch java.lang.Throwable from label04 to label05 with label42;
        catch java.lang.Throwable from label05 to label06 with label39;
        catch java.lang.Throwable from label06 to label07 with label42;
        catch java.lang.Throwable from label07 to label08 with label46;
        catch java.lang.Throwable from label09 to label10 with label39;
        catch java.lang.Throwable from label10 to label11 with label38;
        catch java.lang.Throwable from label12 to label13 with label38;
        catch java.lang.Throwable from label13 to label14 with label45;
        catch java.lang.Throwable from label14 to label15 with label49;
        catch java.lang.Throwable from label16 to label17 with label38;
        catch java.lang.Throwable from label17 to label18 with label45;
        catch java.lang.Throwable from label18 to label19 with label49;
        catch java.lang.Throwable from label21 to label22 with label38;
        catch java.lang.Throwable from label22 to label23 with label38;
        catch java.lang.Throwable from label23 to label24 with label45;
        catch java.lang.Throwable from label24 to label25 with label49;
        catch java.lang.Throwable from label28 to label29 with label38;
        catch java.lang.Throwable from label29 to label30 with label38;
        catch java.lang.Throwable from label32 to label33 with label38;
        catch java.lang.Throwable from label33 to label34 with label45;
        catch java.lang.Throwable from label34 to label35 with label45;
        catch java.lang.Throwable from label35 to label36 with label49;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.lang.Throwable from label41 to label42 with label45;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch java.lang.Throwable from label44 to label45 with label49;
        catch java.lang.Throwable from label47 to label48 with label49;
    }

    private void addAccountToLinkedRestrictedUsers(android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r2;
        android.content.pm.UserInfo r3;
        com.android.server.accounts.AccountManagerService$MessageHandler r4;
        android.os.UserManager $r5;
        java.util.List $r6;
        boolean $z0, $z1, $z3;
        java.lang.Object $r7;
        android.os.Message $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        $r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r6 = virtualinvoke $r5.<android.os.UserManager: java.util.List getUsers()>();

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r7;

        $z1 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z1 == 0 goto label2;

        $i1 = r3.<android.content.pm.UserInfo: int restrictedProfileParentId>;

        if i0 != $i1 goto label2;

        $i2 = r3.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean addSharedAccountAsUser(android.accounts.Account,int)>(r1, $i2);

        $i3 = r3.<android.content.pm.UserInfo: int id>;

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>($i3);

        if $z3 == 0 goto label2;

        r4 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler>;

        $i4 = r3.<android.content.pm.UserInfo: int id>;

        $r8 = virtualinvoke r4.<com.android.server.accounts.AccountManagerService$MessageHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(4, i0, $i4, r1);

        virtualinvoke r4.<com.android.server.accounts.AccountManagerService$MessageHandler: boolean sendMessage(android.os.Message)>($r8);

     label2:
        goto label1;

     label3:
        return;
    }

    private boolean addSharedAccountAsUser(android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, $i2;
        long l1;
        com.android.server.accounts.AccountsDb $r2, $r3;
        byte $b3;
        java.lang.String $r4, $r7, $r10;
        java.lang.StringBuilder $r5;
        com.android.server.accounts.AccountManagerService$UserAccounts r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        $i2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i0);

        r11 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i2);

        $r2 = r11.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r2.<com.android.server.accounts.AccountsDb: boolean deleteSharedAccount(android.accounts.Account)>(r1);

        $r3 = r11.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb: long insertSharedAccount(android.accounts.Account)>(r1);

        $b3 = l1 cmp 0L;

        if $b3 >= 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r7 = virtualinvoke r1.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping the DB insert failed");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r10);

        return 0;

     label1:
        $r4 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_ADD>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts)>($r4, "shared_accounts", l1, r11);

        return 1;
    }

    private byte[] calculatePackageSignatureDigest(java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.pm.Signature[] r1;
        int i0, i3;
        android.content.pm.PackageManager $r2;
        android.content.pm.PackageInfo $r3;
        android.content.pm.Signature $r4;
        byte[] $r5, r18;
        java.lang.Throwable $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r11, r12;
        java.security.MessageDigest r13, r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: java.lang.String;

     label01:
        r13 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r12, 64);

        r1 = $r3.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        i0 = lengthof r1;

     label02:
        i3 = 0;

     label03:
        if i3 >= i0 goto label06;

     label04:
        $r4 = r1[i3];

        $r5 = virtualinvoke $r4.<android.content.pm.Signature: byte[] toByteArray()>();

        virtualinvoke r13.<java.security.MessageDigest: void update(byte[])>($r5);

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        r14 = r13;

        goto label09;

     label07:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find packageinfo for: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r11);

        r14 = null;

        goto label09;

     label08:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "SHA-256 should be available", $r6);

        r14 = null;

     label09:
        if r14 != null goto label10;

        r18 = null;

        goto label11;

     label10:
        r18 = virtualinvoke r14.<java.security.MessageDigest: byte[] digest()>();

     label11:
        return r18;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label07;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label07;
    }

    private boolean canHaveProfile(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.content.pm.UserInfo r1;
        android.os.UserManager $r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        r1 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.content.pm.UserInfo: boolean canHaveProfile()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean canUserModifyAccounts(int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        boolean $z0, $z1;
        android.os.UserManager $r1;
        android.os.UserHandle $r2;
        android.os.Bundle $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isProfileOwner(int)>(i1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r2 = new android.os.UserHandle;

        specialinvoke $r2.<android.os.UserHandle: void <init>(int)>(i0);

        $r3 = virtualinvoke $r1.<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>($r2);

        $z1 = virtualinvoke $r3.<android.os.Bundle: boolean getBoolean(java.lang.String)>("no_modify_accounts");

        if $z1 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean canUserModifyAccountsForType(int, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r6;
        java.lang.String[] r2;
        boolean $z0, $z1;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.app.admin.DevicePolicyManager $r5;
        int i0, i1, i2, i3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isProfileOwner(int)>(i1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r5 = (android.app.admin.DevicePolicyManager) $r4;

        r2 = virtualinvoke $r5.<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>(i0);

        if r2 != null goto label2;

        return 1;

     label2:
        i2 = lengthof r2;

        i3 = 0;

     label3:
        if i3 >= i2 goto label5;

        $r6 = r2[i3];

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    private void cancelAccountAccessRequestNotificationIfNeeded(int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i2, i3;
        boolean z0;
        android.accounts.Account[] r1;
        android.accounts.Account $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>(null, $i2, "android");

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r2 = r1[i3];

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,boolean)>($r2, i0, z0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account, int, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0;
        java.lang.String r2;
        boolean z0, $z1;
        com.android.server.accounts.AccountManagerService$NotificationId $r3;
        android.os.UserHandle $r4, $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i0);

        $z1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>(r1, r2, $r5);

        if $z1 == 0 goto label2;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, "com.android.AccountManager.ACCOUNT_ACCESS_TOKEN_TYPE", i0);

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i0);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,java.lang.String,android.os.UserHandle)>($r3, r2, $r4);

     label2:
        return;
    }

    private void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, i1, i2;
        boolean z0;
        java.lang.String[] r2;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r2 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r2 == null goto label2;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r4 = r2[i2];

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,java.lang.String,boolean)>(r1, i0, $r4, z0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void cancelAccountAccessRequestNotificationIfNeeded(java.lang.String, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2, i3;
        boolean z0;
        android.accounts.Account[] r2;
        android.accounts.Account $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>(null, $i2, "android");

        i1 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r3 = r2[i3];

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,java.lang.String,boolean)>($r3, i0, r1, z0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$NotificationId r1;
        android.os.UserHandle r2;
        android.content.Context $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$NotificationId;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,java.lang.String,android.os.UserHandle)>(r1, $r4, r2);

        return;
    }

    private void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId, java.lang.String, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r5;
        android.os.UserHandle r2;
        long l0;
        com.android.server.accounts.AccountManagerService$Injector $r3;
        android.app.INotificationManager $r4;
        int $i1, $i2;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        com.android.server.accounts.AccountManagerService$NotificationId r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r8 := @parameter0: com.android.server.accounts.AccountManagerService$NotificationId;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.accounts.AccountManagerService$Injector: android.app.INotificationManager getNotificationManager()>();

        $r5 = r8.<com.android.server.accounts.AccountManagerService$NotificationId: java.lang.String mTag>;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$NotificationId: int access$3600(com.android.server.accounts.AccountManagerService$NotificationId)>(r8);

        $i2 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>(r1, "android", $r5, $i1, $i2);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw $r6;

     label4:
        $r7 := @caughtexception;

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean checkGetAccountsPermission(java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.String[] $r2;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "android.permission.GET_ACCOUNTS";

        $r2[1] = "android.permission.GET_ACCOUNTS_PRIVILEGED";

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isPermittedForPackage(java.lang.String,int,java.lang.String[])>(r1, i0, $r2);

        return $z0;
    }

    private static void checkManageOrCreateUsersPermission(java.lang.String)
    {
        java.lang.String r0, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r5;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.app.ActivityManager: int checkComponentPermission(java.lang.String,int,int,boolean)>("android.permission.MANAGE_USERS", $i0, -1, 1);

        if $i1 == 0 goto label2;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.app.ActivityManager: int checkComponentPermission(java.lang.String,int,int,boolean)>("android.permission.CREATE_USERS", $i2, -1, 1);

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You need MANAGE_USERS or CREATE_USERS permission to: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    private static void checkManageUsersPermission(java.lang.String)
    {
        java.lang.String r0, $r6;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r5;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.app.ActivityManager: int checkComponentPermission(java.lang.String,int,int,boolean)>("android.permission.MANAGE_USERS", $i0, -1, 1);

        if $i1 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You need MANAGE_USERS permission to: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private int checkPackageSignature(java.lang.String, int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3, $i4;
        long l2;
        android.content.pm.PackageManagerInternal r1;
        java.util.Iterator r2;
        com.android.server.accounts.IAccountAuthenticatorCache $r3;
        java.lang.Object $r4, $r5, $r6;
        boolean $z0, $z1, $z2;
        android.accounts.AuthenticatorDescription $r7;
        java.lang.String $r8, r10;
        java.lang.Throwable $r9;
        java.util.Collection r11;
        android.content.pm.RegisteredServicesCache$ServiceInfo r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r10 != null goto label1;

        return 0;

     label1:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        r11 = interfaceinvoke $r3.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>(i1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r1 = (android.content.pm.PackageManagerInternal) $r4;

        r2 = interfaceinvoke r11.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r5;

        $r6 = r12.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r7 = (android.accounts.AuthenticatorDescription) $r6;

        $r8 = $r7.<android.accounts.AuthenticatorDescription: java.lang.String type>;

        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label6;

        $i3 = r12.<android.content.pm.RegisteredServicesCache$ServiceInfo: int uid>;

        if $i3 != i0 goto label5;

        return 2;

     label5:
        $i4 = r12.<android.content.pm.RegisteredServicesCache$ServiceInfo: int uid>;

        $z2 = virtualinvoke r1.<android.content.pm.PackageManagerInternal: boolean hasSignatureCapability(int,int,int)>($i4, i0, 16);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        goto label4;

     label7:
        return 0;

     label8:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label8;
    }

    private transient boolean checkPermissionAndNote(java.lang.String, int, java.lang.String[])
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r3, $r12;
        int i0, i1, i2, $i3, $i4, i6;
        java.lang.String[] r2;
        android.content.Context $r5;
        boolean $z0;
        android.app.AppOpsManager $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String[];

        i1 = lengthof r2;

        i6 = 0;

     label1:
        if i6 >= i1 goto label5;

        r3 = r2[i6];

        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r3);

        if $i3 != 0 goto label4;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  caller uid ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

     label2:
        i2 = staticinvoke <android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>(r3);

        if i2 == -1 goto label3;

        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        $i4 = virtualinvoke $r6.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(i2, i0, r1);

        if $i4 != 0 goto label4;

     label3:
        return 1;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        return 0;
    }

    private void checkReadAccountsPermitted(int, java.lang.String, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r8, r9, r10;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r9 := @parameter3: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountVisibleToCaller(java.lang.String,int,int,java.lang.String)>(r8, i0, i1, r9);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r1[1] = r8;

        r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("caller uid %s cannot access %s accounts", $r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r6);

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>(r10);

        throw $r7;
    }

    private boolean checkReadContactsPermission(java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.String[] $r2;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "android.permission.READ_CONTACTS";

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isPermittedForPackage(java.lang.String,int,java.lang.String[])>(r1, i0, $r2);

        return $z0;
    }

    private void completeCloningAccount(android.accounts.IAccountManagerResponse, android.os.Bundle, android.accounts.Account, com.android.server.accounts.AccountManagerService$UserAccounts, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.Bundle r1;
        android.accounts.Account r2;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        int i0;
        long l1;
        com.android.server.accounts.AccountManagerService$6 r4;
        java.lang.String $r6, $r7;
        java.lang.Throwable $r8;
        android.accounts.IAccountManagerResponse r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r9 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: android.accounts.Account;

        r3 := @parameter3: com.android.server.accounts.AccountManagerService$UserAccounts;

        i0 := @parameter4: int;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r1, 1);

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        r4 = new com.android.server.accounts.AccountManagerService$6;

        $r7 = r2.<android.accounts.Account: java.lang.String type>;

        $r6 = r2.<android.accounts.Account: java.lang.String name>;

        specialinvoke r4.<com.android.server.accounts.AccountManagerService$6: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,android.accounts.Account,int,android.os.Bundle)>(r0, r3, r9, $r7, 0, 0, $r6, 0, r2, i0, r1);

        virtualinvoke r4.<com.android.server.accounts.AccountManagerService$6: void bind()>();

     label2:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r8 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void createNoCredentialsPermissionNotification(android.accounts.Account, android.content.Intent, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r3, $r7, $r10, r21, r22, r23;
        int i0, i1, i2, $i3, $i4, $i5;
        android.os.UserHandle r4;
        android.content.Context r5, $r8, $r16;
        java.lang.Object[] $r6;
        android.app.Notification$Builder $r9, $r11, $r12, $r13, $r14, $r15, $r18;
        android.app.PendingIntent $r17;
        com.android.server.accounts.AccountManagerService$NotificationId $r19;
        android.content.Intent r20;
        android.app.Notification r24;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r20 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 = virtualinvoke r20.<android.content.Intent: int getIntExtra(java.lang.String,int)>("uid", -1);

        r3 = virtualinvoke r20.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("authTokenType");

        $r8 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = r1.<android.accounts.Account: java.lang.String name>;

        $r6[0] = $r7;

        r21 = virtualinvoke $r8.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17040895, $r6);

        i2 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(10);

        if i2 <= 0 goto label1;

        r22 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $i5 = i2 + 1;

        r23 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int)>($i5);

        goto label2;

     label1:
        r22 = r21;

        r23 = "";

     label2:
        r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Context getContextForUser(android.os.UserHandle)>(r4);

        $r9 = new android.app.Notification$Builder;

        $r10 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String ACCOUNT>;

        specialinvoke $r9.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>(r5, $r10);

        $r11 = virtualinvoke $r9.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301642);

        $r12 = virtualinvoke $r11.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $i3 = virtualinvoke r5.<android.content.Context: int getColor(int)>(17170460);

        $r13 = virtualinvoke $r12.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i3);

        $r14 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r22);

        $r15 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r23);

        $r16 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r17 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r16, 0, r20, 268435456, null, r4);

        $r18 = virtualinvoke $r15.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r17);

        r24 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification build()>();

        $r19 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, r3, i1);

        $i4 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void installNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.app.Notification,java.lang.String,int)>($r19, r24, r2, $i4);

        return;
    }

    private void doNotification(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.CharSequence, android.content.Intent, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;
        java.lang.String r2, r3, $r6, $r9, $r14, $r15, $r21, $r23, $r28;
        int i0, $i2;
        long l1;
        android.app.Notification$Builder r4, $r10, $r11, $r12, $r16, $r18, r37;
        boolean $z0, $z1;
        android.content.ComponentName $r5, $r22;
        java.lang.CharSequence $r8, r32;
        java.lang.Object[] $r13;
        android.app.PendingIntent $r17;
        android.app.Notification $r19;
        java.lang.Class $r20;
        java.lang.Throwable $r29;
        com.android.server.accounts.AccountManagerService$UserAccounts r30;
        android.accounts.Account r31;
        java.lang.StringBuilder r33;
        android.os.UserHandle r34, r39;
        android.content.Context r35, r38;
        com.android.server.accounts.AccountManagerService$NotificationId r36;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r30 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r31 := @parameter1: android.accounts.Account;

        r32 := @parameter2: java.lang.CharSequence;

        r1 := @parameter3: android.content.Intent;

        r2 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label2;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doNotification: ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" intent:");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r28 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r28);

     label2:
        $r5 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r5 == null goto label4;

        $r20 = class "Landroid/accounts/GrantCredentialsPermissionActivity;";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r23 = virtualinvoke $r22.<android.content.ComponentName: java.lang.String getClassName()>();

        $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z1 == 0 goto label4;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void createNoCredentialsPermissionNotification(android.accounts.Account,android.content.Intent,java.lang.String,int)>(r31, r1, r2, i0);

     label3:
        goto label5;

     label4:
        r34 = new android.os.UserHandle;

        specialinvoke r34.<android.os.UserHandle: void <init>(int)>(i0);

        r35 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Context getContextForUser(android.os.UserHandle)>(r34);

        r36 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r30, r31);

        $r6 = r36.<com.android.server.accounts.AccountManagerService$NotificationId: java.lang.String mTag>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>($r6);

        $r8 = virtualinvoke r35.<android.content.Context: java.lang.CharSequence getText(int)>(17040716);

        r3 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();

        r4 = new android.app.Notification$Builder;

        $r9 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String ACCOUNT>;

        specialinvoke r4.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>(r35, $r9);

        $r10 = virtualinvoke r4.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r11 = virtualinvoke $r10.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301642);

        $i2 = virtualinvoke r35.<android.content.Context: int getColor(int)>(17170460);

        $r12 = virtualinvoke $r11.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i2);

        $r13 = newarray (java.lang.Object)[1];

        $r14 = r31.<android.accounts.Account: java.lang.String name>;

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r3, $r13);

        $r16 = virtualinvoke $r12.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r15);

        r37 = virtualinvoke $r16.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r32);

        r38 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        r39 = new android.os.UserHandle;

        specialinvoke r39.<android.os.UserHandle: void <init>(int)>(i0);

        $r17 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>(r38, 0, r1, 268435456, null, r39);

        $r18 = virtualinvoke r37.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r17);

        $r19 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification build()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void installNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.app.Notification,java.lang.String,int)>(r36, $r19, r2, i0);

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return;

     label6:
        $r29 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw $r29;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void dumpUser(com.android.server.accounts.AccountManagerService$UserAccounts, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.io.PrintWriter r1;
        int i0, $i2, $i3, $i4, $i5, i6;
        long l1;
        java.lang.StringBuilder r2, $r3, $r39, r63, r71, r74;
        java.lang.String $r6, $r11, $r19, $r21, $r28, $r33, $r36, $r38, $r41, $r43;
        com.android.server.accounts.AccountsDb $r7, $r15, $r44;
        java.util.LinkedHashMap $r9, $r12, r62;
        java.util.Collection $r13;
        boolean $z0, $z1, $z2, z3, z4;
        com.android.server.accounts.IAccountAuthenticatorCache $r14;
        java.util.Set $r16, $r24;
        java.lang.Object $r17, $r22, $r25, $r27, $r31, $r34, r55, r61, r67;
        java.util.Map $r23, r68;
        java.lang.Throwable $r45, $r46, $r47, $r48, $r49, $r50, $r51, r77, r78;
        com.android.server.accounts.AccountManagerService$UserAccounts r52;
        java.io.FileDescriptor r53;
        java.lang.String[] r54;
        android.accounts.Account[] r57;
        android.accounts.Account r59, r70;
        java.util.Iterator r64, r69, r72;
        com.android.server.accounts.AccountManagerService$Session r65;
        android.util.SparseArray r66;
        java.util.Map$Entry r73;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r52 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r53 := @parameter1: java.io.FileDescriptor;

        r1 := @parameter2: java.io.PrintWriter;

        r54 := @parameter3: java.lang.String[];

        z3 := @parameter4: boolean;

        if z3 == 0 goto label06;

        r55 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r55;

     label01:
        $r44 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r44.<com.android.server.accounts.AccountsDb: void dumpDeAccountsTable(java.io.PrintWriter)>(r1);

        exitmonitor r55;

     label02:
        goto label25;

     label03:
        $r51 := @caughtexception;

     label04:
        exitmonitor r55;

     label05:
        throw $r51;

     label06:
        r57 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String,boolean)>(r52, null, 1000, null, 0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accounts: ");

        $i2 = lengthof r57;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        i0 = lengthof r57;

        i6 = 0;

     label07:
        if i6 >= i0 goto label08;

        r59 = r57[i6];

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r41 = virtualinvoke r59.<android.accounts.Account: java.lang.String toString()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        i6 = i6 + 1;

        goto label07;

     label08:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        r61 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r61;

     label09:
        $r7 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r7.<com.android.server.accounts.AccountsDb: void dumpDebugTable(java.io.PrintWriter)>(r1);

        exitmonitor r61;

     label10:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        r62 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        entermonitor r62;

     label11:
        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active Sessions: ");

        $r9 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        $i3 = virtualinvoke $r9.<java.util.LinkedHashMap: int size()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        $r13 = virtualinvoke $r12.<java.util.LinkedHashMap: java.util.Collection values()>();

        r64 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r34 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (com.android.server.accounts.AccountManagerService$Session) $r34;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r36 = virtualinvoke r65.<com.android.server.accounts.AccountManagerService$Session: java.lang.String toDebugString(long)>(l1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r38);

     label13:
        goto label12;

     label14:
        exitmonitor r62;

     label15:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r14 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $i4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        interfaceinvoke $r14.<com.android.server.accounts.IAccountAuthenticatorCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int)>(r53, r1, r54, $i4);

        r66 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        entermonitor r66;

     label16:
        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>($i5);

        exitmonitor r66;

     label17:
        if z4 != 0 goto label18;

        return;

     label18:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        r67 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r67;

     label19:
        $r15 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r68 = virtualinvoke $r15.<com.android.server.accounts.AccountsDb: java.util.Map findAllVisibilityValues()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Account visibility:");

        $r16 = interfaceinvoke r68.<java.util.Map: java.util.Set keySet()>();

        r69 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label20:
        $z1 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label24;

        $r17 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        r70 = (android.accounts.Account) $r17;

        r71 = new java.lang.StringBuilder;

        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r19 = r70.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r22 = interfaceinvoke r68.<java.util.Map: java.lang.Object get(java.lang.Object)>(r70);

        $r23 = (java.util.Map) $r22;

        $r24 = interfaceinvoke $r23.<java.util.Map: java.util.Set entrySet()>();

        r72 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label21:
        $z2 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label23;

        $r25 = interfaceinvoke r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (java.util.Map$Entry) $r25;

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r27 = interfaceinvoke r73.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = (java.lang.String) $r27;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r31 = interfaceinvoke r73.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r33);

     label22:
        goto label21;

     label23:
        goto label20;

     label24:
        exitmonitor r67;

     label25:
        return;

     label26:
        $r48 := @caughtexception;

     label27:
        exitmonitor r67;

     label28:
        throw $r48;

     label29:
        $r47 := @caughtexception;

     label30:
        exitmonitor r66;

     label31:
        throw $r47;

     label32:
        $r49 := @caughtexception;

        r77 = $r49;

     label33:
        exitmonitor r62;

     label34:
        throw r77;

     label35:
        $r46 := @caughtexception;

        r77 = $r46;

        goto label33;

     label36:
        $r50 := @caughtexception;

        r78 = $r50;

     label37:
        exitmonitor r61;

     label38:
        throw r78;

     label39:
        $r45 := @caughtexception;

        r78 = $r45;

        goto label37;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label09 to label10 with label36;
        catch java.lang.Throwable from label11 to label12 with label32;
        catch java.lang.Throwable from label12 to label13 with label32;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label30 to label31 with label29;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label37 to label38 with label39;
    }

    private android.accounts.Account[] filterAccounts(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account[], int, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, i2, $i3, i4;
        java.lang.String r1, r12;
        boolean z0;
        android.accounts.Account r2;
        java.util.LinkedHashMap $r3;
        java.util.Set $r4;
        java.lang.Object[] $r5;
        android.accounts.Account[] $r6, r10, r16;
        java.lang.Integer $r7, $r14;
        com.android.server.accounts.AccountManagerService$UserAccounts r9;
        java.util.Map r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r9 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r10 := @parameter1: android.accounts.Account[];

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r12 = r1;

        if r1 != null goto label1;

        r12 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String getPackageNameForUid(int)>(i0);

     label1:
        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        i1 = lengthof r10;

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        r2 = r10[i4];

        $r7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r2, r12, r9);

        i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if i2 == 1 goto label3;

        if i2 == 2 goto label3;

        if z0 == 0 goto label4;

        if i2 != 4 goto label4;

     label3:
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r14);

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        r15 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map filterSharedAccounts(com.android.server.accounts.AccountManagerService$UserAccounts,java.util.Map,int,java.lang.String)>(r9, $r3, i0, r1);

        $i3 = interfaceinvoke r15.<java.util.Map: int size()>();

        r16 = newarray (android.accounts.Account)[$i3];

        $r4 = interfaceinvoke r15.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r16);

        $r6 = (android.accounts.Account[]) $r5;

        return $r6;
    }

    private java.util.Map filterSharedAccounts(com.android.server.accounts.AccountManagerService$UserAccounts, java.util.Map, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r11, $r20, $r22, $r27, $r31, $r33, r36, r39, r44, r45;
        int i0, $i1, $i2, $i3, i5, i6, i7, i8, i9, i10;
        android.os.UserManager $r2, $r3;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, z7;
        android.content.pm.PackageManager $r4, $r19, $r21;
        android.content.Context $r5;
        android.content.res.Resources $r6;
        java.util.LinkedHashMap $r7;
        java.util.Set $r8;
        java.lang.Object $r9, $r10, $r12, $r16;
        java.lang.Integer $r13, $r17;
        android.accounts.Account $r15, r52;
        java.lang.StringBuilder $r23, $r29;
        android.content.pm.PackageManager$NameNotFoundException $r28;
        com.android.server.accounts.AccountManagerService$UserAccounts r34;
        java.util.Map r35;
        android.content.pm.UserInfo r37;
        java.lang.String[] r38;
        android.accounts.Account[] r41;
        android.content.pm.PackageInfo r43, r46;
        java.util.Iterator r50;
        java.util.Map$Entry r51;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r34 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r35 := @parameter1: java.util.Map;

        i5 := @parameter2: int;

        r36 := @parameter3: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        if $r2 == null goto label30;

        if r34 == null goto label30;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r34);

        if $i1 < 0 goto label30;

        if i5 != 1000 goto label01;

        goto label30;

     label01:
        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r34);

        r37 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i2);

        if r37 == null goto label29;

        $z1 = virtualinvoke r37.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z1 == 0 goto label29;

        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r38 = virtualinvoke $r4.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i5);

        if r38 != null goto label02;

        r38 = newarray (java.lang.String)[0];

        goto label02;

     label02:
        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int)>(17039822);

        i6 = lengthof r38;

        i7 = 0;

     label03:
        if i7 >= i6 goto label05;

        r39 = r38[i7];

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $z5 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>($r27);

        if $z5 == 0 goto label04;

        return r35;

     label04:
        i7 = i7 + 1;

        goto label03;

     label05:
        $i3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r34);

        r41 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getSharedAccountsAsUser(int)>($i3);

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r41);

        if $z2 == 0 goto label06;

        return r35;

     label06:
        if r36 == null goto label11;

     label07:
        $r21 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r43 = virtualinvoke $r21.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r36, 0);

     label08:
        r44 = "";

        if r43 == null goto label10;

        r44 = "";

     label09:
        $r22 = r43.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

        if $r22 == null goto label10;

        r44 = r43.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

     label10:
        goto label19;

     label11:
        i8 = lengthof r38;

     label12:
        i9 = 0;

     label13:
        r44 = "";

        if i9 >= i8 goto label19;

        r45 = r38[i9];

     label14:
        $r19 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r46 = virtualinvoke $r19.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r45, 0);

     label15:
        if r46 == null goto label18;

     label16:
        $r20 = r46.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

        if $r20 == null goto label18;

        r44 = r46.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

     label17:
        goto label19;

     label18:
        i9 = i9 + 1;

        goto label13;

     label19:
        goto label21;

     label20:
        $r28 := @caughtexception;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found ");

        $r31 = virtualinvoke $r28.<android.content.pm.PackageManager$NameNotFoundException: java.lang.String getMessage()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r33);

        r44 = "";

     label21:
        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        $r8 = interfaceinvoke r35.<java.util.Map: java.util.Set entrySet()>();

        r50 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z6 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label28;

        $r9 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        r52 = (android.accounts.Account) $r10;

        $r11 = r52.<android.accounts.Account: java.lang.String type>;

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r44);

        if $z3 == 0 goto label23;

        $r16 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.lang.Integer) $r16;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r52, $r17);

        goto label27;

     label23:
        i0 = lengthof r41;

        i10 = 0;

     label24:
        z7 = 0;

        if i10 >= i0 goto label26;

        $r15 = r41[i10];

        $z4 = virtualinvoke $r15.<android.accounts.Account: boolean equals(java.lang.Object)>(r52);

        if $z4 == 0 goto label25;

        z7 = 1;

        goto label26;

     label25:
        i10 = i10 + 1;

        goto label24;

     label26:
        if z7 != 0 goto label27;

        $r12 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.Integer) $r12;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r52, $r13);

     label27:
        goto label22;

     label28:
        return $r7;

     label29:
        return r35;

     label30:
        return r35;

        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label20;
        catch android.content.pm.PackageManager$NameNotFoundException from label09 to label10 with label20;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label20;
        catch android.content.pm.PackageManager$NameNotFoundException from label14 to label15 with label20;
        catch android.content.pm.PackageManager$NameNotFoundException from label16 to label17 with label20;
    }

    private java.util.List getAccountRemovedReceivers(android.accounts.Account, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.lang.String r3;
        int i0, $i1;
        android.content.Intent $r4;
        android.content.pm.PackageManager $r6;
        java.util.ArrayList $r7;
        boolean $z0;
        java.lang.Object $r8;
        android.content.pm.ResolveInfo $r9;
        android.content.pm.ActivityInfo $r10;
        android.content.pm.ApplicationInfo $r11;
        java.lang.Integer $r12;
        java.util.List r14;
        java.util.Iterator r16;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.accounts.action.ACCOUNT_REMOVED");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setFlags(int)>(16777216);

        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        r14 = virtualinvoke $r6.<android.content.pm.PackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,int)>($r4, 0, $i1);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        if r14 != null goto label1;

        return $r7;

     label1:
        r16 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.content.pm.ResolveInfo) $r8;

        $r10 = $r9.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r11 = $r10.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r3 = $r11.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r12 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r1, r3, r2);

        i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if i0 == 1 goto label3;

        if i0 != 2 goto label4;

     label3:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

     label4:
        goto label2;

     label5:
        return $r7;
    }

    private int getAccountVisibilityFromCache(android.accounts.Account, java.lang.String, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.lang.Object r3, $r5;
        java.util.Map $r4;
        java.lang.Throwable $r6;
        android.accounts.Account r7;
        java.lang.Integer r8;
        int i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r7 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.server.accounts.AccountManagerService$UserAccounts;

        r3 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label01:
        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r7, r2);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.lang.Integer) $r5;

     label02:
        if r8 == null goto label05;

     label03:
        i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

     label04:
        goto label06;

     label05:
        i0 = 0;

     label06:
        exitmonitor r3;

     label07:
        return i0;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private android.accounts.AccountAndUser[] getAccounts(int[])
    {
        com.android.server.accounts.AccountManagerService r0;
        int[] r1;
        java.util.ArrayList r2;
        int i0, i1, i2, $i3, $i4, i5, i6;
        android.accounts.AccountAndUser[] $r3, $r5;
        java.lang.Object[] $r4;
        android.accounts.AccountAndUser $r6;
        android.accounts.Account $r7;
        com.android.server.accounts.AccountManagerService$UserAccounts r8;
        android.accounts.Account[] r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: int[];

        r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        i0 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label5;

        i1 = r1[i5];

        r8 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        if r8 != null goto label2;

        goto label4;

     label2:
        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r9 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String,boolean)>(r8, null, $i4, null, 0);

        i2 = lengthof r9;

        i6 = 0;

     label3:
        if i6 >= i2 goto label4;

        $r6 = new android.accounts.AccountAndUser;

        $r7 = r9[i6];

        specialinvoke $r6.<android.accounts.AccountAndUser: void <init>(android.accounts.Account,int)>($r7, i1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i6 = i6 + 1;

        goto label3;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r3 = newarray (android.accounts.AccountAndUser)[$i3];

        $r4 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.accounts.AccountAndUser[]) $r4;

        return $r5;
    }

    private java.util.Map getAccountsAndVisibilityForPackage(java.lang.String, java.util.List, java.lang.Integer, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.Integer r1, $r12;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.util.Iterator r4;
        java.lang.Object r5, $r9, $r11, r25;
        android.accounts.Account[] r6;
        int i0, $i1, $i2, i4;
        boolean $z0, $z1;
        java.util.LinkedHashMap $r7, $r18;
        java.util.Map $r8;
        java.util.HashMap $r10;
        java.lang.StringBuilder $r14;
        java.lang.String $r17, r21, r24;
        java.lang.Throwable $r19, $r20;
        java.util.List r22;
        android.accounts.Account r26;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r21 := @parameter0: java.lang.String;

        r22 := @parameter1: java.util.List;

        r1 := @parameter2: java.lang.Integer;

        r2 := @parameter3: com.android.server.accounts.AccountManagerService$UserAccounts;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean packageExistsForUser(java.lang.String,int)>(r21, $i1);

        if $z0 != 0 goto label01;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

        $r18 = new java.util.LinkedHashMap;

        specialinvoke $r18.<java.util.LinkedHashMap: void <init>()>();

        return $r18;

     label01:
        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        r4 = interfaceinvoke r22.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r9;

        r25 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r25;

     label03:
        r5 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r5;

     label04:
        $r10 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r24);

        r6 = (android.accounts.Account[]) $r11;

     label05:
        if r6 == null goto label11;

     label06:
        i0 = lengthof r6;

     label07:
        i4 = 0;

     label08:
        if i4 >= i0 goto label11;

        r26 = r6[i4];

     label09:
        $r12 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r26, r21, r2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r12);

     label10:
        i4 = i4 + 1;

        goto label08;

     label11:
        exitmonitor r5;

     label12:
        exitmonitor r25;

     label13:
        goto label02;

     label14:
        $r19 := @caughtexception;

     label15:
        exitmonitor r5;

     label16:
        throw $r19;

     label17:
        $r20 := @caughtexception;

     label18:
        exitmonitor r25;

     label19:
        throw $r20;

     label20:
        $i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $r8 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map filterSharedAccounts(com.android.server.accounts.AccountManagerService$UserAccounts,java.util.Map,int,java.lang.String)>(r2, $r7, $i2, r21);

        return $r8;

        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private android.accounts.Account[] getAccountsAsUserForPackage(java.lang.String, int, java.lang.String, int, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i8, $i9, i10;
        boolean z0, $z1, $z3, $z4, $z5, $z6, $z7;
        long l2;
        android.accounts.Account[] $r1, r30;
        com.android.server.accounts.AccountManagerService$UserAccounts $r2;
        java.lang.String $r11, $r19, r21, r22, r23;
        android.content.Context $r12;
        java.lang.Throwable $r20;
        java.util.List r26, r27, r36;
        java.lang.Object r29;
        java.lang.StringBuilder r32, r34;
        java.lang.SecurityException r33;
        java.util.ArrayList r35;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r21 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r22 := @parameter2: java.lang.String;

        i10 := @parameter3: int;

        r23 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == $i3 goto label02;

        if i1 == 1000 goto label02;

        $r12 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i8 = virtualinvoke $r12.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i8 != 0 goto label01;

        goto label02;

     label01:
        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $i9 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying to get account for ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r33 = new java.lang.SecurityException;

        $r19 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r33.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw r33;

     label02:
        $z6 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z6 == 0 goto label03;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccounts: accountType ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r11 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r11);

     label03:
        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r26 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesManagedByCaller(int,int)>(i1, $i4);

        if i10 == -1 goto label05;

        $z4 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i1, 1000);

        if $z4 != 0 goto label04;

        if r21 == null goto label05;

        $z5 = interfaceinvoke r26.<java.util.List: boolean contains(java.lang.Object)>(r21);

        if $z5 == 0 goto label05;

     label04:
        goto label06;

     label05:
        r22 = r23;

        i10 = i1;

     label06:
        r27 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesVisibleToCaller(int,int,java.lang.String)>(i10, i0, r22);

        $z7 = interfaceinvoke r27.<java.util.List: boolean isEmpty()>();

        if $z7 != 0 goto label13;

        if r21 == null goto label07;

        $z3 = interfaceinvoke r27.<java.util.List: boolean contains(java.lang.Object)>(r21);

        if $z3 != 0 goto label07;

        goto label13;

     label07:
        $z1 = interfaceinvoke r27.<java.util.List: boolean contains(java.lang.Object)>(r21);

        if $z1 == 0 goto label08;

        r35 = new java.util.ArrayList;

        specialinvoke r35.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r35.<java.util.List: boolean add(java.lang.Object)>(r21);

        r29 = r35;

        goto label09;

     label08:
        r29 = r27;

     label09:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label10:
        $r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r36 = (java.util.List) r29;

        r30 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,int,java.lang.String,java.util.List,boolean)>($r2, i10, r22, r36, z0);

     label11:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r30;

     label12:
        $r20 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r20;

     label13:
        $r1 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        return $r1;

        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private android.accounts.Account[] getAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts, int, java.lang.String, java.util.List, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r8;
        boolean z0, $z1;
        android.accounts.Account[] r3, r13;
        java.util.ArrayList $r4;
        int $i0, $i1, i2, i3;
        java.lang.Object $r5, $r7;
        android.accounts.Account $r6;
        java.util.List $r9, r11;
        com.android.server.accounts.AccountManagerService$UserAccounts r10;
        java.util.Iterator r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r10 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        i2 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r11 := @parameter3: java.util.List;

        z0 := @parameter4: boolean;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r12 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String,boolean)>(r10, $r8, i2, r1, z0);

        if r3 == null goto label2;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        virtualinvoke $r4.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r9);

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        r13 = newarray (android.accounts.Account)[$i0];

        i3 = 0;

     label4:
        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i3 >= $i1 goto label5;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r6 = (android.accounts.Account) $r5;

        r13[i3] = $r6;

        i3 = i3 + 1;

        goto label4;

     label5:
        return r13;
    }

    static java.util.HashMap getAuthenticatorTypeAndUIDForUser(android.content.Context, int)
    {
        android.content.Context r0;
        int i0;
        com.android.server.accounts.AccountAuthenticatorCache $r1;
        java.util.HashMap $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r1 = new com.android.server.accounts.AccountAuthenticatorCache;

        specialinvoke $r1.<com.android.server.accounts.AccountAuthenticatorCache: void <init>(android.content.Context)>(r0);

        $r2 = staticinvoke <com.android.server.accounts.AccountManagerService: java.util.HashMap getAuthenticatorTypeAndUIDForUser(com.android.server.accounts.IAccountAuthenticatorCache,int)>($r1, i0);

        return $r2;
    }

    private static java.util.HashMap getAuthenticatorTypeAndUIDForUser(com.android.server.accounts.IAccountAuthenticatorCache, int)
    {
        int i0, $i1;
        android.content.pm.RegisteredServicesCache$ServiceInfo r1;
        java.util.LinkedHashMap $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4, $r5;
        android.accounts.AuthenticatorDescription $r6;
        java.lang.String $r7;
        java.lang.Integer $r8;
        com.android.server.accounts.IAccountAuthenticatorCache r10;
        java.util.Iterator r11;

        r10 := @parameter0: com.android.server.accounts.IAccountAuthenticatorCache;

        i0 := @parameter1: int;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke r10.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>(i0);

        r11 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r4;

        $r5 = r1.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r6 = (android.accounts.AuthenticatorDescription) $r5;

        $r7 = $r6.<android.accounts.AuthenticatorDescription: java.lang.String type>;

        $i1 = r1.<android.content.pm.RegisteredServicesCache$ServiceInfo: int uid>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return $r2;
    }

    private android.accounts.AuthenticatorDescription[] getAuthenticatorTypesInternal(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.AuthenticatorDescription[] r1;
        com.android.server.accounts.IAccountAuthenticatorCache $r2, $r3;
        int $i0, i1, i2;
        boolean $z0;
        java.lang.Object $r4, $r6;
        android.content.pm.RegisteredServicesCache$ServiceInfo $r5;
        android.accounts.AuthenticatorDescription $r7;
        java.util.Collection r8;
        java.util.Iterator r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i1 := @parameter0: int;

        $r2 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        interfaceinvoke $r2.<com.android.server.accounts.IAccountAuthenticatorCache: void updateServices(int)>(i1);

        $r3 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        r8 = interfaceinvoke $r3.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>(i1);

        $i0 = interfaceinvoke r8.<java.util.Collection: int size()>();

        r1 = newarray (android.accounts.AuthenticatorDescription)[$i0];

        i2 = 0;

        r9 = interfaceinvoke r8.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r4;

        $r6 = $r5.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r7 = (android.accounts.AuthenticatorDescription) $r6;

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private android.content.Context getContextForUser(android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Context $r1, $r2, $r5, r7;
        java.lang.String $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.os.UserHandle r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r6 := @parameter0: android.os.UserHandle;

     label1:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        r7 = virtualinvoke $r2.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r3, 0, r6);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        return $r5;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r20;
        int i0, $i1, $i2, $i3;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.util.HashMap r3, $r7, $r13;
        android.util.Pair r4, r17;
        com.android.server.accounts.AccountManagerService$NotificationId r5, r18;
        java.lang.Integer $r6;
        java.lang.Object $r8;
        java.lang.Throwable $r15;
        android.accounts.Account r16;
        java.lang.StringBuilder r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r16 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i1);

        r3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        entermonitor r3;

     label1:
        r4 = new android.util.Pair;

        r17 = new android.util.Pair;

        specialinvoke r17.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r16, r1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r17, $r6);

        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.accounts.AccountManagerService$NotificationId) $r8;

     label2:
        r18 = r5;

        if r5 != null goto label5;

     label3:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AccountManagerService:38:");

        $i2 = virtualinvoke r16.<android.accounts.Account: int hashCode()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i3 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r20 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r18 = new com.android.server.accounts.AccountManagerService$NotificationId;

        specialinvoke r18.<com.android.server.accounts.AccountManagerService$NotificationId: void <init>(java.lang.String,int)>(r20, 38);

     label4:
        $r13 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r18);

     label5:
        exitmonitor r3;

     label6:
        return r18;

     label7:
        $r15 := @caughtexception;

     label8:
        exitmonitor r3;

     label9:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private android.content.Intent getDefaultCantAddAccountIntent(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.content.Intent $r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r2 = new android.content.Intent;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r3, class "Landroid/accounts/CantAddAccountActivity;");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.accounts.extra.ERROR_CODE", i0);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        return $r2;
    }

    private java.lang.String getPackageNameForUid(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String[] r1;
        int i0, i1, $i2, i3, i4, i5, i6;
        java.lang.String r2, r7, r8;
        android.content.pm.ApplicationInfo r3;
        android.content.pm.PackageManager $r4, $r5;
        boolean $z0;
        android.content.pm.PackageManager$NameNotFoundException $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i3 := @parameter0: int;

        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r4.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i3);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z0 == 0 goto label01;

        return null;

     label01:
        r7 = r1[0];

        $i2 = lengthof r1;

        if $i2 != 1 goto label02;

        return r7;

     label02:
        i4 = 2147483647;

        i0 = lengthof r1;

        i5 = 0;

     label03:
        if i5 >= i0 goto label11;

        r2 = r1[i5];

     label04:
        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r3 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r2, 0);

     label05:
        r8 = r7;

        i6 = i4;

        if r3 == null goto label08;

     label06:
        i1 = r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label07:
        r8 = r7;

        i6 = i4;

        if i1 >= i4 goto label08;

        i6 = i1;

        r8 = r2;

     label08:
        r7 = r8;

        i4 = i6;

        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        i5 = i5 + 1;

        goto label03;

     label11:
        return r7;

        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label09;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label09;
    }

    private java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.util.Map r3, $r4, $r7, r11;
        java.lang.Object $r5, r9;
        java.util.HashMap r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Map) $r5;

        r9 = r3;

        if r3 != null goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", "Visibility was not initialized");

        r10 = new java.util.HashMap;

        specialinvoke r10.<java.util.HashMap: void <init>()>();

        r9 = r10;

        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10);

     label1:
        r11 = (java.util.Map) r9;

        return r11;
    }

    private java.util.Map getRequestingPackages(android.accounts.Account, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.util.HashSet $r2;
        java.util.HashMap $r3;
        boolean $z0;
        java.lang.Object $r4, $r9;
        java.lang.Integer $r5;
        java.lang.String[] $r7;
        java.util.Map $r8, r14, r17;
        java.util.Set $r10;
        java.lang.Throwable $r11;
        android.accounts.Account r12;
        java.lang.String r15, r16, r20;
        int i0;
        java.util.Iterator r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: android.accounts.Account;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        entermonitor r14;

     label01:
        r15 = r12.<android.accounts.Account: java.lang.String type>;

     label02:
        i0 = 0;

     label03:
        if i0 >= 2 goto label08;

     label04:
        $r7 = newarray (java.lang.String)[2];

        $r7[0] = r15;

        $r7[1] = null;

        r16 = $r7[i0];

        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (java.util.Map) $r9;

     label05:
        if r17 == null goto label07;

     label06:
        $r10 = interfaceinvoke r17.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

     label07:
        i0 = i0 + 1;

        goto label03;

     label08:
        exitmonitor r14;

     label09:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r19 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r4 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r4;

        $r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r12, r20, r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r20, $r5);

        goto label10;

     label11:
        return $r3;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r14;

     label14:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private com.android.server.accounts.AccountManagerService$NotificationId getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.util.HashMap r2, $r3, $r7;
        java.lang.Object $r4;
        int $i0;
        java.lang.Throwable $r9;
        com.android.server.accounts.AccountManagerService$UserAccounts r10;
        com.android.server.accounts.AccountManagerService$NotificationId r11, r12;
        java.lang.StringBuilder r13;
        java.lang.String r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r10 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$2200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r10);

        entermonitor r2;

     label1:
        $r3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$2200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r10);

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (com.android.server.accounts.AccountManagerService$NotificationId) $r4;

     label2:
        r12 = r11;

        if r11 != null goto label5;

     label3:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AccountManagerService:37:");

        $i0 = virtualinvoke r1.<android.accounts.Account: int hashCode()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r14 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = new com.android.server.accounts.AccountManagerService$NotificationId;

        specialinvoke r12.<com.android.server.accounts.AccountManagerService$NotificationId: void <init>(java.lang.String,int)>(r14, 37);

     label4:
        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$2200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r10);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);

     label5:
        exitmonitor r2;

     label6:
        return r12;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static com.android.server.accounts.AccountManagerService getSingleton()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        com.android.server.accounts.AccountManagerService $r2;

        $r0 = <com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicReference sThis>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (com.android.server.accounts.AccountManagerService) $r1;

        return $r2;
    }

    private java.util.List getTypesForCaller(int, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3;
        boolean z0, $z1, $z3;
        long l2;
        android.content.pm.PackageManagerInternal r1;
        android.content.pm.RegisteredServicesCache$ServiceInfo r2;
        java.util.ArrayList $r3;
        com.android.server.accounts.IAccountAuthenticatorCache $r4;
        java.lang.Object $r5, $r6, $r7;
        android.accounts.AuthenticatorDescription $r8;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        java.util.Collection r12;
        java.util.Iterator r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        r12 = interfaceinvoke $r4.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>(i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r1 = (android.content.pm.PackageManagerInternal) $r5;

        r13 = interfaceinvoke r12.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r6;

        if z0 != 0 goto label4;

        $i3 = r2.<android.content.pm.RegisteredServicesCache$ServiceInfo: int uid>;

        $z3 = virtualinvoke r1.<android.content.pm.PackageManagerInternal: boolean hasSignatureCapability(int,int,int)>($i3, i0, 16);

        if $z3 == 0 goto label5;

     label4:
        $r7 = r2.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r8 = (android.accounts.AuthenticatorDescription) $r7;

        $r9 = $r8.<android.accounts.AuthenticatorDescription: java.lang.String type>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

     label5:
        goto label3;

     label6:
        return $r3;

     label7:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
    }

    private java.util.List getTypesManagedByCaller(int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        java.util.List $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesForCaller(int,int,boolean)>(i0, i1, 0);

        return $r1;
    }

    private java.util.List getTypesVisibleToCaller(int, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesForCaller(int,int,boolean)>(i0, i1, 1);

        return $r2;
    }

    private android.util.SparseBooleanArray getUidsOfInstalledOrUpdatedPackagesAsUser(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r2;
        android.content.pm.PackageManager $r3;
        android.util.SparseBooleanArray $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.content.pm.ApplicationInfo $r6, $r7, $r8;
        java.util.List r9;
        android.content.pm.PackageInfo r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r9 = virtualinvoke $r3.<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(8192, i0);

        $r4 = new android.util.SparseBooleanArray;

        $i1 = interfaceinvoke r9.<java.util.List: int size()>();

        specialinvoke $r4.<android.util.SparseBooleanArray: void <init>(int)>($i1);

        r2 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.content.pm.PackageInfo) $r5;

        $r6 = r10.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r6 == null goto label2;

        $r7 = r10.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r7.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = $i2 & 8388608;

        if $i3 == 0 goto label2;

        $r8 = r10.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r8.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void put(int,boolean)>($i4, 1);

     label2:
        goto label1;

     label3:
        return $r4;
    }

    private com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()
    {
        com.android.server.accounts.AccountManagerService r0;
        int $i0;
        com.android.server.accounts.AccountManagerService$UserAccounts $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i0);

        return $r1;
    }

    private com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.util.SparseArray r1, $r3, $r19;
        java.io.File r2, r25, r26;
        java.lang.Object $r4, r28, r29;
        com.android.server.accounts.AccountsDb $r5, $r13;
        boolean $z0, $z1, z2;
        android.util.SparseBooleanArray $r6;
        java.lang.String $r10, $r12, $r15, $r17;
        com.android.server.accounts.AccountManagerService$Injector $r11, $r14, $r16;
        android.content.Context $r18;
        java.lang.Throwable $r20, $r21, $r22;
        com.android.server.accounts.AccountManagerService$UserAccounts r23, r24;
        java.lang.StringBuilder r27;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r23 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r4;

     label02:
        z2 = 0;

        r24 = r23;

        if r23 != null goto label06;

     label03:
        r25 = new java.io.File;

        $r14 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$Injector mInjector>;

        $r15 = virtualinvoke $r14.<com.android.server.accounts.AccountManagerService$Injector: java.lang.String getPreNDatabaseName(int)>(i0);

        specialinvoke r25.<java.io.File: void <init>(java.lang.String)>($r15);

        r26 = new java.io.File;

        $r16 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$Injector mInjector>;

        $r17 = virtualinvoke $r16.<com.android.server.accounts.AccountManagerService$Injector: java.lang.String getDeDatabaseName(int)>(i0);

        specialinvoke r26.<java.io.File: void <init>(java.lang.String)>($r17);

        r24 = new com.android.server.accounts.AccountManagerService$UserAccounts;

        $r18 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        specialinvoke r24.<com.android.server.accounts.AccountManagerService$UserAccounts: void <init>(android.content.Context,int,java.io.File,java.io.File)>($r18, i0, r25, r26);

     label04:
        $r19 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        virtualinvoke $r19.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r24);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void purgeOldGrants(com.android.server.accounts.AccountManagerService$UserAccounts)>(r24);

     label05:
        z2 = 1;

     label06:
        $r5 = r24.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $z0 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb: boolean isCeDatabaseAttached()>();

        if $z0 != 0 goto label18;

        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray mLocalUnlockedUsers>;

        $z1 = virtualinvoke $r6.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z1 == 0 goto label18;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unlocked - opening CE database");

        $r10 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountManagerService", $r10);

        r28 = r24.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r28;

     label07:
        r29 = r24.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r29;

     label08:
        r2 = new java.io.File;

        $r11 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$Injector mInjector>;

        $r12 = virtualinvoke $r11.<com.android.server.accounts.AccountManagerService$Injector: java.lang.String getCeDatabaseName(int)>(i0);

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r12);

        $r13 = r24.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r13.<com.android.server.accounts.AccountsDb: void attachCeDatabase(java.io.File)>(r2);

        exitmonitor r29;

     label09:
        exitmonitor r28;

     label10:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void syncDeCeAccountsLocked(com.android.server.accounts.AccountManagerService$UserAccounts)>(r24);

     label11:
        goto label18;

     label12:
        $r20 := @caughtexception;

     label13:
        exitmonitor r29;

     label14:
        throw $r20;

     label15:
        $r22 := @caughtexception;

     label16:
        exitmonitor r28;

     label17:
        throw $r22;

     label18:
        if z2 == 0 goto label20;

     label19:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>(r24, 1);

     label20:
        exitmonitor r1;

     label21:
        return r24;

     label22:
        $r21 := @caughtexception;

     label23:
        exitmonitor r1;

     label24:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private android.os.UserManager getUserManager()
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.UserManager $r1, $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager> = $r4;

     label1:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        return $r2;
    }

    private void handleGetAccountsResult(android.accounts.IAccountManagerResponse, android.accounts.Account[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account[] r2;
        boolean $z0;
        int $i0;
        android.os.Bundle $r3, $r4;
        android.accounts.Account $r5, $r7;
        java.lang.String $r6, $r8, r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account[];

        r9 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean needToStartChooseAccountActivity(android.accounts.Account[],java.lang.String)>(r2, r9);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void startChooseAccountActivityWithAccounts(android.accounts.IAccountManagerResponse,android.accounts.Account[],java.lang.String)>(r1, r2, r9);

        return;

     label1:
        $i0 = lengthof r2;

        if $i0 != 1 goto label2;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = r2[0];

        $r6 = $r5.<android.accounts.Account: java.lang.String name>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authAccount", $r6);

        $r7 = r2[0];

        $r8 = $r7.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("accountType", $r8);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r1, $r4);

        return;

     label2:
        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r1, $r3);

        return;
    }

    private int handleIncomingUser(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i2, $i3;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = interfaceinvoke $r2.<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i2, $i3, i0, 1, 1, "", null);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        return i0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean hasAccountAccess(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int $i0, $i1, i2, i3;
        boolean $z0, z1;
        com.android.server.accounts.AccountManagerService$UserAccounts $r2;
        java.lang.Integer $r3;
        java.lang.String r4, r5, r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r4 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        z1 = 0;

        r5 = r4;

        if r4 != null goto label1;

        r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String getPackageNameForUid(int)>(i2);

        r5 = r6;

        if r6 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean permissionIsGranted(android.accounts.Account,java.lang.String,int,int)>(r1, null, i2, $i0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        $r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i1);

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r1, r5, $r2);

        i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if i3 == 1 goto label3;

        if i3 != 2 goto label4;

     label3:
        z1 = 1;

     label4:
        return z1;
    }

    private boolean hasExplicitlyGrantedPermission(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r6, $r13;
        int i0, $i1, $i2;
        java.lang.Object r2, r3;
        com.android.server.accounts.AccountsDb $r4, $r14;
        byte $b3;
        boolean $z0, z1;
        java.lang.Throwable $r15, $r16;
        android.accounts.Account r17;
        com.android.server.accounts.AccountManagerService$UserAccounts r18;
        long l5;
        java.lang.StringBuilder r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r17 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i1 != 1000 goto label01;

        return 1;

     label01:
        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r18 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i2);

        r2 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r2;

     label02:
        r3 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label03:
        if r1 == null goto label06;

     label04:
        $r14 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l5 = virtualinvoke $r14.<com.android.server.accounts.AccountsDb: long findMatchingGrantsCount(int,java.lang.String,android.accounts.Account)>(i0, r1, r17);

     label05:
        goto label07;

     label06:
        $r4 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l5 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb: long findMatchingGrantsCountAnyToken(int,android.accounts.Account)>(i0, r17);

     label07:
        $b3 = l5 cmp 0L;

        if $b3 <= 0 goto label08;

        z1 = 1;

        goto label09;

     label08:
        z1 = 0;

     label09:
        if z1 != 0 goto label13;

     label10:
        $z0 = staticinvoke <android.app.ActivityManager: boolean isRunningInTestHarness()>();

        if $z0 == 0 goto label13;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no credentials permission for usage of ");

        $r6 = virtualinvoke r17.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" by uid ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but ignoring since device is in test harness.");

        $r13 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r13);

        exitmonitor r3;

     label11:
        exitmonitor r2;

     label12:
        return 1;

     label13:
        exitmonitor r3;

     label14:
        exitmonitor r2;

     label15:
        return z1;

     label16:
        $r15 := @caughtexception;

     label17:
        exitmonitor r3;

     label18:
        throw $r15;

     label19:
        $r16 := @caughtexception;

     label20:
        exitmonitor r2;

     label21:
        throw $r16;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private android.accounts.Account insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2, $r9, $r13;
        android.accounts.Account[] r3, r14;
        java.lang.String $r4, $r7, $r10, r15;
        java.util.HashMap $r5, $r11;
        java.lang.Object $r6;
        int $i0, i1;
        java.util.UUID $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        $r5 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r4 = r2.<android.accounts.Account: java.lang.String type>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        r14 = (android.accounts.Account[]) $r6;

        if r14 == null goto label1;

        i1 = lengthof r14;

        goto label2;

     label1:
        i1 = 0;

     label2:
        $i0 = i1 + 1;

        r3 = newarray (android.accounts.Account)[$i0];

        if r14 == null goto label3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r14, 0, r3, 0, i1);

     label3:
        $r7 = virtualinvoke r2.<android.accounts.Account: java.lang.String getAccessId()>();

        if $r7 == null goto label4;

        r15 = virtualinvoke r2.<android.accounts.Account: java.lang.String getAccessId()>();

        goto label5;

     label4:
        $r8 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r15 = virtualinvoke $r8.<java.util.UUID: java.lang.String toString()>();

     label5:
        $r9 = new android.accounts.Account;

        specialinvoke $r9.<android.accounts.Account: void <init>(android.accounts.Account,java.lang.String)>(r2, r15);

        r3[i1] = $r9;

        $r11 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r10 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r3);

        $r13 = r3[i1];

        return $r13;
    }

    private void installNotification(com.android.server.accounts.AccountManagerService$NotificationId, android.app.Notification, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.app.Notification r1;
        java.lang.String r2, $r5;
        int i0, $i2;
        long l1;
        android.app.INotificationManager r3;
        com.android.server.accounts.AccountManagerService$Injector $r4;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7;
        com.android.server.accounts.AccountManagerService$NotificationId r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r8 := @parameter0: com.android.server.accounts.AccountManagerService$NotificationId;

        r1 := @parameter1: android.app.Notification;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$Injector mInjector>;

        r3 = virtualinvoke $r4.<com.android.server.accounts.AccountManagerService$Injector: android.app.INotificationManager getNotificationManager()>();

     label2:
        $r5 = r8.<com.android.server.accounts.AccountManagerService$NotificationId: java.lang.String mTag>;

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$NotificationId: int access$3600(com.android.server.accounts.AccountManagerService$NotificationId)>(r8);

        interfaceinvoke r3.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>(r2, "android", $r5, $i2, r1, i0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
    }

    private java.util.List invalidateAuthTokenLocked(com.android.server.accounts.AccountManagerService$UserAccounts, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r3, r4, r11, r13;
        java.util.ArrayList $r5;
        com.android.server.accounts.AccountsDb $r6, $r7;
        boolean $z0;
        android.util.Pair $r8;
        java.lang.Throwable $r9;
        com.android.server.accounts.AccountManagerService$UserAccounts r10;
        android.database.Cursor r12;
        android.accounts.Account r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r10 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r10.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r12 = virtualinvoke $r6.<com.android.server.accounts.AccountsDb: android.database.Cursor findAuthtokenForAllAccounts(java.lang.String,java.lang.String)>(r1, r11);

     label1:
        $z0 = interfaceinvoke r12.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        r13 = interfaceinvoke r12.<android.database.Cursor: java.lang.String getString(int)>(0);

        r3 = interfaceinvoke r12.<android.database.Cursor: java.lang.String getString(int)>(1);

        r4 = interfaceinvoke r12.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r7 = r10.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r7.<com.android.server.accounts.AccountsDb: boolean deleteAuthToken(java.lang.String)>(r13);

        r14 = new android.accounts.Account;

        specialinvoke r14.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r3, r1);

        $r8 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r14, r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        interfaceinvoke r12.<android.database.Cursor: void close()>();

        return $r5;

     label4:
        $r9 := @caughtexception;

        interfaceinvoke r12.<android.database.Cursor: void close()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private boolean isAccountManagedByCaller(java.lang.String, int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int i0, i1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesManagedByCaller(int,int)>(i0, i1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private boolean isAccountPresentForCaller(java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r8, r9;
        int i0, i1;
        com.android.server.accounts.AccountManagerService$UserAccounts $r2, $r4;
        java.util.HashMap $r3, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        android.accounts.Account $r7;
        android.accounts.Account[] r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        $r3 = $r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r9);

        if $z0 == 0 goto label3;

        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        $r5 = $r4.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r10 = (android.accounts.Account[]) $r6;

        i0 = lengthof r10;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r7 = r10[i1];

        $r8 = $r7.<android.accounts.Account: java.lang.String name>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isAccountVisibleToCaller(java.lang.String, int, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2;
        int i0, i1;
        java.util.List $r3;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesVisibleToCaller(int,int,java.lang.String)>(i0, i1, r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private boolean isCrossUser(int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i2, $i3;
        android.content.Context $r1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i1 == $i2 goto label1;

        if i0 == 1000 goto label1;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isLocalUnlockedUser(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.util.SparseArray r1;
        boolean z0;
        android.util.SparseBooleanArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray mLocalUnlockedUsers>;

        z0 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private transient boolean isPermittedForPackage(java.lang.String, int, java.lang.String[])
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i2, i3, $i4, i5, i6, i7;
        java.lang.String[] r1;
        long l1;
        android.content.pm.IPackageManager r2;
        java.lang.String r3, r8;
        android.content.pm.PackageManager $r4;
        android.app.AppOpsManager $r5;
        android.util.AndroidException $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String[];

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        i2 = virtualinvoke $r4.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r8, i0);

        r2 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        i3 = lengthof r1;

     label02:
        i5 = 0;

     label03:
        if i5 >= i3 goto label10;

        r3 = r1[i5];

     label04:
        $i4 = interfaceinvoke r2.<android.content.pm.IPackageManager: int checkPermission(java.lang.String,java.lang.String,int)>(r3, r8, i0);

        if $i4 != 0 goto label09;

        i6 = staticinvoke <android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>(r3);

     label05:
        if i6 == -1 goto label08;

     label06:
        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        i7 = virtualinvoke $r5.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(i6, i2, r8);

     label07:
        if i7 != 0 goto label09;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label09:
        i5 = i5 + 1;

        goto label03;

     label10:
        goto label13;

     label11:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

     label12:
        $r6 := @caughtexception;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label12;
        catch android.os.RemoteException from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label12;
        catch android.os.RemoteException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label12;
        catch android.os.RemoteException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label11;
    }

    private boolean isPreOApplication(java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        long l0;
        android.content.pm.PackageManager $r2;
        int $i1;
        java.lang.Throwable $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9, r10;
        boolean z0;
        android.content.pm.ApplicationInfo r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r10 := @parameter0: java.lang.String;

        z0 = 1;

     label01:
        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r11 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r10, 0);

     label03:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

     label04:
        if r11 == null goto label09;

     label05:
        $i1 = r11.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 >= 26 goto label07;

     label06:
        goto label08;

     label07:
        z0 = 0;

     label08:
        return z0;

     label09:
        return 1;

     label10:
        $r3 := @caughtexception;

     label11:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r3;

     label13:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found ");

        $r7 = virtualinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r9);

        return 1;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label13;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label13;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label13;
        catch android.content.pm.PackageManager$NameNotFoundException from label12 to label13 with label13;
    }

    private boolean isPrivileged(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        long l0;
        int i1, i2, $i3, i6, i7;
        android.content.pm.PackageManager $r2, $r3;
        android.content.pm.ApplicationInfo $r4;
        java.lang.String $r7, $r10, $r12, r16;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        java.lang.Throwable $r13;
        java.lang.String[] r14;
        java.lang.StringBuilder r15, r18;
        android.content.pm.PackageInfo r17;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i6 := @parameter0: int;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r14 = virtualinvoke $r2.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i6);

     label02:
        if r14 != null goto label05;

     label03:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No packages for callingUid ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r7 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r7);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label05:
        i1 = lengthof r14;

     label06:
        i7 = 0;

     label07:
        if i7 >= i1 goto label16;

        r16 = r14[i7];

     label08:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r17 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r16, 0);

     label09:
        if r17 == null goto label12;

     label10:
        $r4 = r17.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i2 = $r4.<android.content.pm.ApplicationInfo: int privateFlags>;

     label11:
        $i3 = i2 & 8;

        if $i3 == 0 goto label12;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label12:
        goto label15;

     label13:
        $r8 := @caughtexception;

     label14:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found ");

        $r10 = virtualinvoke $r8.<android.content.pm.PackageManager$NameNotFoundException: java.lang.String getMessage()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

     label15:
        i7 = i7 + 1;

        goto label07;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label17:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
    }

    private boolean isProfileOwner(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.app.admin.DevicePolicyManagerInternal r1;
        java.lang.Object $r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManagerInternal;");

        r1 = (android.app.admin.DevicePolicyManagerInternal) $r2;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.app.admin.DevicePolicyManagerInternal: boolean isActiveAdminWithPolicy(int,int)>(i0, -1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isSpecialPackageKey(java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = "android:accounts:key_legacy_visible";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r3 = "android:accounts:key_legacy_not_visible";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean isSystemUid(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        long l0;
        java.lang.String[] r1;
        int i1, i2, $i4, i6, i7;
        android.content.pm.PackageManager $r2, $r6;
        java.lang.String $r5, $r10, r12;
        android.content.pm.ApplicationInfo $r7;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        java.lang.Object[] $r9;
        java.lang.Throwable $r11;
        android.content.pm.PackageInfo r13;
        java.lang.StringBuilder r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i6 := @parameter0: int;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r2.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i6);

     label02:
        if r1 == null goto label14;

     label03:
        i1 = lengthof r1;

     label04:
        i7 = 0;

     label05:
        if i7 >= i1 goto label15;

        r12 = r1[i7];

     label06:
        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r13 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r12, 0);

     label07:
        if r13 == null goto label10;

     label08:
        $r7 = r13.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i2 = $r7.<android.content.pm.ApplicationInfo: int flags>;

     label09:
        $i4 = i2 & 1;

        if $i4 == 0 goto label10;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label10:
        goto label13;

     label11:
        $r8 := @caughtexception;

     label12:
        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r12;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find package [%s]", $r9);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", $r10, $r8);

     label13:
        i7 = i7 + 1;

        goto label05;

     label14:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No known packages with uid ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r5 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r5);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label16:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    private boolean isVisible(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        boolean z1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        z1 = 1;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static void lambda$grantAppPermission$3(android.accounts.AccountManagerInternal$OnAppPermissionChangeListener, android.accounts.Account, int)
    {
        android.accounts.AccountManagerInternal$OnAppPermissionChangeListener r0;
        android.accounts.Account r1;
        int i0;

        r0 := @parameter0: android.accounts.AccountManagerInternal$OnAppPermissionChangeListener;

        r1 := @parameter1: android.accounts.Account;

        i0 := @parameter2: int;

        interfaceinvoke r0.<android.accounts.AccountManagerInternal$OnAppPermissionChangeListener: void onAppPermissionChanged(android.accounts.Account,int)>(r1, i0);

        return;
    }

    static void lambda$revokeAppPermission$4(android.accounts.AccountManagerInternal$OnAppPermissionChangeListener, android.accounts.Account, int)
    {
        android.accounts.AccountManagerInternal$OnAppPermissionChangeListener r0;
        android.accounts.Account r1;
        int i0;

        r0 := @parameter0: android.accounts.AccountManagerInternal$OnAppPermissionChangeListener;

        r1 := @parameter1: android.accounts.Account;

        i0 := @parameter2: int;

        interfaceinvoke r0.<android.accounts.AccountManagerInternal$OnAppPermissionChangeListener: void onAppPermissionChanged(android.accounts.Account,int)>(r1, i0);

        return;
    }

    private void logRecord(com.android.server.accounts.AccountManagerService$UserAccounts, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.String r2, r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts)>(r2, r3, -1L, r1);

        return;
    }

    private void logRecord(java.lang.String, java.lang.String, long, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2;
        long l0;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        int $i1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r3 := @parameter3: com.android.server.accounts.AccountManagerService$UserAccounts;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>(r1, r2, l0, r3, $i1);

        return;
    }

    private void logRecord(java.lang.String, java.lang.String, long, com.android.server.accounts.AccountManagerService$UserAccounts, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r6;
        long l0, l2;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        int i1;
        com.android.server.accounts.AccountsDb $r3;
        byte $b3;
        com.android.server.accounts.AccountManagerService$1LogRecordTask $r4;
        com.android.server.accounts.AccountManagerService$MessageHandler $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r2 := @parameter3: com.android.server.accounts.AccountManagerService$UserAccounts;

        i1 := @parameter4: int;

        $r3 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l2 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb: long reserveDebugDbInsertionPoint()>();

        $b3 = l2 cmp -1L;

        if $b3 == 0 goto label1;

        $r4 = new com.android.server.accounts.AccountManagerService$1LogRecordTask;

        specialinvoke $r4.<com.android.server.accounts.AccountManagerService$1LogRecordTask: void <init>(com.android.server.accounts.AccountManagerService,java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int,long)>(r0, r6, r1, l0, r2, i1, l2);

        $r5 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler>;

        virtualinvoke $r5.<com.android.server.accounts.AccountManagerService$MessageHandler: boolean post(java.lang.Runnable)>($r4);

        goto label1;

     label1:
        return;
    }

    private void logRecordWithUid(com.android.server.accounts.AccountManagerService$UserAccounts, java.lang.String, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.String r2, r3;
        int i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>(r2, r3, -1L, r1, i0);

        return;
    }

    private boolean needToStartChooseAccountActivity(android.accounts.Account[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account[] r1;
        java.lang.String r2;
        int $i0, $i1, $i2, $i3;
        android.accounts.Account $r3;
        com.android.server.accounts.AccountManagerService$UserAccounts $r4;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account[];

        r2 := @parameter1: java.lang.String;

        $i0 = lengthof r1;

        if $i0 >= 1 goto label1;

        return 0;

     label1:
        $i1 = lengthof r1;

        if $i1 <= 1 goto label2;

        return 1;

     label2:
        $r3 = r1[0];

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i2);

        $r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>($r3, r2, $r4);

        $i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i3 != 4 goto label3;

        return 1;

     label3:
        return 0;
    }

    private android.content.Intent newGrantCredentialsPermissionIntent(android.accounts.Account, java.lang.String, int, android.accounts.AccountAuthenticatorResponse, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0;
        android.accounts.AccountAuthenticatorResponse r2;
        java.lang.String r3, $r10, $r13, r20;
        boolean z0;
        android.content.Intent $r6;
        android.content.Context $r7;
        java.lang.StringBuilder $r8;
        com.android.server.accounts.AccountManagerService$NotificationId $r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r20 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: android.accounts.AccountAuthenticatorResponse;

        r3 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        $r6 = new android.content.Intent;

        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        specialinvoke $r6.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r7, class "Landroid/accounts/GrantCredentialsPermissionActivity;");

        if z0 == 0 goto label1;

        virtualinvoke $r6.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, r3, i0);

        $r10 = $r9.<com.android.server.accounts.AccountManagerService$NotificationId: java.lang.String mTag>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        if r20 == null goto label2;

        goto label3;

     label2:
        r20 = "";

     label3:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>($r13);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("account", r1);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("authTokenType", r3);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("response", r2);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("uid", i0);

        return $r6;
    }

    private android.content.Intent newRequestAccountAccessIntent(android.accounts.Account, java.lang.String, int, android.os.RemoteCallback)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0;
        android.os.RemoteCallback r3;
        android.accounts.AccountAuthenticatorResponse $r4;
        com.android.server.accounts.AccountManagerService$18 $r5;
        android.content.Intent $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.RemoteCallback;

        $r4 = new android.accounts.AccountAuthenticatorResponse;

        $r5 = new com.android.server.accounts.AccountManagerService$18;

        specialinvoke $r5.<com.android.server.accounts.AccountManagerService$18: void <init>(com.android.server.accounts.AccountManagerService,android.accounts.Account,int,java.lang.String,android.os.RemoteCallback)>(r0, r1, i0, r2, r3);

        specialinvoke $r4.<android.accounts.AccountAuthenticatorResponse: void <init>(android.accounts.IAccountAuthenticatorResponse)>($r5);

        $r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Intent newGrantCredentialsPermissionIntent(android.accounts.Account,java.lang.String,int,android.accounts.AccountAuthenticatorResponse,java.lang.String,boolean)>(r1, r2, i0, $r4, "com.android.AccountManager.ACCOUNT_ACCESS_TOKEN_TYPE", 0);

        return $r6;
    }

    private void notifyPackage(java.lang.String, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        android.content.Intent $r4;
        android.os.UserHandle $r7;
        android.content.Context $r8;
        int $i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.accounts.action.VISIBLE_ACCOUNTS_CHANGED");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        $r8 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r7 = new android.os.UserHandle;

        $i0 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>($i0);

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r7);

        return;
    }

    private void onResult(android.accounts.IAccountManagerResponse, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.Bundle r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r9;
        java.lang.Exception $r10;
        android.os.RemoteException $r11;
        android.accounts.IAccountManagerResponse r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.os.Bundle;

        if r1 != null goto label1;

        $r10 = new java.lang.Exception;

        specialinvoke $r10.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "the result is unexpectedly null", $r10);

     label1:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" calling onResult() on response ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r9);

     label2:
        interfaceinvoke r12.<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>(r1);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label5;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "failure while notifying response", $r11);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private boolean packageExistsForUser(java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        long l1;
        android.content.pm.PackageManager $r1;
        java.lang.Throwable $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        virtualinvoke $r1.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r4, i0);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

     label4:
        return 1;

     label5:
        $r2 := @caughtexception;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

     label7:
        throw $r2;

     label8:
        $r3 := @caughtexception;

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label8;
        catch android.content.pm.PackageManager$NameNotFoundException from label6 to label7 with label8;
        catch android.content.pm.PackageManager$NameNotFoundException from label7 to label8 with label8;
    }

    private boolean permissionIsGranted(android.accounts.Account, java.lang.String, int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r2, $r8, $r16, $r23, $r30;
        java.lang.String $r7, $r14, $r15, $r22, $r29, $r34, r35;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r35 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i2 != 1000 goto label2;

        $z7 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z7 == 0 goto label1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access to ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" granted calling uid is system");

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r34);

     label1:
        return 1;

     label2:
        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isPrivileged(int)>(i0);

        if $z0 == 0 goto label4;

        $z6 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z6 == 0 goto label3;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access to ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" granted calling uid ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" privileged");

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r29);

     label3:
        return 1;

     label4:
        if r1 == null goto label6;

        $r15 = r1.<android.accounts.Account: java.lang.String type>;

        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r15, i0, i1);

        if $z4 == 0 goto label6;

        $z5 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z5 == 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access to ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" granted calling uid ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" manages the account");

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r22);

     label5:
        return 1;

     label6:
        if r1 == null goto label8;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasExplicitlyGrantedPermission(android.accounts.Account,java.lang.String,int)>(r1, r35, i0);

        if $z2 == 0 goto label8;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z3 == 0 goto label7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access to ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" granted calling uid ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user granted access");

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r14);

     label7:
        return 1;

     label8:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label9;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access to ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not granted for uid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r7);

     label9:
        return 0;
    }

    private void purgeOldGrants(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.Object r1, r2, $r7;
        java.util.Iterator r3;
        int i0;
        java.lang.StringBuilder r4;
        com.android.server.accounts.AccountsDb $r5, $r15;
        java.util.List $r6;
        java.lang.Integer $r8;
        android.content.pm.PackageManager $r9;
        java.lang.String[] $r10;
        java.lang.String $r14;
        java.lang.Throwable $r16, $r17;
        com.android.server.accounts.AccountManagerService$UserAccounts r18;
        boolean $z1, z2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r18 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r1;

     label01:
        r2 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r2;

     label02:
        $r5 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $r6 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb: java.util.List findAllUidGrants()>();

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $r10 = virtualinvoke $r9.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if $r10 == null goto label05;

     label04:
        z2 = 1;

        goto label06;

     label05:
        z2 = 0;

     label06:
        if z2 == 0 goto label07;

        goto label03;

     label07:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleting grants for UID ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because its package is no longer installed");

        $r14 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r14);

        $r15 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r15.<com.android.server.accounts.AccountsDb: boolean deleteGrantsByUid(int)>(i0);

     label08:
        goto label03;

     label09:
        exitmonitor r2;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r16 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r16;

     label15:
        $r17 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void purgeOldGrantsAll()
    {
        com.android.server.accounts.AccountManagerService r0;
        android.util.SparseArray r1, $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.accounts.AccountManagerService$UserAccounts $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        entermonitor r1;

        i1 = 0;

     label1:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r6 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r5;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void purgeOldGrants(com.android.server.accounts.AccountManagerService$UserAccounts)>($r6);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void purgeUserData(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.util.SparseArray $r1, $r3, r10;
        java.lang.Object $r2, r12, r13;
        android.util.SparseBooleanArray $r4;
        com.android.server.accounts.AccountsDb $r5, $r6;
        java.lang.Throwable $r7, $r8, $r9;
        com.android.server.accounts.AccountManagerService$UserAccounts r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r10 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        entermonitor r10;

     label01:
        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r11 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r2;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray mLocalUnlockedUsers>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void delete(int)>(i0);

        exitmonitor r10;

     label02:
        if r11 == null goto label13;

        r12 = r11.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r12;

     label03:
        r13 = r11.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r13;

     label04:
        $r5 = r11.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r5.<com.android.server.accounts.AccountsDb: void closeDebugStatement()>();

        $r6 = r11.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r6.<com.android.server.accounts.AccountsDb: void close()>();

        exitmonitor r13;

     label05:
        exitmonitor r12;

     label06:
        goto label13;

     label07:
        $r7 := @caughtexception;

     label08:
        exitmonitor r13;

     label09:
        throw $r7;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r12;

     label12:
        throw $r8;

     label13:
        return;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r10;

     label16:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private java.lang.String readPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.Object r1, r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.String $r3, $r4, $r10, r16;
        com.android.server.accounts.AccountsDb $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r11, $r12;
        com.android.server.accounts.AccountManagerService$UserAccounts r13;
        android.accounts.Account r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r13 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r14 := @parameter1: android.accounts.Account;

        if r14 != null goto label01;

        return null;

     label01:
        $i0 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r13);

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>($i0);

        if $z0 != 0 goto label02;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Password is not available - user ");

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r13);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data is locked");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r10);

        return null;

     label02:
        r1 = r13.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r1;

     label03:
        r2 = r13.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r2;

     label04:
        $r5 = r13.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $r4 = r14.<android.accounts.Account: java.lang.String name>;

        $r3 = r14.<android.accounts.Account: java.lang.String type>;

        r16 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb: java.lang.String findAccountPasswordByNameAndType(java.lang.String,java.lang.String)>($r4, $r3);

        exitmonitor r2;

     label05:
        exitmonitor r1;

     label06:
        return r16;

     label07:
        $r11 := @caughtexception;

     label08:
        exitmonitor r2;

     label09:
        throw $r11;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r12;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private java.lang.String readPreviousNameInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.Object r2, r3, $r6, $r7;
        java.lang.String r4, r16;
        java.util.HashMap $r5, $r9;
        com.android.server.accounts.AccountsDb $r8;
        java.lang.Throwable $r11, $r12;
        com.android.server.accounts.AccountManagerService$UserAccounts r13;
        java.util.concurrent.atomic.AtomicReference r14, r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r13 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        if r1 != null goto label01;

        return null;

     label01:
        r2 = r13.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r2;

     label02:
        r3 = r13.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label03:
        $r5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r13);

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r14 = (java.util.concurrent.atomic.AtomicReference) $r6;

     label04:
        if r14 != null goto label08;

     label05:
        $r8 = r13.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r4 = virtualinvoke $r8.<com.android.server.accounts.AccountsDb: java.lang.String findDeAccountPreviousName(android.accounts.Account)>(r1);

        r15 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r15.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r4);

        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r13);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r15);

        exitmonitor r3;

     label06:
        exitmonitor r2;

     label07:
        return r4;

     label08:
        $r7 = virtualinvoke r14.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r16 = (java.lang.String) $r7;

        exitmonitor r3;

     label09:
        exitmonitor r2;

     label10:
        return r16;

     label11:
        $r12 := @caughtexception;

     label12:
        exitmonitor r3;

     label13:
        throw $r12;

     label14:
        $r11 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private java.lang.String readUserDataInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r8;
        java.lang.Object r3, r4, $r6, $r7, $r10, r18;
        java.util.Map $r5, $r9, $r12, r19, r20, r21;
        com.android.server.accounts.AccountsDb $r11;
        java.lang.Throwable $r14, $r15, $r16;
        com.android.server.accounts.AccountManagerService$UserAccounts r17;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r17 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        r18 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r18;

     label01:
        $r5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r17);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r19 = (java.util.Map) $r6;

        exitmonitor r18;

     label02:
        r20 = r19;

        if r19 != null goto label16;

        r3 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r3;

     label03:
        r4 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r4;

     label04:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r17);

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r21 = (java.util.Map) $r10;

     label05:
        r20 = r21;

        if r21 != null goto label07;

     label06:
        $r11 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r20 = virtualinvoke $r11.<com.android.server.accounts.AccountsDb: java.util.Map findUserExtrasForAccount(android.accounts.Account)>(r1);

        $r12 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r17);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r20);

     label07:
        exitmonitor r4;

     label08:
        exitmonitor r3;

     label09:
        goto label16;

     label10:
        $r15 := @caughtexception;

     label11:
        exitmonitor r4;

     label12:
        throw $r15;

     label13:
        $r16 := @caughtexception;

     label14:
        exitmonitor r3;

     label15:
        throw $r16;

     label16:
        $r7 = interfaceinvoke r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (java.lang.String) $r7;

        return $r8;

     label17:
        $r14 := @caughtexception;

     label18:
        exitmonitor r18;

     label19:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void registerAccountListener(java.lang.String[], java.lang.String, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r4;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.util.Map r3, $r5, $r10, r16, r21, r22;
        int i0, $i1, i2, i3;
        java.lang.Object $r6, $r7, r17;
        java.lang.Integer $r8, r18;
        java.lang.String[] $r12, r14, r15;
        java.lang.Throwable $r13;
        java.util.HashMap r20;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r14 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.server.accounts.AccountManagerService$UserAccounts;

        r3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        entermonitor r3;

        r15 = r14;

        if r14 != null goto label02;

     label01:
        $r12 = newarray (java.lang.String)[1];

        $r12[0] = null;

        r15 = $r12;

     label02:
        i0 = lengthof r15;

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label14;

        r4 = r15[i2];

     label05:
        $r5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r16 = (java.util.Map) $r6;

     label06:
        r17 = r16;

        if r16 != null goto label09;

     label07:
        r20 = new java.util.HashMap;

        r17 = r20;

        specialinvoke r20.<java.util.HashMap: void <init>()>();

     label08:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r20);

     label09:
        r21 = (java.util.Map) r17;

        $r7 = interfaceinvoke r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r18 = (java.lang.Integer) $r7;

     label10:
        i3 = 1;

        if r18 == null goto label12;

     label11:
        $i1 = virtualinvoke r18.<java.lang.Integer: int intValue()>();

        i3 = 1 + $i1;

     label12:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        r22 = (java.util.Map) r17;

        interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

     label13:
        i2 = i2 + 1;

        goto label04;

     label14:
        exitmonitor r3;

     label15:
        return;

     label16:
        $r13 := @caughtexception;

     label17:
        exitmonitor r3;

     label18:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2, r4;
        android.accounts.Account[] r3, $r13, r22;
        int i0, $i1, i2;
        java.lang.String $r5, $r15, $r18;
        java.util.HashMap $r6, $r16, $r19, $r25;
        java.lang.Object $r7;
        java.util.ArrayList $r12;
        boolean $z0, $z1;
        java.lang.Object[] $r14;
        java.util.Map $r23, $r24, $r26;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        $r6 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r5 = r2.<android.accounts.Account: java.lang.String type>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (android.accounts.Account[]) $r7;

        if r3 == null goto label5;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = r3[i2];

        $z1 = virtualinvoke r4.<android.accounts.Account: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke $r12.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r19 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r18 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r18);

        goto label5;

     label4:
        $i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        $r13 = newarray (android.accounts.Account)[$i1];

        $r14 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        r22 = (android.accounts.Account[]) $r14;

        $r16 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r15 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r22);

     label5:
        $r23 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r24 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        interfaceinvoke $r24.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r25 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r25.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        $r26 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        return;
    }

    private boolean removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z9, $z10, z12;
        long l0, l14, l15;
        java.util.Map$Entry r1;
        int i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i11, i13, i16;
        com.android.server.accounts.AccountsDb $r2, $r3, $r29, $r30, $r31, $r60, $r61, $r76;
        byte $b4, $b10;
        java.util.HashMap $r4, r69;
        java.util.Set $r5, $r19;
        java.lang.Object $r6, $r7, $r9, $r10, $r12, $r14, $r18, $r20, $r22, $r23, $r25, $r27, r55, r56;
        android.util.Pair $r8, $r11, r71;
        java.lang.String $r13, $r21, $r26, $r34, $r39, r64;
        java.lang.Integer $r15, $r24, $r28;
        android.os.UserManager $r16;
        java.util.List $r17, r58;
        java.lang.StringBuilder $r32;
        java.lang.Throwable $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, r59, r65, r68, r75;
        com.android.server.accounts.AccountManagerService$UserAccounts r52;
        android.accounts.Account r53;
        java.util.Map r57;
        java.util.Iterator r62, r63, r66, r70;
        android.content.pm.UserInfo r67;
        com.android.server.accounts.AccountManagerService$MessageHandler r72;
        com.android.server.accounts._$$Lambda$AccountManagerService$lqbNdAUKUSipmpqby9oIO8JlNTQ r73;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r52 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r53 := @parameter1: android.accounts.Account;

        i13 := @parameter2: int;

        $i3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>($i3);

        if z0 != 0 goto label01;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing account ");

        $r34 = virtualinvoke r53.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while user ");

        $i11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is still locked. CE data will be removed later");

        $r39 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AccountManagerService", $r39);

     label01:
        r55 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r55;

     label02:
        r56 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r56;

     label03:
        r57 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getRequestingPackages(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r53, r52);

     label04:
        r58 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getAccountRemovedReceivers(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r53, r52);

        $r2 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r2.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label05:
        $r3 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l0 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r53);

     label06:
        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label10;

     label07:
        $r31 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        z12 = virtualinvoke $r31.<com.android.server.accounts.AccountsDb: boolean deleteDeAccount(long)>(l0);

     label08:
        goto label11;

     label09:
        $r42 := @caughtexception;

        r59 = $r42;

        goto label62;

     label10:
        z12 = 0;

     label11:
        if z0 == 0 goto label17;

     label12:
        $r29 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l14 = virtualinvoke $r29.<com.android.server.accounts.AccountsDb: long findCeAccountId(android.accounts.Account)>(r53);

     label13:
        $b10 = l14 cmp 0L;

        if $b10 < 0 goto label17;

     label14:
        $r30 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r30.<com.android.server.accounts.AccountsDb: boolean deleteCeAccount(long)>(l14);

     label15:
        goto label17;

     label16:
        $r41 := @caughtexception;

        r59 = $r41;

        goto label62;

     label17:
        $r60 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r60.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label18:
        $r61 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r61.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label19:
        if z12 == 0 goto label35;

     label20:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r52, r53);

     label21:
        $r19 = interfaceinvoke r57.<java.util.Map: java.util.Set entrySet()>();

        r62 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z9 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label25;

        $r22 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r22;

        $r23 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = (java.lang.Integer) $r23;

        $i8 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        if $i8 == 1 goto label23;

        $r27 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r28 = (java.lang.Integer) $r27;

        $i9 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();

        if $i9 != 2 goto label24;

     label23:
        $r25 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.String) $r25;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void notifyPackage(java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>($r26, r52);

     label24:
        goto label22;

     label25:
        $i6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i6);

        r63 = interfaceinvoke r58.<java.util.List: java.util.Iterator iterator()>();

     label26:
        $z10 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label28;

        $r20 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.lang.String) $r20;

        $i7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountRemovedBroadcast(android.accounts.Account,java.lang.String,int)>(r53, $r21, $i7);

     label27:
        goto label26;

     label28:
        if z0 == 0 goto label31;

     label29:
        r64 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_REMOVE>;

     label30:
        goto label32;

     label31:
        r64 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_REMOVE_DE>;

     label32:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts)>(r64, "accounts", l0, r52);

     label33:
        goto label35;

     label34:
        $r46 := @caughtexception;

        r65 = $r46;

        goto label59;

     label35:
        exitmonitor r56;

     label36:
        exitmonitor r55;

     label37:
        l15 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label38:
        i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canHaveProfile(int)>(i1);

        if $z1 == 0 goto label45;

        $r16 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r17 = virtualinvoke $r16.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        r66 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label39:
        $z6 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label44;

        $r18 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        r67 = (android.content.pm.UserInfo) $r18;

        $z7 = virtualinvoke r67.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z7 == 0 goto label43;

        $i5 = r67.<android.content.pm.UserInfo: int restrictedProfileParentId>;

        if i1 != $i5 goto label43;

        i2 = r67.<android.content.pm.UserInfo: int id>;

     label40:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeSharedAccountAsUser(android.accounts.Account,int,int)>(r53, i2, i13);

     label41:
        goto label43;

     label42:
        $r45 := @caughtexception;

        r68 = $r45;

        goto label56;

     label43:
        goto label39;

     label44:
        goto label45;

     label45:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

        if z12 == 0 goto label54;

        r69 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        entermonitor r69;

     label46:
        $r4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r52);

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set keySet()>();

        r70 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label47:
        $z2 = interfaceinvoke r70.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label49;

        $r6 = interfaceinvoke r70.<java.util.Iterator: java.lang.Object next()>();

        r71 = (android.util.Pair) $r6;

        $r7 = r71.<android.util.Pair: java.lang.Object first>;

        $r8 = (android.util.Pair) $r7;

        $r9 = $r8.<android.util.Pair: java.lang.Object first>;

        $z3 = virtualinvoke r53.<android.accounts.Account: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label48;

        $r13 = "com.android.AccountManager.ACCOUNT_ACCESS_TOKEN_TYPE";

        $r10 = r71.<android.util.Pair: java.lang.Object first>;

        $r11 = (android.util.Pair) $r10;

        $r12 = $r11.<android.util.Pair: java.lang.Object second>;

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label48;

        $r14 = r71.<android.util.Pair: java.lang.Object second>;

        $r15 = (java.lang.Integer) $r14;

        i16 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        r72 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler>;

        r73 = new com.android.server.accounts._$$Lambda$AccountManagerService$lqbNdAUKUSipmpqby9oIO8JlNTQ;

        specialinvoke r73.<com.android.server.accounts._$$Lambda$AccountManagerService$lqbNdAUKUSipmpqby9oIO8JlNTQ: void <init>(com.android.server.accounts.AccountManagerService,android.accounts.Account,int)>(r0, r53, i16);

        virtualinvoke r72.<com.android.server.accounts.AccountManagerService$MessageHandler: boolean post(java.lang.Runnable)>(r73);

     label48:
        goto label47;

     label49:
        exitmonitor r69;

     label50:
        goto label54;

     label51:
        $r50 := @caughtexception;

     label52:
        exitmonitor r69;

     label53:
        throw $r50;

     label54:
        return z12;

     label55:
        $r48 := @caughtexception;

        r68 = $r48;

     label56:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

        throw r68;

     label57:
        $r47 := @caughtexception;

        r75 = $r47;

        goto label68;

     label58:
        $r40 := @caughtexception;

        r65 = $r40;

     label59:
        goto label65;

     label60:
        $r49 := @caughtexception;

        r59 = $r49;

        goto label62;

     label61:
        $r44 := @caughtexception;

        r59 = $r44;

     label62:
        $r76 = r52.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r76.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label63:
        throw r59;

     label64:
        $r51 := @caughtexception;

        r65 = $r51;

     label65:
        exitmonitor r56;

     label66:
        throw r65;

     label67:
        $r43 := @caughtexception;

        r75 = $r43;

     label68:
        exitmonitor r55;

     label69:
        throw r75;

        catch java.lang.Throwable from label02 to label03 with label67;
        catch java.lang.Throwable from label03 to label04 with label64;
        catch java.lang.Throwable from label04 to label05 with label64;
        catch java.lang.Throwable from label05 to label06 with label61;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label60;
        catch java.lang.Throwable from label18 to label19 with label58;
        catch java.lang.Throwable from label20 to label21 with label34;
        catch java.lang.Throwable from label21 to label22 with label34;
        catch java.lang.Throwable from label22 to label23 with label34;
        catch java.lang.Throwable from label23 to label24 with label34;
        catch java.lang.Throwable from label25 to label26 with label34;
        catch java.lang.Throwable from label26 to label27 with label34;
        catch java.lang.Throwable from label29 to label30 with label34;
        catch java.lang.Throwable from label31 to label32 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.lang.Throwable from label35 to label36 with label58;
        catch java.lang.Throwable from label36 to label37 with label57;
        catch java.lang.Throwable from label38 to label39 with label55;
        catch java.lang.Throwable from label39 to label40 with label55;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label46 to label47 with label51;
        catch java.lang.Throwable from label47 to label48 with label51;
        catch java.lang.Throwable from label49 to label50 with label51;
        catch java.lang.Throwable from label52 to label53 with label51;
        catch java.lang.Throwable from label62 to label63 with label64;
        catch java.lang.Throwable from label63 to label64 with label64;
        catch java.lang.Throwable from label65 to label66 with label64;
        catch java.lang.Throwable from label66 to label67 with label67;
        catch java.lang.Throwable from label68 to label69 with label67;
    }

    private boolean removeSharedAccountAsUser(android.accounts.Account, int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, i1, $i3;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        long l2;
        boolean z0;
        com.android.server.accounts.AccountsDb $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i3);

        $r3 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l2 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb: long findSharedAccountId(android.accounts.Account)>(r1);

        $r4 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        z0 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb: boolean deleteSharedAccount(android.accounts.Account)>(r1);

        if z0 == 0 goto label1;

        $r5 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_REMOVE>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>($r5, "shared_accounts", l2, r2, i1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,int)>(r2, r1, i1);

     label1:
        return z0;
    }

    private void removeVisibilityValuesForPackage(java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.util.SparseArray r1, $r6, $r7;
        int i0, $i1, i3;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.lang.Object r3, $r8, $r16, r22;
        java.util.Iterator r4;
        android.accounts.Account r5;
        boolean $z0, $z2;
        android.content.pm.PackageManager $r9;
        java.lang.Throwable $r10, $r11, $r19;
        android.content.pm.PackageManager$NameNotFoundException $r12;
        com.android.server.accounts.AccountsDb $r13;
        java.util.Map $r14, $r17;
        java.util.Set $r15;
        java.lang.String r20;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r20 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSpecialPackageKey(java.lang.String)>(r20);

        if $z0 == 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        entermonitor r1;

     label02:
        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        i0 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

     label03:
        i3 = 0;

     label04:
        if i3 >= i0 goto label24;

     label05:
        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r2 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r8;

     label06:
        $r9 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        virtualinvoke $r9.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r20, $i1);

     label07:
        goto label17;

     label08:
        $r12 := @caughtexception;

     label09:
        $r13 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r13.<com.android.server.accounts.AccountsDb: boolean deleteAccountVisibilityForPackage(java.lang.String)>(r20);

        r22 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r22;

     label10:
        r3 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label11:
        $r14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.accounts.Account) $r16;

     label13:
        $r17 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r5, r2);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r20);

     label14:
        goto label12;

     label15:
        exitmonitor r3;

     label16:
        exitmonitor r22;

     label17:
        i3 = i3 + 1;

        goto label04;

     label18:
        $r10 := @caughtexception;

     label19:
        exitmonitor r3;

     label20:
        throw $r10;

     label21:
        $r19 := @caughtexception;

     label22:
        exitmonitor r22;

     label23:
        throw $r19;

     label24:
        exitmonitor r1;

     label25:
        return;

     label26:
        $r11 := @caughtexception;

     label27:
        exitmonitor r1;

     label28:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private android.accounts.Account renameAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.util.List r1, $r34;
        long l0, $l3;
        int i1, $i2, $i8, $i9, $i10, $i11, $i13;
        com.android.server.accounts.AccountManagerService$NotificationId $r2, r54;
        android.os.UserHandle $r3, r55;
        java.util.HashMap $r4, $r41, r51, r63;
        java.util.Set $r5;
        boolean $z0, $z2, $z3, $z4, $z5, $z7, $z8;
        com.android.server.accounts.AccountsDb $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r36, $r47;
        java.lang.String $r7, $r12, $r29, $r32, r50;
        byte $b4, $b5;
        java.util.Map $r17, $r19, $r21, $r23, $r25, $r27, r60, r61, r62;
        java.lang.Object $r18, $r20, $r22, $r31, $r35, $r37, $r38, $r40, $r42, r56, r57;
        android.os.UserManager $r33;
        android.util.Pair $r39, r53;
        java.lang.Throwable $r43, $r44, $r45, $r46;
        com.android.server.accounts.AccountManagerService$UserAccounts r48;
        android.accounts.Account r49, r58, r59;
        java.util.Iterator r52, r65, r68;
        java.util.concurrent.atomic.AtomicReference r64;
        android.content.pm.UserInfo r67;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r48 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r49 := @parameter1: android.accounts.Account;

        r50 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r48, r49);

        $r3 = new android.os.UserHandle;

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        specialinvoke $r3.<android.os.UserHandle: void <init>(int)>($i2);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>($r2, $r3);

        r51 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        entermonitor r51;

     label01:
        $r4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set keySet()>();

        r52 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r37 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        r53 = (android.util.Pair) $r37;

        $r38 = r53.<android.util.Pair: java.lang.Object first>;

        $r39 = (android.util.Pair) $r38;

        $r40 = $r39.<android.util.Pair: java.lang.Object first>;

        $z7 = virtualinvoke r49.<android.accounts.Account: boolean equals(java.lang.Object)>($r40);

        if $z7 == 0 goto label03;

        $r41 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        $r42 = virtualinvoke $r41.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r53);

        r54 = (com.android.server.accounts.AccountManagerService$NotificationId) $r42;

        r55 = new android.os.UserHandle;

        $i13 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        specialinvoke r55.<android.os.UserHandle: void <init>(int)>($i13);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>(r54, r55);

     label03:
        goto label02;

     label04:
        exitmonitor r51;

     label05:
        r56 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r56;

     label06:
        r57 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r57;

     label07:
        r1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getAccountRemovedReceivers(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r49, r48);

        $r6 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r6.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

        r58 = new android.accounts.Account;

        $r7 = r49.<android.accounts.Account: java.lang.String type>;

        specialinvoke r58.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r50, $r7);

     label08:
        $r8 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $l3 = virtualinvoke $r8.<com.android.server.accounts.AccountsDb: long findCeAccountId(android.accounts.Account)>(r58);

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManagerService", "renameAccount failed - account with new name already exists");

     label09:
        $r36 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r36.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r57;

     label10:
        exitmonitor r56;

     label11:
        return null;

     label12:
        $r9 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l0 = virtualinvoke $r9.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r49);

     label13:
        $b5 = l0 cmp 0L;

        if $b5 < 0 goto label31;

     label14:
        $r11 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r11.<com.android.server.accounts.AccountsDb: boolean renameCeAccount(long,java.lang.String)>(l0, r50);

        $r13 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $r12 = r49.<android.accounts.Account: java.lang.String name>;

        $z2 = virtualinvoke $r13.<com.android.server.accounts.AccountsDb: boolean renameDeAccount(long,java.lang.String,java.lang.String)>(l0, r50, $r12);

        if $z2 == 0 goto label27;

        $r15 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r15.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label15:
        $r16 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r16.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label16:
        r59 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r48, r58);

        $r17 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r49);

        r60 = (java.util.Map) $r18;

        $r19 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r49);

        r61 = (java.util.Map) $r20;

        $r21 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        $r22 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r49);

        r62 = (java.util.Map) $r22;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r48, r49);

        $r23 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r60);

        $r25 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r61);

        $r27 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r62);

        r63 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        r64 = new java.util.concurrent.atomic.AtomicReference;

        $r29 = r49.<android.accounts.Account: java.lang.String name>;

        specialinvoke r64.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r29);

        virtualinvoke r63.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r64);

        i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canHaveProfile(int)>(i1);

        if $z3 == 0 goto label21;

        $r33 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r34 = virtualinvoke $r33.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        r65 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z4 = interfaceinvoke r65.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label20;

        $r35 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        r67 = (android.content.pm.UserInfo) $r35;

        $z5 = virtualinvoke r67.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z5 == 0 goto label19;

        $i10 = r67.<android.content.pm.UserInfo: int restrictedProfileParentId>;

        if $i10 != i1 goto label19;

        $i11 = r67.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: boolean renameSharedAccountAsUser(android.accounts.Account,java.lang.String,int)>(r49, r50, $i11);

     label18:
        goto label19;

     label19:
        goto label17;

     label20:
        goto label21;

     label21:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendNotificationAccountUpdated(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r59, r48);

        $i8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i8);

        r68 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z8 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label24;

        $r31 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        $r32 = (java.lang.String) $r31;

        $i9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r48);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountRemovedBroadcast(android.accounts.Account,java.lang.String,int)>(r49, $r32, $i9);

     label23:
        goto label22;

     label24:
        exitmonitor r57;

     label25:
        exitmonitor r56;

     label26:
        return r59;

     label27:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManagerService", "renameAccount failed");

     label28:
        $r14 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r14.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r57;

     label29:
        exitmonitor r56;

     label30:
        return null;

     label31:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManagerService", "renameAccount failed - old account does not exist");

     label32:
        $r10 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r10.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r57;

     label33:
        exitmonitor r56;

     label34:
        return null;

     label35:
        $r46 := @caughtexception;

     label36:
        $r47 = r48.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r47.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label37:
        throw $r46;

     label38:
        $r43 := @caughtexception;

     label39:
        exitmonitor r57;

     label40:
        throw $r43;

     label41:
        $r44 := @caughtexception;

     label42:
        exitmonitor r56;

     label43:
        throw $r44;

     label44:
        $r45 := @caughtexception;

     label45:
        exitmonitor r51;

     label46:
        throw $r45;

        catch java.lang.Throwable from label01 to label02 with label44;
        catch java.lang.Throwable from label02 to label03 with label44;
        catch java.lang.Throwable from label04 to label05 with label44;
        catch java.lang.Throwable from label06 to label07 with label41;
        catch java.lang.Throwable from label07 to label08 with label38;
        catch java.lang.Throwable from label08 to label09 with label35;
        catch java.lang.Throwable from label09 to label10 with label38;
        catch java.lang.Throwable from label10 to label11 with label41;
        catch java.lang.Throwable from label12 to label13 with label35;
        catch java.lang.Throwable from label14 to label15 with label35;
        catch java.lang.Throwable from label15 to label16 with label38;
        catch java.lang.Throwable from label16 to label17 with label38;
        catch java.lang.Throwable from label17 to label18 with label38;
        catch java.lang.Throwable from label21 to label22 with label38;
        catch java.lang.Throwable from label22 to label23 with label38;
        catch java.lang.Throwable from label24 to label25 with label38;
        catch java.lang.Throwable from label25 to label26 with label41;
        catch java.lang.Throwable from label27 to label28 with label35;
        catch java.lang.Throwable from label28 to label29 with label38;
        catch java.lang.Throwable from label29 to label30 with label41;
        catch java.lang.Throwable from label31 to label32 with label35;
        catch java.lang.Throwable from label32 to label33 with label38;
        catch java.lang.Throwable from label33 to label34 with label41;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label37 to label38 with label38;
        catch java.lang.Throwable from label39 to label40 with label38;
        catch java.lang.Throwable from label40 to label41 with label41;
        catch java.lang.Throwable from label42 to label43 with label41;
        catch java.lang.Throwable from label45 to label46 with label44;
    }

    private java.lang.Integer resolveAccountVisibility(android.accounts.Account, java.lang.String, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        long l0;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, i11, i12, i13;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4, $r6, $r14, $r16, r20;
        java.lang.String[] $r5;
        java.lang.Integer $r7, $r8, $r9, $r10, $r17, $r21;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        java.lang.StringBuilder $r12;
        java.lang.Throwable $r18;
        android.accounts.Account r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r19 := @parameter0: android.accounts.Account;

        r20 := @parameter1: java.lang.String;

        r1 := @parameter2: com.android.server.accounts.AccountManagerService$UserAccounts;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r20, "packageName cannot be null");

     label01:
        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        i9 = virtualinvoke $r3.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r20, $i2);

     label03:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

     label04:
        $z2 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i9, 1000);

        if $z2 == 0 goto label05;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r10;

     label05:
        $r4 = r19.<android.accounts.Account: java.lang.String type>;

        $i3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        i10 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int checkPackageSignature(java.lang.String,int,int)>($r4, i9, $i3);

        if i10 != 2 goto label06;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r9;

     label06:
        i1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int getAccountVisibilityFromCache(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r19, r20, r1);

        if i1 == 0 goto label07;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        return $r8;

     label07:
        $i4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "android.permission.GET_ACCOUNTS_PRIVILEGED";

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isPermittedForPackage(java.lang.String,int,java.lang.String[])>(r20, $i4, $r5);

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isProfileOwner(int)>(i9);

        if $z3 == 0 goto label08;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r7;

     label08:
        z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isPreOApplication(java.lang.String)>(r20);

        if i10 != 0 goto label13;

        if z1 == 0 goto label09;

        $i7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $z6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean checkGetAccountsPermission(java.lang.String,int)>(r20, $i7);

        if $z6 != 0 goto label13;

     label09:
        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean checkReadContactsPermission(java.lang.String,int)>(r20, $i5);

        if $z4 == 0 goto label10;

        $r6 = r19.<android.accounts.Account: java.lang.String type>;

        $i6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $z5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean accountTypeManagesContacts(java.lang.String,int)>($r6, $i6);

        if $z5 != 0 goto label11;

     label10:
        if z0 == 0 goto label12;

     label11:
        goto label13;

     label12:
        i11 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int getAccountVisibilityFromCache(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r19, "android:accounts:key_legacy_not_visible", r1);

        i12 = i11;

        if i11 != 0 goto label14;

        i12 = 4;

        goto label14;

     label13:
        i13 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int getAccountVisibilityFromCache(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r19, "android:accounts:key_legacy_visible", r1);

        i12 = i13;

        if i13 != 0 goto label14;

        i12 = 2;

     label14:
        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        return $r21;

     label15:
        $r18 := @caughtexception;

     label16:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

     label17:
        throw $r18;

     label18:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found ");

        $r14 = virtualinvoke $r11.<android.content.pm.PackageManager$NameNotFoundException: java.lang.String getMessage()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r16);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        return $r17;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label18;
        catch android.content.pm.PackageManager$NameNotFoundException from label16 to label17 with label18;
        catch android.content.pm.PackageManager$NameNotFoundException from label17 to label18 with label18;
    }

    private void revokeAppPermission(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i3, $i5;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.Object r2, $r10, r21;
        long l1, $l6;
        java.lang.Exception $r3;
        com.android.server.accounts.AccountsDb $r4, $r5, $r6, $r13, $r14, $r17;
        byte $b4;
        com.android.server.accounts.AccountManagerService$NotificationId $r7;
        android.os.UserHandle $r8;
        java.util.concurrent.CopyOnWriteArrayList $r9;
        com.android.server.accounts._$$Lambda$AccountManagerService$b_wmW_X7TIC2Bc_zEKaPtyELmHY $r11;
        com.android.server.accounts.AccountManagerService$MessageHandler $r12;
        java.lang.Throwable $r15, $r16, $r18;
        android.accounts.Account r19;
        java.lang.String r20;
        java.util.Iterator r22;
        boolean $z2;
        android.accounts.AccountManagerInternal$OnAppPermissionChangeListener r23;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r19 := @parameter0: android.accounts.Account;

        r20 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r19 == null goto label22;

        if r20 != null goto label01;

        goto label22;

     label01:
        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i3);

        r21 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r21;

     label02:
        r2 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r2;

     label03:
        $r4 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r4.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label04:
        $r5 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l1 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r19);

     label05:
        $b4 = l1 cmp 0L;

        if $b4 < 0 goto label07;

     label06:
        $r13 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $l6 = (long) i0;

        virtualinvoke $r13.<com.android.server.accounts.AccountsDb: boolean deleteGrantsByAccountIdAuthTokenTypeAndUid(long,java.lang.String,long)>(l1, r20, $l6);

        $r14 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r14.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label07:
        $r6 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r6.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label08:
        $r7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r19, r20, i0);

        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i5);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>($r7, $r8);

        exitmonitor r2;

     label09:
        exitmonitor r21;

     label10:
        $r9 = r0.<com.android.server.accounts.AccountManagerService: java.util.concurrent.CopyOnWriteArrayList mAppPermissionChangeListeners>;

        r22 = virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r10 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.accounts.AccountManagerInternal$OnAppPermissionChangeListener) $r10;

        $r12 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler>;

        $r11 = new com.android.server.accounts._$$Lambda$AccountManagerService$b_wmW_X7TIC2Bc_zEKaPtyELmHY;

        specialinvoke $r11.<com.android.server.accounts._$$Lambda$AccountManagerService$b_wmW_X7TIC2Bc_zEKaPtyELmHY: void <init>(android.accounts.AccountManagerInternal$OnAppPermissionChangeListener,android.accounts.Account,int)>(r23, r19, i0);

        virtualinvoke $r12.<com.android.server.accounts.AccountManagerService$MessageHandler: boolean post(java.lang.Runnable)>($r11);

        goto label11;

     label12:
        return;

     label13:
        $r16 := @caughtexception;

     label14:
        $r17 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r17.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label15:
        throw $r16;

     label16:
        $r15 := @caughtexception;

     label17:
        exitmonitor r2;

     label18:
        throw $r15;

     label19:
        $r18 := @caughtexception;

     label20:
        exitmonitor r21;

     label21:
        throw $r18;

     label22:
        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "revokeAppPermission: called with invalid arguments", $r3);

        return;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private boolean saveAuthTokenToDatabase(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r3;
        java.lang.Object r4, r26;
        long l0, $l3;
        com.android.server.accounts.AccountManagerService$NotificationId $r6;
        int $i1;
        android.os.UserHandle $r7;
        com.android.server.accounts.AccountsDb $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r22;
        byte $b2, $b4;
        java.lang.Throwable $r18, $r20, $r21;
        com.android.server.accounts.AccountManagerService$UserAccounts r23;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r23 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        if r1 == null goto label30;

        if r2 != null goto label01;

        goto label30;

     label01:
        $r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r23, r1);

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r23);

        $r7 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>($r6, $r7);

        r4 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r4;

     label02:
        $r8 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r8.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label03:
        $r9 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l0 = virtualinvoke $r9.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r1);

     label04:
        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label09;

     label05:
        $r15 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r15.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label06:
        goto label07;

     label07:
        exitmonitor r4;

     label08:
        return 0;

     label09:
        $r10 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r10.<com.android.server.accounts.AccountsDb: boolean deleteAuthtokensByAccountIdAndType(long,java.lang.String)>(l0, r2);

        $r11 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $l3 = virtualinvoke $r11.<com.android.server.accounts.AccountsDb: long insertAuthToken(long,java.lang.String,java.lang.String)>(l0, r2, r3);

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label19;

        $r13 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r13.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label10:
        $r14 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r14.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label11:
        r26 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r26;

     label12:
        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r23, r1, r2, r3);

        exitmonitor r26;

     label13:
        goto label17;

     label14:
        $r20 := @caughtexception;

     label15:
        exitmonitor r26;

     label16:
        throw $r20;

     label17:
        exitmonitor r4;

     label18:
        return 1;

     label19:
        $r12 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r12.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label20:
        goto label21;

     label21:
        exitmonitor r4;

     label22:
        return 0;

     label23:
        $r21 := @caughtexception;

     label24:
        $r22 = r23.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r22.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label25:
        goto label26;

     label26:
        throw $r21;

     label27:
        $r18 := @caughtexception;

     label28:
        exitmonitor r4;

     label29:
        throw $r18;

     label30:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label27;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.Throwable from label05 to label06 with label27;
        catch java.lang.Throwable from label07 to label07 with label27;
        catch java.lang.Throwable from label07 to label07 with label27;
        catch java.lang.Throwable from label07 to label08 with label27;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label10 to label11 with label27;
        catch java.lang.Throwable from label11 to label12 with label27;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label21 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label26 to label26 with label27;
        catch java.lang.Throwable from label26 to label26 with label27;
        catch java.lang.Throwable from label26 to label27 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
    }

    private void saveCachedToken(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, byte[], java.lang.String, java.lang.String, long)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r4, r5;
        byte[] r3;
        long l0;
        java.lang.Object r6;
        com.android.server.accounts.AccountManagerService$NotificationId $r7;
        int $i1;
        android.os.UserHandle $r8;
        com.android.server.accounts.TokenCache $r9;
        java.lang.Throwable $r10;
        com.android.server.accounts.AccountManagerService$UserAccounts r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r11 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: byte[];

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        l0 := @parameter6: long;

        if r1 == null goto label7;

        if r4 == null goto label7;

        if r2 == null goto label7;

        if r3 != null goto label1;

        goto label7;

     label1:
        $r7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r11, r1);

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r11);

        $r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>($r7, $r8);

        r6 = r11.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r6;

     label2:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache access$1300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r11);

        virtualinvoke $r9.<com.android.server.accounts.TokenCache: void put(android.accounts.Account,java.lang.String,java.lang.String,java.lang.String,byte[],long)>(r1, r5, r4, r2, r3, l0);

        exitmonitor r6;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r6;

     label6:
        throw $r10;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static boolean scanArgs(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label3;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void sendAccountRemovedBroadcast(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r7, $r9;
        int i0;
        android.content.Intent $r4;
        android.os.UserHandle $r11;
        android.content.Context $r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.accounts.action.ACCOUNT_REMOVED");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setFlags(int)>(16777216);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r2);

        $r7 = r1.<android.accounts.Account: java.lang.String name>;

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("authAccount", $r7);

        $r9 = r1.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("accountType", $r9);

        $r12 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r11 = new android.os.UserHandle;

        specialinvoke $r11.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke $r12.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r11);

        return;
    }

    private void sendAccountsChangedBroadcast(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        java.lang.StringBuilder $r2;
        android.content.Intent $r4, $r10;
        java.lang.String $r5, $r7;
        android.os.UserHandle $r8;
        android.content.Context $r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the accounts changed, sending broadcast of ");

        $r4 = <com.android.server.accounts.AccountManagerService: android.content.Intent ACCOUNTS_CHANGED_INTENT>;

        $r5 = virtualinvoke $r4.<android.content.Intent: java.lang.String getAction()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountManagerService", $r7);

        $r9 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r10 = <com.android.server.accounts.AccountManagerService: android.content.Intent ACCOUNTS_CHANGED_INTENT>;

        $r8 = new android.os.UserHandle;

        specialinvoke $r8.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke $r9.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r10, $r8);

        return;
    }

    private void sendErrorResponse(android.accounts.IAccountManagerResponse, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        java.lang.String r1;
        android.os.RemoteException $r2;
        boolean $z0;
        android.accounts.IAccountManagerResponse r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r3 := @parameter0: android.accounts.IAccountManagerResponse;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

     label1:
        interfaceinvoke r3.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(i0, r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label4;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "failure while notifying response", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void sendNotificationAccountUpdated(android.accounts.Account, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.util.Map$Entry r2;
        java.util.Map $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8, $r10;
        java.lang.Integer $r7, $r9;
        int $i0, $i1;
        java.lang.String $r11;
        android.accounts.Account r12;
        java.util.Iterator r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: android.accounts.Account;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getRequestingPackages(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r12, r1);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r13 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i0 == 3 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if $i1 == 4 goto label2;

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void notifyPackage(java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>($r11, r1);

     label2:
        goto label1;

     label3:
        return;
    }

    private void sendResponse(android.accounts.IAccountManagerResponse, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.Bundle r1;
        android.os.RemoteException $r2;
        boolean $z0;
        android.accounts.IAccountManagerResponse r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r3 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.os.Bundle;

     label1:
        interfaceinvoke r3.<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>(r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label4;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "failure while notifying response", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean setAccountVisibility(android.accounts.Account, java.lang.String, int, boolean, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.Object r2, r3, $r6, $r8, $r9, $r12, r20, r21;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.util.Set $r5;
        java.lang.String $r7, $r13, r19;
        java.lang.Integer $r10, $r11, $r14;
        java.lang.Throwable $r16, $r17;
        android.accounts.Account r18;
        java.util.Iterator r23, r25;
        java.util.Map$Entry r24;
        java.util.HashMap r28;
        java.util.ArrayList r29;
        java.util.Map r30;
        java.util.List r31;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r18 := @parameter0: android.accounts.Account;

        r19 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r2;

     label01:
        r3 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label02:
        if z0 == 0 goto label14;

     label03:
        $z7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSpecialPackageKey(java.lang.String)>(r19);

        if $z7 == 0 goto label06;

     label04:
        r20 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getRequestingPackages(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r18, r1);

        r21 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getAccountRemovedReceivers(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r18, r1);

     label05:
        goto label18;

     label06:
        $i4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $z8 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean packageExistsForUser(java.lang.String,int)>(r19, $i4);

        if $z8 != 0 goto label09;

        exitmonitor r3;

     label07:
        exitmonitor r2;

     label08:
        return 0;

     label09:
        r28 = new java.util.HashMap;

        specialinvoke r28.<java.util.HashMap: void <init>()>();

     label10:
        $r14 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r18, r19, r1);

        interfaceinvoke r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r14);

        r29 = new java.util.ArrayList;

        specialinvoke r29.<java.util.ArrayList: void <init>()>();

     label11:
        r20 = r28;

        r21 = r29;

     label12:
        $z9 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean shouldNotifyPackageOnAccountRemoval(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r18, r19, r1);

        if $z9 == 0 goto label18;

        interfaceinvoke r29.<java.util.List: boolean add(java.lang.Object)>(r19);

     label13:
        r20 = r28;

        r21 = r29;

        goto label18;

     label14:
        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSpecialPackageKey(java.lang.String)>(r19);

        if $z1 != 0 goto label17;

        $i3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $z6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean packageExistsForUser(java.lang.String,int)>(r19, $i3);

        if $z6 != 0 goto label17;

        exitmonitor r3;

     label15:
        exitmonitor r2;

     label16:
        return 0;

     label17:
        r20 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r21 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label18:
        $z11 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean updateAccountVisibilityLocked(android.accounts.Account,java.lang.String,int,com.android.server.accounts.AccountManagerService$UserAccounts)>(r18, r19, i5, r1);

        if $z11 != 0 goto label21;

        exitmonitor r3;

     label19:
        exitmonitor r2;

     label20:
        return 0;

     label21:
        if z0 == 0 goto label30;

     label22:
        r30 = (java.util.Map) r20;

        $r5 = interfaceinvoke r30.<java.util.Map: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label23:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label26;

        $r8 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.Integer) $r9;

        i6 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label24:
        $r11 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r18, r19, r1);

        i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isVisible(int)>(i6);

        $z5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isVisible(int)>(i0);

        if $z4 == $z5 goto label25;

        $r12 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void notifyPackage(java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>($r13, r1);

     label25:
        goto label23;

     label26:
        r31 = (java.util.List) r21;

        r25 = interfaceinvoke r31.<java.util.List: java.util.Iterator iterator()>();

     label27:
        $z3 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label29;

        $r6 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountRemovedBroadcast(android.accounts.Account,java.lang.String,int)>(r18, $r7, $i2);

     label28:
        goto label27;

     label29:
        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i1);

     label30:
        exitmonitor r3;

     label31:
        exitmonitor r2;

     label32:
        return 1;

     label33:
        $r16 := @caughtexception;

     label34:
        exitmonitor r3;

     label35:
        throw $r16;

     label36:
        $r17 := @caughtexception;

     label37:
        exitmonitor r2;

     label38:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label36;
        catch java.lang.Throwable from label03 to label04 with label33;
        catch java.lang.Throwable from label04 to label05 with label33;
        catch java.lang.Throwable from label06 to label07 with label33;
        catch java.lang.Throwable from label07 to label08 with label36;
        catch java.lang.Throwable from label09 to label10 with label33;
        catch java.lang.Throwable from label10 to label11 with label33;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Throwable from label14 to label15 with label33;
        catch java.lang.Throwable from label15 to label16 with label36;
        catch java.lang.Throwable from label17 to label18 with label33;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label19 to label20 with label36;
        catch java.lang.Throwable from label22 to label23 with label33;
        catch java.lang.Throwable from label23 to label24 with label33;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label27 to label28 with label33;
        catch java.lang.Throwable from label29 to label30 with label33;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.Throwable from label34 to label35 with label33;
        catch java.lang.Throwable from label35 to label36 with label36;
        catch java.lang.Throwable from label37 to label38 with label36;
    }

    private void setPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.Object r2, r3;
        long l0;
        com.android.server.accounts.AccountsDb $r4, $r5, $r6, $r7, $r8, $r12, $r14;
        byte $b1;
        int $i2, $i4, $i5, i6;
        java.util.Map $r9;
        com.android.server.accounts.TokenCache $r11;
        java.lang.Throwable $r13, $r15, $r16, $r17, r21;
        com.android.server.accounts.AccountManagerService$UserAccounts r18;
        java.lang.String r19, r20;
        boolean z2, z3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r18 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r19 := @parameter2: java.lang.String;

        i6 := @parameter3: int;

        if r1 != null goto label01;

        return;

     label01:
        z2 = 0;

        r2 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r2;

     label02:
        r3 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label03:
        $r4 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r4.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label04:
        $r5 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l0 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r1);

     label05:
        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label16;

     label06:
        $r7 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r7.<com.android.server.accounts.AccountsDb: int updateCeAccountPassword(long,java.lang.String)>(l0, r19);

        $r8 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r8.<com.android.server.accounts.AccountsDb: boolean deleteAuthTokensByAccountId(long)>(l0);

        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r18);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache access$1300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r18);

        virtualinvoke $r11.<com.android.server.accounts.TokenCache: void remove(android.accounts.Account)>(r1);

        $r12 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r12.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label07:
        if r19 == null goto label12;

     label08:
        $i4 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i4 != 0 goto label10;

     label09:
        goto label12;

     label10:
        r20 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_SET_PASSWORD>;

     label11:
        goto label13;

     label12:
        r20 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CLEAR_PASSWORD>;

     label13:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>(r20, "accounts", l0, r18, i6);

     label14:
        z2 = 1;

        goto label16;

     label15:
        $r17 := @caughtexception;

        r21 = $r17;

        z3 = 1;

        goto label23;

     label16:
        $r6 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r6.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label17:
        if z2 == 0 goto label19;

     label18:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendNotificationAccountUpdated(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r1, r18);

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r18);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i2);

     label19:
        exitmonitor r3;

     label20:
        exitmonitor r2;

     label21:
        return;

     label22:
        $r13 := @caughtexception;

        r21 = $r13;

        z3 = 0;

     label23:
        $r14 = r18.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r14.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label24:
        if z3 == 0 goto label26;

     label25:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendNotificationAccountUpdated(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r1, r18);

        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r18);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i5);

     label26:
        throw r21;

     label27:
        $r16 := @caughtexception;

     label28:
        exitmonitor r3;

     label29:
        throw $r16;

     label30:
        $r15 := @caughtexception;

     label31:
        exitmonitor r2;

     label32:
        throw $r15;

        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label20 to label21 with label30;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label26 to label27 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label29 to label30 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    private void setUserdataInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2;
        java.lang.Object r3, r4;
        long l0, l4, l5;
        boolean z0;
        com.android.server.accounts.AccountsDb $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        byte $b1, $b2, $b3;
        java.lang.Throwable $r15, $r17, $r18;
        com.android.server.accounts.AccountManagerService$UserAccounts r19;
        android.accounts.Account r20;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r19 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r20 := @parameter1: android.accounts.Account;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r3;

     label01:
        $r5 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r5.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label02:
        $r6 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l4 = virtualinvoke $r6.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r20);

     label03:
        $b1 = l4 cmp 0L;

        if $b1 >= 0 goto label06;

     label04:
        $r14 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r14.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r3;

     label05:
        return;

     label06:
        $r7 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l0 = virtualinvoke $r7.<com.android.server.accounts.AccountsDb: long findExtrasIdByAccountId(long,java.lang.String)>(l4, r1);

     label07:
        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label12;

     label08:
        $r12 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l5 = virtualinvoke $r12.<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>(l4, r1, r2);

     label09:
        $b3 = l5 cmp 0L;

        if $b3 >= 0 goto label16;

     label10:
        $r13 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r13.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r3;

     label11:
        return;

     label12:
        $r8 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        z0 = virtualinvoke $r8.<com.android.server.accounts.AccountsDb: boolean updateExtra(long,java.lang.String)>(l0, r2);

     label13:
        if z0 != 0 goto label16;

     label14:
        $r11 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r11.<com.android.server.accounts.AccountsDb: void endTransaction()>();

        exitmonitor r3;

     label15:
        return;

     label16:
        $r9 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r9.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label17:
        $r10 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r10.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label18:
        r4 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r4;

     label19:
        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void writeUserDataIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r19, r20, r1, r2);

        exitmonitor r4;

     label20:
        exitmonitor r3;

     label21:
        return;

     label22:
        $r17 := @caughtexception;

     label23:
        exitmonitor r4;

     label24:
        throw $r17;

     label25:
        $r15 := @caughtexception;

     label26:
        $r16 = r19.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r16.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label27:
        throw $r15;

     label28:
        $r18 := @caughtexception;

     label29:
        exitmonitor r3;

     label30:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label27 to label28 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    private boolean shouldNotifyPackageOnAccountRemoval(android.accounts.Account, java.lang.String, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        int i0, $i1, $i2;
        java.lang.Integer $r3;
        android.content.Intent $r4;
        android.content.pm.PackageManager $r7;
        android.accounts.Account r8;
        boolean z0;
        java.util.List r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r8 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r8, r1, r2);

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        z0 = 1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        return 0;

     label1:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.accounts.action.ACCOUNT_REMOVED");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setFlags(int)>(16777216);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        r10 = virtualinvoke $r7.<android.content.pm.PackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,int)>($r4, 0, $i1);

        if r10 == null goto label2;

        $i2 = interfaceinvoke r10.<java.util.List: int size()>();

        if $i2 <= 0 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    private void showCantAddAccount(int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        long l2;
        android.content.Context r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        android.app.admin.DevicePolicyManagerInternal r4;
        android.content.Intent r5, r6;
        android.os.UserHandle r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManagerInternal;");

        r4 = (android.app.admin.DevicePolicyManagerInternal) $r2;

        r5 = null;

        if r4 != null goto label1;

        r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Intent getDefaultCantAddAccountIntent(int)>(i0);

        goto label3;

     label1:
        if i0 != 100 goto label2;

        r5 = virtualinvoke r4.<android.app.admin.DevicePolicyManagerInternal: android.content.Intent createUserRestrictionSupportIntent(int,java.lang.String)>(i1, "no_modify_accounts");

        goto label3;

     label2:
        if i0 != 101 goto label3;

        r5 = virtualinvoke r4.<android.app.admin.DevicePolicyManagerInternal: android.content.Intent createShowAdminSupportIntent(int,boolean)>(i1, 0);

     label3:
        r6 = r5;

        if r5 != null goto label4;

        r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Intent getDefaultCantAddAccountIntent(int)>(i0);

     label4:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label5:
        r1 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        r7 = new android.os.UserHandle;

        specialinvoke r7.<android.os.UserHandle: void <init>(int)>(i1);

        virtualinvoke r1.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r6, r7);

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label7:
        $r3 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void startChooseAccountActivityWithAccounts(android.accounts.IAccountManagerResponse, android.accounts.Account[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account[] r2;
        java.lang.String r3;
        android.content.Intent $r5;
        android.content.Context $r6, $r11;
        android.accounts.AccountManagerResponse $r8;
        int $i0;
        android.os.UserHandle $r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account[];

        r3 := @parameter2: java.lang.String;

        $r5 = new android.content.Intent;

        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        specialinvoke $r5.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r6, class "Landroid/accounts/ChooseAccountActivity;");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>("accounts", r2);

        $r8 = new android.accounts.AccountManagerResponse;

        specialinvoke $r8.<android.accounts.AccountManagerResponse: void <init>(android.accounts.IAccountManagerResponse)>(r1);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("accountManagerResponse", $r8);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("androidPackageName", r3);

        $r11 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r12 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i0);

        virtualinvoke $r11.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r5, $r12);

        return;
    }

    private void syncDeCeAccountsLocked(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.util.List r2;
        android.util.SparseArray $r3;
        boolean $z0, $z1, $z2;
        com.android.server.accounts.AccountsDb $r4;
        java.lang.StringBuilder $r5;
        int $i0, $i1;
        java.lang.String $r10, $r11;
        java.lang.Object $r12;
        android.accounts.Account $r13;
        java.util.Iterator r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r3);

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "mUsers lock must be held");

        $r4 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb: java.util.List findCeAccountsNotInDe()>();

        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" accounts were previously deleted while user ");

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was locked. Removing accounts from CE tables");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AccountManagerService", $r10);

        $r11 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_SYNC_DE_CE_ACCOUNTS>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,java.lang.String)>(r1, $r11, "accounts");

        r15 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r12 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (android.accounts.Account) $r12;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,int)>(r1, $r13, 1000);

        goto label1;

     label2:
        return;
    }

    private void syncSharedAccounts(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i2, i4, i5;
        android.accounts.Account[] r1, r2;
        boolean z0, $z1;
        android.content.Context $r3;
        java.lang.String $r4, $r9;
        java.lang.StringBuilder $r5;
        android.os.UserManager $r10;
        android.content.pm.UserInfo $r11;
        android.accounts.Account r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getSharedAccountsAsUser(int)>(i0);

        if r1 == null goto label9;

        $i2 = lengthof r1;

        if $i2 != 0 goto label1;

        goto label9;

     label1:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>(null, i0, $r4);

        z0 = staticinvoke <android.os.UserManager: boolean isSplitSystemUser()>();

        i4 = 0;

        if z0 == 0 goto label2;

        $r10 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r11 = virtualinvoke $r10.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        i5 = $r11.<android.content.pm.UserInfo: int restrictedProfileParentId>;

        goto label3;

     label2:
        i5 = 0;

     label3:
        if i5 >= 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has shared accounts, but no parent user");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r9);

        return;

     label4:
        i1 = lengthof r1;

     label5:
        if i4 >= i1 goto label8;

        r13 = r1[i4];

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r2, r13);

        if $z1 == 0 goto label6;

        goto label7;

     label6:
        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>(null, r13, i5, i0);

     label7:
        i4 = i4 + 1;

        goto label5;

     label8:
        return;

     label9:
        return;
    }

    private void unregisterAccountListener(java.lang.String[], java.lang.String, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r16;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.util.Map r3, $r5, r17;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Integer r4, $r9;
        java.lang.Object $r6, $r7, $r8;
        java.lang.String[] $r12, r14, r15;
        java.lang.Throwable $r13;
        java.lang.IllegalArgumentException r18;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r14 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.server.accounts.AccountManagerService$UserAccounts;

        r3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        entermonitor r3;

        r15 = r14;

        if r14 != null goto label02;

     label01:
        $r12 = newarray (java.lang.String)[1];

        $r12[0] = null;

        r15 = $r12;

     label02:
        i0 = lengthof r15;

     label03:
        i4 = 0;

     label04:
        if i4 >= i0 goto label12;

        r16 = r15[i4];

     label05:
        $r5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (java.util.Map) $r6;

     label06:
        if r17 == null goto label11;

     label07:
        $r7 = interfaceinvoke r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r7 == null goto label11;

        $r8 = interfaceinvoke r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i1 != 1 goto label09;

        interfaceinvoke r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label08:
        goto label10;

     label09:
        $i2 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i3 = $i2 - 1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

     label10:
        i4 = i4 + 1;

        goto label04;

     label11:
        r18 = new java.lang.IllegalArgumentException;

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attempt to unregister wrong receiver");

        throw r18;

     label12:
        exitmonitor r3;

     label13:
        return;

     label14:
        $r13 := @caughtexception;

     label15:
        exitmonitor r3;

     label16:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private boolean updateAccountVisibilityLocked(android.accounts.Account, java.lang.String, int, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        long l1;
        android.os.StrictMode$ThreadPolicy r3;
        boolean z0;
        com.android.server.accounts.AccountsDb $r4, $r5;
        byte $b2;
        java.util.Map $r6;
        java.lang.Integer $r7;
        java.lang.Throwable $r9;
        android.accounts.Account r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r10 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r4 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l1 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r10);

        $b2 = l1 cmp 0L;

        if $b2 >= 0 goto label1;

        return 0;

     label1:
        r3 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>();

     label2:
        $r5 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        z0 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb: boolean setAccountVisibility(long,java.lang.String,int)>(l1, r1, i0);

     label3:
        if z0 != 0 goto label4;

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        return 0;

     label4:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        $r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r10, r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        return 1;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    private boolean updateLastAuthenticatedTime(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.Object r2, r3;
        boolean z0;
        com.android.server.accounts.AccountsDb $r4;
        java.lang.Throwable $r5, $r6;
        android.accounts.Account r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r7 := @parameter0: android.accounts.Account;

        r1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        r2 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r2;

     label01:
        r3 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label02:
        $r4 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        z0 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb: boolean updateAccountLastAuthenticatedTime(android.accounts.Account)>(r7);

        exitmonitor r3;

     label03:
        exitmonitor r2;

     label04:
        return z0;

     label05:
        $r6 := @caughtexception;

     label06:
        exitmonitor r3;

     label07:
        throw $r6;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.Object r1, r2, $r14, $r15, $r16, $r20, $r24, $r25, $r27, $r30, $r50, $r52, $r53, $r55, $r57, $r58, $r60, $r62, $r63, $r64, $r66;
        com.android.server.accounts.AccountsDb r3, $r73;
        java.util.HashSet r4;
        long l0;
        android.accounts.Account r5, $r19;
        boolean $z1, $z2, $z3, $z4, $z7, $z8, $z10, $z13, $z14, z15, z16, z17, z18, z19, z20, $z42;
        com.android.server.accounts.IAccountAuthenticatorCache $r6, $r68;
        int $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i17, i18, i19;
        java.util.Set $r7, $r8, $r10, $r11, $r49;
        java.util.HashMap $r9, $r17, r92;
        java.util.Map $r12, $r13, $r42, $r44, $r47, r93, r102, r128;
        java.lang.String $r21, $r23, $r28, $r29, $r31, $r32, $r35, $r38, $r41, $r51, $r56, $r59, $r78, r97, r134, r144;
        java.util.UUID $r22;
        java.lang.Long $r26;
        com.android.server.accounts.TokenCache $r46;
        java.lang.Integer $r54, $r61, $r65, r98;
        java.lang.StringBuilder $r69, r119;
        android.util.SparseBooleanArray $r76, r95;
        java.lang.Throwable $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, r99, r132, r138, r147;
        com.android.server.accounts.AccountManagerService$UserAccounts r90;
        java.util.Iterator r94, r100, r108, r135, r137, r142;
        java.util.Map$Entry r96, r101, r114, r136, r143;
        java.util.LinkedHashMap r105;
        java.util.List r130;
        java.util.ArrayList r140, r141, r145;
        android.accounts.Account[] r146;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r90 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        z15 := @parameter1: boolean;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 3);

        if $z1 == 0 goto label001;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateAccountsInternal ");

        $i14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isCeDatabaseAttached=");

        $r73 = r90.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        $z13 = virtualinvoke $r73.<com.android.server.accounts.AccountsDb: boolean isCeDatabaseAttached()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" userLocked=");

        $r76 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray mLocalUnlockedUsers>;

        $i15 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        $z14 = virtualinvoke $r76.<android.util.SparseBooleanArray: boolean get(int)>($i15);

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r78 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r78);

     label001:
        if z15 == 0 goto label002;

        $r68 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $i13 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        interfaceinvoke $r68.<com.android.server.accounts.IAccountAuthenticatorCache: void invalidateCache(int)>($i13);

     label002:
        $r6 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        r92 = staticinvoke <com.android.server.accounts.AccountManagerService: java.util.HashMap getAuthenticatorTypeAndUIDForUser(com.android.server.accounts.IAccountAuthenticatorCache,int)>($r6, $i1);

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        z16 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>($i2);

        r1 = r90.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r1;

     label003:
        r2 = r90.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r2;

     label004:
        z17 = 0;

     label005:
        r3 = r90.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r93 = virtualinvoke r3.<com.android.server.accounts.AccountsDb: java.util.Map findMetaAuthUid()>();

        r4 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r7 = interfaceinvoke r93.<java.util.Map: java.util.Set entrySet()>();

        r94 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label006:
        r95 = null;

     label007:
        z18 = interfaceinvoke r94.<java.util.Iterator: boolean hasNext()>();

     label008:
        if z18 == 0 goto label019;

     label009:
        $r62 = interfaceinvoke r94.<java.util.Iterator: java.lang.Object next()>();

        r96 = (java.util.Map$Entry) $r62;

        $r63 = interfaceinvoke r96.<java.util.Map$Entry: java.lang.Object getKey()>();

        r97 = (java.lang.String) $r63;

        $r64 = interfaceinvoke r96.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r65 = (java.lang.Integer) $r64;

        i18 = virtualinvoke $r65.<java.lang.Integer: int intValue()>();

        $r66 = virtualinvoke r92.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r97);

        r98 = (java.lang.Integer) $r66;

     label010:
        if r98 == null goto label013;

     label011:
        $i12 = virtualinvoke r98.<java.lang.Integer: int intValue()>();

        if i18 != $i12 goto label013;

        virtualinvoke r92.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r97);

     label012:
        goto label017;

     label013:
        if r95 != null goto label016;

     label014:
        $i11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        r95 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray getUidsOfInstalledOrUpdatedPackagesAsUser(int)>($i11);

     label015:
        goto label016;

     label016:
        $z10 = virtualinvoke r95.<android.util.SparseBooleanArray: boolean get(int)>(i18);

        if $z10 != 0 goto label017;

        virtualinvoke r4.<java.util.HashSet: boolean add(java.lang.Object)>(r97);

        virtualinvoke r3.<com.android.server.accounts.AccountsDb: boolean deleteMetaByAuthTypeAndUid(java.lang.String,int)>(r97, i18);

     label017:
        goto label007;

     label018:
        $r85 := @caughtexception;

        r99 = $r85;

        goto label111;

     label019:
        $r8 = virtualinvoke r92.<java.util.HashMap: java.util.Set entrySet()>();

        r100 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label020:
        z19 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>();

     label021:
        if z19 == 0 goto label024;

     label022:
        $r57 = interfaceinvoke r100.<java.util.Iterator: java.lang.Object next()>();

        r101 = (java.util.Map$Entry) $r57;

        $r58 = interfaceinvoke r101.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r59 = (java.lang.String) $r58;

        $r60 = interfaceinvoke r101.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r61 = (java.lang.Integer) $r60;

        $i9 = virtualinvoke $r61.<java.lang.Integer: int intValue()>();

        virtualinvoke r3.<com.android.server.accounts.AccountsDb: long insertOrReplaceMetaAuthTypeAndUid(java.lang.String,int)>($r59, $i9);

     label023:
        goto label020;

     label024:
        r102 = virtualinvoke r3.<com.android.server.accounts.AccountsDb: java.util.Map findAllDeAccounts()>();

     label025:
        z20 = 0;

     label026:
        $r9 = r90.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

     label027:
        z20 = 0;

     label028:
        r105 = new java.util.LinkedHashMap;

     label029:
        z20 = 0;

     label030:
        specialinvoke r105.<java.util.LinkedHashMap: void <init>()>();

     label031:
        z20 = 0;

     label032:
        $r10 = interfaceinvoke r102.<java.util.Map: java.util.Set entrySet()>();

        r108 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label033:
        z20 = z17;

     label034:
        $z2 = interfaceinvoke r108.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label092;

     label035:
        z20 = z17;

     label036:
        $r24 = interfaceinvoke r108.<java.util.Iterator: java.lang.Object next()>();

        r114 = (java.util.Map$Entry) $r24;

     label037:
        z20 = z17;

     label038:
        $r25 = interfaceinvoke r114.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.Long) $r25;

        l0 = virtualinvoke $r26.<java.lang.Long: long longValue()>();

     label039:
        z20 = z17;

     label040:
        $r27 = interfaceinvoke r114.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (android.accounts.Account) $r27;

     label041:
        z20 = z17;

     label042:
        $r28 = r5.<android.accounts.Account: java.lang.String type>;

        $z4 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>($r28);

        if $z4 == 0 goto label086;

     label043:
        z20 = z17;

     label044:
        r119 = new java.lang.StringBuilder;

     label045:
        z20 = z17;

     label046:
        specialinvoke r119.<java.lang.StringBuilder: void <init>()>();

     label047:
        z20 = z17;

     label048:
        virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleting account ");

     label049:
        z20 = z17;

     label050:
        $r35 = virtualinvoke r5.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

     label051:
        z20 = z17;

     label052:
        virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because type ");

     label053:
        z20 = z17;

     label054:
        $r38 = r5.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

     label055:
        z20 = z17;

     label056:
        virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'s registered authenticator no longer exist.");

     label057:
        z20 = z17;

     label058:
        $r41 = virtualinvoke r119.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r41);

     label059:
        z20 = z17;

     label060:
        r128 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getRequestingPackages(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r5, r90);

     label061:
        z20 = z17;

     label062:
        r130 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getAccountRemovedReceivers(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r5, r90);

     label063:
        z20 = z17;

     label064:
        virtualinvoke r3.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label065:
        virtualinvoke r3.<com.android.server.accounts.AccountsDb: boolean deleteDeAccount(long)>(l0);

     label066:
        if z16 == 0 goto label070;

     label067:
        virtualinvoke r3.<com.android.server.accounts.AccountsDb: boolean deleteCeAccount(long)>(l0);

     label068:
        goto label070;

     label069:
        $r84 := @caughtexception;

        r132 = $r84;

        goto label084;

     label070:
        virtualinvoke r3.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label071:
        z20 = z17;

     label072:
        virtualinvoke r3.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label073:
        r134 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_AUTHENTICATOR_REMOVE>;

     label074:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts)>(r134, "accounts", l0, r90);

        $r42 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        interfaceinvoke $r42.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        $r44 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        interfaceinvoke $r44.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        $r46 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache access$1300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        virtualinvoke $r46.<com.android.server.accounts.TokenCache: void remove(android.accounts.Account)>(r5);

        $r47 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        interfaceinvoke $r47.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        $r49 = interfaceinvoke r128.<java.util.Map: java.util.Set entrySet()>();

        r135 = interfaceinvoke $r49.<java.util.Set: java.util.Iterator iterator()>();

     label075:
        $z42 = interfaceinvoke r135.<java.util.Iterator: boolean hasNext()>();

        if $z42 == 0 goto label077;

        $r52 = interfaceinvoke r135.<java.util.Iterator: java.lang.Object next()>();

        r136 = (java.util.Map$Entry) $r52;

        $r53 = interfaceinvoke r136.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r54 = (java.lang.Integer) $r53;

        $i8 = virtualinvoke $r54.<java.lang.Integer: int intValue()>();

        $z8 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isVisible(int)>($i8);

        if $z8 == 0 goto label076;

        $r55 = interfaceinvoke r136.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r56 = (java.lang.String) $r55;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void notifyPackage(java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>($r56, r90);

     label076:
        goto label075;

     label077:
        r137 = interfaceinvoke r130.<java.util.List: java.util.Iterator iterator()>();

     label078:
        $z7 = interfaceinvoke r137.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label080;

        $r50 = interfaceinvoke r137.<java.util.Iterator: java.lang.Object next()>();

        $r51 = (java.lang.String) $r50;

        $i7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountRemovedBroadcast(android.accounts.Account,java.lang.String,int)>(r5, $r51, $i7);

     label079:
        goto label078;

     label080:
        z17 = 1;

        goto label091;

     label081:
        $r81 := @caughtexception;

        r138 = $r81;

        z17 = 1;

        goto label107;

     label082:
        $r87 := @caughtexception;

        r138 = $r87;

        z17 = 1;

        goto label107;

     label083:
        $r79 := @caughtexception;

        r132 = $r79;

     label084:
        virtualinvoke r3.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label085:
        throw r132;

     label086:
        $r29 = r5.<android.accounts.Account: java.lang.String type>;

        $r30 = virtualinvoke r105.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r29);

        r140 = (java.util.ArrayList) $r30;

     label087:
        r141 = r140;

        if r140 != null goto label090;

     label088:
        r141 = new java.util.ArrayList;

        specialinvoke r141.<java.util.ArrayList: void <init>()>();

     label089:
        $r32 = r5.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r105.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r141);

     label090:
        $r31 = r5.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r141.<java.util.ArrayList: boolean add(java.lang.Object)>($r31);

     label091:
        goto label033;

     label092:
        $r11 = virtualinvoke r105.<java.util.HashMap: java.util.Set entrySet()>();

        r142 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label093:
        $z3 = interfaceinvoke r142.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label099;

        $r14 = interfaceinvoke r142.<java.util.Iterator: java.lang.Object next()>();

        r143 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r143.<java.util.Map$Entry: java.lang.Object getKey()>();

        r144 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r143.<java.util.Map$Entry: java.lang.Object getValue()>();

        r145 = (java.util.ArrayList) $r16;

        $i4 = virtualinvoke r145.<java.util.ArrayList: int size()>();

        r146 = newarray (android.accounts.Account)[$i4];

     label094:
        i19 = 0;

     label095:
        $i5 = lengthof r146;

        if i19 >= $i5 goto label097;

        $r19 = new android.accounts.Account;

        $r20 = virtualinvoke r145.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        $r21 = (java.lang.String) $r20;

        $r22 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r23 = virtualinvoke $r22.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r19.<android.accounts.Account: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r21, r144, $r23);

        r146[i19] = $r19;

     label096:
        i19 = i19 + 1;

        goto label095;

     label097:
        $r17 = r90.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r144, r146);

     label098:
        goto label093;

     label099:
        $r12 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        $r13 = virtualinvoke r3.<com.android.server.accounts.AccountsDb: java.util.Map findAllVisibilityValues()>();

        interfaceinvoke $r12.<java.util.Map: void putAll(java.util.Map)>($r13);

     label100:
        if z17 == 0 goto label102;

     label101:
        $i3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i3);

     label102:
        exitmonitor r2;

     label103:
        exitmonitor r1;

     label104:
        return;

     label105:
        $r80 := @caughtexception;

        r138 = $r80;

        goto label107;

     label106:
        $r83 := @caughtexception;

        r138 = $r83;

        z17 = z20;

     label107:
        if z17 == 0 goto label109;

     label108:
        $i17 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r90);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i17);

     label109:
        throw r138;

     label110:
        $r82 := @caughtexception;

        r99 = $r82;

     label111:
        exitmonitor r2;

     label112:
        throw r99;

     label113:
        $r86 := @caughtexception;

        r99 = $r86;

        goto label111;

     label114:
        $r89 := @caughtexception;

        r147 = $r89;

     label115:
        exitmonitor r1;

     label116:
        throw r147;

     label117:
        $r88 := @caughtexception;

        r147 = $r88;

        goto label115;

        catch java.lang.Throwable from label003 to label004 with label114;
        catch java.lang.Throwable from label005 to label006 with label110;
        catch java.lang.Throwable from label007 to label008 with label110;
        catch java.lang.Throwable from label009 to label010 with label018;
        catch java.lang.Throwable from label011 to label012 with label018;
        catch java.lang.Throwable from label014 to label015 with label018;
        catch java.lang.Throwable from label016 to label017 with label018;
        catch java.lang.Throwable from label019 to label020 with label110;
        catch java.lang.Throwable from label020 to label021 with label110;
        catch java.lang.Throwable from label022 to label023 with label018;
        catch java.lang.Throwable from label024 to label025 with label110;
        catch java.lang.Throwable from label026 to label027 with label106;
        catch java.lang.Throwable from label028 to label029 with label106;
        catch java.lang.Throwable from label030 to label031 with label106;
        catch java.lang.Throwable from label032 to label033 with label106;
        catch java.lang.Throwable from label034 to label035 with label106;
        catch java.lang.Throwable from label036 to label037 with label106;
        catch java.lang.Throwable from label038 to label039 with label106;
        catch java.lang.Throwable from label040 to label041 with label106;
        catch java.lang.Throwable from label042 to label043 with label106;
        catch java.lang.Throwable from label044 to label045 with label106;
        catch java.lang.Throwable from label046 to label047 with label106;
        catch java.lang.Throwable from label048 to label049 with label106;
        catch java.lang.Throwable from label050 to label051 with label106;
        catch java.lang.Throwable from label052 to label053 with label106;
        catch java.lang.Throwable from label054 to label055 with label106;
        catch java.lang.Throwable from label056 to label057 with label106;
        catch java.lang.Throwable from label058 to label059 with label106;
        catch java.lang.Throwable from label060 to label061 with label106;
        catch java.lang.Throwable from label062 to label063 with label106;
        catch java.lang.Throwable from label064 to label065 with label106;
        catch java.lang.Throwable from label065 to label066 with label083;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label070 to label071 with label083;
        catch java.lang.Throwable from label072 to label073 with label106;
        catch java.lang.Throwable from label073 to label074 with label082;
        catch java.lang.Throwable from label074 to label075 with label081;
        catch java.lang.Throwable from label075 to label076 with label081;
        catch java.lang.Throwable from label077 to label078 with label081;
        catch java.lang.Throwable from label078 to label079 with label081;
        catch java.lang.Throwable from label084 to label085 with label105;
        catch java.lang.Throwable from label085 to label086 with label105;
        catch java.lang.Throwable from label086 to label087 with label105;
        catch java.lang.Throwable from label088 to label089 with label105;
        catch java.lang.Throwable from label089 to label090 with label105;
        catch java.lang.Throwable from label090 to label091 with label105;
        catch java.lang.Throwable from label092 to label093 with label105;
        catch java.lang.Throwable from label093 to label094 with label105;
        catch java.lang.Throwable from label095 to label096 with label105;
        catch java.lang.Throwable from label097 to label098 with label105;
        catch java.lang.Throwable from label099 to label100 with label105;
        catch java.lang.Throwable from label101 to label102 with label113;
        catch java.lang.Throwable from label102 to label103 with label113;
        catch java.lang.Throwable from label103 to label104 with label117;
        catch java.lang.Throwable from label108 to label109 with label113;
        catch java.lang.Throwable from label109 to label110 with label113;
        catch java.lang.Throwable from label111 to label112 with label113;
        catch java.lang.Throwable from label112 to label113 with label117;
        catch java.lang.Throwable from label115 to label116 with label117;
    }

    public boolean accountAuthenticated(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        long l2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String $r2, $r6, $r7, $r8, $r12;
        java.lang.SecurityException $r3;
        java.lang.Object[] $r4, $r10;
        java.lang.Integer $r5, $r11;
        java.lang.Throwable $r13;
        android.accounts.Account r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r14 := @parameter0: android.accounts.Account;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r14;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("accountAuthenticated( account: %s, callerUid: %s)", $r10);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "account cannot be null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r2 = r14.<android.accounts.Account: java.lang.String type>;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r2, i0, i1);

        if $z2 == 0 goto label7;

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int,int)>(i1, i0);

        if $z3 == 0 goto label6;

        $r8 = r14.<android.accounts.Account: java.lang.String type>;

        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String,int)>(i1, $r8, i0);

        if $z4 != 0 goto label2;

        goto label6;

     label2:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean updateLastAuthenticatedTime(android.accounts.Account)>(r14);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return z0;

     label5:
        $r13 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r13;

     label6:
        return 0;

     label7:
        $r3 = new java.lang.SecurityException;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = r14.<android.accounts.Account: java.lang.String type>;

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot notify authentication for accounts of type: %s", $r4);

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r3;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void addAccount(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, java.lang.String[], boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r8, $r18, $r26;
        java.lang.String[] r3;
        boolean z0, $z1, $z2, $z3;
        int i0, $i2, $i3, i5, i6, i7;
        long l1;
        com.android.server.accounts.AccountManagerService$9 r4;
        java.lang.IllegalArgumentException $r6, $r7;
        android.os.Bundle $r9, r32;
        java.lang.StringBuilder $r10;
        java.lang.Throwable $r27, $r28, r37;
        android.os.RemoteException $r29, $r30;
        android.accounts.IAccountManagerResponse r31;
        com.android.server.accounts.AccountManagerService$UserAccounts r36;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r31 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        r32 := @parameter5: android.os.Bundle;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r32, 1);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addAccount: accountType ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requiredFeatures ");

        $r18 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r26 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r26);

        goto label01;

     label01:
        if r31 == null goto label20;

        if r1 == null goto label19;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i5 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int,int)>(i5, i0);

        if $z2 != 0 goto label06;

     label02:
        interfaceinvoke r31.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(100, "User is not allowed to add an account!");

     label03:
        goto label05;

     label04:
        $r29 := @caughtexception;

     label05:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(100, i5);

        return;

     label06:
        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String,int)>(i5, r1, i0);

        if $z3 != 0 goto label11;

     label07:
        interfaceinvoke r31.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label08:
        goto label10;

     label09:
        $r30 := @caughtexception;

     label10:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(101, i5);

        return;

     label11:
        i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if r32 != null goto label12;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        r32 = $r9;

        goto label12;

     label12:
        virtualinvoke r32.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i0);

        virtualinvoke r32.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", i6);

        i7 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label13:
        r36 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i7);

        $r8 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_ADD>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecordWithUid(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,java.lang.String,int)>(r36, $r8, "accounts", i0);

        r4 = new com.android.server.accounts.AccountManagerService$9;

     label14:
        specialinvoke r4.<com.android.server.accounts.AccountManagerService$9: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String[],android.os.Bundle,java.lang.String)>(r0, r36, r31, r1, z0, 1, null, 0, 1, r2, r3, r32, r1);

        virtualinvoke r4.<com.android.server.accounts.AccountManagerService$9: void bind()>();

     label15:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return;

     label16:
        $r27 := @caughtexception;

        r37 = $r27;

        goto label18;

     label17:
        $r28 := @caughtexception;

        r37 = $r28;

     label18:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r37;

     label19:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r7;

     label20:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r6;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    public void addAccountAsUser(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, java.lang.String[], boolean, android.os.Bundle, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r10, $r11, $r21, $r31;
        java.lang.String[] r3;
        boolean z0, $z1, $z2, $z3, $z4, z5, z6;
        int i0, i1, $i3, $i4, $i5, i7, i8;
        long l2;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        java.lang.SecurityException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;
        android.os.Bundle $r12, r37;
        java.lang.StringBuilder $r13;
        java.lang.Throwable $r32, $r33, r42;
        android.os.RemoteException $r34, $r35;
        android.accounts.IAccountManagerResponse r36;
        com.android.server.accounts.AccountManagerService$10 r41;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r36 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        r37 := @parameter5: android.os.Bundle;

        i0 := @parameter6: int;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r37, 1);

        i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addAccount: accountType ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requiredFeatures ");

        $r21 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r3);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for user id ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r31 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r31);

        goto label01;

     label01:
        if r36 == null goto label02;

        z5 = 1;

        goto label03;

     label02:
        z5 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "response cannot be null");

        if r1 == null goto label04;

        z6 = 1;

        goto label05;

     label04:
        z6 = 0;

     label05:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z6, "accountType cannot be null");

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isCrossUser(int,int)>(i7, i0);

        if $z2 != 0 goto label23;

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int,int)>(i0, i7);

        if $z3 != 0 goto label10;

     label06:
        interfaceinvoke r36.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(100, "User is not allowed to add an account!");

     label07:
        goto label09;

     label08:
        $r34 := @caughtexception;

     label09:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(100, i0);

        return;

     label10:
        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String,int)>(i0, r1, i7);

        if $z4 != 0 goto label15;

     label11:
        interfaceinvoke r36.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label12:
        goto label14;

     label13:
        $r35 := @caughtexception;

     label14:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(101, i0);

        return;

     label15:
        i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if r37 != null goto label16;

        $r12 = new android.os.Bundle;

        specialinvoke $r12.<android.os.Bundle: void <init>()>();

        r37 = $r12;

        goto label16;

     label16:
        virtualinvoke r37.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i1);

        virtualinvoke r37.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", i8);

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label17:
        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        $r11 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_ADD>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecordWithUid(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,java.lang.String,int)>(r4, $r11, "accounts", i1);

        r41 = new com.android.server.accounts.AccountManagerService$10;

     label18:
        specialinvoke r41.<com.android.server.accounts.AccountManagerService$10: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String[],android.os.Bundle,java.lang.String)>(r0, r4, r36, r1, z0, 1, null, 0, 1, r2, r3, r37, r1);

        virtualinvoke r41.<com.android.server.accounts.AccountManagerService$10: void bind()>();

     label19:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label20:
        $r32 := @caughtexception;

        r42 = $r32;

        goto label22;

     label21:
        $r33 := @caughtexception;

        r42 = $r33;

     label22:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r42;

     label23:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[2];

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %s trying to add account for %s", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r6;

        catch android.os.RemoteException from label06 to label07 with label08;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    public boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        android.os.Bundle r3;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>(r1, r2, r3, null);

        return $z0;
    }

    public boolean addAccountExplicitlyWithVisibility(android.accounts.Account, java.lang.String, android.os.Bundle, java.util.Map)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r7, $r11, $r12, $r21;
        android.os.Bundle r2;
        java.util.Map r3;
        int i0, i1, $i3;
        long l2;
        boolean z0, $z1, $z2;
        java.lang.SecurityException $r8;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;
        com.android.server.accounts.AccountManagerService$UserAccounts $r13;
        java.lang.StringBuilder $r14;
        java.lang.Throwable $r22;
        android.accounts.Account r23;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r23 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: java.util.Map;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r2, 1);

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addAccountExplicitly: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r21);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r23, "account cannot be null");

        $r7 = r23.<android.accounts.Account: java.lang.String type>;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r7, i0, i1);

        if $z2 == 0 goto label5;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r13 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean addAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,android.os.Bundle,int,java.util.Map)>($r13, r23, r1, r2, i0, r3);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return z0;

     label4:
        $r22 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r22;

     label5:
        $r8 = new java.lang.SecurityException;

        $r9 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r10;

        $r11 = r23.<android.accounts.Account: java.lang.String type>;

        $r9[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot explicitly add accounts of type: %s", $r9);

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void addSharedAccountsFromParentUser(int, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, i2, i3;
        android.accounts.Account $r1;
        java.lang.String r2;
        android.accounts.Account[] r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        staticinvoke <com.android.server.accounts.AccountManagerService: void checkManageOrCreateUsersPermission(java.lang.String)>("addSharedAccountsFromParentUser");

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>(null, i2, r2);

        i1 = lengthof r3;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r1 = r3[i3];

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean addSharedAccountAsUser(android.accounts.Account,int)>($r1, i0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void clearPassword(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3;
        long l2;
        boolean $z0, $z1;
        java.lang.String $r3, $r7, $r8, $r17;
        java.lang.SecurityException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        com.android.server.accounts.AccountManagerService$UserAccounts $r9;
        java.lang.StringBuilder $r10;
        java.lang.Throwable $r18;
        android.accounts.Account r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r19 := @parameter0: android.accounts.Account;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clearPassword: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r19, "account cannot be null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = r19.<android.accounts.Account: java.lang.String type>;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r3, i0, i1);

        if $z1 == 0 goto label5;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r9 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void setPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,int)>($r9, r19, null, i0);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label4:
        $r18 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r18;

     label5:
        $r4 = new java.lang.SecurityException;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = r19.<android.accounts.Account: java.lang.String type>;

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot clear passwords for accounts of type: %s", $r5);

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse, android.accounts.Account, android.os.Bundle, boolean, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        android.os.Bundle r2;
        boolean z0, $z1, $z2;
        int i0, i1, $i3, $i4;
        long l2;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        com.android.server.accounts.AccountManagerService$13 r4;
        java.lang.String r5, $r11, $r25, r30;
        java.lang.SecurityException $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10;
        java.lang.IllegalArgumentException $r12, $r13;
        java.lang.StringBuilder $r14;
        java.lang.Throwable $r26, $r27, r31;
        android.accounts.IAccountManagerResponse r28;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r28 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: android.os.Bundle;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r2, 1);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("confirmCredentials: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r25 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r25);

        goto label01;

     label01:
        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isCrossUser(int,int)>(i1, i0);

        if $z2 != 0 goto label10;

        if r28 == null goto label09;

        if r1 == null goto label08;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label02:
        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r4 = new com.android.server.accounts.AccountManagerService$13;

        r30 = r1.<android.accounts.Account: java.lang.String type>;

        r5 = r1.<android.accounts.Account: java.lang.String name>;

     label03:
        specialinvoke r4.<com.android.server.accounts.AccountManagerService$13: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean,android.accounts.Account,android.os.Bundle)>(r0, r3, r28, r30, z0, 1, r5, 1, 1, r1, r2);

        virtualinvoke r4.<com.android.server.accounts.AccountManagerService$13: void bind()>();

     label04:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label05:
        $r26 := @caughtexception;

        r31 = $r26;

        goto label07;

     label06:
        $r27 := @caughtexception;

        r31 = $r27;

     label07:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r31;

     label08:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r13;

     label09:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r12;

     label10:
        $r7 = new java.lang.SecurityException;

        $r8 = newarray (java.lang.Object)[2];

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %s trying to confirm account credentials for %s", $r8);

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
    }

    public void copyAccountToUser(android.accounts.IAccountManagerResponse, android.accounts.Account, int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3;
        com.android.server.accounts.AccountManagerService$UserAccounts r1, r2;
        long l2;
        com.android.server.accounts.AccountManagerService$5 r3;
        java.lang.String r4, $r9, $r15, $r20, r26;
        boolean $z0;
        java.lang.SecurityException $r5;
        android.os.Bundle $r6;
        java.lang.StringBuilder $r7, $r17;
        android.os.RemoteException $r16;
        java.lang.Throwable $r21, $r22, r27;
        android.accounts.IAccountManagerResponse r23;
        android.accounts.Account r24;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r23 := @parameter0: android.accounts.IAccountManagerResponse;

        r24 := @parameter1: android.accounts.Account;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isCrossUser(int,int)>($i3, -1);

        if $z0 != 0 goto label13;

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        if r1 == null goto label08;

        if r2 != null goto label01;

        goto label08;

     label01:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying account ");

        $r9 = virtualinvoke r24.<android.accounts.Account: java.lang.String toSafeString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from user ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to user ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r15);

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label02:
        r3 = new com.android.server.accounts.AccountManagerService$5;

        r4 = r24.<android.accounts.Account: java.lang.String type>;

        r26 = r24.<android.accounts.Account: java.lang.String name>;

     label03:
        specialinvoke r3.<com.android.server.accounts.AccountManagerService$5: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,android.accounts.Account,android.accounts.IAccountManagerResponse,com.android.server.accounts.AccountManagerService$UserAccounts,int)>(r0, r1, r23, r4, 0, 0, r26, 0, r24, r23, r2, i0);

        virtualinvoke r3.<com.android.server.accounts.AccountManagerService$5: void bind()>();

     label04:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label05:
        $r22 := @caughtexception;

        r27 = $r22;

        goto label07;

     label06:
        $r21 := @caughtexception;

        r27 = $r21;

     label07:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r27;

     label08:
        if r23 == null goto label12;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        virtualinvoke $r6.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("booleanResult", 0);

     label09:
        interfaceinvoke r23.<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>($r6);

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report error back to the client.");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r20);

     label12:
        return;

     label13:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Calling copyAccountToUser requires android.permission.INTERACT_ACROSS_USERS_FULL");

        throw $r5;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    public android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account, java.lang.String, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3, $i4;
        long l2;
        java.lang.SecurityException $r1;
        android.content.pm.PackageManager $r5;
        android.app.PendingIntent $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r11, r14;
        java.lang.Throwable $r12;
        android.accounts.Account r13;
        android.os.UserHandle r15, r18;
        android.content.Intent r16;
        android.content.Context r17;
        android.content.IntentSender r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r13 := @parameter0: android.accounts.Account;

        r14 := @parameter1: java.lang.String;

        r15 := @parameter2: android.os.UserHandle;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        if $i4 != 1000 goto label7;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "account cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "packageName cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "userHandle cannot be null");

        i0 = virtualinvoke r15.<android.os.UserHandle: int getIdentifier()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 2147483647, "user must be concrete");

     label1:
        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        i1 = virtualinvoke $r5.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r14, i0);

     label2:
        r16 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Intent newRequestAccountAccessIntent(android.accounts.Account,java.lang.String,int,android.os.RemoteCallback)>(r13, r14, i1, null);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        r17 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        r18 = new android.os.UserHandle;

        specialinvoke r18.<android.os.UserHandle: void <init>(int)>(i0);

        $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>(r17, 0, r16, 1409286144, null, r18);

        r19 = virtualinvoke $r6.<android.app.PendingIntent: android.content.IntentSender getIntentSender()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r19;

     label5:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r12;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccountManagerService", $r11);

        return null;

     label7:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Can be called only by system UID");

        throw $r1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.accounts.AccountManagerService r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        java.util.Iterator r3;
        android.content.pm.UserInfo r4;
        android.content.Context $r6;
        boolean $z0, $z1, $z2, z3, $z4;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r12;
        int $i0;
        com.android.server.accounts.AccountManagerService$UserAccounts $r14;
        java.io.PrintWriter r16;
        com.android.internal.util.IndentingPrintWriter $r17;
        android.os.UserManager $r19;
        java.util.List $r20;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r16 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r6, "AccountManagerService", r16);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <com.android.server.accounts.AccountManagerService: boolean scanArgs(java.lang.String[],java.lang.String)>(r2, "--checkin");

        if $z1 != 0 goto label3;

        $z2 = staticinvoke <com.android.server.accounts.AccountManagerService: boolean scanArgs(java.lang.String[],java.lang.String)>(r2, "-c");

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

        goto label4;

     label3:
        z3 = 1;

     label4:
        $r17 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r17.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r16, "  ");

        $r19 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r20 = virtualinvoke $r19.<android.os.UserManager: java.util.List getUsers()>();

        r3 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.UserInfo) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r12);

        virtualinvoke $r17.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $i0 = r4.<android.content.pm.UserInfo: int id>;

        $r14 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i0);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void dumpUser(com.android.server.accounts.AccountManagerService$UserAccounts,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>($r14, r1, $r17, r2, z3);

        virtualinvoke $r17.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r17.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        goto label5;

     label6:
        return;
    }

    public void editProperties(android.accounts.IAccountManagerResponse, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r8, $r20;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, $i3;
        long l2;
        com.android.server.accounts.AccountManagerService$17 r2;
        java.lang.IllegalArgumentException $r3, $r4;
        java.lang.SecurityException $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.StringBuilder $r9;
        java.lang.Throwable $r21, $r22, r26;
        android.accounts.IAccountManagerResponse r23;
        com.android.server.accounts.AccountManagerService$UserAccounts r25;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r23 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("editProperties: accountType ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r20 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r20);

        goto label01;

     label01:
        if r23 == null goto label11;

        if r1 == null goto label10;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>(r1, i0, i1);

        if $z2 != 0 goto label03;

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSystemUid(int)>(i0);

        if $z3 == 0 goto label02;

        goto label03;

     label02:
        $r5 = new java.lang.SecurityException;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        $r6[1] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot edit authenticator properites for account type: %s", $r6);

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label03:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label04:
        r25 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r2 = new com.android.server.accounts.AccountManagerService$17;

     label05:
        specialinvoke r2.<com.android.server.accounts.AccountManagerService$17: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,java.lang.String)>(r0, r25, r23, r1, z0, 1, null, 0, r1);

        virtualinvoke r2.<com.android.server.accounts.AccountManagerService$17: void bind()>();

     label06:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label07:
        $r21 := @caughtexception;

        r26 = $r21;

        goto label09;

     label08:
        $r22 := @caughtexception;

        r26 = $r22;

     label09:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r26;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r4;

     label11:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r3;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    public void finishSessionAsUser(android.accounts.IAccountManagerResponse, android.os.Bundle, boolean, android.os.Bundle, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7;
        int i0, i1, i2, $i4, $i5, $i6, $i7;
        long l3;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.SecurityException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;
        java.lang.String $r8, $r10, $r24, r35;
        com.android.server.accounts.CryptoHelper $r9;
        java.lang.StringBuilder $r11;
        java.lang.Throwable $r25, $r26, $r27, $r28, r34, r37;
        android.accounts.IAccountManagerResponse r29;
        android.os.Bundle r30, r31, r33;
        com.android.server.accounts.AccountManagerService$12 r36;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r29 := @parameter0: android.accounts.IAccountManagerResponse;

        r30 := @parameter1: android.os.Bundle;

        z0 := @parameter2: boolean;

        r31 := @parameter3: android.os.Bundle;

        i0 := @parameter4: int;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r30, 1);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("finishSession: response ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s user id ");

        $i6 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i7 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for user id ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r24);

        goto label01;

     label01:
        if r29 == null goto label02;

        z6 = 1;

        goto label03;

     label02:
        z6 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z6, "response cannot be null");

        if r30 == null goto label29;

        $i4 = virtualinvoke r30.<android.os.Bundle: int size()>();

        if $i4 == 0 goto label29;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isCrossUser(int,int)>(i1, i0);

        if $z2 != 0 goto label28;

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int,int)>(i0, i1);

        if $z3 != 0 goto label04;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendErrorResponse(android.accounts.IAccountManagerResponse,int,java.lang.String)>(r29, 100, "User is not allowed to add an account!");

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(100, i0);

        return;

     label04:
        i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

     label05:
        $r9 = staticinvoke <com.android.server.accounts.CryptoHelper: com.android.server.accounts.CryptoHelper getInstance()>();

        r33 = virtualinvoke $r9.<com.android.server.accounts.CryptoHelper: android.os.Bundle decryptBundle(android.os.Bundle)>(r30);

     label06:
        if r33 != null goto label10;

     label07:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendErrorResponse(android.accounts.IAccountManagerResponse,int,java.lang.String)>(r29, 8, "failed to decrypt session bundle");

     label08:
        return;

     label09:
        $r25 := @caughtexception;

        r34 = $r25;

        goto label26;

     label10:
        r35 = virtualinvoke r33.<android.os.Bundle: java.lang.String getString(java.lang.String)>("accountType");

        z7 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r35);

     label11:
        if z7 == 0 goto label14;

     label12:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendErrorResponse(android.accounts.IAccountManagerResponse,int,java.lang.String)>(r29, 7, "accountType is empty");

     label13:
        return;

     label14:
        if r31 == null goto label16;

     label15:
        virtualinvoke r33.<android.os.Bundle: void putAll(android.os.Bundle)>(r31);

     label16:
        virtualinvoke r33.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i1);

        virtualinvoke r33.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", i2);

     label17:
        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String,int)>(i0, r35, i1);

        if $z4 != 0 goto label18;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendErrorResponse(android.accounts.IAccountManagerResponse,int,java.lang.String)>(r29, 101, "User cannot modify accounts of this type (policy).");

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(101, i0);

        return;

     label18:
        l3 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label19:
        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        $r10 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_SESSION_FINISH>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecordWithUid(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,java.lang.String,int)>(r1, $r10, "accounts", i1);

        r36 = new com.android.server.accounts.AccountManagerService$12;

     label20:
        specialinvoke r36.<com.android.server.accounts.AccountManagerService$12: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean,android.os.Bundle,java.lang.String)>(r0, r1, r29, r35, z0, 1, null, 0, 1, r33, r35);

        virtualinvoke r36.<com.android.server.accounts.AccountManagerService$12: void bind()>();

     label21:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        return;

     label22:
        $r27 := @caughtexception;

        r37 = $r27;

        goto label24;

     label23:
        $r28 := @caughtexception;

        r37 = $r28;

     label24:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        throw r37;

     label25:
        $r26 := @caughtexception;

        r34 = $r26;

     label26:
        $z5 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 3);

        if $z5 == 0 goto label27;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "Failed to decrypt session bundle!", r34);

     label27:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendErrorResponse(android.accounts.IAccountManagerResponse,int,java.lang.String)>(r29, 8, "failed to decrypt session bundle");

        return;

     label28:
        $r4 = new java.lang.SecurityException;

        $r5 = newarray (java.lang.Object)[2];

        $i5 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %s trying to finish session for %s without cross user permission", $r5);

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label29:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sessionBundle is empty");

        throw $r3;

        catch java.security.GeneralSecurityException from label05 to label06 with label25;
        catch java.security.GeneralSecurityException from label07 to label08 with label09;
        catch java.security.GeneralSecurityException from label10 to label11 with label25;
        catch java.security.GeneralSecurityException from label12 to label13 with label09;
        catch java.security.GeneralSecurityException from label15 to label16 with label09;
        catch java.security.GeneralSecurityException from label16 to label17 with label25;
        catch java.lang.Throwable from label19 to label20 with label23;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    public void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r3, $r15, $r21;
        java.lang.String[] r2;
        int i0, i1, $i3;
        long l2;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        boolean z0, $z1;
        android.app.AppOpsManager $r5;
        java.lang.IllegalArgumentException $r6, $r7;
        android.accounts.Account[] $r8;
        java.lang.StringBuilder $r9;
        java.lang.Throwable $r22, $r23, $r24, r27;
        android.accounts.IAccountManagerResponse r25;
        com.android.server.accounts.AccountManagerService$19 r28;
        com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession r29;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r25 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r5.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r3);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccount: accountType ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", features ");

        $r15 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r21 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r21);

     label01:
        if r25 == null goto label14;

        if r1 == null goto label13;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label02:
        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r2);

     label03:
        if z0 == 0 goto label07;

     label04:
        $r8 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String,boolean)>(r4, r1, i0, r3, 1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void handleGetAccountsResult(android.accounts.IAccountManagerResponse,android.accounts.Account[],java.lang.String)>(r25, $r8, r3);

     label05:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label06:
        $r22 := @caughtexception;

        r27 = $r22;

        goto label12;

     label07:
        r28 = new com.android.server.accounts.AccountManagerService$19;

        specialinvoke r28.<com.android.server.accounts.AccountManagerService$19: void <init>(com.android.server.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String)>(r0, r25, r3);

        r29 = new com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession;

     label08:
        specialinvoke r29.<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],int,java.lang.String,boolean)>(r0, r4, r28, r1, r2, i0, r3, 1);

        virtualinvoke r29.<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void bind()>();

     label09:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label10:
        $r23 := @caughtexception;

        r27 = $r23;

        goto label12;

     label11:
        $r24 := @caughtexception;

        r27 = $r24;

     label12:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r27;

     label13:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r7;

     label14:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public int getAccountVisibility(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r5, $r6, $r7, $r12, $r13;
        int i0, i2, i3, i4, i5;
        long l1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Integer $r8, $r11;
        java.lang.SecurityException $r9;
        java.lang.Object[] $r10;
        java.lang.Throwable $r14;
        android.accounts.Account r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r15 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "account cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName cannot be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r15.<android.accounts.Account: java.lang.String type>;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r5, i0, i2);

        if $z0 != 0 goto label02;

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSystemUid(int)>(i0);

        if $z3 == 0 goto label01;

        goto label02;

     label01:
        $r9 = new java.lang.SecurityException;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[0] = $r11;

        $r12 = r15.<android.accounts.Account: java.lang.String type>;

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot get secrets for accounts of type: %s", $r10);

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label02:
        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label03:
        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i2);

        $r6 = "android:accounts:key_legacy_visible";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label06;

        i3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int getAccountVisibilityFromCache(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r15, r1, r2);

     label04:
        if i3 == 0 goto label05;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return i3;

     label05:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return 2;

     label06:
        $r7 = "android:accounts:key_legacy_not_visible";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label09;

        i4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int getAccountVisibilityFromCache(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r15, r1, r2);

     label07:
        if i4 == 0 goto label08;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return i4;

     label08:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return 4;

     label09:
        $r8 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r15, r1, r2);

        i5 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

     label10:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return i5;

     label11:
        $r14 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw $r14;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public android.accounts.Account[] getAccounts(int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        java.util.List r1;
        long l2;
        android.app.AppOpsManager $r2;
        boolean $z0;
        com.android.server.accounts.AccountManagerService$UserAccounts $r3;
        android.accounts.Account[] $r4, r7;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r2.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r6);

        r1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesVisibleToCaller(int,int,java.lang.String)>(i1, i0, r6);

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        return $r4;

     label1:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,int,java.lang.String,java.util.List,boolean)>($r3, i1, r6, r1, 0);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r7;

     label4:
        $r5 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.util.Map getAccountsAndVisibilityForPackage(java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        boolean z0, $z2;
        long l2;
        java.lang.Integer $r1;
        com.android.server.accounts.AccountManagerService$UserAccounts $r2;
        java.lang.String $r10, r12, r13;
        java.lang.Throwable $r11;
        java.lang.Object r14;
        java.util.Map r16;
        java.lang.StringBuilder r18;
        java.lang.SecurityException r19;
        java.util.ArrayList r20;
        java.util.List r21, r22, r23;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i0, 1000);

        r14 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesForCaller(int,int,boolean)>(i0, i1, z0);

        if r13 == null goto label1;

        r21 = (java.util.List) r14;

        $z2 = interfaceinvoke r21.<java.util.List: boolean contains(java.lang.Object)>(r13);

        if $z2 == 0 goto label2;

     label1:
        if r13 != null goto label3;

        if z0 == 0 goto label2;

        goto label3;

     label2:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccountsAndVisibilityForPackage() called from unauthorized uid ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with packageName=");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        r19 = new java.lang.SecurityException;

        $r10 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw r19;

     label3:
        if r13 == null goto label4;

        r20 = new java.util.ArrayList;

        specialinvoke r20.<java.util.ArrayList: void <init>()>();

        r14 = r20;

        r22 = (java.util.List) r20;

        interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>(r13);

     label4:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label5:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r23 = (java.util.List) r14;

        r16 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.util.List,java.lang.Integer,com.android.server.accounts.AccountManagerService$UserAccounts)>(r12, r23, $r1, $r2);

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r16;

     label7:
        $r11 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r11;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public android.accounts.Account[] getAccountsAsUser(java.lang.String, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2;
        int i0, i1;
        android.app.AppOpsManager $r3;
        android.accounts.Account[] $r4;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r2);

        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUserForPackage(java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>(r1, i0, r2, -1, r2, 0);

        return $r4;
    }

    public void getAccountsByFeatures(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r15, $r21, r26;
        int i0, i1, $i3, $i4;
        long l2;
        com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession r2;
        android.app.AppOpsManager $r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4, $r5;
        java.util.List $r6;
        android.os.Bundle $r7, r33;
        android.accounts.Account[] $r8, r32;
        java.lang.StringBuilder $r9;
        android.os.RemoteException $r22;
        java.lang.Throwable $r23, $r24, r34;
        android.accounts.IAccountManagerResponse r25;
        java.lang.String[] r27;
        com.android.server.accounts.AccountManagerService$UserAccounts r31;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r25 := @parameter0: android.accounts.IAccountManagerResponse;

        r26 := @parameter1: java.lang.String;

        r27 := @parameter2: java.lang.String[];

        r1 := @parameter3: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r1);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccounts: accountType ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", features ");

        $r15 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r27);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r21 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r21);

     label01:
        if r25 == null goto label20;

        if r26 == null goto label19;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List getTypesVisibleToCaller(int,int,java.lang.String)>(i0, i1, r1);

        $z1 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r26);

        if $z1 != 0 goto label06;

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        $r8 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        virtualinvoke $r7.<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>("accounts", $r8);

     label02:
        interfaceinvoke r25.<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>($r7);

     label03:
        goto label05;

     label04:
        $r22 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "Cannot respond to caller do to exception.", $r22);

     label05:
        return;

     label06:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label07:
        r31 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

     label08:
        if r27 == null goto label14;

     label09:
        $i3 = lengthof r27;

        if $i3 != 0 goto label11;

     label10:
        goto label14;

     label11:
        r2 = new com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession;

     label12:
        specialinvoke r2.<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],int,java.lang.String,boolean)>(r0, r31, r25, r26, r27, i0, r1, 0);

        virtualinvoke r2.<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void bind()>();

     label13:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label14:
        r32 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String,boolean)>(r31, r26, i0, r1, 0);

        r33 = new android.os.Bundle;

        specialinvoke r33.<android.os.Bundle: void <init>()>();

        virtualinvoke r33.<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>("accounts", r32);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r25, r33);

     label15:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label16:
        $r24 := @caughtexception;

        r34 = $r24;

        goto label18;

     label17:
        $r23 := @caughtexception;

        r34 = $r23;

     label18:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r34;

     label19:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r5;

     label20:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r4;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    public android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r12, r14, r15;
        int i0, i1, i2;
        android.app.AppOpsManager $r2;
        android.content.pm.PackageManager $r3;
        boolean $z0, $z1, $z2;
        android.accounts.Account[] $r4, $r5, $r6, $r13;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r15 := @parameter2: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r2.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r15);

     label1:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        i2 = virtualinvoke $r3.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r1, i1);

     label2:
        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i0, 1000);

        if $z0 != 0 goto label3;

        if r14 == null goto label3;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>(r14, i0, i1);

        if $z1 != 0 goto label3;

        $r6 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        return $r6;

     label3:
        $z2 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i0, 1000);

        if $z2 != 0 goto label4;

        if r14 != null goto label4;

        $r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUserForPackage(java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>(r14, i1, r1, i2, r15, 0);

        return $r5;

     label4:
        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUserForPackage(java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>(r14, i1, r1, i2, r15, 1);

        return $r4;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine the packageUid for ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

        $r13 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        return $r13;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
    }

    public android.accounts.Account[] getAccountsForPackage(java.lang.String, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i2;
        java.lang.String r1, $r8, r10;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r7;
        android.accounts.Account[] $r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i1, 1000);

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r9 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUserForPackage(java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>(null, $i2, r10, i0, r1, 1);

        return $r9;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccountsForPackage() called from unauthorized uid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with uid=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    protected android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService$UserAccounts, java.lang.String, int, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String r1, r22;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Iterator r2, r27;
        android.accounts.Account[] r3, $r9, $r12, $r16, $r17, $r18, r24, r28, r29;
        java.lang.Object $r4, $r10, $r11, $r14, r23, r26;
        java.util.HashMap $r5, $r7, $r13;
        java.util.Collection $r6, $r8;
        java.lang.Object[] $r15;
        java.lang.Throwable $r19, $r20;
        com.android.server.accounts.AccountManagerService$UserAccounts r21;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r21 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r22 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r4 = r21.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r4);

        $z2 = $z1 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z2, "Method should not be called with cacheLock");

        if r22 == null goto label07;

        r23 = r21.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r23;

     label01:
        $r13 = r21.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r22);

        r24 = (android.accounts.Account[]) $r14;

        exitmonitor r23;

     label02:
        if r24 != null goto label03;

        $r18 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        return $r18;

     label03:
        $i4 = lengthof r24;

        $r15 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r24, $i4);

        $r16 = (android.accounts.Account[]) $r15;

        $r17 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] filterAccounts(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account[],int,java.lang.String,boolean)>(r21, $r16, i0, r1, z0);

        return $r17;

     label04:
        $r20 := @caughtexception;

     label05:
        exitmonitor r23;

     label06:
        throw $r20;

     label07:
        i5 = 0;

        r26 = r21.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r26;

     label08:
        $r5 = r21.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r27 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r11 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (android.accounts.Account[]) $r11;

        $i3 = lengthof $r12;

        i5 = i5 + $i3;

     label10:
        goto label09;

     label11:
        if i5 != 0 goto label14;

     label12:
        r28 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        exitmonitor r26;

     label13:
        return r28;

     label14:
        r29 = newarray (android.accounts.Account)[i5];

     label15:
        i6 = 0;

     label16:
        $r7 = r21.<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap accountCache>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label17:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label19;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.accounts.Account[]) $r10;

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r29, i6, $i1);

        $i2 = lengthof r3;

        i6 = i6 + $i2;

     label18:
        goto label17;

     label19:
        exitmonitor r26;

     label20:
        $r9 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] filterAccounts(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account[],int,java.lang.String,boolean)>(r21, r29, i0, r1, z0);

        return $r9;

     label21:
        $r19 := @caughtexception;

     label22:
        exitmonitor r26;

     label23:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public android.accounts.AccountAndUser[] getAllAccounts()
    {
        com.android.server.accounts.AccountManagerService r0;
        java.util.List r1;
        int[] r2;
        android.os.UserManager $r3;
        int $i0, $i1, $i2, i3;
        android.accounts.AccountAndUser[] $r4;
        java.lang.Object $r5;
        android.content.pm.UserInfo $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        r1 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r2;

        if i3 >= $i1 goto label2;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (android.content.pm.UserInfo) $r5;

        $i2 = $r6.<android.content.pm.UserInfo: int id>;

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAccounts(int[])>(r2);

        return $r4;
    }

    public void getAuthToken(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        android.os.Bundle r1, r61, r64;
        int i0, i1, $i2, $i3, $i7, $i8;
        java.lang.String r2, r3, $r5, $r11, $r12, $r13, $r14, $r15, $r33, $r44, r49, r55, r60, r63;
        com.android.server.accounts.IAccountAuthenticatorCache $r6;
        android.accounts.AuthenticatorDescription $r7, $r17;
        java.lang.SecurityException $r8;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;
        java.lang.Object $r16;
        java.lang.StringBuilder $r18, $r41;
        java.lang.Throwable $r34, $r35, $r36, $r37, $r38, $r39, $r45, $r46, r62;
        android.os.RemoteException $r40;
        android.accounts.IAccountManagerResponse r47;
        android.accounts.Account r48;
        long l11, l12, l13;
        com.android.server.accounts.AccountManagerService$UserAccounts r53;
        android.content.pm.RegisteredServicesCache$ServiceInfo r54;
        android.content.pm.PackageManager $r56;
        java.lang.String[] $r57;
        java.util.List r58;
        byte[] r59;
        com.android.server.accounts.AccountManagerService$8 r65;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r47 := @parameter0: android.accounts.IAccountManagerResponse;

        r48 := @parameter1: android.accounts.Account;

        r49 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r1 := @parameter5: android.os.Bundle;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r1, 1);

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z2 == 0 goto label01;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAuthToken: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r47);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", notifyOnAuthFailure ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r33 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r33);

        goto label01;

     label01:
        if r47 == null goto label02;

        z7 = 1;

        goto label03;

     label02:
        z7 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z7, "response cannot be null");

        if r48 != null goto label07;

     label04:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", "getAuthToken called with null account");

        interfaceinvoke r47.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(7, "account is null");

     label05:
        return;

     label06:
        $r40 := @caughtexception;

        goto label10;

     label07:
        if r49 != null goto label11;

     label08:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", "getAuthToken called with null authTokenType");

        interfaceinvoke r47.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(7, "authTokenType is null");

     label09:
        return;

     label10:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report error back to the client.");

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r44);

        return;

     label11:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l11 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label12:
        r53 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        $r6 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $r5 = r48.<android.accounts.Account: java.lang.String type>;

        $r7 = staticinvoke <android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)>($r5);

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r53);

        r54 = interfaceinvoke $r6.<com.android.server.accounts.IAccountAuthenticatorCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(android.accounts.AuthenticatorDescription,int)>($r7, $i2);

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        if r54 == null goto label14;

        $r16 = r54.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r17 = (android.accounts.AuthenticatorDescription) $r16;

        $z6 = $r17.<android.accounts.AuthenticatorDescription: boolean customTokens>;

        if $z6 == 0 goto label14;

        z8 = 1;

        goto label15;

     label14:
        z8 = 0;

     label15:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if z8 != 0 goto label17;

        $z5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean permissionIsGranted(android.accounts.Account,java.lang.String,int,int)>(r48, r49, i1, i0);

        if $z5 == 0 goto label16;

        goto label17;

     label16:
        z9 = 0;

        goto label18;

     label17:
        z9 = 1;

     label18:
        r55 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("androidPackageName");

        l12 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label19:
        $r56 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $r57 = virtualinvoke $r56.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i1);

        r58 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r57);

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        if r55 == null goto label44;

        $z3 = interfaceinvoke r58.<java.util.List: boolean contains(java.lang.Object)>(r55);

        if $z3 == 0 goto label44;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i1);

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", $i3);

        if z0 == 0 goto label21;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("notifyOnAuthFailure", 1);

     label21:
        l13 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label22:
        r59 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: byte[] calculatePackageSignatureDigest(java.lang.String)>(r55);

     label23:
        if z8 != 0 goto label30;

        if z9 == 0 goto label30;

     label24:
        r60 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r53, r48, r49);

     label25:
        if r60 == null goto label30;

     label26:
        r61 = new android.os.Bundle;

        specialinvoke r61.<android.os.Bundle: void <init>()>();

        virtualinvoke r61.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authtoken", r60);

        $r14 = r48.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r61.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authAccount", $r14);

        $r15 = r48.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r61.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("accountType", $r15);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r47, r61);

     label27:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l13);

        return;

     label28:
        $r35 := @caughtexception;

        r62 = $r35;

        goto label43;

     label29:
        $r36 := @caughtexception;

        r62 = $r36;

        goto label43;

     label30:
        if z8 == 0 goto label37;

     label31:
        r63 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readCachedTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String,byte[])>(r53, r48, r49, r55, r59);

     label32:
        if r63 == null goto label37;

     label33:
        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z4 == 0 goto label34;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", "getAuthToken: cache hit ofr custom token authenticator.");

     label34:
        r64 = new android.os.Bundle;

        specialinvoke r64.<android.os.Bundle: void <init>()>();

        virtualinvoke r64.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authtoken", r63);

        $r12 = r48.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r64.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authAccount", $r12);

        $r13 = r48.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r64.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("accountType", $r13);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r47, r64);

     label35:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l13);

        return;

     label36:
        $r34 := @caughtexception;

        r62 = $r34;

        goto label43;

     label37:
        r65 = new com.android.server.accounts.AccountManagerService$8;

        r2 = r48.<android.accounts.Account: java.lang.String type>;

        r3 = r48.<android.accounts.Account: java.lang.String name>;

     label38:
        specialinvoke r65.<com.android.server.accounts.AccountManagerService$8: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,android.os.Bundle,android.accounts.Account,java.lang.String,boolean,boolean,int,boolean,java.lang.String,byte[],com.android.server.accounts.AccountManagerService$UserAccounts)>(r0, r53, r47, r2, z1, 0, r3, 0, r1, r48, r49, z0, z9, i1, z8, r55, r59, r53);

        virtualinvoke r65.<com.android.server.accounts.AccountManagerService$8: void bind()>();

     label39:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l13);

        return;

     label40:
        $r38 := @caughtexception;

        r62 = $r38;

        goto label43;

     label41:
        $r37 := @caughtexception;

        r62 = $r37;

        goto label43;

     label42:
        $r39 := @caughtexception;

        r62 = $r39;

     label43:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l13);

        throw r62;

     label44:
        $r8 = new java.lang.SecurityException;

        $r9 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9[0] = $r10;

        $r9[1] = r55;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Uid %s is attempting to illegally masquerade as package %s!", $r9);

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label45:
        $r46 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        throw $r46;

     label46:
        $r45 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        throw $r45;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label08 to label09 with label06;
        catch java.lang.Throwable from label12 to label13 with label46;
        catch java.lang.Throwable from label19 to label20 with label45;
        catch java.lang.Throwable from label22 to label23 with label42;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.Throwable from label33 to label34 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label37 to label38 with label41;
        catch java.lang.Throwable from label38 to label39 with label40;
    }

    public void getAuthTokenLabel(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2;
        long l0;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        com.android.server.accounts.AccountManagerService$7 r4;
        int $i2, i3, i4;
        java.lang.SecurityException $r5;
        java.lang.Throwable $r6;
        android.accounts.IAccountManagerResponse r7;
        boolean z1, z2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r7 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "accountType cannot be null");

        if r2 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "authTokenType cannot be null");

        i3 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i3);

        if $i2 != 1000 goto label8;

        i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i3);

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label5:
        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i4);

        r4 = new com.android.server.accounts.AccountManagerService$7;

        specialinvoke r4.<com.android.server.accounts.AccountManagerService$7: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String)>(r0, r3, r7, r1, 0, 0, null, 0, r1, r2);

        virtualinvoke r4.<com.android.server.accounts.AccountManagerService$7: void bind()>();

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return;

     label7:
        $r6 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw $r6;

     label8:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("can only call from system");

        throw $r5;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3, $i4;
        long l2;
        boolean $z0, $z1;
        java.lang.SecurityException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;
        java.lang.String $r5, $r13;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r14;
        android.accounts.AuthenticatorDescription[] r16;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAuthenticatorTypes: for user id ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" caller\'s uid ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r13);

     label1:
        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isCrossUser(int,int)>(i1, i0);

        if $z1 != 0 goto label5;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        r16 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypesInternal(int)>(i0);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r16;

     label4:
        $r14 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r14;

     label5:
        $r1 = new java.lang.SecurityException;

        $r2 = newarray (java.lang.Object)[2];

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %s tying to get authenticator types for %s", $r2);

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    boolean getBindInstantServiceAllowed(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        com.android.server.accounts.IAccountAuthenticatorCache $r1;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $z0 = interfaceinvoke $r1.<com.android.server.accounts.IAccountAuthenticatorCache: boolean getBindInstantServiceAllowed(int)>(i0);

        return $z0;
    }

    public java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        long l2;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.Object r2, r3;
        java.lang.String $r5, $r9;
        boolean $z0, $z1;
        java.lang.SecurityException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.Throwable $r10, $r11, $r12;
        android.accounts.Account r13;
        java.util.Map r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r13 := @parameter0: android.accounts.Account;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "account cannot be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r13.<android.accounts.Account: java.lang.String type>;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r5, i0, i1);

        if $z0 != 0 goto label02;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSystemUid(int)>(i0);

        if $z1 == 0 goto label01;

        goto label02;

     label01:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r7[1] = r13;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot get secrets for account %s", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label02:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label03:
        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r2 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r2;

     label04:
        r3 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label05:
        r14 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r13, r1);

        exitmonitor r3;

     label06:
        exitmonitor r2;

     label07:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r14;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        throw $r11;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r10;

     label14:
        $r12 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r12;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public java.lang.String getPassword(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3, $i4;
        long l2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r7, $r8, $r17, r20;
        java.lang.SecurityException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        com.android.server.accounts.AccountManagerService$UserAccounts $r9;
        java.lang.StringBuilder $r10;
        java.lang.Throwable $r18;
        android.accounts.Account r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r19 := @parameter0: android.accounts.Account;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getPassword: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

     label1:
        if r19 == null goto label6;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = r19.<android.accounts.Account: java.lang.String type>;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r3, i0, i1);

        if $z1 == 0 goto label5;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r9 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r20 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>($r9, r19);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r20;

     label4:
        $r18 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r18;

     label5:
        $r4 = new java.lang.SecurityException;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = r19.<android.accounts.Account: java.lang.String type>;

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot get secrets for accounts of type: %s", $r5);

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.String getPreviousName(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i2, $i3;
        long l1;
        boolean $z0;
        com.android.server.accounts.AccountManagerService$UserAccounts $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r11, r14;
        java.lang.Throwable $r12;
        android.accounts.Account r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r13 := @parameter0: android.accounts.Account;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getPreviousName: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r11);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "account cannot be null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r14 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readPreviousNameInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>($r3, r13);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return r14;

     label4:
        $r12 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw $r12;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.accounts.AccountAndUser[] getRunningAccounts()
    {
        com.android.server.accounts.AccountManagerService r0;
        android.app.IActivityManager $r1;
        android.accounts.AccountAndUser[] $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int[] r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r5 = interfaceinvoke $r1.<android.app.IActivityManager: int[] getRunningUserIds()>();

     label2:
        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAccounts(int[])>(r5);

        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.Account[] getSharedAccountsAsUser(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        android.accounts.Account[] r2;
        com.android.server.accounts.AccountsDb $r3;
        java.lang.Throwable $r5;
        com.android.server.accounts.AccountManagerService$UserAccounts r6;
        java.util.List r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i0);

        r6 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i1);

        r1 = r6.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r1;

     label1:
        $r3 = r6.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r7 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb: java.util.List getSharedAccounts()>();

        $i2 = interfaceinvoke r7.<java.util.List: int size()>();

        r2 = newarray (android.accounts.Account)[$i2];

        interfaceinvoke r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i4;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3, $r7, $r13;
        java.lang.String $r6, $r10, $r19;
        java.lang.RuntimeException $r11;
        android.content.pm.PackageManager $r12;
        boolean $z0, $z2;
        android.app.IActivityManager $r20;
        com.android.server.accounts.AccountManagerService$UserAccounts r21;
        android.os.UserManager $r25;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

     label1:
        r21 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)>(i0);

     label2:
        return r21;

     label3:
        $r11 := @caughtexception;

        $r12 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $z0 = virtualinvoke $r12.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        if $z0 == 0 goto label9;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing user ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to exception (");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") reading its account database");

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("AccountManagerService", $r19);

        $i4 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        if i0 != $i4 goto label7;

        if i0 == 0 goto label7;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AccountManagerService", "Switching to system user first");

     label4:
        $r20 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r20.<android.app.IActivityManager: boolean switchUser(int)>(0);

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not switch to 0: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccountManagerService", $r6);

     label7:
        $r25 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $z2 = virtualinvoke $r25.<android.os.UserManager: boolean removeUserEvenWhenDisallowed(int)>(i0);

        if $z2 != 0 goto label8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not remove user ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccountManagerService", $r10);

     label8:
        throw $r11;

     label9:
        throw $r11;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.lang.String getUserData(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r5, $r9, $r10, $r16, $r20, r24;
        int i0, i1, $i4;
        long l2;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        boolean z0, $z1, $z2, $z3;
        java.lang.SecurityException $r6;
        java.lang.Object[] $r7, $r17;
        java.lang.Integer $r8, $r18, $r19;
        java.lang.StringBuilder $r11;
        java.lang.Throwable $r21;
        android.accounts.Account r22;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r22 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r17 = newarray (java.lang.Object)[4];

        $r17[0] = r22;

        $r17[1] = r1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17[2] = $r18;

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r17[3] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("getUserData( account: %s, key: %s, callerUid: %s, pid: %s", $r17);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r20);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r22, "account cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "key cannot be null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r22.<android.accounts.Account: java.lang.String type>;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r5, i0, i1);

        if $z2 == 0 goto label8;

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>(i1);

        if $z3 != 0 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data is locked. callingUid ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r16);

        return null;

     label2:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean accountExistsCache(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r2, r22);

     label4:
        if z0 != 0 goto label5;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return null;

     label5:
        r24 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readUserDataInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r2, r22, r1);

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r24;

     label7:
        $r21 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r21;

     label8:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = r22.<android.accounts.Account: java.lang.String type>;

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot get user data for accounts of type: %s", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    void grantAppPermission(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i3, $i5;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.Object r2, $r8, r16;
        long l1;
        java.lang.Exception $r3;
        com.android.server.accounts.AccountsDb $r4, $r11;
        byte $b4;
        com.android.server.accounts.AccountManagerService$NotificationId $r5;
        android.os.UserHandle $r6;
        java.util.concurrent.CopyOnWriteArrayList $r7;
        com.android.server.accounts._$$Lambda$AccountManagerService$nCdu9dc3c8qBwJIwS0ZQk2waXfY $r9;
        com.android.server.accounts.AccountManagerService$MessageHandler $r10;
        java.lang.Throwable $r12, $r13;
        android.accounts.Account r14;
        java.lang.String r15;
        java.util.Iterator r17;
        boolean $z1;
        android.accounts.AccountManagerInternal$OnAppPermissionChangeListener r18;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r14 := @parameter0: android.accounts.Account;

        r15 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r14 == null goto label17;

        if r15 != null goto label01;

        goto label17;

     label01:
        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i3);

        r16 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r16;

     label02:
        r2 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r2;

     label03:
        $r4 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l1 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r14);

     label04:
        $b4 = l1 cmp 0L;

        if $b4 < 0 goto label06;

     label05:
        $r11 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r11.<com.android.server.accounts.AccountsDb: long insertGrant(long,java.lang.String,int)>(l1, r15, i0);

     label06:
        $r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r14, r15, i0);

        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i5);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>($r5, $r6);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,boolean)>(r14, i0, 1);

        exitmonitor r2;

     label07:
        exitmonitor r16;

     label08:
        $r7 = r0.<com.android.server.accounts.AccountManagerService: java.util.concurrent.CopyOnWriteArrayList mAppPermissionChangeListeners>;

        r17 = virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r8 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (android.accounts.AccountManagerInternal$OnAppPermissionChangeListener) $r8;

        $r10 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler>;

        $r9 = new com.android.server.accounts._$$Lambda$AccountManagerService$nCdu9dc3c8qBwJIwS0ZQk2waXfY;

        specialinvoke $r9.<com.android.server.accounts._$$Lambda$AccountManagerService$nCdu9dc3c8qBwJIwS0ZQk2waXfY: void <init>(android.accounts.AccountManagerInternal$OnAppPermissionChangeListener,android.accounts.Account,int)>(r18, r14, i0);

        virtualinvoke $r10.<com.android.server.accounts.AccountManagerService$MessageHandler: boolean post(java.lang.Runnable)>($r9);

        goto label09;

     label10:
        return;

     label11:
        $r12 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r12;

     label14:
        $r13 := @caughtexception;

     label15:
        exitmonitor r16;

     label16:
        throw $r13;

     label17:
        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "grantAppPermission: called with invalid arguments", $r3);

        return;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean hasAccountAccess(android.accounts.Account, java.lang.String, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.UserHandle r1;
        int i0, $i1, $i2, $i4;
        boolean z0;
        java.lang.SecurityException $r2;
        android.content.pm.PackageManager $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r10, $r12, r14;
        android.accounts.Account r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r13 := @parameter0: android.accounts.Account;

        r14 := @parameter1: java.lang.String;

        r1 := @parameter2: android.os.UserHandle;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        if $i2 != 1000 goto label4;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "account cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "packageName cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "userHandle cannot be null");

        i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 2147483647, "user must be concrete");

     label1:
        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $i4 = virtualinvoke $r6.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r14, i0);

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,int)>(r13, r14, $i4);

     label2:
        return z0;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found ");

        $r10 = virtualinvoke $r7.<android.content.pm.PackageManager$NameNotFoundException: java.lang.String getMessage()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

        return 0;

     label4:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Can be called only by system UID");

        throw $r2;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public void hasFeatures(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String[] r2;
        int i0, i1, $i3;
        long l2;
        android.app.AppOpsManager $r3;
        boolean $z1, z2, z3, z4;
        java.lang.String $r4, $r11, $r17, r20;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r18;
        android.accounts.IAccountManagerResponse r19;
        com.android.server.accounts.AccountManagerService$UserAccounts r22;
        com.android.server.accounts.AccountManagerService$TestFeaturesSession r23;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r19 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String[];

        r20 := @parameter3: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r20);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hasFeatures: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", features ");

        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

     label01:
        if r1 == null goto label02;

        z2 = 1;

        goto label03;

     label02:
        z2 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "account cannot be null");

        if r19 == null goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "response cannot be null");

        if r2 == null goto label06;

        z4 = 1;

        goto label07;

     label06:
        z4 = 0;

     label07:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "features cannot be null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = r1.<android.accounts.Account: java.lang.String type>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermitted(int,java.lang.String,int,java.lang.String)>(i0, $r4, i1, r20);

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label08:
        r22 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r23 = new com.android.server.accounts.AccountManagerService$TestFeaturesSession;

        specialinvoke r23.<com.android.server.accounts.AccountManagerService$TestFeaturesSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>(r0, r22, r19, r1, r2);

        virtualinvoke r23.<com.android.server.accounts.AccountManagerService$TestFeaturesSession: void bind()>();

     label09:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label10:
        $r18 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r18;

        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void invalidateAuthToken(java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r14, $r23, r29;
        long l0;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.lang.Object r3, $r11, $r12, $r13, r31;
        java.util.Iterator r4;
        boolean $z0, $z1;
        com.android.server.accounts.AccountsDb $r7, $r8, $r9, $r27;
        com.android.server.accounts.TokenCache $r10;
        android.accounts.Account $r15;
        java.lang.StringBuilder $r16;
        int $i1, i3, i4;
        java.lang.Throwable $r24, $r25, $r26, $r28;
        java.util.List r32;
        android.util.Pair r33;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r29 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r29, "accountType cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "authToken cannot be null");

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalidateAuthToken: accountType ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r23);

     label01:
        i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label02:
        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i4);

        r31 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r31;

     label03:
        $r7 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r7.<com.android.server.accounts.AccountsDb: void beginTransaction()>();

     label04:
        r32 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.List invalidateAuthTokenLocked(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,java.lang.String)>(r2, r29, r1);

        $r8 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r8.<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>();

     label05:
        $r9 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r9.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label06:
        r3 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r3;

     label07:
        r4 = interfaceinvoke r32.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r33 = (android.util.Pair) $r11;

        $r12 = r33.<android.util.Pair: java.lang.Object first>;

        $r15 = (android.accounts.Account) $r12;

        $r13 = r33.<android.util.Pair: java.lang.Object second>;

        $r14 = (java.lang.String) $r13;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r2, $r15, $r14, null);

     label09:
        goto label08;

     label10:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache access$1300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        virtualinvoke $r10.<com.android.server.accounts.TokenCache: void remove(java.lang.String,java.lang.String)>(r29, r1);

        exitmonitor r3;

     label11:
        exitmonitor r31;

     label12:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return;

     label13:
        $r25 := @caughtexception;

     label14:
        exitmonitor r3;

     label15:
        throw $r25;

     label16:
        $r26 := @caughtexception;

     label17:
        $r27 = r2.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        virtualinvoke $r27.<com.android.server.accounts.AccountsDb: void endTransaction()>();

     label18:
        throw $r26;

     label19:
        $r24 := @caughtexception;

     label20:
        exitmonitor r31;

     label21:
        throw $r24;

     label22:
        $r28 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw $r28;

        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    public void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r7, $r8, $r18;
        int i0, $i2, $i3;
        long l1;
        com.android.server.accounts.AccountManagerService$16 r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        java.lang.StringBuilder $r9;
        java.lang.Throwable $r19;
        android.accounts.IAccountManagerResponse r20;
        com.android.server.accounts.AccountManagerService$UserAccounts r22;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r20 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isCredentialsUpdateSuggested: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r18);

     label1:
        if r20 == null goto label7;

        if r1 == null goto label6;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 != 0 goto label5;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        r22 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r3 = new com.android.server.accounts.AccountManagerService$16;

        $r8 = r1.<android.accounts.Account: java.lang.String type>;

        $r7 = r1.<android.accounts.Account: java.lang.String name>;

        specialinvoke r3.<com.android.server.accounts.AccountManagerService$16: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,android.accounts.Account,java.lang.String)>(r0, r22, r20, $r8, 0, 0, $r7, 0, r1, r2);

        virtualinvoke r3.<com.android.server.accounts.AccountManagerService$16: void bind()>();

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r19 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw $r19;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("status token is empty");

        throw $r6;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r5;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void lambda$new$0$AccountManagerService(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, i3, i4, $i5, i6, i7;
        java.lang.String[] r1;
        long l2;
        java.lang.String r2;
        boolean z0;
        android.content.pm.PackageManager $r3, $r4;
        android.accounts.Account $r5;
        java.lang.Throwable $r6;
        android.accounts.Account[] r7, r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r7 = null;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r1 == null goto label17;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        i3 = lengthof r1;

     label02:
        i6 = 0;

     label03:
        if i6 >= i3 goto label15;

        r2 = r1[i6];

     label04:
        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $i5 = virtualinvoke $r4.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>("android.permission.GET_ACCOUNTS", r2);

        if $i5 == 0 goto label06;

     label05:
        goto label14;

     label06:
        r8 = r7;

        if r7 != null goto label09;

     label07:
        r8 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>(null, i1, "android");

        z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r8);

     label08:
        if z0 == 0 goto label09;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label09:
        i4 = lengthof r8;

     label10:
        i7 = 0;

     label11:
        r7 = r8;

        if i7 >= i4 goto label14;

     label12:
        $r5 = r8[i7];

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,java.lang.String,boolean)>($r5, i0, r2, 1);

     label13:
        i7 = i7 + 1;

        goto label11;

     label14:
        i6 = i6 + 1;

        goto label03;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label17;

     label16:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r6;

     label17:
        return;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
    }

    public void lambda$onUnlockUser$1$AccountManagerService(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void syncSharedAccounts(int)>(i0);

        return;
    }

    public void lambda$removeAccountInternal$2$AccountManagerService(android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,boolean)>(r1, i0, 0);

        return;
    }

    public void onAccountAccessed(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i2, $i3, i4, i5;
        long l1;
        android.accounts.Account[] r1;
        android.accounts.Account r2;
        android.content.Context $r3;
        java.lang.String $r4, $r5, r7;
        boolean $z0, $z1;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r7 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i3 != 1000 goto label1;

        return;

     label1:
        i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int,java.lang.String)>(i4, $r4);

        i2 = lengthof r1;

     label3:
        i5 = 0;

     label4:
        if i5 >= i2 goto label7;

        r2 = r1[i5];

     label5:
        $r5 = virtualinvoke r2.<android.accounts.Account: java.lang.String getAccessId()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, r7);

        if $z0 == 0 goto label6;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,int)>(r2, null, i0);

        if $z1 != 0 goto label6;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>(r2, "com.android.AccountManager.ACCOUNT_ACCESS_TOKEN_TYPE", i0, 1);

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label8:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public android.os.IBinder onBind(android.content.Intent)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;
        android.os.IBinder $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.IBinder asBinder()>();

        return $r2;
    }

    public void onServiceChanged(android.accounts.AuthenticatorDescription, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        boolean z0;
        android.os.UserManager $r1;
        android.content.pm.UserInfo $r2;
        com.android.server.accounts.AccountManagerService$UserAccounts $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        android.accounts.AuthenticatorDescription r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r8 := @parameter0: android.accounts.AuthenticatorDescription;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r2 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        if $r2 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onServiceChanged: ignore removed user ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r7);

        return;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>($r3, 0);

        return;
    }

    public volatile void onServiceChanged(java.lang.Object, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.Object r1;
        int i0;
        boolean z0;
        android.accounts.AuthenticatorDescription $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = (android.accounts.AuthenticatorDescription) r1;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void onServiceChanged(android.accounts.AuthenticatorDescription,int,boolean)>($r2, i0, z0);

        return;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.accounts.AccountManagerServiceShellCommand $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.accounts.AccountManagerServiceShellCommand;

        specialinvoke $r7.<com.android.server.accounts.AccountManagerServiceShellCommand: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        virtualinvoke $r7.<com.android.server.accounts.AccountManagerServiceShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        android.os.Parcel r1, r3;
        boolean z0, $z1;
        java.lang.RuntimeException $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: android.os.Parcel;

        r1 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        z0 = specialinvoke r0.<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r3, r1, i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $z1 = $r2 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "Account Manager Crash", $r2);

     label4:
        throw $r2;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    void onUnlockUser(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        boolean $z0;
        android.util.SparseBooleanArray $r2;
        com.android.server.accounts._$$Lambda$AccountManagerService$ncg6hlXg7I0Ee1EZqbXw8fQH9bY $r3;
        com.android.server.accounts.AccountManagerService$MessageHandler $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        android.util.SparseArray r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onUserUnlocked ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r8);

     label1:
        r11 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        entermonitor r11;

     label2:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray mLocalUnlockedUsers>;

        virtualinvoke $r2.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        exitmonitor r11;

     label3:
        if i0 >= 1 goto label4;

        return;

     label4:
        $r4 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mHandler>;

        $r3 = new com.android.server.accounts._$$Lambda$AccountManagerService$ncg6hlXg7I0Ee1EZqbXw8fQH9bY;

        specialinvoke $r3.<com.android.server.accounts._$$Lambda$AccountManagerService$ncg6hlXg7I0Ee1EZqbXw8fQH9bY: void <init>(com.android.server.accounts.AccountManagerService,int)>(r0, i0);

        virtualinvoke $r4.<com.android.server.accounts.AccountManagerService$MessageHandler: boolean post(java.lang.Runnable)>($r3);

        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r11;

     label7:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void onUserUnlocked(android.content.Intent)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;
        int $i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.content.Intent;

        $i0 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.user_handle", -1);

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void onUnlockUser(int)>($i0);

        return;
    }

    public java.lang.String peekAuthToken(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r5, $r9, $r10, $r17, $r27, r31;
        int i0, i1, $i4;
        long l2;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        com.android.server.accounts.AccountManagerService$UserAccounts $r11;
        java.lang.StringBuilder $r12, $r18;
        java.lang.Throwable $r28;
        android.accounts.Account r29;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r29 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("peekAuthToken: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r27 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r27);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r29, "account cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "authTokenType cannot be null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r29.<android.accounts.Account: java.lang.String type>;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r5, i0, i1);

        if $z1 == 0 goto label6;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>(i1);

        if $z2 != 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authtoken not available - user ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data is locked. callingUid ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

        return null;

     label2:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        $r11 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r31 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>($r11, r29, r1);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r31;

     label5:
        $r28 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r28;

     label6:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = r29.<android.accounts.Account: java.lang.String type>;

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot peek the authtokens associated with accounts of type: %s", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected java.lang.String readAuthTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r20, r23;
        java.lang.Object r3, r4, $r6, $r8, $r9, $r13, r18;
        java.util.Map $r5, $r7, $r11, r19, r21, r22;
        com.android.server.accounts.AccountsDb $r10;
        java.lang.Throwable $r14, $r15, $r16;
        com.android.server.accounts.AccountManagerService$UserAccounts r17;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r17 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        r18 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r18;

     label01:
        $r5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r17);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r19 = (java.util.Map) $r6;

     label02:
        if r19 == null goto label05;

     label03:
        $r13 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r20 = (java.lang.String) $r13;

        exitmonitor r18;

     label04:
        return r20;

     label05:
        exitmonitor r18;

     label06:
        r3 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object dbLock>;

        entermonitor r3;

     label07:
        r4 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r4;

     label08:
        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r17);

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r21 = (java.util.Map) $r8;

     label09:
        r22 = r21;

        if r21 != null goto label11;

     label10:
        $r10 = r17.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r22 = virtualinvoke $r10.<com.android.server.accounts.AccountsDb: java.util.Map findAuthTokensByAccount(android.accounts.Account)>(r1);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r17);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r22);

     label11:
        $r9 = interfaceinvoke r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r23 = (java.lang.String) $r9;

        exitmonitor r4;

     label12:
        exitmonitor r3;

     label13:
        return r23;

     label14:
        $r16 := @caughtexception;

     label15:
        exitmonitor r4;

     label16:
        throw $r16;

     label17:
        $r15 := @caughtexception;

     label18:
        exitmonitor r3;

     label19:
        throw $r15;

     label20:
        $r14 := @caughtexception;

     label21:
        exitmonitor r18;

     label22:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    protected java.lang.String readCachedTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String, byte[])
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r3, r9;
        byte[] r4;
        java.lang.Object r5;
        com.android.server.accounts.TokenCache $r6;
        java.lang.Throwable $r7;
        com.android.server.accounts.AccountManagerService$UserAccounts r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r8 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: byte[];

        r5 = r8.<com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object cacheLock>;

        entermonitor r5;

     label1:
        $r6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache access$1300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r8);

        r9 = virtualinvoke $r6.<com.android.server.accounts.TokenCache: java.lang.String get(android.accounts.Account,java.lang.String,java.lang.String,byte[])>(r1, r2, r3, r4);

        exitmonitor r5;

     label2:
        return r9;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r5;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void registerAccountListener(java.lang.String[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        long l0;
        android.app.AppOpsManager $r2;
        com.android.server.accounts.AccountManagerService$UserAccounts $r3;
        java.lang.Throwable $r4;
        java.lang.String[] r5;
        int i1, i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r5 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r2.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r1);

        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i2);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void registerAccountListener(java.lang.String[],java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r5, r1, $r3);

     label2:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeAccountAsUser(android.accounts.IAccountManagerResponse, android.accounts.Account, boolean, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, $z10, z11;
        int i0, i1, $i4, $i5, $i6;
        android.os.UserHandle r2;
        long l2, l3;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        java.util.Iterator r4;
        android.util.Pair r5, $r20;
        java.lang.SecurityException $r6, $r25;
        java.lang.Object[] $r7, $r26;
        java.lang.Integer $r8, $r9, $r27;
        java.lang.String $r10, $r11, $r12, $r17, $r28, $r29, $r41;
        com.android.server.accounts.AccountManagerService$NotificationId $r13, $r24;
        java.util.HashMap $r14, $r22, r52;
        java.util.Set $r15;
        com.android.server.accounts.AccountsDb $r16;
        java.lang.Object $r18, $r19, $r21, $r23;
        java.lang.StringBuilder $r30;
        android.os.RemoteException $r42, $r47;
        java.lang.Throwable $r43, $r44, $r45, $r46, r53;
        android.accounts.IAccountManagerResponse r48;
        com.android.server.accounts.AccountManagerService$RemoveAccountSession r54;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r48 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.accounts.Account;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeAccount: ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for user id ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r41 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r41);

     label01:
        if r1 == null goto label02;

        z8 = 1;

        goto label03;

     label02:
        z8 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z8, "account cannot be null");

        if r48 == null goto label04;

        z9 = 1;

        goto label05;

     label04:
        z9 = 0;

     label05:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z9, "response cannot be null");

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isCrossUser(int,int)>(i1, i0);

        if $z2 != 0 goto label33;

        r2 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r11 = r1.<android.accounts.Account: java.lang.String type>;

        $i5 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r11, i1, $i5);

        if $z3 != 0 goto label07;

        $z6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSystemUid(int)>(i1);

        if $z6 != 0 goto label07;

        $z7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isProfileOwner(int)>(i1);

        if $z7 == 0 goto label06;

        goto label07;

     label06:
        $r25 = new java.lang.SecurityException;

        $r26 = newarray (java.lang.Object)[2];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r26[0] = $r27;

        $r28 = r1.<android.accounts.Account: java.lang.String type>;

        $r26[1] = $r28;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot remove accounts of type: %s", $r26);

        specialinvoke $r25.<java.lang.SecurityException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label07:
        $z10 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int,int)>(i0, i1);

        if $z10 != 0 goto label12;

     label08:
        interfaceinvoke r48.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(100, "User cannot modify accounts");

     label09:
        goto label11;

     label10:
        $r47 := @caughtexception;

     label11:
        return;

     label12:
        $r12 = r1.<android.accounts.Account: java.lang.String type>;

        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String,int)>(i0, $r12, i1);

        if $z4 != 0 goto label17;

     label13:
        interfaceinvoke r48.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label14:
        goto label16;

     label15:
        $r42 := @caughtexception;

     label16:
        return;

     label17:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        $r13 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r3, r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>($r13, r2);

        r52 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        entermonitor r52;

     label18:
        $r14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        z11 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

     label20:
        if z11 == 0 goto label24;

     label21:
        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.util.Pair) $r18;

        $r19 = r5.<android.util.Pair: java.lang.Object first>;

        $r20 = (android.util.Pair) $r19;

        $r21 = $r20.<android.util.Pair: java.lang.Object first>;

        $z5 = virtualinvoke r1.<android.accounts.Account: boolean equals(java.lang.Object)>($r21);

        if $z5 == 0 goto label22;

        $r22 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        $r23 = virtualinvoke $r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        $r24 = (com.android.server.accounts.AccountManagerService$NotificationId) $r23;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>($r24, r2);

     label22:
        goto label19;

     label23:
        $r46 := @caughtexception;

        r53 = $r46;

        goto label30;

     label24:
        exitmonitor r52;

     label25:
        $r16 = r3.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l3 = virtualinvoke $r16.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r1);

        $r17 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_REMOVE>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>($r17, "accounts", l3, r3, i1);

     label26:
        r54 = new com.android.server.accounts.AccountManagerService$RemoveAccountSession;

        specialinvoke r54.<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,android.accounts.Account,boolean)>(r0, r3, r48, r1, z0);

        virtualinvoke r54.<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void bind()>();

     label27:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label28:
        $r44 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r44;

     label29:
        $r43 := @caughtexception;

        r53 = $r43;

     label30:
        exitmonitor r52;

     label31:
        throw r53;

     label32:
        $r45 := @caughtexception;

        r53 = $r45;

        goto label30;

     label33:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[2];

        $i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %s tying remove account for %s", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r6;

        catch android.os.RemoteException from label08 to label09 with label10;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label30 to label31 with label32;
    }

    public boolean removeAccountExplicitly(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3;
        boolean z0, $z1, $z2;
        android.os.UserHandle $r1;
        java.lang.String $r2, $r6, $r7, $r9, $r17;
        java.lang.SecurityException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        com.android.server.accounts.AccountsDb $r8;
        java.lang.StringBuilder $r10;
        java.lang.Throwable $r18;
        android.accounts.Account r19;
        com.android.server.accounts.AccountManagerService$UserAccounts r21;
        long l5, l6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r19 := @parameter0: android.accounts.Account;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeAccountExplicitly: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

     label1:
        $r1 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i1 = virtualinvoke $r1.<android.os.UserHandle: int getIdentifier()>();

        if r19 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManagerService", "account is null");

        return 0;

     label2:
        $r2 = r19.<android.accounts.Account: java.lang.String type>;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r2, i0, i1);

        if $z2 == 0 goto label6;

        r21 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        $r8 = r21.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l5 = virtualinvoke $r8.<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>(r19);

        $r9 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_REMOVE>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>($r9, "accounts", l5, r21, i0);

        l6 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,int)>(r21, r19, i0);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l6);

        return z0;

     label5:
        $r18 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l6);

        throw $r18;

     label6:
        $r3 = new java.lang.SecurityException;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = r19.<android.accounts.Account: java.lang.String type>;

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot explicitly remove accounts of type: %s", $r4);

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r3;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected void removeAccountInternal(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountManagerService$UserAccounts $r2;
        int $i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        $i0 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,int)>($r2, r1, $i0);

        return;
    }

    public boolean removeSharedAccountAsUser(android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeSharedAccountAsUser(android.accounts.Account,int,int)>(r1, i0, $i1);

        return $z0;
    }

    public void renameAccount(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, $i3;
        long l2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r7, $r8, $r10, $r11, $r12, $r22, $r24, r28;
        java.lang.SecurityException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        com.android.server.accounts.AccountManagerService$UserAccounts $r9;
        java.lang.StringBuilder $r13;
        android.os.RemoteException $r23;
        java.lang.Throwable $r25;
        android.accounts.IAccountManagerResponse r26;
        android.accounts.Account r27, r29;
        android.os.Bundle r30;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r26 := @parameter0: android.accounts.IAccountManagerResponse;

        r27 := @parameter1: android.accounts.Account;

        r28 := @parameter2: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("renameAccount: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r22);

     label01:
        if r27 == null goto label10;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = r27.<android.accounts.Account: java.lang.String type>;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r3, i0, i1);

        if $z1 == 0 goto label09;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label02:
        $r9 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r29 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account renameAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>($r9, r27, r28);

        r30 = new android.os.Bundle;

        specialinvoke r30.<android.os.Bundle: void <init>()>();

        $r10 = r29.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r30.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authAccount", $r10);

        $r11 = r29.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r30.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("accountType", $r11);

        $r12 = virtualinvoke r29.<android.accounts.Account: java.lang.String getAccessId()>();

        virtualinvoke r30.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("accountAccessId", $r12);

     label03:
        interfaceinvoke r26.<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>(r30);

     label04:
        goto label07;

     label05:
        $r23 := @caughtexception;

     label06:
        $r24 = virtualinvoke $r23.<android.os.RemoteException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r24);

     label07:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label08:
        $r25 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r25;

     label09:
        $r4 = new java.lang.SecurityException;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = r27.<android.accounts.Account: java.lang.String type>;

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot rename accounts of type: %s", $r5);

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    public boolean renameSharedAccountAsUser(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r6;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l0;
        int i1, $i2, i3, i4;
        com.android.server.accounts.AccountsDb $r4, $r5;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        $i2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i3);

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i2);

        $r4 = r3.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        l0 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb: long findSharedAccountId(android.accounts.Account)>(r1);

        $r5 = r3.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        i1 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb: int renameSharedAccount(android.accounts.Account,java.lang.String)>(r1, r2);

        if i1 <= 0 goto label1;

        i4 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        $r6 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_RENAME>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>($r6, "shared_accounts", l0, r3, i4);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account renameAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r3, r1, r2);

     label1:
        if i1 <= 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    public boolean setAccountVisibility(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r4, $r9, $r10;
        int i0, i1, i2;
        long l3;
        boolean z0, $z1, $z2;
        com.android.server.accounts.AccountManagerService$UserAccounts $r5;
        java.lang.SecurityException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.Throwable $r11;
        android.accounts.Account r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r12 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "account cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName cannot be null");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = r12.<android.accounts.Account: java.lang.String type>;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r4, i1, i2);

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isSystemUid(int)>(i1);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[0] = $r8;

        $r9 = r12.<android.accounts.Account: java.lang.String type>;

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot get secrets for accounts of type: %s", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        l3 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        $r5 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i2);

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int,boolean,com.android.server.accounts.AccountManagerService$UserAccounts)>(r12, r1, i0, 1, $r5);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        return z0;

     label5:
        $r11 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        throw $r11;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setAuthToken(android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r6, $r10, $r11, $r22;
        int i0, i1, $i3;
        long l2;
        boolean $z0, $z1;
        java.lang.SecurityException $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;
        com.android.server.accounts.AccountManagerService$UserAccounts $r12;
        java.lang.StringBuilder $r13;
        java.lang.Throwable $r23;
        android.accounts.Account r24;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r24 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAuthToken: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r22);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r24, "account cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "authTokenType cannot be null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r6 = r24.<android.accounts.Account: java.lang.String type>;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r6, i0, i1);

        if $z1 == 0 goto label5;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r12 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean saveAuthTokenToDatabase(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>($r12, r24, r1, r2);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label4:
        $r23 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r23;

     label5:
        $r7 = new java.lang.SecurityException;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[0] = $r9;

        $r10 = r24.<android.accounts.Account: java.lang.String type>;

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot set auth tokens associated with accounts of type: %s", $r8);

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    void setBindInstantServiceAllowed(int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        boolean z0;
        com.android.server.accounts.IAccountAuthenticatorCache $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        interfaceinvoke $r1.<com.android.server.accounts.IAccountAuthenticatorCache: void setBindInstantServiceAllowed(int,boolean)>(i0, z0);

        return;
    }

    public void setPassword(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r4, $r8, $r9, $r18;
        int i0, i1, $i3;
        long l2;
        boolean $z0, $z1;
        java.lang.SecurityException $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        com.android.server.accounts.AccountManagerService$UserAccounts $r10;
        java.lang.StringBuilder $r11;
        java.lang.Throwable $r19;
        android.accounts.Account r20;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r20 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAuthToken: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r18);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r20, "account cannot be null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = r20.<android.accounts.Account: java.lang.String type>;

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r4, i0, i1);

        if $z1 == 0 goto label5;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r10 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void setPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,int)>($r10, r20, r1, i0);

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label4:
        $r19 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r19;

     label5:
        $r5 = new java.lang.SecurityException;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        $r8 = r20.<android.accounts.Account: java.lang.String type>;

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot set secrets for accounts of type: %s", $r6);

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void setUserData(android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r5, $r9, $r10, $r20;
        int i0, i1, $i3;
        long l2;
        boolean z0, $z1, $z2;
        java.lang.IllegalArgumentException $r3, $r4;
        java.lang.SecurityException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.StringBuilder $r11;
        java.lang.Throwable $r21;
        android.accounts.Account r22;
        com.android.server.accounts.AccountManagerService$UserAccounts r24;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r22 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setUserData: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", key ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r20 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r20);

     label1:
        if r1 == null goto label9;

        if r22 == null goto label8;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r22.<android.accounts.Account: java.lang.String type>;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>($r5, i0, i1);

        if $z2 == 0 goto label7;

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        r24 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean accountExistsCache(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r24, r22);

     label3:
        if z0 != 0 goto label4;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label4:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void setUserdataInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r24, r22, r1, r2);

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label6:
        $r21 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw $r21;

     label7:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = r22.<android.accounts.Account: java.lang.String type>;

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("uid %s cannot set user data for accounts of type: %s", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r4;

     label9:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key is null");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public boolean someUserHasAccount(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        long l0;
        android.accounts.AccountAndUser[] r1;
        boolean z0, $z1;
        int $i1, $i2, i3;
        java.lang.SecurityException $r2;
        android.accounts.AccountAndUser $r3;
        android.accounts.Account $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r6 := @parameter0: android.accounts.Account;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(1000, $i1);

        if $z1 == 0 goto label8;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()>();

        $i2 = lengthof r1;

        i3 = $i2 - 1;

     label2:
        if i3 < 0 goto label6;

     label3:
        $r3 = r1[i3];

        $r4 = $r3.<android.accounts.AccountAndUser: android.accounts.Account account>;

        z0 = virtualinvoke $r4.<android.accounts.Account: boolean equals(java.lang.Object)>(r6);

     label4:
        if z0 == 0 goto label5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label5:
        i3 = i3 + -1;

        goto label2;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

     label8:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Only system can check for accounts across users");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public void startAddAccountSession(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, java.lang.String[], boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r6, $r8, $r18, $r26;
        java.lang.String[] r3, $r7;
        boolean z0, $z2, $z3, $z4, z5, z6, z7;
        int i0, i1, i2, $i4, $i5;
        long l3;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        android.os.Bundle $r9, r32;
        java.lang.StringBuilder $r10;
        java.lang.Throwable $r27, $r28, r37;
        android.os.RemoteException $r29, $r30;
        android.accounts.IAccountManagerResponse r31;
        com.android.server.accounts.AccountManagerService$11 r36;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r31 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        r32 := @parameter5: android.os.Bundle;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r32, 1);

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z2 == 0 goto label01;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startAddAccountSession: accountType ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requiredFeatures ");

        $r18 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r26 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r26);

        goto label01;

     label01:
        if r31 == null goto label02;

        z5 = 1;

        goto label03;

     label02:
        z5 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "response cannot be null");

        if r1 == null goto label04;

        z6 = 1;

        goto label05;

     label04:
        z6 = 0;

     label05:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z6, "accountType cannot be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int,int)>(i1, i0);

        if $z3 != 0 goto label10;

     label06:
        interfaceinvoke r31.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(100, "User is not allowed to add an account!");

     label07:
        goto label09;

     label08:
        $r30 := @caughtexception;

     label09:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(100, i1);

        return;

     label10:
        $z4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String,int)>(i1, r1, i0);

        if $z4 != 0 goto label15;

     label11:
        interfaceinvoke r31.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label12:
        goto label14;

     label13:
        $r29 := @caughtexception;

     label14:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(101, i1);

        return;

     label15:
        i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if r32 != null goto label16;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        r32 = $r9;

        goto label16;

     label16:
        virtualinvoke r32.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i0);

        virtualinvoke r32.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", i2);

        $r6 = virtualinvoke r32.<android.os.Bundle: java.lang.String getString(java.lang.String)>("androidPackageName");

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "android.permission.GET_PASSWORD";

        z7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean checkPermissionAndNote(java.lang.String,int,java.lang.String[])>($r6, i0, $r7);

        l3 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label17:
        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        $r8 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_START_ACCOUNT_ADD>;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void logRecordWithUid(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,java.lang.String,int)>(r4, $r8, "accounts", i0);

        r36 = new com.android.server.accounts.AccountManagerService$11;

     label18:
        specialinvoke r36.<com.android.server.accounts.AccountManagerService$11: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,java.lang.String,boolean,boolean,boolean,java.lang.String,java.lang.String[],android.os.Bundle,java.lang.String)>(r0, r4, r31, r1, z0, null, 0, 1, z7, r2, r3, r32, r1);

        virtualinvoke r36.<com.android.server.accounts.AccountManagerService$11: void bind()>();

     label19:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        return;

     label20:
        $r27 := @caughtexception;

        r37 = $r27;

        goto label22;

     label21:
        $r28 := @caughtexception;

        r37 = $r28;

     label22:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        throw r37;

        catch android.os.RemoteException from label06 to label07 with label08;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    public void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r6, $r10, $r25, r30;
        boolean z0, z1, $z2;
        android.os.Bundle r3;
        int i0, i1, $i3, $i4;
        long l2;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        com.android.server.accounts.AccountManagerService$15 r5;
        java.lang.IllegalArgumentException $r8, $r9;
        java.lang.String[] $r11;
        java.lang.StringBuilder $r12;
        java.lang.Throwable $r26, $r27, r31;
        android.accounts.IAccountManagerResponse r28;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r28 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r3 := @parameter4: android.os.Bundle;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r3, 1);

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z2 == 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUpdateCredentialsSession: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r25 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r25);

        goto label1;

     label1:
        if r28 == null goto label9;

        if r1 == null goto label8;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r10 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("androidPackageName");

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "android.permission.GET_PASSWORD";

        z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean checkPermissionAndNote(java.lang.String,int,java.lang.String[])>($r10, i0, $r11);

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        r5 = new com.android.server.accounts.AccountManagerService$15;

        r6 = r1.<android.accounts.Account: java.lang.String type>;

        r30 = r1.<android.accounts.Account: java.lang.String name>;

     label3:
        specialinvoke r5.<com.android.server.accounts.AccountManagerService$15: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,java.lang.String,boolean,boolean,boolean,android.accounts.Account,java.lang.String,android.os.Bundle)>(r0, r4, r28, r6, z0, r30, 0, 1, z1, r1, r2, r3);

        virtualinvoke r5.<com.android.server.accounts.AccountManagerService$15: void bind()>();

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return;

     label5:
        $r26 := @caughtexception;

        r31 = $r26;

        goto label7;

     label6:
        $r27 := @caughtexception;

        r31 = $r27;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r31;

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r9;

     label9:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void unregisterAccountListener(java.lang.String[], java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        long l0;
        android.app.AppOpsManager $r2;
        com.android.server.accounts.AccountManagerService$UserAccounts $r3;
        java.lang.Throwable $r4;
        java.lang.String[] r5;
        int i1, i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r5 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r2.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r1);

        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i2);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void unregisterAccountListener(java.lang.String[],java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>(r5, r1, $r3);

     label2:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void updateAppPermission(android.accounts.Account, java.lang.String, int, boolean) throws android.os.RemoteException
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0, $i1, $i2;
        boolean z0;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        if $i2 != 1000 goto label3;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void grantAppPermission(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void revokeAppPermission(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

     label2:
        return;

     label3:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>()>();

        throw $r3;
    }

    public void updateCredentials(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r5, r6, $r23;
        boolean z0, $z1;
        android.os.Bundle r3;
        int i0, $i2, $i3;
        long l1;
        com.android.server.accounts.AccountManagerService$14 r4;
        java.lang.IllegalArgumentException $r8, $r9;
        java.lang.StringBuilder $r10;
        java.lang.Throwable $r24, $r25, r29;
        android.accounts.IAccountManagerResponse r26;
        com.android.server.accounts.AccountManagerService$UserAccounts r28;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r26 := @parameter0: android.accounts.IAccountManagerResponse;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r3 := @parameter4: android.os.Bundle;

        staticinvoke <android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>(r3, 1);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateCredentials: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r23);

        goto label1;

     label1:
        if r26 == null goto label9;

        if r1 == null goto label8;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        r28 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r4 = new com.android.server.accounts.AccountManagerService$14;

        r5 = r1.<android.accounts.Account: java.lang.String type>;

        r6 = r1.<android.accounts.Account: java.lang.String name>;

     label3:
        specialinvoke r4.<com.android.server.accounts.AccountManagerService$14: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean,android.accounts.Account,java.lang.String,android.os.Bundle)>(r0, r28, r26, r5, z0, 1, r6, 0, 1, r1, r2, r3);

        virtualinvoke r4.<com.android.server.accounts.AccountManagerService$14: void bind()>();

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r24 := @caughtexception;

        r29 = $r24;

        goto label7;

     label6:
        $r25 := @caughtexception;

        r29 = $r25;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r29;

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r9;

     label9:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void validateAccounts(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        com.android.server.accounts.AccountManagerService$UserAccounts $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>($r1, 1);

        return;
    }

    protected void writeAuthTokenIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r4;
        java.util.Map r5, $r6, $r11, r13;
        java.lang.Object $r7;
        com.android.server.accounts.AccountsDb $r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.util.Map) $r7;

        r13 = r5;

        if r5 != null goto label1;

        $r10 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r13 = virtualinvoke $r10.<com.android.server.accounts.AccountsDb: java.util.Map findAuthTokensByAccount(android.accounts.Account)>(r2);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1200(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r13);

     label1:
        if r4 != null goto label2;

        interfaceinvoke r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        goto label3;

     label2:
        interfaceinvoke r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label3:
        return;
    }

    protected void writeUserDataIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r4;
        java.util.Map r5, $r6, $r11, r13;
        java.lang.Object $r7;
        com.android.server.accounts.AccountsDb $r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.util.Map) $r7;

        r13 = r5;

        if r5 != null goto label1;

        $r10 = r1.<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountsDb accountsDb>;

        r13 = virtualinvoke $r10.<com.android.server.accounts.AccountsDb: java.util.Map findUserExtrasForAccount(android.accounts.Account)>(r2);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map access$1100(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r13);

     label1:
        if r4 != null goto label2;

        interfaceinvoke r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        goto label3;

     label2:
        interfaceinvoke r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label3:
        return;
    }
}
