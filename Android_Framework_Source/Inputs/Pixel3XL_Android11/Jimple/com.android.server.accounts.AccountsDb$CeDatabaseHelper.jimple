class com.android.server.accounts.AccountsDb$CeDatabaseHelper extends android.database.sqlite.SQLiteOpenHelper
{

    void <init>(android.content.Context, java.lang.String)
    {
        com.android.server.accounts.AccountsDb$CeDatabaseHelper r0;
        android.content.Context r1;
        java.lang.String r2;

        r0 := @this: com.android.server.accounts.AccountsDb$CeDatabaseHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(r1, r2, null, 10);

        return;
    }

    static com.android.server.accounts.AccountsDb$CeDatabaseHelper create(android.content.Context, java.io.File, java.io.File)
    {
        java.io.File r0, r20;
        boolean z0, $z2, $z3, $z4, $z5, z6;
        java.lang.StringBuilder $r3, $r7, $r11;
        java.lang.String $r6, $r10, $r18, $r22;
        android.content.Context r19;
        com.android.server.accounts.AccountsDb$CeDatabaseHelper $r21;

        r19 := @parameter0: android.content.Context;

        r0 := @parameter1: java.io.File;

        r20 := @parameter2: java.io.File;

        z0 = virtualinvoke r20.<java.io.File: boolean exists()>();

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountsDb", 2);

        if $z2 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CeDatabaseHelper.create ceDatabaseFile=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" oldDbExists=");

        $z5 = virtualinvoke r0.<java.io.File: boolean exists()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newDbExists=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r18 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountsDb", $r18);

     label1:
        z6 = 0;

        if z0 != 0 goto label2;

        z6 = 0;

        $z4 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label2;

        z6 = staticinvoke <com.android.server.accounts.AccountsDb$CeDatabaseHelper: boolean migratePreNDbToCe(java.io.File,java.io.File)>(r0, r20);

     label2:
        $r21 = new com.android.server.accounts.AccountsDb$CeDatabaseHelper;

        $r22 = virtualinvoke r20.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r21.<com.android.server.accounts.AccountsDb$CeDatabaseHelper: void <init>(android.content.Context,java.lang.String)>(r19, $r22);

        virtualinvoke $r21.<com.android.server.accounts.AccountsDb$CeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r21.<com.android.server.accounts.AccountsDb$CeDatabaseHelper: void close()>();

        if z6 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Migration complete - removing pre-N db ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AccountsDb", $r6);

        $z3 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>(r0);

        if $z3 != 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove pre-N db ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccountsDb", $r10);

     label3:
        return $r21;
    }

    private void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$CeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$CeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" CREATE TRIGGER accountsDelete DELETE ON accounts BEGIN   DELETE FROM authtokens     WHERE accounts_id=OLD._id ;   DELETE FROM extras     WHERE accounts_id=OLD._id ; END");

        return;
    }

    private static boolean migratePreNDbToCe(java.io.File, java.io.File)
    {
        java.io.File r0, r1;
        java.lang.StringBuilder $r3, $r10;
        java.lang.String $r8, $r15;
        java.lang.Throwable $r9;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Moving pre-N DB ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to CE ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AccountsDb", $r8);

     label1:
        staticinvoke <android.os.FileUtils: void copyFileOrThrow(java.io.File,java.io.File)>(r0, r1);

     label2:
        return 1;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot copy file to ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountsDb", $r15, $r9);

        staticinvoke <com.android.server.accounts.AccountsDb: void deleteDbFileWarnIfFailed(java.io.File)>(r1);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$CeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;

        r0 := @this: com.android.server.accounts.AccountsDb$CeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating CE database ");

        $r5 = virtualinvoke r0.<com.android.server.accounts.AccountsDb$CeDatabaseHelper: java.lang.String getDatabaseName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountsDb", $r7);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE accounts ( _id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, type TEXT NOT NULL, password TEXT, UNIQUE(name,type))");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE authtokens (  _id INTEGER PRIMARY KEY AUTOINCREMENT,  accounts_id INTEGER NOT NULL, type TEXT NOT NULL,  authtoken TEXT,  UNIQUE (accounts_id,type))");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE extras ( _id INTEGER PRIMARY KEY AUTOINCREMENT, accounts_id INTEGER, key TEXT NOT NULL, value TEXT, UNIQUE(accounts_id,key))");

        specialinvoke r0.<com.android.server.accounts.AccountsDb$CeDatabaseHelper: void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.accounts.AccountsDb$CeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;

        r0 := @this: com.android.server.accounts.AccountsDb$CeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", "onDowngrade: recreate accounts CE table");

        staticinvoke <com.android.server.accounts.AccountsDb: void access$100(android.database.sqlite.SQLiteDatabase)>(r1);

        virtualinvoke r0.<com.android.server.accounts.AccountsDb$CeDatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$CeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountsDb$CeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountsDb", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountsDb", "opened database accounts_ce.db");

     label1:
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.accounts.AccountsDb$CeDatabaseHelper r0;
        int i0, i1, i5;
        java.lang.StringBuilder $r1, $r7, $r13;
        java.lang.String $r6, $r12, $r15, $r17;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase r18;

        r0 := @this: com.android.server.accounts.AccountsDb$CeDatabaseHelper;

        r18 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrade CE from version ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountsDb", $r6);

        i5 = i0;

        if i0 != 9 goto label2;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountsDb", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountsDb", "onUpgrade upgrading to v10");

     label1:
        virtualinvoke r18.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS meta");

        virtualinvoke r18.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS shared_accounts");

        virtualinvoke r18.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TRIGGER IF EXISTS accountsDelete");

        specialinvoke r0.<com.android.server.accounts.AccountsDb$CeDatabaseHelper: void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)>(r18);

        virtualinvoke r18.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS grants");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r15 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$000()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r18.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r17);

        i5 = i0 + 1;

     label2:
        if i5 == i1 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to upgrade version ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", $r12);

     label3:
        return;
    }
}
