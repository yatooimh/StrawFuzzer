class com.android.server.accounts.AccountsDb$DeDatabaseHelper extends android.database.sqlite.SQLiteOpenHelper
{
    private volatile boolean mCeAttached;
    private final int mUserId;

    private void <init>(android.content.Context, int, java.lang.String)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.content.Context r1;
        int i0;
        java.lang.String r2;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(r1, r2, null, 3);

        r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: int mUserId> = i0;

        return;
    }

    void <init>(android.content.Context, int, java.lang.String, com.android.server.accounts.AccountsDb$1)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.content.Context r1;
        int i0;
        java.lang.String r2;
        com.android.server.accounts.AccountsDb$1 r3;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.server.accounts.AccountsDb$1;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void <init>(android.content.Context,int,java.lang.String)>(r1, i0, r2);

        return;
    }

    static boolean access$700(com.android.server.accounts.AccountsDb$DeDatabaseHelper)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        $z0 = r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: boolean mCeAttached>;

        return $z0;
    }

    static boolean access$702(com.android.server.accounts.AccountsDb$DeDatabaseHelper, boolean)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        boolean z0;

        r0 := @parameter0: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        z0 := @parameter1: boolean;

        r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: boolean mCeAttached> = z0;

        return z0;
    }

    static void access$900(com.android.server.accounts.AccountsDb$DeDatabaseHelper, java.io.File)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        java.io.File r1;

        r0 := @parameter0: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter1: java.io.File;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void migratePreNDbToDe(java.io.File)>(r1);

        return;
    }

    private void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" CREATE TRIGGER accountsDelete DELETE ON accounts BEGIN   DELETE FROM grants     WHERE accounts_id=OLD._id ; END");

        return;
    }

    private void createAccountsDeletionVisibilityCleanupTrigger(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" CREATE TRIGGER accountsDeleteVisibility DELETE ON accounts BEGIN   DELETE FROM visibility     WHERE accounts_id=OLD._id ; END");

        return;
    }

    private void createAccountsVisibilityTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE visibility ( accounts_id INTEGER NOT NULL, _package TEXT NOT NULL, value INTEGER, PRIMARY KEY(accounts_id,_package))");

        return;
    }

    static void createDebugTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.StringBuilder $r1, $r24;
        java.lang.String $r3, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE ");

        $r3 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$000()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ( ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER,");

        $r8 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$200()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT NOT NULL, ");

        $r11 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$300()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DATETIME,");

        $r14 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$400()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER NOT NULL,");

        $r17 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$500()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT NOT NULL,");

        $r20 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$600()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER PRIMARY KEY)");

        $r23 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE INDEX timestamp_index ON ");

        $r26 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$000()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r29 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$300()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r32 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r32);

        return;
    }

    private void createGrantsTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE grants (  accounts_id INTEGER NOT NULL, auth_token_type STRING NOT NULL,  uid INTEGER NOT NULL,  UNIQUE (accounts_id,auth_token_type,uid))");

        return;
    }

    private void createSharedAccountsTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE shared_accounts ( _id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, type TEXT NOT NULL, UNIQUE(name,type))");

        return;
    }

    private void migratePreNDbToDe(java.io.File)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        java.lang.StringBuilder $r2, $r6, $r12;
        java.lang.String $r5, $r8, $r11, $r14, $r19, $r22, $r25, $r28, $r31, $r36, $r39, $r42, $r45, $r48, $r51, $r53;
        java.io.File r54;
        android.database.sqlite.SQLiteDatabase r56;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r54 := @parameter0: java.io.File;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Migrate pre-N database to DE preNDbFile=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountsDb", $r5);

        r56 = virtualinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ATTACH DATABASE \'");

        $r8 = virtualinvoke r54.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' AS preNDb");

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r11);

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO accounts(_id,name,type, previous_name, last_password_entry_time_millis_epoch) SELECT _id,name,type, previous_name, last_password_entry_time_millis_epoch FROM preNDb.accounts");

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO shared_accounts(_id,name,type) SELECT _id,name,type FROM preNDb.shared_accounts");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT INTO ");

        $r14 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$000()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r19 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$200()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r22 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$300()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r25 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$400()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r28 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$500()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r31 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$600()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") SELECT ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r36 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$200()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r39 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$300()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r42 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$400()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r45 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$500()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r48 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$600()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM preNDb.");

        $r51 = staticinvoke <com.android.server.accounts.AccountsDb: java.lang.String access$000()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r53);

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO grants(accounts_id,auth_token_type,uid) SELECT accounts_id,auth_token_type,uid FROM preNDb.grants");

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO meta(key,value) SELECT key,value FROM preNDb.meta");

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DETACH DATABASE preNDb");

        return;
    }

    public android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.StringBuilder $r3;
        int $i0;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        $z0 = r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: boolean mCeAttached>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getReadableDatabaseUserIsUnlocked called while user ");

        $i0 = r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: int mUserId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is still locked. CE database is not yet available.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.Throwable;

        specialinvoke $r8.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountsDb", $r7, $r8);

     label1:
        $r2 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        return $r2;
    }

    public android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.StringBuilder $r3;
        int $i0;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        $z0 = r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: boolean mCeAttached>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getWritableDatabaseUserIsUnlocked called while user ");

        $i0 = r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: int mUserId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is still locked. CE database is not yet available.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.Throwable;

        specialinvoke $r8.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountsDb", $r7, $r8);

     label1:
        $r2 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        return $r2;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.StringBuilder $r3;
        int $i0;
        java.lang.String $r6;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating DE database for user ");

        $i0 = r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: int mUserId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountsDb", $r6);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE accounts ( _id INTEGER PRIMARY KEY, name TEXT NOT NULL, type TEXT NOT NULL, previous_name TEXT, last_password_entry_time_millis_epoch INTEGER DEFAULT 0, UNIQUE(name,type))");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE meta ( key TEXT PRIMARY KEY NOT NULL, value TEXT)");

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createGrantsTable(android.database.sqlite.SQLiteDatabase)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createSharedAccountsTable(android.database.sqlite.SQLiteDatabase)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)>(r1);

        staticinvoke <com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createDebugTable(android.database.sqlite.SQLiteDatabase)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createAccountsVisibilityTable(android.database.sqlite.SQLiteDatabase)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createAccountsDeletionVisibilityCleanupTrigger(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", "onDowngrade: recreate accounts DE table");

        staticinvoke <com.android.server.accounts.AccountsDb: void access$100(android.database.sqlite.SQLiteDatabase)>(r1);

        virtualinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountsDb", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountsDb", "opened database accounts_de.db");

     label1:
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r0;
        int i0, i3, i4, i5;
        java.lang.StringBuilder $r2, $r8;
        java.lang.String $r7, $r13;
        android.database.sqlite.SQLiteDatabase r14;

        r0 := @this: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r14 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("upgrade from version ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountsDb", $r7);

        i4 = i3;

        if i3 != 1 goto label1;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createAccountsVisibilityTable(android.database.sqlite.SQLiteDatabase)>(r14);

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createAccountsDeletionVisibilityCleanupTrigger(android.database.sqlite.SQLiteDatabase)>(r14);

        i4 = 3;

     label1:
        i5 = i4;

        if i4 != 2 goto label2;

        virtualinvoke r14.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TRIGGER IF EXISTS accountsDeleteVisibility");

        virtualinvoke r14.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS visibility");

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createAccountsVisibilityTable(android.database.sqlite.SQLiteDatabase)>(r14);

        specialinvoke r0.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createAccountsDeletionVisibilityCleanupTrigger(android.database.sqlite.SQLiteDatabase)>(r14);

        i5 = i4 + 1;

     label2:
        if i5 == i0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to upgrade version ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", $r13);

     label3:
        return;
    }
}
