class com.android.server.accounts.AccountsDb$PreNDatabaseHelper extends android.database.sqlite.SQLiteOpenHelper
{
    private final android.content.Context mContext;
    private final int mUserId;

    void <init>(android.content.Context, int, java.lang.String)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.content.Context r1;
        int i0;
        java.lang.String r2;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(r1, r2, null, 9);

        r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: android.content.Context mContext> = r1;

        r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: int mUserId> = i0;

        return;
    }

    private void addDebugTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.server.accounts.AccountsDb$DeDatabaseHelper: void createDebugTable(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    private void addLastSuccessfullAuthenticatedTimeColumn(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE accounts ADD COLUMN last_password_entry_time_millis_epoch DEFAULT 0");

        return;
    }

    private void addOldAccountNameColumn(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE accounts ADD COLUMN previous_name");

        return;
    }

    private void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" CREATE TRIGGER accountsDelete DELETE ON accounts BEGIN   DELETE FROM authtokens     WHERE accounts_id=OLD._id ;   DELETE FROM extras     WHERE accounts_id=OLD._id ;   DELETE FROM grants     WHERE accounts_id=OLD._id ; END");

        return;
    }

    private void createGrantsTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE grants (  accounts_id INTEGER NOT NULL, auth_token_type STRING NOT NULL,  uid INTEGER NOT NULL,  UNIQUE (accounts_id,auth_token_type,uid))");

        return;
    }

    private void createSharedAccountsTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE shared_accounts ( _id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, type TEXT NOT NULL, UNIQUE(name,type))");

        return;
    }

    static long insertMetaAuthTypeAndUid(android.database.sqlite.SQLiteDatabase, java.lang.String, int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r8;
        int i0;
        android.content.ContentValues $r4;
        java.lang.StringBuilder $r5;
        java.lang.Integer $r9;
        long $l1;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auth_uid_for_type:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("key", $r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("value", $r9);

        $l1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("meta", null, $r4);

        return $l1;
    }

    private void populateMetaTableWithAuthTypeAndUID(android.database.sqlite.SQLiteDatabase, java.util.Map)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.util.Map$Entry r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4, $r5, $r7;
        java.lang.String $r6;
        java.lang.Integer $r8;
        int $i0;
        java.util.Map r9;
        java.util.Iterator r10;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r9 := @parameter1: java.util.Map;

        $r3 = interfaceinvoke r9.<java.util.Map: java.util.Set entrySet()>();

        r10 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        staticinvoke <com.android.server.accounts.AccountsDb$PreNDatabaseHelper: long insertMetaAuthTypeAndUid(android.database.sqlite.SQLiteDatabase,java.lang.String,int)>(r1, $r6, $i0);

        goto label1;

     label2:
        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Legacy database cannot be created - only upgraded!");

        throw $r2;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountsDb", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountsDb", "opened database accounts.db");

     label1:
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper r0;
        int i0, $i3, i4, i5, i6, i7, i8, i9, i10, i11, i12;
        java.lang.StringBuilder $r2, $r8;
        java.lang.String $r7, $r13;
        android.content.Context $r14;
        java.util.HashMap $r15;
        android.database.sqlite.SQLiteDatabase r16;

        r0 := @this: com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        r16 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("upgrade from version ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", $r7);

        i5 = i4;

        if i4 != 1 goto label1;

        i5 = i4 + 1;

     label1:
        i6 = i5;

        if i5 != 2 goto label2;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void createGrantsTable(android.database.sqlite.SQLiteDatabase)>(r16);

        virtualinvoke r16.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TRIGGER accountsDelete");

        specialinvoke r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)>(r16);

        i6 = i5 + 1;

     label2:
        i7 = i6;

        if i6 != 3 goto label3;

        virtualinvoke r16.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("UPDATE accounts SET type = \'com.google\' WHERE type == \'com.google.GAIA\'");

        i7 = i6 + 1;

     label3:
        i8 = i7;

        if i7 != 4 goto label4;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void createSharedAccountsTable(android.database.sqlite.SQLiteDatabase)>(r16);

        i8 = i7 + 1;

     label4:
        i9 = i8;

        if i8 != 5 goto label5;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void addOldAccountNameColumn(android.database.sqlite.SQLiteDatabase)>(r16);

        i9 = i8 + 1;

     label5:
        i10 = i9;

        if i9 != 6 goto label6;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void addLastSuccessfullAuthenticatedTimeColumn(android.database.sqlite.SQLiteDatabase)>(r16);

        i10 = i9 + 1;

     label6:
        i11 = i10;

        if i10 != 7 goto label7;

        specialinvoke r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void addDebugTable(android.database.sqlite.SQLiteDatabase)>(r16);

        i11 = i10 + 1;

     label7:
        i12 = i11;

        if i11 != 8 goto label8;

        $r14 = r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: android.content.Context mContext>;

        $i3 = r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: int mUserId>;

        $r15 = staticinvoke <com.android.server.accounts.AccountManagerService: java.util.HashMap getAuthenticatorTypeAndUIDForUser(android.content.Context,int)>($r14, $i3);

        specialinvoke r0.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void populateMetaTableWithAuthTypeAndUID(android.database.sqlite.SQLiteDatabase,java.util.Map)>(r16, $r15);

        i12 = i11 + 1;

     label8:
        if i12 == i0 goto label9;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to upgrade version ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", $r13);

     label9:
        return;
    }
}
