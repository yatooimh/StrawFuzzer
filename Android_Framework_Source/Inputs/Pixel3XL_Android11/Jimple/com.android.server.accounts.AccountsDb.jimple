class com.android.server.accounts.AccountsDb extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final java.lang.String ACCOUNTS_ID;
    private static final java.lang.String ACCOUNTS_LAST_AUTHENTICATE_TIME_EPOCH_MILLIS;
    private static final java.lang.String ACCOUNTS_NAME;
    private static final java.lang.String ACCOUNTS_PASSWORD;
    private static final java.lang.String ACCOUNTS_PREVIOUS_NAME;
    private static final java.lang.String ACCOUNTS_TYPE;
    private static final java.lang.String ACCOUNTS_TYPE_COUNT;
    private static final java.lang.String ACCOUNT_ACCESS_GRANTS;
    private static final java.lang.String[] ACCOUNT_TYPE_COUNT_PROJECTION;
    private static final java.lang.String AUTHTOKENS_ACCOUNTS_ID;
    private static final java.lang.String AUTHTOKENS_AUTHTOKEN;
    private static final java.lang.String AUTHTOKENS_ID;
    private static final java.lang.String AUTHTOKENS_TYPE;
    static final java.lang.String CE_DATABASE_NAME;
    private static final int CE_DATABASE_VERSION;
    private static final java.lang.String CE_DB_PREFIX;
    private static final java.lang.String CE_TABLE_ACCOUNTS;
    private static final java.lang.String CE_TABLE_AUTHTOKENS;
    private static final java.lang.String CE_TABLE_EXTRAS;
    private static final java.lang.String[] COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN;
    private static final java.lang.String[] COLUMNS_EXTRAS_KEY_AND_VALUE;
    private static final java.lang.String COUNT_OF_MATCHING_GRANTS;
    private static final java.lang.String COUNT_OF_MATCHING_GRANTS_ANY_TOKEN;
    private static final java.lang.String DATABASE_NAME;
    static java.lang.String DEBUG_ACTION_ACCOUNT_ADD;
    static java.lang.String DEBUG_ACTION_ACCOUNT_REMOVE;
    static java.lang.String DEBUG_ACTION_ACCOUNT_REMOVE_DE;
    static java.lang.String DEBUG_ACTION_ACCOUNT_RENAME;
    static java.lang.String DEBUG_ACTION_AUTHENTICATOR_REMOVE;
    static java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_ADD;
    static java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_REMOVE;
    static java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_SESSION_FINISH;
    static java.lang.String DEBUG_ACTION_CALLED_START_ACCOUNT_ADD;
    static java.lang.String DEBUG_ACTION_CLEAR_PASSWORD;
    static java.lang.String DEBUG_ACTION_SET_PASSWORD;
    static java.lang.String DEBUG_ACTION_SYNC_DE_CE_ACCOUNTS;
    private static java.lang.String DEBUG_TABLE_ACTION_TYPE;
    private static java.lang.String DEBUG_TABLE_CALLER_UID;
    private static java.lang.String DEBUG_TABLE_KEY;
    private static java.lang.String DEBUG_TABLE_TABLE_NAME;
    private static java.lang.String DEBUG_TABLE_TIMESTAMP;
    static final java.lang.String DE_DATABASE_NAME;
    private static final int DE_DATABASE_VERSION;
    private static final java.lang.String EXTRAS_ACCOUNTS_ID;
    private static final java.lang.String EXTRAS_ID;
    private static final java.lang.String EXTRAS_KEY;
    private static final java.lang.String EXTRAS_VALUE;
    private static final java.lang.String GRANTS_ACCOUNTS_ID;
    private static final java.lang.String GRANTS_AUTH_TOKEN_TYPE;
    private static final java.lang.String GRANTS_GRANTEE_UID;
    static final int MAX_DEBUG_DB_SIZE;
    private static final java.lang.String META_KEY;
    private static final java.lang.String META_KEY_DELIMITER;
    private static final java.lang.String META_KEY_FOR_AUTHENTICATOR_UID_FOR_TYPE_PREFIX;
    private static final java.lang.String META_VALUE;
    private static final int PRE_N_DATABASE_VERSION;
    private static final java.lang.String SELECTION_ACCOUNTS_ID_BY_ACCOUNT;
    private static final java.lang.String SELECTION_META_BY_AUTHENTICATOR_TYPE;
    private static final java.lang.String SHARED_ACCOUNTS_ID;
    static final java.lang.String TABLE_ACCOUNTS;
    private static final java.lang.String TABLE_AUTHTOKENS;
    private static java.lang.String TABLE_DEBUG;
    private static final java.lang.String TABLE_EXTRAS;
    private static final java.lang.String TABLE_GRANTS;
    private static final java.lang.String TABLE_META;
    static final java.lang.String TABLE_SHARED_ACCOUNTS;
    private static final java.lang.String TABLE_VISIBILITY;
    private static final java.lang.String TAG;
    private static final java.lang.String VISIBILITY_ACCOUNTS_ID;
    private static final java.lang.String VISIBILITY_PACKAGE;
    private static final java.lang.String VISIBILITY_VALUE;
    private final android.content.Context mContext;
    private final com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase;
    private volatile long mDebugDbInsertionPoint;
    private volatile android.database.sqlite.SQLiteStatement mDebugStatementForLogging;
    final java.lang.Object mDebugStatementLock;
    private final java.io.File mPreNDatabaseFile;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;

        <com.android.server.accounts.AccountsDb: java.lang.String VISIBILITY_VALUE> = "value";

        <com.android.server.accounts.AccountsDb: java.lang.String VISIBILITY_PACKAGE> = "_package";

        <com.android.server.accounts.AccountsDb: java.lang.String VISIBILITY_ACCOUNTS_ID> = "accounts_id";

        <com.android.server.accounts.AccountsDb: java.lang.String TAG> = "AccountsDb";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_VISIBILITY> = "visibility";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_SHARED_ACCOUNTS> = "shared_accounts";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_META> = "meta";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_GRANTS> = "grants";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_EXTRAS> = "extras";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_AUTHTOKENS> = "authtokens";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_ACCOUNTS> = "accounts";

        <com.android.server.accounts.AccountsDb: java.lang.String SHARED_ACCOUNTS_ID> = "_id";

        <com.android.server.accounts.AccountsDb: java.lang.String SELECTION_META_BY_AUTHENTICATOR_TYPE> = "key LIKE ?";

        <com.android.server.accounts.AccountsDb: java.lang.String SELECTION_ACCOUNTS_ID_BY_ACCOUNT> = "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)";

        <com.android.server.accounts.AccountsDb: int PRE_N_DATABASE_VERSION> = 9;

        <com.android.server.accounts.AccountsDb: java.lang.String META_VALUE> = "value";

        <com.android.server.accounts.AccountsDb: java.lang.String META_KEY_FOR_AUTHENTICATOR_UID_FOR_TYPE_PREFIX> = "auth_uid_for_type:";

        <com.android.server.accounts.AccountsDb: java.lang.String META_KEY_DELIMITER> = ":";

        <com.android.server.accounts.AccountsDb: java.lang.String META_KEY> = "key";

        <com.android.server.accounts.AccountsDb: int MAX_DEBUG_DB_SIZE> = 64;

        <com.android.server.accounts.AccountsDb: java.lang.String GRANTS_GRANTEE_UID> = "uid";

        <com.android.server.accounts.AccountsDb: java.lang.String GRANTS_AUTH_TOKEN_TYPE> = "auth_token_type";

        <com.android.server.accounts.AccountsDb: java.lang.String GRANTS_ACCOUNTS_ID> = "accounts_id";

        <com.android.server.accounts.AccountsDb: java.lang.String EXTRAS_VALUE> = "value";

        <com.android.server.accounts.AccountsDb: java.lang.String EXTRAS_KEY> = "key";

        <com.android.server.accounts.AccountsDb: java.lang.String EXTRAS_ID> = "_id";

        <com.android.server.accounts.AccountsDb: java.lang.String EXTRAS_ACCOUNTS_ID> = "accounts_id";

        <com.android.server.accounts.AccountsDb: int DE_DATABASE_VERSION> = 3;

        <com.android.server.accounts.AccountsDb: java.lang.String DE_DATABASE_NAME> = "accounts_de.db";

        <com.android.server.accounts.AccountsDb: java.lang.String DATABASE_NAME> = "accounts.db";

        <com.android.server.accounts.AccountsDb: java.lang.String COUNT_OF_MATCHING_GRANTS_ANY_TOKEN> = "SELECT COUNT(*) FROM grants, accounts WHERE accounts_id=_id AND uid=? AND name=? AND type=?";

        <com.android.server.accounts.AccountsDb: java.lang.String COUNT_OF_MATCHING_GRANTS> = "SELECT COUNT(*) FROM grants, accounts WHERE accounts_id=_id AND uid=? AND auth_token_type=? AND name=? AND type=?";

        <com.android.server.accounts.AccountsDb: java.lang.String CE_TABLE_EXTRAS> = "ceDb.extras";

        <com.android.server.accounts.AccountsDb: java.lang.String CE_TABLE_AUTHTOKENS> = "ceDb.authtokens";

        <com.android.server.accounts.AccountsDb: java.lang.String CE_TABLE_ACCOUNTS> = "ceDb.accounts";

        <com.android.server.accounts.AccountsDb: java.lang.String CE_DB_PREFIX> = "ceDb.";

        <com.android.server.accounts.AccountsDb: int CE_DATABASE_VERSION> = 10;

        <com.android.server.accounts.AccountsDb: java.lang.String CE_DATABASE_NAME> = "accounts_ce.db";

        <com.android.server.accounts.AccountsDb: java.lang.String AUTHTOKENS_TYPE> = "type";

        <com.android.server.accounts.AccountsDb: java.lang.String AUTHTOKENS_ID> = "_id";

        <com.android.server.accounts.AccountsDb: java.lang.String AUTHTOKENS_AUTHTOKEN> = "authtoken";

        <com.android.server.accounts.AccountsDb: java.lang.String AUTHTOKENS_ACCOUNTS_ID> = "accounts_id";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNT_ACCESS_GRANTS> = "SELECT name, uid FROM accounts, grants WHERE accounts_id=_id";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNTS_TYPE_COUNT> = "count(type)";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNTS_TYPE> = "type";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNTS_PREVIOUS_NAME> = "previous_name";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNTS_PASSWORD> = "password";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNTS_NAME> = "name";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNTS_LAST_AUTHENTICATE_TIME_EPOCH_MILLIS> = "last_password_entry_time_millis_epoch";

        <com.android.server.accounts.AccountsDb: java.lang.String ACCOUNTS_ID> = "_id";

        <com.android.server.accounts.AccountsDb: java.lang.String TABLE_DEBUG> = "debug_table";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_ACTION_TYPE> = "action_type";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_TIMESTAMP> = "time";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_CALLER_UID> = "caller_uid";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_TABLE_NAME> = "table_name";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_KEY> = "primary_key";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_SET_PASSWORD> = "action_set_password";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CLEAR_PASSWORD> = "action_clear_password";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_ADD> = "action_account_add";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_REMOVE> = "action_account_remove";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_REMOVE_DE> = "action_account_remove_de";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_AUTHENTICATOR_REMOVE> = "action_authenticator_remove";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_ACCOUNT_RENAME> = "action_account_rename";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_ADD> = "action_called_account_add";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_REMOVE> = "action_called_account_remove";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_SYNC_DE_CE_ACCOUNTS> = "action_sync_de_ce_accounts";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_START_ACCOUNT_ADD> = "action_called_start_account_add";

        <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_ACTION_CALLED_ACCOUNT_SESSION_FINISH> = "action_called_account_session_finish";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "type";

        $r0[1] = "count(type)";

        <com.android.server.accounts.AccountsDb: java.lang.String[] ACCOUNT_TYPE_COUNT_PROJECTION> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "type";

        $r1[1] = "authtoken";

        <com.android.server.accounts.AccountsDb: java.lang.String[] COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "key";

        $r2[1] = "value";

        <com.android.server.accounts.AccountsDb: java.lang.String[] COLUMNS_EXTRAS_KEY_AND_VALUE> = $r2;

        return;
    }

    void <init>(com.android.server.accounts.AccountsDb$DeDatabaseHelper, android.content.Context, java.io.File)
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper r1;
        android.content.Context r2;
        java.io.File r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accounts.AccountsDb: java.lang.Object mDebugStatementLock> = $r4;

        r0.<com.android.server.accounts.AccountsDb: long mDebugDbInsertionPoint> = -1L;

        r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase> = r1;

        r0.<com.android.server.accounts.AccountsDb: android.content.Context mContext> = r2;

        r0.<com.android.server.accounts.AccountsDb: java.io.File mPreNDatabaseFile> = r3;

        return;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.accounts.AccountsDb: java.lang.String TABLE_DEBUG>;

        return $r0;
    }

    static void access$100(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.server.accounts.AccountsDb: void resetDatabase(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_ACTION_TYPE>;

        return $r0;
    }

    static java.lang.String access$300()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_TIMESTAMP>;

        return $r0;
    }

    static java.lang.String access$400()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_CALLER_UID>;

        return $r0;
    }

    static java.lang.String access$500()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_TABLE_NAME>;

        return $r0;
    }

    static java.lang.String access$600()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_KEY>;

        return $r0;
    }

    public static com.android.server.accounts.AccountsDb create(android.content.Context, int, java.io.File, java.io.File)
    {
        android.content.Context r0;
        int i0;
        java.io.File r1, r8;
        boolean z0, $z1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.String $r4, $r6;
        com.android.server.accounts.AccountsDb$PreNDatabaseHelper $r5;
        com.android.server.accounts.AccountsDb $r10;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: java.io.File;

        r8 := @parameter3: java.io.File;

        z0 = virtualinvoke r8.<java.io.File: boolean exists()>();

        $r3 = new com.android.server.accounts.AccountsDb$DeDatabaseHelper;

        $r4 = virtualinvoke r8.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void <init>(android.content.Context,int,java.lang.String,com.android.server.accounts.AccountsDb$1)>(r0, i0, $r4, null);

        if z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $r5 = new com.android.server.accounts.AccountsDb$PreNDatabaseHelper;

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r5.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void <init>(android.content.Context,int,java.lang.String)>(r0, i0, $r6);

        virtualinvoke $r5.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r5.<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void close()>();

        staticinvoke <com.android.server.accounts.AccountsDb$DeDatabaseHelper: void access$900(com.android.server.accounts.AccountsDb$DeDatabaseHelper,java.io.File)>($r3, r1);

     label1:
        $r10 = new com.android.server.accounts.AccountsDb;

        specialinvoke $r10.<com.android.server.accounts.AccountsDb: void <init>(com.android.server.accounts.AccountsDb$DeDatabaseHelper,android.content.Context,java.io.File)>($r3, r0, r1);

        return $r10;
    }

    static void deleteDbFileWarnIfFailed(java.io.File)
    {
        java.io.File r0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;

        r0 := @parameter0: java.io.File;

        $z0 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>(r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database at ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not deleted successfully");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountsDb", $r6);

     label1:
        return;
    }

    private static void resetDatabase(android.database.sqlite.SQLiteDatabase)
    {
        java.lang.String $r2, $r3, $r4, $r7, r14, r17;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Throwable $r8, $r9, $r10, $r11;
        android.database.sqlite.SQLiteDatabase r12;
        android.database.Cursor r13, r16;
        java.lang.StringBuilder r15, r18;

        r12 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r13 = virtualinvoke r12.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT name FROM sqlite_master WHERE type =\'table\'", null);

     label01:
        $z2 = interfaceinvoke r13.<android.database.Cursor: boolean moveToNext()>();

        if $z2 == 0 goto label05;

        r14 = interfaceinvoke r13.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r3 = "android_metadata";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z0 != 0 goto label01;

        $r4 = "sqlite_sequence";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z1 == 0 goto label03;

     label02:
        goto label01;

     label03:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE IF EXISTS ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r7 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r12.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r7);

     label04:
        goto label01;

     label05:
        if r13 == null goto label06;

        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label06:
        r16 = virtualinvoke r12.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT name FROM sqlite_master WHERE type =\'trigger\'", null);

     label07:
        $z3 = interfaceinvoke r16.<android.database.Cursor: boolean moveToNext()>();

        if $z3 == 0 goto label09;

        r17 = interfaceinvoke r16.<android.database.Cursor: java.lang.String getString(int)>(0);

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TRIGGER IF EXISTS ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r2 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r12.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

     label08:
        goto label07;

     label09:
        if r16 == null goto label10;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label10:
        return;

     label11:
        $r10 := @caughtexception;

        if r16 == null goto label15;

     label12:
        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label13:
        goto label15;

     label14:
        $r9 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label15:
        throw $r10;

     label16:
        $r8 := @caughtexception;

        if r13 == null goto label20;

     label17:
        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label18:
        goto label20;

     label19:
        $r11 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label20:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    void attachCeDatabase(java.io.File)
    {
        com.android.server.accounts.AccountsDb r0;
        java.io.File r1, $r4;
        android.database.sqlite.SQLiteDatabase r2;
        android.content.Context $r5;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r7, $r14;
        java.lang.StringBuilder $r8;
        java.lang.String $r10, $r13;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: java.io.File;

        $r5 = r0.<com.android.server.accounts.AccountsDb: android.content.Context mContext>;

        $r4 = r0.<com.android.server.accounts.AccountsDb: java.io.File mPreNDatabaseFile>;

        staticinvoke <com.android.server.accounts.AccountsDb$CeDatabaseHelper: com.android.server.accounts.AccountsDb$CeDatabaseHelper create(android.content.Context,java.io.File,java.io.File)>($r5, $r4, r1);

        $r7 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r7.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ATTACH DATABASE \'");

        $r10 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' AS ceDb");

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r13);

        $r14 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        staticinvoke <com.android.server.accounts.AccountsDb$DeDatabaseHelper: boolean access$702(com.android.server.accounts.AccountsDb$DeDatabaseHelper,boolean)>($r14, 1);

        return;
    }

    void beginTransaction()
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r2 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        return;
    }

    long calculateDebugTableInsertionPoint()
    {
        com.android.server.accounts.AccountsDb r0;
        int i0;
        long l1, $l2, $l3;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        java.lang.String $r3, $r5, $r7, $r10, $r13, $r16, $r19, $r24;
        android.database.sqlite.SQLiteException $r20;
        java.lang.StringBuilder $r21, r26, r27;
        android.database.sqlite.SQLiteDatabase r25;

        r0 := @this: com.android.server.accounts.AccountsDb;

     label1:
        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r25 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT COUNT(*) FROM ");

        $r3 = <com.android.server.accounts.AccountsDb: java.lang.String TABLE_DEBUG>;

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $l2 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r25, $r5, null);

        i0 = (int) $l2;

     label2:
        if i0 >= 64 goto label3;

        $l3 = (long) i0;

        return $l3;

     label3:
        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        $r7 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_KEY>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM ");

        $r10 = <com.android.server.accounts.AccountsDb: java.lang.String TABLE_DEBUG>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ORDER BY ");

        $r13 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_TIMESTAMP>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r16 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_KEY>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT 1");

        $r19 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        l1 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r25, $r19, null);

     label4:
        return l1;

     label5:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open debug table");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", $r24);

        return -1L;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label5;
        catch android.database.sqlite.SQLiteException from label3 to label4 with label5;
    }

    public void close()
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void close()>();

        return;
    }

    void closeDebugStatement()
    {
        com.android.server.accounts.AccountsDb r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteStatement $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 = r0.<com.android.server.accounts.AccountsDb: java.lang.Object mDebugStatementLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement mDebugStatementForLogging>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement mDebugStatementForLogging>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteStatement: void close()>();

        r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement mDebugStatementForLogging> = null;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    android.database.sqlite.SQLiteStatement compileSqlStatementForLogging()
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r9;
        android.database.sqlite.SQLiteStatement $r10;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT OR REPLACE INTO ");

        $r6 = <com.android.server.accounts.AccountsDb: java.lang.String TABLE_DEBUG>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" VALUES (?,?,?,?,?,?)");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r9);

        return $r10;
    }

    boolean deleteAccountVisibilityForPackage(java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        java.lang.String r1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.String[] $r4;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z0 = 1;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r1;

        $i0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("visibility", "_package=? ", $r4);

        if $i0 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean deleteAuthToken(java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        java.lang.String r1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.String[] $r4;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        z0 = 1;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r1;

        $i0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("ceDb.authtokens", "_id= ?", $r4);

        if $i0 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean deleteAuthTokensByAccountId(long)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        z0 = 1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r3[0] = $r4;

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("ceDb.authtokens", "accounts_id=?", $r3);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean deleteAuthtokensByAccountIdAndType(long, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        java.lang.String r1, $r5;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.String[] $r4;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        z0 = 0;

        $r4 = newarray (java.lang.String)[2];

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r4[0] = $r5;

        $r4[1] = r1;

        $i1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("ceDb.authtokens", "accounts_id=? AND type=?", $r4);

        if $i1 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    boolean deleteCeAccount(long)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("ceDb.accounts", $r7, null);

        if $i1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean deleteDeAccount(long)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("accounts", $r7, null);

        if $i1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean deleteGrantsByAccountIdAuthTokenTypeAndUid(long, java.lang.String, long)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0, l1;
        java.lang.String r1, $r5, $r6;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.String[] $r4;
        int $i2;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z0 = 0;

        $r4 = newarray (java.lang.String)[3];

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r4[0] = $r5;

        $r4[1] = r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r4[2] = $r6;

        $i2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("grants", "accounts_id=? AND auth_token_type=? AND uid=?", $r4);

        if $i2 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    boolean deleteGrantsByUid(int)
    {
        com.android.server.accounts.AccountsDb r0;
        int i0, $i1;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z0 = 1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3[0] = $r4;

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("grants", "uid=?", $r3);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean deleteMetaByAuthTypeAndUid(java.lang.String, int)
    {
        com.android.server.accounts.AccountsDb r0;
        int i0, $i1;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.StringBuilder $r4;
        java.lang.String[] $r7;
        java.lang.String $r8, r9, r10;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auth_uid_for_type:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = r10;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r7[1] = $r8;

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("meta", "key=? AND value=?", $r7);

        if $i1 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    boolean deleteSharedAccount(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.accounts.Account r1;
        android.database.sqlite.SQLiteDatabase r2;
        java.lang.String r3, $r6;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        java.lang.String[] $r5;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: android.accounts.Account;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        r3 = r1.<android.accounts.Account: java.lang.String name>;

        z0 = 0;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r3;

        $r6 = r1.<android.accounts.Account: java.lang.String type>;

        $r5[1] = $r6;

        $i0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("shared_accounts", "name=? AND type=?", $r5);

        if $i0 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    void dumpDeAccountsTable(java.io.PrintWriter)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.Cursor r1;
        java.lang.StringBuilder r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.String[] $r5;
        boolean $z0;
        java.lang.String $r6, $r9, $r11;
        java.lang.Throwable $r12;
        java.io.PrintWriter r13;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r13 := @parameter0: java.io.PrintWriter;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r4 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r5 = <com.android.server.accounts.AccountsDb: java.lang.String[] ACCOUNT_TYPE_COUNT_PROJECTION>;

        r1 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r5, null, null, "type", null, null);

     label1:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r6 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r9 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>($r11);

     label2:
        goto label1;

     label3:
        if r1 == null goto label4;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

     label4:
        return;

     label5:
        $r12 := @caughtexception;

        if r1 == null goto label6;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

     label6:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    void dumpDebugTable(java.io.PrintWriter)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.Cursor r1;
        java.lang.StringBuilder r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.String $r5, $r6, $r7, $r10, $r13, $r16, $r19, $r22, $r24;
        boolean $z0;
        java.lang.Throwable $r25;
        java.io.PrintWriter r26;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r26 := @parameter0: java.io.PrintWriter;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r4 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r6 = <com.android.server.accounts.AccountsDb: java.lang.String TABLE_DEBUG>;

        $r5 = <com.android.server.accounts.AccountsDb: java.lang.String DEBUG_TABLE_TIMESTAMP>;

        r1 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r6, null, null, null, null, null, $r5);

        virtualinvoke r26.<java.io.PrintWriter: void println(java.lang.String)>("AccountId, Action_Type, timestamp, UID, TableName, Key");

        virtualinvoke r26.<java.io.PrintWriter: void println(java.lang.String)>("Accounts History");

     label1:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r7 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r10 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r13 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r16 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r19 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r22 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r26.<java.io.PrintWriter: void println(java.lang.String)>($r24);

     label2:
        goto label1;

     label3:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        return;

     label4:
        $r25 := @caughtexception;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw $r25;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    void endTransaction()
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r2 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;
    }

    long findAccountLastAuthenticatedTime(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4;
        java.lang.String $r5, $r6;
        long $l0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: android.accounts.Account;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r3 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r4 = newarray (java.lang.String)[2];

        $r5 = r1.<android.accounts.Account: java.lang.String name>;

        $r4[0] = $r5;

        $r6 = r1.<android.accounts.Account: java.lang.String type>;

        $r4[1] = $r6;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r3, "SELECT last_password_entry_time_millis_epoch FROM accounts WHERE name=? AND type=?", $r4);

        return $l0;
    }

    java.lang.String findAccountPasswordByNameAndType(java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5, $r6;
        java.lang.String r7, r8, r10;
        android.database.Cursor r9;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r2 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>();

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "password";

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = r7;

        $r4[1] = r8;

        r9 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ceDb.accounts", $r3, "name=? AND type=?", $r4, null, null, null);

     label01:
        $z0 = interfaceinvoke r9.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label04;

        r10 = interfaceinvoke r9.<android.database.Cursor: java.lang.String getString(int)>(0);

     label02:
        if r9 == null goto label03;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label03:
        return r10;

     label04:
        if r9 == null goto label05;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label05:
        return null;

     label06:
        $r6 := @caughtexception;

        if r9 == null goto label10;

     label07:
        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    java.lang.Integer findAccountVisibility(long, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        int i1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4, $r5;
        java.lang.String $r6, r9;
        boolean $z0;
        java.lang.Integer $r7;
        java.lang.Throwable $r8;
        android.database.Cursor r10;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r9 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r3 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "value";

        $r5 = newarray (java.lang.String)[2];

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r5[0] = $r6;

        $r5[1] = r9;

        r10 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("visibility", $r4, "accounts_id=? AND _package=? ", $r5, null, null, null);

     label1:
        $z0 = interfaceinvoke r10.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        i1 = interfaceinvoke r10.<android.database.Cursor: int getInt(int)>(0);

     label2:
        interfaceinvoke r10.<android.database.Cursor: void close()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        return $r7;

     label3:
        interfaceinvoke r10.<android.database.Cursor: void close()>();

        return null;

     label4:
        $r8 := @caughtexception;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    java.lang.Integer findAccountVisibility(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, r9, r10;
        int i0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.lang.String[] $r4, $r5;
        boolean $z0;
        java.lang.Integer $r6;
        java.lang.Throwable $r7;
        android.accounts.Account r8;
        android.database.Cursor r11;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r8 := @parameter0: android.accounts.Account;

        r9 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r2 = r8.<android.accounts.Account: java.lang.String name>;

        r10 = r8.<android.accounts.Account: java.lang.String type>;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "value";

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = r2;

        $r5[1] = r10;

        $r5[2] = r9;

        r11 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("visibility", $r4, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?) AND _package=? ", $r5, null, null, null);

     label1:
        $z0 = interfaceinvoke r11.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        i0 = interfaceinvoke r11.<android.database.Cursor: int getInt(int)>(0);

     label2:
        interfaceinvoke r11.<android.database.Cursor: void close()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r6;

     label3:
        interfaceinvoke r11.<android.database.Cursor: void close()>();

        return null;

     label4:
        $r7 := @caughtexception;

        interfaceinvoke r11.<android.database.Cursor: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    java.util.List findAllAccountGrants()
    {
        com.android.server.accounts.AccountsDb r0;
        boolean z0, $z1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String $r3;
        int $i0;
        java.lang.Integer $r4;
        android.util.Pair $r5;
        java.lang.Throwable $r6, $r7;
        android.database.Cursor r8;
        java.util.ArrayList r9;
        java.util.List r10;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r2 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r8 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT name, uid FROM accounts, grants WHERE accounts_id=_id", null);

        if r8 == null goto label08;

     label01:
        $z1 = interfaceinvoke r8.<android.database.Cursor: boolean moveToFirst()>();

        if $z1 != 0 goto label03;

     label02:
        goto label08;

     label03:
        r9 = new java.util.ArrayList;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

     label04:
        $r3 = interfaceinvoke r8.<android.database.Cursor: java.lang.String getString(int)>(0);

        $i0 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>(1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r3, $r4);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r5);

     label05:
        z0 = interfaceinvoke r8.<android.database.Cursor: boolean moveToNext()>();

     label06:
        if z0 != 0 goto label04;

        if r8 == null goto label07;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label07:
        return r9;

     label08:
        r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label09:
        if r8 == null goto label10;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label10:
        return r10;

     label11:
        $r6 := @caughtexception;

        if r8 == null goto label15;

     label12:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label13:
        goto label15;

     label14:
        $r7 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

     label15:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
    }

    java.util.Map findAllDeAccounts()
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        java.lang.String r1, r2;
        android.accounts.Account r3;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        java.util.LinkedHashMap $r5;
        java.lang.String[] $r6;
        boolean $z0;
        java.lang.Long $r7;
        java.lang.Throwable $r9, $r10;
        android.database.sqlite.SQLiteDatabase r11;
        android.database.Cursor r13;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r11 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = "_id";

        $r6[1] = "type";

        $r6[2] = "name";

        r13 = virtualinvoke r11.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r6, null, null, null, null, "_id");

     label1:
        $z0 = interfaceinvoke r13.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        l0 = interfaceinvoke r13.<android.database.Cursor: long getLong(int)>(0);

        r1 = interfaceinvoke r13.<android.database.Cursor: java.lang.String getString(int)>(1);

        r2 = interfaceinvoke r13.<android.database.Cursor: java.lang.String getString(int)>(2);

        r3 = new android.accounts.Account;

        specialinvoke r3.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r2, r1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r3);

     label2:
        goto label1;

     label3:
        if r13 == null goto label4;

        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label4:
        return $r5;

     label5:
        $r9 := @caughtexception;

        if r13 == null goto label9;

     label6:
        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    java.util.List findAllUidGrants()
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        java.util.ArrayList $r2;
        java.lang.String[] $r3;
        boolean $z0;
        int $i0;
        java.lang.Integer $r4;
        java.lang.Throwable $r5;
        android.database.sqlite.SQLiteDatabase r6;
        android.database.Cursor r8;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r6 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "uid";

        r8 = virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("grants", $r3, null, null, "uid", null, null);

     label1:
        $z0 = interfaceinvoke r8.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        goto label1;

     label3:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

        return $r2;

     label4:
        $r5 := @caughtexception;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    java.util.Map findAllVisibilityValues()
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.Cursor r2;
        java.lang.String r3, r13, r14;
        int i0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        boolean $z0;
        java.lang.Object $r7, r16;
        java.lang.Integer $r8;
        java.lang.Throwable $r11;
        android.database.sqlite.SQLiteDatabase r12;
        java.util.Map r15, r21;
        java.util.HashMap r18, r20;
        android.accounts.Account r19;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r12 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r18 = new java.util.HashMap;

        specialinvoke r18.<java.util.HashMap: void <init>()>();

        r2 = virtualinvoke r12.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT visibility._package, visibility.value, accounts.name, accounts.type FROM visibility JOIN accounts ON accounts._id = visibility.accounts_id", null);

     label1:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label7;

        r3 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

        i0 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(1);

        r13 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(2);

        r14 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(3);

        r19 = new android.accounts.Account;

        specialinvoke r19.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r13, r14);

        $r7 = interfaceinvoke r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        r15 = (java.util.Map) $r7;

     label2:
        r16 = r15;

        if r15 != null goto label5;

     label3:
        r20 = new java.util.HashMap;

        r16 = r20;

        specialinvoke r20.<java.util.HashMap: void <init>()>();

     label4:
        interfaceinvoke r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r20);

     label5:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r21 = (java.util.Map) r16;

        interfaceinvoke r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r8);

     label6:
        goto label1;

     label7:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        return r18;

     label8:
        $r11 := @caughtexception;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    java.util.Map findAllVisibilityValuesForAccount(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, $r7, r13;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.util.HashMap $r4;
        java.lang.String[] $r5, $r6;
        boolean $z0;
        int $i0;
        java.lang.Integer $r8;
        java.lang.Throwable $r10;
        android.accounts.Account r11;
        android.database.Cursor r14;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r11 := @parameter0: android.accounts.Account;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r2 = r11.<android.accounts.Account: java.lang.String name>;

        r13 = r11.<android.accounts.Account: java.lang.String type>;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "_package";

        $r5[1] = "value";

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = r2;

        $r6[1] = r13;

        r14 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("visibility", $r5, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", $r6, null, null, null);

     label1:
        $z0 = interfaceinvoke r14.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r14.<android.database.Cursor: java.lang.String getString(int)>(0);

        $i0 = interfaceinvoke r14.<android.database.Cursor: int getInt(int)>(1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label2:
        goto label1;

     label3:
        interfaceinvoke r14.<android.database.Cursor: void close()>();

        return $r4;

     label4:
        $r10 := @caughtexception;

        interfaceinvoke r14.<android.database.Cursor: void close()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    java.util.Map findAuthTokensByAccount(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        java.util.HashMap $r3;
        java.lang.String[] $r4, $r7;
        java.lang.String $r5, $r6, $r8, $r9;
        boolean $z0;
        java.lang.Throwable $r11;
        android.accounts.Account r12;
        android.database.Cursor r14;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r12 := @parameter0: android.accounts.Account;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r7 = <com.android.server.accounts.AccountsDb: java.lang.String[] COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN>;

        $r4 = newarray (java.lang.String)[2];

        $r5 = r12.<android.accounts.Account: java.lang.String name>;

        $r4[0] = $r5;

        $r6 = r12.<android.accounts.Account: java.lang.String type>;

        $r4[1] = $r6;

        r14 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ceDb.authtokens", $r7, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", $r4, null, null, null);

     label1:
        $z0 = interfaceinvoke r14.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r14.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r9 = interfaceinvoke r14.<android.database.Cursor: java.lang.String getString(int)>(1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

     label2:
        goto label1;

     label3:
        interfaceinvoke r14.<android.database.Cursor: void close()>();

        return $r3;

     label4:
        $r11 := @caughtexception;

        interfaceinvoke r14.<android.database.Cursor: void close()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    android.database.Cursor findAuthtokenForAllAccounts(java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        java.lang.String r1, r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.String[] $r5;
        android.database.Cursor $r6;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r4 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>();

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r2;

        $r5[1] = r1;

        $r6 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", $r5);

        return $r6;
    }

    long findCeAccountId(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        long l0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5, $r6;
        android.accounts.Account r7;
        java.lang.String r8, r9;
        android.database.Cursor r10;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r7 := @parameter0: android.accounts.Account;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>();

        r8 = r7.<android.accounts.Account: java.lang.String name>;

        r9 = r7.<android.accounts.Account: java.lang.String type>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "_id";

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = r8;

        $r4[1] = r9;

        r10 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ceDb.accounts", $r3, "name=? AND type=?", $r4, null, null, null);

     label01:
        $z0 = interfaceinvoke r10.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label04;

        l0 = interfaceinvoke r10.<android.database.Cursor: long getLong(int)>(0);

     label02:
        if r10 == null goto label03;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label03:
        return l0;

     label04:
        if r10 == null goto label05;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label05:
        return -1L;

     label06:
        $r5 := @caughtexception;

        if r10 == null goto label10;

     label07:
        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    java.util.List findCeAccountsNotInDe()
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.Cursor r1;
        java.util.ArrayList r2;
        java.lang.String r3, r4;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r7;
        android.accounts.Account r8;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r6 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>();

        r1 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT name,type FROM ceDb.accounts WHERE NOT EXISTS  (SELECT _id FROM accounts WHERE _id=ceDb.accounts._id )", null);

     label1:
        r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<android.database.Cursor: int getCount()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

     label2:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label4;

        r3 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        r4 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(1);

        r8 = new android.accounts.Account;

        specialinvoke r8.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r3, r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r8);

     label3:
        goto label2;

     label4:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        return r2;

     label5:
        $r7 := @caughtexception;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    android.accounts.Account findDeAccountByAccountId(long)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        android.database.Cursor r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4, $r5;
        java.lang.String $r6, $r8, $r9;
        boolean $z0;
        android.accounts.Account $r7;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r3 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "name";

        $r4[1] = "type";

        $r5 = newarray (java.lang.String)[1];

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r5[0] = $r6;

        r1 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r4, "_id=? ", $r5, null, null, null);

     label1:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        $r7 = new android.accounts.Account;

        $r8 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r9 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(1);

        specialinvoke $r7.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>($r8, $r9);

     label2:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        return $r7;

     label3:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        return null;

     label4:
        $r10 := @caughtexception;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    long findDeAccountId(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        long l0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5, $r6;
        android.accounts.Account r7;
        java.lang.String r8, r9;
        android.database.Cursor r10;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r7 := @parameter0: android.accounts.Account;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r8 = r7.<android.accounts.Account: java.lang.String name>;

        r9 = r7.<android.accounts.Account: java.lang.String type>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "_id";

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = r8;

        $r4[1] = r9;

        r10 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r3, "name=? AND type=?", $r4, null, null, null);

     label01:
        $z0 = interfaceinvoke r10.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label04;

        l0 = interfaceinvoke r10.<android.database.Cursor: long getLong(int)>(0);

     label02:
        if r10 == null goto label03;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label03:
        return l0;

     label04:
        if r10 == null goto label05;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label05:
        return -1L;

     label06:
        $r5 := @caughtexception;

        if r10 == null goto label10;

     label07:
        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    java.lang.String findDeAccountPreviousName(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        java.lang.String r1, r9, r11;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5, $r6;
        android.accounts.Account r7;
        android.database.sqlite.SQLiteDatabase r8;
        android.database.Cursor r10;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r7 := @parameter0: android.accounts.Account;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r8 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r1 = r7.<android.accounts.Account: java.lang.String name>;

        r9 = r7.<android.accounts.Account: java.lang.String type>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "previous_name";

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = r1;

        $r4[1] = r9;

        r10 = virtualinvoke r8.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r3, "name=? AND type=?", $r4, null, null, null);

     label01:
        $z0 = interfaceinvoke r10.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label04;

        r11 = interfaceinvoke r10.<android.database.Cursor: java.lang.String getString(int)>(0);

     label02:
        if r10 == null goto label03;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label03:
        return r11;

     label04:
        if r10 == null goto label05;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label05:
        return null;

     label06:
        $r6 := @caughtexception;

        if r10 == null goto label10;

     label07:
        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    long findExtrasIdByAccountId(long, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        java.lang.StringBuilder $r2;
        java.lang.String[] $r8, $r9;
        boolean $z0;
        java.lang.Throwable $r10;
        long l0, l1;
        java.lang.String r11, r14;
        android.database.sqlite.SQLiteDatabase r12;
        android.database.Cursor r15;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r11 := @parameter1: java.lang.String;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r12 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accounts_id=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "_id";

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r11;

        r15 = virtualinvoke r12.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ceDb.extras", $r8, r14, $r9, null, null, null);

     label1:
        $z0 = interfaceinvoke r15.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        l1 = interfaceinvoke r15.<android.database.Cursor: long getLong(int)>(0);

     label2:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

        return l1;

     label3:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

        return -1L;

     label4:
        $r10 := @caughtexception;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    long findMatchingGrantsCount(int, java.lang.String, android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        int i0;
        java.lang.String r1, $r6, $r7, $r8;
        android.accounts.Account r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.String[] $r5;
        long $l1;

        r0 := @this: com.android.server.accounts.AccountsDb;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.accounts.Account;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r4 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r5 = newarray (java.lang.String)[4];

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r5[0] = $r6;

        $r5[1] = r1;

        $r7 = r2.<android.accounts.Account: java.lang.String name>;

        $r5[2] = $r7;

        $r8 = r2.<android.accounts.Account: java.lang.String type>;

        $r5[3] = $r8;

        $l1 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r4, "SELECT COUNT(*) FROM grants, accounts WHERE accounts_id=_id AND uid=? AND auth_token_type=? AND name=? AND type=?", $r5);

        return $l1;
    }

    long findMatchingGrantsCountAnyToken(int, android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        int i0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4;
        java.lang.String $r5, $r6, $r7;
        long $l1;

        r0 := @this: com.android.server.accounts.AccountsDb;

        i0 := @parameter0: int;

        r1 := @parameter1: android.accounts.Account;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r3 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r4 = newarray (java.lang.String)[3];

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = r1.<android.accounts.Account: java.lang.String name>;

        $r4[1] = $r6;

        $r7 = r1.<android.accounts.Account: java.lang.String type>;

        $r4[2] = $r7;

        $l1 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r3, "SELECT COUNT(*) FROM grants, accounts WHERE accounts_id=_id AND uid=? AND name=? AND type=?", $r4);

        return $l1;
    }

    java.util.Map findMetaAuthUid()
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.Cursor r1;
        java.lang.String r3, $r10, $r16, $r17, r21;
        java.lang.StringBuilder r4;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.String[] $r7, $r8, $r11;
        java.util.LinkedHashMap $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i1;
        java.lang.Integer $r18;
        java.lang.Throwable $r20;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r6 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "key";

        $r7[1] = "value";

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "auth_uid_for_type:%";

        r1 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("meta", $r7, "key LIKE ?", $r8, null, null, "key");

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

     label1:
        $z4 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z4 == 0 goto label7;

        $r10 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r11 = staticinvoke <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r10, ":");

        r3 = $r11[1];

        r21 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label5;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r21);

        if $z3 == 0 goto label3;

     label2:
        goto label5;

     label3:
        $r17 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(1);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r18);

     label4:
        goto label1;

     label5:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auth type empty: ");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid empty: ");

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r21);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r16 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccountsDb", $r16);

     label6:
        goto label1;

     label7:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        return $r9;

     label8:
        $r20 := @caughtexception;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw $r20;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    long findSharedAccountId(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        long l0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        android.accounts.Account r6;
        java.lang.String r7, r8;
        android.database.Cursor r9;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r6 := @parameter0: android.accounts.Account;

        $r2 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r2.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r7 = r6.<android.accounts.Account: java.lang.String name>;

        r8 = r6.<android.accounts.Account: java.lang.String type>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "_id";

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = r7;

        $r4[1] = r8;

        r9 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("shared_accounts", $r3, "name=? AND type=?", $r4, null, null, null);

     label1:
        $z0 = interfaceinvoke r9.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        l0 = interfaceinvoke r9.<android.database.Cursor: long getLong(int)>(0);

     label2:
        interfaceinvoke r9.<android.database.Cursor: void close()>();

        return l0;

     label3:
        interfaceinvoke r9.<android.database.Cursor: void close()>();

        return -1L;

     label4:
        $r5 := @caughtexception;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    java.util.Map findUserExtrasForAccount(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, $r7, $r8, r14;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.util.HashMap $r4;
        java.lang.String[] $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r10, $r11;
        android.accounts.Account r12;
        android.database.Cursor r15;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r12 := @parameter0: android.accounts.Account;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r1 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r2 = r12.<android.accounts.Account: java.lang.String name>;

        r14 = r12.<android.accounts.Account: java.lang.String type>;

        $r6 = <com.android.server.accounts.AccountsDb: java.lang.String[] COLUMNS_EXTRAS_KEY_AND_VALUE>;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r2;

        $r5[1] = r14;

        r15 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ceDb.extras", $r6, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", $r5, null, null, null);

     label1:
        $z0 = interfaceinvoke r15.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r15.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r8 = interfaceinvoke r15.<android.database.Cursor: java.lang.String getString(int)>(1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label2:
        goto label1;

     label3:
        if r15 == null goto label4;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label4:
        return $r4;

     label5:
        $r11 := @caughtexception;

        if r15 == null goto label9;

     label6:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label9:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    java.util.List getSharedAccounts()
    {
        com.android.server.accounts.AccountsDb r0;
        int i0, i1;
        android.accounts.Account r2;
        boolean z0, $z1;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r3;
        java.util.ArrayList $r4;
        java.lang.String[] $r5;
        java.lang.String $r6, $r7;
        java.lang.Throwable $r8;
        android.database.sqlite.SQLiteDatabase r9;
        android.database.Cursor r10, r11;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r3 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r9 = virtualinvoke $r3.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r10 = null;

     label01:
        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "name";

        $r5[1] = "type";

        r11 = virtualinvoke r9.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("shared_accounts", $r5, null, null, null, null, null);

     label02:
        if r11 == null goto label17;

        r10 = r11;

     label03:
        $z1 = interfaceinvoke r11.<android.database.Cursor: boolean moveToFirst()>();

        if $z1 == 0 goto label17;

     label04:
        r10 = r11;

     label05:
        i0 = interfaceinvoke r11.<android.database.Cursor: int getColumnIndex(java.lang.String)>("name");

     label06:
        r10 = r11;

     label07:
        i1 = interfaceinvoke r11.<android.database.Cursor: int getColumnIndex(java.lang.String)>("type");

     label08:
        r10 = r11;

     label09:
        r2 = new android.accounts.Account;

     label10:
        r10 = r11;

     label11:
        $r6 = interfaceinvoke r11.<android.database.Cursor: java.lang.String getString(int)>(i0);

        $r7 = interfaceinvoke r11.<android.database.Cursor: java.lang.String getString(int)>(i1);

        specialinvoke r2.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

     label12:
        r10 = r11;

     label13:
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label14:
        r10 = r11;

     label15:
        z0 = interfaceinvoke r11.<android.database.Cursor: boolean moveToNext()>();

     label16:
        if z0 != 0 goto label08;

     label17:
        if r11 == null goto label18;

        interfaceinvoke r11.<android.database.Cursor: void close()>();

     label18:
        return $r4;

     label19:
        $r8 := @caughtexception;

        if r10 == null goto label20;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label20:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
    }

    android.database.sqlite.SQLiteStatement getStatementForLogging()
    {
        com.android.server.accounts.AccountsDb r0;
        android.database.sqlite.SQLiteStatement $r2, $r3, $r4, r10;
        android.database.sqlite.SQLiteException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r2 = r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement mDebugStatementForLogging>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement mDebugStatementForLogging>;

        return $r4;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement compileSqlStatementForLogging()>();

        r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement mDebugStatementForLogging> = $r3;

        r10 = r0.<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement mDebugStatementForLogging>;

     label2:
        return r10;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open debug table");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountsDb", $r9);

        return null;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    long insertAuthToken(long, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0, $l1;
        java.lang.String r1, r2;
        android.database.sqlite.SQLiteDatabase r3;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.content.ContentValues $r6;
        java.lang.Long $r7;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r3 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("accounts_id", $r7);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", r1);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("authtoken", r2);

        $l1 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.authtokens", "authtoken", $r6);

        return $l1;
    }

    long insertCeAccount(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        android.accounts.Account r1;
        java.lang.String r2, $r7, $r8;
        android.database.sqlite.SQLiteDatabase r3;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.content.ContentValues $r6;
        long $l0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r3 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        $r7 = r1.<android.accounts.Account: java.lang.String name>;

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r7);

        $r8 = r1.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r8);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("password", r2);

        $l0 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.accounts", "name", $r6);

        return $l0;
    }

    long insertDeAccount(android.accounts.Account, long)
    {
        com.android.server.accounts.AccountsDb r0;
        android.accounts.Account r1;
        long l0, $l1, $l2;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        android.content.ContentValues $r5;
        java.lang.Long $r6, $r9;
        java.lang.String $r7, $r8;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: android.accounts.Account;

        l0 := @parameter1: long;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("_id", $r6);

        $r7 = r1.<android.accounts.Account: java.lang.String name>;

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r7);

        $r8 = r1.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r8);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("last_password_entry_time_millis_epoch", $r9);

        $l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", "name", $r5);

        return $l2;
    }

    long insertExtra(long, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0, $l1;
        java.lang.String r1, r2;
        android.database.sqlite.SQLiteDatabase r3;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.content.ContentValues $r6;
        java.lang.Long $r7;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r3 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("key", r1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("accounts_id", $r7);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", r2);

        $l1 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.extras", "key", $r6);

        return $l1;
    }

    long insertGrant(long, java.lang.String, int)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0, $l2;
        java.lang.String r1;
        int i1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        android.content.ContentValues $r5;
        java.lang.Long $r6;
        java.lang.Integer $r7;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("accounts_id", $r6);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("auth_token_type", r1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("uid", $r7);

        $l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("grants", "accounts_id", $r5);

        return $l2;
    }

    long insertOrReplaceMetaAuthTypeAndUid(java.lang.String, int)
    {
        com.android.server.accounts.AccountsDb r0;
        java.lang.String r1, $r10;
        int i0;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.content.ContentValues $r6;
        java.lang.StringBuilder $r7;
        java.lang.Integer $r11;
        long $l1;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auth_uid_for_type:");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("key", $r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("value", $r11);

        $l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("meta", null, $r6, 5);

        return $l1;
    }

    long insertSharedAccount(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.accounts.Account r1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        android.content.ContentValues $r5;
        java.lang.String $r6, $r7;
        long $l0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: android.accounts.Account;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = r1.<android.accounts.Account: java.lang.String name>;

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r6);

        $r7 = r1.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r7);

        $l0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("shared_accounts", "name", $r5);

        return $l0;
    }

    boolean isCeDatabaseAttached()
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $z0 = staticinvoke <com.android.server.accounts.AccountsDb$DeDatabaseHelper: boolean access$700(com.android.server.accounts.AccountsDb$DeDatabaseHelper)>($r1);

        return $z0;
    }

    boolean renameCeAccount(long, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        java.lang.String r1, $r7;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        android.content.ContentValues $r5;
        java.lang.String[] $r6;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r1);

        z0 = 1;

        $r6 = newarray (java.lang.String)[1];

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r6[0] = $r7;

        $i1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("ceDb.accounts", $r5, "_id=?", $r6);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean renameDeAccount(long, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        java.lang.String r1, r2, $r8;
        android.database.sqlite.SQLiteDatabase r3;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.content.ContentValues $r6;
        java.lang.String[] $r7;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r3 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r1);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("previous_name", r2);

        z0 = 1;

        $r7 = newarray (java.lang.String)[1];

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r7[0] = $r8;

        $i1 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", $r6, "_id=?", $r7);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    int renameSharedAccount(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        android.accounts.Account r1;
        java.lang.String r2, $r8, $r9;
        android.database.sqlite.SQLiteDatabase r3;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.content.ContentValues $r6;
        java.lang.String[] $r7;
        int $i0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r3 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r2);

        $r7 = newarray (java.lang.String)[2];

        $r8 = r1.<android.accounts.Account: java.lang.String name>;

        $r7[0] = $r8;

        $r9 = r1.<android.accounts.Account: java.lang.String type>;

        $r7[1] = $r9;

        $i0 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("shared_accounts", $r6, "name=? AND type=?", $r7);

        return $i0;
    }

    long reserveDebugDbInsertionPoint()
    {
        com.android.server.accounts.AccountsDb r0;
        long $l0, $l2, $l3, $l4, $l5, $l6, $l7;
        byte $b1;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $l0 = r0.<com.android.server.accounts.AccountsDb: long mDebugDbInsertionPoint>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $l6 = virtualinvoke r0.<com.android.server.accounts.AccountsDb: long calculateDebugTableInsertionPoint()>();

        r0.<com.android.server.accounts.AccountsDb: long mDebugDbInsertionPoint> = $l6;

        $l7 = r0.<com.android.server.accounts.AccountsDb: long mDebugDbInsertionPoint>;

        return $l7;

     label1:
        $l2 = r0.<com.android.server.accounts.AccountsDb: long mDebugDbInsertionPoint>;

        $l3 = $l2 + 1L;

        $l4 = $l3 % 64L;

        r0.<com.android.server.accounts.AccountsDb: long mDebugDbInsertionPoint> = $l4;

        $l5 = r0.<com.android.server.accounts.AccountsDb: long mDebugDbInsertionPoint>;

        return $l5;
    }

    boolean setAccountVisibility(long, java.lang.String, int)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0, $l2;
        java.lang.String r1, $r6, $r7;
        int i1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        android.content.ContentValues $r5;
        byte $b3;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("accounts_id", $r6);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("_package", r1);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", $r7);

        $l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>("visibility", "value", $r5);

        $b3 = $l2 cmp -1L;

        if $b3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void setTransactionSuccessful()
    {
        com.android.server.accounts.AccountsDb r0;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: com.android.server.accounts.AccountsDb;

        $r1 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        $r2 = virtualinvoke $r1.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        return;
    }

    boolean updateAccountLastAuthenticatedTime(android.accounts.Account)
    {
        com.android.server.accounts.AccountsDb r0;
        android.accounts.Account r1;
        android.database.sqlite.SQLiteDatabase r2;
        java.lang.String r4, $r9;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r5;
        android.content.ContentValues $r6;
        long $l0;
        java.lang.Long $r7;
        java.lang.String[] $r8;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        r1 := @parameter0: android.accounts.Account;

        $r5 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r5.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("last_password_entry_time_millis_epoch", $r7);

        r4 = r1.<android.accounts.Account: java.lang.String name>;

        z0 = 0;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = r4;

        $r9 = r1.<android.accounts.Account: java.lang.String type>;

        $r8[1] = $r9;

        $i1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", $r6, "name=? AND type=?", $r8);

        if $i1 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    int updateCeAccountPassword(long, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        java.lang.String r1, $r7;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        android.content.ContentValues $r5;
        java.lang.String[] $r6;
        int $i1;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("password", r1);

        $r6 = newarray (java.lang.String)[1];

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r6[0] = $r7;

        $i1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("ceDb.accounts", $r5, "_id=?", $r6);

        return $i1;
    }

    boolean updateExtra(long, java.lang.String)
    {
        com.android.server.accounts.AccountsDb r0;
        long l0;
        java.lang.String r1, $r7;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.accounts.AccountsDb$DeDatabaseHelper $r4;
        android.content.ContentValues $r5;
        java.lang.String[] $r6;
        int $i1;
        boolean z0;

        r0 := @this: com.android.server.accounts.AccountsDb;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb$DeDatabaseHelper mDeDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", r1);

        z0 = 1;

        $r6 = newarray (java.lang.String)[1];

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r6[0] = $r7;

        $i1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("extras", $r5, "_id=?", $r6);

        if $i1 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }
}
