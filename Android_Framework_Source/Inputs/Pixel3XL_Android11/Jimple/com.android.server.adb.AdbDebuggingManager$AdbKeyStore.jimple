class com.android.server.adb.AdbDebuggingManager$AdbKeyStore extends java.lang.Object
{
    private static final int KEYSTORE_VERSION;
    private static final int MAX_SUPPORTED_KEYSTORE_VERSION;
    public static final long NO_PREVIOUS_CONNECTION;
    private static final java.lang.String SYSTEM_KEY_FILE;
    private static final java.lang.String XML_ATTRIBUTE_KEY;
    private static final java.lang.String XML_ATTRIBUTE_LAST_CONNECTION;
    private static final java.lang.String XML_ATTRIBUTE_VERSION;
    private static final java.lang.String XML_ATTRIBUTE_WIFI_BSSID;
    private static final java.lang.String XML_KEYSTORE_START_TAG;
    private static final java.lang.String XML_TAG_ADB_KEY;
    private static final java.lang.String XML_TAG_WIFI_ACCESS_POINT;
    private android.util.AtomicFile mAtomicKeyFile;
    private java.io.File mKeyFile;
    private java.util.Map mKeyMap;
    private java.util.Set mSystemKeys;
    private java.util.List mTrustedNetworks;
    final com.android.server.adb.AdbDebuggingManager this$0;

    void <init>(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        com.android.server.adb.AdbDebuggingManager r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void init()>();

        return;
    }

    void <init>(com.android.server.adb.AdbDebuggingManager, java.io.File)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        com.android.server.adb.AdbDebuggingManager r1;
        java.io.File r2;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r2 := @parameter1: java.io.File;

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile> = r2;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void init()>();

        return;
    }

    private void addUserKeysToKeyStore()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.io.File r1;
        long l0;
        com.android.server.adb.AdbDebuggingManager $r2, $r3;
        boolean $z2, $z3, z4, z6, z7;
        java.util.Map $r4, $r5;
        java.lang.Long $r6;
        java.lang.Throwable $r8, $r9, $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r16, r19;
        java.io.BufferedReader r17;
        java.io.FileReader r18;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        r1 = virtualinvoke $r2.<com.android.server.adb.AdbDebuggingManager: java.io.File getUserKeyFile()>();

        z4 = 0;

        z6 = 0;

        if r1 == null goto label28;

        z6 = 0;

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label28;

        z7 = 0;

     label01:
        r17 = new java.io.BufferedReader;

     label02:
        z7 = 0;

     label03:
        r18 = new java.io.FileReader;

     label04:
        z7 = 0;

     label05:
        specialinvoke r18.<java.io.FileReader: void <init>(java.io.File)>(r1);

     label06:
        z7 = 0;

     label07:
        specialinvoke r17.<java.io.BufferedReader: void <init>(java.io.Reader)>(r18);

     label08:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label09:
        z6 = 0;

     label10:
        z4 = z6;

     label11:
        r19 = virtualinvoke r17.<java.io.BufferedReader: java.lang.String readLine()>();

     label12:
        if r19 == null goto label17;

        z4 = z6;

     label13:
        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $z3 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r19);

        if $z3 != 0 goto label10;

     label14:
        z4 = z6;

     label15:
        $r5 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r6);

     label16:
        z6 = 1;

        goto label10;

     label17:
        z7 = z6;

     label18:
        virtualinvoke r17.<java.io.BufferedReader: void close()>();

     label19:
        goto label28;

     label20:
        $r9 := @caughtexception;

     label21:
        virtualinvoke r17.<java.io.BufferedReader: void close()>();

     label22:
        goto label25;

     label23:
        $r8 := @caughtexception;

        z7 = z4;

     label24:
        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label25:
        z7 = z4;

     label26:
        throw $r9;

     label27:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught an exception reading ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r16);

        z6 = z7;

     label28:
        if z6 == 0 goto label29;

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$600(com.android.server.adb.AdbDebuggingManager)>($r3);

     label29:
        return;

        catch java.io.IOException from label01 to label02 with label27;
        catch java.io.IOException from label03 to label04 with label27;
        catch java.io.IOException from label05 to label06 with label27;
        catch java.io.IOException from label07 to label08 with label27;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.io.IOException from label18 to label19 with label27;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.io.IOException from label24 to label25 with label27;
        catch java.io.IOException from label26 to label27 with label27;
    }

    private boolean filterOutOldKeys()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        long l0, l1, l2, $l4;
        java.util.Iterator r1;
        java.util.Map $r2, $r4;
        java.util.Set $r3, $r6;
        boolean $z0, z1, z2;
        com.android.server.adb.AdbDebuggingManager $r5;
        java.lang.Object $r7, $r9;
        java.util.Map$Entry $r8;
        java.lang.Long $r10;
        byte $b3, $b5;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        z1 = 0;

        l0 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: long getAllowedConnectionTime()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.Long) $r9;

        l2 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        z2 = z1;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label2;

        z2 = z1;

        $l4 = l2 + l0;

        $b5 = l1 cmp $l4;

        if $b5 <= 0 goto label2;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        z2 = 1;

     label2:
        z1 = z2;

        goto label1;

     label3:
        if z1 == 0 goto label4;

        $r5 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$1800(com.android.server.adb.AdbDebuggingManager,java.lang.Iterable)>($r5, $r6);

     label4:
        return z1;
    }

    private java.util.Map getKeyMap()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        int i0, $i2, $i9;
        long l1;
        java.lang.StringBuilder r1, $r24, r44, r45;
        java.util.HashMap $r2;
        android.util.AtomicFile $r3, $r4, $r5, $r23;
        boolean $z0, $z1, $z2;
        java.nio.charset.Charset $r6;
        java.lang.String $r7, $r8, $r14, $r15, $r16, $r22, $r29, $r33, r43, r46, r47;
        java.lang.Long $r9, $r10;
        java.io.File $r26;
        java.lang.Throwable $r30, $r34, $r35, $r36, $r38;
        java.util.Map $r37;
        java.io.FileInputStream r41;
        org.xmlpull.v1.XmlPullParser r42;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r3 != null goto label01;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void initKeyFile()>();

        $r23 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r23 != null goto label01;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to obtain the key file, ");

        $r26 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for reading");

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r29);

        return $r2;

     label01:
        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        $z0 = virtualinvoke $r4.<android.util.AtomicFile: boolean exists()>();

        if $z0 != 0 goto label02;

        return $r2;

     label02:
        $r5 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        r41 = virtualinvoke $r5.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label03:
        r42 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r41, $r7);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r42, "keyStore");

        $i2 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i2 == 1 goto label17;

        r43 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label04:
        if r43 == null goto label13;

     label05:
        $r15 = "keyStore";

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z2 != 0 goto label07;

     label06:
        goto label13;

     label07:
        $r16 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "version");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

     label08:
        if i0 <= 1 goto label17;

     label09:
        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keystore version=");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported (max_supported=");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r22);

     label10:
        if r41 == null goto label12;

     label11:
        virtualinvoke r41.<java.io.FileInputStream: void close()>();

     label12:
        return $r2;

     label13:
        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected keyStore, but got tag=");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        $r14 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r14);

     label14:
        if r41 == null goto label16;

     label15:
        virtualinvoke r41.<java.io.FileInputStream: void close()>();

     label16:
        return $r2;

     label17:
        $i9 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i9 == 1 goto label28;

        r46 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label18:
        if r46 != null goto label19;

        goto label28;

     label19:
        $z1 = virtualinvoke r46.<java.lang.String: boolean equals(java.lang.Object)>("adbKey");

        if $z1 != 0 goto label21;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r42);

     label20:
        goto label17;

     label21:
        r47 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "key");

     label22:
        $r8 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lastConnection");

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r8);

        l1 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

     label23:
        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r47, $r10);

     label24:
        goto label17;

     label25:
        $r30 := @caughtexception;

     label26:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught a NumberFormatException parsing the last connection time: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r33);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r42);

     label27:
        goto label17;

     label28:
        if r41 == null goto label39;

     label29:
        virtualinvoke r41.<java.io.FileInputStream: void close()>();

     label30:
        goto label39;

     label31:
        $r34 := @caughtexception;

        if r41 == null goto label36;

     label32:
        virtualinvoke r41.<java.io.FileInputStream: void close()>();

     label33:
        goto label36;

     label34:
        $r35 := @caughtexception;

     label35:
        virtualinvoke $r34.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r35);

     label36:
        throw $r34;

     label37:
        $r36 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Caught XmlPullParserException parsing the XML key file: ", $r36);

        $r37 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map getKeyMapBeforeKeystoreVersion()>();

        return $r37;

     label38:
        $r38 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Caught an IOException parsing the XML key file: ", $r38);

     label39:
        return $r2;

        catch java.io.IOException from label02 to label03 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label37;
        catch java.lang.Throwable from label03 to label04 with label31;
        catch java.lang.Throwable from label05 to label06 with label31;
        catch java.lang.Throwable from label07 to label08 with label31;
        catch java.lang.Throwable from label09 to label10 with label31;
        catch java.io.IOException from label11 to label12 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label37;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.io.IOException from label15 to label16 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label37;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch java.lang.Throwable from label21 to label22 with label31;
        catch java.lang.NumberFormatException from label22 to label23 with label25;
        catch java.lang.Throwable from label22 to label23 with label31;
        catch java.lang.Throwable from label23 to label24 with label31;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.io.IOException from label29 to label30 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label37;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.io.IOException from label35 to label36 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label35 to label36 with label37;
        catch java.io.IOException from label36 to label37 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label36 to label37 with label37;
    }

    private java.util.Map getKeyMapBeforeKeystoreVersion()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        long l0;
        java.lang.StringBuilder r2, $r14;
        java.util.HashMap $r3;
        android.util.AtomicFile $r4, $r5, $r6, $r13;
        boolean $z0, $z1;
        java.nio.charset.Charset $r7;
        java.lang.String $r8, $r9, $r19, $r23, r30, r31;
        java.lang.Long $r10, $r11;
        java.io.File $r16;
        java.lang.Throwable $r20, $r24, $r25, $r26;
        java.io.FileInputStream r28;
        org.xmlpull.v1.XmlPullParser r29;
        int $i4;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r4 != null goto label01;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void initKeyFile()>();

        $r13 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r13 != null goto label01;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to obtain the key file, ");

        $r16 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for reading");

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r19);

        return $r3;

     label01:
        $r5 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        $z0 = virtualinvoke $r5.<android.util.AtomicFile: boolean exists()>();

        if $z0 != 0 goto label02;

        return $r3;

     label02:
        $r6 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        r28 = virtualinvoke $r6.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label03:
        r29 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r29.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r28, $r8);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r29, "adbKey");

     label04:
        $i4 = interfaceinvoke r29.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i4 == 1 goto label15;

        r30 = interfaceinvoke r29.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label05:
        if r30 != null goto label06;

        goto label15;

     label06:
        $z1 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("adbKey");

        if $z1 != 0 goto label08;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r29);

     label07:
        goto label04;

     label08:
        r31 = interfaceinvoke r29.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "key");

     label09:
        $r9 = interfaceinvoke r29.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lastConnection");

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r9);

        l0 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

     label10:
        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, $r11);

     label11:
        goto label04;

     label12:
        $r20 := @caughtexception;

     label13:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught a NumberFormatException parsing the last connection time: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r23 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r23);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r29);

     label14:
        goto label04;

     label15:
        if r28 == null goto label17;

     label16:
        virtualinvoke r28.<java.io.FileInputStream: void close()>();

     label17:
        goto label25;

     label18:
        $r25 := @caughtexception;

        if r28 == null goto label23;

     label19:
        virtualinvoke r28.<java.io.FileInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r26 := @caughtexception;

     label22:
        virtualinvoke $r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r26);

     label23:
        throw $r25;

     label24:
        $r24 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Caught an exception parsing the XML key file: ", $r24);

     label25:
        return $r3;

        catch java.io.IOException from label02 to label03 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label24;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.NumberFormatException from label09 to label10 with label12;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.io.IOException from label16 to label17 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label24;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.io.IOException from label22 to label23 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label24;
        catch java.io.IOException from label23 to label24 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label24;
    }

    private java.util.Set getSystemKeysFromFile(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1, $r12, r17, r18;
        java.io.FileReader r3;
        java.util.HashSet $r4;
        java.io.File $r5;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r6, $r13, $r14;
        java.lang.StringBuilder $r7;
        java.io.BufferedReader r16;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label15;

     label01:
        r16 = new java.io.BufferedReader;

        r3 = new java.io.FileReader;

        specialinvoke r3.<java.io.FileReader: void <init>(java.io.File)>($r5);

        specialinvoke r16.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3);

     label02:
        r17 = virtualinvoke r16.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if r17 == null goto label06;

     label04:
        r18 = virtualinvoke r17.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke r18.<java.lang.String: int length()>();

        if $i0 <= 0 goto label02;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r18);

     label05:
        goto label02;

     label06:
        virtualinvoke r16.<java.io.BufferedReader: void close()>();

     label07:
        goto label15;

     label08:
        $r13 := @caughtexception;

     label09:
        virtualinvoke r16.<java.io.BufferedReader: void close()>();

     label10:
        goto label13;

     label11:
        $r14 := @caughtexception;

     label12:
        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label13:
        throw $r13;

     label14:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught an exception reading ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r12);

     label15:
        return $r4;

        catch java.io.IOException from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label13 to label14 with label14;
    }

    private java.util.List getTrustedNetworks()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        int i0, $i1, $i6;
        java.util.ArrayList $r2;
        android.util.AtomicFile $r3, $r4, $r5, $r19;
        boolean $z0, $z1, $z3;
        java.nio.charset.Charset $r6;
        java.lang.String $r7, $r8, $r11, $r12, $r13, $r18, $r25, r32, r35;
        java.lang.StringBuilder $r20, r33, r34;
        java.io.File $r22;
        java.lang.Throwable $r26, $r27, $r28;
        java.io.FileInputStream r30;
        org.xmlpull.v1.XmlPullParser r31;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r3 != null goto label01;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void initKeyFile()>();

        $r19 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r19 != null goto label01;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to obtain the key file, ");

        $r22 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for reading");

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r25);

        return $r2;

     label01:
        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        $z0 = virtualinvoke $r4.<android.util.AtomicFile: boolean exists()>();

        if $z0 != 0 goto label02;

        return $r2;

     label02:
        $r5 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        r30 = virtualinvoke $r5.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label03:
        r31 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r31.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r30, $r7);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r31, "keyStore");

        $i1 = interfaceinvoke r31.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i1 == 1 goto label17;

        r32 = interfaceinvoke r31.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label04:
        if r32 == null goto label13;

     label05:
        $r12 = "keyStore";

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r32);

        if $z3 != 0 goto label07;

     label06:
        goto label13;

     label07:
        $r13 = interfaceinvoke r31.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "version");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

     label08:
        if i0 <= 1 goto label17;

     label09:
        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keystore version=");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported (max_supported=");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1);

        $r18 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r18);

     label10:
        if r30 == null goto label12;

     label11:
        virtualinvoke r30.<java.io.FileInputStream: void close()>();

     label12:
        return $r2;

     label13:
        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected keyStore, but got tag=");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r11 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r11);

     label14:
        if r30 == null goto label16;

     label15:
        virtualinvoke r30.<java.io.FileInputStream: void close()>();

     label16:
        return $r2;

     label17:
        $i6 = interfaceinvoke r31.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i6 == 1 goto label23;

        r35 = interfaceinvoke r31.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label18:
        if r35 != null goto label19;

        goto label23;

     label19:
        $z1 = virtualinvoke r35.<java.lang.String: boolean equals(java.lang.Object)>("wifiAP");

        if $z1 != 0 goto label21;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r31);

     label20:
        goto label17;

     label21:
        $r8 = interfaceinvoke r31.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "bssid");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

     label22:
        goto label17;

     label23:
        if r30 == null goto label25;

     label24:
        virtualinvoke r30.<java.io.FileInputStream: void close()>();

     label25:
        goto label33;

     label26:
        $r27 := @caughtexception;

        if r30 == null goto label31;

     label27:
        virtualinvoke r30.<java.io.FileInputStream: void close()>();

     label28:
        goto label31;

     label29:
        $r28 := @caughtexception;

     label30:
        virtualinvoke $r27.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r28);

     label31:
        throw $r27;

     label32:
        $r26 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Caught an exception parsing the XML key file: ", $r26);

     label33:
        return $r2;

        catch java.io.IOException from label02 to label03 with label32;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label32;
        catch java.lang.NumberFormatException from label02 to label03 with label32;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.io.IOException from label11 to label12 with label32;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label32;
        catch java.lang.NumberFormatException from label11 to label12 with label32;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.io.IOException from label15 to label16 with label32;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label32;
        catch java.lang.NumberFormatException from label15 to label16 with label32;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.io.IOException from label24 to label25 with label32;
        catch org.xmlpull.v1.XmlPullParserException from label24 to label25 with label32;
        catch java.lang.NumberFormatException from label24 to label25 with label32;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.io.IOException from label30 to label31 with label32;
        catch org.xmlpull.v1.XmlPullParserException from label30 to label31 with label32;
        catch java.lang.NumberFormatException from label30 to label31 with label32;
        catch java.io.IOException from label31 to label32 with label32;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label32;
        catch java.lang.NumberFormatException from label31 to label32 with label32;
    }

    private void init()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.util.Map $r1;
        java.util.List $r2;
        java.util.Set $r3;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void initKeyFile()>();

        $r1 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map getKeyMap()>();

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap> = $r1;

        $r2 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.List getTrustedNetworks()>();

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.List mTrustedNetworks> = $r2;

        $r3 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Set getSystemKeysFromFile(java.lang.String)>("/adb_keys");

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Set mSystemKeys> = $r3;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void addUserKeysToKeyStore()>();

        return;
    }

    private void initKeyFile()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.io.File $r1, $r2, $r4, $r6;
        android.util.AtomicFile $r3;
        com.android.server.adb.AdbDebuggingManager $r5;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile>;

        if $r1 != null goto label1;

        $r5 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        $r6 = virtualinvoke $r5.<com.android.server.adb.AdbDebuggingManager: java.io.File getAdbTempKeysFile()>();

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile> = $r6;

     label1:
        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile>;

        if $r2 == null goto label2;

        $r3 = new android.util.AtomicFile;

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile>;

        specialinvoke $r3.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

        r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile> = $r3;

     label2:
        return;
    }

    public void addTrustedNetwork(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1;
        java.util.List $r2;
        com.android.server.adb.AdbDebuggingManager $r3;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.List mTrustedNetworks>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$600(com.android.server.adb.AdbDebuggingManager)>($r3);

        return;
    }

    public void deleteKeyStore()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        android.util.AtomicFile r1;
        java.util.Map $r2;
        java.util.List $r3;
        com.android.server.adb.AdbDebuggingManager $r4;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.List mTrustedNetworks>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$1900(com.android.server.adb.AdbDebuggingManager)>($r4);

        r1 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<android.util.AtomicFile: void delete()>();

        return;
    }

    public java.lang.String findKeyFromFingerprint(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1, $r9, $r10, $r12;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r8, $r11;
        com.android.server.adb.AdbDebuggingManager $r7;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = staticinvoke <com.android.server.adb.AdbDebuggingManager: java.lang.String access$900(com.android.server.adb.AdbDebuggingManager,java.lang.String)>($r7, $r9);

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        return $r12;

     label2:
        goto label1;

     label3:
        return null;
    }

    public long getAllowedConnectionTime()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        com.android.server.adb.AdbDebuggingManager $r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        long $l0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        $r2 = staticinvoke <com.android.server.adb.AdbDebuggingManager: android.content.Context access$000(com.android.server.adb.AdbDebuggingManager)>($r1);

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r3, "adb_allowed_connection_time", 604800000L);

        return $l0;
    }

    public long getLastConnectionTime(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Long $r3, $r5;
        java.lang.Object $r4;
        long $l0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r5 = (java.lang.Long) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public long getNextExpirationTime()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        long l0, l1, l2, $l4, $l5, $l6, l9, l10;
        java.util.Iterator r1;
        byte $b3, $b7, $b8;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.util.Map$Entry $r5;
        java.lang.Long $r7;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        l9 = -1L;

        l0 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: long getAllowedConnectionTime()>();

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label1;

        return -1L;

     label1:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Long) $r6;

        $l4 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $l5 = $l4 + l0;

        $l6 = $l5 - l1;

        l2 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l6);

        $b7 = l9 cmp -1L;

        if $b7 == 0 goto label3;

        l10 = l9;

        $b8 = l2 cmp l9;

        if $b8 >= 0 goto label4;

     label3:
        l10 = l2;

     label4:
        l9 = l10;

        goto label2;

     label5:
        return l9;
    }

    public java.util.Map getPairedDevices()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.String r4, $r12, $r14, $r18, r22;
        java.lang.String[] r5;
        java.util.HashMap $r6;
        java.util.Map $r7;
        java.util.Set $r8, $r19;
        boolean $z0, $z1;
        java.lang.Object $r9, $r11, $r13, $r15, $r20;
        com.android.server.adb.AdbDebuggingManager $r10, $r17;
        int $i0;
        android.debug.PairDevice $r16;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        r4 = staticinvoke <com.android.server.adb.AdbDebuggingManager: java.lang.String access$900(com.android.server.adb.AdbDebuggingManager,java.lang.String)>($r10, $r12);

        r22 = "nouser@nohostname";

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r13;

        r5 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i0 = lengthof r5;

        if $i0 <= 1 goto label2;

        r22 = r5[1];

     label2:
        $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r15;

        $r16 = new android.debug.PairDevice;

        $r17 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        $r19 = staticinvoke <com.android.server.adb.AdbDebuggingManager: java.util.Set access$700(com.android.server.adb.AdbDebuggingManager)>($r17);

        $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke $r19.<java.util.Set: boolean contains(java.lang.Object)>($r20);

        specialinvoke $r16.<android.debug.PairDevice: void <init>(java.lang.String,java.lang.String,boolean)>(r22, r4, $z1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r16);

        goto label1;

     label3:
        return $r6;
    }

    public boolean isEmpty()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean isKeyAuthorized(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1;
        long l0, l1, $l4, $l5;
        java.util.Set $r2;
        boolean $z0;
        byte $b2, $b3, $b6;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Set mSystemKeys>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        l0 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: long getLastConnectionTime(java.lang.String)>(r1);

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        return 0;

     label2:
        l1 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: long getAllowedConnectionTime()>();

        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label4;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = l0 + l1;

        $b6 = $l4 cmp $l5;

        if $b6 >= 0 goto label3;

        goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public boolean isTrustedNetwork(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.List mTrustedNetworks>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void persistKeyStore()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        com.android.internal.util.FastXmlSerializer r1;
        java.util.Map $r2, $r9;
        boolean $z0, $z1, $z2, $z3;
        android.util.AtomicFile $r3, $r4, $r12, $r19, $r25;
        java.nio.charset.Charset $r5;
        java.lang.String $r6, $r8, $r16, $r18, $r22, r32;
        java.lang.Boolean $r7;
        java.util.Set $r10;
        java.util.List $r11, $r23;
        java.lang.Object $r13, $r14, $r15, $r17;
        java.lang.StringBuilder $r20;
        java.io.File $r21;
        java.lang.Throwable $r24;
        java.io.FileOutputStream r27, r28;
        java.util.Iterator r29, r31;
        java.util.Map$Entry r30;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: boolean filterOutOldKeys()>();

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r23 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.List mTrustedNetworks>;

        $z2 = interfaceinvoke $r23.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label01;

        virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void deleteKeyStore()>();

        return;

     label01:
        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r3 != null goto label02;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void initKeyFile()>();

        $r19 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        if $r19 != null goto label02;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to obtain the key file, ");

        $r21 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.io.File mKeyFile>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for writing");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r22);

        return;

     label02:
        r27 = null;

     label03:
        r1 = new com.android.internal.util.FastXmlSerializer;

     label04:
        r27 = null;

     label05:
        specialinvoke r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label06:
        r27 = null;

     label07:
        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        r28 = virtualinvoke $r4.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label08:
        r27 = r28;

     label09:
        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r28, $r6);

     label10:
        r27 = r28;

     label11:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r7);

     label12:
        r27 = r28;

     label13:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "keyStore");

     label14:
        r27 = r28;

     label15:
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "version", $r8);

     label16:
        r27 = r28;

     label17:
        $r9 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        r29 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        r27 = r28;

     label19:
        $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label31;

     label20:
        r27 = r28;

     label21:
        $r14 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.Map$Entry) $r14;

     label22:
        r27 = r28;

     label23:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "adbKey");

     label24:
        r27 = r28;

     label25:
        $r15 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (java.lang.String) $r15;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "key", $r16);

     label26:
        r27 = r28;

     label27:
        $r17 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lastConnection", $r18);

     label28:
        r27 = r28;

     label29:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "adbKey");

     label30:
        goto label18;

     label31:
        r27 = r28;

     label32:
        $r11 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.List mTrustedNetworks>;

        r31 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label33:
        r27 = r28;

     label34:
        $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label44;

     label35:
        r27 = r28;

     label36:
        $r13 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.String) $r13;

     label37:
        r27 = r28;

     label38:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "wifiAP");

     label39:
        r27 = r28;

     label40:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "bssid", r32);

     label41:
        r27 = r28;

     label42:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "wifiAP");

     label43:
        goto label33;

     label44:
        r27 = r28;

     label45:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "keyStore");

     label46:
        r27 = r28;

     label47:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label48:
        r27 = r28;

     label49:
        $r12 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        virtualinvoke $r12.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r28);

     label50:
        goto label52;

     label51:
        $r24 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Caught an exception writing the key map: ", $r24);

        $r25 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: android.util.AtomicFile mAtomicKeyFile>;

        virtualinvoke $r25.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r27);

     label52:
        return;

        catch java.io.IOException from label03 to label04 with label51;
        catch java.io.IOException from label05 to label06 with label51;
        catch java.io.IOException from label07 to label08 with label51;
        catch java.io.IOException from label09 to label10 with label51;
        catch java.io.IOException from label11 to label12 with label51;
        catch java.io.IOException from label13 to label14 with label51;
        catch java.io.IOException from label15 to label16 with label51;
        catch java.io.IOException from label17 to label18 with label51;
        catch java.io.IOException from label19 to label20 with label51;
        catch java.io.IOException from label21 to label22 with label51;
        catch java.io.IOException from label23 to label24 with label51;
        catch java.io.IOException from label25 to label26 with label51;
        catch java.io.IOException from label27 to label28 with label51;
        catch java.io.IOException from label29 to label30 with label51;
        catch java.io.IOException from label32 to label33 with label51;
        catch java.io.IOException from label34 to label35 with label51;
        catch java.io.IOException from label36 to label37 with label51;
        catch java.io.IOException from label38 to label39 with label51;
        catch java.io.IOException from label40 to label41 with label51;
        catch java.io.IOException from label42 to label43 with label51;
        catch java.io.IOException from label45 to label46 with label51;
        catch java.io.IOException from label47 to label48 with label51;
        catch java.io.IOException from label49 to label50 with label51;
    }

    public void removeKey(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1;
        java.util.Map $r2, $r3, $r5;
        boolean $z0;
        com.android.server.adb.AdbDebuggingManager $r6, $r8;
        java.util.Set $r7;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r6 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        $r5 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r7 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$1800(com.android.server.adb.AdbDebuggingManager,java.lang.Iterable)>($r6, $r7);

        $r8 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$600(com.android.server.adb.AdbDebuggingManager)>($r8);

     label1:
        return;
    }

    public void setLastConnectionTime(java.lang.String, long)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1;
        long l0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void setLastConnectionTime(java.lang.String,long,boolean)>(r1, l0, 0);

        return;
    }

    public void setLastConnectionTime(java.lang.String, long, boolean)
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        java.lang.String r1;
        long l0, $l1;
        boolean z0, $z1, $z2, $z3;
        java.util.Map $r2, $r3, $r4, $r8;
        java.lang.Long $r5, $r10;
        com.android.server.adb.AdbDebuggingManager $r7;
        java.lang.Object $r9;
        byte $b2;
        java.util.Set $r11;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $r8 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (java.lang.Long) $r9;

        $l1 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp l0;

        if $b2 < 0 goto label1;

        if z0 != 0 goto label1;

        return;

     label1:
        $r11 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Set mSystemKeys>;

        $z3 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z3 == 0 goto label2;

        return;

     label2:
        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z2 != 0 goto label3;

        $r7 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$2000(com.android.server.adb.AdbDebuggingManager,java.lang.String)>($r7, r1);

     label3:
        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map mKeyMap>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return;
    }

    public void updateKeyStore()
    {
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore r0;
        boolean $z0;
        com.android.server.adb.AdbDebuggingManager $r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        $z0 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: boolean filterOutOldKeys()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: com.android.server.adb.AdbDebuggingManager this$0>;

        staticinvoke <com.android.server.adb.AdbDebuggingManager: void access$600(com.android.server.adb.AdbDebuggingManager)>($r1);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String XML_TAG_WIFI_ACCESS_POINT> = "wifiAP";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String XML_TAG_ADB_KEY> = "adbKey";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String XML_KEYSTORE_START_TAG> = "keyStore";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String XML_ATTRIBUTE_WIFI_BSSID> = "bssid";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String XML_ATTRIBUTE_VERSION> = "version";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String XML_ATTRIBUTE_LAST_CONNECTION> = "lastConnection";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String XML_ATTRIBUTE_KEY> = "key";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.lang.String SYSTEM_KEY_FILE> = "/adb_keys";

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: long NO_PREVIOUS_CONNECTION> = 0L;

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: int MAX_SUPPORTED_KEYSTORE_VERSION> = 1;

        <com.android.server.adb.AdbDebuggingManager$AdbKeyStore: int KEYSTORE_VERSION> = 1;

        return;
    }
}
