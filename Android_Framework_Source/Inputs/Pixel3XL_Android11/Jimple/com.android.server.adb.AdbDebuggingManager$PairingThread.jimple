class com.android.server.adb.AdbDebuggingManager$PairingThread extends java.lang.Thread implements android.net.nsd.NsdManager$RegistrationListener
{
    static final java.lang.String SERVICE_PROTOCOL;
    private java.lang.String mGuid;
    private android.net.nsd.NsdManager mNsdManager;
    private java.lang.String mPairingCode;
    private int mPort;
    private java.lang.String mPublicKey;
    private java.lang.String mServiceName;
    private final java.lang.String mServiceType;
    final com.android.server.adb.AdbDebuggingManager this$0;

    void <init>(com.android.server.adb.AdbDebuggingManager, java.lang.String, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager$PairingThread r0;
        com.android.server.adb.AdbDebuggingManager r1;
        java.lang.String r2, r3, $r5, $r6, $r7;
        java.lang.Object[] $r4;
        boolean $z0;
        android.content.Context $r8;
        java.lang.Object $r9;
        android.net.nsd.NsdManager $r10;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$PairingThread;

        r1 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: com.android.server.adb.AdbDebuggingManager this$0> = r1;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("AdbDebuggingManager");

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "adb-tls-pairing";

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("_%s._tcp.", $r4);

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mServiceType> = $r5;

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mPairingCode> = r2;

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.adb.wifi.guid");

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mGuid> = $r6;

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mServiceName> = r3;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r7 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mGuid>;

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mServiceName> = $r7;

     label2:
        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: int mPort> = -1;

        $r8 = staticinvoke <com.android.server.adb.AdbDebuggingManager: android.content.Context access$000(com.android.server.adb.AdbDebuggingManager)>(r1);

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("servicediscovery");

        $r10 = (android.net.nsd.NsdManager) $r9;

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: android.net.nsd.NsdManager mNsdManager> = $r10;

        return;
    }

    private native void native_pairing_cancel();

    private native int native_pairing_start(java.lang.String, java.lang.String);

    private native boolean native_pairing_wait();

    public void cancelPairing()
    {
        com.android.server.adb.AdbDebuggingManager$PairingThread r0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$PairingThread;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: void native_pairing_cancel()>();

        return;
    }

    public void onRegistrationFailed(android.net.nsd.NsdServiceInfo, int)
    {
        com.android.server.adb.AdbDebuggingManager$PairingThread r0;
        android.net.nsd.NsdServiceInfo r1;
        int i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r8;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$PairingThread;

        r1 := @parameter0: android.net.nsd.NsdServiceInfo;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to register pairing service(err=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r8);

        virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: void cancelPairing()>();

        return;
    }

    public void onServiceRegistered(android.net.nsd.NsdServiceInfo)
    {
        com.android.server.adb.AdbDebuggingManager$PairingThread r0;
        android.net.nsd.NsdServiceInfo r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$PairingThread;

        r1 := @parameter0: android.net.nsd.NsdServiceInfo;

        return;
    }

    public void onServiceUnregistered(android.net.nsd.NsdServiceInfo)
    {
        com.android.server.adb.AdbDebuggingManager$PairingThread r0;
        android.net.nsd.NsdServiceInfo r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$PairingThread;

        r1 := @parameter0: android.net.nsd.NsdServiceInfo;

        return;
    }

    public void onUnregistrationFailed(android.net.nsd.NsdServiceInfo, int)
    {
        com.android.server.adb.AdbDebuggingManager$PairingThread r0;
        android.net.nsd.NsdServiceInfo r1;
        int i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r8;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$PairingThread;

        r1 := @parameter0: android.net.nsd.NsdServiceInfo;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unregister pairing service(err=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r8);

        return;
    }

    public void run()
    {
        com.android.server.adb.AdbDebuggingManager$PairingThread r0;
        int i0, $i2, $i3;
        boolean z0, $z1;
        java.lang.String $r2, $r3, $r4, $r6, $r7, r22;
        android.net.nsd.NsdServiceInfo $r5;
        android.net.nsd.NsdManager $r8, $r14;
        com.android.server.adb.AdbDebuggingManager $r9, $r12, $r16, $r18;
        android.os.Handler $r10, $r13, $r17, $r19;
        java.lang.Integer $r11;
        android.os.Bundle $r15;
        android.os.Message r21, r23;

        r0 := @this: com.android.server.adb.AdbDebuggingManager$PairingThread;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mGuid>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", "adbwifi guid was not set");

        return;

     label1:
        $r4 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mGuid>;

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mPairingCode>;

        i0 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: int native_pairing_start(java.lang.String,java.lang.String)>($r4, $r3);

        r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: int mPort> = i0;

        if i0 <= 0 goto label5;

        if i0 <= 65535 goto label2;

        goto label5;

     label2:
        $r5 = new android.net.nsd.NsdServiceInfo;

        specialinvoke $r5.<android.net.nsd.NsdServiceInfo: void <init>()>();

        $r6 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mServiceName>;

        virtualinvoke $r5.<android.net.nsd.NsdServiceInfo: void setServiceName(java.lang.String)>($r6);

        $r7 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mServiceType>;

        virtualinvoke $r5.<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)>($r7);

        $i2 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: int mPort>;

        virtualinvoke $r5.<android.net.nsd.NsdServiceInfo: void setPort(int)>($i2);

        $r8 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: android.net.nsd.NsdManager mNsdManager>;

        virtualinvoke $r8.<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)>($r5, 1, r0);

        $r9 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: com.android.server.adb.AdbDebuggingManager this$0>;

        $r10 = staticinvoke <com.android.server.adb.AdbDebuggingManager: android.os.Handler access$100(com.android.server.adb.AdbDebuggingManager)>($r9);

        r21 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int)>(21);

        $i3 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: int mPort>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        r21.<android.os.Message: java.lang.Object obj> = $r11;

        $r12 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: com.android.server.adb.AdbDebuggingManager this$0>;

        $r13 = staticinvoke <com.android.server.adb.AdbDebuggingManager: android.os.Handler access$100(com.android.server.adb.AdbDebuggingManager)>($r12);

        virtualinvoke $r13.<android.os.Handler: boolean sendMessage(android.os.Message)>(r21);

        z0 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: boolean native_pairing_wait()>();

        $r14 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: android.net.nsd.NsdManager mNsdManager>;

        virtualinvoke $r14.<android.net.nsd.NsdManager: void unregisterService(android.net.nsd.NsdManager$RegistrationListener)>(r0);

        $r15 = new android.os.Bundle;

        specialinvoke $r15.<android.os.Bundle: void <init>()>();

        if z0 == 0 goto label3;

        r22 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String mPublicKey>;

        goto label4;

     label3:
        r22 = null;

     label4:
        virtualinvoke $r15.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("publicKey", r22);

        $r16 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: com.android.server.adb.AdbDebuggingManager this$0>;

        $r17 = staticinvoke <com.android.server.adb.AdbDebuggingManager: android.os.Handler access$100(com.android.server.adb.AdbDebuggingManager)>($r16);

        r23 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r17, 20, $r15);

        $r18 = r0.<com.android.server.adb.AdbDebuggingManager$PairingThread: com.android.server.adb.AdbDebuggingManager this$0>;

        $r19 = staticinvoke <com.android.server.adb.AdbDebuggingManager: android.os.Handler access$100(com.android.server.adb.AdbDebuggingManager)>($r18);

        virtualinvoke $r19.<android.os.Handler: boolean sendMessage(android.os.Message)>(r23);

        return;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", "Unable to start pairing server");

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.adb.AdbDebuggingManager$PairingThread: java.lang.String SERVICE_PROTOCOL> = "adb-tls-pairing";

        return;
    }
}
