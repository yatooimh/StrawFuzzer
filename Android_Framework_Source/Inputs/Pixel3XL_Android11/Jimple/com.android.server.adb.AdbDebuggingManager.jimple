public class com.android.server.adb.AdbDebuggingManager extends java.lang.Object
{
    private static final java.lang.String ADBD_SOCKET;
    private static final java.lang.String ADB_DIRECTORY;
    private static final java.lang.String ADB_KEYS_FILE;
    private static final java.lang.String ADB_TEMP_KEYS_FILE;
    private static final int BUFFER_SIZE;
    private static final boolean DEBUG;
    private static final boolean MDNS_DEBUG;
    private static final int PAIRING_CODE_LENGTH;
    private static final java.lang.String TAG;
    private static final java.lang.String WIFI_PERSISTENT_CONFIG_PROPERTY;
    private static final java.lang.String WIFI_PERSISTENT_GUID;
    private com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo;
    private boolean mAdbUsbEnabled;
    private boolean mAdbWifiEnabled;
    private java.lang.String mConfirmComponent;
    private final java.util.Map mConnectedKeys;
    private com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller mConnectionPortPoller;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private java.lang.String mFingerprints;
    private final android.os.Handler mHandler;
    private com.android.server.adb.AdbDebuggingManager$PairingThread mPairingThread;
    private final com.android.server.adb.AdbDebuggingManager$PortListenerImpl mPortListener;
    private final java.io.File mTestUserKeyFile;
    private com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread mThread;
    private final java.util.Set mWifiConnectedKeys;

    public void <init>(android.content.Context)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.content.Context r1;
        com.android.server.adb.AdbDebuggingManager$PortListenerImpl $r2;
        com.android.server.adb.AdbDebuggingManager$AdbDebuggingHandler $r3;
        com.android.server.FgThread $r4;
        android.os.Looper $r5;
        android.content.ContentResolver $r6;
        java.util.HashMap $r7;
        java.util.HashSet $r8;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo $r9;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbUsbEnabled> = 0;

        r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbWifiEnabled> = 0;

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$PairingThread mPairingThread> = null;

        $r2 = new com.android.server.adb.AdbDebuggingManager$PortListenerImpl;

        specialinvoke $r2.<com.android.server.adb.AdbDebuggingManager$PortListenerImpl: void <init>(com.android.server.adb.AdbDebuggingManager)>(r0);

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$PortListenerImpl mPortListener> = $r2;

        $r3 = new com.android.server.adb.AdbDebuggingManager$AdbDebuggingHandler;

        $r4 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r5 = virtualinvoke $r4.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r3.<com.android.server.adb.AdbDebuggingManager$AdbDebuggingHandler: void <init>(com.android.server.adb.AdbDebuggingManager,android.os.Looper)>(r0, $r5);

        r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler> = $r3;

        r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext> = r1;

        $r6 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.adb.AdbDebuggingManager: android.content.ContentResolver mContentResolver> = $r6;

        r0.<com.android.server.adb.AdbDebuggingManager: java.io.File mTestUserKeyFile> = null;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.adb.AdbDebuggingManager: java.util.Map mConnectedKeys> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.adb.AdbDebuggingManager: java.util.Set mWifiConnectedKeys> = $r8;

        $r9 = new com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo;

        specialinvoke $r9.<com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo: void <init>(com.android.server.adb.AdbDebuggingManager)>(r0);

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo> = $r9;

        return;
    }

    protected void <init>(android.content.Context, java.lang.String, java.io.File)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.content.Context r1;
        java.lang.String r2;
        java.io.File r3;
        com.android.server.adb.AdbDebuggingManager$PortListenerImpl $r4;
        com.android.server.adb.AdbDebuggingManager$AdbDebuggingHandler $r5;
        com.android.server.FgThread $r6;
        android.os.Looper $r7;
        android.content.ContentResolver $r8;
        java.util.HashMap $r9;
        java.util.HashSet $r10;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo $r11;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbUsbEnabled> = 0;

        r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbWifiEnabled> = 0;

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$PairingThread mPairingThread> = null;

        $r4 = new com.android.server.adb.AdbDebuggingManager$PortListenerImpl;

        specialinvoke $r4.<com.android.server.adb.AdbDebuggingManager$PortListenerImpl: void <init>(com.android.server.adb.AdbDebuggingManager)>(r0);

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$PortListenerImpl mPortListener> = $r4;

        $r5 = new com.android.server.adb.AdbDebuggingManager$AdbDebuggingHandler;

        $r6 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r7 = virtualinvoke $r6.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r5.<com.android.server.adb.AdbDebuggingManager$AdbDebuggingHandler: void <init>(com.android.server.adb.AdbDebuggingManager,android.os.Looper)>(r0, $r7);

        r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler> = $r5;

        r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext> = r1;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.adb.AdbDebuggingManager: android.content.ContentResolver mContentResolver> = $r8;

        r0.<com.android.server.adb.AdbDebuggingManager: java.lang.String mConfirmComponent> = r2;

        r0.<com.android.server.adb.AdbDebuggingManager: java.io.File mTestUserKeyFile> = r3;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.adb.AdbDebuggingManager: java.util.Map mConnectedKeys> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.adb.AdbDebuggingManager: java.util.Set mWifiConnectedKeys> = $r10;

        $r11 = new com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo;

        specialinvoke $r11.<com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo: void <init>(com.android.server.adb.AdbDebuggingManager)>(r0);

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo> = $r11;

        return;
    }

    static android.content.Context access$000(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext>;

        return $r1;
    }

    static android.os.Handler access$100(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        return $r1;
    }

    static java.lang.String access$1000(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: java.lang.String mFingerprints>;

        return $r1;
    }

    static java.lang.String access$1002(com.android.server.adb.AdbDebuggingManager, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.adb.AdbDebuggingManager: java.lang.String mFingerprints> = r1;

        return r1;
    }

    static void access$1100(com.android.server.adb.AdbDebuggingManager, java.lang.String, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: void startConfirmationForKey(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static boolean access$1200(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $z0 = r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbWifiEnabled>;

        return $z0;
    }

    static boolean access$1202(com.android.server.adb.AdbDebuggingManager, boolean)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        z0 := @parameter1: boolean;

        r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbWifiEnabled> = z0;

        return z0;
    }

    static void access$1300(com.android.server.adb.AdbDebuggingManager, com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: void setAdbConnectionInfo(com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo)>(r1);

        return;
    }

    static com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller access$1400(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller mConnectionPortPoller>;

        return $r1;
    }

    static com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller access$1402(com.android.server.adb.AdbDebuggingManager, com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller;

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller mConnectionPortPoller> = r1;

        return r1;
    }

    static com.android.server.adb.AdbDebuggingManager$PortListenerImpl access$1500(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$PortListenerImpl $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$PortListenerImpl mPortListener>;

        return $r1;
    }

    static com.android.server.adb.AdbDebuggingManager$PairingThread access$1600(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$PairingThread $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$PairingThread mPairingThread>;

        return $r1;
    }

    static com.android.server.adb.AdbDebuggingManager$PairingThread access$1602(com.android.server.adb.AdbDebuggingManager, com.android.server.adb.AdbDebuggingManager$PairingThread)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$PairingThread r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: com.android.server.adb.AdbDebuggingManager$PairingThread;

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$PairingThread mPairingThread> = r1;

        return r1;
    }

    static void access$1700(com.android.server.adb.AdbDebuggingManager, java.lang.String, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: void startConfirmationForNetwork(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1800(com.android.server.adb.AdbDebuggingManager, java.lang.Iterable)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.Iterable r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: java.lang.Iterable;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: void writeKeys(java.lang.Iterable)>(r1);

        return;
    }

    static void access$1900(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: void deleteKeyFile()>();

        return;
    }

    static android.content.ContentResolver access$200(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    static void access$2000(com.android.server.adb.AdbDebuggingManager, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: void writeKey(java.lang.String)>(r1);

        return;
    }

    static com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo access$300(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo>;

        return $r1;
    }

    static com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread access$400(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread mThread>;

        return $r1;
    }

    static com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread access$402(com.android.server.adb.AdbDebuggingManager, com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread;

        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread mThread> = r1;

        return r1;
    }

    static java.util.Map access$500(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: java.util.Map mConnectedKeys>;

        return $r1;
    }

    static void access$600(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: void sendPersistKeyStoreMessage()>();

        return;
    }

    static java.util.Set access$700(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: java.util.Set mWifiConnectedKeys>;

        return $r1;
    }

    static boolean access$800(com.android.server.adb.AdbDebuggingManager)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        $z0 = r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbUsbEnabled>;

        return $z0;
    }

    static boolean access$802(com.android.server.adb.AdbDebuggingManager, boolean)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        z0 := @parameter1: boolean;

        r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbUsbEnabled> = z0;

        return z0;
    }

    static java.lang.String access$900(com.android.server.adb.AdbDebuggingManager, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: java.lang.String getFingerprints(java.lang.String)>(r1);

        return $r2;
    }

    private android.content.Intent createConfirmationIntent(android.content.ComponentName, java.util.List)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.content.Intent $r2;
        java.lang.String $r3, $r4, $r8, $r10;
        boolean $z0;
        java.lang.Object $r6, $r7, $r9;
        android.content.ComponentName r12;
        java.util.List r13;
        java.util.Iterator r14;
        java.util.Map$Entry r15;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r12 := @parameter0: android.content.ComponentName;

        r13 := @parameter1: java.util.List;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        $r3 = virtualinvoke r12.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r4 = virtualinvoke r12.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r3, $r4);

        r14 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>($r8, $r10);

        goto label1;

     label2:
        return $r2;
    }

    private void deleteKeyFile()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.io.File r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager: java.io.File getUserKeyFile()>();

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    private com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo getAdbConnectionInfo()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo r1, $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo>;

        entermonitor r1;

     label1:
        r4 = new com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo>;

        specialinvoke r4.<com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo: void <init>(com.android.server.adb.AdbDebuggingManager,com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo)>(r0, $r2);

        exitmonitor r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private java.io.File getAdbFile(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String r1;
        java.io.File $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "misc/adb");

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", "ADB data directory does not exist");

        return null;

     label1:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1);

        return $r5;
    }

    private java.lang.String getFingerprints(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.security.MessageDigest r2;
        java.lang.StringBuilder $r3;
        java.lang.String[] $r4;
        java.lang.String $r5, $r7, $r8, $r10, r15;
        byte[] $r6, r16, r17;
        int $i0, $i8, $i9, i12;
        byte $b1, $b2, $b3, $b5, $b6;
        char $c4, $c7;
        java.lang.Exception $r13;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r15 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        if r15 != null goto label1;

        return "";

     label1:
        r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

     label2:
        $r4 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r5 = $r4[0];

        r16 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

     label3:
        $r6 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>(r16, 0);

        r17 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest(byte[])>($r6);

     label4:
        i12 = 0;

     label5:
        $i0 = lengthof r17;

        if i12 >= $i0 goto label7;

        $r8 = "0123456789ABCDEF";

        $b1 = r17[i12];

        $b2 = $b1 >> 4;

        $b3 = $b2 & 15;

        $c4 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($b3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r10 = "0123456789ABCDEF";

        $b5 = r17[i12];

        $b6 = $b5 & 15;

        $c7 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($b6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $i8 = lengthof r17;

        $i9 = $i8 - 1;

        if i12 >= $i9 goto label6;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label6:
        i12 = i12 + 1;

        goto label5;

     label7:
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label8:
        $r14 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "error doing base64 decoding", $r14);

        return "";

     label9:
        $r13 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Error getting digester", $r13);

        return "";

        catch java.lang.Exception from label1 to label2 with label9;
        catch java.lang.IllegalArgumentException from label3 to label4 with label8;
    }

    private void sendPersistKeyStoreMessage()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(8);

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private void setAdbConnectionInfo(com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo r1, $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r4 := @parameter0: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo;

        r1 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo>;

        entermonitor r1;

        if r4 != null goto label3;

     label1:
        $r2 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo>;

        virtualinvoke $r2.<com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo: void clear()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo mAdbConnectionInfo> = r4;

        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private boolean startConfirmationActivity(android.content.ComponentName, android.os.UserHandle, java.util.List)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.content.ComponentName r1;
        android.content.pm.PackageManager r2;
        android.content.Context $r3, $r6;
        android.content.pm.ResolveInfo $r5;
        android.content.ActivityNotFoundException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;
        android.os.UserHandle r12;
        java.util.List r13;
        android.content.Intent r14;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter0: android.content.ComponentName;

        r12 := @parameter1: android.os.UserHandle;

        r13 := @parameter2: java.util.List;

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext>;

        r2 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r14 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: android.content.Intent createConfirmationIntent(android.content.ComponentName,java.util.List)>(r1, r13);

        virtualinvoke r14.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r5 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r14, 65536);

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r14, r12);

     label2:
        return 1;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to start adb whitelist activity: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", $r11, $r7);

     label4:
        return 0;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private void startConfirmationForKey(java.lang.String, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        int i0;
        android.content.ComponentName r2;
        java.util.ArrayList $r3;
        java.util.AbstractMap$SimpleEntry $r4, $r5;
        android.content.Context $r6;
        android.os.UserManager $r7;
        boolean $z2, $z3, $z4;
        android.content.res.Resources $r8, $r16;
        android.os.UserHandle $r9, $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r15, r17, r18, r20;
        android.content.pm.UserInfo r19;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r17 := @parameter0: java.lang.String;

        r18 := @parameter1: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r4.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("key", r17);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r5.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("fingerprints", r18);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        $r6 = r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext>;

        $r7 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r6);

        r19 = virtualinvoke $r7.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z2 = virtualinvoke r19.<android.content.pm.UserInfo: boolean isAdmin()>();

        if $z2 == 0 goto label3;

        r20 = r0.<com.android.server.adb.AdbDebuggingManager: java.lang.String mConfirmComponent>;

        if r20 == null goto label1;

        goto label2;

     label1:
        $r16 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r20 = virtualinvoke $r16.<android.content.res.Resources: java.lang.String getString(int)>(17039842);

     label2:
        goto label4;

     label3:
        $r8 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r20 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String getString(int)>(17039843);

     label4:
        r2 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r20);

        $r9 = virtualinvoke r19.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z3 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: boolean startConfirmationActivity(android.content.ComponentName,android.os.UserHandle,java.util.List)>(r2, $r9, $r3);

        if $z3 != 0 goto label6;

        $r10 = virtualinvoke r19.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z4 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: boolean startConfirmationService(android.content.ComponentName,android.os.UserHandle,java.util.List)>(r2, $r10, $r3);

        if $z4 == 0 goto label5;

        goto label6;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to start customAdbPublicKeyConfirmation[SecondaryUser]Component ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as an Activity or a Service");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r15);

        return;

     label6:
        return;
    }

    private void startConfirmationForNetwork(java.lang.String, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        int i0;
        android.content.ComponentName r2;
        java.util.ArrayList $r3;
        java.util.AbstractMap$SimpleEntry $r4, $r5;
        android.content.Context $r6;
        android.os.UserManager $r7;
        boolean $z2, $z3, $z4;
        android.content.res.Resources $r8, $r16;
        android.os.UserHandle $r9, $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r15, r17, r18, r20;
        android.content.pm.UserInfo r19;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r17 := @parameter0: java.lang.String;

        r18 := @parameter1: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r4.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("ssid", r17);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r5.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("bssid", r18);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        $r6 = r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext>;

        $r7 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r6);

        r19 = virtualinvoke $r7.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z2 = virtualinvoke r19.<android.content.pm.UserInfo: boolean isAdmin()>();

        if $z2 == 0 goto label1;

        $r16 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r20 = virtualinvoke $r16.<android.content.res.Resources: java.lang.String getString(int)>(17039844);

        goto label2;

     label1:
        $r8 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r20 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String getString(int)>(17039844);

     label2:
        r2 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r20);

        $r9 = virtualinvoke r19.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z3 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: boolean startConfirmationActivity(android.content.ComponentName,android.os.UserHandle,java.util.List)>(r2, $r9, $r3);

        if $z3 != 0 goto label4;

        $r10 = virtualinvoke r19.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z4 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: boolean startConfirmationService(android.content.ComponentName,android.os.UserHandle,java.util.List)>(r2, $r10, $r3);

        if $z4 == 0 goto label3;

        goto label4;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to start customAdbWifiNetworkConfirmation[SecondaryUser]Component ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as an Activity or a Service");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r15);

        return;

     label4:
        return;
    }

    private boolean startConfirmationService(android.content.ComponentName, android.os.UserHandle, java.util.List)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.content.ComponentName r1, r11;
        android.content.Context $r2;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        android.os.UserHandle r8;
        java.util.List r9;
        android.content.Intent r10;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter0: android.content.ComponentName;

        r8 := @parameter1: android.os.UserHandle;

        r9 := @parameter2: java.util.List;

        r10 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: android.content.Intent createConfirmationIntent(android.content.ComponentName,java.util.List)>(r1, r9);

     label1:
        $r2 = r0.<com.android.server.adb.AdbDebuggingManager: android.content.Context mContext>;

        r11 = virtualinvoke $r2.<android.content.Context: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)>(r10, r8);

     label2:
        if r11 == null goto label3;

        return 1;

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to start adb whitelist service: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", $r7, $r3);

     label5:
        return 0;

        catch java.lang.SecurityException from label1 to label2 with label4;
    }

    private void writeKey(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.io.FileOutputStream r1;
        byte[] $r2;
        java.lang.String $r3, $r8, r9;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.io.File r10;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r9 := @parameter0: java.lang.String;

     label1:
        r10 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager: java.io.File getUserKeyFile()>();

     label2:
        if r10 != null goto label3;

        return;

     label3:
        r1 = new java.io.FileOutputStream;

        specialinvoke r1.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r10, 1);

        $r2 = virtualinvoke r9.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.FileOutputStream: void write(byte[])>($r2);

        virtualinvoke r1.<java.io.FileOutputStream: void write(int)>(10);

        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r3 = virtualinvoke r10.<java.io.File: java.lang.String toString()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r3, 416, -1, -1);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing key:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r8);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private void writeKeys(java.lang.Iterable)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.io.File r1;
        android.util.AtomicFile r2, r11;
        boolean $z0;
        java.lang.String $r3, $r5, $r9;
        java.lang.Object $r4;
        byte[] $r6;
        java.lang.Throwable $r7;
        java.lang.StringBuilder $r8;
        java.lang.Iterable r10;
        java.io.FileOutputStream r12, r14;
        java.util.Iterator r15;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r10 := @parameter0: java.lang.Iterable;

        r11 = null;

        r12 = null;

     label01:
        r1 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager: java.io.File getUserKeyFile()>();

     label02:
        if r1 != null goto label03;

        return;

     label03:
        r11 = null;

        r12 = null;

     label04:
        r2 = new android.util.AtomicFile;

     label05:
        r11 = null;

        r12 = null;

     label06:
        specialinvoke r2.<android.util.AtomicFile: void <init>(java.io.File)>(r1);

     label07:
        r11 = r2;

        r12 = null;

     label08:
        r14 = virtualinvoke r2.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label09:
        r11 = r2;

        r12 = r14;

     label10:
        r15 = interfaceinvoke r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        r11 = r2;

        r12 = r14;

     label12:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

     label13:
        r11 = r2;

        r12 = r14;

     label14:
        $r4 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r14.<java.io.FileOutputStream: void write(byte[])>($r6);

     label15:
        r11 = r2;

        r12 = r14;

     label16:
        virtualinvoke r14.<java.io.FileOutputStream: void write(int)>(10);

     label17:
        goto label11;

     label18:
        r11 = r2;

        r12 = r14;

     label19:
        virtualinvoke r2.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r14);

     label20:
        r11 = r2;

        r12 = r14;

     label21:
        $r3 = virtualinvoke r1.<java.io.File: java.lang.String toString()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r3, 416, -1, -1);

     label22:
        goto label24;

     label23:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing keys: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AdbDebuggingManager", $r9);

        if r11 == null goto label24;

        virtualinvoke r11.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r12);

     label24:
        return;

        catch java.io.IOException from label01 to label02 with label23;
        catch java.io.IOException from label04 to label05 with label23;
        catch java.io.IOException from label06 to label07 with label23;
        catch java.io.IOException from label08 to label09 with label23;
        catch java.io.IOException from label10 to label11 with label23;
        catch java.io.IOException from label12 to label13 with label23;
        catch java.io.IOException from label14 to label15 with label23;
        catch java.io.IOException from label16 to label17 with label23;
        catch java.io.IOException from label19 to label20 with label23;
        catch java.io.IOException from label21 to label22 with label23;
    }

    public void allowDebugging(boolean, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean z0;
        java.lang.String r1;
        android.os.Message r2;
        android.os.Handler $r3, $r4;
        int i0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        i0 = (int) z0;

        r2.<android.os.Message: int arg1> = i0;

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void allowWirelessDebugging(boolean, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean z0;
        java.lang.String r1;
        android.os.Message r2;
        android.os.Handler $r3, $r4;
        int i0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(18);

        i0 = (int) z0;

        r2.<android.os.Message: int arg1> = i0;

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void clearDebuggingKeys()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(6);

        return;
    }

    public void denyDebugging()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(4);

        return;
    }

    public void denyWirelessDebugging()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(19);

        return;
    }

    public void disablePairing()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(14);

        return;
    }

    public void dump(com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.internal.util.dump.DualDumpOutputStream r1;
        com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread $r2;
        java.lang.String $r3, $r4, $r5, $r7, r11;
        java.io.File $r6, r12, r14;
        java.lang.Throwable $r8, $r9, $r10;
        long l3, l4;
        boolean z0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 := @parameter0: com.android.internal.util.dump.DualDumpOutputStream;

        r11 := @parameter1: java.lang.String;

        l3 := @parameter2: long;

        l4 = virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>(r11, l3);

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbDebuggingThread mThread>;

        if $r2 == null goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("connected_to_adb", 1133871366145L, z0);

        $r3 = r0.<com.android.server.adb.AdbDebuggingManager: java.lang.String mFingerprints>;

        staticinvoke <com.android.internal.util.dump.DumpUtils: void writeStringIfNotNull(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,java.lang.String)>(r1, "last_key_received", 1138166333442L, $r3);

     label03:
        r12 = new java.io.File;

        specialinvoke r12.<java.io.File: void <init>(java.lang.String)>("/data/misc/adb/adb_keys");

        $r4 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>(r12, 0, null);

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>("user_keys", 1138166333443L, $r4);

     label04:
        goto label06;

     label05:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Cannot read user keys", $r8);

     label06:
        r14 = new java.io.File;

        specialinvoke r14.<java.io.File: void <init>(java.lang.String)>("/adb_keys");

        $r5 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>(r14, 0, null);

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>("system_keys", 1138166333444L, $r5);

     label07:
        goto label09;

     label08:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Cannot read system keys", $r9);

     label09:
        $r6 = virtualinvoke r0.<com.android.server.adb.AdbDebuggingManager: java.io.File getAdbTempKeysFile()>();

        $r7 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r6, 0, null);

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>("keystore", 1138166333445L, $r7);

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbDebuggingManager", "Cannot read keystore: ", $r10);

     label12:
        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l4);

        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
    }

    public void enablePairingByPairingCode()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(15);

        return;
    }

    public void enablePairingByQrCode(java.lang.String, java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.lang.String r1, r6;
        android.os.Bundle $r3;
        android.os.Handler $r4, $r5;
        android.os.Message r7;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("serviceName", r6);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("password", r1);

        $r4 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        r7 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r4, 16, $r3);

        $r5 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>(r7);

        return;
    }

    java.io.File getAdbTempKeysFile()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.io.File $r1;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r1 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: java.io.File getAdbFile(java.lang.String)>("adb_temp_keys.xml");

        return $r1;
    }

    public int getAdbWirelessPort()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo r1;
        int $i0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo getAdbConnectionInfo()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager$AdbConnectionInfo: int getPort()>();

        return $i0;
    }

    public java.util.Map getPairedDevices()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        com.android.server.adb.AdbDebuggingManager$AdbKeyStore $r1;
        java.util.Map $r2;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $r1 = new com.android.server.adb.AdbDebuggingManager$AdbKeyStore;

        specialinvoke $r1.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: void <init>(com.android.server.adb.AdbDebuggingManager)>(r0);

        $r2 = virtualinvoke $r1.<com.android.server.adb.AdbDebuggingManager$AdbKeyStore: java.util.Map getPairedDevices()>();

        return $r2;
    }

    java.io.File getUserKeyFile()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        java.io.File r1, r2;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r1 = r0.<com.android.server.adb.AdbDebuggingManager: java.io.File mTestUserKeyFile>;

        r2 = r1;

        if r1 != null goto label1;

        r2 = specialinvoke r0.<com.android.server.adb.AdbDebuggingManager: java.io.File getAdbFile(java.lang.String)>("adb_keys");

     label1:
        return r2;
    }

    public boolean isAdbWifiEnabled()
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean $z0;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        $z0 = r0.<com.android.server.adb.AdbDebuggingManager: boolean mAdbWifiEnabled>;

        return $z0;
    }

    public void setAdbEnabled(boolean, byte)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        byte b1, b2, b3;
        android.os.Handler r6, r7;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        z0 := @parameter0: boolean;

        b1 := @parameter1: byte;

        if b1 != 0 goto label3;

        r6 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        if z0 == 0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = 2;

     label2:
        virtualinvoke r6.<android.os.Handler: boolean sendEmptyMessage(int)>(b2);

        goto label6;

     label3:
        if b1 != 1 goto label7;

        r7 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        if z0 == 0 goto label4;

        b3 = 11;

        goto label5;

     label4:
        b3 = 12;

     label5:
        virtualinvoke r7.<android.os.Handler: boolean sendEmptyMessage(int)>(b3);

     label6:
        return;

     label7:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAdbEnabled called with unimplemented transport type=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public void unpairDevice(java.lang.String)
    {
        com.android.server.adb.AdbDebuggingManager r0;
        android.os.Handler $r1, $r2;
        java.lang.String r3;
        android.os.Message r4;

        r0 := @this: com.android.server.adb.AdbDebuggingManager;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        r4 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r1, 17, r3);

        $r2 = r0.<com.android.server.adb.AdbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.adb.AdbDebuggingManager: java.lang.String WIFI_PERSISTENT_GUID> = "persist.adb.wifi.guid";

        <com.android.server.adb.AdbDebuggingManager: java.lang.String WIFI_PERSISTENT_CONFIG_PROPERTY> = "persist.adb.tls_server.enable";

        <com.android.server.adb.AdbDebuggingManager: java.lang.String TAG> = "AdbDebuggingManager";

        <com.android.server.adb.AdbDebuggingManager: int PAIRING_CODE_LENGTH> = 6;

        <com.android.server.adb.AdbDebuggingManager: boolean MDNS_DEBUG> = 0;

        <com.android.server.adb.AdbDebuggingManager: boolean DEBUG> = 0;

        <com.android.server.adb.AdbDebuggingManager: int BUFFER_SIZE> = 65536;

        <com.android.server.adb.AdbDebuggingManager: java.lang.String ADB_TEMP_KEYS_FILE> = "adb_temp_keys.xml";

        <com.android.server.adb.AdbDebuggingManager: java.lang.String ADB_KEYS_FILE> = "adb_keys";

        <com.android.server.adb.AdbDebuggingManager: java.lang.String ADB_DIRECTORY> = "misc/adb";

        <com.android.server.adb.AdbDebuggingManager: java.lang.String ADBD_SOCKET> = "adbd";

        return;
    }
}
