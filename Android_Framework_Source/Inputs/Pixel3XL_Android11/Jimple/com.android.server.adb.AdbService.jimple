public class com.android.server.adb.AdbService extends android.debug.IAdbManager$Stub
{
    static final java.lang.String ADBD;
    static final java.lang.String CTL_START;
    static final java.lang.String CTL_STOP;
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static final java.lang.String USB_PERSISTENT_CONFIG_PROPERTY;
    private static final java.lang.String WIFI_PERSISTENT_CONFIG_PROPERTY;
    java.util.concurrent.atomic.AtomicInteger mConnectionPort;
    private com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller mConnectionPortPoller;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private com.android.server.adb.AdbDebuggingManager mDebuggingManager;
    private boolean mIsAdbUsbEnabled;
    private boolean mIsAdbWifiEnabled;
    private android.database.ContentObserver mObserver;
    private final com.android.server.adb.AdbService$AdbConnectionPortListener mPortListener;
    private final android.util.ArrayMap mTransports;

    private void <init>(android.content.Context)
    {
        com.android.server.adb.AdbService r0;
        android.content.Context r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        com.android.server.adb.AdbService$AdbConnectionPortListener $r3;
        android.util.ArrayMap $r4;
        android.content.ContentResolver $r5;
        com.android.server.adb.AdbDebuggingManager $r6;
        com.android.server.adb.AdbService$AdbManagerInternalImpl $r7;

        r0 := @this: com.android.server.adb.AdbService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.debug.IAdbManager$Stub: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(-1);

        r0.<com.android.server.adb.AdbService: java.util.concurrent.atomic.AtomicInteger mConnectionPort> = $r2;

        $r3 = new com.android.server.adb.AdbService$AdbConnectionPortListener;

        specialinvoke $r3.<com.android.server.adb.AdbService$AdbConnectionPortListener: void <init>(com.android.server.adb.AdbService)>(r0);

        r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbService$AdbConnectionPortListener mPortListener> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.adb.AdbService: android.util.ArrayMap mTransports> = $r4;

        r0.<com.android.server.adb.AdbService: android.content.Context mContext> = r1;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.adb.AdbService: android.content.ContentResolver mContentResolver> = $r5;

        $r6 = new com.android.server.adb.AdbDebuggingManager;

        specialinvoke $r6.<com.android.server.adb.AdbDebuggingManager: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager> = $r6;

        specialinvoke r0.<com.android.server.adb.AdbService: void initAdbState()>();

        $r7 = new com.android.server.adb.AdbService$AdbManagerInternalImpl;

        specialinvoke $r7.<com.android.server.adb.AdbService$AdbManagerInternalImpl: void <init>(com.android.server.adb.AdbService,com.android.server.adb.AdbService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/debug/AdbManagerInternal;", $r7);

        return;
    }

    void <init>(android.content.Context, com.android.server.adb.AdbService$1)
    {
        com.android.server.adb.AdbService r0;
        android.content.Context r1;
        com.android.server.adb.AdbService$1 r2;

        r0 := @this: com.android.server.adb.AdbService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.adb.AdbService$1;

        specialinvoke r0.<com.android.server.adb.AdbService: void <init>(android.content.Context)>(r1);

        return;
    }

    static android.util.ArrayMap access$100(com.android.server.adb.AdbService)
    {
        com.android.server.adb.AdbService r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.adb.AdbService;

        $r1 = r0.<com.android.server.adb.AdbService: android.util.ArrayMap mTransports>;

        return $r1;
    }

    static boolean access$200(com.android.server.adb.AdbService)
    {
        com.android.server.adb.AdbService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.adb.AdbService;

        $z0 = r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled>;

        return $z0;
    }

    static boolean access$300(com.android.server.adb.AdbService)
    {
        com.android.server.adb.AdbService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.adb.AdbService;

        $z0 = r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled>;

        return $z0;
    }

    static com.android.server.adb.AdbDebuggingManager access$400(com.android.server.adb.AdbService)
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager $r1;

        r0 := @parameter0: com.android.server.adb.AdbService;

        $r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        return $r1;
    }

    static void access$500(com.android.server.adb.AdbService, boolean, byte)
    {
        com.android.server.adb.AdbService r0;
        boolean z0;
        byte b0;

        r0 := @parameter0: com.android.server.adb.AdbService;

        z0 := @parameter1: boolean;

        b0 := @parameter2: byte;

        specialinvoke r0.<com.android.server.adb.AdbService: void setAdbdEnabledForTransport(boolean,byte)>(z0, b0);

        return;
    }

    static android.content.ContentResolver access$600(com.android.server.adb.AdbService)
    {
        com.android.server.adb.AdbService r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: com.android.server.adb.AdbService;

        $r1 = r0.<com.android.server.adb.AdbService: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    static void access$700(com.android.server.adb.AdbService, boolean, byte)
    {
        com.android.server.adb.AdbService r0;
        boolean z0;
        byte b0;

        r0 := @parameter0: com.android.server.adb.AdbService;

        z0 := @parameter1: boolean;

        b0 := @parameter2: byte;

        specialinvoke r0.<com.android.server.adb.AdbService: void setAdbEnabled(boolean,byte)>(z0, b0);

        return;
    }

    static void access$900(com.android.server.adb.AdbService, int)
    {
        com.android.server.adb.AdbService r0;
        int i0;

        r0 := @parameter0: com.android.server.adb.AdbService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.adb.AdbService: void broadcastPortInfo(int)>(i0);

        return;
    }

    private void broadcastPortInfo(int)
    {
        com.android.server.adb.AdbService r0;
        int i0;
        android.content.Intent $r1;
        android.os.UserHandle $r4;
        android.content.Context $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        byte b2;

        r0 := @this: com.android.server.adb.AdbService;

        i0 := @parameter0: int;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.adb.WIRELESS_DEBUG_STATUS");

        if i0 < 0 goto label1;

        b2 = 4;

        goto label2;

     label1:
        b2 = 5;

     label2:
        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("status", b2);

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("adb_port", i0);

        $r5 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r1, $r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sent port broadcast port=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AdbService", $r9);

        return;
    }

    private static boolean containsFunction(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0, $i1, $i3, i5, i6;
        char $c2, $c4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i5 >= 0 goto label1;

        return 0;

     label1:
        if i5 <= 0 goto label2;

        $i3 = i5 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 == 44 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i6 = $i0 + i5;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i6 >= $i1 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if $c2 == 44 goto label3;

        return 0;

     label3:
        return 1;
    }

    private void initAdbState()
    {
        com.android.server.adb.AdbService r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;
        android.content.ContentResolver $r4, $r7;
        android.net.Uri $r5, $r8;
        android.database.ContentObserver $r6, $r9;
        java.lang.Exception $r10;
        com.android.server.adb.AdbService$AdbSettingsObserver r11;

        r0 := @this: com.android.server.adb.AdbService;

     label1:
        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("persist.sys.usb.config", "");

        $z0 = staticinvoke <com.android.server.adb.AdbService: boolean containsFunction(java.lang.String,java.lang.String)>($r1, "adb");

        r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled> = $z0;

        $r2 = "1";

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("persist.adb.tls_server.enable", "0");

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled> = $z1;

        r11 = new com.android.server.adb.AdbService$AdbSettingsObserver;

        specialinvoke r11.<com.android.server.adb.AdbService$AdbSettingsObserver: void <init>(com.android.server.adb.AdbService)>(r0);

        r0.<com.android.server.adb.AdbService: android.database.ContentObserver mObserver> = r11;

        $r4 = r0.<com.android.server.adb.AdbService: android.content.ContentResolver mContentResolver>;

        $r5 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("adb_enabled");

        $r6 = r0.<com.android.server.adb.AdbService: android.database.ContentObserver mObserver>;

        virtualinvoke $r4.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r5, 0, $r6);

        $r7 = r0.<com.android.server.adb.AdbService: android.content.ContentResolver mContentResolver>;

        $r8 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("adb_wifi_enabled");

        $r9 = r0.<com.android.server.adb.AdbService: android.database.ContentObserver mObserver>;

        virtualinvoke $r7.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r8, 0, $r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AdbService", "Error in initAdbState", $r10);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void setAdbEnabled(boolean, byte)
    {
        com.android.server.adb.AdbService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        byte b0;
        android.debug.IAdbTransport r1;
        android.util.ArrayMap $r2;
        java.util.Collection $r3;
        java.lang.Object $r4, $r7;
        java.util.Optional $r5;
        java.lang.Boolean $r6, $r8;
        com.android.server.adb.AdbDebuggingManager $r9, r23;
        com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller $r10, r19;
        com.android.server.adb.AdbService$AdbConnectionPortListener $r11;
        android.os.RemoteException $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r15, $r17;
        java.util.Iterator r20;

        r0 := @this: com.android.server.adb.AdbService;

        z0 := @parameter0: boolean;

        b0 := @parameter1: byte;

        if b0 != 0 goto label01;

        $z3 = r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled>;

        if z0 == $z3 goto label01;

        r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled> = z0;

        goto label03;

     label01:
        if b0 != 1 goto label13;

        $z1 = r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled>;

        if z0 == $z1 goto label13;

        r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled> = z0;

        if z0 == 0 goto label02;

        $r5 = staticinvoke <android.sysprop.AdbProperties: java.util.Optional secure()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r7 = virtualinvoke $r5.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r6);

        $r8 = (java.lang.Boolean) $r7;

        $z2 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != 0 goto label03;

        $r9 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if $r9 != null goto label03;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.adb.tls_server.enable", "1");

        $r10 = new com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller;

        $r11 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbService$AdbConnectionPortListener mPortListener>;

        specialinvoke $r10.<com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller: void <init>(com.android.server.adb.AdbDebuggingManager$AdbConnectionPortListener)>($r11);

        r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller mConnectionPortPoller> = $r10;

        virtualinvoke $r10.<com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller: void start()>();

        goto label03;

     label02:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.adb.tls_server.enable", "0");

        r19 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller mConnectionPortPoller>;

        if r19 == null goto label03;

        virtualinvoke r19.<com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller: void cancelAndWait()>();

        r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager$AdbConnectionPortPoller mConnectionPortPoller> = null;

     label03:
        if z0 == 0 goto label04;

        specialinvoke r0.<com.android.server.adb.AdbService: void startAdbd()>();

        goto label05;

     label04:
        specialinvoke r0.<com.android.server.adb.AdbService: void stopAdbd()>();

     label05:
        $r2 = r0.<com.android.server.adb.AdbService: android.util.ArrayMap mTransports>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        r20 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z4 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r4 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.debug.IAdbTransport) $r4;

     label07:
        interfaceinvoke r1.<android.debug.IAdbTransport: void onAdbEnabled(boolean,byte)>(z0, b0);

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to send onAdbEnabled to transport ");

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AdbService", $r17);

     label10:
        goto label06;

     label11:
        r23 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r23 == null goto label12;

        virtualinvoke r23.<com.android.server.adb.AdbDebuggingManager: void setAdbEnabled(boolean,byte)>(z0, b0);

     label12:
        return;

     label13:
        return;

        catch android.os.RemoteException from label07 to label08 with label09;
    }

    private void setAdbdEnabledForTransport(boolean, byte)
    {
        com.android.server.adb.AdbService r0;
        boolean z0;
        byte b0;

        r0 := @this: com.android.server.adb.AdbService;

        z0 := @parameter0: boolean;

        b0 := @parameter1: byte;

        if b0 != 0 goto label1;

        r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled> = z0;

        goto label2;

     label1:
        if b0 != 1 goto label2;

        r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled> = z0;

     label2:
        if z0 == 0 goto label3;

        specialinvoke r0.<com.android.server.adb.AdbService: void startAdbd()>();

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.adb.AdbService: void stopAdbd()>();

     label4:
        return;
    }

    private void startAdbd()
    {
        com.android.server.adb.AdbService r0;

        r0 := @this: com.android.server.adb.AdbService;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ctl.start", "adbd");

        return;
    }

    private void stopAdbd()
    {
        com.android.server.adb.AdbService r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.adb.AdbService;

        $z0 = r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled>;

        if $z1 != 0 goto label1;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ctl.stop", "adbd");

     label1:
        return;
    }

    public void allowDebugging(boolean, java.lang.String)
    {
        com.android.server.adb.AdbService r0;
        boolean z0;
        java.lang.String r1;
        com.android.server.adb.AdbDebuggingManager r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.adb.AdbService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r1);

        r2 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.adb.AdbDebuggingManager: void allowDebugging(boolean,java.lang.String)>(z0, r1);

     label1:
        return;
    }

    public void allowWirelessDebugging(boolean, java.lang.String)
    {
        com.android.server.adb.AdbService r0;
        boolean z0;
        java.lang.String r1;
        com.android.server.adb.AdbDebuggingManager r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.adb.AdbService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r1);

        r2 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.adb.AdbDebuggingManager: void allowWirelessDebugging(boolean,java.lang.String)>(z0, r1);

     label1:
        return;
    }

    public void bootCompleted()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.adb.AdbService;

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        $z0 = r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled>;

        virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: void setAdbEnabled(boolean,byte)>($z0, 0);

        $r2 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        $z1 = r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled>;

        virtualinvoke $r2.<com.android.server.adb.AdbDebuggingManager: void setAdbEnabled(boolean,byte)>($z1, 1);

     label1:
        return;
    }

    public void clearDebuggingKeys()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1;
        android.content.Context $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.server.adb.AdbService;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: void clearDebuggingKeys()>();

        return;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot clear ADB debugging keys, AdbDebuggingManager not enabled");

        throw $r3;
    }

    public void denyDebugging()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.adb.AdbService;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: void denyDebugging()>();

     label1:
        return;
    }

    public void denyWirelessDebugging()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.adb.AdbService;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: void denyWirelessDebugging()>();

     label1:
        return;
    }

    public void disablePairing()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.adb.AdbService;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: void disablePairing()>();

     label1:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.adb.AdbService r0;
        long l0;
        android.util.ArraySet r1;
        android.content.Context $r2;
        boolean $z0, $z2, $z3, z4;
        com.android.internal.util.IndentingPrintWriter $r3, r15;
        int $i1;
        com.android.internal.util.dump.DualDumpOutputStream $r4, r12, r14;
        com.android.server.adb.AdbDebuggingManager $r5, $r6;
        java.lang.Throwable $r7;
        java.io.FileDescriptor r8;
        java.io.PrintWriter r9;
        java.lang.String[] r10;
        android.util.proto.ProtoOutputStream r13;

        r0 := @this: com.android.server.adb.AdbService;

        r8 := @parameter0: java.io.FileDescriptor;

        r9 := @parameter1: java.io.PrintWriter;

        r10 := @parameter2: java.lang.String[];

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r2, "AdbService", r9);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r3 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r9, "  ");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r1 = new android.util.ArraySet;

        specialinvoke r1.<android.util.ArraySet: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, r10);

     label03:
        z4 = 0;

     label04:
        $z2 = virtualinvoke r1.<android.util.ArraySet: boolean contains(java.lang.Object)>("--proto");

        if $z2 == 0 goto label06;

     label05:
        z4 = 1;

     label06:
        $i1 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        if $i1 == 0 goto label10;

        $z3 = virtualinvoke r1.<android.util.ArraySet: boolean contains(java.lang.Object)>("-a");

        if $z3 != 0 goto label10;

     label07:
        if z4 == 0 goto label08;

        goto label10;

     label08:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Dump current ADB state");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  No commands available");

     label09:
        goto label16;

     label10:
        if z4 == 0 goto label13;

     label11:
        r12 = new com.android.internal.util.dump.DualDumpOutputStream;

        r13 = new android.util.proto.ProtoOutputStream;

        specialinvoke r13.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r8);

        specialinvoke r12.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(android.util.proto.ProtoOutputStream)>(r13);

     label12:
        r14 = r12;

        goto label14;

     label13:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("ADB MANAGER STATE (dumpsys adb):");

        r15 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r15.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r3, "  ");

        $r4 = new com.android.internal.util.dump.DualDumpOutputStream;

        specialinvoke $r4.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r15);

        r14 = $r4;

     label14:
        $r5 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if $r5 == null goto label15;

        $r6 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        virtualinvoke $r6.<com.android.server.adb.AdbDebuggingManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r14, "debugging_manager", 1146756268033L);

     label15:
        virtualinvoke r14.<com.android.internal.util.dump.DualDumpOutputStream: void flush()>();

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label17:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public void enablePairingByPairingCode()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.adb.AdbService;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: void enablePairingByPairingCode()>();

     label1:
        return;
    }

    public void enablePairingByQrCode(java.lang.String, java.lang.String)
    {
        com.android.server.adb.AdbService r0;
        java.lang.String r1, r2;
        com.android.server.adb.AdbDebuggingManager r3;
        android.content.Context $r4;

        r0 := @this: com.android.server.adb.AdbService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r2);

        r3 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.adb.AdbDebuggingManager: void enablePairingByQrCode(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    public int getAdbWirelessPort()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1;
        android.content.Context $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.adb.AdbService;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: int getAdbWirelessPort()>();

        return $i1;

     label1:
        $r3 = r0.<com.android.server.adb.AdbService: java.util.concurrent.atomic.AtomicInteger mConnectionPort>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public java.util.Map getPairedDevices()
    {
        com.android.server.adb.AdbService r0;
        com.android.server.adb.AdbDebuggingManager r1;
        android.content.Context $r2;
        java.util.Map $r3;

        r0 := @this: com.android.server.adb.AdbService;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        r1 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.adb.AdbDebuggingManager: java.util.Map getPairedDevices()>();

        return $r3;

     label1:
        return null;
    }

    public int handleShellCommand(android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, java.lang.String[])
    {
        com.android.server.adb.AdbService r0;
        android.os.ParcelFileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        com.android.server.adb.AdbShellCommand $r5;
        java.io.FileDescriptor $r6, $r7, $r8;
        int $i0;

        r0 := @this: com.android.server.adb.AdbService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.os.ParcelFileDescriptor;

        r4 := @parameter3: java.lang.String[];

        $r5 = new com.android.server.adb.AdbShellCommand;

        specialinvoke $r5.<com.android.server.adb.AdbShellCommand: void <init>(com.android.server.adb.AdbService)>(r0);

        $r6 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r7 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r8 = virtualinvoke r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = virtualinvoke $r5.<com.android.server.adb.AdbShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[])>(r0, $r6, $r7, $r8, r4);

        return $i0;
    }

    public boolean isAdbWifiQrSupported()
    {
        com.android.server.adb.AdbService r0;
        android.content.Context $r1, $r2;
        boolean $z0, $z1, z2;
        android.content.pm.PackageManager $r3;

        r0 := @this: com.android.server.adb.AdbService;

        $r1 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", "AdbService");

        $z0 = virtualinvoke r0.<com.android.server.adb.AdbService: boolean isAdbWifiSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.camera.any");

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isAdbWifiSupported()
    {
        com.android.server.adb.AdbService r0;
        android.content.Context $r1, $r2;
        android.content.pm.PackageManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.adb.AdbService;

        $r1 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", "AdbService");

        $r2 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.wifi");

        return $z0;
    }

    public void systemReady()
    {
        com.android.server.adb.AdbService r0;
        boolean z0, $z2;
        java.lang.Throwable $r1;
        android.content.ContentResolver r2, r3;
        byte b2, b3;

        r0 := @this: com.android.server.adb.AdbService;

     label01:
        r2 = r0.<com.android.server.adb.AdbService: android.content.ContentResolver mContentResolver>;

        z0 = r0.<com.android.server.adb.AdbService: boolean mIsAdbUsbEnabled>;

     label02:
        if z0 == 0 goto label03;

        b2 = 1;

        goto label04;

     label03:
        b2 = 0;

     label04:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r2, "adb_enabled", b2);

        r3 = r0.<com.android.server.adb.AdbService: android.content.ContentResolver mContentResolver>;

        $z2 = r0.<com.android.server.adb.AdbService: boolean mIsAdbWifiEnabled>;

        if $z2 == 0 goto label06;

     label05:
        b3 = 1;

        goto label07;

     label06:
        b3 = 0;

     label07:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r3, "adb_wifi_enabled", b3);

     label08:
        goto label10;

     label09:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AdbService", "ADB_ENABLED is restricted.");

     label10:
        return;

        catch java.lang.SecurityException from label01 to label02 with label09;
        catch java.lang.SecurityException from label04 to label05 with label09;
        catch java.lang.SecurityException from label07 to label08 with label09;
    }

    public void unpairDevice(java.lang.String)
    {
        com.android.server.adb.AdbService r0;
        java.lang.String r1;
        com.android.server.adb.AdbDebuggingManager r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.adb.AdbService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.adb.AdbService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEBUGGING", null);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r1);

        r2 = r0.<com.android.server.adb.AdbService: com.android.server.adb.AdbDebuggingManager mDebuggingManager>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.adb.AdbDebuggingManager: void unpairDevice(java.lang.String)>(r1);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.adb.AdbService: java.lang.String WIFI_PERSISTENT_CONFIG_PROPERTY> = "persist.adb.tls_server.enable";

        <com.android.server.adb.AdbService: java.lang.String USB_PERSISTENT_CONFIG_PROPERTY> = "persist.sys.usb.config";

        <com.android.server.adb.AdbService: java.lang.String TAG> = "AdbService";

        <com.android.server.adb.AdbService: boolean DEBUG> = 0;

        <com.android.server.adb.AdbService: java.lang.String CTL_STOP> = "ctl.stop";

        <com.android.server.adb.AdbService: java.lang.String CTL_START> = "ctl.start";

        <com.android.server.adb.AdbService: java.lang.String ADBD> = "adbd";

        return;
    }
}
