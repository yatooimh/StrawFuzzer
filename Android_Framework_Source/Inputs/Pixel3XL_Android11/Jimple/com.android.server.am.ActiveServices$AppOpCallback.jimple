final class com.android.server.am.ActiveServices$AppOpCallback extends java.lang.Object
{
    private static final int[] LOGGED_AP_OPS;
    private final android.util.SparseIntArray mAcceptedOps;
    private final android.util.SparseIntArray mAppOpModes;
    private final android.app.AppOpsManager mAppOpsManager;
    private final java.lang.Object mCounterLock;
    private boolean mDestroyed;
    private int mNumFgs;
    private final android.app.AppOpsManager$OnOpNotedListener mOpNotedCallback;
    private final android.app.AppOpsManager$OnOpStartedListener mOpStartedCallback;
    private final com.android.server.am.ProcessRecord mProcessRecord;
    private final android.util.SparseIntArray mRejectedOps;

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[4];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 27;

        $r0[3] = 26;

        <com.android.server.am.ActiveServices$AppOpCallback: int[] LOGGED_AP_OPS> = $r0;

        return;
    }

    void <init>(com.android.server.am.ProcessRecord, android.app.AppOpsManager)
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        com.android.server.am.ProcessRecord r1;
        android.app.AppOpsManager r2;
        int[] r3;
        int i0, i1, i2, $i3, i4;
        android.util.SparseIntArray $r4, $r5, $r7, $r12;
        java.lang.Object $r6;
        com.android.server.am.ActiveServices$AppOpCallback$1 $r8;
        com.android.server.am.ActiveServices$AppOpCallback$2 $r9;
        android.content.pm.ApplicationInfo $r10;
        java.lang.String $r11;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        r1 := @parameter0: com.android.server.am.ProcessRecord;

        r2 := @parameter1: android.app.AppOpsManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mAcceptedOps> = $r4;

        $r5 = new android.util.SparseIntArray;

        specialinvoke $r5.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mRejectedOps> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.am.ActiveServices$AppOpCallback: java.lang.Object mCounterLock> = $r6;

        $r7 = new android.util.SparseIntArray;

        specialinvoke $r7.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mAppOpModes> = $r7;

        i4 = 0;

        r0.<com.android.server.am.ActiveServices$AppOpCallback: int mNumFgs> = 0;

        r0.<com.android.server.am.ActiveServices$AppOpCallback: boolean mDestroyed> = 0;

        $r8 = new com.android.server.am.ActiveServices$AppOpCallback$1;

        specialinvoke $r8.<com.android.server.am.ActiveServices$AppOpCallback$1: void <init>(com.android.server.am.ActiveServices$AppOpCallback)>(r0);

        r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager$OnOpNotedListener mOpNotedCallback> = $r8;

        $r9 = new com.android.server.am.ActiveServices$AppOpCallback$2;

        specialinvoke $r9.<com.android.server.am.ActiveServices$AppOpCallback$2: void <init>(com.android.server.am.ActiveServices$AppOpCallback)>(r0);

        r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager$OnOpStartedListener mOpStartedCallback> = $r9;

        r0.<com.android.server.am.ActiveServices$AppOpCallback: com.android.server.am.ProcessRecord mProcessRecord> = r1;

        r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager mAppOpsManager> = r2;

        r3 = <com.android.server.am.ActiveServices$AppOpCallback: int[] LOGGED_AP_OPS>;

        i0 = lengthof r3;

     label1:
        if i4 >= i0 goto label2;

        i1 = r3[i4];

        $i3 = r1.<com.android.server.am.ProcessRecord: int uid>;

        $r10 = r1.<com.android.server.am.ProcessRecord: android.content.pm.ApplicationInfo info>;

        $r11 = $r10.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        i2 = virtualinvoke r2.<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(int,int,java.lang.String)>(i1, $i3, $r11);

        $r12 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mAppOpModes>;

        virtualinvoke $r12.<android.util.SparseIntArray: void put(int,int)>(i1, i2);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    static void access$000(com.android.server.am.ActiveServices$AppOpCallback, int, int, int)
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        int i0, i1, i2;

        r0 := @parameter0: com.android.server.am.ActiveServices$AppOpCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.android.server.am.ActiveServices$AppOpCallback: void incrementOpCountIfNeeded(int,int,int)>(i0, i1, i2);

        return;
    }

    private void incrementOpCount(int, boolean)
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        int i0, i1, $i2, $i3;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.util.SparseIntArray r3;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: java.lang.Object mCounterLock>;

        entermonitor r1;

        if z0 == 0 goto label03;

     label01:
        r3 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mAcceptedOps>;

     label02:
        goto label04;

     label03:
        r3 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mRejectedOps>;

     label04:
        i1 = virtualinvoke r3.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

     label05:
        if i1 >= 0 goto label08;

     label06:
        virtualinvoke r3.<android.util.SparseIntArray: void put(int,int)>(i0, 1);

     label07:
        goto label09;

     label08:
        $i2 = virtualinvoke r3.<android.util.SparseIntArray: int valueAt(int)>(i1);

        $i3 = $i2 + 1;

        virtualinvoke r3.<android.util.SparseIntArray: void setValueAt(int,int)>(i1, $i3);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r2 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void incrementOpCountIfNeeded(int, int, int)
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        int i0, i1, i2, $i3;
        com.android.server.am.ProcessRecord $r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: com.android.server.am.ProcessRecord mProcessRecord>;

        $i3 = $r1.<com.android.server.am.ProcessRecord: int uid>;

        if i1 != $i3 goto label3;

        $z0 = specialinvoke r0.<com.android.server.am.ActiveServices$AppOpCallback: boolean isNotTop()>();

        if $z0 == 0 goto label3;

        if i2 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        specialinvoke r0.<com.android.server.am.ActiveServices$AppOpCallback: void incrementOpCount(int,boolean)>(i0, z1);

     label3:
        return;
    }

    private boolean isNotTop()
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        com.android.server.am.ProcessRecord $r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        $r1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: com.android.server.am.ProcessRecord mProcessRecord>;

        $i0 = virtualinvoke $r1.<com.android.server.am.ProcessRecord: int getCurProcState()>();

        if $i0 == 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void logFinalValues()
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        java.lang.Object r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7;
        android.util.SparseIntArray $r2, $r3, $r5;
        com.android.server.am.ProcessRecord $r4;
        java.lang.Throwable $r6;
        int[] r7;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        r1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: java.lang.Object mCounterLock>;

        entermonitor r1;

     label01:
        r7 = <com.android.server.am.ActiveServices$AppOpCallback: int[] LOGGED_AP_OPS>;

        i0 = lengthof r7;

     label02:
        i7 = 0;

     label03:
        if i7 >= i0 goto label08;

        i1 = r7[i7];

     label04:
        $r2 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mAcceptedOps>;

        i2 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int)>(i1);

        $r3 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mRejectedOps>;

        i3 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int)>(i1);

     label05:
        if i2 > 0 goto label06;

        if i3 <= 0 goto label07;

     label06:
        $r4 = r0.<com.android.server.am.ActiveServices$AppOpCallback: com.android.server.am.ProcessRecord mProcessRecord>;

        $i4 = $r4.<com.android.server.am.ProcessRecord: int uid>;

        $r5 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.util.SparseIntArray mAppOpModes>;

        $i5 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int)>(i1);

        $i6 = staticinvoke <com.android.server.am.ActiveServices$AppOpCallback: int modeToEnum(int)>($i5);

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,int,int,int)>(256, $i4, i1, $i6, i2, i3);

     label07:
        i7 = i7 + 1;

        goto label03;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private static int modeToEnum(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 4 goto label1;

        return 0;

     label1:
        return 3;

     label2:
        return 2;

     label3:
        return 1;
    }

    boolean isObsoleteLocked()
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        boolean $z0;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        $z0 = r0.<com.android.server.am.ActiveServices$AppOpCallback: boolean mDestroyed>;

        return $z0;
    }

    void registerLocked()
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        int i0, $i1;
        boolean $z0;
        android.app.AppOpsManager$OnOpNotedListener $r1;
        int[] $r2, $r5;
        android.app.AppOpsManager $r3, $r6;
        android.app.AppOpsManager$OnOpStartedListener $r4;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        $z0 = virtualinvoke r0.<com.android.server.am.ActiveServices$AppOpCallback: boolean isObsoleteLocked()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("ActivityManager", "Trying to register on a stale AppOpCallback.");

        return;

     label1:
        $i1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: int mNumFgs>;

        i0 = $i1 + 1;

        r0.<com.android.server.am.ActiveServices$AppOpCallback: int mNumFgs> = i0;

        if i0 != 1 goto label2;

        $r3 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager mAppOpsManager>;

        $r2 = <com.android.server.am.ActiveServices$AppOpCallback: int[] LOGGED_AP_OPS>;

        $r1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager$OnOpNotedListener mOpNotedCallback>;

        virtualinvoke $r3.<android.app.AppOpsManager: void startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)>($r2, $r1);

        $r6 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager mAppOpsManager>;

        $r5 = <com.android.server.am.ActiveServices$AppOpCallback: int[] LOGGED_AP_OPS>;

        $r4 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager$OnOpStartedListener mOpStartedCallback>;

        virtualinvoke $r6.<android.app.AppOpsManager: void startWatchingStarted(int[],android.app.AppOpsManager$OnOpStartedListener)>($r5, $r4);

     label2:
        return;
    }

    void unregisterLocked()
    {
        com.android.server.am.ActiveServices$AppOpCallback r0;
        int i0, $i1;
        android.app.AppOpsManager$OnOpNotedListener $r1;
        android.app.AppOpsManager $r2, $r4;
        android.app.AppOpsManager$OnOpStartedListener $r3;

        r0 := @this: com.android.server.am.ActiveServices$AppOpCallback;

        $i1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: int mNumFgs>;

        i0 = $i1 - 1;

        r0.<com.android.server.am.ActiveServices$AppOpCallback: int mNumFgs> = i0;

        if i0 > 0 goto label1;

        r0.<com.android.server.am.ActiveServices$AppOpCallback: boolean mDestroyed> = 1;

        specialinvoke r0.<com.android.server.am.ActiveServices$AppOpCallback: void logFinalValues()>();

        $r2 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager mAppOpsManager>;

        $r1 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager$OnOpNotedListener mOpNotedCallback>;

        virtualinvoke $r2.<android.app.AppOpsManager: void stopWatchingNoted(android.app.AppOpsManager$OnOpNotedListener)>($r1);

        $r4 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager mAppOpsManager>;

        $r3 = r0.<com.android.server.am.ActiveServices$AppOpCallback: android.app.AppOpsManager$OnOpStartedListener mOpStartedCallback>;

        virtualinvoke $r4.<android.app.AppOpsManager: void stopWatchingStarted(android.app.AppOpsManager$OnOpStartedListener)>($r3);

     label1:
        return;
    }
}
