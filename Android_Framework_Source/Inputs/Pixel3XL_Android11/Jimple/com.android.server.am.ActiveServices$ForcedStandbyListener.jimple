class com.android.server.am.ActiveServices$ForcedStandbyListener extends com.android.server.AppStateTracker$Listener
{
    final com.android.server.am.ActiveServices this$0;

    void <init>(com.android.server.am.ActiveServices)
    {
        com.android.server.am.ActiveServices$ForcedStandbyListener r0;
        com.android.server.am.ActiveServices r1;

        r0 := @this: com.android.server.am.ActiveServices$ForcedStandbyListener;

        r1 := @parameter0: com.android.server.am.ActiveServices;

        r0.<com.android.server.am.ActiveServices$ForcedStandbyListener: com.android.server.am.ActiveServices this$0> = r1;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void <init>()>();

        return;
    }

    public void stopForegroundServicesForUidPackage(int, java.lang.String)
    {
        com.android.server.am.ActiveServices$ForcedStandbyListener r0;
        int i0;
        com.android.server.am.ActivityManagerService r1;
        com.android.server.am.ActiveServices $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.am.ActiveServices$ForcedStandbyListener;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.am.ActiveServices$ForcedStandbyListener: com.android.server.am.ActiveServices this$0>;

        r1 = $r2.<com.android.server.am.ActiveServices: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.am.ActivityManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.am.ActiveServices$ForcedStandbyListener: com.android.server.am.ActiveServices this$0>;

        virtualinvoke $r3.<com.android.server.am.ActiveServices: void stopAllForegroundServicesLocked(int,java.lang.String)>(i0, r5);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
