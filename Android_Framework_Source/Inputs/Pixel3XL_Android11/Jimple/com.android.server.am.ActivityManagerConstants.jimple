final class com.android.server.am.ActivityManagerConstants extends android.database.ContentObserver
{
    private static final android.net.Uri ACTIVITY_MANAGER_CONSTANTS_URI;
    private static final android.net.Uri ACTIVITY_STARTS_LOGGING_ENABLED_URI;
    private static final long DEFAULT_BACKGROUND_SETTLE_TIME;
    private static final long DEFAULT_BG_START_TIMEOUT;
    private static final int DEFAULT_BOUND_SERVICE_CRASH_MAX_RETRY;
    private static final long DEFAULT_BOUND_SERVICE_CRASH_RESTART_DURATION;
    private static final long DEFAULT_CONTENT_PROVIDER_RETAIN_TIME;
    private static final long DEFAULT_FGSERVICE_MIN_REPORT_TIME;
    private static final long DEFAULT_FGSERVICE_MIN_SHOWN_TIME;
    private static final long DEFAULT_FGSERVICE_SCREEN_ON_AFTER_TIME;
    private static final long DEFAULT_FGSERVICE_SCREEN_ON_BEFORE_TIME;
    private static final boolean DEFAULT_FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS;
    private static final long DEFAULT_FULL_PSS_LOWERED_INTERVAL;
    private static final long DEFAULT_FULL_PSS_MIN_INTERVAL;
    private static final long DEFAULT_GC_MIN_INTERVAL;
    private static final long DEFAULT_GC_TIMEOUT;
    private static final int DEFAULT_MAX_CACHED_PROCESSES;
    private static final long DEFAULT_MAX_SERVICE_INACTIVITY;
    private static final long DEFAULT_MEMORY_INFO_THROTTLE_TIME;
    private static final long DEFAULT_MIN_ASSOC_LOG_DURATION;
    private static final int DEFAULT_OOMADJ_UPDATE_POLICY;
    private static final int DEFAULT_PENDINGINTENT_WARNING_THRESHOLD;
    private static final long DEFAULT_POWER_CHECK_INTERVAL;
    private static final int DEFAULT_POWER_CHECK_MAX_CPU_1;
    private static final int DEFAULT_POWER_CHECK_MAX_CPU_2;
    private static final int DEFAULT_POWER_CHECK_MAX_CPU_3;
    private static final int DEFAULT_POWER_CHECK_MAX_CPU_4;
    private static final boolean DEFAULT_PROCESS_START_ASYNC;
    private static final long DEFAULT_SERVICE_BG_ACTIVITY_START_TIMEOUT;
    private static final long DEFAULT_SERVICE_MIN_RESTART_TIME_BETWEEN;
    private static final long DEFAULT_SERVICE_RESET_RUN_DURATION;
    private static final long DEFAULT_SERVICE_RESTART_DURATION;
    private static final int DEFAULT_SERVICE_RESTART_DURATION_FACTOR;
    private static final long DEFAULT_SERVICE_USAGE_INTERACTION_TIME;
    private static final long DEFAULT_TOP_TO_FGS_GRACE_DURATION;
    private static final long DEFAULT_USAGE_STATS_INTERACTION_INTERVAL;
    private static final android.net.Uri ENABLE_AUTOMATIC_SYSTEM_SERVER_HEAP_DUMPS_URI;
    private static final android.net.Uri FOREGROUND_SERVICE_STARTS_LOGGING_ENABLED_URI;
    private static final java.lang.String KEY_BACKGROUND_SETTLE_TIME;
    static final java.lang.String KEY_BG_START_TIMEOUT;
    static final java.lang.String KEY_BOUND_SERVICE_CRASH_MAX_RETRY;
    static final java.lang.String KEY_BOUND_SERVICE_CRASH_RESTART_DURATION;
    private static final java.lang.String KEY_CONTENT_PROVIDER_RETAIN_TIME;
    private static final java.lang.String KEY_DEFAULT_BACKGROUND_ACTIVITY_STARTS_ENABLED;
    private static final java.lang.String KEY_DEFAULT_BACKGROUND_FGS_STARTS_RESTRICTION_ENABLED;
    private static final java.lang.String KEY_FGSERVICE_MIN_REPORT_TIME;
    private static final java.lang.String KEY_FGSERVICE_MIN_SHOWN_TIME;
    private static final java.lang.String KEY_FGSERVICE_SCREEN_ON_AFTER_TIME;
    private static final java.lang.String KEY_FGSERVICE_SCREEN_ON_BEFORE_TIME;
    private static final java.lang.String KEY_FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS;
    private static final java.lang.String KEY_FULL_PSS_LOWERED_INTERVAL;
    private static final java.lang.String KEY_FULL_PSS_MIN_INTERVAL;
    private static final java.lang.String KEY_GC_MIN_INTERVAL;
    private static final java.lang.String KEY_GC_TIMEOUT;
    private static final java.lang.String KEY_IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES;
    private static final java.lang.String KEY_IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES;
    private static final java.lang.String KEY_MAX_CACHED_PROCESSES;
    static final java.lang.String KEY_MAX_SERVICE_INACTIVITY;
    static final java.lang.String KEY_MEMORY_INFO_THROTTLE_TIME;
    private static final java.lang.String KEY_MIN_ASSOC_LOG_DURATION;
    private static final java.lang.String KEY_OOMADJ_UPDATE_POLICY;
    static final java.lang.String KEY_PENDINGINTENT_WARNING_THRESHOLD;
    private static final java.lang.String KEY_POWER_CHECK_INTERVAL;
    private static final java.lang.String KEY_POWER_CHECK_MAX_CPU_1;
    private static final java.lang.String KEY_POWER_CHECK_MAX_CPU_2;
    private static final java.lang.String KEY_POWER_CHECK_MAX_CPU_3;
    private static final java.lang.String KEY_POWER_CHECK_MAX_CPU_4;
    static final java.lang.String KEY_PROCESS_START_ASYNC;
    static final java.lang.String KEY_SERVICE_BG_ACTIVITY_START_TIMEOUT;
    static final java.lang.String KEY_SERVICE_MIN_RESTART_TIME_BETWEEN;
    static final java.lang.String KEY_SERVICE_RESET_RUN_DURATION;
    static final java.lang.String KEY_SERVICE_RESTART_DURATION;
    static final java.lang.String KEY_SERVICE_RESTART_DURATION_FACTOR;
    private static final java.lang.String KEY_SERVICE_USAGE_INTERACTION_TIME;
    static final java.lang.String KEY_TOP_TO_FGS_GRACE_DURATION;
    private static final java.lang.String KEY_USAGE_STATS_INTERACTION_INTERVAL;
    public static long MIN_ASSOC_LOG_DURATION;
    private static final long MIN_AUTOMATIC_HEAP_DUMP_PSS_THRESHOLD_BYTES;
    private static final int OOMADJ_UPDATE_POLICY_QUICK;
    private static final int OOMADJ_UPDATE_POLICY_SLOW;
    private static final java.lang.String TAG;
    public long BACKGROUND_SETTLE_TIME;
    public long BG_START_TIMEOUT;
    public long BOUND_SERVICE_CRASH_RESTART_DURATION;
    public long BOUND_SERVICE_MAX_CRASH_RETRY;
    long CONTENT_PROVIDER_RETAIN_TIME;
    public int CUR_MAX_CACHED_PROCESSES;
    public int CUR_MAX_EMPTY_PROCESSES;
    public int CUR_TRIM_CACHED_PROCESSES;
    public int CUR_TRIM_EMPTY_PROCESSES;
    public long FGSERVICE_MIN_REPORT_TIME;
    public long FGSERVICE_MIN_SHOWN_TIME;
    public long FGSERVICE_SCREEN_ON_AFTER_TIME;
    public long FGSERVICE_SCREEN_ON_BEFORE_TIME;
    public boolean FLAG_PROCESS_START_ASYNC;
    boolean FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS;
    long FULL_PSS_LOWERED_INTERVAL;
    long FULL_PSS_MIN_INTERVAL;
    long GC_MIN_INTERVAL;
    long GC_TIMEOUT;
    public android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES;
    public android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES;
    public int MAX_CACHED_PROCESSES;
    public long MAX_SERVICE_INACTIVITY;
    public long MEMORY_INFO_THROTTLE_TIME;
    public boolean OOMADJ_UPDATE_QUICK;
    public int PENDINGINTENT_WARNING_THRESHOLD;
    long POWER_CHECK_INTERVAL;
    int POWER_CHECK_MAX_CPU_1;
    int POWER_CHECK_MAX_CPU_2;
    int POWER_CHECK_MAX_CPU_3;
    int POWER_CHECK_MAX_CPU_4;
    public long SERVICE_BG_ACTIVITY_START_TIMEOUT;
    public long SERVICE_MIN_RESTART_TIME_BETWEEN;
    public long SERVICE_RESET_RUN_DURATION;
    public long SERVICE_RESTART_DURATION;
    public int SERVICE_RESTART_DURATION_FACTOR;
    long SERVICE_USAGE_INTERACTION_TIME;
    public long TOP_TO_FGS_GRACE_DURATION;
    long USAGE_STATS_INTERACTION_INTERVAL;
    private java.util.List mDefaultImperceptibleKillExemptPackages;
    private java.util.List mDefaultImperceptibleKillExemptProcStates;
    volatile boolean mFlagActivityStartsLoggingEnabled;
    volatile boolean mFlagBackgroundActivityStartsEnabled;
    volatile boolean mFlagBackgroundFgsStartRestrictionEnabled;
    volatile boolean mFlagForegroundServiceStartsLoggingEnabled;
    private final android.provider.DeviceConfig$OnPropertiesChangedListener mOnDeviceConfigChangedListener;
    private int mOverrideMaxCachedProcesses;
    private final android.util.KeyValueListParser mParser;
    private android.content.ContentResolver mResolver;
    private final com.android.server.am.ActivityManagerService mService;
    private final boolean mSystemServerAutomaticHeapDumpEnabled;
    private final java.lang.String mSystemServerAutomaticHeapDumpPackageName;
    private long mSystemServerAutomaticHeapDumpPssThresholdBytes;

    static void <clinit>()
    {
        android.net.Uri $r0, $r1, $r2, $r3;

        <com.android.server.am.ActivityManagerConstants: java.lang.String TAG> = "ActivityManagerConstants";

        <com.android.server.am.ActivityManagerConstants: int OOMADJ_UPDATE_POLICY_SLOW> = 0;

        <com.android.server.am.ActivityManagerConstants: int OOMADJ_UPDATE_POLICY_QUICK> = 1;

        <com.android.server.am.ActivityManagerConstants: long MIN_AUTOMATIC_HEAP_DUMP_PSS_THRESHOLD_BYTES> = 102400L;

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_USAGE_STATS_INTERACTION_INTERVAL> = "usage_stats_interaction_interval";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_TOP_TO_FGS_GRACE_DURATION> = "top_to_fgs_grace_duration";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_SERVICE_USAGE_INTERACTION_TIME> = "service_usage_interaction_time";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_SERVICE_RESTART_DURATION_FACTOR> = "service_restart_duration_factor";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_SERVICE_RESTART_DURATION> = "service_restart_duration";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_SERVICE_RESET_RUN_DURATION> = "service_reset_run_duration";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_SERVICE_MIN_RESTART_TIME_BETWEEN> = "service_min_restart_time_between";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_SERVICE_BG_ACTIVITY_START_TIMEOUT> = "service_bg_activity_start_timeout";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_PROCESS_START_ASYNC> = "process_start_async";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_POWER_CHECK_MAX_CPU_4> = "power_check_max_cpu_4";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_POWER_CHECK_MAX_CPU_3> = "power_check_max_cpu_3";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_POWER_CHECK_MAX_CPU_2> = "power_check_max_cpu_2";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_POWER_CHECK_MAX_CPU_1> = "power_check_max_cpu_1";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_POWER_CHECK_INTERVAL> = "power_check_interval";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_PENDINGINTENT_WARNING_THRESHOLD> = "pendingintent_warning_threshold";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_OOMADJ_UPDATE_POLICY> = "oomadj_update_policy";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_MIN_ASSOC_LOG_DURATION> = "min_assoc_log_duration";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_MEMORY_INFO_THROTTLE_TIME> = "memory_info_throttle_time";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_MAX_SERVICE_INACTIVITY> = "service_max_inactivity";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_MAX_CACHED_PROCESSES> = "max_cached_processes";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES> = "imperceptible_kill_exempt_proc_states";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES> = "imperceptible_kill_exempt_packages";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_GC_TIMEOUT> = "gc_timeout";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_GC_MIN_INTERVAL> = "gc_min_interval";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_FULL_PSS_MIN_INTERVAL> = "full_pss_min_interval";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_FULL_PSS_LOWERED_INTERVAL> = "full_pss_lowered_interval";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS> = "force_bg_check_on_restricted";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_FGSERVICE_SCREEN_ON_BEFORE_TIME> = "fgservice_screen_on_before_time";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_FGSERVICE_SCREEN_ON_AFTER_TIME> = "fgservice_screen_on_after_time";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_FGSERVICE_MIN_SHOWN_TIME> = "fgservice_min_shown_time";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_FGSERVICE_MIN_REPORT_TIME> = "fgservice_min_report_time";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_DEFAULT_BACKGROUND_FGS_STARTS_RESTRICTION_ENABLED> = "default_background_fgs_starts_restriction_enabled";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_DEFAULT_BACKGROUND_ACTIVITY_STARTS_ENABLED> = "default_background_activity_starts_enabled";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_CONTENT_PROVIDER_RETAIN_TIME> = "content_provider_retain_time";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_BOUND_SERVICE_CRASH_RESTART_DURATION> = "service_crash_restart_duration";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_BOUND_SERVICE_CRASH_MAX_RETRY> = "service_crash_max_retry";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_BG_START_TIMEOUT> = "service_bg_start_timeout";

        <com.android.server.am.ActivityManagerConstants: java.lang.String KEY_BACKGROUND_SETTLE_TIME> = "background_settle_time";

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_USAGE_STATS_INTERACTION_INTERVAL> = 7200000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_TOP_TO_FGS_GRACE_DURATION> = 15000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_SERVICE_USAGE_INTERACTION_TIME> = 1800000L;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_SERVICE_RESTART_DURATION_FACTOR> = 4;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_SERVICE_RESTART_DURATION> = 1000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_SERVICE_RESET_RUN_DURATION> = 60000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_SERVICE_MIN_RESTART_TIME_BETWEEN> = 10000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_SERVICE_BG_ACTIVITY_START_TIMEOUT> = 10000L;

        <com.android.server.am.ActivityManagerConstants: boolean DEFAULT_PROCESS_START_ASYNC> = 1;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_POWER_CHECK_MAX_CPU_4> = 2;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_POWER_CHECK_MAX_CPU_3> = 10;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_POWER_CHECK_MAX_CPU_2> = 25;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_POWER_CHECK_MAX_CPU_1> = 25;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_POWER_CHECK_INTERVAL> = 300000L;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_PENDINGINTENT_WARNING_THRESHOLD> = 2000;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_OOMADJ_UPDATE_POLICY> = 1;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_MIN_ASSOC_LOG_DURATION> = 300000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_MEMORY_INFO_THROTTLE_TIME> = 300000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_MAX_SERVICE_INACTIVITY> = 1800000L;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_MAX_CACHED_PROCESSES> = 32;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_GC_TIMEOUT> = 5000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_GC_MIN_INTERVAL> = 60000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_FULL_PSS_MIN_INTERVAL> = 1200000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_FULL_PSS_LOWERED_INTERVAL> = 300000L;

        <com.android.server.am.ActivityManagerConstants: boolean DEFAULT_FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS> = 1;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_FGSERVICE_SCREEN_ON_BEFORE_TIME> = 1000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_FGSERVICE_SCREEN_ON_AFTER_TIME> = 5000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_FGSERVICE_MIN_SHOWN_TIME> = 2000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_FGSERVICE_MIN_REPORT_TIME> = 3000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_CONTENT_PROVIDER_RETAIN_TIME> = 20000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_BOUND_SERVICE_CRASH_RESTART_DURATION> = 1800000L;

        <com.android.server.am.ActivityManagerConstants: int DEFAULT_BOUND_SERVICE_CRASH_MAX_RETRY> = 16;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_BG_START_TIMEOUT> = 15000L;

        <com.android.server.am.ActivityManagerConstants: long DEFAULT_BACKGROUND_SETTLE_TIME> = 60000L;

        $r0 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("activity_manager_constants");

        <com.android.server.am.ActivityManagerConstants: android.net.Uri ACTIVITY_MANAGER_CONSTANTS_URI> = $r0;

        $r1 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("activity_starts_logging_enabled");

        <com.android.server.am.ActivityManagerConstants: android.net.Uri ACTIVITY_STARTS_LOGGING_ENABLED_URI> = $r1;

        $r2 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("foreground_service_starts_logging_enabled");

        <com.android.server.am.ActivityManagerConstants: android.net.Uri FOREGROUND_SERVICE_STARTS_LOGGING_ENABLED_URI> = $r2;

        $r3 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("enable_automatic_system_server_heap_dumps");

        <com.android.server.am.ActivityManagerConstants: android.net.Uri ENABLE_AUTOMATIC_SYSTEM_SERVER_HEAP_DUMPS_URI> = $r3;

        <com.android.server.am.ActivityManagerConstants: long MIN_ASSOC_LOG_DURATION> = 300000L;

        return;
    }

    void <init>(android.content.Context, com.android.server.am.ActivityManagerService, android.os.Handler)
    {
        com.android.server.am.ActivityManagerConstants r0;
        android.content.Context r1;
        com.android.server.am.ActivityManagerService r2;
        android.os.Handler r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.util.KeyValueListParser $r4;
        android.util.ArraySet $r5, $r6, $r21, $r23;
        com.android.server.am.ActivityManagerConstants$1 $r7;
        boolean $z0, $z3, z4;
        android.content.res.Resources $r8, $r10, $r11, $r14;
        java.lang.String $r9;
        long $l9, $l10;
        java.lang.String[] $r12;
        java.util.List $r13, $r20, $r22, $r24;
        int[] $r15;
        java.util.stream.IntStream $r16;
        java.util.stream.Stream $r17;
        java.util.stream.Collector $r18;
        java.lang.Object $r19;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.am.ActivityManagerService;

        r3 := @parameter2: android.os.Handler;

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>(r3);

        r0.<com.android.server.am.ActivityManagerConstants: int MAX_CACHED_PROCESSES> = 32;

        r0.<com.android.server.am.ActivityManagerConstants: long BACKGROUND_SETTLE_TIME> = 60000L;

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_MIN_SHOWN_TIME> = 2000L;

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_MIN_REPORT_TIME> = 3000L;

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_SCREEN_ON_BEFORE_TIME> = 1000L;

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_SCREEN_ON_AFTER_TIME> = 5000L;

        r0.<com.android.server.am.ActivityManagerConstants: long CONTENT_PROVIDER_RETAIN_TIME> = 20000L;

        r0.<com.android.server.am.ActivityManagerConstants: long GC_TIMEOUT> = 5000L;

        r0.<com.android.server.am.ActivityManagerConstants: long GC_MIN_INTERVAL> = 60000L;

        z4 = 1;

        r0.<com.android.server.am.ActivityManagerConstants: boolean FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS> = 1;

        r0.<com.android.server.am.ActivityManagerConstants: long FULL_PSS_MIN_INTERVAL> = 1200000L;

        r0.<com.android.server.am.ActivityManagerConstants: long FULL_PSS_LOWERED_INTERVAL> = 300000L;

        r0.<com.android.server.am.ActivityManagerConstants: long POWER_CHECK_INTERVAL> = 300000L;

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_1> = 25;

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_2> = 25;

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_3> = 10;

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_4> = 2;

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_USAGE_INTERACTION_TIME> = 1800000L;

        r0.<com.android.server.am.ActivityManagerConstants: long USAGE_STATS_INTERACTION_INTERVAL> = 7200000L;

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_RESTART_DURATION> = 1000L;

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_RESET_RUN_DURATION> = 60000L;

        r0.<com.android.server.am.ActivityManagerConstants: int SERVICE_RESTART_DURATION_FACTOR> = 4;

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_MIN_RESTART_TIME_BETWEEN> = 10000L;

        r0.<com.android.server.am.ActivityManagerConstants: long MAX_SERVICE_INACTIVITY> = 1800000L;

        r0.<com.android.server.am.ActivityManagerConstants: long BG_START_TIMEOUT> = 15000L;

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_BG_ACTIVITY_START_TIMEOUT> = 10000L;

        r0.<com.android.server.am.ActivityManagerConstants: long BOUND_SERVICE_CRASH_RESTART_DURATION> = 1800000L;

        r0.<com.android.server.am.ActivityManagerConstants: long BOUND_SERVICE_MAX_CRASH_RETRY> = 16L;

        r0.<com.android.server.am.ActivityManagerConstants: boolean FLAG_PROCESS_START_ASYNC> = 1;

        r0.<com.android.server.am.ActivityManagerConstants: long MEMORY_INFO_THROTTLE_TIME> = 300000L;

        r0.<com.android.server.am.ActivityManagerConstants: long TOP_TO_FGS_GRACE_DURATION> = 15000L;

        r0.<com.android.server.am.ActivityManagerConstants: boolean mFlagBackgroundFgsStartRestrictionEnabled> = 1;

        $r4 = new android.util.KeyValueListParser;

        specialinvoke $r4.<android.util.KeyValueListParser: void <init>(char)>(44);

        r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser> = $r4;

        r0.<com.android.server.am.ActivityManagerConstants: int mOverrideMaxCachedProcesses> = -1;

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_CACHED_PROCESSES> = 32;

        $i1 = staticinvoke <com.android.server.am.ActivityManagerConstants: int computeEmptyProcessLimit(int)>(32);

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_EMPTY_PROCESSES> = $i1;

        $i2 = r0.<com.android.server.am.ActivityManagerConstants: int MAX_CACHED_PROCESSES>;

        $i3 = staticinvoke <com.android.server.am.ActivityManagerConstants: int computeEmptyProcessLimit(int)>($i2);

        $i4 = $i3 / 2;

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_TRIM_EMPTY_PROCESSES> = $i4;

        i0 = r0.<com.android.server.am.ActivityManagerConstants: int MAX_CACHED_PROCESSES>;

        $i5 = staticinvoke <com.android.server.am.ActivityManagerConstants: int computeEmptyProcessLimit(int)>(i0);

        $i6 = i0 - $i5;

        $i7 = $i6 / 3;

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_TRIM_CACHED_PROCESSES> = $i7;

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES> = $r5;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES> = $r6;

        r0.<com.android.server.am.ActivityManagerConstants: int PENDINGINTENT_WARNING_THRESHOLD> = 2000;

        r0.<com.android.server.am.ActivityManagerConstants: boolean OOMADJ_UPDATE_QUICK> = 1;

        $r7 = new com.android.server.am.ActivityManagerConstants$1;

        specialinvoke $r7.<com.android.server.am.ActivityManagerConstants$1: void <init>(com.android.server.am.ActivityManagerConstants)>(r0);

        r0.<com.android.server.am.ActivityManagerConstants: android.provider.DeviceConfig$OnPropertiesChangedListener mOnDeviceConfigChangedListener> = $r7;

        r0.<com.android.server.am.ActivityManagerConstants: com.android.server.am.ActivityManagerService mService> = r2;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891401);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        r0.<com.android.server.am.ActivityManagerConstants: boolean mSystemServerAutomaticHeapDumpEnabled> = z4;

        $r9 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        r0.<com.android.server.am.ActivityManagerConstants: java.lang.String mSystemServerAutomaticHeapDumpPackageName> = $r9;

        $r10 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i8 = virtualinvoke $r10.<android.content.res.Resources: int getInteger(int)>(17694771);

        $l9 = (long) $i8;

        $l10 = staticinvoke <java.lang.Math: long max(long,long)>(102400L, $l9);

        r0.<com.android.server.am.ActivityManagerConstants: long mSystemServerAutomaticHeapDumpPssThresholdBytes> = $l10;

        $r11 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r12 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236006);

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        r0.<com.android.server.am.ActivityManagerConstants: java.util.List mDefaultImperceptibleKillExemptPackages> = $r13;

        $r14 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r15 = virtualinvoke $r14.<android.content.res.Resources: int[] getIntArray(int)>(17236007);

        $r16 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>($r15);

        $r17 = interfaceinvoke $r16.<java.util.stream.IntStream: java.util.stream.Stream boxed()>();

        $r18 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r19 = interfaceinvoke $r17.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r18);

        $r20 = (java.util.List) $r19;

        r0.<com.android.server.am.ActivityManagerConstants: java.util.List mDefaultImperceptibleKillExemptProcStates> = $r20;

        $r21 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES>;

        $r22 = r0.<com.android.server.am.ActivityManagerConstants: java.util.List mDefaultImperceptibleKillExemptPackages>;

        virtualinvoke $r21.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r22);

        $r23 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES>;

        $r24 = r0.<com.android.server.am.ActivityManagerConstants: java.util.List mDefaultImperceptibleKillExemptProcStates>;

        virtualinvoke $r23.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r24);

        return;
    }

    static void access$000(com.android.server.am.ActivityManagerConstants)
    {
        com.android.server.am.ActivityManagerConstants r0;

        r0 := @parameter0: com.android.server.am.ActivityManagerConstants;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateMaxCachedProcesses()>();

        return;
    }

    static void access$100(com.android.server.am.ActivityManagerConstants)
    {
        com.android.server.am.ActivityManagerConstants r0;

        r0 := @parameter0: com.android.server.am.ActivityManagerConstants;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateBackgroundActivityStarts()>();

        return;
    }

    static void access$200(com.android.server.am.ActivityManagerConstants)
    {
        com.android.server.am.ActivityManagerConstants r0;

        r0 := @parameter0: com.android.server.am.ActivityManagerConstants;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateBackgroundFgsStartsRestriction()>();

        return;
    }

    static void access$300(com.android.server.am.ActivityManagerConstants)
    {
        com.android.server.am.ActivityManagerConstants r0;

        r0 := @parameter0: com.android.server.am.ActivityManagerConstants;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateOomAdjUpdatePolicy()>();

        return;
    }

    static void access$400(com.android.server.am.ActivityManagerConstants)
    {
        com.android.server.am.ActivityManagerConstants r0;

        r0 := @parameter0: com.android.server.am.ActivityManagerConstants;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateImperceptibleKillExemptions()>();

        return;
    }

    static void access$500(com.android.server.am.ActivityManagerConstants)
    {
        com.android.server.am.ActivityManagerConstants r0;

        r0 := @parameter0: com.android.server.am.ActivityManagerConstants;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateForceRestrictedBackgroundCheck()>();

        return;
    }

    static void access$600(com.android.server.am.ActivityManagerConstants)
    {
        com.android.server.am.ActivityManagerConstants r0;

        r0 := @parameter0: com.android.server.am.ActivityManagerConstants;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateMinAssocLogDuration()>();

        return;
    }

    public static int computeEmptyProcessLimit(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 / 2;

        return $i1;
    }

    private void loadDeviceConfigConstants()
    {
        com.android.server.am.ActivityManagerConstants r0;
        java.lang.String[] $r1;
        android.provider.DeviceConfig$OnPropertiesChangedListener $r2;
        android.provider.DeviceConfig$Properties $r3;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $r2 = r0.<com.android.server.am.ActivityManagerConstants: android.provider.DeviceConfig$OnPropertiesChangedListener mOnDeviceConfigChangedListener>;

        $r1 = newarray (java.lang.String)[0];

        $r3 = staticinvoke <android.provider.DeviceConfig: android.provider.DeviceConfig$Properties getProperties(java.lang.String,java.lang.String[])>("activity_manager", $r1);

        interfaceinvoke $r2.<android.provider.DeviceConfig$OnPropertiesChangedListener: void onPropertiesChanged(android.provider.DeviceConfig$Properties)>($r3);

        return;
    }

    private void updateActivityStartsLoggingEnabled()
    {
        com.android.server.am.ActivityManagerConstants r0;
        android.content.ContentResolver r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        r1 = r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver>;

        z0 = 1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "activity_starts_logging_enabled", 1);

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.am.ActivityManagerConstants: boolean mFlagActivityStartsLoggingEnabled> = z0;

        return;
    }

    private void updateBackgroundActivityStarts()
    {
        com.android.server.am.ActivityManagerConstants r0;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $z0 = staticinvoke <android.provider.DeviceConfig: boolean getBoolean(java.lang.String,java.lang.String,boolean)>("activity_manager", "default_background_activity_starts_enabled", 0);

        r0.<com.android.server.am.ActivityManagerConstants: boolean mFlagBackgroundActivityStartsEnabled> = $z0;

        return;
    }

    private void updateBackgroundFgsStartsRestriction()
    {
        com.android.server.am.ActivityManagerConstants r0;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $z0 = staticinvoke <android.provider.DeviceConfig: boolean getBoolean(java.lang.String,java.lang.String,boolean)>("activity_manager", "default_background_fgs_starts_restriction_enabled", 1);

        r0.<com.android.server.am.ActivityManagerConstants: boolean mFlagBackgroundFgsStartRestrictionEnabled> = $z0;

        return;
    }

    private void updateConstants()
    {
        com.android.server.am.ActivityManagerConstants r0;
        com.android.server.am.ActivityManagerService r1;
        android.content.ContentResolver $r2;
        android.util.KeyValueListParser $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l15, $l16, $l17, $l18, $l20, $l21, $l22, $l23, $l24, $l26, $l27, $l28;
        int $i11, $i12, $i13, $i14, $i19, $i25, $i29;
        boolean $z0;
        java.lang.Throwable $r34, $r35;
        java.lang.String r36;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $r2 = r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver>;

        r36 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "activity_manager_constants");

        r1 = r0.<com.android.server.am.ActivityManagerConstants: com.android.server.am.ActivityManagerService mService>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.am.ActivityManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r3.<android.util.KeyValueListParser: void setString(java.lang.String)>(r36);

     label2:
        goto label6;

     label3:
        $r35 := @caughtexception;

        goto label8;

     label4:
        $r34 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityManagerConstants", "Bad activity manager config settings", $r34);

     label6:
        $r4 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l0 = virtualinvoke $r4.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("background_settle_time", 60000L);

        r0.<com.android.server.am.ActivityManagerConstants: long BACKGROUND_SETTLE_TIME> = $l0;

        $r5 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l1 = virtualinvoke $r5.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("fgservice_min_shown_time", 2000L);

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_MIN_SHOWN_TIME> = $l1;

        $r6 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l2 = virtualinvoke $r6.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("fgservice_min_report_time", 3000L);

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_MIN_REPORT_TIME> = $l2;

        $r7 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l3 = virtualinvoke $r7.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("fgservice_screen_on_before_time", 1000L);

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_SCREEN_ON_BEFORE_TIME> = $l3;

        $r8 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l4 = virtualinvoke $r8.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("fgservice_screen_on_after_time", 5000L);

        r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_SCREEN_ON_AFTER_TIME> = $l4;

        $r9 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l5 = virtualinvoke $r9.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("content_provider_retain_time", 20000L);

        r0.<com.android.server.am.ActivityManagerConstants: long CONTENT_PROVIDER_RETAIN_TIME> = $l5;

        $r10 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l6 = virtualinvoke $r10.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("gc_timeout", 5000L);

        r0.<com.android.server.am.ActivityManagerConstants: long GC_TIMEOUT> = $l6;

        $r11 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l7 = virtualinvoke $r11.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("gc_min_interval", 60000L);

        r0.<com.android.server.am.ActivityManagerConstants: long GC_MIN_INTERVAL> = $l7;

        $r12 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l8 = virtualinvoke $r12.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("full_pss_min_interval", 1200000L);

        r0.<com.android.server.am.ActivityManagerConstants: long FULL_PSS_MIN_INTERVAL> = $l8;

        $r13 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l9 = virtualinvoke $r13.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("full_pss_lowered_interval", 300000L);

        r0.<com.android.server.am.ActivityManagerConstants: long FULL_PSS_LOWERED_INTERVAL> = $l9;

        $r14 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l10 = virtualinvoke $r14.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("power_check_interval", 300000L);

        r0.<com.android.server.am.ActivityManagerConstants: long POWER_CHECK_INTERVAL> = $l10;

        $r15 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $i11 = virtualinvoke $r15.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("power_check_max_cpu_1", 25);

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_1> = $i11;

        $r16 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $i12 = virtualinvoke $r16.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("power_check_max_cpu_2", 25);

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_2> = $i12;

        $r17 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $i13 = virtualinvoke $r17.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("power_check_max_cpu_3", 10);

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_3> = $i13;

        $r18 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $i14 = virtualinvoke $r18.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("power_check_max_cpu_4", 2);

        r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_4> = $i14;

        $r19 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l15 = virtualinvoke $r19.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_usage_interaction_time", 1800000L);

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_USAGE_INTERACTION_TIME> = $l15;

        $r20 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l16 = virtualinvoke $r20.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("usage_stats_interaction_interval", 7200000L);

        r0.<com.android.server.am.ActivityManagerConstants: long USAGE_STATS_INTERACTION_INTERVAL> = $l16;

        $r21 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l17 = virtualinvoke $r21.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_restart_duration", 1000L);

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_RESTART_DURATION> = $l17;

        $r22 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l18 = virtualinvoke $r22.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_reset_run_duration", 60000L);

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_RESET_RUN_DURATION> = $l18;

        $r23 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $i19 = virtualinvoke $r23.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("service_restart_duration_factor", 4);

        r0.<com.android.server.am.ActivityManagerConstants: int SERVICE_RESTART_DURATION_FACTOR> = $i19;

        $r24 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l20 = virtualinvoke $r24.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_min_restart_time_between", 10000L);

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_MIN_RESTART_TIME_BETWEEN> = $l20;

        $r25 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l21 = virtualinvoke $r25.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_max_inactivity", 1800000L);

        r0.<com.android.server.am.ActivityManagerConstants: long MAX_SERVICE_INACTIVITY> = $l21;

        $r26 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l22 = virtualinvoke $r26.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_bg_start_timeout", 15000L);

        r0.<com.android.server.am.ActivityManagerConstants: long BG_START_TIMEOUT> = $l22;

        $r27 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l23 = virtualinvoke $r27.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_bg_activity_start_timeout", 10000L);

        r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_BG_ACTIVITY_START_TIMEOUT> = $l23;

        $r28 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l24 = virtualinvoke $r28.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("service_crash_restart_duration", 1800000L);

        r0.<com.android.server.am.ActivityManagerConstants: long BOUND_SERVICE_CRASH_RESTART_DURATION> = $l24;

        $r29 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $i25 = virtualinvoke $r29.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("service_crash_max_retry", 16);

        $l26 = (long) $i25;

        r0.<com.android.server.am.ActivityManagerConstants: long BOUND_SERVICE_MAX_CRASH_RETRY> = $l26;

        $r30 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $z0 = virtualinvoke $r30.<android.util.KeyValueListParser: boolean getBoolean(java.lang.String,boolean)>("process_start_async", 1);

        r0.<com.android.server.am.ActivityManagerConstants: boolean FLAG_PROCESS_START_ASYNC> = $z0;

        $r31 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l27 = virtualinvoke $r31.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("memory_info_throttle_time", 300000L);

        r0.<com.android.server.am.ActivityManagerConstants: long MEMORY_INFO_THROTTLE_TIME> = $l27;

        $r32 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $l28 = virtualinvoke $r32.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("top_to_fgs_grace_duration", 15000L);

        r0.<com.android.server.am.ActivityManagerConstants: long TOP_TO_FGS_GRACE_DURATION> = $l28;

        $r33 = r0.<com.android.server.am.ActivityManagerConstants: android.util.KeyValueListParser mParser>;

        $i29 = virtualinvoke $r33.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("pendingintent_warning_threshold", 2000);

        r0.<com.android.server.am.ActivityManagerConstants: int PENDINGINTENT_WARNING_THRESHOLD> = $i29;

        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        throw $r35;

        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label8 to label9 with label3;
    }

    private void updateEnableAutomaticSystemServerHeapDumps()
    {
        com.android.server.am.ActivityManagerConstants r0;
        android.content.ContentResolver r1;
        boolean $z0, z1;
        int $i0;
        java.lang.String $r2;
        com.android.server.am.ActivityManagerService $r3;
        long l2;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $z0 = r0.<com.android.server.am.ActivityManagerConstants: boolean mSystemServerAutomaticHeapDumpEnabled>;

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("ActivityManagerConstants", "updateEnableAutomaticSystemServerHeapDumps called when leak detection disabled");

        return;

     label1:
        r1 = r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver>;

        z1 = 1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "enable_automatic_system_server_heap_dumps", 1);

        if $i0 != 1 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        if z1 == 0 goto label4;

        l2 = r0.<com.android.server.am.ActivityManagerConstants: long mSystemServerAutomaticHeapDumpPssThresholdBytes>;

        goto label5;

     label4:
        l2 = 0L;

     label5:
        $r3 = r0.<com.android.server.am.ActivityManagerConstants: com.android.server.am.ActivityManagerService mService>;

        $r2 = r0.<com.android.server.am.ActivityManagerConstants: java.lang.String mSystemServerAutomaticHeapDumpPackageName>;

        virtualinvoke $r3.<com.android.server.am.ActivityManagerService: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>(null, 0, l2, $r2);

        return;
    }

    private void updateForceRestrictedBackgroundCheck()
    {
        com.android.server.am.ActivityManagerConstants r0;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $z0 = staticinvoke <android.provider.DeviceConfig: boolean getBoolean(java.lang.String,java.lang.String,boolean)>("activity_manager", "force_bg_check_on_restricted", 1);

        r0.<com.android.server.am.ActivityManagerConstants: boolean FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS> = $z0;

        return;
    }

    private void updateForegroundServiceStartsLoggingEnabled()
    {
        com.android.server.am.ActivityManagerConstants r0;
        android.content.ContentResolver r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        r1 = r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver>;

        z0 = 1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "foreground_service_starts_logging_enabled", 1);

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.am.ActivityManagerConstants: boolean mFlagForegroundServiceStartsLoggingEnabled> = z0;

        return;
    }

    private void updateImperceptibleKillExemptions()
    {
        com.android.server.am.ActivityManagerConstants r0;
        android.util.ArraySet $r1, $r3, $r4, $r6, $r11;
        java.util.List $r2, $r5, $r8, $r13;
        boolean $z1, $z3;
        java.lang.String[] $r7, $r12;
        java.util.stream.Stream $r9;
        com.android.server.am._$$Lambda$ActivityManagerConstants$PMWuxGp7r583rXDgas6HMH5Lce8 $r10;
        java.lang.String r14, r15;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $r1 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES>;

        virtualinvoke $r1.<android.util.ArraySet: void clear()>();

        $r3 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES>;

        $r2 = r0.<com.android.server.am.ActivityManagerConstants: java.util.List mDefaultImperceptibleKillExemptPackages>;

        virtualinvoke $r3.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r2);

        r14 = staticinvoke <android.provider.DeviceConfig: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>("activity_manager", "imperceptible_kill_exempt_packages", null);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r14);

        if $z1 != 0 goto label1;

        $r11 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES>;

        $r12 = virtualinvoke r14.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        virtualinvoke $r11.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r13);

     label1:
        $r4 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES>;

        virtualinvoke $r4.<android.util.ArraySet: void clear()>();

        $r6 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES>;

        $r5 = r0.<com.android.server.am.ActivityManagerConstants: java.util.List mDefaultImperceptibleKillExemptProcStates>;

        virtualinvoke $r6.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r5);

        r15 = staticinvoke <android.provider.DeviceConfig: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>("activity_manager", "imperceptible_kill_exempt_proc_states", null);

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r15);

        if $z3 != 0 goto label2;

        $r7 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.stream.Stream stream()>();

        $r10 = new com.android.server.am._$$Lambda$ActivityManagerConstants$PMWuxGp7r583rXDgas6HMH5Lce8;

        specialinvoke $r10.<com.android.server.am._$$Lambda$ActivityManagerConstants$PMWuxGp7r583rXDgas6HMH5Lce8: void <init>(com.android.server.am.ActivityManagerConstants)>(r0);

        interfaceinvoke $r9.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r10);

     label2:
        return;
    }

    private void updateMaxCachedProcesses()
    {
        com.android.server.am.ActivityManagerConstants r0;
        java.lang.String r1, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10;
        boolean $z0;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        r1 = staticinvoke <android.provider.DeviceConfig: java.lang.String getProperty(java.lang.String,java.lang.String)>("activity_manager", "max_cached_processes");

     label1:
        $i0 = r0.<com.android.server.am.ActivityManagerConstants: int mOverrideMaxCachedProcesses>;

        if $i0 >= 0 goto label5;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label3;

     label2:
        i9 = 32;

        goto label6;

     label3:
        i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label4:
        goto label6;

     label5:
        i9 = r0.<com.android.server.am.ActivityManagerConstants: int mOverrideMaxCachedProcesses>;

     label6:
        r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_CACHED_PROCESSES> = i9;

     label7:
        goto label9;

     label8:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse flag for max_cached_processes: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityManagerConstants", $r8, $r4);

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_CACHED_PROCESSES> = 32;

     label9:
        $i1 = r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_CACHED_PROCESSES>;

        $i2 = staticinvoke <com.android.server.am.ActivityManagerConstants: int computeEmptyProcessLimit(int)>($i1);

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_EMPTY_PROCESSES> = $i2;

        $i3 = r0.<com.android.server.am.ActivityManagerConstants: int MAX_CACHED_PROCESSES>;

        i10 = staticinvoke <com.android.server.am.ActivityManagerConstants: int computeEmptyProcessLimit(int)>($i3);

        $i4 = i10 / 2;

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_TRIM_EMPTY_PROCESSES> = $i4;

        $i5 = r0.<com.android.server.am.ActivityManagerConstants: int MAX_CACHED_PROCESSES>;

        $i6 = $i5 - i10;

        $i7 = $i6 / 3;

        r0.<com.android.server.am.ActivityManagerConstants: int CUR_TRIM_CACHED_PROCESSES> = $i7;

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label8;
        catch java.lang.NumberFormatException from label3 to label4 with label8;
        catch java.lang.NumberFormatException from label5 to label6 with label8;
        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    private void updateMinAssocLogDuration()
    {
        com.android.server.am.ActivityManagerConstants r0;
        long $l0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $l0 = staticinvoke <android.provider.DeviceConfig: long getLong(java.lang.String,java.lang.String,long)>("activity_manager", "min_assoc_log_duration", 300000L);

        <com.android.server.am.ActivityManagerConstants: long MIN_ASSOC_LOG_DURATION> = $l0;

        return;
    }

    private void updateOomAdjUpdatePolicy()
    {
        com.android.server.am.ActivityManagerConstants r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        z0 = 1;

        $i0 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("activity_manager", "oomadj_update_policy", 1);

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.am.ActivityManagerConstants: boolean OOMADJ_UPDATE_QUICK> = z0;

        return;
    }

    void dump(java.io.PrintWriter)
    {
        com.android.server.am.ActivityManagerConstants r0;
        java.io.PrintWriter r1;
        int $i0, $i12, $i13, $i14, $i15, $i20, $i30, $i31, $i32, $i33, $i34, $i35;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l16, $l17, $l18, $l19, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29;
        boolean $z0, $z1, $z2;
        android.util.ArraySet $r2, $r5;
        java.lang.Object[] $r3, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ACTIVITY MANAGER SETTINGS (dumpsys activity settings) activity_manager_constants:");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("max_cached_processes");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $i0 = r0.<com.android.server.am.ActivityManagerConstants: int MAX_CACHED_PROCESSES>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("background_settle_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l1 = r0.<com.android.server.am.ActivityManagerConstants: long BACKGROUND_SETTLE_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("fgservice_min_shown_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l2 = r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_MIN_SHOWN_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("fgservice_min_report_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l3 = r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_MIN_REPORT_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("fgservice_screen_on_before_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l4 = r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_SCREEN_ON_BEFORE_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("fgservice_screen_on_after_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l5 = r0.<com.android.server.am.ActivityManagerConstants: long FGSERVICE_SCREEN_ON_AFTER_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("content_provider_retain_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l6 = r0.<com.android.server.am.ActivityManagerConstants: long CONTENT_PROVIDER_RETAIN_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("gc_timeout");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l7 = r0.<com.android.server.am.ActivityManagerConstants: long GC_TIMEOUT>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("gc_min_interval");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l8 = r0.<com.android.server.am.ActivityManagerConstants: long GC_MIN_INTERVAL>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("force_bg_check_on_restricted");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $z0 = r0.<com.android.server.am.ActivityManagerConstants: boolean FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("full_pss_min_interval");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l9 = r0.<com.android.server.am.ActivityManagerConstants: long FULL_PSS_MIN_INTERVAL>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("full_pss_lowered_interval");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l10 = r0.<com.android.server.am.ActivityManagerConstants: long FULL_PSS_LOWERED_INTERVAL>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("power_check_interval");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l11 = r0.<com.android.server.am.ActivityManagerConstants: long POWER_CHECK_INTERVAL>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("power_check_max_cpu_1");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $i12 = r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_1>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("power_check_max_cpu_2");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $i13 = r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_2>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("power_check_max_cpu_3");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $i14 = r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_3>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i14);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("power_check_max_cpu_4");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $i15 = r0.<com.android.server.am.ActivityManagerConstants: int POWER_CHECK_MAX_CPU_4>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i15);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_usage_interaction_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l16 = r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_USAGE_INTERACTION_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("usage_stats_interaction_interval");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l17 = r0.<com.android.server.am.ActivityManagerConstants: long USAGE_STATS_INTERACTION_INTERVAL>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l17);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_restart_duration");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l18 = r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_RESTART_DURATION>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l18);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_reset_run_duration");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l19 = r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_RESET_RUN_DURATION>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l19);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_restart_duration_factor");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $i20 = r0.<com.android.server.am.ActivityManagerConstants: int SERVICE_RESTART_DURATION_FACTOR>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_min_restart_time_between");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l21 = r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_MIN_RESTART_TIME_BETWEEN>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l21);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_max_inactivity");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l22 = r0.<com.android.server.am.ActivityManagerConstants: long MAX_SERVICE_INACTIVITY>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l22);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_bg_start_timeout");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l23 = r0.<com.android.server.am.ActivityManagerConstants: long BG_START_TIMEOUT>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l23);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_bg_activity_start_timeout");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l24 = r0.<com.android.server.am.ActivityManagerConstants: long SERVICE_BG_ACTIVITY_START_TIMEOUT>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l24);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_crash_restart_duration");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l25 = r0.<com.android.server.am.ActivityManagerConstants: long BOUND_SERVICE_CRASH_RESTART_DURATION>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l25);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("service_crash_max_retry");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l26 = r0.<com.android.server.am.ActivityManagerConstants: long BOUND_SERVICE_MAX_CRASH_RETRY>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l26);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("process_start_async");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $z1 = r0.<com.android.server.am.ActivityManagerConstants: boolean FLAG_PROCESS_START_ASYNC>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("memory_info_throttle_time");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l27 = r0.<com.android.server.am.ActivityManagerConstants: long MEMORY_INFO_THROTTLE_TIME>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l27);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("top_to_fgs_grace_duration");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l28 = r0.<com.android.server.am.ActivityManagerConstants: long TOP_TO_FGS_GRACE_DURATION>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l28);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("imperceptible_kill_exempt_proc_states");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $r2 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES>;

        $r3 = virtualinvoke $r2.<android.util.ArraySet: java.lang.Object[] toArray()>();

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("imperceptible_kill_exempt_packages");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $r5 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PACKAGES>;

        $r6 = virtualinvoke $r5.<android.util.ArraySet: java.lang.Object[] toArray()>();

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r6);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("min_assoc_log_duration");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("=");

        $l29 = <com.android.server.am.ActivityManagerConstants: long MIN_ASSOC_LOG_DURATION>;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l29);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $i30 = r0.<com.android.server.am.ActivityManagerConstants: int mOverrideMaxCachedProcesses>;

        if $i30 < 0 goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mOverrideMaxCachedProcesses=");

        $i35 = r0.<com.android.server.am.ActivityManagerConstants: int mOverrideMaxCachedProcesses>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i35);

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  CUR_MAX_CACHED_PROCESSES=");

        $i31 = r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_CACHED_PROCESSES>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i31);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  CUR_MAX_EMPTY_PROCESSES=");

        $i32 = r0.<com.android.server.am.ActivityManagerConstants: int CUR_MAX_EMPTY_PROCESSES>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  CUR_TRIM_EMPTY_PROCESSES=");

        $i33 = r0.<com.android.server.am.ActivityManagerConstants: int CUR_TRIM_EMPTY_PROCESSES>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i33);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  CUR_TRIM_CACHED_PROCESSES=");

        $i34 = r0.<com.android.server.am.ActivityManagerConstants: int CUR_TRIM_CACHED_PROCESSES>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i34);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  OOMADJ_UPDATE_QUICK=");

        $z2 = r0.<com.android.server.am.ActivityManagerConstants: boolean OOMADJ_UPDATE_QUICK>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z2);

        return;
    }

    public int getOverrideMaxCachedProcesses()
    {
        com.android.server.am.ActivityManagerConstants r0;
        int $i0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        $i0 = r0.<com.android.server.am.ActivityManagerConstants: int mOverrideMaxCachedProcesses>;

        return $i0;
    }

    public void lambda$updateImperceptibleKillExemptions$0$ActivityManagerConstants(java.lang.String)
    {
        com.android.server.am.ActivityManagerConstants r0;
        android.util.ArraySet $r1;
        int $i0;
        java.lang.Integer $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.server.am.ActivityManagerConstants: android.util.ArraySet IMPERCEPTIBLE_KILL_EXEMPT_PROC_STATES>;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<android.util.ArraySet: boolean add(java.lang.Object)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void onChange(boolean, android.net.Uri)
    {
        com.android.server.am.ActivityManagerConstants r0;
        boolean z0, $z1, $z2, $z3, $z4;
        android.net.Uri r1, $r2, $r3, $r4, $r5;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.Uri;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = <com.android.server.am.ActivityManagerConstants: android.net.Uri ACTIVITY_MANAGER_CONSTANTS_URI>;

        $z1 = virtualinvoke $r2.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateConstants()>();

        goto label5;

     label2:
        $r3 = <com.android.server.am.ActivityManagerConstants: android.net.Uri ACTIVITY_STARTS_LOGGING_ENABLED_URI>;

        $z2 = virtualinvoke $r3.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateActivityStartsLoggingEnabled()>();

        goto label5;

     label3:
        $r4 = <com.android.server.am.ActivityManagerConstants: android.net.Uri FOREGROUND_SERVICE_STARTS_LOGGING_ENABLED_URI>;

        $z3 = virtualinvoke $r4.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateForegroundServiceStartsLoggingEnabled()>();

        goto label5;

     label4:
        $r5 = <com.android.server.am.ActivityManagerConstants: android.net.Uri ENABLE_AUTOMATIC_SYSTEM_SERVER_HEAP_DUMPS_URI>;

        $z4 = virtualinvoke $r5.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label5;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateEnableAutomaticSystemServerHeapDumps()>();

     label5:
        return;
    }

    public void setOverrideMaxCachedProcesses(int)
    {
        com.android.server.am.ActivityManagerConstants r0;
        int i0;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        i0 := @parameter0: int;

        r0.<com.android.server.am.ActivityManagerConstants: int mOverrideMaxCachedProcesses> = i0;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateMaxCachedProcesses()>();

        return;
    }

    public void start(android.content.ContentResolver)
    {
        com.android.server.am.ActivityManagerConstants r0;
        android.content.ContentResolver r1, $r4, $r6, $r11;
        android.net.Uri $r2, $r3, $r5, $r10;
        boolean $z0, $z1;
        android.app.Application $r7;
        java.util.concurrent.Executor $r8;
        android.provider.DeviceConfig$OnPropertiesChangedListener $r9;

        r0 := @this: com.android.server.am.ActivityManagerConstants;

        r1 := @parameter0: android.content.ContentResolver;

        r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver> = r1;

        $r2 = <com.android.server.am.ActivityManagerConstants: android.net.Uri ACTIVITY_MANAGER_CONSTANTS_URI>;

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r2, 0, r0);

        $r4 = r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver>;

        $r3 = <com.android.server.am.ActivityManagerConstants: android.net.Uri ACTIVITY_STARTS_LOGGING_ENABLED_URI>;

        virtualinvoke $r4.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r3, 0, r0);

        $r6 = r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver>;

        $r5 = <com.android.server.am.ActivityManagerConstants: android.net.Uri FOREGROUND_SERVICE_STARTS_LOGGING_ENABLED_URI>;

        virtualinvoke $r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r5, 0, r0);

        $z0 = r0.<com.android.server.am.ActivityManagerConstants: boolean mSystemServerAutomaticHeapDumpEnabled>;

        if $z0 == 0 goto label1;

        $r11 = r0.<com.android.server.am.ActivityManagerConstants: android.content.ContentResolver mResolver>;

        $r10 = <com.android.server.am.ActivityManagerConstants: android.net.Uri ENABLE_AUTOMATIC_SYSTEM_SERVER_HEAP_DUMPS_URI>;

        virtualinvoke $r11.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r10, 0, r0);

     label1:
        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateConstants()>();

        $z1 = r0.<com.android.server.am.ActivityManagerConstants: boolean mSystemServerAutomaticHeapDumpEnabled>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateEnableAutomaticSystemServerHeapDumps()>();

     label2:
        $r7 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        $r8 = virtualinvoke $r7.<android.app.Application: java.util.concurrent.Executor getMainExecutor()>();

        $r9 = r0.<com.android.server.am.ActivityManagerConstants: android.provider.DeviceConfig$OnPropertiesChangedListener mOnDeviceConfigChangedListener>;

        staticinvoke <android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)>("activity_manager", $r8, $r9);

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void loadDeviceConfigConstants()>();

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateActivityStartsLoggingEnabled()>();

        specialinvoke r0.<com.android.server.am.ActivityManagerConstants: void updateForegroundServiceStartsLoggingEnabled()>();

        return;
    }
}
