class com.android.server.am.ActivityManagerShellCommand$ProgressWaiter extends android.os.IProgressListener$Stub
{
    private final java.util.concurrent.CountDownLatch mFinishedLatch;
    final com.android.server.am.ActivityManagerShellCommand this$0;

    private void <init>(com.android.server.am.ActivityManagerShellCommand)
    {
        com.android.server.am.ActivityManagerShellCommand$ProgressWaiter r0;
        com.android.server.am.ActivityManagerShellCommand r1;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand$ProgressWaiter;

        r1 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        r0.<com.android.server.am.ActivityManagerShellCommand$ProgressWaiter: com.android.server.am.ActivityManagerShellCommand this$0> = r1;

        specialinvoke r0.<android.os.IProgressListener$Stub: void <init>()>();

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.am.ActivityManagerShellCommand$ProgressWaiter: java.util.concurrent.CountDownLatch mFinishedLatch> = $r2;

        return;
    }

    void <init>(com.android.server.am.ActivityManagerShellCommand, com.android.server.am.ActivityManagerShellCommand$1)
    {
        com.android.server.am.ActivityManagerShellCommand$ProgressWaiter r0;
        com.android.server.am.ActivityManagerShellCommand r1;
        com.android.server.am.ActivityManagerShellCommand$1 r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand$ProgressWaiter;

        r1 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        r2 := @parameter1: com.android.server.am.ActivityManagerShellCommand$1;

        specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand$ProgressWaiter: void <init>(com.android.server.am.ActivityManagerShellCommand)>(r1);

        return;
    }

    public void onFinished(int, android.os.Bundle)
    {
        com.android.server.am.ActivityManagerShellCommand$ProgressWaiter r0;
        int i0;
        android.os.Bundle r1;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand$ProgressWaiter;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand$ProgressWaiter: java.util.concurrent.CountDownLatch mFinishedLatch>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public void onProgress(int, int, android.os.Bundle)
    {
        com.android.server.am.ActivityManagerShellCommand$ProgressWaiter r0;
        int i0, i1;
        android.os.Bundle r1;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand$ProgressWaiter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

        return;
    }

    public void onStarted(int, android.os.Bundle)
    {
        com.android.server.am.ActivityManagerShellCommand$ProgressWaiter r0;
        int i0;
        android.os.Bundle r1;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand$ProgressWaiter;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        return;
    }

    public boolean waitForFinish(long)
    {
        com.android.server.am.ActivityManagerShellCommand$ProgressWaiter r0;
        long l0;
        boolean z0;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.CountDownLatch $r3;
        java.lang.Throwable $r4;
        java.io.PrintStream $r5;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand$ProgressWaiter;

        l0 := @parameter0: long;

     label1:
        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand$ProgressWaiter: java.util.concurrent.CountDownLatch mFinishedLatch>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z0 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l0, $r2);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Thread interrupted unexpectedly.");

        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
