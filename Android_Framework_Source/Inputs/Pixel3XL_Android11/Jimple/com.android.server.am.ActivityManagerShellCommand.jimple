final class com.android.server.am.ActivityManagerShellCommand extends android.os.ShellCommand
{
    private static final java.time.format.DateTimeFormatter LOG_NAME_TIME_FORMATTER;
    public static final java.lang.String NO_CLASS_ERROR_CODE;
    private static final java.lang.String SHELL_PACKAGE_NAME;
    private static final int USER_OPERATION_TIMEOUT_MS;
    private int mActivityType;
    private java.lang.String mAgent;
    private boolean mAttachAgentDuringBind;
    private boolean mAutoStop;
    private android.app.BroadcastOptions mBroadcastOptions;
    private int mDisplayId;
    final boolean mDumping;
    final android.app.IActivityManager mInterface;
    final com.android.server.am.ActivityManagerService mInternal;
    private boolean mIsLockTask;
    private boolean mIsTaskOverlay;
    final android.content.pm.IPackageManager mPm;
    private java.lang.String mProfileFile;
    private java.lang.String mReceiverPermission;
    private int mRepeat;
    private int mSamplingInterval;
    private int mStartFlags;
    private boolean mStopOption;
    private boolean mStreaming;
    private int mTaskId;
    final android.app.IActivityTaskManager mTaskInterface;
    private int mUserId;
    private boolean mWaitOption;
    private int mWindowingMode;

    static void <clinit>()
    {
        java.util.Locale $r0;
        java.time.format.DateTimeFormatter $r1;

        <com.android.server.am.ActivityManagerShellCommand: int USER_OPERATION_TIMEOUT_MS> = 120000;

        <com.android.server.am.ActivityManagerShellCommand: java.lang.String SHELL_PACKAGE_NAME> = "com.android.shell";

        <com.android.server.am.ActivityManagerShellCommand: java.lang.String NO_CLASS_ERROR_CODE> = "Error type 3";

        $r0 = <java.util.Locale: java.util.Locale ROOT>;

        $r1 = staticinvoke <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>("yyyyMMdd-HHmmss", $r0);

        <com.android.server.am.ActivityManagerShellCommand: java.time.format.DateTimeFormatter LOG_NAME_TIME_FORMATTER> = $r1;

        return;
    }

    void <init>(com.android.server.am.ActivityManagerService, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        com.android.server.am.ActivityManagerService r1;
        boolean z0;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.content.pm.IPackageManager $r3;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: com.android.server.am.ActivityManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.os.ShellCommand: void <init>()>();

        r0.<com.android.server.am.ActivityManagerShellCommand: int mStartFlags> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mWaitOption> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStopOption> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mRepeat> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface> = r1;

        $r2 = r1.<com.android.server.am.ActivityManagerService: com.android.server.wm.ActivityTaskManagerService mActivityTaskManager>;

        r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface> = $r2;

        r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal> = r1;

        $r3 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.am.ActivityManagerShellCommand: android.content.pm.IPackageManager mPm> = $r3;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mDumping> = z0;

        return;
    }

    static int access$076(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int $i0, i1, i2;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i1 := @parameter1: int;

        $i0 = r0.<com.android.server.am.ActivityManagerShellCommand: int mStartFlags>;

        i2 = $i0 | i1;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mStartFlags> = i2;

        return i2;
    }

    static int access$1002(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter1: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId> = i0;

        return i0;
    }

    static boolean access$102(com.android.server.am.ActivityManagerShellCommand, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mWaitOption> = z0;

        return z0;
    }

    static java.lang.String access$1102(com.android.server.am.ActivityManagerShellCommand, java.lang.String)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mReceiverPermission> = r1;

        return r1;
    }

    static int access$1202(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter1: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mDisplayId> = i0;

        return i0;
    }

    static int access$1302(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter1: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mWindowingMode> = i0;

        return i0;
    }

    static int access$1402(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter1: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mActivityType> = i0;

        return i0;
    }

    static int access$1502(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter1: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mTaskId> = i0;

        return i0;
    }

    static boolean access$1602(com.android.server.am.ActivityManagerShellCommand, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mIsTaskOverlay> = z0;

        return z0;
    }

    static boolean access$1702(com.android.server.am.ActivityManagerShellCommand, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mIsLockTask> = z0;

        return z0;
    }

    static android.app.BroadcastOptions access$1800(com.android.server.am.ActivityManagerShellCommand)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        android.app.BroadcastOptions $r1;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.BroadcastOptions mBroadcastOptions>;

        return $r1;
    }

    static android.app.BroadcastOptions access$1802(com.android.server.am.ActivityManagerShellCommand, android.app.BroadcastOptions)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        android.app.BroadcastOptions r1;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter1: android.app.BroadcastOptions;

        r0.<com.android.server.am.ActivityManagerShellCommand: android.app.BroadcastOptions mBroadcastOptions> = r1;

        return r1;
    }

    static java.lang.String access$202(com.android.server.am.ActivityManagerShellCommand, java.lang.String)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mProfileFile> = r1;

        return r1;
    }

    static boolean access$302(com.android.server.am.ActivityManagerShellCommand, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mAutoStop> = z0;

        return z0;
    }

    static int access$402(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter1: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mSamplingInterval> = i0;

        return i0;
    }

    static boolean access$502(com.android.server.am.ActivityManagerShellCommand, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStreaming> = z0;

        return z0;
    }

    static java.lang.String access$600(com.android.server.am.ActivityManagerShellCommand)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mAgent>;

        return $r1;
    }

    static java.lang.String access$602(com.android.server.am.ActivityManagerShellCommand, java.lang.String)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mAgent> = r1;

        return r1;
    }

    static boolean access$702(com.android.server.am.ActivityManagerShellCommand, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mAttachAgentDuringBind> = z0;

        return z0;
    }

    static int access$802(com.android.server.am.ActivityManagerShellCommand, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter1: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mRepeat> = i0;

        return i0;
    }

    static boolean access$902(com.android.server.am.ActivityManagerShellCommand, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerShellCommand;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStopOption> = z0;

        return z0;
    }

    private static void addExtensionsForConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int[], int[], java.util.Set)
    {
        javax.microedition.khronos.egl.EGL10 r0;
        javax.microedition.khronos.egl.EGLDisplay r1;
        java.util.Set r2;
        int i0, i1;
        javax.microedition.khronos.egl.EGLContext $r3, $r4, $r6, r13;
        javax.microedition.khronos.egl.EGLSurface $r5, $r7, $r8, r14;
        boolean $z1;
        java.lang.String $r9, r15;
        javax.microedition.khronos.egl.EGLConfig r10;
        int[] r11, r12;
        java.lang.String[] r16;

        r0 := @parameter0: javax.microedition.khronos.egl.EGL10;

        r1 := @parameter1: javax.microedition.khronos.egl.EGLDisplay;

        r10 := @parameter2: javax.microedition.khronos.egl.EGLConfig;

        r11 := @parameter3: int[];

        r12 := @parameter4: int[];

        r2 := @parameter5: java.util.Set;

        $r3 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        r13 = interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>(r1, r10, $r3, r12);

        $r4 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        if r13 != $r4 goto label1;

        return;

     label1:
        r14 = interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>(r1, r10, r11);

        $r5 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        if r14 != $r5 goto label2;

        interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>(r1, r13);

        return;

     label2:
        interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>(r1, r14, r14, r13);

        r15 = staticinvoke <android.opengl.GLES10: java.lang.String glGetString(int)>(7939);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r15);

        if $z1 != 0 goto label4;

        r16 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i0 = lengthof r16;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r9 = r16[i1];

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r9);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r8 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r7 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r6 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>(r1, $r8, $r7, $r6);

        interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>(r1, r14);

        interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>(r1, r13);

        return;
    }

    private static byte[] argToBytes(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        byte[] $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("!");

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>(r0);

        return $r1;
    }

    private int bucketNameToBucketValue(java.lang.String)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7, r8;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4;
        java.io.PrintWriter r10;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.lang.String;

        r8 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("ac");

        if $z0 == 0 goto label1;

        return 10;

     label1:
        $z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("wo");

        if $z1 == 0 goto label2;

        return 20;

     label2:
        $z2 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("fr");

        if $z2 == 0 goto label3;

        return 30;

     label3:
        $z3 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("ra");

        if $z3 == 0 goto label4;

        return 40;

     label4:
        $z4 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("re");

        if $z4 == 0 goto label5;

        return 45;

     label5:
        $z5 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("ne");

        if $z5 == 0 goto label6;

        return 50;

     label6:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

     label7:
        return i0;

     label8:
        $r3 := @caughtexception;

        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown bucket: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    static void dumpHelp(java.io.PrintWriter, boolean)
    {
        java.io.PrintWriter r0;
        boolean z0;

        r0 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Activity manager dump options:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  [-a] [-c] [-p PACKAGE] [-h] [WHAT] ...");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  WHAT may be one of:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    a[ctivities]: activity stack state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    r[recents]: recent activities state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    b[roadcasts] [PACKAGE_NAME] [history [-s]]: broadcast state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    broadcast-stats [PACKAGE_NAME]: aggregated broadcast statistics");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    i[ntents] [PACKAGE_NAME]: pending intent state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    p[rocesses] [PACKAGE_NAME]: process state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    o[om]: out of memory management");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    perm[issions]: URI permission grant state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    prov[iders] [COMP_SPEC ...]: content provider state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    provider [COMP_SPEC]: provider client-side state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    s[ervices] [COMP_SPEC ...]: service state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    allowed-associations: current package association restrictions");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    as[sociations]: tracked app associations");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    exit-info [PACKAGE_NAME]: historical process exit information");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    lmk: stats on low memory killer");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    lru: raw LRU process list");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    binder-proxies: stats on binder objects and IPCs");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    settings: currently applied config settings");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    service [COMP_SPEC]: service client-side state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    package [PACKAGE_NAME]: all state related to given package");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    all: dump all activities");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    top: dump the top activity");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  WHAT may also be a COMP_SPEC to dump activities.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  COMP_SPEC may be a component name (com.foo/.myApp),");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    a partial substring in a component name, a");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    hex object identifier.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  -a: include all available server state.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  -c: include client state.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  -p: limit output to given package.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --checkin: output checkin format, resetting data.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --C: output checkin format, not resetting data.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --proto: output dump in protocol buffer format.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --autofill: dump just the autofill-related state of an activity");

        goto label2;

     label1:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Activity manager (activity) commands:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  help");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Print this help text.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  start-activity [-D] [-N] [-W] [-P <FILE>] [--start-profiler <FILE>]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [--sampling INTERVAL] [--streaming] [-R COUNT] [-S]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [--track-allocation] [--user <USER_ID> | current] <INTENT>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start an Activity.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -D: enable debugging");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -N: enable native debugging");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -W: wait for launch to complete");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --start-profiler <FILE>: start profiler and send results to <FILE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --sampling INTERVAL: use sample profiling with INTERVAL microseconds");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          between samples (use with --start-profiler)");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --streaming: stream the profiling output to the specified file");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          (use with --start-profiler)");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -P <FILE>: like above, but profiling stops when app goes idle");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --attach-agent <agent>: attach the given agent before binding");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --attach-agent-bind <agent>: attach the given agent during binding");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -R: repeat the activity launch <COUNT> times.  Prior to each repeat,");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          the top activity will be finished.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -S: force stop the target app before starting the activity");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --track-allocation: enable tracking of object allocations");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: Specify which user to run as; if not");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified then run as the current user.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --windowingMode <WINDOWING_MODE>: The windowing mode to launch the activity into.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --activityType <ACTIVITY_TYPE>: The activity type to launch the activity as.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --display <DISPLAY_ID>: The display to launch the activity into.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  start-service [--user <USER_ID> | current] <INTENT>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start a Service.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: Specify which user to run as; if not");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified then run as the current user.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  start-foreground-service [--user <USER_ID> | current] <INTENT>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start a foreground Service.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: Specify which user to run as; if not");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified then run as the current user.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  stop-service [--user <USER_ID> | current] <INTENT>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Stop a Service.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: Specify which user to run as; if not");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified then run as the current user.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  broadcast [--user <USER_ID> | all | current] <INTENT>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Send a broadcast Intent.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | all | current: Specify which user to send to; if not");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified then send to all users.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --receiver-permission <PERMISSION>: Require receiver to hold permission.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --allow-background-activity-starts: The receiver may start activities");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          even if in the background.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  instrument [-r] [-e <NAME> <VALUE>] [-p <FILE>] [-w]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [--user <USER_ID> | current]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [--no-hidden-api-checks [--no-test-api-access]]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [--no-isolated-storage]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [--no-window-animation] [--abi <ABI>] <COMPONENT>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start an Instrumentation.  Typically this target <COMPONENT> is in the");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      form <TEST_PACKAGE>/<RUNNER_CLASS> or only <TEST_PACKAGE> if there");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      is only one instrumentation.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -r: print raw results (otherwise decode REPORT_KEY_STREAMRESULT).  Use with");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [-e perf true] to generate raw output for performance measurements.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -e <NAME> <VALUE>: set argument <NAME> to <VALUE>.  For test runners a");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          common form is [-e <testrunner_flag> <value>[,<value>...]].");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -p <FILE>: write profiling data to <FILE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -m: Write output as protobuf to stdout (machine readable)");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -f <Optional PATH/TO/FILE>: Write output as protobuf to a file (machine");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          readable). If path is not specified, default directory and file name will");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          be used: /sdcard/instrument-logs/log-yyyyMMdd-hhmmss-SSS.instrumentation_data_proto");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -w: wait for instrumentation to finish before returning.  Required for");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          test runners.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: Specify user instrumentation runs in;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          current user if not specified.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --no-hidden-api-checks: disable restrictions on use of hidden API.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --no-test-api-access: do not allow access to test APIs, if hidden");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          API checks are enabled.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --no-isolated-storage: don\'t use isolated storage sandbox and ");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          mount full external storage");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --no-window-animation: turn off window animations while running.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --abi <ABI>: Launch the instrumented process with the selected ABI.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          This assumes that the process supports the selected ABI.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  trace-ipc [start|stop] [--dump-file <FILE>]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Trace IPC transactions.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      start: start tracing IPC transactions.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      stop: stop tracing IPC transactions and dump the results to file.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --dump-file <FILE>: Specify the file the trace should be dumped to.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  profile start [--user <USER_ID> current]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [--sampling INTERVAL | --streaming] <PROCESS> <FILE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start profiler on a process.  The given <PROCESS> argument");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("        may be either a process name or pid.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: When supplying a process name,");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specify user of process to profile; uses current user if not");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --sampling INTERVAL: use sample profiling with INTERVAL microseconds");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          between samples.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --streaming: stream the profiling output to the specified file.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  profile stop [--user <USER_ID> current] <PROCESS>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Stop profiler on a process.  The given <PROCESS> argument");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("        may be either a process name or pid.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: When supplying a process name,");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specify user of process to profile; uses current user if not");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  dumpheap [--user <USER_ID> current] [-n] [-g] <PROCESS> <FILE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Dump the heap of a process.  The given <PROCESS> argument may");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("        be either a process name or pid.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -n: dump native heap instead of managed heap");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -g: force GC before dumping the heap");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --user <USER_ID> | current: When supplying a process name,");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specify user of process to dump; uses current user if not specified.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  set-debug-app [-w] [--persistent] <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Set application <PACKAGE> to debug.  Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -w: wait for debugger when application starts");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --persistent: retain this value");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  clear-debug-app");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Clear the previously set-debug-app.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  set-watch-heap <PROCESS> <MEM-LIMIT>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start monitoring pss size of <PROCESS>, if it is at or");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      above <HEAP-LIMIT> then a heap dump is collected for the user to report.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  clear-watch-heap");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Clear the previously set-watch-heap.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  clear-exit-info [--user <USER_ID> | all | current] [package]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Clear the process exit-info for given package");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  bug-report [--progress | --telephony]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Request bug report generation; will launch a notification");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("        when done to select where it should be delivered. Options are:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("     --progress: will launch a notification right away to show its progress.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("     --telephony: will dump only telephony sections.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  force-stop [--user <USER_ID> | all | current] <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Completely stop the given application package.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  crash [--user <USER_ID>] <PACKAGE|PID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Induce a VM crash in the specified package or process");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  kill [--user <USER_ID> | all | current] <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Kill all background processes associated with the given application.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  kill-all");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Kill all processes that are safe to kill (cached, etc).");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  make-uid-idle [--user <USER_ID> | all | current] <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      If the given application\'s uid is in the background and waiting to");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      become idle (not allowing background services), do that now.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  monitor [--gdb <port>]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start monitoring for crashes or ANRs.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --gdb: start gdbserv on the given port at crash/ANR");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  watch-uids [--oom <uid>]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start watching for and reporting uid state changes.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --oom: specify a uid for which to report detailed change messages.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  hang [--allow-restart]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Hang the system.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --allow-restart: allow watchdog to perform normal system restart");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  restart");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Restart the user-space system.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  idle-maintenance");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Perform idle maintenance now.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  screen-compat [on|off] <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Control screen compatibility mode of <PACKAGE>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  package-importance <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Print current importance of <PACKAGE>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  to-uri [INTENT]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Print the given Intent specification as a URI.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  to-intent-uri [INTENT]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Print the given Intent specification as an intent: URI.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  to-app-uri [INTENT]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Print the given Intent specification as an android-app: URI.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  switch-user <USER_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Switch to put USER_ID in the foreground, starting");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      execution of that user if it is currently stopped.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  get-current-user");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Returns id of the current foreground user.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  start-user [-w] <USER_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Start USER_ID in background if it is currently stopped;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      use switch-user if you want to start the user in foreground.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -w: wait for start-user to complete and the user to be unlocked.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  unlock-user <USER_ID> [TOKEN_HEX]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Attempt to unlock the given user using the given authorization token.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  stop-user [-w] [-f] <USER_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Stop execution of USER_ID, not allowing it to run any");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      code until a later explicit start or switch to it.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -w: wait for stop-user to complete.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      -f: force stop even if there are related users that cannot be stopped.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  is-user-stopped <USER_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Returns whether <USER_ID> has been stopped or not.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  get-started-user-state <USER_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Gets the current state of the given started user.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  track-associations");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Enable association tracking.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  untrack-associations");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Disable and clear association tracking.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  get-uid-state <UID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Gets the process state of an app given its <UID>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  attach-agent <PROCESS> <FILE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Attach an agent to the specified <PROCESS>, which may be either a process name or a PID.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  get-config [--days N] [--device] [--proto] [--display <DISPLAY_ID>]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Retrieve the configuration and any recent configurations of the device.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --days: also return last N days of configurations that have been seen.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --device: also output global device configuration info.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --proto: return result as a proto; does not include --days info.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      --display: Specify for which display to run the command; if not ");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          specified then run for the default display.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  supports-multiwindow");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Returns true if the device supports multiwindow.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  supports-split-screen-multi-window");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Returns true if the device supports split screen multiwindow.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  suppress-resize-config-changes <true|false>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Suppresses configuration changes due to user resizing an activity/task.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  set-inactive [--user <USER_ID>] <PACKAGE> true|false");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Sets the inactive state of an app.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  get-inactive [--user <USER_ID>] <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Returns the inactive state of an app.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  set-standby-bucket [--user <USER_ID>] <PACKAGE> active|working_set|frequent|rare");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Puts an app in the standby bucket.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  get-standby-bucket [--user <USER_ID>] <PACKAGE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Returns the standby bucket of an app.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  send-trim-memory [--user <USER_ID>] <PROCESS>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("          [HIDDEN|RUNNING_MODERATE|BACKGROUND|RUNNING_LOW|MODERATE|RUNNING_CRITICAL|COMPLETE]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Send a memory trim event to a <PROCESS>.  May also supply a raw trim int level.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  display [COMMAND] [...]: sub-commands for operating on displays.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       move-stack <STACK_ID> <DISPLAY_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Move <STACK_ID> from its current display to <DISPLAY_ID>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  stack [COMMAND] [...]: sub-commands for operating on activity stacks.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       move-task <TASK_ID> <STACK_ID> [true|false]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Move <TASK_ID> from its current stack to the top (true) or");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           bottom (false) of <STACK_ID>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       resize-docked-stack <LEFT,TOP,RIGHT,BOTTOM> [<TASK_LEFT,TASK_TOP,TASK_RIGHT,TASK_BOTTOM>]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Change docked stack to <LEFT,TOP,RIGHT,BOTTOM>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           and supplying temporary different task bounds indicated by");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           <TASK_LEFT,TOP,RIGHT,BOTTOM>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       move-top-activity-to-pinned-stack: <STACK_ID> <LEFT,TOP,RIGHT,BOTTOM>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Moves the top activity from");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           <STACK_ID> to the pinned stack using <LEFT,TOP,RIGHT,BOTTOM> for the");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           bounds of the pinned stack.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       positiontask <TASK_ID> <STACK_ID> <POSITION>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Place <TASK_ID> in <STACK_ID> at <POSITION>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       list");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           List all of the activity stacks and their sizes.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       info <WINDOWING_MODE> <ACTIVITY_TYPE>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Display the information about activity stack in <WINDOWING_MODE> and <ACTIVITY_TYPE>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       remove <STACK_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Remove stack <STACK_ID>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  task [COMMAND] [...]: sub-commands for operating on activity tasks.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       lock <TASK_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Bring <TASK_ID> to the front and don\'t allow other tasks to run.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       lock stop");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           End the current task lock.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       resizeable <TASK_ID> [0|1|2|3]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Change resizeable mode of <TASK_ID> to one of the following:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           0: unresizeable");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           1: crop_windows");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           2: resizeable");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           3: resizeable_and_pipable");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("       resize <TASK_ID> <LEFT,TOP,RIGHT,BOTTOM>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Makes sure <TASK_ID> is in a stack with the specified bounds.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           Forces the task to be resizeable and creates a stack if no existing stack");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("           has the specified bounds.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  update-appinfo <USER_ID> <PACKAGE_NAME> [<PACKAGE_NAME>...]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Update the ApplicationInfo objects of the listed packages for <USER_ID>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      without restarting any processes.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  write");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("      Write all pending state to storage.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  compat [COMMAND] [...]: sub-commands for toggling app-compat changes.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("         enable|disable|reset <CHANGE_ID|CHANGE_NAME> <PACKAGE_NAME>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("            Toggles a change either by id or by name for <PACKAGE_NAME>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("            It kills <PACKAGE_NAME> (to allow the toggle to take effect).");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("         enable-all|disable-all <targetSdkVersion> <PACKAGE_NAME");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("            Toggles all changes that are gated by <targetSdkVersion>.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("         reset-all <PACKAGE_NAME>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("            Removes all existing overrides for all changes for ");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("            <PACKAGE_NAME> (back to default behaviour).");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("            It kills <PACKAGE_NAME> (to allow the toggle to take effect).");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        staticinvoke <android.content.Intent: void printIntentArgsHelp(java.io.PrintWriter,java.lang.String)>(r0, "");

     label2:
        return;
    }

    private android.graphics.Rect getBounds()
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, i1, i2, i3;
        java.lang.String r1, $r6, $r10, $r14, $r18, r19, r20, r21;
        android.graphics.Rect $r2;
        java.lang.StringBuilder $r3, $r7, $r11, $r15;
        java.io.PrintWriter r22, r24, r26, r28;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r19 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r19);

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        r20 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r20);

        r21 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r21);

        if i0 >= 0 goto label1;

        r22 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: bad left arg: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r22.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        return null;

     label1:
        if i1 >= 0 goto label2;

        r24 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: bad top arg: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r24.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        return null;

     label2:
        if i2 > 0 goto label3;

        r26 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: bad right arg: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r26.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        return null;

     label3:
        if i3 > 0 goto label4;

        r28 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: bad bottom arg: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r28.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return null;

     label4:
        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        return $r2;
    }

    private java.util.List getRecentConfigurations(int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        long l0, l1, $l8;
        int i2, i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, i14, i15;
        android.os.IBinder $r1;
        java.util.Set $r2;
        java.lang.Object $r3, $r5;
        android.content.res.Configuration $r4, $r9;
        java.lang.Integer $r6, $r7, $r10;
        java.util.List $r12, $r14, r18;
        android.os.RemoteException $r13;
        android.app.usage.IUsageStatsManager r15;
        android.content.pm.ParceledListSlice r16;
        android.util.ArrayMap r17;
        android.app.usage.ConfigurationStats r19;
        com.android.server.am.ActivityManagerShellCommand$4 r20;
        java.util.ArrayList r21;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        i14 := @parameter0: int;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("usagestats");

        r15 = staticinvoke <android.app.usage.IUsageStatsManager$Stub: android.app.usage.IUsageStatsManager asInterface(android.os.IBinder)>($r1);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i4 = i14 * 24;

        $i5 = $i4 * 60;

        $i6 = $i5 * 60;

        $i7 = $i6 * 1000;

        l1 = (long) $i7;

     label01:
        $l8 = l0 - l1;

        r16 = interfaceinvoke r15.<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>(4, $l8, l0, "com.android.shell");

     label02:
        if r16 != null goto label04;

     label03:
        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

     label04:
        r17 = new android.util.ArrayMap;

        specialinvoke r17.<android.util.ArrayMap: void <init>()>();

        r18 = virtualinvoke r16.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        i2 = interfaceinvoke r18.<java.util.List: int size()>();

     label05:
        i15 = 0;

     label06:
        if i15 >= i2 goto label13;

     label07:
        $r3 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i15);

        r19 = (android.app.usage.ConfigurationStats) $r3;

        $r4 = virtualinvoke r19.<android.app.usage.ConfigurationStats: android.content.res.Configuration getConfiguration()>();

        i3 = virtualinvoke r17.<android.util.ArrayMap: int indexOfKey(java.lang.Object)>($r4);

     label08:
        if i3 >= 0 goto label11;

     label09:
        $r9 = virtualinvoke r19.<android.app.usage.ConfigurationStats: android.content.res.Configuration getConfiguration()>();

        $i13 = virtualinvoke r19.<android.app.usage.ConfigurationStats: int getActivationCount()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        virtualinvoke r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

     label10:
        goto label12;

     label11:
        $r5 = virtualinvoke r17.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r6 = (java.lang.Integer) $r5;

        $i10 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i11 = virtualinvoke r19.<android.app.usage.ConfigurationStats: int getActivationCount()>();

        $i12 = $i10 + $i11;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        virtualinvoke r17.<android.util.ArrayMap: java.lang.Object setValueAt(int,java.lang.Object)>(i3, $r7);

     label12:
        i15 = i15 + 1;

        goto label06;

     label13:
        r20 = new com.android.server.am.ActivityManagerShellCommand$4;

        specialinvoke r20.<com.android.server.am.ActivityManagerShellCommand$4: void <init>(com.android.server.am.ActivityManagerShellCommand,android.util.ArrayMap)>(r0, r17);

        r21 = new java.util.ArrayList;

        $i9 = virtualinvoke r17.<android.util.ArrayMap: int size()>();

        specialinvoke r21.<java.util.ArrayList: void <init>(int)>($i9);

        $r2 = virtualinvoke r17.<android.util.ArrayMap: java.util.Set keySet()>();

        virtualinvoke r21.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r2);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r21, r20);

     label14:
        return r21;

     label15:
        $r13 := @caughtexception;

        $r14 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r14;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch android.os.RemoteException from label04 to label05 with label15;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch android.os.RemoteException from label09 to label10 with label15;
        catch android.os.RemoteException from label11 to label12 with label15;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    private android.content.res.Resources getResources(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        android.content.res.Configuration r1;
        android.app.IActivityManager $r2;
        android.util.DisplayMetrics $r3;
        android.content.res.Resources $r4;
        android.content.res.AssetManager $r5;
        java.io.PrintWriter r6;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r6 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        r1 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>();

        if r1 != null goto label1;

        virtualinvoke r6.<java.io.PrintWriter: void println(java.lang.String)>("Error: Activity manager has no configuration");

        return null;

     label1:
        $r3 = new android.util.DisplayMetrics;

        specialinvoke $r3.<android.util.DisplayMetrics: void <init>()>();

        virtualinvoke $r3.<android.util.DisplayMetrics: void setToDefaults()>();

        $r4 = new android.content.res.Resources;

        $r5 = staticinvoke <android.content.res.AssetManager: android.content.res.AssetManager getSystem()>();

        specialinvoke $r4.<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>($r5, $r3, r1);

        return $r4;
    }

    static int lambda$writeDeviceConfig$0(android.content.pm.FeatureInfo, android.content.pm.FeatureInfo)
    {
        android.content.pm.FeatureInfo r0, r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0;

        r0 := @parameter0: android.content.pm.FeatureInfo;

        r1 := @parameter1: android.content.pm.FeatureInfo;

        $r3 = r0.<android.content.pm.FeatureInfo: java.lang.String name>;

        $r2 = r1.<android.content.pm.FeatureInfo: java.lang.String name>;

        if $r3 != $r2 goto label1;

        return 0;

     label1:
        $r4 = r0.<android.content.pm.FeatureInfo: java.lang.String name>;

        if $r4 != null goto label2;

        return -1;

     label2:
        $r5 = r1.<android.content.pm.FeatureInfo: java.lang.String name>;

        if $r5 != null goto label3;

        return 1;

     label3:
        $r7 = r0.<android.content.pm.FeatureInfo: java.lang.String name>;

        $r6 = r1.<android.content.pm.FeatureInfo: java.lang.String name>;

        $i0 = virtualinvoke $r7.<java.lang.String: int compareTo(java.lang.String)>($r6);

        return $i0;
    }

    private android.content.Intent makeIntent(int) throws java.net.URISyntaxException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;
        com.android.server.am.ActivityManagerShellCommand$1 $r1;
        android.content.Intent $r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter0: int;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mStartFlags> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mWaitOption> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStopOption> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mRepeat> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mProfileFile> = null;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mSamplingInterval> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mAutoStop> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStreaming> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId> = i0;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mDisplayId> = -1;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mWindowingMode> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mActivityType> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mTaskId> = -1;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mIsTaskOverlay> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mIsLockTask> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: android.app.BroadcastOptions mBroadcastOptions> = null;

        $r1 = new com.android.server.am.ActivityManagerShellCommand$1;

        specialinvoke $r1.<com.android.server.am.ActivityManagerShellCommand$1: void <init>(com.android.server.am.ActivityManagerShellCommand)>(r0);

        $r2 = staticinvoke <android.content.Intent: android.content.Intent parseCommandArgs(android.os.ShellCommand,android.content.Intent$CommandOptionHandler)>(r0, $r1);

        return $r2;
    }

    static void removeWallOption()
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("dalvik.vm.extra-opts");

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("-Xprofile:wallclock");

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-Xprofile:wallclock", "");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("dalvik.vm.extra-opts", $r2);

     label1:
        return;
    }

    private int runCompat(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.compat.PlatformCompat r2;
        boolean z0, $z1, $z4, $z5, $z6, $z7, $z8, z9;
        android.os.IBinder $r4;
        byte $b0, b7;
        java.lang.Long $r5, $r20;
        java.lang.String $r11, $r19, $r26, $r34, $r38, $r44, $r48, $r52, $r57, $r62, $r63, $r67, r68, r69, r71, r74;
        int $i1, i2, i6, i8, i9;
        java.lang.Throwable $r64, $r65, $r66;
        long l4, l5;
        java.lang.StringBuilder r92, r93, r96, r97, r98, r99, r100, r103, r104, r107;
        android.util.ArraySet r94, r95;
        android.compat.Compatibility$ChangeConfig r101, r105;
        com.android.internal.compat.CompatibilityChangeConfig r102, r106;
        java.lang.SecurityException r108;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("platform_compat");

        r2 = (com.android.server.compat.PlatformCompat) $r4;

        r68 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        z9 = 0;

        i2 = -1;

        $z1 = virtualinvoke r68.<java.lang.String: boolean endsWith(java.lang.String)>("-all");

        if $z1 == 0 goto label04;

        $i1 = virtualinvoke r68.<java.lang.String: int lastIndexOf(java.lang.String)>("-all");

        r69 = virtualinvoke r68.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r68 = r69;

        z9 = 1;

        l4 = -1L;

        $z8 = virtualinvoke r69.<java.lang.String: boolean equals(java.lang.Object)>("reset");

        if $z8 != 0 goto label09;

     label01:
        $r63 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r63);

     label02:
        r68 = r69;

        z9 = 1;

        l4 = -1L;

        goto label09;

     label03:
        $r65 := @caughtexception;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Invalid targetSdkVersion!");

        return -1;

     label04:
        r71 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

     label05:
        l5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r71);

     label06:
        goto label08;

     label07:
        $r64 := @caughtexception;

        l5 = virtualinvoke r2.<com.android.server.compat.PlatformCompat: long lookupChangeId(java.lang.String)>(r71);

     label08:
        l4 = l5;

        $b0 = l5 cmp -1L;

        if $b0 != 0 goto label09;

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown or invalid change: \'");

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r62 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r62);

        return -1;

     label09:
        r74 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        if z9 != 0 goto label10;

        $z7 = virtualinvoke r2.<com.android.server.compat.PlatformCompat: boolean isKnownChangeId(long)>(l4);

        if $z7 != 0 goto label10;

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning! Change ");

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not known yet. Enabling/disabling it could have no effect.");

        $r57 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r57);

     label10:
        r94 = new android.util.ArraySet;

        specialinvoke r94.<android.util.ArraySet: void <init>()>();

        r95 = new android.util.ArraySet;

        specialinvoke r95.<android.util.ArraySet: void <init>()>();

     label11:
        i6 = virtualinvoke r68.<java.lang.String: int hashCode()>();

     label12:
        if i6 == -1298848381 goto label18;

        if i6 == 108404047 goto label16;

        if i6 == 1671308008 goto label14;

     label13:
        goto label20;

     label14:
        $z6 = virtualinvoke r68.<java.lang.String: boolean equals(java.lang.Object)>("disable");

        if $z6 == 0 goto label13;

     label15:
        b7 = 1;

        goto label21;

     label16:
        $z5 = virtualinvoke r68.<java.lang.String: boolean equals(java.lang.Object)>("reset");

        if $z5 == 0 goto label13;

     label17:
        b7 = 2;

        goto label21;

     label18:
        z0 = virtualinvoke r68.<java.lang.String: boolean equals(java.lang.Object)>("enable");

     label19:
        if z0 == 0 goto label13;

        b7 = 0;

        goto label21;

     label20:
        b7 = -1;

     label21:
        if b7 == 0 goto label40;

        if b7 == 1 goto label31;

        if b7 == 2 goto label24;

     label22:
        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid toggle value: \'");

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r52 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r52);

     label23:
        goto label50;

     label24:
        if z9 == 0 goto label27;

     label25:
        virtualinvoke r2.<com.android.server.compat.PlatformCompat: void clearOverrides(java.lang.String)>(r74);

        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reset all changes for ");

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to default value.");

        $r48 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r48);

     label26:
        return 0;

     label27:
        $z4 = virtualinvoke r2.<com.android.server.compat.PlatformCompat: boolean clearOverride(long,java.lang.String)>(l4, r74);

        if $z4 == 0 goto label29;

        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reset change ");

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to default value.");

        $r44 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r44);

     label28:
        goto label30;

     label29:
        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No override exists for changeId ");

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r38 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r38);

     label30:
        return 0;

     label31:
        if z9 == 0 goto label38;

     label32:
        i8 = virtualinvoke r2.<com.android.server.compat.PlatformCompat: int disableTargetSdkChanges(java.lang.String,int)>(r74, i2);

     label33:
        if i8 != 0 goto label36;

     label34:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("No changes were disabled.");

     label35:
        return -1;

     label36:
        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disabled ");

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changes gated by targetSdkVersion ");

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r34 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r34);

     label37:
        goto label39;

     label38:
        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        virtualinvoke r95.<android.util.ArraySet: boolean add(java.lang.Object)>($r20);

        r102 = new com.android.internal.compat.CompatibilityChangeConfig;

        r101 = new android.compat.Compatibility$ChangeConfig;

        specialinvoke r101.<android.compat.Compatibility$ChangeConfig: void <init>(java.util.Set,java.util.Set)>(r94, r95);

        specialinvoke r102.<com.android.internal.compat.CompatibilityChangeConfig: void <init>(android.compat.Compatibility$ChangeConfig)>(r101);

        virtualinvoke r2.<com.android.server.compat.PlatformCompat: void setOverrides(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>(r102, r74);

        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disabled change ");

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r26 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r26);

     label39:
        return 0;

     label40:
        if z9 == 0 goto label47;

     label41:
        i9 = virtualinvoke r2.<com.android.server.compat.PlatformCompat: int enableTargetSdkChanges(java.lang.String,int)>(r74, i2);

     label42:
        if i9 != 0 goto label45;

     label43:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("No changes were enabled.");

     label44:
        return -1;

     label45:
        r104 = new java.lang.StringBuilder;

        specialinvoke r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabled ");

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changes gated by targetSdkVersion ");

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

     label46:
        goto label48;

     label47:
        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        virtualinvoke r94.<android.util.ArraySet: boolean add(java.lang.Object)>($r5);

        r106 = new com.android.internal.compat.CompatibilityChangeConfig;

        r105 = new android.compat.Compatibility$ChangeConfig;

        specialinvoke r105.<android.compat.Compatibility$ChangeConfig: void <init>(java.util.Set,java.util.Set)>(r94, r95);

        specialinvoke r106.<com.android.internal.compat.CompatibilityChangeConfig: void <init>(android.compat.Compatibility$ChangeConfig)>(r105);

        virtualinvoke r2.<com.android.server.compat.PlatformCompat: void setOverrides(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>(r106, r74);

        r107 = new java.lang.StringBuilder;

        specialinvoke r107.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabled change ");

        virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = virtualinvoke r107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

     label48:
        return 0;

     label49:
        $r66 := @caughtexception;

        r108 = (java.lang.SecurityException) $r66;

        $r67 = virtualinvoke r108.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

     label50:
        return -1;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label05 to label06 with label07;
        catch java.lang.SecurityException from label11 to label12 with label49;
        catch java.lang.SecurityException from label14 to label15 with label49;
        catch java.lang.SecurityException from label16 to label17 with label49;
        catch java.lang.SecurityException from label18 to label19 with label49;
        catch java.lang.SecurityException from label22 to label23 with label49;
        catch java.lang.SecurityException from label25 to label26 with label49;
        catch java.lang.SecurityException from label27 to label28 with label49;
        catch java.lang.SecurityException from label29 to label30 with label49;
        catch java.lang.SecurityException from label32 to label33 with label49;
        catch java.lang.SecurityException from label34 to label35 with label49;
        catch java.lang.SecurityException from label36 to label37 with label49;
        catch java.lang.SecurityException from label38 to label39 with label49;
        catch java.lang.SecurityException from label41 to label42 with label49;
        catch java.lang.SecurityException from label43 to label44 with label49;
        catch java.lang.SecurityException from label45 to label46 with label49;
        catch java.lang.SecurityException from label47 to label48 with label49;
    }

    private int runProfile(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, r32;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r12, $r15, $r23, $r24, $r28, $r29, $r30, r33, r34, r36, r38, r39;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, $z14;
        java.lang.StringBuilder $r7, $r20, $r25, r42, r45;
        java.lang.IllegalArgumentException $r11;
        android.app.ProfilerInfo $r19, r41;
        int $i0, $i1, i2;
        java.lang.Throwable $r31;
        android.os.ParcelFileDescriptor r40;
        android.app.IActivityManager $r44;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r32 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        z12 = 0;

        z13 = 0;

        i2 = -2;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mSamplingInterval> = 0;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStreaming> = 0;

        r33 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r3 = "start";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z1 == 0 goto label07;

        z12 = 1;

        z13 = 0;

     label01:
        r34 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r34 == null goto label06;

        $z8 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z8 == 0 goto label02;

        $r30 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r30);

        goto label01;

     label02:
        $z9 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("--wall");

        if $z9 == 0 goto label03;

        z13 = 1;

        goto label01;

     label03:
        $z10 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("--streaming");

        if $z10 == 0 goto label04;

        r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStreaming> = 1;

        goto label01;

     label04:
        $z11 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("--sampling");

        if $z11 == 0 goto label05;

        $r29 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r29);

        r0.<com.android.server.am.ActivityManagerShellCommand: int mSamplingInterval> = $i1;

        goto label01;

     label05:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        return -1;

     label06:
        r33 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        goto label13;

     label07:
        $r4 = "stop";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z2 == 0 goto label11;

     label08:
        r36 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r36 == null goto label10;

        $z7 = virtualinvoke r36.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z7 == 0 goto label09;

        $r24 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r24);

        goto label08;

     label09:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        return -1;

     label10:
        r33 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        goto label13;

     label11:
        r38 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r5 = "start";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r38);

        if $z3 == 0 goto label12;

        z12 = 1;

        goto label13;

     label12:
        $r6 = "stop";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r38);

        if $z4 == 0 goto label28;

     label13:
        if i2 != -1 goto label14;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: Can\'t profile with user \'all\'");

        return -1;

     label14:
        if z12 == 0 goto label16;

        r39 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r40 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.os.ParcelFileDescriptor openFileForSystem(java.lang.String,java.lang.String)>(r39, "w");

        if r40 != null goto label15;

        return -1;

     label15:
        $r19 = new android.app.ProfilerInfo;

        $i0 = r0.<com.android.server.am.ActivityManagerShellCommand: int mSamplingInterval>;

        $z6 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStreaming>;

        specialinvoke $r19.<android.app.ProfilerInfo: void <init>(java.lang.String,android.os.ParcelFileDescriptor,int,boolean,boolean,java.lang.String,boolean)>(r39, r40, $i0, 0, $z6, null, 0);

        r41 = $r19;

        goto label17;

     label16:
        r41 = null;

     label17:
        if z13 == 0 goto label24;

     label18:
        r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("dalvik.vm.extra-opts");

     label19:
        if r2 == null goto label21;

     label20:
        $z5 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("-Xprofile:wallclock");

        if $z5 != 0 goto label24;

     label21:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -Xprofile:wallclock");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

     label22:
        goto label24;

     label23:
        $r31 := @caughtexception;

        goto label27;

     label24:
        $r44 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $z14 = interfaceinvoke $r44.<android.app.IActivityManager: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>(r33, i2, z12, r41, 0);

        if $z14 != 0 goto label26;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROFILE FAILED on process ");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r15 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

     label25:
        return -1;

     label26:
        return 0;

     label27:
        throw $r31;

     label28:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile command ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not valid");

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    private boolean switchUserAndWaitForComplete(int) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, $i1;
        boolean z0, z1;
        android.app.IActivityManager $r1, $r4, $r7;
        java.util.concurrent.CountDownLatch $r2;
        com.android.server.am.ActivityManagerShellCommand$3 $r3;
        java.lang.Class $r5;
        java.lang.String $r6;
        java.util.concurrent.TimeUnit $r8;
        java.lang.Throwable $r9;
        java.io.PrintWriter $r10;
        android.content.pm.UserInfo r11;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        r11 = interfaceinvoke $r1.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        if r11 == null goto label1;

        $i1 = r11.<android.content.pm.UserInfo: int id>;

        if i0 != $i1 goto label1;

        return 1;

     label1:
        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r3 = new com.android.server.am.ActivityManagerShellCommand$3;

        specialinvoke $r3.<com.android.server.am.ActivityManagerShellCommand$3: void <init>(com.android.server.am.ActivityManagerShellCommand,int,java.util.concurrent.CountDownLatch)>(r0, i0, $r2);

        $r5 = class "Lcom/android/server/am/ActivityManagerShellCommand;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r4.<android.app.IActivityManager: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>($r3, $r6);

        $r7 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        z0 = interfaceinvoke $r7.<android.app.IActivityManager: boolean switchUser(int)>(i0);

        if z0 != 0 goto label2;

        return 0;

     label2:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z1 = virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(120000L, $r8);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r10.<java.io.PrintWriter: void println(java.lang.String)>("Error: Thread interrupted unexpectedly.");

        z1 = z0;

     label5:
        return z1;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    private void writeDeviceConfig(android.util.proto.ProtoOutputStream, long, java.io.PrintWriter, android.content.res.Configuration, android.util.DisplayMetrics)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        long l0, $l6, $l8, l16;
        java.io.PrintWriter r1;
        java.util.List r2;
        com.android.server.am.ActivityManagerService $r4, $r8;
        android.content.Context $r5, $r9;
        java.lang.Object $r6, $r19, $r22;
        android.app.IActivityTaskManager $r7;
        int $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, i18, $i19, i20, i21;
        com.android.server.am.'-$$Lambda$jVSWDZTj55yxOQmZSLdNsbUkMb4' $r10;
        java.util.Comparator $r11, r47;
        com.android.server.am.'-$$Lambda$ActivityManagerShellCommand$yu115wjRB5hvRTjVM9oePAy5cM0' $r12;
        android.content.pm.FeatureInfo $r13, $r15, $r17;
        java.lang.String $r14, $r16, $r18, $r21, $r24, $r25, $r26, $r27;
        android.content.pm.SharedLibraryInfo $r20, $r23;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Runtime $r28, $r29;
        android.os.RemoteException $r30;
        java.lang.RuntimeException $r31;
        android.util.proto.ProtoOutputStream r32;
        android.content.res.Configuration r33;
        android.util.DisplayMetrics r34;
        android.app.KeyguardManager r36;
        android.content.pm.ConfigurationInfo r37;
        java.util.Set r38;
        java.lang.String[] $r39, r41;
        java.lang.Object[] $r40;
        android.content.pm.PackageManager r42;
        android.content.pm.FeatureInfo[] r43;
        com.android.internal.util.MemInfoReader r45;
        java.util.function.Function r46;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r32 := @parameter0: android.util.proto.ProtoOutputStream;

        l0 := @parameter1: long;

        r1 := @parameter2: java.io.PrintWriter;

        r33 := @parameter3: android.content.res.Configuration;

        r34 := @parameter4: android.util.DisplayMetrics;

        l16 = -1L;

        if r32 == null goto label01;

        l16 = virtualinvoke r32.<android.util.proto.ProtoOutputStream: long start(long)>(l0);

        $i13 = r34.<android.util.DisplayMetrics: int widthPixels>;

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,int)>(1155346202625L, $i13);

        $i14 = r34.<android.util.DisplayMetrics: int heightPixels>;

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,int)>(1155346202626L, $i14);

        $i15 = <android.util.DisplayMetrics: int DENSITY_DEVICE_STABLE>;

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,int)>(1155346202627L, $i15);

     label01:
        if r1 == null goto label02;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("stable-width-px: ");

        $i10 = r34.<android.util.DisplayMetrics: int widthPixels>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("stable-height-px: ");

        $i11 = r34.<android.util.DisplayMetrics: int heightPixels>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("stable-density-dpi: ");

        $i12 = <android.util.DisplayMetrics: int DENSITY_DEVICE_STABLE>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i12);

     label02:
        r45 = new com.android.internal.util.MemInfoReader;

        specialinvoke r45.<com.android.internal.util.MemInfoReader: void <init>()>();

        virtualinvoke r45.<com.android.internal.util.MemInfoReader: void readMemInfo()>();

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r5 = $r4.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/KeyguardManager;");

        r36 = (android.app.KeyguardManager) $r6;

        if r32 == null goto label03;

        $l8 = virtualinvoke r45.<com.android.internal.util.MemInfoReader: long getTotalSize()>();

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,long)>(1116691496964L, $l8);

        $z2 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z2);

        $r29 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i9 = virtualinvoke $r29.<java.lang.Runtime: int availableProcessors()>();

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,int)>(1155346202630L, $i9);

        $z3 = virtualinvoke r36.<android.app.KeyguardManager: boolean isDeviceSecure()>();

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366151L, $z3);

     label03:
        if r1 == null goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("total-ram: ");

        $l6 = virtualinvoke r45.<com.android.internal.util.MemInfoReader: long getTotalSize()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("low-ram: ");

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("max-cores: ");

        $r28 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i7 = virtualinvoke $r28.<java.lang.Runtime: int availableProcessors()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("has-secure-screen-lock: ");

        $z1 = virtualinvoke r36.<android.app.KeyguardManager: boolean isDeviceSecure()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z1);

     label04:
        $r7 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        r37 = interfaceinvoke $r7.<android.app.IActivityTaskManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>();

     label05:
        $i1 = r37.<android.content.pm.ConfigurationInfo: int reqGlEsVersion>;

        if $i1 == 0 goto label07;

        if r32 == null goto label06;

        $i5 = r37.<android.content.pm.ConfigurationInfo: int reqGlEsVersion>;

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,int)>(1155346202632L, $i5);

     label06:
        if r1 == null goto label07;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("opengl-version: 0x");

        $i4 = r37.<android.content.pm.ConfigurationInfo: int reqGlEsVersion>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

     label07:
        r38 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.util.Set getGlExtensionsFromDriver()>();

        $i17 = interfaceinvoke r38.<java.util.Set: int size()>();

        $r39 = newarray (java.lang.String)[$i17];

        $r40 = interfaceinvoke r38.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r39);

        r41 = (java.lang.String[]) $r40;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r41);

        i18 = 0;

     label08:
        $i19 = lengthof r41;

        if i18 >= $i19 goto label11;

        if r32 == null goto label09;

        $r26 = r41[i18];

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(2237677961225L, $r26);

     label09:
        if r1 == null goto label10;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("opengl-extensions: ");

        $r25 = r41[i18];

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r25);

     label10:
        i18 = i18 + 1;

        goto label08;

     label11:
        $r8 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r9 = $r8.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        r42 = virtualinvoke $r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke r42.<android.content.pm.PackageManager: java.util.List getSharedLibraries(int)>(0);

        $r10 = <com.android.server.am._$$Lambda$jVSWDZTj55yxOQmZSLdNsbUkMb4: com.android.server.am.'-$$Lambda$jVSWDZTj55yxOQmZSLdNsbUkMb4' INSTANCE>;

        r46 = (java.util.function.Function) $r10;

        $r11 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>(r46);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, $r11);

        i20 = 0;

     label12:
        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if i20 >= $i2 goto label15;

        if r32 == null goto label13;

        $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i20);

        $r23 = (android.content.pm.SharedLibraryInfo) $r22;

        $r24 = virtualinvoke $r23.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(2237677961226L, $r24);

        goto label13;

     label13:
        if r1 == null goto label14;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("shared-libraries: ");

        $r19 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i20);

        $r20 = (android.content.pm.SharedLibraryInfo) $r19;

        $r21 = virtualinvoke $r20.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

     label14:
        i20 = i20 + 1;

        goto label12;

     label15:
        r43 = virtualinvoke r42.<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>();

        $r12 = <com.android.server.am._$$Lambda$ActivityManagerShellCommand$yu115wjRB5hvRTjVM9oePAy5cM0: com.android.server.am.'-$$Lambda$ActivityManagerShellCommand$yu115wjRB5hvRTjVM9oePAy5cM0' INSTANCE>;

        r47 = (java.util.Comparator) $r12;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r43, r47);

        i21 = 0;

     label16:
        $i3 = lengthof r43;

        if i21 >= $i3 goto label19;

        $r13 = r43[i21];

        $r14 = $r13.<android.content.pm.FeatureInfo: java.lang.String name>;

        if $r14 == null goto label18;

        if r32 == null goto label17;

        $r17 = r43[i21];

        $r18 = $r17.<android.content.pm.FeatureInfo: java.lang.String name>;

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(2237677961227L, $r18);

     label17:
        if r1 == null goto label18;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("features: ");

        $r15 = r43[i21];

        $r16 = $r15.<android.content.pm.FeatureInfo: java.lang.String name>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

     label18:
        i21 = i21 + 1;

        goto label16;

     label19:
        if r32 == null goto label20;

        virtualinvoke r32.<android.util.proto.ProtoOutputStream: void end(long)>(l16);

     label20:
        return;

     label21:
        $r30 := @caughtexception;

        $r31 = virtualinvoke $r30.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r31;

        catch android.os.RemoteException from label04 to label05 with label21;
    }

    java.util.Set getGlExtensionsFromDriver()
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        javax.microedition.khronos.egl.EGL10 r2;
        javax.microedition.khronos.egl.EGLDisplay r3;
        int[] r4, r6, r7, $r11, $r15;
        javax.microedition.khronos.egl.EGLConfig[] r5;
        java.util.HashSet $r8;
        javax.microedition.khronos.egl.EGL $r9;
        java.lang.Object $r10;
        boolean $z1, $z2;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        javax.microedition.khronos.egl.EGLConfig $r12, $r13, $r14, $r16, $r17;
        java.io.PrintWriter $r18, $r19, $r20;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r9 = staticinvoke <javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()>();

        r2 = (javax.microedition.khronos.egl.EGL10) $r9;

        if r2 != null goto label1;

        $r20 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r20.<java.io.PrintWriter: void println(java.lang.String)>("Warning: couldn\'t get EGL");

        return $r8;

     label1:
        $r10 = <javax.microedition.khronos.egl.EGL10: java.lang.Object EGL_DEFAULT_DISPLAY>;

        r3 = interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>($r10);

        $r11 = newarray (int)[2];

        interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>(r3, $r11);

        r4 = newarray (int)[1];

        $z1 = interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>(r3, null, 0, r4);

        if $z1 != 0 goto label2;

        $r19 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r19.<java.io.PrintWriter: void println(java.lang.String)>("Warning: couldn\'t get EGL config count");

        return $r8;

     label2:
        $i2 = r4[0];

        r5 = newarray (javax.microedition.khronos.egl.EGLConfig)[$i2];

        $i3 = r4[0];

        $z2 = interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>(r3, r5, $i3, r4);

        if $z2 != 0 goto label3;

        $r18 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r18.<java.io.PrintWriter: void println(java.lang.String)>("Warning: couldn\'t get EGL configs");

        return $r8;

     label3:
        r6 = newarray (int)[5];

        r6[0] = 12375;

        r6[1] = 1;

        r6[2] = 12374;

        r6[3] = 1;

        r6[4] = 12344;

        r7 = newarray (int)[1];

        i12 = 0;

     label4:
        $i4 = r4[0];

        if i12 >= $i4 goto label9;

        $r12 = r5[i12];

        interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>(r3, $r12, 12327, r7);

        $i5 = r7[0];

        if $i5 != 12368 goto label5;

        goto label8;

     label5:
        $r13 = r5[i12];

        interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>(r3, $r13, 12339, r7);

        $i6 = r7[0];

        $i7 = $i6 & 1;

        if $i7 != 0 goto label6;

        goto label8;

     label6:
        $r14 = r5[i12];

        interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>(r3, $r14, 12352, r7);

        $i8 = r7[0];

        $i9 = $i8 & 1;

        if $i9 == 0 goto label7;

        $r17 = r5[i12];

        staticinvoke <com.android.server.am.ActivityManagerShellCommand: void addExtensionsForConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[],int[],java.util.Set)>(r2, r3, $r17, r6, null, $r8);

        goto label7;

     label7:
        $i10 = r7[0];

        $i11 = $i10 & 4;

        if $i11 == 0 goto label8;

        $r16 = r5[i12];

        $r15 = newarray (int)[3];

        $r15[0] = 12440;

        $r15[1] = 2;

        $r15[2] = 12344;

        staticinvoke <com.android.server.am.ActivityManagerShellCommand: void addExtensionsForConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[],int[],java.util.Set)>(r2, r3, $r16, r6, $r15, $r8);

        goto label8;

     label8:
        i12 = i12 + 1;

        goto label4;

     label9:
        interfaceinvoke r2.<javax.microedition.khronos.egl.EGL10: boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)>(r3);

        return $r8;
    }

    int getStepSize(int, int, int, boolean)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, i1, $i2, $i3, i4, i6, i7, i8, i10, i11;
        boolean z0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i6 = 0;

        i7 = i4;

        if z0 == 0 goto label1;

        i6 = 0;

        i7 = i4;

        if i0 >= i4 goto label1;

        i8 = i4 - i1;

        i6 = i1;

        i7 = i8;

        if i0 <= i8 goto label1;

        $i3 = i0 - i8;

        i6 = i1 - $i3;

        i7 = i8;

     label1:
        i10 = i6;

        if z0 != 0 goto label2;

        i10 = i6;

        if i0 <= i7 goto label2;

        i11 = i7 + i1;

        i10 = i1;

        if i0 >= i11 goto label2;

        $i2 = i11 - i0;

        i10 = i1 + $i2;

     label2:
        return i10;
    }

    int getUidState(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0, $i1;
        com.android.server.am.ActivityManagerService $r2, $r3;
        java.lang.String $r4, $r5;
        java.lang.Object[] $r6;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r2.<com.android.server.am.ActivityManagerService: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "getUidState()");

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        i0 = virtualinvoke $r3.<com.android.server.am.ActivityManagerService: int getUidState(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" (");

        $r5 = staticinvoke <android.util.DebugUtils: java.lang.String valueToString(java.lang.Class,java.lang.String,int)>(class "Landroid/app/ActivityManager;", "PROCESS_STATE_", i0);

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>($r5, $r6);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(")");

        return 0;
    }

    int moveTask(int, android.graphics.Rect, android.graphics.Rect, int, int, boolean, boolean, int) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, i40, i41, i42, i43, i44, i45;
        android.graphics.Rect r1, r2;
        boolean z0, z1;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Rect;

        i1 := @parameter3: int;

        i39 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        i2 := @parameter7: int;

        i40 = i39;

        if z0 == 0 goto label06;

     label01:
        i41 = i39;

        if i39 <= 0 goto label11;

        if z1 == 0 goto label02;

        $i38 = r1.<android.graphics.Rect: int right>;

        $i37 = r2.<android.graphics.Rect: int right>;

        if $i38 < $i37 goto label03;

     label02:
        i41 = i39;

        if z1 != 0 goto label11;

        i41 = i39;

        $i22 = r1.<android.graphics.Rect: int bottom>;

        $i21 = r2.<android.graphics.Rect: int bottom>;

        if $i22 >= $i21 goto label11;

     label03:
        if z1 == 0 goto label04;

        $i31 = r2.<android.graphics.Rect: int right>;

        $i30 = r1.<android.graphics.Rect: int right>;

        $i32 = $i31 - $i30;

        i42 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i32);

        i39 = i39 - i42;

        $i33 = r1.<android.graphics.Rect: int right>;

        $i34 = $i33 + i42;

        r1.<android.graphics.Rect: int right> = $i34;

        $i35 = r1.<android.graphics.Rect: int left>;

        $i36 = $i35 + i42;

        r1.<android.graphics.Rect: int left> = $i36;

        goto label05;

     label04:
        $i24 = r2.<android.graphics.Rect: int bottom>;

        $i23 = r1.<android.graphics.Rect: int bottom>;

        $i25 = $i24 - $i23;

        i43 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i25);

        i39 = i39 - i43;

        $i26 = r1.<android.graphics.Rect: int top>;

        $i27 = $i26 + i43;

        r1.<android.graphics.Rect: int top> = $i27;

        $i28 = r1.<android.graphics.Rect: int bottom>;

        $i29 = $i28 + i43;

        r1.<android.graphics.Rect: int bottom> = $i29;

     label05:
        virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: void taskResize(int,android.graphics.Rect,int,boolean)>(i0, r1, i2, 0);

        goto label01;

     label06:
        i41 = i40;

        if i40 >= 0 goto label11;

        if z1 == 0 goto label07;

        $i20 = r1.<android.graphics.Rect: int left>;

        $i19 = r2.<android.graphics.Rect: int left>;

        if $i20 > $i19 goto label08;

     label07:
        i41 = i40;

        if z1 != 0 goto label11;

        i41 = i40;

        $i4 = r1.<android.graphics.Rect: int top>;

        $i3 = r2.<android.graphics.Rect: int top>;

        if $i4 <= $i3 goto label11;

     label08:
        if z1 == 0 goto label09;

        $i13 = r1.<android.graphics.Rect: int left>;

        $i12 = r2.<android.graphics.Rect: int left>;

        $i14 = $i13 - $i12;

        i44 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i14);

        i40 = i40 - i44;

        $i15 = r1.<android.graphics.Rect: int right>;

        $i16 = $i15 - i44;

        r1.<android.graphics.Rect: int right> = $i16;

        $i17 = r1.<android.graphics.Rect: int left>;

        $i18 = $i17 - i44;

        r1.<android.graphics.Rect: int left> = $i18;

        goto label10;

     label09:
        $i6 = r1.<android.graphics.Rect: int top>;

        $i5 = r2.<android.graphics.Rect: int top>;

        $i7 = $i6 - $i5;

        i45 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i7);

        i40 = i40 - i45;

        $i8 = r1.<android.graphics.Rect: int top>;

        $i9 = $i8 - i45;

        r1.<android.graphics.Rect: int top> = $i9;

        $i10 = r1.<android.graphics.Rect: int bottom>;

        $i11 = $i10 - i45;

        r1.<android.graphics.Rect: int bottom> = $i11;

     label10:
        virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: void taskResize(int,android.graphics.Rect,int,boolean)>(i0, r1, i2, 0);

        goto label06;

     label11:
        return i41;
    }

    public int onCommand(java.lang.String)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, i61, i62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, r9;
        byte b60;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r9 := @parameter0: java.lang.String;

        if r9 != null goto label001;

        $i59 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int handleDefaultCommands(java.lang.String)>(r9);

        return $i59;

     label001:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

     label002:
        $i0 = virtualinvoke r9.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -2121667104: goto label134;
            case -1969672196: goto label132;
            case -1719979774: goto label130;
            case -1710503333: goto label128;
            case -1667670943: goto label126;
            case -1619282346: goto label124;
            case -1618876223: goto label122;
            case -1354812542: goto label120;
            case -1324660647: goto label118;
            case -1303445945: goto label116;
            case -1131287478: goto label114;
            case -1002578147: goto label112;
            case -965273485: goto label110;
            case -930080590: goto label108;
            case -907667276: goto label106;
            case -892396682: goto label104;
            case -870018278: goto label102;
            case -812219210: goto label100;
            case -747637291: goto label098;
            case -699625063: goto label096;
            case -606123342: goto label094;
            case -548621938: goto label092;
            case -387147436: goto label090;
            case -354890749: goto label088;
            case -309425751: goto label086;
            case -170987146: goto label084;
            case -146027423: goto label082;
            case -138040195: goto label080;
            case -100644880: goto label078;
            case -27715536: goto label076;
            case 3194994: goto label074;
            case 3291998: goto label072;
            case 3552645: goto label070;
            case 88586660: goto label068;
            case 94921639: goto label066;
            case 109757064: goto label064;
            case 109757538: goto label062;
            case 113399775: goto label060;
            case 185053203: goto label058;
            case 237240942: goto label056;
            case 549617690: goto label054;
            case 622433197: goto label052;
            case 667014829: goto label050;
            case 680834441: goto label048;
            case 723112852: goto label046;
            case 764545184: goto label044;
            case 808179021: goto label042;
            case 810242677: goto label040;
            case 817137578: goto label038;
            case 822490030: goto label036;
            case 900455412: goto label034;
            case 1024703869: goto label032;
            case 1078591527: goto label030;
            case 1097506319: goto label028;
            case 1129261387: goto label026;
            case 1180451466: goto label024;
            case 1219773618: goto label022;
            case 1236319578: goto label020;
            case 1395483623: goto label018;
            case 1583986358: goto label016;
            case 1618908732: goto label014;
            case 1671764162: goto label012;
            case 1852789518: goto label010;
            case 1861559962: goto label008;
            case 1863290858: goto label006;
            case 2083239620: goto label004;
            default: goto label003;
        };

     label003:
        goto label136;

     label004:
        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("switch-user");

        if $z0 == 0 goto label003;

     label005:
        b60 = 37;

        goto label137;

     label006:
        $z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("stop-service");

        if $z1 == 0 goto label003;

     label007:
        b60 = 9;

        goto label137;

     label008:
        $z2 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("idle-maintenance");

        if $z2 == 0 goto label003;

     label009:
        b60 = 31;

        goto label137;

     label010:
        $z3 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("no-home-screen");

        if $z3 == 0 goto label003;

     label011:
        b60 = 62;

        goto label137;

     label012:
        $z4 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("display");

        if $z4 == 0 goto label003;

     label013:
        b60 = 54;

        goto label137;

     label014:
        $z5 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("wait-for-broadcast-idle");

        if $z5 == 0 goto label003;

     label015:
        b60 = 63;

        goto label137;

     label016:
        $z6 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("stop-user");

        if $z6 == 0 goto label003;

     label017:
        b60 = 41;

        goto label137;

     label018:
        $z7 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("instrument");

        if $z7 == 0 goto label003;

     label019:
        b60 = 11;

        goto label137;

     label020:
        $z8 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("monitor");

        if $z8 == 0 goto label003;

     label021:
        b60 = 27;

        goto label137;

     label022:
        $z9 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("get-started-user-state");

        if $z9 == 0 goto label003;

     label023:
        b60 = 43;

        goto label137;

     label024:
        $z10 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("refresh-settings-cache");

        if $z10 == 0 goto label003;

     label025:
        b60 = 65;

        goto label137;

     label026:
        $z11 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("update-appinfo");

        if $z11 == 0 goto label003;

     label027:
        b60 = 61;

        goto label137;

     label028:
        $z12 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("restart");

        if $z12 == 0 goto label003;

     label029:
        b60 = 30;

        goto label137;

     label030:
        $z13 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("clear-debug-app");

        if $z13 == 0 goto label003;

     label031:
        b60 = 17;

        goto label137;

     label032:
        $z14 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("attach-agent");

        if $z14 == 0 goto label003;

     label033:
        b60 = 58;

        goto label137;

     label034:
        $z15 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("start-fg-service");

        if $z15 == 0 goto label003;

     label035:
        b60 = 7;

        goto label137;

     label036:
        $z16 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("set-agent-app");

        if $z16 == 0 goto label003;

     label037:
        b60 = 16;

        goto label137;

     label038:
        $z17 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("clear-watch-heap");

        if $z17 == 0 goto label003;

     label039:
        b60 = 19;

        goto label137;

     label040:
        $z18 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("set-watch-heap");

        if $z18 == 0 goto label003;

     label041:
        b60 = 18;

        goto label137;

     label042:
        $z19 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("to-intent-uri");

        if $z19 == 0 goto label003;

     label043:
        b60 = 35;

        goto label137;

     label044:
        $z20 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("supports-multiwindow");

        if $z20 == 0 goto label003;

     label045:
        b60 = 59;

        goto label137;

     label046:
        $z21 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("trace-ipc");

        if $z21 == 0 goto label003;

     label047:
        b60 = 12;

        goto label137;

     label048:
        $z22 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("supports-split-screen-multi-window");

        if $z22 == 0 goto label003;

     label049:
        b60 = 60;

        goto label137;

     label050:
        $z23 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("bug-report");

        if $z23 == 0 goto label003;

     label051:
        b60 = 21;

        goto label137;

     label052:
        $z24 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("untrack-associations");

        if $z24 == 0 goto label003;

     label053:
        b60 = 45;

        goto label137;

     label054:
        $z25 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("start-activity");

        if $z25 == 0 goto label003;

     label055:
        b60 = 1;

        goto label137;

     label056:
        $z26 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("to-app-uri");

        if $z26 == 0 goto label003;

     label057:
        b60 = 36;

        goto label137;

     label058:
        $z27 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("startservice");

        if $z27 == 0 goto label003;

     label059:
        b60 = 2;

        goto label137;

     label060:
        $z28 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("write");

        if $z28 == 0 goto label003;

     label061:
        b60 = 57;

        goto label137;

     label062:
        $z29 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("start");

        if $z29 == 0 goto label003;

     label063:
        b60 = 0;

        goto label137;

     label064:
        $z30 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("stack");

        if $z30 == 0 goto label003;

     label065:
        b60 = 55;

        goto label137;

     label066:
        $z31 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("crash");

        if $z31 == 0 goto label003;

     label067:
        b60 = 23;

        goto label137;

     label068:
        $z32 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("force-stop");

        if $z32 == 0 goto label003;

     label069:
        b60 = 22;

        goto label137;

     label070:
        $z33 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("task");

        if $z33 == 0 goto label003;

     label071:
        b60 = 56;

        goto label137;

     label072:
        $z34 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("kill");

        if $z34 == 0 goto label003;

     label073:
        b60 = 24;

        goto label137;

     label074:
        $z35 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("hang");

        if $z35 == 0 goto label003;

     label075:
        b60 = 29;

        goto label137;

     label076:
        $z36 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("make-uid-idle");

        if $z36 == 0 goto label003;

     label077:
        b60 = 26;

        goto label137;

     label078:
        $z37 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("startforegroundservice");

        if $z37 == 0 goto label003;

     label079:
        b60 = 4;

        goto label137;

     label080:
        $z38 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("clear-exit-info");

        if $z38 == 0 goto label003;

     label081:
        b60 = 20;

        goto label137;

     label082:
        $z39 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("watch-uids");

        if $z39 == 0 goto label003;

     label083:
        b60 = 28;

        goto label137;

     label084:
        $z40 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("set-inactive");

        if $z40 == 0 goto label003;

     label085:
        b60 = 49;

        goto label137;

     label086:
        $z41 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("profile");

        if $z41 == 0 goto label003;

     label087:
        b60 = 13;

        goto label137;

     label088:
        $z42 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("screen-compat");

        if $z42 == 0 goto label003;

     label089:
        b60 = 32;

        goto label137;

     label090:
        $z43 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("track-associations");

        if $z43 == 0 goto label003;

     label091:
        b60 = 44;

        goto label137;

     label092:
        $z44 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("is-user-stopped");

        if $z44 == 0 goto label003;

     label093:
        b60 = 42;

        goto label137;

     label094:
        $z45 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("kill-all");

        if $z45 == 0 goto label003;

     label095:
        b60 = 25;

        goto label137;

     label096:
        $z46 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("get-config");

        if $z46 == 0 goto label003;

     label097:
        b60 = 47;

        goto label137;

     label098:
        $z47 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("set-standby-bucket");

        if $z47 == 0 goto label003;

     label099:
        b60 = 51;

        goto label137;

     label100:
        $z48 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("get-current-user");

        if $z48 == 0 goto label003;

     label101:
        b60 = 38;

        goto label137;

     label102:
        $z49 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("to-uri");

        if $z49 == 0 goto label003;

     label103:
        b60 = 34;

        goto label137;

     label104:
        $z50 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("start-foreground-service");

        if $z50 == 0 goto label003;

     label105:
        b60 = 6;

        goto label137;

     label106:
        $z51 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("unlock-user");

        if $z51 == 0 goto label003;

     label107:
        b60 = 40;

        goto label137;

     label108:
        $z52 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("startfgservice");

        if $z52 == 0 goto label003;

     label109:
        b60 = 5;

        goto label137;

     label110:
        $z53 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("stopservice");

        if $z53 == 0 goto label003;

     label111:
        b60 = 8;

        goto label137;

     label112:
        $z54 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("get-uid-state");

        if $z54 == 0 goto label003;

     label113:
        b60 = 46;

        goto label137;

     label114:
        $z55 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("start-service");

        if $z55 == 0 goto label003;

     label115:
        b60 = 3;

        goto label137;

     label116:
        $z56 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("send-trim-memory");

        if $z56 == 0 goto label003;

     label117:
        b60 = 53;

        goto label137;

     label118:
        $z57 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("suppress-resize-config-changes");

        if $z57 == 0 goto label003;

     label119:
        b60 = 48;

        goto label137;

     label120:
        $z58 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("compat");

        if $z58 == 0 goto label003;

     label121:
        b60 = 64;

        goto label137;

     label122:
        $z59 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("broadcast");

        if $z59 == 0 goto label003;

     label123:
        b60 = 10;

        goto label137;

     label124:
        $z60 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("start-user");

        if $z60 == 0 goto label003;

     label125:
        b60 = 39;

        goto label137;

     label126:
        $z61 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("get-standby-bucket");

        if $z61 == 0 goto label003;

     label127:
        b60 = 52;

        goto label137;

     label128:
        $z62 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("package-importance");

        if $z62 == 0 goto label003;

     label129:
        b60 = 33;

        goto label137;

     label130:
        $z63 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("get-inactive");

        if $z63 == 0 goto label003;

     label131:
        b60 = 50;

        goto label137;

     label132:
        $z64 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("set-debug-app");

        if $z64 == 0 goto label003;

     label133:
        b60 = 15;

        goto label137;

     label134:
        $z65 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("dumpheap");

        if $z65 == 0 goto label003;

     label135:
        b60 = 14;

        goto label137;

     label136:
        b60 = -1;

     label137:
        tableswitch(b60)
        {
            case 0: goto label200;
            case 1: goto label200;
            case 2: goto label199;
            case 3: goto label199;
            case 4: goto label198;
            case 5: goto label198;
            case 6: goto label198;
            case 7: goto label198;
            case 8: goto label197;
            case 9: goto label197;
            case 10: goto label196;
            case 11: goto label194;
            case 12: goto label193;
            case 13: goto label192;
            case 14: goto label191;
            case 15: goto label190;
            case 16: goto label189;
            case 17: goto label188;
            case 18: goto label187;
            case 19: goto label186;
            case 20: goto label185;
            case 21: goto label184;
            case 22: goto label183;
            case 23: goto label182;
            case 24: goto label181;
            case 25: goto label180;
            case 26: goto label179;
            case 27: goto label178;
            case 28: goto label177;
            case 29: goto label176;
            case 30: goto label175;
            case 31: goto label174;
            case 32: goto label173;
            case 33: goto label172;
            case 34: goto label171;
            case 35: goto label170;
            case 36: goto label169;
            case 37: goto label168;
            case 38: goto label167;
            case 39: goto label166;
            case 40: goto label165;
            case 41: goto label164;
            case 42: goto label163;
            case 43: goto label162;
            case 44: goto label161;
            case 45: goto label160;
            case 46: goto label159;
            case 47: goto label158;
            case 48: goto label157;
            case 49: goto label156;
            case 50: goto label155;
            case 51: goto label154;
            case 52: goto label153;
            case 53: goto label152;
            case 54: goto label151;
            case 55: goto label150;
            case 56: goto label149;
            case 57: goto label148;
            case 58: goto label147;
            case 59: goto label146;
            case 60: goto label145;
            case 61: goto label144;
            case 62: goto label143;
            case 63: goto label142;
            case 64: goto label141;
            case 65: goto label140;
            default: goto label138;
        };

     label138:
        i61 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int handleDefaultCommands(java.lang.String)>(r9);

     label139:
        goto label202;

     label140:
        $i1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runRefreshSettingsCache()>();

        return $i1;

     label141:
        $i2 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runCompat(java.io.PrintWriter)>(r1);

        return $i2;

     label142:
        $i3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runWaitForBroadcastIdle(java.io.PrintWriter)>(r1);

        return $i3;

     label143:
        $i4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runNoHomeScreen(java.io.PrintWriter)>(r1);

        return $i4;

     label144:
        $i5 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runUpdateApplicationInfo(java.io.PrintWriter)>(r1);

        return $i5;

     label145:
        $i6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSupportsSplitScreenMultiwindow(java.io.PrintWriter)>(r1);

        return $i6;

     label146:
        $i7 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSupportsMultiwindow(java.io.PrintWriter)>(r1);

        return $i7;

     label147:
        $i8 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runAttachAgent(java.io.PrintWriter)>(r1);

        return $i8;

     label148:
        $i9 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runWrite(java.io.PrintWriter)>(r1);

        return $i9;

     label149:
        $i10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTask(java.io.PrintWriter)>(r1);

        return $i10;

     label150:
        $i11 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStack(java.io.PrintWriter)>(r1);

        return $i11;

     label151:
        $i12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runDisplay(java.io.PrintWriter)>(r1);

        return $i12;

     label152:
        $i13 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSendTrimMemory(java.io.PrintWriter)>(r1);

        return $i13;

     label153:
        $i14 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runGetStandbyBucket(java.io.PrintWriter)>(r1);

        return $i14;

     label154:
        $i15 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSetStandbyBucket(java.io.PrintWriter)>(r1);

        return $i15;

     label155:
        $i16 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runGetInactive(java.io.PrintWriter)>(r1);

        return $i16;

     label156:
        $i17 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSetInactive(java.io.PrintWriter)>(r1);

        return $i17;

     label157:
        $i18 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSuppressResizeConfigChanges(java.io.PrintWriter)>(r1);

        return $i18;

     label158:
        $i19 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runGetConfig(java.io.PrintWriter)>(r1);

        return $i19;

     label159:
        $i20 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int getUidState(java.io.PrintWriter)>(r1);

        return $i20;

     label160:
        $i21 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runUntrackAssociations(java.io.PrintWriter)>(r1);

        return $i21;

     label161:
        $i22 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTrackAssociations(java.io.PrintWriter)>(r1);

        return $i22;

     label162:
        $i23 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runGetStartedUserState(java.io.PrintWriter)>(r1);

        return $i23;

     label163:
        $i24 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runIsUserStopped(java.io.PrintWriter)>(r1);

        return $i24;

     label164:
        $i25 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStopUser(java.io.PrintWriter)>(r1);

        return $i25;

     label165:
        $i26 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runUnlockUser(java.io.PrintWriter)>(r1);

        return $i26;

     label166:
        $i27 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStartUser(java.io.PrintWriter)>(r1);

        return $i27;

     label167:
        $i28 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runGetCurrentUser(java.io.PrintWriter)>(r1);

        return $i28;

     label168:
        $i29 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSwitchUser(java.io.PrintWriter)>(r1);

        return $i29;

     label169:
        $i30 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runToUri(java.io.PrintWriter,int)>(r1, 2);

        return $i30;

     label170:
        $i31 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runToUri(java.io.PrintWriter,int)>(r1, 1);

        return $i31;

     label171:
        $i32 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runToUri(java.io.PrintWriter,int)>(r1, 0);

        return $i32;

     label172:
        $i33 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runPackageImportance(java.io.PrintWriter)>(r1);

        return $i33;

     label173:
        $i34 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runScreenCompat(java.io.PrintWriter)>(r1);

        return $i34;

     label174:
        $i35 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runIdleMaintenance(java.io.PrintWriter)>(r1);

        return $i35;

     label175:
        $i36 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runRestart(java.io.PrintWriter)>(r1);

        return $i36;

     label176:
        $i37 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runHang(java.io.PrintWriter)>(r1);

        return $i37;

     label177:
        $i38 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runWatchUids(java.io.PrintWriter)>(r1);

        return $i38;

     label178:
        $i39 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runMonitor(java.io.PrintWriter)>(r1);

        return $i39;

     label179:
        $i40 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runMakeIdle(java.io.PrintWriter)>(r1);

        return $i40;

     label180:
        $i41 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runKillAll(java.io.PrintWriter)>(r1);

        return $i41;

     label181:
        $i42 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runKill(java.io.PrintWriter)>(r1);

        return $i42;

     label182:
        $i43 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runCrash(java.io.PrintWriter)>(r1);

        return $i43;

     label183:
        $i44 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runForceStop(java.io.PrintWriter)>(r1);

        return $i44;

     label184:
        $i45 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runBugReport(java.io.PrintWriter)>(r1);

        return $i45;

     label185:
        $i46 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runClearExitInfo(java.io.PrintWriter)>(r1);

        return $i46;

     label186:
        $i47 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runClearWatchHeap(java.io.PrintWriter)>(r1);

        return $i47;

     label187:
        $i48 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSetWatchHeap(java.io.PrintWriter)>(r1);

        return $i48;

     label188:
        $i49 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runClearDebugApp(java.io.PrintWriter)>(r1);

        return $i49;

     label189:
        $i50 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSetAgentApp(java.io.PrintWriter)>(r1);

        return $i50;

     label190:
        $i51 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSetDebugApp(java.io.PrintWriter)>(r1);

        return $i51;

     label191:
        $i52 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runDumpHeap(java.io.PrintWriter)>(r1);

        return $i52;

     label192:
        $i53 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runProfile(java.io.PrintWriter)>(r1);

        return $i53;

     label193:
        $i54 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTraceIpc(java.io.PrintWriter)>(r1);

        return $i54;

     label194:
        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>("Error: must be invoked through \'am instrument\'.");

     label195:
        return -1;

     label196:
        $i55 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runSendBroadcast(java.io.PrintWriter)>(r1);

        return $i55;

     label197:
        $i56 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStopService(java.io.PrintWriter)>(r1);

        return $i56;

     label198:
        $i57 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStartService(java.io.PrintWriter,boolean)>(r1, 1);

        return $i57;

     label199:
        $i58 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStartService(java.io.PrintWriter,boolean)>(r1, 0);

        return $i58;

     label200:
        i62 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStartActivity(java.io.PrintWriter)>(r1);

     label201:
        return i62;

     label202:
        return i61;

     label203:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

        catch android.os.RemoteException from label002 to label003 with label203;
        catch android.os.RemoteException from label004 to label005 with label203;
        catch android.os.RemoteException from label006 to label007 with label203;
        catch android.os.RemoteException from label008 to label009 with label203;
        catch android.os.RemoteException from label010 to label011 with label203;
        catch android.os.RemoteException from label012 to label013 with label203;
        catch android.os.RemoteException from label014 to label015 with label203;
        catch android.os.RemoteException from label016 to label017 with label203;
        catch android.os.RemoteException from label018 to label019 with label203;
        catch android.os.RemoteException from label020 to label021 with label203;
        catch android.os.RemoteException from label022 to label023 with label203;
        catch android.os.RemoteException from label024 to label025 with label203;
        catch android.os.RemoteException from label026 to label027 with label203;
        catch android.os.RemoteException from label028 to label029 with label203;
        catch android.os.RemoteException from label030 to label031 with label203;
        catch android.os.RemoteException from label032 to label033 with label203;
        catch android.os.RemoteException from label034 to label035 with label203;
        catch android.os.RemoteException from label036 to label037 with label203;
        catch android.os.RemoteException from label038 to label039 with label203;
        catch android.os.RemoteException from label040 to label041 with label203;
        catch android.os.RemoteException from label042 to label043 with label203;
        catch android.os.RemoteException from label044 to label045 with label203;
        catch android.os.RemoteException from label046 to label047 with label203;
        catch android.os.RemoteException from label048 to label049 with label203;
        catch android.os.RemoteException from label050 to label051 with label203;
        catch android.os.RemoteException from label052 to label053 with label203;
        catch android.os.RemoteException from label054 to label055 with label203;
        catch android.os.RemoteException from label056 to label057 with label203;
        catch android.os.RemoteException from label058 to label059 with label203;
        catch android.os.RemoteException from label060 to label061 with label203;
        catch android.os.RemoteException from label062 to label063 with label203;
        catch android.os.RemoteException from label064 to label065 with label203;
        catch android.os.RemoteException from label066 to label067 with label203;
        catch android.os.RemoteException from label068 to label069 with label203;
        catch android.os.RemoteException from label070 to label071 with label203;
        catch android.os.RemoteException from label072 to label073 with label203;
        catch android.os.RemoteException from label074 to label075 with label203;
        catch android.os.RemoteException from label076 to label077 with label203;
        catch android.os.RemoteException from label078 to label079 with label203;
        catch android.os.RemoteException from label080 to label081 with label203;
        catch android.os.RemoteException from label082 to label083 with label203;
        catch android.os.RemoteException from label084 to label085 with label203;
        catch android.os.RemoteException from label086 to label087 with label203;
        catch android.os.RemoteException from label088 to label089 with label203;
        catch android.os.RemoteException from label090 to label091 with label203;
        catch android.os.RemoteException from label092 to label093 with label203;
        catch android.os.RemoteException from label094 to label095 with label203;
        catch android.os.RemoteException from label096 to label097 with label203;
        catch android.os.RemoteException from label098 to label099 with label203;
        catch android.os.RemoteException from label100 to label101 with label203;
        catch android.os.RemoteException from label102 to label103 with label203;
        catch android.os.RemoteException from label104 to label105 with label203;
        catch android.os.RemoteException from label106 to label107 with label203;
        catch android.os.RemoteException from label108 to label109 with label203;
        catch android.os.RemoteException from label110 to label111 with label203;
        catch android.os.RemoteException from label112 to label113 with label203;
        catch android.os.RemoteException from label114 to label115 with label203;
        catch android.os.RemoteException from label116 to label117 with label203;
        catch android.os.RemoteException from label118 to label119 with label203;
        catch android.os.RemoteException from label120 to label121 with label203;
        catch android.os.RemoteException from label122 to label123 with label203;
        catch android.os.RemoteException from label124 to label125 with label203;
        catch android.os.RemoteException from label126 to label127 with label203;
        catch android.os.RemoteException from label128 to label129 with label203;
        catch android.os.RemoteException from label130 to label131 with label203;
        catch android.os.RemoteException from label132 to label133 with label203;
        catch android.os.RemoteException from label134 to label135 with label203;
        catch android.os.RemoteException from label138 to label139 with label203;
        catch android.os.RemoteException from label140 to label141 with label203;
        catch android.os.RemoteException from label141 to label142 with label203;
        catch android.os.RemoteException from label142 to label143 with label203;
        catch android.os.RemoteException from label143 to label144 with label203;
        catch android.os.RemoteException from label144 to label145 with label203;
        catch android.os.RemoteException from label145 to label146 with label203;
        catch android.os.RemoteException from label146 to label147 with label203;
        catch android.os.RemoteException from label147 to label148 with label203;
        catch android.os.RemoteException from label148 to label149 with label203;
        catch android.os.RemoteException from label149 to label150 with label203;
        catch android.os.RemoteException from label150 to label151 with label203;
        catch android.os.RemoteException from label151 to label152 with label203;
        catch android.os.RemoteException from label152 to label153 with label203;
        catch android.os.RemoteException from label153 to label154 with label203;
        catch android.os.RemoteException from label154 to label155 with label203;
        catch android.os.RemoteException from label155 to label156 with label203;
        catch android.os.RemoteException from label156 to label157 with label203;
        catch android.os.RemoteException from label157 to label158 with label203;
        catch android.os.RemoteException from label158 to label159 with label203;
        catch android.os.RemoteException from label159 to label160 with label203;
        catch android.os.RemoteException from label160 to label161 with label203;
        catch android.os.RemoteException from label161 to label162 with label203;
        catch android.os.RemoteException from label162 to label163 with label203;
        catch android.os.RemoteException from label163 to label164 with label203;
        catch android.os.RemoteException from label164 to label165 with label203;
        catch android.os.RemoteException from label165 to label166 with label203;
        catch android.os.RemoteException from label166 to label167 with label203;
        catch android.os.RemoteException from label167 to label168 with label203;
        catch android.os.RemoteException from label168 to label169 with label203;
        catch android.os.RemoteException from label169 to label170 with label203;
        catch android.os.RemoteException from label170 to label171 with label203;
        catch android.os.RemoteException from label171 to label172 with label203;
        catch android.os.RemoteException from label172 to label173 with label203;
        catch android.os.RemoteException from label173 to label174 with label203;
        catch android.os.RemoteException from label174 to label175 with label203;
        catch android.os.RemoteException from label175 to label176 with label203;
        catch android.os.RemoteException from label176 to label177 with label203;
        catch android.os.RemoteException from label177 to label178 with label203;
        catch android.os.RemoteException from label178 to label179 with label203;
        catch android.os.RemoteException from label179 to label180 with label203;
        catch android.os.RemoteException from label180 to label181 with label203;
        catch android.os.RemoteException from label181 to label182 with label203;
        catch android.os.RemoteException from label182 to label183 with label203;
        catch android.os.RemoteException from label183 to label184 with label203;
        catch android.os.RemoteException from label184 to label185 with label203;
        catch android.os.RemoteException from label185 to label186 with label203;
        catch android.os.RemoteException from label186 to label187 with label203;
        catch android.os.RemoteException from label187 to label188 with label203;
        catch android.os.RemoteException from label188 to label189 with label203;
        catch android.os.RemoteException from label189 to label190 with label203;
        catch android.os.RemoteException from label190 to label191 with label203;
        catch android.os.RemoteException from label191 to label192 with label203;
        catch android.os.RemoteException from label192 to label193 with label203;
        catch android.os.RemoteException from label193 to label194 with label203;
        catch android.os.RemoteException from label194 to label195 with label203;
        catch android.os.RemoteException from label196 to label197 with label203;
        catch android.os.RemoteException from label197 to label198 with label203;
        catch android.os.RemoteException from label198 to label199 with label203;
        catch android.os.RemoteException from label199 to label200 with label203;
        catch android.os.RemoteException from label200 to label201 with label203;
    }

    public void onHelp()
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter $r1;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        $r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        $z0 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mDumping>;

        staticinvoke <com.android.server.am.ActivityManagerShellCommand: void dumpHelp(java.io.PrintWriter,boolean)>($r1, $z0);

        return;
    }

    int runAttachAgent(java.io.PrintWriter)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, r3, $r9, r10;
        com.android.server.am.ActivityManagerService $r4, $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r4.<com.android.server.am.ActivityManagerService: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ACTIVITY_WATCHER", "attach-agent");

        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArg()>();

        if r3 == null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return -1;

     label1:
        $r5 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r5.<com.android.server.am.ActivityManagerService: void attachAgent(java.lang.String,java.lang.String)>(r10, r2);

        return 0;
    }

    int runBugReport(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7;
        java.io.PrintWriter r2, r10;
        android.app.IActivityManager $r3, $r8, $r9;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r10 := @parameter0: java.io.PrintWriter;

        z2 = 1;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--progress");

        if $z0 == 0 goto label2;

        z2 = 0;

        $r9 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r9.<android.app.IActivityManager: void requestInteractiveBugReport()>();

        goto label1;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--telephony");

        if $z1 == 0 goto label3;

        z2 = 0;

        $r8 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r8.<android.app.IActivityManager: void requestTelephonyBugReport(java.lang.String,java.lang.String)>("", "");

        goto label1;

     label3:
        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label4:
        if z2 == 0 goto label5;

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r3.<android.app.IActivityManager: void requestFullBugReport()>();

     label5:
        virtualinvoke r10.<java.io.PrintWriter: void println(java.lang.String)>("Your lovely bug report is being created; please be patient.");

        return 0;
    }

    int runClearDebugApp(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        android.app.IActivityManager $r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r2.<android.app.IActivityManager: void setDebugApp(java.lang.String,boolean,boolean)>(null, 0, 1);

        return 0;
    }

    int runClearExitInfo(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        com.android.server.am.ActivityManagerService $r1, $r2;
        com.android.server.am.ProcessList $r3;
        com.android.server.am.AppExitInfoTracker $r4;
        android.app.IActivityManager $r5;
        boolean $z0;
        java.lang.String $r6, r8, r9;
        java.io.PrintWriter r7;
        int i0, i1;
        android.content.pm.UserInfo r10;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r7 := @parameter0: java.io.PrintWriter;

        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r1.<com.android.server.am.ActivityManagerService: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS", "runClearExitInfo()");

        i0 = -2;

        r8 = null;

     label1:
        r9 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r9 == null goto label3;

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r6);

        goto label1;

     label2:
        r8 = r9;

        goto label1;

     label3:
        i1 = i0;

        if i0 != -2 goto label5;

        $r5 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        r10 = interfaceinvoke $r5.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        if r10 != null goto label4;

        return -1;

     label4:
        i1 = r10.<android.content.pm.UserInfo: int id>;

     label5:
        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r3 = $r2.<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessList mProcessList>;

        $r4 = $r3.<com.android.server.am.ProcessList: com.android.server.am.AppExitInfoTracker mAppExitInfoTracker>;

        virtualinvoke $r4.<com.android.server.am.AppExitInfoTracker: void clearHistoryProcessExitInfo(java.lang.String,int)>(r8, i1);

        return 0;
    }

    int runClearWatchHeap(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        android.app.IActivityManager $r1;
        java.io.PrintWriter r2;
        java.lang.String r3;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r2 := @parameter0: java.io.PrintWriter;

        r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r1.<android.app.IActivityManager: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>(r3, 0, -1L, null);

        return 0;
    }

    int runCrash(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r6, $r7, r12;
        android.app.IActivityManager $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.Throwable $r8;
        java.io.PrintWriter r9, r10;
        int i0, i1;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r9 := @parameter0: java.io.PrintWriter;

        i0 = -1;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r7);

        goto label1;

     label2:
        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return -1;

     label3:
        r12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

     label4:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r12);

     label5:
        r12 = null;

        goto label7;

     label6:
        $r8 := @caughtexception;

        i1 = -1;

     label7:
        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r2.<android.app.IActivityManager: void crashApplication(int,int,java.lang.String,int,java.lang.String,boolean)>(-1, i1, r12, i0, "shell-induced crash", 0);

        return 0;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    int runDisplay(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7;
        java.io.PrintWriter r2, r8;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        byte b2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        if $i0 == 1625698700 goto label2;

     label1:
        goto label3;

     label2:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("move-stack");

        if $z0 == 0 goto label1;

        b2 = 0;

        goto label4;

     label3:
        b2 = -1;

     label4:
        if b2 == 0 goto label5;

        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown command \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label5:
        $i1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runDisplayMoveStack(java.io.PrintWriter)>(r8);

        return $i1;
    }

    int runDisplayMoveStack(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0, i1;
        java.lang.String $r2, $r3;
        android.app.IActivityTaskManager $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r4.<android.app.IActivityTaskManager: void moveStackToDisplay(int,int)>(i0, i1);

        return 0;
    }

    int runDumpHeap(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, r30;
        int i0, i1;
        java.lang.String r2, $r8, $r17, $r27, $r28, r31, r33, r35;
        android.os.ParcelFileDescriptor r3;
        java.lang.StringBuilder $r5, $r14, $r20, $r24;
        java.io.File $r9;
        java.util.concurrent.CountDownLatch $r10;
        android.os.RemoteCallback $r11;
        com.android.server.am.ActivityManagerShellCommand$2 $r12;
        android.app.IActivityManager $r13;
        boolean $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        java.time.Clock $r18;
        java.time.format.DateTimeFormatter $r19;
        java.lang.Throwable $r29;
        java.time.LocalDateTime r34;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r30 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        z6 = 0;

        i1 = -2;

        z7 = 0;

        z8 = 1;

     label01:
        r31 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r31 == null goto label06;

        $z2 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z2 == 0 goto label02;

        $r28 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r28);

        i1 = i0;

        if i0 != -1 goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: Can\'t dump heap with user \'all\'");

        return -1;

     label02:
        $z3 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("-n");

        if $z3 == 0 goto label03;

        z8 = 0;

        goto label01;

     label03:
        $z4 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("-g");

        if $z4 == 0 goto label04;

        z6 = 1;

        goto label01;

     label04:
        $z5 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("-m");

        if $z5 == 0 goto label05;

        z8 = 0;

        z7 = 1;

        goto label01;

     label05:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        return -1;

     label06:
        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r33 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArg()>();

        if r33 != null goto label07;

        $r18 = staticinvoke <java.time.Clock: java.time.Clock systemDefaultZone()>();

        r34 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)>($r18);

        $r19 = <com.android.server.am.ActivityManagerShellCommand: java.time.format.DateTimeFormatter LOG_NAME_TIME_FORMATTER>;

        r35 = virtualinvoke $r19.<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>(r34);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/data/local/tmp/heapdump-");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".prof");

        r33 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label07;

     label07:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r30.<java.io.PrintWriter: void flush()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r33);

        virtualinvoke $r9.<java.io.File: boolean delete()>();

        r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.os.ParcelFileDescriptor openFileForSystem(java.lang.String,java.lang.String)>(r33, "w");

        if r3 != null goto label08;

        return -1;

     label08:
        $r10 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r10.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r11 = new android.os.RemoteCallback;

        $r12 = new com.android.server.am.ActivityManagerShellCommand$2;

        specialinvoke $r12.<com.android.server.am.ActivityManagerShellCommand$2: void <init>(com.android.server.am.ActivityManagerShellCommand,java.util.concurrent.CountDownLatch)>(r0, $r10);

        specialinvoke $r11.<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener,android.os.Handler)>($r12, null);

        $r13 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $z1 = interfaceinvoke $r13.<android.app.IActivityManager: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>(r2, i1, z8, z7, z6, r33, r3, $r11);

        if $z1 != 0 goto label09;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HEAP DUMP FAILED on process ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        return -1;

     label09:
        virtualinvoke r30.<java.io.PrintWriter: void println(java.lang.String)>("Waiting for dump to finish...");

        virtualinvoke r30.<java.io.PrintWriter: void flush()>();

     label10:
        virtualinvoke $r10.<java.util.concurrent.CountDownLatch: void await()>();

     label11:
        goto label13;

     label12:
        $r29 := @caughtexception;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Caught InterruptedException");

     label13:
        return 0;

        catch java.lang.InterruptedException from label10 to label11 with label12;
    }

    int runForceStop(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r4, $r8, $r9;
        android.app.IActivityManager $r3;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.io.PrintWriter r10, r11;
        int i0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r10 := @parameter0: java.io.PrintWriter;

        i0 = -1;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r9);

        goto label1;

     label2:
        r11 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label3:
        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void forceStopPackage(java.lang.String,int)>($r4, i0);

        return 0;
    }

    int runGetConfig(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        android.app.IActivityManager $r1;
        com.android.server.am.ActivityManagerService $r2;
        android.content.Context $r3;
        java.lang.Object $r4, $r20;
        android.hardware.display.DisplayManager $r5;
        android.util.DisplayMetrics $r6;
        java.lang.StringBuilder $r7, $r12, $r18, $r27, $r32;
        java.lang.String $r9, $r11, $r15, $r17, $r22, $r24, $r30, $r35, $r36, $r38, r41;
        java.lang.String[] $r14;
        android.content.res.Configuration $r21, r44;
        android.util.proto.ProtoOutputStream $r25;
        java.io.FileDescriptor $r26;
        java.io.PrintWriter $r31, r40, r42, r46;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.lang.IllegalArgumentException $r37, $r39;
        int i0, i1, i2, i3;
        android.view.Display r45;
        java.util.List r52;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r40 := @parameter0: java.io.PrintWriter;

        i0 = -1;

        i1 = 0;

        z4 = 0;

        z5 = 0;

     label01:
        r41 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r41 == null goto label08;

        $z0 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>("--days");

        if $z0 == 0 goto label03;

        $r38 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r38);

        if i0 <= 0 goto label02;

        goto label01;

     label02:
        $r39 = new java.lang.IllegalArgumentException;

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("--days must be a positive integer");

        throw $r39;

     label03:
        $z1 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>("--proto");

        if $z1 == 0 goto label04;

        z4 = 1;

        goto label01;

     label04:
        $z2 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>("--device");

        if $z2 == 0 goto label05;

        z5 = 1;

        goto label01;

     label05:
        $z3 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>("--display");

        if $z3 == 0 goto label07;

        $r36 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r36);

        if i1 < 0 goto label06;

        goto label01;

     label06:
        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("--display must be a non-negative integer");

        throw $r37;

     label07:
        r42 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r42.<java.io.PrintWriter: void println(java.lang.String)>($r35);

        return -1;

     label08:
        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        r44 = interfaceinvoke $r1.<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>();

        if r44 != null goto label09;

        $r31 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r31.<java.io.PrintWriter: void println(java.lang.String)>("Activity manager has no configuration");

        return -1;

     label09:
        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r3 = $r2.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        $r5 = (android.hardware.display.DisplayManager) $r4;

        r45 = virtualinvoke $r5.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i1);

        if r45 != null goto label10;

        r46 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Display does not exist: ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r46.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        return -1;

     label10:
        $r6 = new android.util.DisplayMetrics;

        specialinvoke $r6.<android.util.DisplayMetrics: void <init>()>();

        virtualinvoke r45.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>($r6);

        if z4 == 0 goto label12;

        $r25 = new android.util.proto.ProtoOutputStream;

        $r26 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.FileDescriptor getOutFileDescriptor()>();

        specialinvoke $r25.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>($r26);

        virtualinvoke r44.<android.content.res.Configuration: void writeResConfigToProto(android.util.proto.ProtoOutputStream,long,android.util.DisplayMetrics)>($r25, 1146756268033L, $r6);

        if z5 == 0 goto label11;

        specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: void writeDeviceConfig(android.util.proto.ProtoOutputStream,long,java.io.PrintWriter,android.content.res.Configuration,android.util.DisplayMetrics)>($r25, 1146756268034L, null, r44, $r6);

        goto label11;

     label11:
        virtualinvoke $r25.<android.util.proto.ProtoOutputStream: void flush()>();

        goto label15;

     label12:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config: ");

        $r9 = staticinvoke <android.content.res.Configuration: java.lang.String resourceQualifierString(android.content.res.Configuration,android.util.DisplayMetrics)>(r44, $r6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r40.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abi: ");

        $r14 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

        $r15 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(",", $r14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r40.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        if z5 == 0 goto label13;

        specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: void writeDeviceConfig(android.util.proto.ProtoOutputStream,long,java.io.PrintWriter,android.content.res.Configuration,android.util.DisplayMetrics)>(null, -1L, r40, r44, $r6);

        goto label13;

     label13:
        if i0 < 0 goto label15;

        r52 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.util.List getRecentConfigurations(int)>(i0);

        i2 = interfaceinvoke r52.<java.util.List: int size()>();

        if i2 <= 0 goto label15;

        virtualinvoke r40.<java.io.PrintWriter: void println(java.lang.String)>("recentConfigs:");

        i3 = 0;

     label14:
        if i3 >= i2 goto label15;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  config: ");

        $r20 = interfaceinvoke r52.<java.util.List: java.lang.Object get(int)>(i3);

        $r21 = (android.content.res.Configuration) $r20;

        $r22 = staticinvoke <android.content.res.Configuration: java.lang.String resourceQualifierString(android.content.res.Configuration)>($r21);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r40.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        i3 = i3 + 1;

        goto label14;

     label15:
        return 0;
    }

    int runGetCurrentUser(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        android.content.pm.UserInfo r2, $r5;
        android.app.IActivityManager $r3;
        int $i0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        r2 = interfaceinvoke $r3.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "Current user not set");

        $r5 = (android.content.pm.UserInfo) r2;

        $i0 = $r5.<android.content.pm.UserInfo: int id>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i0);

        return 0;
    }

    int runGetInactive(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, r13;
        boolean z0, $z1;
        android.os.IBinder $r2;
        android.app.usage.IUsageStatsManager $r3;
        java.lang.StringBuilder $r4, $r8;
        java.lang.String $r7, $r11, $r12, r14, r16;
        int i0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r13 := @parameter0: java.io.PrintWriter;

        i0 = -2;

     label1:
        r14 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r14 == null goto label3;

        $z1 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r12);

        goto label1;

     label2:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        return -1;

     label3:
        r16 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("usagestats");

        $r3 = staticinvoke <android.app.usage.IUsageStatsManager$Stub: android.app.usage.IUsageStatsManager asInterface(android.os.IBinder)>($r2);

        z0 = interfaceinvoke $r3.<android.app.usage.IUsageStatsManager: boolean isAppInactive(java.lang.String,int,java.lang.String)>(r16, i0, "com.android.shell");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Idle=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return 0;
    }

    int runGetStandbyBucket(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        android.os.IBinder $r1;
        android.content.pm.ParceledListSlice $r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.String $r5, $r9, $r10, r12, r15;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r6;
        java.io.PrintWriter r11, r13;
        android.app.usage.IUsageStatsManager r16;
        java.util.Iterator r17;
        android.app.usage.AppStandbyInfo r18;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        i2 = -2;

     label1:
        r12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r12 == null goto label3;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r10);

        goto label1;

     label2:
        r13 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return -1;

     label3:
        r15 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArg()>();

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("usagestats");

        r16 = staticinvoke <android.app.usage.IUsageStatsManager$Stub: android.app.usage.IUsageStatsManager asInterface(android.os.IBinder)>($r1);

        if r15 == null goto label4;

        $i1 = interfaceinvoke r16.<android.app.usage.IUsageStatsManager: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>(r15, null, i2);

        virtualinvoke r11.<java.io.PrintWriter: void println(int)>($i1);

        goto label6;

     label4:
        $r2 = interfaceinvoke r16.<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>("com.android.shell", i2);

        $r3 = virtualinvoke $r2.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        r17 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (android.app.usage.AppStandbyInfo) $r4;

        $r5 = r18.<android.app.usage.AppStandbyInfo: java.lang.String mPackageName>;

        virtualinvoke r11.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        virtualinvoke r11.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $i0 = r18.<android.app.usage.AppStandbyInfo: int mStandbyBucket>;

        virtualinvoke r11.<java.io.PrintWriter: void println(int)>($i0);

        goto label5;

     label6:
        return 0;
    }

    int runGetStartedUserState(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0;
        com.android.server.am.ActivityManagerService $r2, $r4;
        java.lang.String $r3, $r5, $r10;
        java.lang.NullPointerException $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r2.<com.android.server.am.ActivityManagerService: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "runGetStartedUserState()");

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label1:
        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r5 = virtualinvoke $r4.<com.android.server.am.ActivityManagerService: java.lang.String getStartedUserState(int)>(i0);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User is not started: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

     label4:
        return 0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    int runHang(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r8;
        android.os.Binder $r3;
        android.app.IActivityManager $r4;
        boolean $z0, z1;
        java.lang.StringBuilder $r5;
        java.io.PrintWriter r9, r10;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r9 := @parameter0: java.io.PrintWriter;

        z1 = 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--allow-restart");

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label1;

     label2:
        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label3:
        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>("Hanging the system...");

        virtualinvoke r9.<java.io.PrintWriter: void flush()>();

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r3 = new android.os.Binder;

        specialinvoke $r3.<android.os.Binder: void <init>()>();

        interfaceinvoke $r4.<android.app.IActivityManager: void hang(android.os.IBinder,boolean)>($r3, z1);

        return 0;
    }

    int runIdleMaintenance(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7;
        java.io.PrintWriter r2, r8;
        android.app.IActivityManager $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label1:
        virtualinvoke r8.<java.io.PrintWriter: void println(java.lang.String)>("Performing idle maintenance...");

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r3.<android.app.IActivityManager: void sendIdleJobTrigger()>();

        return 0;
    }

    int runIsUserStopped(java.io.PrintWriter)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0;
        java.lang.String $r2;
        com.android.server.am.ActivityManagerService $r3;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r2);

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $z0 = virtualinvoke $r3.<com.android.server.am.ActivityManagerService: boolean isUserStopped(int)>(i0);

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        return 0;
    }

    int runKill(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r4, $r8, $r9;
        android.app.IActivityManager $r3;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.io.PrintWriter r10, r11;
        int i0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r10 := @parameter0: java.io.PrintWriter;

        i0 = -1;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r9);

        goto label1;

     label2:
        r11 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label3:
        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)>($r4, i0);

        return 0;
    }

    int runKillAll(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        android.app.IActivityManager $r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r2.<android.app.IActivityManager: void killAllBackgroundProcesses()>();

        return 0;
    }

    int runMakeIdle(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r4, $r8, $r9;
        android.app.IActivityManager $r3;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.io.PrintWriter r10, r11;
        int i0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r10 := @parameter0: java.io.PrintWriter;

        i0 = -1;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r9);

        goto label1;

     label2:
        r11 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label3:
        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void makePackageIdle(java.lang.String,int)>($r4, i0);

        return 0;
    }

    int runMonitor(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r8, r10;
        com.android.server.am.ActivityManagerShellCommand$MyActivityController $r2;
        android.app.IActivityManager $r3;
        java.io.InputStream $r4;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r5;
        java.io.PrintWriter r9, r11;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r9 := @parameter0: java.io.PrintWriter;

        r10 = null;

        z2 = 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--gdb");

        if $z0 == 0 goto label2;

        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        goto label1;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-m");

        if $z1 == 0 goto label3;

        z2 = 1;

        goto label1;

     label3:
        r11 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label4:
        $r2 = new com.android.server.am.ActivityManagerShellCommand$MyActivityController;

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.InputStream getRawInputStream()>();

        specialinvoke $r2.<com.android.server.am.ActivityManagerShellCommand$MyActivityController: void <init>(android.app.IActivityManager,java.io.PrintWriter,java.io.InputStream,java.lang.String,boolean)>($r3, r9, $r4, r10, z2);

        virtualinvoke $r2.<com.android.server.am.ActivityManagerShellCommand$MyActivityController: void run()>();

        return 0;
    }

    int runMoveTopActivityToPinnedStack(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;
        java.lang.String $r1;
        android.app.IActivityTaskManager $r2;
        boolean $z0;
        java.io.PrintWriter $r3, $r4, r5;
        android.graphics.Rect r6;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r5 := @parameter0: java.io.PrintWriter;

        $r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        r6 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.graphics.Rect getBounds()>();

        if r6 != null goto label1;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>("Error: invalid input bounds");

        return -1;

     label1:
        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        $z0 = interfaceinvoke $r2.<android.app.IActivityTaskManager: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>(i0, r6);

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>("Didn\'t move top activity to pinned stack.");

        return -1;

     label2:
        return 0;
    }

    int runNoHomeScreen(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        android.content.res.Resources r2;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        r2 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.res.Resources getResources(java.io.PrintWriter)>(r1);

        if r2 != null goto label1;

        return -1;

     label1:
        $z0 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891495);

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        return 0;
    }

    int runPackageImportance(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        android.app.IActivityManager $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $i0 = interfaceinvoke $r3.<android.app.IActivityManager: int getPackageProcessState(java.lang.String,java.lang.String)>(r2, "com.android.shell");

        $i1 = staticinvoke <android.app.ActivityManager$RunningAppProcessInfo: int procStateToImportance(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i1);

        return 0;
    }

    int runRefreshSettingsCache() throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        com.android.server.am.ActivityManagerService $r1;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r1.<com.android.server.am.ActivityManagerService: void refreshSettingsCache()>();

        return 0;
    }

    int runRestart(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7;
        java.io.PrintWriter r2, r8;
        android.app.IActivityManager $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label1:
        virtualinvoke r8.<java.io.PrintWriter: void println(java.lang.String)>("Restart the system...");

        virtualinvoke r8.<java.io.PrintWriter: void flush()>();

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r3.<android.app.IActivityManager: void restart()>();

        return 0;
    }

    int runScreenCompat(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r2, $r3, $r7, r10, r13;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r4;
        android.os.RemoteException $r8;
        java.io.PrintWriter r9, r14;
        android.app.IActivityManager r11;
        byte b0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r9 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r2 = "on";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        $r3 = "off";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label10;

        z2 = 0;

     label02:
        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

     label03:
        r11 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

     label04:
        if z2 == 0 goto label05;

        b0 = 1;

        goto label06;

     label05:
        b0 = 0;

     label06:
        interfaceinvoke r11.<android.app.IActivityManager: void setPackageScreenCompatMode(java.lang.String,int)>(r10, b0);

     label07:
        goto label09;

     label08:
        $r8 := @caughtexception;

     label09:
        r13 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArg()>();

        r10 = r13;

        if r13 != null goto label03;

        return 0;

     label10:
        r14 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: enabled mode must be \'on\' or \'off\' at ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r14.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

        catch android.os.RemoteException from label03 to label04 with label08;
        catch android.os.RemoteException from label06 to label07 with label08;
    }

    int runSendBroadcast(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        android.content.Intent r1;
        java.lang.String[] $r6, r17;
        java.lang.String $r10, $r14, r16;
        int $i0;
        android.app.IActivityManager $r11;
        java.lang.Throwable $r12;
        java.io.PrintWriter r15;
        android.app.BroadcastOptions r18;
        android.os.Bundle r19;
        com.android.server.am.ActivityManagerShellCommand$IntentReceiver r21;
        java.lang.StringBuilder r22;
        java.lang.RuntimeException r23;
        java.net.URISyntaxException r24;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r15 := @parameter0: java.io.PrintWriter;

     label1:
        r1 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.Intent makeIntent(int)>(-2);

     label2:
        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(4194304);

        r21 = new com.android.server.am.ActivityManagerShellCommand$IntentReceiver;

        specialinvoke r21.<com.android.server.am.ActivityManagerShellCommand$IntentReceiver: void <init>(java.io.PrintWriter)>(r15);

        r16 = r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mReceiverPermission>;

        if r16 != null goto label3;

        r17 = null;

        goto label4;

     label3:
        $r6 = newarray (java.lang.String)[1];

        $r6[0] = r16;

        r17 = $r6;

     label4:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broadcasting: ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r15.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        virtualinvoke r15.<java.io.PrintWriter: void flush()>();

        r18 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.BroadcastOptions mBroadcastOptions>;

        if r18 != null goto label5;

        r19 = null;

        goto label6;

     label5:
        r19 = virtualinvoke r18.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

     label6:
        $r11 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $i0 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        interfaceinvoke $r11.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>(null, null, r1, null, r21, 0, null, null, r17, -1, r19, 1, 0, $i0);

        virtualinvoke r21.<com.android.server.am.ActivityManagerShellCommand$IntentReceiver: void waitForFinish()>();

        return 0;

     label7:
        $r12 := @caughtexception;

        r23 = new java.lang.RuntimeException;

        r24 = (java.net.URISyntaxException) $r12;

        $r14 = virtualinvoke r24.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r12);

        throw r23;

        catch java.net.URISyntaxException from label1 to label2 with label7;
    }

    int runSendTrimMemory(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int $i0, i1, i2, i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.PrintWriter $r1, $r7, r13, r15, r21;
        java.lang.StringBuilder $r2, $r9;
        java.lang.String $r5, $r6, $r12, r14, r17, r18;
        java.lang.Throwable $r8;
        byte b3;
        android.app.IActivityManager $r19;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r13 := @parameter0: java.io.PrintWriter;

        i1 = -2;

     label01:
        r14 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r14 == null goto label03;

        $z7 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z7 == 0 goto label02;

        $r6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r6);

        i1 = i2;

        if i2 != -1 goto label01;

        $r7 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r7.<java.io.PrintWriter: void println(java.lang.String)>("Error: Can\'t use user \'all\'");

        return -1;

     label02:
        r15 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r15.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        return -1;

     label03:
        r17 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r18 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $i0 = virtualinvoke r18.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1943119297: goto label11;
            case -847101650: goto label10;
            case -219160669: goto label09;
            case 163769603: goto label08;
            case 183181625: goto label07;
            case 1072631956: goto label06;
            case 2130809258: goto label05;
            default: goto label04;
        };

     label04:
        goto label12;

     label05:
        $z0 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("HIDDEN");

        if $z0 == 0 goto label04;

        b3 = 0;

        goto label13;

     label06:
        $z1 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("RUNNING_LOW");

        if $z1 == 0 goto label04;

        b3 = 3;

        goto label13;

     label07:
        $z2 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("COMPLETE");

        if $z2 == 0 goto label04;

        b3 = 6;

        goto label13;

     label08:
        $z3 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("MODERATE");

        if $z3 == 0 goto label04;

        b3 = 4;

        goto label13;

     label09:
        $z4 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("RUNNING_MODERATE");

        if $z4 == 0 goto label04;

        b3 = 1;

        goto label13;

     label10:
        $z5 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("BACKGROUND");

        if $z5 == 0 goto label04;

        b3 = 2;

        goto label13;

     label11:
        $z6 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("RUNNING_CRITICAL");

        if $z6 == 0 goto label04;

        b3 = 5;

        goto label13;

     label12:
        b3 = -1;

     label13:
        tableswitch(b3)
        {
            case 0: goto label22;
            case 1: goto label21;
            case 2: goto label20;
            case 3: goto label19;
            case 4: goto label18;
            case 5: goto label17;
            case 6: goto label16;
            default: goto label14;
        };

     label14:
        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r18);

     label15:
        goto label23;

     label16:
        i4 = 80;

        goto label23;

     label17:
        i4 = 15;

        goto label23;

     label18:
        i4 = 60;

        goto label23;

     label19:
        i4 = 10;

        goto label23;

     label20:
        i4 = 40;

        goto label23;

     label21:
        i4 = 5;

        goto label23;

     label22:
        i4 = 20;

        goto label23;

     label23:
        $r19 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $z8 = interfaceinvoke $r19.<android.app.IActivityManager: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>(r17, i1, i4);

        if $z8 != 0 goto label24;

        $r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("Unknown error: failed to set trim level");

        return -1;

     label24:
        return 0;

     label25:
        $r8 := @caughtexception;

        r21 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown level option: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r21.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        return -1;

        catch java.lang.NumberFormatException from label14 to label15 with label25;
    }

    int runSetAgentApp(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, r4;
        android.app.IActivityManager $r2;
        java.io.PrintWriter r3;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r3 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArg()>();

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r2.<android.app.IActivityManager: void setAgentApp(java.lang.String,java.lang.String)>(r1, r4);

        return 0;
    }

    int runSetDebugApp(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7, r10;
        java.io.PrintWriter r2, r8;
        android.app.IActivityManager $r3;
        boolean $z0, $z1, z2, z3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        z2 = 0;

        z3 = 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-w");

        if $z0 == 0 goto label2;

        z2 = 1;

        goto label1;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--persistent");

        if $z1 == 0 goto label3;

        z3 = 1;

        goto label1;

     label3:
        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label4:
        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r3.<android.app.IActivityManager: void setDebugApp(java.lang.String,boolean,boolean)>(r10, z2, z3);

        return 0;
    }

    int runSetInactive(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7, $r8, r12, r13;
        android.os.IBinder $r2;
        android.app.usage.IUsageStatsManager $r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.io.PrintWriter r9, r10;
        int i0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r9 := @parameter0: java.io.PrintWriter;

        i0 = -2;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label3;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r8);

        goto label1;

     label2:
        r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label3:
        r12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r13 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("usagestats");

        $r3 = staticinvoke <android.app.usage.IUsageStatsManager$Stub: android.app.usage.IUsageStatsManager asInterface(android.os.IBinder)>($r2);

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r13);

        interfaceinvoke $r3.<android.app.usage.IUsageStatsManager: void setAppInactive(java.lang.String,boolean,int)>(r12, $z0, i0);

        return 0;
    }

    int runSetStandbyBucket(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, $i1, i2, i3;
        java.lang.String $r1, $r6, $r11, $r12, r14, r17, r18, r21;
        android.os.IBinder $r2;
        java.util.ArrayList $r3;
        android.app.usage.AppStandbyInfo $r4, $r7;
        android.content.pm.ParceledListSlice $r5;
        boolean $z2, z3;
        java.lang.StringBuilder $r8;
        java.io.PrintWriter r13, r15;
        android.app.usage.IUsageStatsManager r19;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r13 := @parameter0: java.io.PrintWriter;

        i2 = -2;

     label01:
        r14 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r14 == null goto label03;

        $z2 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z2 == 0 goto label02;

        $r12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r12);

        goto label01;

     label02:
        r15 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r15.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        return -1;

     label03:
        r17 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r18 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int bucketNameToBucketValue(java.lang.String)>(r18);

        if i0 >= 0 goto label04;

        return -1;

     label04:
        $r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String peekNextArg()>();

        if $r1 == null goto label05;

        z3 = 1;

        goto label06;

     label05:
        z3 = 0;

     label06:
        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("usagestats");

        r19 = staticinvoke <android.app.usage.IUsageStatsManager$Stub: android.app.usage.IUsageStatsManager asInterface(android.os.IBinder)>($r2);

        if z3 != 0 goto label07;

        $i1 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int bucketNameToBucketValue(java.lang.String)>(r18);

        interfaceinvoke r19.<android.app.usage.IUsageStatsManager: void setAppStandbyBucket(java.lang.String,int,int)>(r17, $i1, i2);

        goto label11;

     label07:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new android.app.usage.AppStandbyInfo;

        specialinvoke $r4.<android.app.usage.AppStandbyInfo: void <init>(java.lang.String,int)>(r17, i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label08:
        r21 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArg()>();

        if r21 == null goto label10;

        $r6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i3 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int bucketNameToBucketValue(java.lang.String)>($r6);

        if i3 >= 0 goto label09;

        goto label08;

     label09:
        $r7 = new android.app.usage.AppStandbyInfo;

        specialinvoke $r7.<android.app.usage.AppStandbyInfo: void <init>(java.lang.String,int)>(r21, i3);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label08;

     label10:
        $r5 = new android.content.pm.ParceledListSlice;

        specialinvoke $r5.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r3);

        interfaceinvoke r19.<android.app.usage.IUsageStatsManager: void setAppStandbyBuckets(android.content.pm.ParceledListSlice,int)>($r5, i2);

     label11:
        return 0;
    }

    int runSetWatchHeap(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, r4;
        android.app.IActivityManager $r2;
        long $l0;
        java.io.PrintWriter r3;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r3 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

        interfaceinvoke $r2.<android.app.IActivityManager: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>(r1, 0, $l0, null);

        return 0;
    }

    int runStack(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r3;
        java.io.PrintWriter r8, r9;
        byte b7;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1082080869: goto label07;
            case -934610812: goto label06;
            case 3237038: goto label05;
            case 3322014: goto label04;
            case 35000878: goto label03;
            case 1022285313: goto label02;
            default: goto label01;
        };

     label01:
        goto label08;

     label02:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("move-task");

        if $z0 == 0 goto label01;

        b7 = 0;

        goto label09;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("positiontask");

        if $z1 == 0 goto label01;

        b7 = 1;

        goto label09;

     label04:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("list");

        if $z2 == 0 goto label01;

        b7 = 2;

        goto label09;

     label05:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("info");

        if $z3 == 0 goto label01;

        b7 = 3;

        goto label09;

     label06:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("remove");

        if $z4 == 0 goto label01;

        b7 = 5;

        goto label09;

     label07:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("move-top-activity-to-pinned-stack");

        if $z5 == 0 goto label01;

        b7 = 4;

        goto label09;

     label08:
        b7 = -1;

     label09:
        if b7 == 0 goto label15;

        if b7 == 1 goto label14;

        if b7 == 2 goto label13;

        if b7 == 3 goto label12;

        if b7 == 4 goto label11;

        if b7 == 5 goto label10;

        r9 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown command \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label10:
        $i6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStackRemove(java.io.PrintWriter)>(r8);

        return $i6;

     label11:
        $i5 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runMoveTopActivityToPinnedStack(java.io.PrintWriter)>(r8);

        return $i5;

     label12:
        $i4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStackInfo(java.io.PrintWriter)>(r8);

        return $i4;

     label13:
        $i3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStackList(java.io.PrintWriter)>(r8);

        return $i3;

     label14:
        $i2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStackPositionTask(java.io.PrintWriter)>(r8);

        return $i2;

     label15:
        $i1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runStackMoveTask(java.io.PrintWriter)>(r8);

        return $i1;
    }

    int runStackInfo(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0, i1;
        java.lang.String $r2, $r3;
        android.app.IActivityTaskManager $r4;
        android.app.ActivityManager$StackInfo $r5;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        $r5 = interfaceinvoke $r4.<android.app.IActivityTaskManager: android.app.ActivityManager$StackInfo getStackInfo(int,int)>(i0, i1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r5);

        return 0;
    }

    int runStackList(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.util.Iterator r2;
        android.app.IActivityTaskManager $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.app.ActivityManager$StackInfo $r6;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        $r4 = interfaceinvoke $r3.<android.app.IActivityTaskManager: java.util.List getAllStackInfos()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.app.ActivityManager$StackInfo) $r5;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r6);

        goto label1;

     label2:
        return 0;
    }

    int runStackMoveTask(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, i1;
        java.io.PrintWriter r1, r12;
        java.lang.String $r3, $r4, $r5, $r6, $r10, r13;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r7;
        android.app.IActivityTaskManager $r11;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r12 := @parameter0: java.io.PrintWriter;

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        r13 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r5 = "true";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z0 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        $r6 = "false";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 == 0 goto label3;

        z2 = 0;

     label2:
        $r11 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r11.<android.app.IActivityTaskManager: void moveTaskToStack(int,int,boolean)>(i0, i1, z2);

        return 0;

     label3:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: bad toTop arg: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        return -1;
    }

    int runStackPositionTask(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0, i1, i2;
        java.lang.String $r2, $r3, $r4;
        android.app.IActivityTaskManager $r5;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r5 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r5.<android.app.IActivityTaskManager: void positionTaskInStack(int,int,int)>(i0, i1, i2);

        return 0;
    }

    int runStackRemove(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0;
        java.lang.String $r2;
        android.app.IActivityTaskManager $r3;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r3.<android.app.IActivityTaskManager: void removeStack(int)>(i0);

        return 0;
    }

    int runStartActivity(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        long l0, l1, $l7, $l9, $l10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, z11, $z12;
        com.android.server.am.ActivityManagerService r1, $r35, r86;
        java.lang.String $r3, $r4, $r7, $r9, $r10, $r13, $r15, $r18, $r19, $r23, $r25, $r26, $r29, $r30, $r32, $r33, $r40, $r45, $r48, $r51, $r53, $r59, r63, r64, $r72, r74, $r78, r96;
        int $i2, $i3, $i4, $i5, $i6, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, $i25, $i26, $i27, i28, i29, i30, $i31, i32, i33, i34, i35, i36;
        android.app.IActivityTaskManager $r5;
        android.content.ComponentName $r11, $r17, $r21, $r28, $r34, $r49;
        byte $b8;
        com.android.server.am.UserController $r36;
        android.content.pm.IPackageManager $r37;
        android.content.pm.ParceledListSlice $r38;
        java.lang.Object $r41;
        android.content.pm.ResolveInfo $r42;
        android.content.pm.ActivityInfo $r43;
        android.app.IActivityManager $r46, $r54;
        android.net.Uri $r50, $r52, $r55;
        java.io.PrintWriter $r56, r61, r66, r69, r90;
        java.lang.Throwable $r57, $r60;
        android.content.Intent r62, r89;
        java.util.List r65;
        android.app.ProfilerInfo r71, r105;
        android.os.ParcelFileDescriptor r73, r75;
        android.app.ActivityOptions r79, r80, r81, r82, r83, r84;
        android.os.Bundle r85, r88;
        android.app.WaitResult r87, r111;
        java.lang.StringBuilder r102, r103, r104, r106, r107, r108, r109, r110, r112, r113, r114, r115, r116;
        java.lang.RuntimeException r117;
        java.net.URISyntaxException r118;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r61 := @parameter0: java.io.PrintWriter;

     label01:
        r62 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.Intent makeIntent(int)>(-2);

     label02:
        i23 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        if i23 != -1 goto label03;

        $r56 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r56.<java.io.PrintWriter: void println(java.lang.String)>("Error: Can\'t start service with user \'all\'");

        return 1;

     label03:
        r63 = virtualinvoke r62.<android.content.Intent: java.lang.String getType()>();

        if r63 != null goto label04;

        $r50 = virtualinvoke r62.<android.content.Intent: android.net.Uri getData()>();

        if $r50 == null goto label04;

        $r51 = "content";

        $r52 = virtualinvoke r62.<android.content.Intent: android.net.Uri getData()>();

        $r53 = virtualinvoke $r52.<android.net.Uri: java.lang.String getScheme()>();

        $z6 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>($r53);

        if $z6 == 0 goto label04;

        $r54 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r55 = virtualinvoke r62.<android.content.Intent: android.net.Uri getData()>();

        $i22 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        r63 = interfaceinvoke $r54.<android.app.IActivityManager: java.lang.String getProviderMimeType(android.net.Uri,int)>($r55, $i22);

        goto label04;

     label04:
        $z8 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStopOption>;

        if $z8 == 0 goto label13;

        $r34 = virtualinvoke r62.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r34 == null goto label05;

        $r49 = virtualinvoke r62.<android.content.Intent: android.content.ComponentName getComponent()>();

        r64 = virtualinvoke $r49.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label08;

     label05:
        $r35 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r36 = $r35.<com.android.server.am.ActivityManagerService: com.android.server.am.UserController mUserController>;

        $i16 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i17 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i18 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        i24 = virtualinvoke $r36.<com.android.server.am.UserController: int handleIncomingUser(int,int,int,boolean,int,java.lang.String,java.lang.String)>($i16, $i17, $i18, 0, 0, "ActivityManagerShellCommand", null);

        $r37 = r0.<com.android.server.am.ActivityManagerShellCommand: android.content.pm.IPackageManager mPm>;

        $r38 = interfaceinvoke $r37.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(r62, r63, 0, i24);

        r65 = virtualinvoke $r38.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        if r65 == null goto label12;

        $i19 = interfaceinvoke r65.<java.util.List: int size()>();

        if $i19 > 0 goto label06;

        goto label12;

     label06:
        $i20 = interfaceinvoke r65.<java.util.List: int size()>();

        i33 = (int) 1;

        if $i20 <= i33 goto label07;

        r66 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        r102 = new java.lang.StringBuilder;

        specialinvoke r102.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Intent matches multiple activities; can\'t stop: ");

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r62);

        $r48 = virtualinvoke r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r66.<java.io.PrintWriter: void println(java.lang.String)>($r48);

        i34 = (int) 1;

        return i34;

     label07:
        $r41 = interfaceinvoke r65.<java.util.List: java.lang.Object get(int)>(0);

        $r42 = (android.content.pm.ResolveInfo) $r41;

        $r43 = $r42.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r64 = $r43.<android.content.pm.ActivityInfo: java.lang.String packageName>;

     label08:
        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping: ");

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r45 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>($r45);

        virtualinvoke r61.<java.io.PrintWriter: void flush()>();

        $r46 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $i21 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        interfaceinvoke $r46.<android.app.IActivityManager: void forceStopPackage(java.lang.String,int)>(r64, $i21);

     label09:
        staticinvoke <java.lang.Thread: void sleep(long)>(250L);

     label10:
        goto label13;

     label11:
        $r60 := @caughtexception;

        goto label13;

     label12:
        r69 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        r104 = new java.lang.StringBuilder;

        specialinvoke r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Intent does not match any activities: ");

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r62);

        $r40 = virtualinvoke r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r69.<java.io.PrintWriter: void println(java.lang.String)>($r40);

        i35 = (int) 1;

        return i35;

     label13:
        r71 = null;

        $r72 = r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mProfileFile>;

        if $r72 != null goto label14;

        $r33 = r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mAgent>;

        if $r33 == null goto label16;

     label14:
        r73 = null;

        r74 = r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mProfileFile>;

        if r74 == null goto label15;

        r75 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.os.ParcelFileDescriptor openFileForSystem(java.lang.String,java.lang.String)>(r74, "w");

        r73 = r75;

        if r75 != null goto label15;

        i36 = (int) 1;

        return i36;

     label15:
        r105 = new android.app.ProfilerInfo;

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mProfileFile>;

        $i2 = r0.<com.android.server.am.ActivityManagerShellCommand: int mSamplingInterval>;

        $z3 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mAutoStop>;

        $z2 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mStreaming>;

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String mAgent>;

        $z1 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mAttachAgentDuringBind>;

        specialinvoke r105.<android.app.ProfilerInfo: void <init>(java.lang.String,android.os.ParcelFileDescriptor,int,boolean,boolean,java.lang.String,boolean)>($r4, r73, $i2, $z3, $z2, $r3, $z1);

        r71 = r105;

     label16:
        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting: ");

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r62);

        $r78 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>($r78);

        virtualinvoke r61.<java.io.PrintWriter: void flush()>();

        virtualinvoke r62.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r79 = null;

        $i25 = r0.<com.android.server.am.ActivityManagerShellCommand: int mDisplayId>;

        if $i25 == -1 goto label17;

        r79 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

        $i15 = r0.<com.android.server.am.ActivityManagerShellCommand: int mDisplayId>;

        virtualinvoke r79.<android.app.ActivityOptions: android.app.ActivityOptions setLaunchDisplayId(int)>($i15);

     label17:
        r80 = r79;

        $i3 = r0.<com.android.server.am.ActivityManagerShellCommand: int mWindowingMode>;

        if $i3 == 0 goto label19;

        r80 = r79;

        if r79 != null goto label18;

        r80 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

     label18:
        $i14 = r0.<com.android.server.am.ActivityManagerShellCommand: int mWindowingMode>;

        virtualinvoke r80.<android.app.ActivityOptions: void setLaunchWindowingMode(int)>($i14);

     label19:
        r81 = r80;

        $i26 = r0.<com.android.server.am.ActivityManagerShellCommand: int mActivityType>;

        if $i26 == 0 goto label21;

        r81 = r80;

        if r80 != null goto label20;

        r81 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

     label20:
        $i13 = r0.<com.android.server.am.ActivityManagerShellCommand: int mActivityType>;

        virtualinvoke r81.<android.app.ActivityOptions: void setLaunchActivityType(int)>($i13);

     label21:
        r82 = r81;

        $i27 = r0.<com.android.server.am.ActivityManagerShellCommand: int mTaskId>;

        if $i27 == -1 goto label23;

        r83 = r81;

        if r81 != null goto label22;

        r83 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

     label22:
        $i12 = r0.<com.android.server.am.ActivityManagerShellCommand: int mTaskId>;

        virtualinvoke r83.<android.app.ActivityOptions: void setLaunchTaskId(int)>($i12);

        r82 = r83;

        $z5 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mIsTaskOverlay>;

        if $z5 == 0 goto label23;

        virtualinvoke r83.<android.app.ActivityOptions: void setTaskOverlay(boolean,boolean)>(1, 1);

        r82 = r83;

     label23:
        $z9 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mIsLockTask>;

        if $z9 == 0 goto label25;

        r84 = r82;

        if r82 != null goto label24;

        r84 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

     label24:
        virtualinvoke r84.<android.app.ActivityOptions: android.app.ActivityOptions setLockTaskEnabled(boolean)>(1);

        goto label26;

     label25:
        r84 = r82;

     label26:
        z0 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mWaitOption>;

        r85 = null;

        if z0 == 0 goto label28;

        r86 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        i28 = r0.<com.android.server.am.ActivityManagerShellCommand: int mStartFlags>;

        if r84 == null goto label27;

        r85 = virtualinvoke r84.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

     label27:
        $i11 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        r87 = virtualinvoke r86.<com.android.server.am.ActivityManagerService: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(null, "com.android.shell", null, r62, r63, null, null, 0, i28, r71, r85, $i11);

        i29 = r87.<android.app.WaitResult: int result>;

        goto label30;

     label28:
        r1 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        i30 = r0.<com.android.server.am.ActivityManagerShellCommand: int mStartFlags>;

        r88 = null;

        if r84 == null goto label29;

        r88 = virtualinvoke r84.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

     label29:
        $i4 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        i29 = virtualinvoke r1.<com.android.server.am.ActivityManagerService: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(null, "com.android.shell", null, r62, r63, null, null, 0, i30, r71, r88, $i4);

        r87 = null;

     label30:
        r89 = r62;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $z10 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mWaitOption>;

        if $z10 == 0 goto label31;

        r90 = r61;

        goto label32;

     label31:
        r90 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

     label32:
        if i29 == -98 goto label44;

        if i29 == -97 goto label43;

        if i29 == 0 goto label42;

        if i29 == 1 goto label41;

        if i29 == 2 goto label40;

        if i29 == 3 goto label39;

        if i29 == 100 goto label38;

        tableswitch(i29)
        {
            case -94: goto label37;
            case -93: goto label36;
            case -92: goto label35;
            case -91: goto label34;
            default: goto label33;
        };

     label33:
        r107 = new java.lang.StringBuilder;

        specialinvoke r107.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Activity not started, unknown error code ");

        virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r32 = virtualinvoke r107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        z11 = 0;

        goto label45;

     label34:
        r108 = new java.lang.StringBuilder;

        specialinvoke r108.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Activity not started, unable to resolve ");

        $r25 = virtualinvoke r89.<android.content.Intent: java.lang.String toString()>();

        virtualinvoke r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = virtualinvoke r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>($r26);

        z11 = 0;

        goto label45;

     label35:
        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Error type 3");

        r109 = new java.lang.StringBuilder;

        specialinvoke r109.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Activity class ");

        $r28 = virtualinvoke r89.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r29 = virtualinvoke $r28.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist.");

        $r30 = virtualinvoke r109.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        z11 = 0;

        goto label45;

     label36:
        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Error: Activity not started, you requested to both forward and receive its result");

        z11 = 0;

        goto label45;

     label37:
        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Error: Activity not started, you do not have permission to access it.");

        z11 = 0;

        goto label45;

     label38:
        z11 = 1;

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Warning: Activity not started because the  current activity is being kept for the user.");

        goto label45;

     label39:
        z11 = 1;

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Warning: Activity not started, intent has been delivered to currently running top-most instance.");

        goto label45;

     label40:
        z11 = 1;

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Warning: Activity not started, its current task has been brought to the front");

        goto label45;

     label41:
        z11 = 1;

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Warning: Activity not started because intent should be handled by the caller");

        goto label45;

     label42:
        z11 = 1;

        goto label45;

     label43:
        r110 = new java.lang.StringBuilder;

        specialinvoke r110.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Activity not started, voice control not allowed for: ");

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r89);

        $r23 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        z11 = 0;

        goto label45;

     label44:
        virtualinvoke r90.<java.io.PrintWriter: void println(java.lang.String)>("Error: Not allowed to start background user activity that shouldn\'t be displayed for all users.");

        z11 = 0;

     label45:
        virtualinvoke r90.<java.io.PrintWriter: void flush()>();

        $z12 = r0.<com.android.server.am.ActivityManagerShellCommand: boolean mWaitOption>;

        if $z12 == 0 goto label51;

        if z11 == 0 goto label51;

        if r87 != null goto label46;

        r111 = new android.app.WaitResult;

        specialinvoke r111.<android.app.WaitResult: void <init>()>();

        r87 = r111;

        $r21 = virtualinvoke r89.<android.content.Intent: android.content.ComponentName getComponent()>();

        r111.<android.app.WaitResult: android.content.ComponentName who> = $r21;

        goto label46;

     label46:
        r112 = new java.lang.StringBuilder;

        specialinvoke r112.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Status: ");

        $z4 = r87.<android.app.WaitResult: boolean timeout>;

        if $z4 == 0 goto label47;

        r96 = "timeout";

        goto label48;

     label47:
        r96 = "ok";

     label48:
        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r96);

        $r7 = virtualinvoke r112.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LaunchState: ");

        $i6 = r87.<android.app.WaitResult: int launchState>;

        $r9 = staticinvoke <android.app.WaitResult: java.lang.String launchStateToString(int)>($i6);

        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = r87.<android.app.WaitResult: android.content.ComponentName who>;

        if $r11 == null goto label49;

        r114 = new java.lang.StringBuilder;

        specialinvoke r114.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activity: ");

        $r17 = r87.<android.app.WaitResult: android.content.ComponentName who>;

        $r18 = virtualinvoke $r17.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke r114.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>($r19);

     label49:
        $l7 = r87.<android.app.WaitResult: long totalTime>;

        $b8 = $l7 cmp 0L;

        if $b8 < 0 goto label50;

        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TotalTime: ");

        $l10 = r87.<android.app.WaitResult: long totalTime>;

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r15 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>($r15);

     label50:
        r116 = new java.lang.StringBuilder;

        specialinvoke r116.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WaitTime: ");

        $l9 = l1 - l0;

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r13 = virtualinvoke r116.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        virtualinvoke r61.<java.io.PrintWriter: void println(java.lang.String)>("Complete");

        virtualinvoke r61.<java.io.PrintWriter: void flush()>();

     label51:
        $i31 = r0.<com.android.server.am.ActivityManagerShellCommand: int mRepeat>;

        i32 = $i31 - 1;

        r0.<com.android.server.am.ActivityManagerShellCommand: int mRepeat> = i32;

        if i32 <= 0 goto label52;

        $r5 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r5.<android.app.IActivityTaskManager: void unhandledBack()>();

     label52:
        $i5 = r0.<com.android.server.am.ActivityManagerShellCommand: int mRepeat>;

        if $i5 > 0 goto label53;

        return 0;

     label53:
        r62 = r89;

        goto label04;

     label54:
        $r57 := @caughtexception;

        r117 = new java.lang.RuntimeException;

        r118 = (java.net.URISyntaxException) $r57;

        $r59 = virtualinvoke r118.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke r117.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r59, $r57);

        throw r117;

        catch java.net.URISyntaxException from label01 to label02 with label54;
        catch java.lang.InterruptedException from label09 to label10 with label11;
    }

    int runStartService(java.io.PrintWriter, boolean) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        boolean z0, $z1, $z2, $z3;
        java.io.PrintWriter r1, r30;
        android.content.Intent r2;
        int $i0, $i1;
        java.lang.String $r6, $r8, $r9, $r10, $r11, $r14, $r16, $r19, $r21, $r24, $r26, $r29;
        android.app.IActivityManager $r7;
        java.lang.Throwable $r27;
        android.content.ComponentName r32;
        java.lang.StringBuilder r37, r38, r39, r40;
        java.lang.RuntimeException r41;
        java.net.URISyntaxException r42;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r30 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

     label1:
        r2 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.Intent makeIntent(int)>(-2);

     label2:
        $i0 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        if $i0 != -1 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: Can\'t start activity with user \'all\'");

        return -1;

     label3:
        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting service: ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke r30.<java.io.PrintWriter: void flush()>();

        $r7 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r8 = virtualinvoke r2.<android.content.Intent: java.lang.String getType()>();

        $i1 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        r32 = interfaceinvoke $r7.<android.app.IActivityManager: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>(null, r2, $r8, z0, "com.android.shell", null, $i1);

        if r32 != null goto label4;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: Not found; no service started.");

        return -1;

     label4:
        $r9 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("!");

        if $z1 == 0 goto label5;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Requires permission ");

        $r24 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r26);

        return -1;

     label5:
        $r10 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("!!");

        if $z2 == 0 goto label6;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r19 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        return -1;

     label6:
        $r11 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("?");

        if $z3 == 0 goto label7;

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r14 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        return -1;

     label7:
        return 0;

     label8:
        $r27 := @caughtexception;

        r41 = new java.lang.RuntimeException;

        r42 = (java.net.URISyntaxException) $r27;

        $r29 = virtualinvoke r42.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke r41.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r27);

        throw r41;

        catch java.net.URISyntaxException from label1 to label2 with label8;
    }

    int runStartUser(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, $r4, r11;
        int i0;
        boolean z0, $z1, z2, z3;
        java.lang.String $r2, $r6, $r10, r12;
        android.app.IActivityManager $r3;
        com.android.server.am.ActivityManagerShellCommand$ProgressWaiter $r5, r14;
        java.lang.StringBuilder $r7;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        z2 = 0;

     label1:
        r12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r12 == null goto label3;

        $r6 = "-w";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label1;

     label2:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        return -1;

     label3:
        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        r14 = null;

        if z2 == 0 goto label4;

        $r5 = new com.android.server.am.ActivityManagerShellCommand$ProgressWaiter;

        specialinvoke $r5.<com.android.server.am.ActivityManagerShellCommand$ProgressWaiter: void <init>(com.android.server.am.ActivityManagerShellCommand,com.android.server.am.ActivityManagerShellCommand$1)>(r0, null);

        r14 = $r5;

     label4:
        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        z0 = interfaceinvoke $r3.<android.app.IActivityManager: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>(i0, r14);

        z3 = z0;

        if z2 == 0 goto label5;

        z3 = z0;

        if z0 == 0 goto label5;

        z3 = virtualinvoke r14.<com.android.server.am.ActivityManagerShellCommand$ProgressWaiter: boolean waitForFinish(long)>(120000L);

     label5:
        if z3 == 0 goto label6;

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>("Success: user started");

        goto label7;

     label6:
        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>("Error: could not start user");

     label7:
        return 0;
    }

    int runStopService(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, r13;
        android.content.Intent r2;
        int i0, $i1, $i2;
        java.lang.String $r7, $r9, $r12;
        android.app.IActivityManager $r8;
        java.lang.Throwable $r10;
        java.lang.StringBuilder r15;
        java.lang.RuntimeException r16;
        java.net.URISyntaxException r17;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r13 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

     label1:
        r2 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.Intent makeIntent(int)>(-2);

     label2:
        $i1 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        if $i1 != -1 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: Can\'t stop activity with user \'all\'");

        return -1;

     label3:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping service: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r13.<java.io.PrintWriter: void flush()>();

        $r8 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $r9 = virtualinvoke r2.<android.content.Intent: java.lang.String getType()>();

        $i2 = r0.<com.android.server.am.ActivityManagerShellCommand: int mUserId>;

        i0 = interfaceinvoke $r8.<android.app.IActivityManager: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>(null, r2, $r9, $i2);

        if i0 != 0 goto label4;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Service not stopped: was not running.");

        return -1;

     label4:
        if i0 != 1 goto label5;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Service stopped");

        return -1;

     label5:
        if i0 != -1 goto label6;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error stopping service");

        return -1;

     label6:
        return 0;

     label7:
        $r10 := @caughtexception;

        r16 = new java.lang.RuntimeException;

        r17 = (java.net.URISyntaxException) $r10;

        $r12 = virtualinvoke r17.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r10);

        throw r16;

        catch java.net.URISyntaxException from label1 to label2 with label7;
    }

    int runStopUser(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, i1;
        java.lang.String $r1, $r15, $r16, $r20, r22, r26, $r32;
        android.app.IActivityManager $r2;
        java.lang.StringBuilder $r3, $r10, $r17, $r30;
        com.android.server.am.ActivityManagerShellCommand$StopUserCallback $r14, r25;
        boolean $z0, $z1, z2, z3;
        java.io.PrintWriter r21, r23, r29;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r21 := @parameter0: java.io.PrintWriter;

        z2 = 0;

        z3 = 0;

     label01:
        r22 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r22 == null goto label04;

        $r15 = "-w";

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r22);

        if $z0 == 0 goto label02;

        z2 = 1;

        goto label01;

     label02:
        $r16 = "-f";

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r22);

        if $z1 == 0 goto label03;

        z3 = 1;

        goto label01;

     label03:
        r23 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option: ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r23.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        return -1;

     label04:
        $r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        if z2 == 0 goto label05;

        $r14 = new com.android.server.am.ActivityManagerShellCommand$StopUserCallback;

        specialinvoke $r14.<com.android.server.am.ActivityManagerShellCommand$StopUserCallback: void <init>()>();

        r25 = $r14;

        goto label06;

     label05:
        r25 = null;

     label06:
        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        i1 = interfaceinvoke $r2.<android.app.IActivityManager: int stopUser(int,boolean,android.app.IStopUserCallback)>(i0, z3, r25);

        if i1 == 0 goto label12;

        r26 = "";

        if i1 == -4 goto label10;

        if i1 == -3 goto label09;

        if i1 == -2 goto label08;

        if i1 == -1 goto label07;

        goto label11;

     label07:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Unknown user ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r26 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label08:
        r26 = " (Can\'t stop current user)";

        goto label11;

     label09:
        r26 = " (System user cannot be stopped)";

        goto label11;

     label10:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Can\'t stop user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - one of its related users can\'t be stopped)");

        r26 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        r29 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Switch failed: ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r29.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        return -1;

     label12:
        if r25 == null goto label13;

        virtualinvoke r25.<com.android.server.am.ActivityManagerShellCommand$StopUserCallback: void waitForFinish()>();

     label13:
        return 0;
    }

    int runSupportsMultiwindow(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        android.content.res.Resources $r2;
        com.android.server.am.ActivityManagerService $r3;
        android.content.Context $r4;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.res.Resources getResources(java.io.PrintWriter)>(r1);

        if $r2 != null goto label1;

        return -1;

     label1:
        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r4 = $r3.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <android.app.ActivityTaskManager: boolean supportsMultiWindow(android.content.Context)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        return 0;
    }

    int runSupportsSplitScreenMultiwindow(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        android.content.res.Resources $r2;
        com.android.server.am.ActivityManagerService $r3;
        android.content.Context $r4;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.res.Resources getResources(java.io.PrintWriter)>(r1);

        if $r2 != null goto label1;

        return -1;

     label1:
        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r4 = $r3.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <android.app.ActivityTaskManager: boolean supportsSplitScreenMultiWindow(android.content.Context)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        return 0;
    }

    int runSuppressResizeConfigChanges(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        boolean z0;
        java.lang.String $r2;
        java.lang.Boolean $r3;
        android.app.IActivityTaskManager $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r2);

        z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r4.<android.app.IActivityTaskManager: void suppressResizeConfigChanges(boolean)>(z0);

        return 0;
    }

    int runSwitchUser(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, r20, r21;
        int i0, i1;
        com.android.server.am.ActivityManagerService $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.os.UserManager $r5;
        java.lang.String $r6, $r11, $r15, $r19, r23;
        android.app.IActivityManager $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;
        boolean $z0, z1, z2;
        java.lang.StringBuilder $r12, $r16;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r20 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r3 = $r2.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r5 = (android.os.UserManager) $r4;

        i1 = virtualinvoke $r5.<android.os.UserManager: int getUserSwitchability()>();

        if i1 == 0 goto label1;

        r21 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r21.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        return -1;

     label1:
        z1 = 0;

     label2:
        r23 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r23 == null goto label4;

        $r11 = "-w";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r23);

        if $z0 == 0 goto label3;

        z1 = 1;

        goto label2;

     label3:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        return -1;

     label4:
        $r6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        if z1 == 0 goto label5;

        z2 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: boolean switchUserAndWaitForComplete(int)>(i0);

        goto label6;

     label5:
        $r7 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        z2 = interfaceinvoke $r7.<android.app.IActivityManager: boolean switchUser(int)>(i0);

     label6:
        if z2 == 0 goto label7;

        return 0;

     label7:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[0] = $r9;

        virtualinvoke r20.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("Error: Failed to switch to user %d\n", $r8);

        return 1;
    }

    int runTask(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3;
        int $i0, $i1, $i2, $i3;
        java.io.PrintWriter r8, r9;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lock");

        if $z0 == 0 goto label1;

        $i3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTaskLock(java.io.PrintWriter)>(r8);

        return $i3;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("resizeable");

        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTaskResizeable(java.io.PrintWriter)>(r8);

        return $i2;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("resize");

        if $z2 == 0 goto label3;

        $i1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTaskResize(java.io.PrintWriter)>(r8);

        return $i1;

     label3:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("focus");

        if $z3 == 0 goto label4;

        $i0 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTaskFocus(java.io.PrintWriter)>(r8);

        return $i0;

     label4:
        r9 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown command \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;
    }

    int runTaskFocus(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0;
        java.lang.String $r3, $r7;
        java.lang.StringBuilder $r4;
        android.app.IActivityTaskManager $r8;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting focus to task ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r8.<android.app.IActivityTaskManager: void setFocusedTask(int)>(i0);

        return 0;
    }

    int runTaskLock(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0;
        boolean $z0, $z1;
        android.app.IActivityTaskManager $r3, $r6, $r10;
        java.lang.StringBuilder $r4;
        java.lang.String $r9, r11, r12;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        r11 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("stop");

        if $z0 == 0 goto label1;

        $r10 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r10.<android.app.IActivityTaskManager: void stopSystemLockTaskMode()>();

        goto label2;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r3.<android.app.IActivityTaskManager: void startSystemLockTaskMode(int)>(i0);

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activity manager is ");

        $r6 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        $z1 = interfaceinvoke $r6.<android.app.IActivityTaskManager: boolean isInLockTaskMode()>();

        if $z1 == 0 goto label3;

        r12 = "";

        goto label4;

     label3:
        r12 = "not ";

     label4:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in lockTaskMode");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return 0;
    }

    int runTaskResize(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;
        java.lang.String $r1;
        java.io.PrintWriter $r2, r3;
        android.graphics.Rect r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r3 := @parameter0: java.io.PrintWriter;

        $r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        r4 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.graphics.Rect getBounds()>();

        if r4 != null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("Error: invalid input bounds");

        return -1;

     label1:
        virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: void taskResize(int,android.graphics.Rect,int,boolean)>(i0, r4, 0, 0);

        return 0;
    }

    int runTaskResizeable(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0, i1;
        java.lang.String $r2, $r3;
        android.app.IActivityTaskManager $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        interfaceinvoke $r4.<android.app.IActivityTaskManager: void setTaskResizeable(int,int)>(i0, i1);

        return 0;
    }

    int runToUri(java.io.PrintWriter, int) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0;
        android.content.Intent r1;
        java.lang.String $r2, $r5;
        java.lang.Throwable $r3;
        java.io.PrintWriter r6;
        java.lang.RuntimeException r8;
        java.net.URISyntaxException r9;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r6 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

     label1:
        r1 = specialinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.content.Intent makeIntent(int)>(-2);

     label2:
        $r2 = virtualinvoke r1.<android.content.Intent: java.lang.String toUri(int)>(i0);

        virtualinvoke r6.<java.io.PrintWriter: void println(java.lang.String)>($r2);

        return 0;

     label3:
        $r3 := @caughtexception;

        r8 = new java.lang.RuntimeException;

        r9 = (java.net.URISyntaxException) $r3;

        $r5 = virtualinvoke r9.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3);

        throw r8;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    int runTraceIpc(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r7;
        java.io.PrintWriter r2, r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("start");

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTraceIpcStart(java.io.PrintWriter)>(r8);

        return $i1;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("stop");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: int runTraceIpcStop(java.io.PrintWriter)>(r8);

        return $i0;

     label2:
        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown trace ipc command \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;
    }

    int runTraceIpcStart(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        android.app.IActivityManager $r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Starting IPC tracing.");

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        interfaceinvoke $r2.<android.app.IActivityManager: boolean startBinderTracking()>();

        return 0;
    }

    int runTraceIpcStop(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.File $r1;
        android.app.IActivityManager $r2;
        boolean $z1, $z2;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r6, $r10, r13, r14;
        java.io.PrintWriter r11, r12;
        android.os.ParcelFileDescriptor r16;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        r12 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        r13 = null;

     label1:
        r14 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r14 == null goto label3;

        $z2 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("--dump-file");

        if $z2 == 0 goto label2;

        r13 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        goto label1;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r12.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        return -1;

     label3:
        if r13 != null goto label4;

        virtualinvoke r12.<java.io.PrintWriter: void println(java.lang.String)>("Error: Specify filename to dump logs to.");

        return -1;

     label4:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r13);

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        r16 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: android.os.ParcelFileDescriptor openFileForSystem(java.lang.String,java.lang.String)>(r13, "w");

        if r16 != null goto label5;

        return -1;

     label5:
        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $z1 = interfaceinvoke $r2.<android.app.IActivityManager: boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>(r16);

        if $z1 != 0 goto label6;

        virtualinvoke r12.<java.io.PrintWriter: void println(java.lang.String)>("STOP TRACE FAILED.");

        return -1;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopped IPC tracing. Dumping logs to: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return 0;
    }

    int runTrackAssociations(java.io.PrintWriter)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        com.android.server.am.ActivityManagerService r1, $r2, $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        java.io.PrintWriter r6;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r6 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r2.<com.android.server.am.ActivityManagerService: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ACTIVITY_WATCHER", "runTrackAssociations()");

        r1 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.am.ActivityManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $z0 = $r3.<com.android.server.am.ActivityManagerService: boolean mTrackingAssociations>;

        if $z0 != 0 goto label3;

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r4.<com.android.server.am.ActivityManagerService: boolean mTrackingAssociations> = 1;

        virtualinvoke r6.<java.io.PrintWriter: void println(java.lang.String)>("Association tracking started.");

     label2:
        goto label4;

     label3:
        virtualinvoke r6.<java.io.PrintWriter: void println(java.lang.String)>("Association tracking already enabled.");

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int runUnlockUser(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1, $r8;
        int i0;
        byte[] r2, r3;
        java.lang.String $r4, $r5, $r6;
        android.app.IActivityManager $r7;
        boolean $z0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r5 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r2 = staticinvoke <com.android.server.am.ActivityManagerShellCommand: byte[] argToBytes(java.lang.String)>($r5);

        $r6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        r3 = staticinvoke <com.android.server.am.ActivityManagerShellCommand: byte[] argToBytes(java.lang.String)>($r6);

        $r7 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityManager mInterface>;

        $z0 = interfaceinvoke $r7.<android.app.IActivityManager: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>(i0, r2, r3, null);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Success: user unlocked");

        goto label2;

     label1:
        $r8 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("Error: could not unlock user");

     label2:
        return 0;
    }

    int runUntrackAssociations(java.io.PrintWriter)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        com.android.server.am.ActivityManagerService r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        android.util.SparseArray $r6;
        java.lang.Throwable $r7;
        java.io.PrintWriter r8;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r8 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r2.<com.android.server.am.ActivityManagerService: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ACTIVITY_WATCHER", "runUntrackAssociations()");

        r1 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.am.ActivityManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $z0 = $r3.<com.android.server.am.ActivityManagerService: boolean mTrackingAssociations>;

        if $z0 == 0 goto label3;

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r4.<com.android.server.am.ActivityManagerService: boolean mTrackingAssociations> = 0;

        $r5 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r6 = $r5.<com.android.server.am.ActivityManagerService: android.util.SparseArray mAssociations>;

        virtualinvoke $r6.<android.util.SparseArray: void clear()>();

        virtualinvoke r8.<java.io.PrintWriter: void println(java.lang.String)>("Association tracking stopped.");

     label2:
        goto label4;

     label3:
        virtualinvoke r8.<java.io.PrintWriter: void println(java.lang.String)>("Association tracking not running.");

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.am.ActivityManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int runUpdateApplicationInfo(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        int i0;
        java.lang.String r3, $r4, $r6;
        java.util.ArrayList $r5;
        com.android.server.am.ActivityManagerService $r7;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r4 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label1:
        r3 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArg()>();

        if r3 == null goto label2;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label1;

     label2:
        $r7 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r7.<com.android.server.am.ActivityManagerService: void scheduleApplicationInfoChanged(java.util.List,int)>($r5, i0);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Packages updated with most recent ApplicationInfos.");

        return 0;
    }

    int runWaitForBroadcastIdle(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.am.ActivityManagerService $r2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r2.<com.android.server.am.ActivityManagerService: void waitForBroadcastIdle(java.io.PrintWriter)>(r1);

        return 0;
    }

    int runWatchUids(java.io.PrintWriter) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r9, $r10;
        java.io.PrintWriter r2, r11;
        com.android.server.am.ActivityManagerShellCommand$MyUidObserver $r3;
        com.android.server.am.ActivityManagerService $r4;
        java.io.InputStream $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;
        int i0;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        i0 = -1;

     label1:
        r1 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--oom");

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        goto label1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown option: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return -1;

     label3:
        $r3 = new com.android.server.am.ActivityManagerShellCommand$MyUidObserver;

        $r4 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r5 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.InputStream getRawInputStream()>();

        specialinvoke $r3.<com.android.server.am.ActivityManagerShellCommand$MyUidObserver: void <init>(com.android.server.am.ActivityManagerService,java.io.PrintWriter,java.io.InputStream,int)>($r4, r11, $r5, i0);

        virtualinvoke $r3.<com.android.server.am.ActivityManagerShellCommand$MyUidObserver: void run()>();

        return 0;
    }

    int runWrite(java.io.PrintWriter)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.am.ActivityManagerService $r2, $r3;
        com.android.server.wm.ActivityTaskManagerInternal $r4;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        virtualinvoke $r2.<com.android.server.am.ActivityManagerService: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ACTIVITY_WATCHER", "registerUidObserver()");

        $r3 = r0.<com.android.server.am.ActivityManagerShellCommand: com.android.server.am.ActivityManagerService mInternal>;

        $r4 = $r3.<com.android.server.am.ActivityManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerInternal: void flushRecentTasks()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("All tasks persisted.");

        return 0;
    }

    void setBoundsSide(android.graphics.Rect, java.lang.String, int)
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        java.lang.String r1, $r6;
        int i0, i1;
        java.io.PrintWriter r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3;
        android.graphics.Rect r7;
        byte b2;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        r7 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        if i1 == 98 goto label05;

        if i1 == 108 goto label04;

        if i1 == 114 goto label03;

        if i1 == 116 goto label02;

     label01:
        goto label06;

     label02:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("t");

        if $z3 == 0 goto label01;

        b2 = 2;

        goto label07;

     label03:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("r");

        if $z2 == 0 goto label01;

        b2 = 1;

        goto label07;

     label04:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("l");

        if $z1 == 0 goto label01;

        b2 = 0;

        goto label07;

     label05:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("b");

        if $z0 == 0 goto label01;

        b2 = 3;

        goto label07;

     label06:
        b2 = -1;

     label07:
        if b2 == 0 goto label11;

        if b2 == 1 goto label10;

        if b2 == 2 goto label09;

        if b2 == 3 goto label08;

        r2 = virtualinvoke r0.<com.android.server.am.ActivityManagerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown set side: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label12;

     label08:
        r7.<android.graphics.Rect: int bottom> = i0;

        goto label12;

     label09:
        r7.<android.graphics.Rect: int top> = i0;

        goto label12;

     label10:
        r7.<android.graphics.Rect: int right> = i0;

        goto label12;

     label11:
        r7.<android.graphics.Rect: int left> = i0;

     label12:
        return;
    }

    void taskResize(int, android.graphics.Rect, int, boolean) throws android.os.RemoteException
    {
        com.android.server.am.ActivityManagerShellCommand r0;
        int i0, i1, i3;
        boolean z0;
        long l2;
        android.app.IActivityTaskManager $r1;
        java.lang.Throwable $r2;
        android.graphics.Rect r3;

        r0 := @this: com.android.server.am.ActivityManagerShellCommand;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Rect;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r1 = r0.<com.android.server.am.ActivityManagerShellCommand: android.app.IActivityTaskManager mTaskInterface>;

        i3 = (int) z0;

        interfaceinvoke $r1.<android.app.IActivityTaskManager: boolean resizeTask(int,android.graphics.Rect,int)>(i0, r3, i3);

        l2 = (long) i1;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(l2);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
