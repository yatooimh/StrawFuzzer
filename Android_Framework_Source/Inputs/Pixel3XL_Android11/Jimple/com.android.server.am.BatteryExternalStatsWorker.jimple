class com.android.server.am.BatteryExternalStatsWorker extends java.lang.Object implements com.android.internal.os.BatteryStatsImpl$ExternalStatsSync
{
    private static final boolean DEBUG;
    private static final long EXTERNAL_STATS_SYNC_TIMEOUT_MILLIS;
    private static final long MAX_WIFI_STATS_SAMPLE_ERROR_MILLIS;
    private static final java.lang.String TAG;
    private java.util.concurrent.Future mBatteryLevelSync;
    private final android.content.Context mContext;
    private java.util.concurrent.Future mCurrentFuture;
    private java.lang.String mCurrentReason;
    private final java.util.concurrent.ScheduledExecutorService mExecutorService;
    private long mLastCollectionTimeStamp;
    private android.os.connectivity.WifiActivityEnergyInfo mLastInfo;
    private boolean mOnBattery;
    private boolean mOnBatteryScreenOff;
    private final com.android.internal.os.BatteryStatsImpl mStats;
    private final java.lang.Runnable mSyncTask;
    private android.telephony.TelephonyManager mTelephony;
    private final android.util.IntArray mUidsToRemove;
    private int mUpdateFlags;
    private boolean mUseLatestStates;
    private java.util.concurrent.Future mWakelockChangesUpdate;
    private android.net.wifi.WifiManager mWifiManager;
    private final java.lang.Object mWorkerLock;
    private final java.lang.Runnable mWriteTask;

    void <init>(android.content.Context, com.android.internal.os.BatteryStatsImpl)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        android.content.Context r1;
        com.android.internal.os.BatteryStatsImpl r2;
        com.android.server.am.'-$$Lambda$BatteryExternalStatsWorker$ML8sXrbYk0MflPvsY2cfCYlcU0w' $r3;
        java.util.concurrent.ScheduledExecutorService $r4;
        android.util.IntArray r10;
        java.lang.Object r11;
        android.os.connectivity.WifiActivityEnergyInfo r12;
        com.android.server.am.BatteryExternalStatsWorker$1 r13;
        com.android.server.am.BatteryExternalStatsWorker$2 r14;
        java.util.concurrent.ThreadFactory r15;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.os.BatteryStatsImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <com.android.server.am._$$Lambda$BatteryExternalStatsWorker$ML8sXrbYk0MflPvsY2cfCYlcU0w: com.android.server.am.'-$$Lambda$BatteryExternalStatsWorker$ML8sXrbYk0MflPvsY2cfCYlcU0w' INSTANCE>;

        r15 = (java.util.concurrent.ThreadFactory) $r3;

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>(r15);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService> = $r4;

        r0.<com.android.server.am.BatteryExternalStatsWorker: int mUpdateFlags> = 0;

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mCurrentFuture> = null;

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.String mCurrentReason> = null;

        r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mUseLatestStates> = 1;

        r10 = new android.util.IntArray;

        specialinvoke r10.<android.util.IntArray: void <init>()>();

        r0.<com.android.server.am.BatteryExternalStatsWorker: android.util.IntArray mUidsToRemove> = r10;

        r11 = new java.lang.Object;

        specialinvoke r11.<java.lang.Object: void <init>()>();

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.Object mWorkerLock> = r11;

        r0.<com.android.server.am.BatteryExternalStatsWorker: android.net.wifi.WifiManager mWifiManager> = null;

        r0.<com.android.server.am.BatteryExternalStatsWorker: android.telephony.TelephonyManager mTelephony> = null;

        r12 = new android.os.connectivity.WifiActivityEnergyInfo;

        specialinvoke r12.<android.os.connectivity.WifiActivityEnergyInfo: void <init>(long,int,long,long,long,long)>(0L, 0, 0L, 0L, 0L, 0L);

        r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo> = r12;

        r13 = new com.android.server.am.BatteryExternalStatsWorker$1;

        specialinvoke r13.<com.android.server.am.BatteryExternalStatsWorker$1: void <init>(com.android.server.am.BatteryExternalStatsWorker)>(r0);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.Runnable mSyncTask> = r13;

        r14 = new com.android.server.am.BatteryExternalStatsWorker$2;

        specialinvoke r14.<com.android.server.am.BatteryExternalStatsWorker$2: void <init>(com.android.server.am.BatteryExternalStatsWorker)>(r0);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.Runnable mWriteTask> = r14;

        r0.<com.android.server.am.BatteryExternalStatsWorker: android.content.Context mContext> = r1;

        r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats> = r2;

        return;
    }

    static int access$000(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        int $i0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $i0 = r0.<com.android.server.am.BatteryExternalStatsWorker: int mUpdateFlags>;

        return $i0;
    }

    static int access$002(com.android.server.am.BatteryExternalStatsWorker, int)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        int i0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        i0 := @parameter1: int;

        r0.<com.android.server.am.BatteryExternalStatsWorker: int mUpdateFlags> = i0;

        return i0;
    }

    static java.lang.String access$100(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.String mCurrentReason>;

        return $r1;
    }

    static com.android.internal.os.BatteryStatsImpl access$1000(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        com.android.internal.os.BatteryStatsImpl $r1;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        return $r1;
    }

    static java.lang.String access$102(com.android.server.am.BatteryExternalStatsWorker, java.lang.String)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.String mCurrentReason> = r1;

        return r1;
    }

    static long access$1102(com.android.server.am.BatteryExternalStatsWorker, long)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        long l0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        l0 := @parameter1: long;

        r0.<com.android.server.am.BatteryExternalStatsWorker: long mLastCollectionTimeStamp> = l0;

        return l0;
    }

    static android.util.IntArray access$200(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        android.util.IntArray $r1;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.util.IntArray mUidsToRemove>;

        return $r1;
    }

    static boolean access$300(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $z0 = r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mOnBattery>;

        return $z0;
    }

    static boolean access$400(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $z0 = r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mOnBatteryScreenOff>;

        return $z0;
    }

    static boolean access$500(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $z0 = r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mUseLatestStates>;

        return $z0;
    }

    static boolean access$502(com.android.server.am.BatteryExternalStatsWorker, boolean)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mUseLatestStates> = z0;

        return z0;
    }

    static java.util.concurrent.Future access$602(com.android.server.am.BatteryExternalStatsWorker, java.util.concurrent.Future)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.util.concurrent.Future r1;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        r1 := @parameter1: java.util.concurrent.Future;

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mCurrentFuture> = r1;

        return r1;
    }

    static void access$700(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: void cancelSyncDueToBatteryLevelChangeLocked()>();

        return;
    }

    static java.lang.Object access$800(com.android.server.am.BatteryExternalStatsWorker)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.Object mWorkerLock>;

        return $r1;
    }

    static void access$900(com.android.server.am.BatteryExternalStatsWorker, java.lang.String, int, boolean, boolean, boolean)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.lang.String r1;
        int i0;
        boolean z0, z1, z2;

        r0 := @parameter0: com.android.server.am.BatteryExternalStatsWorker;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: void updateExternalStatsLocked(java.lang.String,int,boolean,boolean,boolean)>(r1, i0, z0, z1, z2);

        return;
    }

    private static android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)
    {
        android.os.SynchronousResultReceiver r0;
        android.os.Bundle $r1, $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r10;
        android.os.SynchronousResultReceiver$Result r11;
        android.os.Parcelable r12;

        r0 := @parameter0: android.os.SynchronousResultReceiver;

        if r0 != null goto label1;

        return null;

     label1:
        r11 = virtualinvoke r0.<android.os.SynchronousResultReceiver: android.os.SynchronousResultReceiver$Result awaitResult(long)>(2000L);

        $r1 = r11.<android.os.SynchronousResultReceiver$Result: android.os.Bundle bundle>;

        if $r1 == null goto label3;

        $r2 = r11.<android.os.SynchronousResultReceiver$Result: android.os.Bundle bundle>;

        virtualinvoke $r2.<android.os.Bundle: void setDefusable(boolean)>(1);

        $r3 = r11.<android.os.SynchronousResultReceiver$Result: android.os.Bundle bundle>;

        r12 = virtualinvoke $r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("controller_activity");

     label2:
        if r12 == null goto label3;

        return r12;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timeout reading ");

        $r7 = virtualinvoke r0.<android.os.SynchronousResultReceiver: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stats");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BatteryExternalStatsWorker", $r10);

     label5:
        return null;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
    }

    private void cancelSyncDueToBatteryLevelChangeLocked()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.util.concurrent.Future r1;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mBatteryLevelSync>;

        if r1 == null goto label1;

        interfaceinvoke r1.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mBatteryLevelSync> = null;

     label1:
        return;
    }

    private android.os.connectivity.WifiActivityEnergyInfo extractDeltaLocked(android.os.connectivity.WifiActivityEnergyInfo)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        long l0, l1, l2, l3, l5, $l6, $l7, $l8, $l9, $l10, $l11, $l18, $l19, $l20, $l21, $l23, $l24, $l25, $l26, l28, l29, l30, l31, l32, l33, l34, l35, l36, l37, $l38, $l39, $l40, $l41, $l42, $l43, l45, l46;
        int i4;
        android.os.connectivity.WifiActivityEnergyInfo $r1, $r2, $r3, $r4, $r5, $r6, r29, $r31;
        byte $b12, $b14, $b15, $b16, $b17, $b22, $b44;
        java.lang.StringBuilder $r7, $r11;
        java.lang.String $r10, $r28;
        boolean z0;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r29 := @parameter0: android.os.connectivity.WifiActivityEnergyInfo;

        $l6 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getTimeSinceBootMillis()>();

        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo>;

        $l7 = virtualinvoke $r1.<android.os.connectivity.WifiActivityEnergyInfo: long getTimeSinceBootMillis()>();

        l28 = $l6 - $l7;

        $r2 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo>;

        l29 = virtualinvoke $r2.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerScanDurationMillis()>();

        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo>;

        l0 = virtualinvoke $r3.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()>();

        $r4 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo>;

        l1 = virtualinvoke $r4.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()>();

        $r5 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo>;

        l2 = virtualinvoke $r5.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()>();

        $r6 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo>;

        l30 = virtualinvoke $r6.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerEnergyUsedMicroJoules()>();

        l3 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getTimeSinceBootMillis()>();

        i4 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: int getStackState()>();

        $l8 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()>();

        l31 = $l8 - l1;

        $l9 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()>();

        l32 = $l9 - l2;

        $l10 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()>();

        l33 = $l10 - l0;

        $l11 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerScanDurationMillis()>();

        l34 = $l11 - l29;

        $b12 = l31 cmp 0L;

        if $b12 < 0 goto label5;

        $b14 = l32 cmp 0L;

        if $b14 < 0 goto label5;

        $b15 = l34 cmp 0L;

        if $b15 < 0 goto label5;

        $b16 = l33 cmp 0L;

        if $b16 >= 0 goto label1;

        goto label5;

     label1:
        l5 = l31 + l32;

        $b17 = l5 cmp l28;

        if $b17 <= 0 goto label3;

        $l21 = l28 + 750L;

        $b22 = l5 cmp $l21;

        if $b22 <= 0 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total Active time ");

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>(l5, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is longer than sample period ");

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>(l28, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previous WiFi snapshot: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("idle=");

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>(l0, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rx=");

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>(l2, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tx=");

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>(l1, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" e=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l30);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current WiFi snapshot: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("idle=");

        $l23 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l23, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rx=");

        $l24 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l24, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tx=");

        $l25 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l25, $r11);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" e=");

        $l26 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerEnergyUsedMicroJoules()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l26);

        $r28 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BatteryExternalStatsWorker", $r28);

        goto label2;

     label2:
        l35 = 0L;

        goto label4;

     label3:
        l35 = l28 - l5;

     label4:
        $l18 = staticinvoke <java.lang.Math: long max(long,long)>(0L, l33);

        l36 = staticinvoke <java.lang.Math: long min(long,long)>(l35, $l18);

        $l19 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerEnergyUsedMicroJoules()>();

        $l20 = $l19 - l30;

        l37 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l20);

        z0 = 0;

        goto label8;

     label5:
        $l38 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()>();

        $l39 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()>();

        $l40 = $l38 + $l39;

        $l41 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()>();

        $l42 = $l40 + $l41;

        $l43 = l28 + 750L;

        $b44 = $l42 cmp $l43;

        if $b44 > 0 goto label6;

        l37 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerEnergyUsedMicroJoules()>();

        l32 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()>();

        l31 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()>();

        l45 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()>();

        l46 = virtualinvoke r29.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerScanDurationMillis()>();

        goto label7;

     label6:
        l37 = 0L;

        l32 = 0L;

        l31 = 0L;

        l45 = 0L;

        l46 = 0L;

     label7:
        z0 = 1;

        l34 = l46;

        l36 = l45;

     label8:
        r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo mLastInfo> = r29;

        $r31 = new android.os.connectivity.WifiActivityEnergyInfo;

        specialinvoke $r31.<android.os.connectivity.WifiActivityEnergyInfo: void <init>(long,int,long,long,long,long,long)>(l3, i4, l31, l32, l34, l36, l37);

        if z0 == 0 goto label9;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WiFi energy data was reset, new WiFi energy data is ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BatteryExternalStatsWorker", $r10);

     label9:
        return $r31;
    }

    static void lambda$new$0(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        int $i0;

        r0 := @parameter0: java.lang.Runnable;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        staticinvoke <android.os.ThreadLocalWorkSource: long setUid(int)>($i0);

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        return;
    }

    static java.lang.Thread lambda$new$1(java.lang.Runnable)
    {
        java.lang.Thread $r0;
        com.android.server.am._$$Lambda$BatteryExternalStatsWorker$ddVY5lmqswnSjXppAxPTOHbuzzQ $r1;
        java.lang.Runnable r2;

        r2 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.Thread;

        $r1 = new com.android.server.am._$$Lambda$BatteryExternalStatsWorker$ddVY5lmqswnSjXppAxPTOHbuzzQ;

        specialinvoke $r1.<com.android.server.am._$$Lambda$BatteryExternalStatsWorker$ddVY5lmqswnSjXppAxPTOHbuzzQ: void <init>(java.lang.Runnable)>(r2);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r1, "batterystats-worker");

        virtualinvoke $r0.<java.lang.Thread: void setPriority(int)>(5);

        return $r0;
    }

    static void lambda$updateExternalStatsLocked$5(android.os.SynchronousResultReceiver, android.os.connectivity.WifiActivityEnergyInfo)
    {
        android.os.SynchronousResultReceiver r0;
        android.os.connectivity.WifiActivityEnergyInfo r1;
        android.os.Bundle $r3;

        r0 := @parameter0: android.os.SynchronousResultReceiver;

        r1 := @parameter1: android.os.connectivity.WifiActivityEnergyInfo;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("controller_activity", r1);

        virtualinvoke r0.<android.os.SynchronousResultReceiver: void send(int,android.os.Bundle)>(0, $r3);

        return;
    }

    private java.util.concurrent.Future scheduleDelayedSyncLocked(java.util.concurrent.Future, java.lang.Runnable, long)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.util.concurrent.Future r1;
        java.lang.Runnable r2;
        long l0;
        java.util.concurrent.ScheduledExecutorService $r3, $r5;
        boolean $z0;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.ScheduledFuture $r6;
        byte $b1;
        java.lang.IllegalStateException $r7;
        java.util.concurrent.CompletableFuture $r8;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r1 := @parameter0: java.util.concurrent.Future;

        r2 := @parameter1: java.lang.Runnable;

        l0 := @parameter2: long;

        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $z0 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("worker shutdown");

        $r8 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable)>($r7);

        return $r8;

     label1:
        if r1 == null goto label3;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label2;

        interfaceinvoke r1.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

        goto label3;

     label2:
        return r1;

     label3:
        $r5 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r2, l0, $r4);

        return $r6;
    }

    private java.util.concurrent.Future scheduleSyncLocked(java.lang.String, int)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        java.util.concurrent.ScheduledExecutorService $r2, $r6;
        boolean $z0;
        java.util.concurrent.Future $r3, $r4, $r7;
        java.lang.Runnable $r5;
        java.lang.IllegalStateException $r8;
        java.util.concurrent.CompletableFuture $r9;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("worker shutdown");

        $r9 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable)>($r8);

        return $r9;

     label1:
        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mCurrentFuture>;

        if $r3 != null goto label2;

        r0.<com.android.server.am.BatteryExternalStatsWorker: int mUpdateFlags> = i0;

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.String mCurrentReason> = r1;

        $r6 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $r5 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.Runnable mSyncTask>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r5);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mCurrentFuture> = $r7;

     label2:
        $i1 = r0.<com.android.server.am.BatteryExternalStatsWorker: int mUpdateFlags>;

        $i2 = $i1 | i0;

        r0.<com.android.server.am.BatteryExternalStatsWorker: int mUpdateFlags> = $i2;

        $r4 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mCurrentFuture>;

        return $r4;
    }

    private void updateExternalStatsLocked(java.lang.String, int, boolean, boolean, boolean)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6, z7, z8, z9;
        java.lang.StringBuilder $r1, $r4, r61;
        java.lang.String $r2, $r5, $r8, r39;
        com.android.internal.os.BatteryStatsImpl $r3, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r18, r43, $r44, r50, r58, $r59;
        android.os.connectivity.WifiActivityEnergyInfo $r7, r53;
        android.telephony.TelephonyManager $r16, $r17, $r20, $r23;
        android.os.SynchronousResultReceiver $r19, $r24, $r26, r40, r42, r45, r47, r49;
        android.content.Context $r21, $r31;
        java.lang.Object $r22, $r32;
        android.net.wifi.WifiManager $r25, $r28, $r33, r41;
        com.android.server.am.BatteryExternalStatsWorker$3 $r27;
        com.android.server.am._$$Lambda$BatteryExternalStatsWorker$MJXTdtPzBwRCdTjCDCE77VXPHBk $r29;
        android.os.IBinder $r30;
        java.lang.Throwable $r34, $r35, $r36, $r37, $r38, r60;
        android.bluetooth.BluetoothAdapter r48;
        android.os.Parcelable $r52, $r54, $r56;
        android.bluetooth.BluetoothActivityEnergyInfo r55;
        android.telephony.ModemActivityInfo r57;
        long $l6, $l7;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r39 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z4 := @parameter2: boolean;

        z5 := @parameter3: boolean;

        z6 := @parameter4: boolean;

        r40 = null;

        z7 = 0;

        $i1 = i0 & 2;

        if $i1 == 0 goto label09;

        $r25 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.net.wifi.WifiManager mWifiManager>;

        if $r25 != null goto label01;

        $r30 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("wifi");

        if $r30 == null goto label01;

        $r31 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.content.Context mContext>;

        $r32 = virtualinvoke $r31.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/wifi/WifiManager;");

        $r33 = (android.net.wifi.WifiManager) $r32;

        r0.<com.android.server.am.BatteryExternalStatsWorker: android.net.wifi.WifiManager mWifiManager> = $r33;

     label01:
        r41 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.net.wifi.WifiManager mWifiManager>;

        if r41 == null goto label02;

        $z3 = virtualinvoke r41.<android.net.wifi.WifiManager: boolean isEnhancedPowerReportingSupported()>();

        if $z3 == 0 goto label02;

        $r26 = new android.os.SynchronousResultReceiver;

        specialinvoke $r26.<android.os.SynchronousResultReceiver: void <init>(java.lang.String)>("wifi");

        r42 = $r26;

        $r28 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.net.wifi.WifiManager mWifiManager>;

        $r27 = new com.android.server.am.BatteryExternalStatsWorker$3;

        specialinvoke $r27.<com.android.server.am.BatteryExternalStatsWorker$3: void <init>(com.android.server.am.BatteryExternalStatsWorker)>(r0);

        $r29 = new com.android.server.am._$$Lambda$BatteryExternalStatsWorker$MJXTdtPzBwRCdTjCDCE77VXPHBk;

        specialinvoke $r29.<com.android.server.am._$$Lambda$BatteryExternalStatsWorker$MJXTdtPzBwRCdTjCDCE77VXPHBk: void <init>(android.os.SynchronousResultReceiver)>($r26);

        virtualinvoke $r28.<android.net.wifi.WifiManager: void getWifiActivityEnergyInfoAsync(java.util.concurrent.Executor,android.net.wifi.WifiManager$OnWifiActivityEnergyInfoListener)>($r27, $r29);

        goto label03;

     label02:
        r42 = null;

     label03:
        r43 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        entermonitor r43;

     label04:
        $r44 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r44.<com.android.internal.os.BatteryStatsImpl: void updateRailStatsLocked()>();

        exitmonitor r43;

     label05:
        z7 = 1;

        r45 = r42;

        goto label10;

     label06:
        $r36 := @caughtexception;

     label07:
        exitmonitor r43;

     label08:
        throw $r36;

     label09:
        r45 = null;

     label10:
        r47 = null;

        $i2 = i0 & 8;

        if $i2 == 0 goto label11;

        r48 = staticinvoke <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>();

        r47 = null;

        if r48 == null goto label11;

        $r24 = new android.os.SynchronousResultReceiver;

        specialinvoke $r24.<android.os.SynchronousResultReceiver: void <init>(java.lang.String)>("bluetooth");

        r47 = $r24;

        virtualinvoke r48.<android.bluetooth.BluetoothAdapter: void requestControllerActivityEnergyInfo(android.os.ResultReceiver)>($r24);

     label11:
        $i5 = i0 & 4;

        if $i5 == 0 goto label19;

        $r16 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.telephony.TelephonyManager mTelephony>;

        if $r16 != null goto label12;

        $r21 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.content.Context mContext>;

        $r22 = virtualinvoke $r21.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        $r23 = (android.telephony.TelephonyManager) $r22;

        r0.<com.android.server.am.BatteryExternalStatsWorker: android.telephony.TelephonyManager mTelephony> = $r23;

     label12:
        r49 = null;

        $r17 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.telephony.TelephonyManager mTelephony>;

        if $r17 == null goto label13;

        $r19 = new android.os.SynchronousResultReceiver;

        specialinvoke $r19.<android.os.SynchronousResultReceiver: void <init>(java.lang.String)>("telephony");

        r49 = $r19;

        $r20 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.telephony.TelephonyManager mTelephony>;

        virtualinvoke $r20.<android.telephony.TelephonyManager: void requestModemActivityInfo(android.os.ResultReceiver)>($r19);

     label13:
        r40 = r49;

        if z7 != 0 goto label19;

        r50 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        entermonitor r50;

     label14:
        $r18 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r18.<com.android.internal.os.BatteryStatsImpl: void updateRailStatsLocked()>();

        exitmonitor r50;

     label15:
        r40 = r49;

        goto label19;

     label16:
        $r35 := @caughtexception;

     label17:
        exitmonitor r50;

     label18:
        throw $r35;

     label19:
        $r52 = staticinvoke <com.android.server.am.BatteryExternalStatsWorker: android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)>(r45);

        r53 = (android.os.connectivity.WifiActivityEnergyInfo) $r52;

        $r54 = staticinvoke <com.android.server.am.BatteryExternalStatsWorker: android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)>(r47);

        r55 = (android.bluetooth.BluetoothActivityEnergyInfo) $r54;

        $r56 = staticinvoke <com.android.server.am.BatteryExternalStatsWorker: android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)>(r40);

        r57 = (android.telephony.ModemActivityInfo) $r56;

        r58 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        entermonitor r58;

     label20:
        $r59 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        $l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r59.<com.android.internal.os.BatteryStatsImpl: void addHistoryEventLocked(long,long,int,java.lang.String,int)>($l6, $l7, 14, r39, 0);

     label21:
        $i8 = i0 & 1;

        if $i8 == 0 goto label29;

        if z6 == 0 goto label26;

     label22:
        $r14 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        z8 = virtualinvoke $r14.<com.android.internal.os.BatteryStatsImpl: boolean isOnBatteryLocked()>();

     label23:
        $r15 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        z9 = virtualinvoke $r15.<com.android.internal.os.BatteryStatsImpl: boolean isOnBatteryScreenOffLocked()>();

     label24:
        z5 = z9;

        goto label27;

     label25:
        $r37 := @caughtexception;

        r60 = $r37;

        goto label44;

     label26:
        z8 = z4;

     label27:
        $r13 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r13.<com.android.internal.os.BatteryStatsImpl: void updateCpuTimeLocked(boolean,boolean)>(z8, z5);

     label28:
        goto label29;

     label29:
        $i3 = i0 & 31;

        if $i3 == 0 goto label31;

     label30:
        $r11 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r11.<com.android.internal.os.BatteryStatsImpl: void updateKernelWakelocksLocked()>();

        $r12 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r12.<com.android.internal.os.BatteryStatsImpl: void updateKernelMemoryBandwidthLocked()>();

     label31:
        $i4 = i0 & 16;

        if $i4 == 0 goto label33;

     label32:
        $r10 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r10.<com.android.internal.os.BatteryStatsImpl: void updateRpmStatsLocked()>();

     label33:
        if r55 == null goto label37;

     label34:
        $z2 = virtualinvoke r55.<android.bluetooth.BluetoothActivityEnergyInfo: boolean isValid()>();

        if $z2 == 0 goto label36;

        $r9 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r9.<com.android.internal.os.BatteryStatsImpl: void updateBluetoothStateLocked(android.bluetooth.BluetoothActivityEnergyInfo)>(r55);

     label35:
        goto label37;

     label36:
        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bluetooth info is invalid: ");

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r55);

        $r8 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BatteryExternalStatsWorker", $r8);

     label37:
        exitmonitor r58;

     label38:
        if r53 == null goto label40;

        $z1 = virtualinvoke r53.<android.os.connectivity.WifiActivityEnergyInfo: boolean isValid()>();

        if $z1 == 0 goto label39;

        $r6 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        $r7 = specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: android.os.connectivity.WifiActivityEnergyInfo extractDeltaLocked(android.os.connectivity.WifiActivityEnergyInfo)>(r53);

        virtualinvoke $r6.<com.android.internal.os.BatteryStatsImpl: void updateWifiState(android.os.connectivity.WifiActivityEnergyInfo)>($r7);

        goto label40;

     label39:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wifi info is invalid: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r53);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BatteryExternalStatsWorker", $r5);

     label40:
        if r57 == null goto label42;

        $z0 = virtualinvoke r57.<android.telephony.ModemActivityInfo: boolean isValid()>();

        if $z0 == 0 goto label41;

        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r3.<com.android.internal.os.BatteryStatsImpl: void updateMobileRadioState(android.telephony.ModemActivityInfo)>(r57);

        goto label42;

     label41:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("modem info is invalid: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r57);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BatteryExternalStatsWorker", $r2);

     label42:
        return;

     label43:
        $r34 := @caughtexception;

        r60 = $r34;

     label44:
        exitmonitor r58;

     label45:
        throw r60;

     label46:
        $r38 := @caughtexception;

        r60 = $r38;

        goto label44;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label20 to label21 with label43;
        catch java.lang.Throwable from label22 to label23 with label43;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label27 to label28 with label46;
        catch java.lang.Throwable from label30 to label31 with label46;
        catch java.lang.Throwable from label32 to label33 with label46;
        catch java.lang.Throwable from label34 to label35 with label46;
        catch java.lang.Throwable from label36 to label37 with label46;
        catch java.lang.Throwable from label37 to label38 with label46;
        catch java.lang.Throwable from label44 to label45 with label46;
    }

    public void cancelCpuSyncDueToWakelockChange()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.util.concurrent.Future $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mWakelockChangesUpdate>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mWakelockChangesUpdate>;

        interfaceinvoke $r3.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mWakelockChangesUpdate> = null;

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    long getLastCollectionTimeStamp()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        long l0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        entermonitor r0;

     label1:
        l0 = r0.<com.android.server.am.BatteryExternalStatsWorker: long mLastCollectionTimeStamp>;

        exitmonitor r0;

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$scheduleCpuSyncDueToWakelockChange$2$BatteryExternalStatsWorker()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        com.android.internal.os.BatteryStatsImpl $r1;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        virtualinvoke $r1.<com.android.internal.os.BatteryStatsImpl: void postBatteryNeedsCpuUpdateMsg()>();

        return;
    }

    public void lambda$scheduleCpuSyncDueToWakelockChange$3$BatteryExternalStatsWorker()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        com.android.server.am._$$Lambda$BatteryExternalStatsWorker$PpNEY15dspg9oLlkg1OsyjrPTqw $r2;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        virtualinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleSync(java.lang.String,int)>("wakelock-change", 1);

        $r2 = new com.android.server.am._$$Lambda$BatteryExternalStatsWorker$PpNEY15dspg9oLlkg1OsyjrPTqw;

        specialinvoke $r2.<com.android.server.am._$$Lambda$BatteryExternalStatsWorker$PpNEY15dspg9oLlkg1OsyjrPTqw: void <init>(com.android.server.am.BatteryExternalStatsWorker)>(r0);

        virtualinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: void scheduleRunnable(java.lang.Runnable)>($r2);

        return;
    }

    public void lambda$scheduleSyncDueToBatteryLevelChange$4$BatteryExternalStatsWorker()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        virtualinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleSync(java.lang.String,int)>("battery-level", 31);

        return;
    }

    public java.util.concurrent.Future scheduleCopyFromAllUidsCpuTimes(boolean, boolean)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        boolean z0, z1, $z2, $z3;
        com.android.internal.os.BatteryStatsImpl $r2, $r6, r13;
        java.util.concurrent.ScheduledExecutorService $r3, $r4;
        com.android.server.am.'-$$Lambda$7toxTvZDSEytL0rCkoEfGilPDWM' $r5;
        java.lang.Boolean $r7, $r8;
        com.android.internal.util.function.pooled.PooledRunnable $r9, $r10;
        java.lang.Throwable $r11, $r12;
        java.util.concurrent.Future r14;
        com.android.internal.util.function.TriConsumer r16;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r13 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        entermonitor r13;

     label01:
        $r2 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        $z2 = virtualinvoke $r2.<com.android.internal.os.BatteryStatsImpl: boolean trackPerProcStateCpuTimes()>();

        if $z2 != 0 goto label03;

        exitmonitor r13;

     label02:
        return null;

     label03:
        exitmonitor r13;

     label04:
        entermonitor r0;

     label05:
        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $z3 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z3 != 0 goto label07;

        $r4 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $r5 = <com.android.server.am._$$Lambda$7toxTvZDSEytL0rCkoEfGilPDWM: com.android.server.am.'-$$Lambda$7toxTvZDSEytL0rCkoEfGilPDWM' INSTANCE>;

        $r6 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        r16 = (com.android.internal.util.function.TriConsumer) $r5;

        $r9 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r16, $r6, $r7, $r8);

        $r10 = interfaceinvoke $r9.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        r14 = interfaceinvoke $r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r10);

        exitmonitor r0;

     label06:
        return r14;

     label07:
        exitmonitor r0;

     label08:
        return null;

     label09:
        $r12 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r12;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r13;

     label14:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public java.util.concurrent.Future scheduleCpuSyncDueToRemovedUid(int)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        int i0;
        android.util.IntArray $r1;
        java.lang.Throwable $r2;
        java.util.concurrent.Future r3;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: android.util.IntArray mUidsToRemove>;

        virtualinvoke $r1.<android.util.IntArray: void add(int)>(i0);

        r3 = specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleSyncLocked(java.lang.String,int)>("remove-uid", 1);

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.concurrent.Future scheduleCpuSyncDueToScreenStateChange(boolean, boolean)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        boolean z0, z1;
        java.util.concurrent.Future $r1, r3;
        int $i0, $i1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mCurrentFuture>;

        if $r1 == null goto label2;

        $i0 = r0.<com.android.server.am.BatteryExternalStatsWorker: int mUpdateFlags>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label3;

     label2:
        r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mOnBattery> = z0;

        r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mOnBatteryScreenOff> = z1;

        r0.<com.android.server.am.BatteryExternalStatsWorker: boolean mUseLatestStates> = 0;

     label3:
        r3 = specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleSyncLocked(java.lang.String,int)>("screen-state", 1);

        exitmonitor r0;

     label4:
        return r3;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.concurrent.Future scheduleCpuSyncDueToSettingChange()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.lang.Throwable $r1;
        java.util.concurrent.Future r2;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        entermonitor r0;

     label1:
        r2 = specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleSyncLocked(java.lang.String,int)>("setting-change", 1);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.concurrent.Future scheduleCpuSyncDueToWakelockChange(long)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        long l0;
        java.util.concurrent.Future r1, r4;
        java.lang.Throwable $r2;
        com.android.server.am._$$Lambda$BatteryExternalStatsWorker$r3x3xYmhrLG8kgeNVPXl5EILHwU r3;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mWakelockChangesUpdate>;

        r3 = new com.android.server.am._$$Lambda$BatteryExternalStatsWorker$r3x3xYmhrLG8kgeNVPXl5EILHwU;

        specialinvoke r3.<com.android.server.am._$$Lambda$BatteryExternalStatsWorker$r3x3xYmhrLG8kgeNVPXl5EILHwU: void <init>(com.android.server.am.BatteryExternalStatsWorker)>(r0);

        r4 = specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleDelayedSyncLocked(java.util.concurrent.Future,java.lang.Runnable,long)>(r1, r3, l0);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mWakelockChangesUpdate> = r4;

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.concurrent.Future scheduleReadProcStateCpuTimes(boolean, boolean, long)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        boolean z0, z1, $z2, $z3;
        long l0;
        com.android.internal.os.BatteryStatsImpl r1, $r2, $r6;
        java.util.concurrent.ScheduledExecutorService $r3, $r4;
        com.android.server.am.'-$$Lambda$cC4f0pNQX9_D9f8AXLmKk2sArGY' $r5;
        java.lang.Boolean $r7, $r8;
        com.android.internal.util.function.pooled.PooledRunnable $r9, $r10;
        java.util.concurrent.TimeUnit $r11;
        java.lang.Throwable $r12, $r13;
        java.util.concurrent.ScheduledFuture r14;
        com.android.internal.util.function.TriConsumer r17;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        l0 := @parameter2: long;

        r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        $z2 = virtualinvoke $r2.<com.android.internal.os.BatteryStatsImpl: boolean trackPerProcStateCpuTimes()>();

        if $z2 != 0 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        exitmonitor r1;

     label04:
        entermonitor r0;

     label05:
        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $z3 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z3 != 0 goto label07;

        $r4 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $r5 = <com.android.server.am._$$Lambda$cC4f0pNQX9_D9f8AXLmKk2sArGY: com.android.server.am.'-$$Lambda$cC4f0pNQX9_D9f8AXLmKk2sArGY' INSTANCE>;

        $r6 = r0.<com.android.server.am.BatteryExternalStatsWorker: com.android.internal.os.BatteryStatsImpl mStats>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        r17 = (com.android.internal.util.function.TriConsumer) $r5;

        $r9 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r17, $r6, $r7, $r8);

        $r10 = interfaceinvoke $r9.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r14 = interfaceinvoke $r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r10, l0, $r11);

        exitmonitor r0;

     label06:
        return r14;

     label07:
        exitmonitor r0;

     label08:
        return null;

     label09:
        $r12 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r12;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void scheduleRunnable(java.lang.Runnable)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.util.concurrent.ScheduledExecutorService $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r4;
        java.lang.Runnable r5;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r5 := @parameter0: java.lang.Runnable;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        interfaceinvoke $r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r5);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.concurrent.Future scheduleSync(java.lang.String, int)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        int i0;
        java.lang.Throwable $r1;
        java.lang.String r2;
        java.util.concurrent.Future r3;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        r3 = specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleSyncLocked(java.lang.String,int)>(r2, i0);

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.concurrent.Future scheduleSyncDueToBatteryLevelChange(long)
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        long l0;
        com.android.server.am._$$Lambda$BatteryExternalStatsWorker$xR3yCbbVfCo3oq_xPiH7j5l5uac r1;
        java.lang.Throwable $r2;
        java.util.concurrent.Future r3, r4;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mBatteryLevelSync>;

        r1 = new com.android.server.am._$$Lambda$BatteryExternalStatsWorker$xR3yCbbVfCo3oq_xPiH7j5l5uac;

        specialinvoke r1.<com.android.server.am._$$Lambda$BatteryExternalStatsWorker$xR3yCbbVfCo3oq_xPiH7j5l5uac: void <init>(com.android.server.am.BatteryExternalStatsWorker)>(r0);

        r4 = specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleDelayedSyncLocked(java.util.concurrent.Future,java.lang.Runnable,long)>(r3, r1, l0);

        r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future mBatteryLevelSync> = r4;

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.concurrent.Future scheduleWrite()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.util.concurrent.ScheduledExecutorService $r1, $r4;
        boolean $z0;
        java.lang.Runnable $r3;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException r6;
        java.util.concurrent.CompletableFuture r7;
        java.util.concurrent.Future r8;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z0 == 0 goto label3;

        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("worker shutdown");

        r7 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable)>(r6);

     label2:
        exitmonitor r0;

        return r7;

     label3:
        specialinvoke r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.Future scheduleSyncLocked(java.lang.String,int)>("write", 31);

        $r4 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $r3 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.lang.Runnable mWriteTask>;

        r8 = interfaceinvoke $r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r3);

     label4:
        exitmonitor r0;

        return r8;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void shutdown()
    {
        com.android.server.am.BatteryExternalStatsWorker r0;
        java.util.concurrent.ScheduledExecutorService $r1;

        r0 := @this: com.android.server.am.BatteryExternalStatsWorker;

        $r1 = r0.<com.android.server.am.BatteryExternalStatsWorker: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: java.util.List shutdownNow()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.am.BatteryExternalStatsWorker: java.lang.String TAG> = "BatteryExternalStatsWorker";

        <com.android.server.am.BatteryExternalStatsWorker: long MAX_WIFI_STATS_SAMPLE_ERROR_MILLIS> = 750L;

        <com.android.server.am.BatteryExternalStatsWorker: long EXTERNAL_STATS_SYNC_TIMEOUT_MILLIS> = 2000L;

        <com.android.server.am.BatteryExternalStatsWorker: boolean DEBUG> = 0;

        return;
    }
}
