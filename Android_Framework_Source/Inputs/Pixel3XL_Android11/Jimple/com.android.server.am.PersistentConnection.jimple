public abstract class com.android.server.am.PersistentConnection extends java.lang.Object
{
    private static final boolean DEBUG;
    private final java.lang.Runnable mBindForBackoffRunnable;
    private boolean mBound;
    private final android.content.ComponentName mComponentName;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private boolean mIsConnected;
    private long mLastConnectedTime;
    private final java.lang.Object mLock;
    private long mNextBackoffMs;
    private int mNumBindingDied;
    private int mNumConnected;
    private int mNumDisconnected;
    private final double mRebindBackoffIncrease;
    private final long mRebindBackoffMs;
    private final long mRebindMaxBackoffMs;
    private boolean mRebindScheduled;
    private long mReconnectTime;
    private final long mResetBackoffDelay;
    private java.lang.Object mService;
    private final android.content.ServiceConnection mServiceConnection;
    private boolean mShouldBeBound;
    private final java.lang.Runnable mStableCheck;
    private final java.lang.String mTag;
    private final int mUserId;

    public void <init>(java.lang.String, android.content.Context, android.os.Handler, int, android.content.ComponentName, long, double, long, long)
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.String r1;
        android.content.Context r2;
        android.os.Handler r3;
        int i0;
        android.content.ComponentName r4;
        double d0;
        long l1, l2, $l3, $l4, l5, l6;
        java.lang.Object $r5;
        com.android.server.am.PersistentConnection$1 $r6;
        com.android.server.am._$$Lambda$PersistentConnection$xTW_hnA2hSnEFuF87mUe85RYnfE $r7;
        com.android.server.am._$$Lambda$PersistentConnection$rkvbuN0FQdQUv1hqSwDvmwwh6Uk $r8;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.Handler;

        i0 := @parameter3: int;

        r4 := @parameter4: android.content.ComponentName;

        l5 := @parameter5: long;

        d0 := @parameter6: double;

        l1 := @parameter7: long;

        l2 := @parameter8: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock> = $r5;

        $r6 = new com.android.server.am.PersistentConnection$1;

        specialinvoke $r6.<com.android.server.am.PersistentConnection$1: void <init>(com.android.server.am.PersistentConnection)>(r0);

        r0.<com.android.server.am.PersistentConnection: android.content.ServiceConnection mServiceConnection> = $r6;

        $r7 = new com.android.server.am._$$Lambda$PersistentConnection$xTW_hnA2hSnEFuF87mUe85RYnfE;

        specialinvoke $r7.<com.android.server.am._$$Lambda$PersistentConnection$xTW_hnA2hSnEFuF87mUe85RYnfE: void <init>(com.android.server.am.PersistentConnection)>(r0);

        r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mBindForBackoffRunnable> = $r7;

        $r8 = new com.android.server.am._$$Lambda$PersistentConnection$rkvbuN0FQdQUv1hqSwDvmwwh6Uk;

        specialinvoke $r8.<com.android.server.am._$$Lambda$PersistentConnection$rkvbuN0FQdQUv1hqSwDvmwwh6Uk: void <init>(com.android.server.am.PersistentConnection)>(r0);

        r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mStableCheck> = $r8;

        r0.<com.android.server.am.PersistentConnection: java.lang.String mTag> = r1;

        r0.<com.android.server.am.PersistentConnection: android.content.Context mContext> = r2;

        r0.<com.android.server.am.PersistentConnection: android.os.Handler mHandler> = r3;

        r0.<com.android.server.am.PersistentConnection: int mUserId> = i0;

        r0.<com.android.server.am.PersistentConnection: android.content.ComponentName mComponentName> = r4;

        l6 = l5 * 1000L;

        r0.<com.android.server.am.PersistentConnection: long mRebindBackoffMs> = l6;

        r0.<com.android.server.am.PersistentConnection: double mRebindBackoffIncrease> = d0;

        $l3 = l1 * 1000L;

        r0.<com.android.server.am.PersistentConnection: long mRebindMaxBackoffMs> = $l3;

        $l4 = 1000L * l2;

        r0.<com.android.server.am.PersistentConnection: long mResetBackoffDelay> = $l4;

        r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs> = l6;

        return;
    }

    static java.lang.Object access$000(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$100(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        $z0 = r0.<com.android.server.am.PersistentConnection: boolean mBound>;

        return $z0;
    }

    static int access$1008(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        i0 = r0.<com.android.server.am.PersistentConnection: int mNumDisconnected>;

        $i1 = i0 + 1;

        r0.<com.android.server.am.PersistentConnection: int mNumDisconnected> = $i1;

        return i0;
    }

    static void access$1100(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void cleanUpConnectionLocked()>();

        return;
    }

    static int access$1208(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        i0 = r0.<com.android.server.am.PersistentConnection: int mNumBindingDied>;

        $i1 = i0 + 1;

        r0.<com.android.server.am.PersistentConnection: int mNumBindingDied> = $i1;

        return i0;
    }

    static java.lang.String access$200(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: java.lang.String mTag>;

        return $r1;
    }

    static android.content.ComponentName access$300(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        android.content.ComponentName $r1;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: android.content.ComponentName mComponentName>;

        return $r1;
    }

    static int access$400(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        int $i0;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        $i0 = r0.<com.android.server.am.PersistentConnection: int mUserId>;

        return $i0;
    }

    static int access$508(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        i0 = r0.<com.android.server.am.PersistentConnection: int mNumConnected>;

        $i1 = i0 + 1;

        r0.<com.android.server.am.PersistentConnection: int mNumConnected> = $i1;

        return i0;
    }

    static boolean access$602(com.android.server.am.PersistentConnection, boolean)
    {
        com.android.server.am.PersistentConnection r0;
        boolean z0;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        z0 := @parameter1: boolean;

        r0.<com.android.server.am.PersistentConnection: boolean mIsConnected> = z0;

        return z0;
    }

    static long access$702(com.android.server.am.PersistentConnection, long)
    {
        com.android.server.am.PersistentConnection r0;
        long l0;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        l0 := @parameter1: long;

        r0.<com.android.server.am.PersistentConnection: long mLastConnectedTime> = l0;

        return l0;
    }

    static java.lang.Object access$802(com.android.server.am.PersistentConnection, java.lang.Object)
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        r1 := @parameter1: java.lang.Object;

        r0.<com.android.server.am.PersistentConnection: java.lang.Object mService> = r1;

        return r1;
    }

    static void access$900(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void scheduleStableCheckLocked()>();

        return;
    }

    private void cleanUpConnectionLocked()
    {
        com.android.server.am.PersistentConnection r0;

        r0 := @this: com.android.server.am.PersistentConnection;

        r0.<com.android.server.am.PersistentConnection: boolean mIsConnected> = 0;

        r0.<com.android.server.am.PersistentConnection: java.lang.Object mService> = null;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void unscheduleStableCheckLocked()>();

        return;
    }

    public static void lambda$rkvbuN0FQdQUv1hqSwDvmwwh6Uk(com.android.server.am.PersistentConnection)
    {
        com.android.server.am.PersistentConnection r0;

        r0 := @parameter0: com.android.server.am.PersistentConnection;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void stableConnectionCheck()>();

        return;
    }

    private void resetBackoffLocked()
    {
        com.android.server.am.PersistentConnection r0;
        long l0, l1, $l3;
        java.lang.String r1, $r6;
        byte $b2;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        l0 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        l1 = r0.<com.android.server.am.PersistentConnection: long mRebindBackoffMs>;

        $b2 = l0 cmp l1;

        if $b2 == 0 goto label1;

        r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs> = l1;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.String mTag>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backoff reset to ");

        $l3 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r1, $r6);

     label1:
        return;
    }

    private void scheduleStableCheckLocked()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Runnable $r1;
        long $l0, $l1, $l2;

        r0 := @this: com.android.server.am.PersistentConnection;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void unscheduleStableCheckLocked()>();

        $r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mStableCheck>;

        $l0 = virtualinvoke r0.<com.android.server.am.PersistentConnection: long injectUptimeMillis()>();

        $l1 = r0.<com.android.server.am.PersistentConnection: long mResetBackoffDelay>;

        $l2 = $l0 + $l1;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void injectPostAtTime(java.lang.Runnable,long)>($r1, $l2);

        return;
    }

    private void stableConnectionCheck()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3, $l4;
        boolean $z0, $z1;
        byte $b5;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        l0 = virtualinvoke r0.<com.android.server.am.PersistentConnection: long injectUptimeMillis()>();

        l1 = r0.<com.android.server.am.PersistentConnection: long mLastConnectedTime>;

        l2 = r0.<com.android.server.am.PersistentConnection: long mResetBackoffDelay>;

        $z0 = r0.<com.android.server.am.PersistentConnection: boolean mBound>;

        if $z0 == 0 goto label4;

        $z1 = r0.<com.android.server.am.PersistentConnection: boolean mIsConnected>;

        if $z1 == 0 goto label4;

     label2:
        $l3 = l1 + l2;

        $l4 = $l3 - l0;

        $b5 = $l4 cmp 0L;

        if $b5 > 0 goto label4;

     label3:
        specialinvoke r0.<com.android.server.am.PersistentConnection: void resetBackoffLocked()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private final void unbindLocked()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.String r1, $r6, $r10;
        boolean $z0;
        java.lang.StringBuilder $r3;
        android.content.ComponentName $r5;
        int $i0;
        android.content.ServiceConnection $r11;
        android.content.Context $r12;

        r0 := @this: com.android.server.am.PersistentConnection;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void unscheduleRebindLocked()>();

        $z0 = r0.<com.android.server.am.PersistentConnection: boolean mBound>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.String mTag>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping: ");

        $r5 = r0.<com.android.server.am.PersistentConnection: android.content.ComponentName mComponentName>;

        $r6 = virtualinvoke $r5.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" u");

        $i0 = r0.<com.android.server.am.PersistentConnection: int mUserId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r1, $r10);

        r0.<com.android.server.am.PersistentConnection: boolean mBound> = 0;

        $r12 = r0.<com.android.server.am.PersistentConnection: android.content.Context mContext>;

        $r11 = r0.<com.android.server.am.PersistentConnection: android.content.ServiceConnection mServiceConnection>;

        virtualinvoke $r12.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r11);

        specialinvoke r0.<com.android.server.am.PersistentConnection: void cleanUpConnectionLocked()>();

        return;
    }

    private void unscheduleStableCheckLocked()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Runnable $r1;

        r0 := @this: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mStableCheck>;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void injectRemoveCallbacks(java.lang.Runnable)>($r1);

        return;
    }

    protected abstract java.lang.Object asInterface(android.os.IBinder);

    public final void bind()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.am.PersistentConnection: boolean mShouldBeBound> = 1;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void bindInnerLocked(boolean)>(1);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void bindForBackoff()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.am.PersistentConnection: boolean mShouldBeBound>;

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        virtualinvoke r0.<com.android.server.am.PersistentConnection: void bindInnerLocked(boolean)>(0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final void bindInnerLocked(boolean)
    {
        com.android.server.am.PersistentConnection r0;
        boolean z0, $z1, $z2;
        android.content.Intent r1, $r4;
        java.lang.String r2, $r17;
        android.content.ComponentName $r5, $r12;
        android.content.Context $r6;
        android.content.ServiceConnection $r7;
        int $i0, $i1, $i2, $i3;
        android.os.Handler $r8;
        android.os.UserHandle $r9;
        java.lang.StringBuilder $r10;

        r0 := @this: com.android.server.am.PersistentConnection;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void unscheduleRebindLocked()>();

        $z1 = r0.<com.android.server.am.PersistentConnection: boolean mBound>;

        if $z1 == 0 goto label1;

        return;

     label1:
        r0.<com.android.server.am.PersistentConnection: boolean mBound> = 1;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void unscheduleStableCheckLocked()>();

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void resetBackoffLocked()>();

     label2:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>()>();

        $r5 = r0.<com.android.server.am.PersistentConnection: android.content.ComponentName mComponentName>;

        r1 = virtualinvoke $r4.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r5);

        $r6 = r0.<com.android.server.am.PersistentConnection: android.content.Context mContext>;

        $r7 = r0.<com.android.server.am.PersistentConnection: android.content.ServiceConnection mServiceConnection>;

        $i0 = virtualinvoke r0.<com.android.server.am.PersistentConnection: int getBindFlags()>();

        $i2 = $i0 | 1;

        $r8 = r0.<com.android.server.am.PersistentConnection: android.os.Handler mHandler>;

        $i1 = r0.<com.android.server.am.PersistentConnection: int mUserId>;

        $r9 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        $z2 = virtualinvoke $r6.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)>(r1, $r7, $i2, $r8, $r9);

        if $z2 != 0 goto label3;

        r2 = r0.<com.android.server.am.PersistentConnection: java.lang.String mTag>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding: ");

        $r12 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" u");

        $i3 = r0.<com.android.server.am.PersistentConnection: int mUserId>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed.");

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r2, $r17);

     label3:
        return;
    }

    public void dump(java.lang.String, java.io.PrintWriter)
    {
        com.android.server.am.PersistentConnection r0;
        java.io.PrintWriter r1;
        java.lang.Object r2;
        android.content.ComponentName $r3;
        java.lang.String $r4, r6, r7, r8;
        int $i0, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        long $l1, $l2, $l6, $l7, $l8, $l9, $l10, $l11;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.am.PersistentConnection;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintWriter;

        r2 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r6);

        $r3 = r0.<com.android.server.am.PersistentConnection: android.content.ComponentName mComponentName>;

        $r4 = virtualinvoke $r3.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" u");

        $i0 = r0.<com.android.server.am.PersistentConnection: int mUserId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i0);

        $z0 = r0.<com.android.server.am.PersistentConnection: boolean mBound>;

        if $z0 == 0 goto label03;

     label02:
        r7 = " [bound]";

        goto label04;

     label03:
        r7 = " [not bound]";

     label04:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r7);

        $z1 = r0.<com.android.server.am.PersistentConnection: boolean mIsConnected>;

        if $z1 == 0 goto label06;

     label05:
        r8 = " [connected]";

        goto label07;

     label06:
        r8 = " [not connected]";

     label07:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r8);

        $z2 = r0.<com.android.server.am.PersistentConnection: boolean mRebindScheduled>;

        if $z2 == 0 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" reconnect in ");

        $l9 = r0.<com.android.server.am.PersistentConnection: long mReconnectTime>;

        $l10 = virtualinvoke r0.<com.android.server.am.PersistentConnection: long injectUptimeMillis()>();

        $l11 = $l9 - $l10;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l11, r1);

     label08:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Next backoff(sec): ");

        $l1 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        $l2 = $l1 / 1000L;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l2);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Connected: ");

        $i3 = r0.<com.android.server.am.PersistentConnection: int mNumConnected>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Disconnected: ");

        $i4 = r0.<com.android.server.am.PersistentConnection: int mNumDisconnected>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Died: ");

        $i5 = r0.<com.android.server.am.PersistentConnection: int mNumBindingDied>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i5);

        $z3 = r0.<com.android.server.am.PersistentConnection: boolean mIsConnected>;

        if $z3 == 0 goto label09;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Duration: ");

        $l6 = virtualinvoke r0.<com.android.server.am.PersistentConnection: long injectUptimeMillis()>();

        $l7 = r0.<com.android.server.am.PersistentConnection: long mLastConnectedTime>;

        $l8 = $l6 - $l7;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l8, r1);

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        exitmonitor r2;

     label10:
        return;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    protected abstract int getBindFlags();

    java.lang.Runnable getBindForBackoffRunnableForTest()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Runnable $r1;

        r0 := @this: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mBindForBackoffRunnable>;

        return $r1;
    }

    public final android.content.ComponentName getComponentName()
    {
        com.android.server.am.PersistentConnection r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: android.content.ComponentName mComponentName>;

        return $r1;
    }

    public long getNextBackoffMs()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        long l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        l0 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    long getNextBackoffMsForTest()
    {
        com.android.server.am.PersistentConnection r0;
        long $l0;

        r0 := @this: com.android.server.am.PersistentConnection;

        $l0 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        return $l0;
    }

    public int getNumBindingDied()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.am.PersistentConnection: int mNumBindingDied>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getNumConnected()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.am.PersistentConnection: int mNumConnected>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getNumDisconnected()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.am.PersistentConnection: int mNumDisconnected>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    long getReconnectTimeForTest()
    {
        com.android.server.am.PersistentConnection r0;
        long $l0;

        r0 := @this: com.android.server.am.PersistentConnection;

        $l0 = r0.<com.android.server.am.PersistentConnection: long mReconnectTime>;

        return $l0;
    }

    public final java.lang.Object getServiceBinder()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mService>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    android.content.ServiceConnection getServiceConnectionForTest()
    {
        com.android.server.am.PersistentConnection r0;
        android.content.ServiceConnection $r1;

        r0 := @this: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: android.content.ServiceConnection mServiceConnection>;

        return $r1;
    }

    java.lang.Runnable getStableCheckRunnableForTest()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Runnable $r1;

        r0 := @this: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mStableCheck>;

        return $r1;
    }

    public final int getUserId()
    {
        com.android.server.am.PersistentConnection r0;
        int $i0;

        r0 := @this: com.android.server.am.PersistentConnection;

        $i0 = r0.<com.android.server.am.PersistentConnection: int mUserId>;

        return $i0;
    }

    void injectPostAtTime(java.lang.Runnable, long)
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Runnable r1;
        long l0;
        android.os.Handler $r2;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r2 = r0.<com.android.server.am.PersistentConnection: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>(r1, l0);

        return;
    }

    void injectRemoveCallbacks(java.lang.Runnable)
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.am.PersistentConnection: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r1);

        return;
    }

    long injectUptimeMillis()
    {
        com.android.server.am.PersistentConnection r0;
        long $l0;

        r0 := @this: com.android.server.am.PersistentConnection;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        return $l0;
    }

    public final boolean isBound()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.am.PersistentConnection: boolean mBound>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final boolean isConnected()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.am.PersistentConnection: boolean mIsConnected>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final boolean isRebindScheduled()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.am.PersistentConnection: boolean mRebindScheduled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$new$0$PersistentConnection()
    {
        com.android.server.am.PersistentConnection r0;

        r0 := @this: com.android.server.am.PersistentConnection;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void bindForBackoff()>();

        return;
    }

    void scheduleRebindLocked()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.String r1, $r7;
        long l0, $l1, $l3, $l4, $l5, $l6, $l7, $l8;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.Runnable $r8;
        double $d0, $d1, $d2;

        r0 := @this: com.android.server.am.PersistentConnection;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void unbindLocked()>();

        $z0 = r0.<com.android.server.am.PersistentConnection: boolean mRebindScheduled>;

        if $z0 != 0 goto label1;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.String mTag>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduling to reconnect in ");

        $l1 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms (uptime)");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r1, $r7);

        $l3 = virtualinvoke r0.<com.android.server.am.PersistentConnection: long injectUptimeMillis()>();

        $l4 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        l0 = $l3 + $l4;

        r0.<com.android.server.am.PersistentConnection: long mReconnectTime> = l0;

        $r8 = r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mBindForBackoffRunnable>;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void injectPostAtTime(java.lang.Runnable,long)>($r8, l0);

        $l7 = r0.<com.android.server.am.PersistentConnection: long mRebindMaxBackoffMs>;

        $l5 = r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs>;

        $d1 = (double) $l5;

        $d0 = r0.<com.android.server.am.PersistentConnection: double mRebindBackoffIncrease>;

        $d2 = $d1 * $d0;

        $l6 = (long) $d2;

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>($l7, $l6);

        r0.<com.android.server.am.PersistentConnection: long mNextBackoffMs> = $l8;

        r0.<com.android.server.am.PersistentConnection: boolean mRebindScheduled> = 1;

     label1:
        return;
    }

    boolean shouldBeBoundForTest()
    {
        com.android.server.am.PersistentConnection r0;
        boolean $z0;

        r0 := @this: com.android.server.am.PersistentConnection;

        $z0 = r0.<com.android.server.am.PersistentConnection: boolean mShouldBeBound>;

        return $z0;
    }

    public final void unbind()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.am.PersistentConnection;

        r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.am.PersistentConnection: boolean mShouldBeBound> = 0;

        specialinvoke r0.<com.android.server.am.PersistentConnection: void unbindLocked()>();

        specialinvoke r0.<com.android.server.am.PersistentConnection: void unscheduleStableCheckLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void unscheduleRebindLocked()
    {
        com.android.server.am.PersistentConnection r0;
        java.lang.Runnable $r1;

        r0 := @this: com.android.server.am.PersistentConnection;

        $r1 = r0.<com.android.server.am.PersistentConnection: java.lang.Runnable mBindForBackoffRunnable>;

        virtualinvoke r0.<com.android.server.am.PersistentConnection: void injectRemoveCallbacks(java.lang.Runnable)>($r1);

        r0.<com.android.server.am.PersistentConnection: boolean mRebindScheduled> = 0;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.am.PersistentConnection: boolean DEBUG> = 0;

        return;
    }
}
