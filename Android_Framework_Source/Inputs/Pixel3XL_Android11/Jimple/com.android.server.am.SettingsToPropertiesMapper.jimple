public class com.android.server.am.SettingsToPropertiesMapper extends java.lang.Object
{
    private static final java.lang.String GLOBAL_SETTINGS_CATEGORY;
    private static final java.lang.String RESET_PERFORMED_PROPERTY;
    private static final java.lang.String RESET_RECORD_FILE_PATH;
    private static final java.lang.String SYSTEM_PROPERTY_INVALID_SUBSTRING;
    private static final int SYSTEM_PROPERTY_MAX_LENGTH;
    private static final java.lang.String SYSTEM_PROPERTY_PREFIX;
    private static final java.lang.String SYSTEM_PROPERTY_VALID_CHARACTERS_REGEX;
    private static final java.lang.String TAG;
    static final java.lang.String[] sDeviceConfigScopes;
    static final java.lang.String[] sGlobalSettings;
    private final android.content.ContentResolver mContentResolver;
    private final java.lang.String[] mDeviceConfigScopes;
    private final java.lang.String[] mGlobalSettings;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String TAG> = "SettingsToPropertiesMapper";

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String SYSTEM_PROPERTY_VALID_CHARACTERS_REGEX> = "^[\\w\\.\\-@:]*$";

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String SYSTEM_PROPERTY_PREFIX> = "persist.device_config.";

        <com.android.server.am.SettingsToPropertiesMapper: int SYSTEM_PROPERTY_MAX_LENGTH> = 92;

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String SYSTEM_PROPERTY_INVALID_SUBSTRING> = "..";

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String RESET_RECORD_FILE_PATH> = "/data/server_configurable_flags/reset_flags";

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String RESET_PERFORMED_PROPERTY> = "device_config.reset_performed";

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String GLOBAL_SETTINGS_CATEGORY> = "global_settings";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "native_flags_health_check_enabled";

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] sGlobalSettings> = $r0;

        $r1 = newarray (java.lang.String)[10];

        $r1[0] = "activity_manager_native_boot";

        $r1[1] = "configuration";

        $r1[2] = "input_native_boot";

        $r1[3] = "intelligence_content_suggestions";

        $r1[4] = "media_native";

        $r1[5] = "netd_native";

        $r1[6] = "runtime_native";

        $r1[7] = "runtime_native_boot";

        $r1[8] = "storage_native_boot";

        $r1[9] = "window_manager_native_boot";

        <com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] sDeviceConfigScopes> = $r1;

        return;
    }

    protected void <init>(android.content.ContentResolver, java.lang.String[], java.lang.String[])
    {
        com.android.server.am.SettingsToPropertiesMapper r0;
        android.content.ContentResolver r1;
        java.lang.String[] r2, r3;

        r0 := @this: com.android.server.am.SettingsToPropertiesMapper;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.am.SettingsToPropertiesMapper: android.content.ContentResolver mContentResolver> = r1;

        r0.<com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] mGlobalSettings> = r2;

        r0.<com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] mDeviceConfigScopes> = r3;

        return;
    }

    static java.lang.String getResetFlagsFileContent()
    {
        java.lang.Throwable $r3;
        java.lang.String r4, r5;
        java.io.File r7;
        java.io.FileReader r8;
        java.io.BufferedReader r9;
        java.lang.Exception r10;

        r4 = null;

     label01:
        r7 = new java.io.File;

     label02:
        r4 = null;

     label03:
        specialinvoke r7.<java.io.File: void <init>(java.lang.String)>("/data/server_configurable_flags/reset_flags");

     label04:
        r4 = null;

     label05:
        r9 = new java.io.BufferedReader;

     label06:
        r4 = null;

     label07:
        r8 = new java.io.FileReader;

     label08:
        r4 = null;

     label09:
        specialinvoke r8.<java.io.FileReader: void <init>(java.io.File)>(r7);

     label10:
        r4 = null;

     label11:
        specialinvoke r9.<java.io.BufferedReader: void <init>(java.io.Reader)>(r8);

     label12:
        r4 = null;

     label13:
        r5 = virtualinvoke r9.<java.io.BufferedReader: java.lang.String readLine()>();

     label14:
        r4 = r5;

     label15:
        virtualinvoke r9.<java.io.BufferedReader: void close()>();

     label16:
        r4 = r5;

        goto label18;

     label17:
        $r3 := @caughtexception;

        r10 = (java.lang.Exception) $r3;

        staticinvoke <com.android.server.am.SettingsToPropertiesMapper: void log(java.lang.String,java.lang.Exception)>("failed to read file /data/server_configurable_flags/reset_flags", r10);

     label18:
        return r4;

        catch java.io.IOException from label01 to label02 with label17;
        catch java.io.IOException from label03 to label04 with label17;
        catch java.io.IOException from label05 to label06 with label17;
        catch java.io.IOException from label07 to label08 with label17;
        catch java.io.IOException from label09 to label10 with label17;
        catch java.io.IOException from label11 to label12 with label17;
        catch java.io.IOException from label13 to label14 with label17;
        catch java.io.IOException from label15 to label16 with label17;
    }

    public static java.lang.String[] getResetNativeCategories()
    {
        int i0, $i1, i2;
        java.lang.String r1, $r6, $r10, r13;
        boolean $z0, $z1;
        java.util.HashSet $r2;
        java.lang.String[] $r3, $r5, $r11, $r12, r14, r15;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r7;

        $z0 = staticinvoke <com.android.server.am.SettingsToPropertiesMapper: boolean isNativeFlagsResetPerformed()>();

        if $z0 != 0 goto label1;

        $r12 = newarray (java.lang.String)[0];

        return $r12;

     label1:
        r13 = staticinvoke <com.android.server.am.SettingsToPropertiesMapper: java.lang.String getResetFlagsFileContent()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r13);

        if $z1 == 0 goto label2;

        $r11 = newarray (java.lang.String)[0];

        return $r11;

     label2:
        r14 = virtualinvoke r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        i0 = lengthof r14;

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        r1 = r14[i2];

        r15 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i1 = lengthof r15;

        if $i1 >= 3 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to extract category name from property ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.am.SettingsToPropertiesMapper: void log(java.lang.String)>($r10);

        goto label5;

     label4:
        $r6 = r15[2];

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        $r3 = newarray (java.lang.String)[0];

        $r4 = virtualinvoke $r2.<java.util.HashSet: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public static boolean isNativeFlagsResetPerformed()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 = "true";

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("device_config.reset_performed");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    private static void log(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("SettingsToPropertiesMapper", r0);

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SettingsToPropertiesMapper", r0);

     label2:
        return;
    }

    private static void log(java.lang.String, java.lang.Exception)
    {
        java.lang.String r0;
        java.lang.Exception r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Exception;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("SettingsToPropertiesMapper", r0, r1);

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SettingsToPropertiesMapper", r0, r1);

     label2:
        return;
    }

    static java.lang.String makePropertyName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r7, r8;
        java.lang.StringBuilder $r2;
        boolean $z0, $z1;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persist.device_config.");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r8.<java.lang.String: boolean matches(java.lang.String)>("^[\\w\\.\\-@:]*$");

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("..");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        return r8;

     label2:
        return null;
    }

    private void setProperty(java.lang.String, java.lang.String)
    {
        com.android.server.am.SettingsToPropertiesMapper r0;
        int $i0;
        java.lang.StringBuilder $r2, $r8;
        java.lang.String $r5, $r6, $r14, r15, r16, r17;
        boolean $z0;
        java.lang.Exception $r7;

        r0 := @this: com.android.server.am.SettingsToPropertiesMapper;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

        if r16 != null goto label2;

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r15);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

        if $z0 == 0 goto label1;

        return;

     label1:
        r17 = "";

        goto label3;

     label2:
        r17 = r16;

        $i0 = virtualinvoke r16.<java.lang.String: int length()>();

        if $i0 <= 92 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds system property max length.");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.am.SettingsToPropertiesMapper: void log(java.lang.String)>($r5);

        return;

     label3:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(r15, r17);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set property ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value \'");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.am.SettingsToPropertiesMapper: void log(java.lang.String,java.lang.Exception)>($r14, $r7);

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static com.android.server.am.SettingsToPropertiesMapper start(android.content.ContentResolver)
    {
        com.android.server.am.SettingsToPropertiesMapper $r0;
        java.lang.String[] $r1, $r2;
        android.content.ContentResolver r3;

        r3 := @parameter0: android.content.ContentResolver;

        $r0 = new com.android.server.am.SettingsToPropertiesMapper;

        $r2 = <com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] sGlobalSettings>;

        $r1 = <com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] sDeviceConfigScopes>;

        specialinvoke $r0.<com.android.server.am.SettingsToPropertiesMapper: void <init>(android.content.ContentResolver,java.lang.String[],java.lang.String[])>(r3, $r2, $r1);

        virtualinvoke $r0.<com.android.server.am.SettingsToPropertiesMapper: void updatePropertiesFromSettings()>();

        return $r0;
    }

    public void lambda$updatePropertiesFromSettings$0$SettingsToPropertiesMapper(android.provider.DeviceConfig$Properties)
    {
        com.android.server.am.SettingsToPropertiesMapper r0;
        java.lang.String r1, r3, r4, $r7, $r13;
        java.util.Iterator r2;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8;
        android.provider.DeviceConfig$Properties r14;

        r0 := @this: com.android.server.am.SettingsToPropertiesMapper;

        r14 := @parameter0: android.provider.DeviceConfig$Properties;

        r1 = virtualinvoke r14.<android.provider.DeviceConfig$Properties: java.lang.String getNamespace()>();

        $r5 = virtualinvoke r14.<android.provider.DeviceConfig$Properties: java.util.Set getKeyset()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        r4 = staticinvoke <com.android.server.am.SettingsToPropertiesMapper: java.lang.String makePropertyName(java.lang.String,java.lang.String)>(r1, r3);

        if r4 != null goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to construct system property for ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.am.SettingsToPropertiesMapper: void log(java.lang.String)>($r13);

        return;

     label2:
        $r7 = virtualinvoke r14.<android.provider.DeviceConfig$Properties: java.lang.String getString(java.lang.String,java.lang.String)>(r3, null);

        specialinvoke r0.<com.android.server.am.SettingsToPropertiesMapper: void setProperty(java.lang.String,java.lang.String)>(r4, $r7);

        goto label1;

     label3:
        return;
    }

    void updatePropertiesFromSettings()
    {
        com.android.server.am.SettingsToPropertiesMapper r0;
        java.lang.String[] r1, r21;
        android.net.Uri r2;
        com.android.server.am._$$Lambda$SettingsToPropertiesMapper$oP9A7vTPRZcZgLdy43KKEveF4zQ $r4;
        java.lang.String $r5, $r12, $r16, r17, r18;
        java.util.concurrent.Executor $r6;
        com.android.server.am.SettingsToPropertiesMapper$1 $r7;
        boolean $z0;
        android.content.ContentResolver $r8;
        java.lang.StringBuilder $r9, $r13;
        int i1, i2, i3, i4;

        r0 := @this: com.android.server.am.SettingsToPropertiesMapper;

        r1 = r0.<com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] mGlobalSettings>;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        r17 = r1[i2];

        r2 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>(r17);

        r18 = staticinvoke <com.android.server.am.SettingsToPropertiesMapper: java.lang.String makePropertyName(java.lang.String,java.lang.String)>("global_settings", r17);

        if r2 != null goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setting uri is null for globalSetting ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.am.SettingsToPropertiesMapper: void log(java.lang.String)>($r16);

        goto label5;

     label2:
        if r18 != null goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid prop name for globalSetting ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.am.SettingsToPropertiesMapper: void log(java.lang.String)>($r12);

        goto label5;

     label3:
        $r7 = new com.android.server.am.SettingsToPropertiesMapper$1;

        specialinvoke $r7.<com.android.server.am.SettingsToPropertiesMapper$1: void <init>(com.android.server.am.SettingsToPropertiesMapper,android.os.Handler,java.lang.String,java.lang.String)>(r0, null, r17, r18);

        $z0 = staticinvoke <com.android.server.am.SettingsToPropertiesMapper: boolean isNativeFlagsResetPerformed()>();

        if $z0 != 0 goto label4;

        virtualinvoke r0.<com.android.server.am.SettingsToPropertiesMapper: void updatePropertyFromSetting(java.lang.String,java.lang.String)>(r17, r18);

     label4:
        $r8 = r0.<com.android.server.am.SettingsToPropertiesMapper: android.content.ContentResolver mContentResolver>;

        virtualinvoke $r8.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r2, 0, $r7);

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        r21 = r0.<com.android.server.am.SettingsToPropertiesMapper: java.lang.String[] mDeviceConfigScopes>;

        i3 = lengthof r21;

        i4 = 0;

     label7:
        if i4 >= i3 goto label8;

        $r5 = r21[i4];

        $r6 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r4 = new com.android.server.am._$$Lambda$SettingsToPropertiesMapper$oP9A7vTPRZcZgLdy43KKEveF4zQ;

        specialinvoke $r4.<com.android.server.am._$$Lambda$SettingsToPropertiesMapper$oP9A7vTPRZcZgLdy43KKEveF4zQ: void <init>(com.android.server.am.SettingsToPropertiesMapper)>(r0);

        staticinvoke <android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)>($r5, $r6, $r4);

        i4 = i4 + 1;

        goto label7;

     label8:
        return;
    }

    void updatePropertyFromSetting(java.lang.String, java.lang.String)
    {
        com.android.server.am.SettingsToPropertiesMapper r0;
        java.lang.String r1, r2, $r4;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.am.SettingsToPropertiesMapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.am.SettingsToPropertiesMapper: android.content.ContentResolver mContentResolver>;

        $r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r3, r1);

        specialinvoke r0.<com.android.server.am.SettingsToPropertiesMapper: void setProperty(java.lang.String,java.lang.String)>(r2, $r4);

        return;
    }
}
