class com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant extends java.lang.Object
{
    private final java.util.List mBeginFiles;

    private void <init>()
    {
        com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant: java.util.List mBeginFiles> = $r1;

        return;
    }

    private static long getOldestFileOffsetMillis(java.util.List)
    {
        java.util.List r0;
        int i0, $i2, $i3, i4;
        java.io.File r1, $r3;
        boolean $z0;
        java.lang.Object $r2, $r5;
        java.lang.String $r4, $r6, r7, r8;
        long $l1;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0L;

     label1:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.io.File) $r2;

        r7 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>();

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i4 = 1;

     label2:
        if i4 >= i0 goto label4;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4);

        r1 = (java.io.File) $r5;

        r8 = r7;

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i3 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i2 <= $i3 goto label3;

        r8 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

     label3:
        i4 = i4 + 1;

        r7 = r8;

        goto label2;

     label4:
        $r4 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".xml", "");

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

        return $l1;
    }

    public void startTracking(java.io.File)
    {
        com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant r0;
        java.util.List $r1;
        java.io.File r2;
        java.io.File[] r3;

        r0 := @this: com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant;

        r2 := @parameter0: java.io.File;

        r3 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles()>();

        if r3 == null goto label1;

        $r1 = r0.<com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant: java.util.List mBeginFiles>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r3);

     label1:
        return;
    }

    public void stopTracking(java.io.File)
    {
        com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant r0;
        java.io.File r1;
        java.io.File[] r2;
        long l0, $l1;
        java.util.ArrayList $r3;
        java.util.List $r4, $r7;
        byte $b2;
        java.lang.StringBuilder $r5;
        java.lang.IllegalStateException $r9;
        java.lang.String r12;

        r0 := @this: com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant;

        r1 := @parameter0: java.io.File;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        if r2 == null goto label1;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, r2);

     label1:
        $r4 = r0.<com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant: java.util.List mBeginFiles>;

        l0 = staticinvoke <com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant: long getOldestFileOffsetMillis(java.util.List)>($r4);

        $l1 = staticinvoke <com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant: long getOldestFileOffsetMillis(java.util.List)>($r3);

        $b2 = $l1 cmp l0;

        if $b2 < 0 goto label2;

        return;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("History loss detected!\nold files: ");

        $r7 = r0.<com.android.server.appop.HistoricalRegistry$HistoricalFilesInvariant: java.util.List mBeginFiles>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.appop.HistoricalRegistry: void access$300(java.lang.String,java.lang.Throwable,java.io.File)>(r12, null, r1);

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r12);

        throw $r9;
    }
}
