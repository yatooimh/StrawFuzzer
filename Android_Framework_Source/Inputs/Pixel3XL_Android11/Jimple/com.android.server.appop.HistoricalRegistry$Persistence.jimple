final class com.android.server.appop.HistoricalRegistry$Persistence extends java.lang.Object
{
    private static final java.lang.String ATTR_ACCESS_COUNT;
    private static final java.lang.String ATTR_ACCESS_DURATION;
    private static final java.lang.String ATTR_BEGIN_TIME;
    private static final java.lang.String ATTR_END_TIME;
    private static final java.lang.String ATTR_NAME;
    private static final java.lang.String ATTR_OVERFLOW;
    private static final java.lang.String ATTR_REJECT_COUNT;
    private static final java.lang.String ATTR_VERSION;
    private static final int CURRENT_VERSION;
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String TAG_ATTRIBUTION;
    private static final java.lang.String TAG_HISTORY;
    private static final java.lang.String TAG_OP;
    private static final java.lang.String TAG_OPS;
    private static final java.lang.String TAG_PACKAGE;
    private static final java.lang.String TAG_STATE;
    private static final java.lang.String TAG_UID;
    private static final com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir;
    private final long mBaseSnapshotInterval;
    private final long mIntervalCompressionMultiplier;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        com.android.internal.os.AtomicDirectory $r2;
        java.io.File $r3, $r4, $r5;

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String TAG_UID> = "uid";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String TAG_STATE> = "st";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String TAG_PACKAGE> = "pkg";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String TAG_OPS> = "ops";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String TAG_OP> = "op";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String TAG_HISTORY> = "history";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String TAG_ATTRIBUTION> = "ftr";

        <com.android.server.appop.HistoricalRegistry$Persistence: boolean DEBUG> = 0;

        <com.android.server.appop.HistoricalRegistry$Persistence: int CURRENT_VERSION> = 2;

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_VERSION> = "ver";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_REJECT_COUNT> = "rc";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_OVERFLOW> = "ov";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_NAME> = "na";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_END_TIME> = "end";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_BEGIN_TIME> = "beg";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_ACCESS_DURATION> = "du";

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String ATTR_ACCESS_COUNT> = "ac";

        $r0 = class "Lcom/android/server/appop/HistoricalRegistry$Persistence;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String LOG_TAG> = $r1;

        $r2 = new com.android.internal.os.AtomicDirectory;

        $r3 = new java.io.File;

        $r4 = new java.io.File;

        $r5 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "appops");

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "history");

        specialinvoke $r2.<com.android.internal.os.AtomicDirectory: void <init>(java.io.File)>($r3);

        <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir> = $r2;

        return;
    }

    void <init>(long, long)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        long l0, l1;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mBaseSnapshotInterval> = l0;

        r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mIntervalCompressionMultiplier> = l1;

        return;
    }

    static void access$100(com.android.server.appop.HistoricalRegistry$Persistence, android.app.AppOpsManager$HistoricalOps, int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$HistoricalOps r1;
        int i0, i1, i4;
        java.lang.String r2, r3;
        java.lang.String[] r4;
        long l2, l3;

        r0 := @parameter0: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter1: android.app.AppOpsManager$HistoricalOps;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String[];

        i1 := @parameter6: int;

        l2 := @parameter7: long;

        l3 := @parameter8: long;

        i4 := @parameter9: int;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void collectHistoricalOpsDLocked(android.app.AppOpsManager$HistoricalOps,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int)>(r1, i0, r2, r3, r4, i1, l2, l3, i4);

        return;
    }

    static android.app.AppOpsManager$HistoricalOps access$200(android.app.AppOpsManager$HistoricalOps, double)
    {
        android.app.AppOpsManager$HistoricalOps r0, $r1;
        double d0;

        r0 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        d0 := @parameter1: double;

        $r1 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps spliceFromBeginning(android.app.AppOpsManager$HistoricalOps,double)>(r0, d0);

        return $r1;
    }

    static void clearHistoryDLocked()
    {
        com.android.internal.os.AtomicDirectory $r0;

        $r0 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r0.<com.android.internal.os.AtomicDirectory: void delete()>();

        return;
    }

    private java.util.LinkedList collectHistoricalOpsBaseDLocked(int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        int i0, i1, i4;
        java.lang.String[] r1;
        long l2, l3;
        java.io.File r2, r14;
        com.android.internal.os.AtomicDirectory $r3, $r5, $r7;
        long[] $r4;
        java.lang.Throwable $r6, $r8, r13;
        java.lang.String r9, r10;
        java.util.Set r11;
        java.util.LinkedList r12;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        i0 := @parameter0: int;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String[];

        i1 := @parameter4: int;

        l2 := @parameter5: long;

        l3 := @parameter6: long;

        i4 := @parameter7: int;

     label1:
        $r3 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        r2 = virtualinvoke $r3.<com.android.internal.os.AtomicDirectory: java.io.File startRead()>();

     label2:
        r11 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: java.util.Set getHistoricalFileNames(java.io.File)>(r2);

        $r4 = newarray (long)[1];

        $r4[0] = 0L;

        r12 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.LinkedList collectHistoricalOpsRecursiveDLocked(java.io.File,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int,long[],java.util.LinkedList,int,java.util.Set)>(r2, i0, r9, r10, r1, i1, l2, l3, i4, $r4, null, 0, r11);

        $r5 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r5.<com.android.internal.os.AtomicDirectory: void finishRead()>();

     label3:
        return r12;

     label4:
        $r8 := @caughtexception;

        r13 = $r8;

        r14 = r2;

        goto label6;

     label5:
        $r6 := @caughtexception;

        r13 = $r6;

        r14 = null;

     label6:
        staticinvoke <com.android.server.appop.HistoricalRegistry: void access$300(java.lang.String,java.lang.Throwable,java.io.File)>("Error reading historical app ops. Deleting history.", r13, r14);

        $r7 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r7.<com.android.internal.os.AtomicDirectory: void delete()>();

        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void collectHistoricalOpsDLocked(android.app.AppOpsManager$HistoricalOps, int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$HistoricalOps r1, $r5;
        java.lang.String r2, r6;
        java.lang.String[] r3;
        long l0, l1;
        int i2, i3, i4, i5, i6;
        java.lang.Object $r4;
        java.util.LinkedList r7;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        i3 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String[];

        i4 := @parameter5: int;

        l0 := @parameter6: long;

        l1 := @parameter7: long;

        i2 := @parameter8: int;

        r7 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.LinkedList collectHistoricalOpsBaseDLocked(int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int)>(i3, r6, r2, r3, i4, l0, l1, i2);

        if r7 == null goto label3;

        i5 = interfaceinvoke r7.<java.util.List: int size()>();

        i6 = 0;

     label1:
        if i6 >= i5 goto label2;

        $r4 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i6);

        $r5 = (android.app.AppOpsManager$HistoricalOps) $r4;

        virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: void merge(android.app.AppOpsManager$HistoricalOps)>($r5);

        i6 = i6 + 1;

        goto label1;

     label2:
        goto label3;

     label3:
        return;
    }

    private java.util.LinkedList collectHistoricalOpsRecursiveDLocked(java.io.File, int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int, long[], java.util.LinkedList, int, java.util.Set) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.lang.String[] r1;
        int i0, i1, $i7, $i10, $i11, i12, i13, i20, i21, i22;
        long[] r2;
        java.util.LinkedList r3, $r8, r14, r15, r16;
        java.util.Set r4;
        long l2, $l3, $l4, $l5, $l6, $l8, $l9, l14, l15, l16, l17, l18, l19;
        java.util.List r5;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Object $r6, $r9;
        android.app.AppOpsManager$HistoricalOps $r7, $r10;
        boolean $z1;
        java.io.File r11;
        java.lang.String r12, r13;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r11 := @parameter0: java.io.File;

        i12 := @parameter1: int;

        r12 := @parameter2: java.lang.String;

        r13 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String[];

        i13 := @parameter5: int;

        l14 := @parameter6: long;

        l15 := @parameter7: long;

        i0 := @parameter8: int;

        r2 := @parameter9: long[];

        r3 := @parameter10: java.util.LinkedList;

        i1 := @parameter11: int;

        r4 := @parameter12: java.util.Set;

        $l3 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mIntervalCompressionMultiplier>;

        $d1 = (double) $l3;

        $d0 = (double) i1;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $l5 = (long) $d2;

        $l4 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mBaseSnapshotInterval>;

        l2 = $l5 * $l4;

        $l6 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mIntervalCompressionMultiplier>;

        $d4 = (double) $l6;

        $i7 = i1 + 1;

        $d3 = (double) $i7;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, $d3);

        l16 = (long) $d5;

        $l8 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mBaseSnapshotInterval>;

        l17 = $l8 * l16;

        $l9 = l14 - l2;

        l18 = staticinvoke <java.lang.Math: long max(long,long)>($l9, 0L);

        l19 = l15 - l2;

        r5 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.List readHistoricalOpsLocked(java.io.File,long,long,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int,long[],int,java.util.Set)>(r11, l2, l17, i12, r12, r13, r1, i13, l18, l19, i0, r2, i1, r4);

        if r5 == null goto label1;

        $z1 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return r3;

     label1:
        $i10 = i1 + 1;

        r14 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.LinkedList collectHistoricalOpsRecursiveDLocked(java.io.File,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int,long[],java.util.LinkedList,int,java.util.Set)>(r11, i12, r12, r13, r1, i13, l18, l19, i0, r2, r3, $i10, r4);

        if r14 == null goto label4;

        i20 = virtualinvoke r14.<java.util.LinkedList: int size()>();

        i21 = 0;

     label2:
        if i21 >= i20 goto label3;

        $r9 = virtualinvoke r14.<java.util.LinkedList: java.lang.Object get(int)>(i21);

        $r10 = (android.app.AppOpsManager$HistoricalOps) $r9;

        virtualinvoke $r10.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>(l17);

        i21 = i21 + 1;

        goto label2;

     label3:
        goto label4;

     label4:
        r15 = r14;

        if r5 == null goto label7;

        r16 = r14;

        if r14 != null goto label5;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r16 = $r8;

     label5:
        $i11 = interfaceinvoke r5.<java.util.List: int size()>();

        i22 = $i11 - 1;

     label6:
        r15 = r16;

        if i22 < 0 goto label7;

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i22);

        $r7 = (android.app.AppOpsManager$HistoricalOps) $r6;

        virtualinvoke r16.<java.util.LinkedList: boolean offerFirst(java.lang.Object)>($r7);

        i22 = i22 + -1;

        goto label6;

     label7:
        return r15;
    }

    private long computeGlobalIntervalBeginMillis(int)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        int i0, $i1, i6;
        long $l2, $l3, $l4, l5;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        i0 := @parameter0: int;

        l5 = 0L;

        i6 = 0;

     label1:
        $i1 = i0 + 1;

        if i6 >= $i1 goto label2;

        $d2 = (double) l5;

        $l4 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mIntervalCompressionMultiplier>;

        $d1 = (double) $l4;

        $d0 = (double) i6;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $d4 = $d2 + $d3;

        l5 = (long) $d4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $l2 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mBaseSnapshotInterval>;

        $l3 = $l2 * l5;

        return $l3;
    }

    private static void enforceOpsWellFormed(java.util.List)
    {
        java.util.List r0;
        int i0, i10;
        android.app.AppOpsManager$HistoricalOps r1, r27;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r9, $r15, $r21;
        java.lang.String $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26;
        java.lang.IllegalStateException $r7, $r13, $r19, $r25;
        long $l1, $l2, $l4, $l5, $l7, $l8;
        byte $b3, $b6, $b9;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return;

     label1:
        r27 = null;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i10 = 0;

     label2:
        r1 = r27;

        if i10 >= i0 goto label8;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i10);

        r27 = (android.app.AppOpsManager$HistoricalOps) $r2;

        $z0 = virtualinvoke r27.<android.app.AppOpsManager$HistoricalOps: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $l1 = virtualinvoke r27.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l2 = virtualinvoke r27.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label6;

        if r1 == null goto label5;

        $l4 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l5 = virtualinvoke r27.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $b6 = $l4 cmp $l5;

        if $b6 > 0 goto label4;

        $l7 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $l8 = virtualinvoke r27.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $b9 = $l7 cmp $l8;

        if $b9 > 0 goto label3;

        goto label5;

     label3:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non increasing ops:\n");

        $r23 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String opsToDebugString(java.util.List)>(r0);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = new java.lang.IllegalStateException;

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label4:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Intersecting ops:\n");

        $r17 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String opsToDebugString(java.util.List)>(r0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label5:
        i10 = i10 + 1;

        goto label2;

     label6:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Begin after end:\n");

        $r11 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String opsToDebugString(java.util.List)>(r0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty ops:\n");

        $r5 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String opsToDebugString(java.util.List)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label8:
        return;
    }

    private java.io.File generateFile(java.io.File, int)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.io.File r1, $r7;
        int i0;
        long l1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r8;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        l1 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: long computeGlobalIntervalBeginMillis(int)>(i0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r7 = new java.io.File;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r8);

        return $r7;
    }

    private static java.util.Set getHistoricalFileNames(java.io.File)
    {
        java.io.File[] r0;
        int i0, $i1, i2;
        android.util.ArraySet $r1;
        java.io.File $r2, r5;
        java.lang.String $r3;
        java.util.Set $r4;

        r5 := @parameter0: java.io.File;

        r0 = virtualinvoke r5.<java.io.File: java.io.File[] listFiles()>();

        if r0 != null goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r4;

     label1:
        $r1 = new android.util.ArraySet;

        $i1 = lengthof r0;

        specialinvoke $r1.<android.util.ArraySet: void <init>(int)>($i1);

        i0 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.ArraySet: boolean add(java.lang.Object)>($r3);

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r1;
    }

    private void handlePersistHistoricalOpsRecursiveDLocked(java.io.File, java.io.File, java.util.List, java.util.Set, int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.io.File r1, r2, $r6, r29, r31;
        java.util.Set r3;
        int i0, $i7, $i10, $i11, $i19, $i20, i22, i23, i24, i26, i27, i28;
        long l1, l2, $l3, $l4, $l5, $l6, $l8, $l9, $l12, $l14, $l16, $l18, $l21, l25, l29, l30;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        boolean $z0, $z1, $z2;
        java.lang.String $r5, $r9;
        java.nio.file.Path $r7, $r8;
        java.lang.Object $r10, $r13, $r15, $r17;
        byte $b13, $b15, $b17;
        java.util.ArrayList $r11, $r12, r22, r23, r27, r28;
        android.app.AppOpsManager$HistoricalOps $r14, $r16, $r18, r24, r25, r26;
        java.util.List r19, r20;
        java.util.LinkedList $r21;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r19 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.Set;

        i0 := @parameter4: int;

        $l3 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mIntervalCompressionMultiplier>;

        $d1 = (double) $l3;

        $d0 = (double) i0;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $l5 = (long) $d2;

        $l4 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mBaseSnapshotInterval>;

        l1 = $l5 * $l4;

        $l6 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mIntervalCompressionMultiplier>;

        $d4 = (double) $l6;

        $i7 = i0 + 1;

        $d3 = (double) $i7;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, $d3);

        $l9 = (long) $d5;

        $l8 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mBaseSnapshotInterval>;

        l2 = $l9 * $l8;

        if r19 == null goto label19;

        $z2 = interfaceinvoke r19.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label01;

        goto label19;

     label01:
        i22 = interfaceinvoke r19.<java.util.List: int size()>();

        i23 = 0;

     label02:
        if i23 >= i22 goto label03;

        $r17 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i23);

        $r18 = (android.app.AppOpsManager$HistoricalOps) $r17;

        $l21 = neg l1;

        virtualinvoke $r18.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>($l21);

        i23 = i23 + 1;

        goto label02;

     label03:
        r20 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.List readHistoricalOpsLocked(java.io.File,long,long,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int,long[],int,java.util.Set)>(r2, l1, l2, -1, null, null, null, 0, -9223372036854775808L, 9223372036854775807L, 31, null, i0, null);

        if r20 == null goto label06;

        i24 = interfaceinvoke r20.<java.util.List: int size()>();

        if i24 <= 0 goto label05;

        $i19 = interfaceinvoke r19.<java.util.List: int size()>();

        $i20 = $i19 - 1;

        $r13 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>($i20);

        $r14 = (android.app.AppOpsManager$HistoricalOps) $r13;

        l25 = virtualinvoke $r14.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        i26 = 0;

     label04:
        if i26 >= i24 goto label06;

        $r15 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(i26);

        $r16 = (android.app.AppOpsManager$HistoricalOps) $r15;

        virtualinvoke $r16.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>(l25);

        i26 = i26 + 1;

        goto label04;

     label05:
        goto label06;

     label06:
        $r21 = new java.util.LinkedList;

        specialinvoke $r21.<java.util.LinkedList: void <init>(java.util.Collection)>(r19);

        if r20 == null goto label07;

        interfaceinvoke $r21.<java.util.List: boolean addAll(java.util.Collection)>(r20);

     label07:
        i27 = interfaceinvoke $r21.<java.util.List: int size()>();

        i28 = 0;

        r22 = null;

        r23 = null;

        l29 = 0L;

     label08:
        if i28 >= i27 goto label17;

        $r10 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i28);

        r24 = (android.app.AppOpsManager$HistoricalOps) $r10;

        $l12 = virtualinvoke r24.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $b13 = $l12 cmp l2;

        if $b13 > 0 goto label09;

        r25 = r24;

        r24 = null;

        goto label12;

     label09:
        $l14 = virtualinvoke r24.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $b15 = $l14 cmp l2;

        if $b15 >= 0 goto label11;

        r25 = r24;

        $l16 = virtualinvoke r24.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        l29 = $l16 - l2;

        $b17 = l29 cmp l1;

        if $b17 <= 0 goto label10;

        $d6 = (double) l29;

        $l18 = virtualinvoke r24.<android.app.AppOpsManager$HistoricalOps: long getDurationMillis()>();

        $d7 = (double) $l18;

        $d8 = $d6 / $d7;

        r26 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps spliceFromEnd(android.app.AppOpsManager$HistoricalOps,double)>(r24, $d8);

        l30 = virtualinvoke r24.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        l29 = l30 - l2;

        r24 = r26;

        goto label12;

     label10:
        r24 = null;

        goto label12;

     label11:
        r25 = null;

     label12:
        r27 = r22;

        if r25 == null goto label14;

        r27 = r22;

        if r22 != null goto label13;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r27 = $r12;

     label13:
        interfaceinvoke r27.<java.util.List: boolean add(java.lang.Object)>(r25);

     label14:
        r28 = r23;

        if r24 == null goto label16;

        r28 = r23;

        if r23 != null goto label15;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r28 = $r11;

     label15:
        interfaceinvoke r28.<java.util.List: boolean add(java.lang.Object)>(r24);

     label16:
        i28 = i28 + 1;

        r22 = r27;

        r23 = r28;

        goto label08;

     label17:
        r29 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.io.File generateFile(java.io.File,int)>(r1, i0);

        $r9 = virtualinvoke r29.<java.io.File: java.lang.String getName()>();

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>($r9);

        if r22 == null goto label18;

        staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: void normalizeSnapshotForSlotDuration(java.util.List,long)>(r22, l1);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void writeHistoricalOpsDLocked(java.util.List,long,java.io.File)>(r22, l29, r29);

     label18:
        $i11 = i0 + 1;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void handlePersistHistoricalOpsRecursiveDLocked(java.io.File,java.io.File,java.util.List,java.util.Set,int)>(r1, r2, r23, r3, $i11);

        return;

     label19:
        $z0 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label21;

        r31 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.io.File generateFile(java.io.File,int)>(r2, i0);

        $r5 = virtualinvoke r31.<java.io.File: java.lang.String getName()>();

        $z1 = interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>($r5);

        if $z1 == 0 goto label20;

        $r6 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.io.File generateFile(java.io.File,int)>(r1, i0);

        $r7 = virtualinvoke $r6.<java.io.File: java.nio.file.Path toPath()>();

        $r8 = virtualinvoke r31.<java.io.File: java.nio.file.Path toPath()>();

        staticinvoke <java.nio.file.Files: java.nio.file.Path createLink(java.nio.file.Path,java.nio.file.Path)>($r7, $r8);

     label20:
        $i10 = i0 + 1;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void handlePersistHistoricalOpsRecursiveDLocked(java.io.File,java.io.File,java.util.List,java.util.Set,int)>(r1, r2, r19, r3, $i10);

        goto label21;

     label21:
        return;
    }

    private static void normalizeSnapshotForSlotDuration(java.util.List, long)
    {
        java.util.List r0;
        long l0, l1, l2, $l4, $l5, $l6, $l7, $l8, $l10;
        android.app.AppOpsManager$HistoricalOps r1, r2, r3;
        float f0, $f1, $f2;
        int $i3, $i11, i12, i13, i14, i15;
        java.lang.Object $r4, $r5;
        byte $b9;
        double $d0;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        i12 = $i3 - 1;

     label1:
        if i12 < 0 goto label8;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        r1 = (android.app.AppOpsManager$HistoricalOps) $r4;

        $l4 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l5 = $l4 - l0;

        l1 = staticinvoke <java.lang.Math: long max(long,long)>($l5, 0L);

        i13 = i12 - 1;

        i14 = i12;

     label2:
        if i13 < 0 goto label7;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i13);

        r2 = (android.app.AppOpsManager$HistoricalOps) $r5;

        $l6 = virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l7 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l7);

        l2 = $l6 - $l8;

        $b9 = l2 cmp 0L;

        if $b9 > 0 goto label3;

        goto label7;

     label3:
        $f1 = (float) l2;

        $l10 = virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: long getDurationMillis()>();

        $f2 = (float) $l10;

        f0 = $f1 / $f2;

        $i11 = staticinvoke <java.lang.Float: int compare(float,float)>(f0, 1.0F);

        if $i11 < 0 goto label4;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i13);

        i15 = i14 - 1;

        virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: void merge(android.app.AppOpsManager$HistoricalOps)>(r2);

        goto label6;

     label4:
        $d0 = (double) f0;

        r3 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps spliceFromEnd(android.app.AppOpsManager$HistoricalOps,double)>(r2, $d0);

        if r3 == null goto label5;

        virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: void merge(android.app.AppOpsManager$HistoricalOps)>(r3);

     label5:
        i15 = i14;

        $z0 = virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: boolean isEmpty()>();

        if $z0 == 0 goto label6;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i13);

        i15 = i14 - 1;

     label6:
        i13 = i13 + -1;

        i14 = i15;

        goto label2;

     label7:
        i12 = i14 - 1;

        goto label1;

     label8:
        return;
    }

    private static java.lang.String opsToDebugString(java.util.List)
    {
        java.util.List r0;
        int i0, $i1, i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.List;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $i1 = i0 - 1;

        if i2 >= $i1 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private android.app.AppOpsManager$HistoricalOps readHistoricalAttributionOpsDLocked(android.app.AppOpsManager$HistoricalOps, int, java.lang.String, org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String[], int, int, double) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        int i0, i1, i2, i3, $i4;
        java.lang.String r1, r4, $r6, $r7, r9;
        org.xmlpull.v1.XmlPullParser r2;
        java.lang.String[] r3;
        double d0;
        android.app.AppOpsManager$HistoricalOps r5, r8, r10, r11;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r8 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: org.xmlpull.v1.XmlPullParser;

        r9 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String[];

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        d0 := @parameter8: double;

        r4 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "na");

        $i4 = i1 & 4;

        if $i4 == 0 goto label1;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r9, r4);

        if $z1 != 0 goto label1;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r2);

        return null;

     label1:
        i3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r10 = r8;

     label2:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r2, i3);

        if $z2 == 0 goto label4;

        $r6 = "op";

        $r7 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        r5 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps readHistoricalOpDLocked(android.app.AppOpsManager$HistoricalOps,int,java.lang.String,java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.String[],int,int,double)>(r10, i0, r1, r4, r2, r3, i1, i2, d0);

        r11 = r10;

        if r10 != null goto label3;

        r11 = r5;

     label3:
        r10 = r11;

        goto label2;

     label4:
        return r10;
    }

    private android.app.AppOpsManager$HistoricalOps readHistoricalOpDLocked(android.app.AppOpsManager$HistoricalOps, int, java.lang.String, java.lang.String, org.xmlpull.v1.XmlPullParser, java.lang.String[], int, int, double) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        int i0, i1, i2, $i3, i4, i5;
        java.lang.String r1, r2, $r5, $r6, $r7;
        org.xmlpull.v1.XmlPullParser r3;
        double d0;
        android.app.AppOpsManager$HistoricalOps r4, r8, r10;
        boolean $z0, $z1, $z2;
        java.lang.String[] r9;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r8 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: org.xmlpull.v1.XmlPullParser;

        r9 := @parameter5: java.lang.String[];

        i4 := @parameter6: int;

        i1 := @parameter7: int;

        d0 := @parameter8: double;

        i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r3, "na");

        $i3 = i4 & 8;

        if $i3 == 0 goto label1;

        $r7 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPublicName(int)>(i2);

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r9, $r7);

        if $z1 != 0 goto label1;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r3);

        return null;

     label1:
        i5 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label2:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r3, i5);

        if $z2 == 0 goto label4;

        $r5 = "st";

        $r6 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        r4 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps readStateDLocked(android.app.AppOpsManager$HistoricalOps,int,java.lang.String,java.lang.String,int,org.xmlpull.v1.XmlPullParser,int,double)>(r8, i0, r1, r2, i2, r3, i1, d0);

        r10 = r8;

        if r8 != null goto label3;

        r10 = r4;

     label3:
        r8 = r10;

        goto label2;

     label4:
        return r8;
    }

    private java.util.List readHistoricalOpsLocked(java.io.File, int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int, long[]) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.io.File r1;
        int i0, i1, i4, i5, i7;
        java.lang.String[] r2;
        long l2, l3, l6, $l8, $l9;
        long[] r3;
        java.io.FileInputStream r4;
        org.xmlpull.v1.XmlPullParser r5;
        android.app.AppOpsManager$HistoricalOps r6;
        java.nio.charset.Charset $r7;
        java.lang.String $r8, $r11, $r12, $r13, $r20, $r22, r27, r28, r36;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r14, r29;
        java.lang.Throwable $r15, $r16, $r17, $r24, $r25, $r26, r30;
        java.lang.StringBuilder $r18, r33;
        java.util.List $r23;
        java.lang.IllegalStateException r32;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r27 := @parameter2: java.lang.String;

        r28 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String[];

        i1 := @parameter5: int;

        l2 := @parameter6: long;

        l3 := @parameter7: long;

        i4 := @parameter8: int;

        r3 := @parameter9: long[];

     label01:
        r4 = new java.io.FileInputStream;

        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label02:
        r5 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r4, $r8);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r5, "history");

        i5 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r5, "ver");

     label03:
        if i5 < 2 goto label22;

     label04:
        l6 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r5, "ov", 0L);

        i7 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label05:
        r29 = null;

     label06:
        $z3 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r5, i7);

        if $z3 == 0 goto label17;

        $r12 = "ops";

        $r13 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label16;

        r6 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps readeHistoricalOpsDLocked(org.xmlpull.v1.XmlPullParser,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int,long[])>(r5, i0, r27, r28, r2, i1, l2, l3, i4, r3);

     label07:
        if r6 != null goto label08;

        goto label16;

     label08:
        $z1 = virtualinvoke r6.<android.app.AppOpsManager$HistoricalOps: boolean isEmpty()>();

        if $z1 == 0 goto label10;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label09:
        goto label16;

     label10:
        if r29 != null goto label13;

     label11:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r29 = $r14;

     label12:
        goto label13;

     label13:
        interfaceinvoke r29.<java.util.List: boolean add(java.lang.Object)>(r6);

     label14:
        goto label06;

     label15:
        $r16 := @caughtexception;

        r30 = $r16;

        goto label24;

     label16:
        goto label06;

     label17:
        if r3 == null goto label18;

        $l8 = r3[0];

        $l9 = $l8 + l6;

        r3[0] = $l9;

     label18:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label19:
        return r29;

     label20:
        $r17 := @caughtexception;

        goto label30;

     label21:
        $r15 := @caughtexception;

        r30 = $r15;

        goto label24;

     label22:
        r32 = new java.lang.IllegalStateException;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping unsupported history version 1 for file:");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw r32;

     label23:
        $r25 := @caughtexception;

        r30 = $r25;

     label24:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label25:
        goto label28;

     label26:
        $r24 := @caughtexception;

     label27:
        virtualinvoke r30.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24);

     label28:
        throw r30;

     label29:
        $r26 := @caughtexception;

     label30:
        r36 = <com.android.server.appop.HistoricalRegistry$Persistence: java.lang.String LOG_TAG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No history file: ");

        $r20 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r36, $r22);

        $r23 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r23;

        catch java.io.FileNotFoundException from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.io.FileNotFoundException from label18 to label19 with label20;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.io.FileNotFoundException from label27 to label28 with label29;
        catch java.io.FileNotFoundException from label28 to label29 with label29;
    }

    private java.util.List readHistoricalOpsLocked(java.io.File, long, long, int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int, long[], int, java.util.Set) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        long l0, l3, l4, l7, $l10, $l11, $l12, $l13, l15, l16;
        int i1, i2, i5, i6;
        java.lang.String r1, r2, $r9;
        java.lang.String[] r3;
        long[] r4;
        java.util.Set r5;
        byte $b8, $b9, $b14;
        java.util.List $r6, $r7, $r8;
        boolean $z0, $z1;
        java.io.File r10, r11;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r10 := @parameter0: java.io.File;

        l15 := @parameter1: long;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: java.lang.String;

        r3 := @parameter6: java.lang.String[];

        i2 := @parameter7: int;

        l3 := @parameter8: long;

        l4 := @parameter9: long;

        i5 := @parameter10: int;

        r4 := @parameter11: long[];

        i6 := @parameter12: int;

        r5 := @parameter13: java.util.Set;

        r11 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.io.File generateFile(java.io.File,int)>(r10, i6);

        if r5 == null goto label1;

        $r9 = virtualinvoke r11.<java.io.File: java.lang.String getName()>();

        interfaceinvoke r5.<java.util.Set: boolean remove(java.lang.Object)>($r9);

     label1:
        $b8 = l3 cmp l4;

        if $b8 >= 0 goto label9;

        $b9 = l4 cmp l15;

        if $b9 >= 0 goto label2;

        goto label9;

     label2:
        $l11 = l0 - l15;

        $l10 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mIntervalCompressionMultiplier>;

        l7 = $l11 / $l10;

        if r4 == null goto label3;

        l16 = r4[0];

        goto label4;

     label3:
        l16 = 0L;

     label4:
        $l12 = l0 + l7;

        $l13 = $l12 + l16;

        $b14 = l3 cmp $l13;

        if $b14 >= 0 goto label6;

        $z1 = virtualinvoke r11.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label5;

        goto label6;

     label5:
        $r8 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.List readHistoricalOpsLocked(java.io.File,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int,long[])>(r11, i1, r1, r2, r3, i2, l3, l4, i5, r4);

        return $r8;

     label6:
        if r5 == null goto label8;

        $z0 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label7;

        goto label8;

     label7:
        return null;

     label8:
        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label9:
        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r6;
    }

    private android.app.AppOpsManager$HistoricalOps readHistoricalPackageOpsDLocked(android.app.AppOpsManager$HistoricalOps, int, org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String, java.lang.String[], int, int, double) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        int i0, i1, i2, i3, $i4;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r4, $r6, $r7, r9;
        java.lang.String[] r3;
        double d0;
        android.app.AppOpsManager$HistoricalOps r5, r8, r10, r11;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r8 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        i0 := @parameter1: int;

        r1 := @parameter2: org.xmlpull.v1.XmlPullParser;

        r9 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String[];

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        d0 := @parameter8: double;

        r4 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "na");

        $i4 = i1 & 2;

        if $i4 == 0 goto label1;

        $z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 != 0 goto label1;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        return null;

     label1:
        i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r10 = r8;

     label2:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i3);

        if $z2 == 0 goto label4;

        $r6 = "ftr";

        $r7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        r5 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps readHistoricalAttributionOpsDLocked(android.app.AppOpsManager$HistoricalOps,int,java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[],int,int,double)>(r10, i0, r4, r1, r2, r3, i1, i2, d0);

        r11 = r10;

        if r10 != null goto label3;

        r11 = r5;

     label3:
        r10 = r11;

        goto label2;

     label4:
        return r10;
    }

    private android.app.AppOpsManager$HistoricalOps readHistoricalUidOpsDLocked(android.app.AppOpsManager$HistoricalOps, org.xmlpull.v1.XmlPullParser, int, java.lang.String, java.lang.String, java.lang.String[], int, int, double) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r3, $r6, $r7;
        java.lang.String[] r4;
        int i0, i1, i2, $i3, i4, i5;
        double d0;
        android.app.AppOpsManager$HistoricalOps r5, r8, r9, r10;
        boolean $z0, $z1;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r8 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        i4 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String[];

        i0 := @parameter6: int;

        i1 := @parameter7: int;

        d0 := @parameter8: double;

        i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "na");

        $i3 = i0 & 1;

        if $i3 == 0 goto label1;

        if i4 == i2 goto label1;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        return null;

     label1:
        i5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r9 = r8;

     label2:
        $z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i5);

        if $z1 == 0 goto label4;

        $r6 = "pkg";

        $r7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        r5 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps readHistoricalPackageOpsDLocked(android.app.AppOpsManager$HistoricalOps,int,org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String,java.lang.String[],int,int,double)>(r9, i2, r1, r2, r3, r4, i0, i1, d0);

        r10 = r9;

        if r9 != null goto label3;

        r10 = r5;

     label3:
        r9 = r10;

        goto label2;

     label4:
        return r9;
    }

    private android.app.AppOpsManager$HistoricalOps readStateDLocked(android.app.AppOpsManager$HistoricalOps, int, java.lang.String, java.lang.String, int, org.xmlpull.v1.XmlPullParser, int, double) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        int i0, i1, i2, $i3, i7, i9;
        java.lang.String r1, r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b4, $b5, $b6;
        boolean $z0, $z1, $z2;
        android.app.AppOpsManager$HistoricalOps $r3, $r4, $r5, r6, r8, r9;
        org.xmlpull.v1.XmlPullParser r7;
        long l8, l10, l11, l12;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r6 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        r7 := @parameter5: org.xmlpull.v1.XmlPullParser;

        i7 := @parameter6: int;

        d0 := @parameter7: double;

        l8 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r7, "na");

        $i3 = staticinvoke <android.app.AppOpsManager: int extractFlagsFromKey(long)>(l8);

        i2 = $i3 & i7;

        if i2 != 0 goto label01;

        return null;

     label01:
        i9 = staticinvoke <android.app.AppOpsManager: int extractUidStateFromKey(long)>(l8);

        l10 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r7, "ac", 0L);

        $b4 = l10 cmp 0L;

        if $b4 <= 0 goto label04;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z2 != 0 goto label02;

        $d7 = (double) l10;

        $d8 = $d7 * d0;

        $d9 = staticinvoke <android.app.AppOpsManager$HistoricalOps: double round(double)>($d8);

        l10 = (long) $d9;

        goto label02;

     label02:
        if r6 != null goto label03;

        $r5 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke $r5.<android.app.AppOpsManager$HistoricalOps: void <init>(long,long)>(0L, 0L);

        r6 = $r5;

        goto label03;

     label03:
        virtualinvoke r6.<android.app.AppOpsManager$HistoricalOps: void increaseAccessCount(int,int,java.lang.String,java.lang.String,int,int,long)>(i1, i0, r1, r2, i9, i2, l10);

        goto label04;

     label04:
        l11 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r7, "rc", 0L);

        $b5 = l11 cmp 0L;

        if $b5 <= 0 goto label07;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 != 0 goto label05;

        $d4 = (double) l11;

        $d5 = $d4 * d0;

        $d6 = staticinvoke <android.app.AppOpsManager$HistoricalOps: double round(double)>($d5);

        l11 = (long) $d6;

        goto label05;

     label05:
        r8 = r6;

        if r6 != null goto label06;

        $r4 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke $r4.<android.app.AppOpsManager$HistoricalOps: void <init>(long,long)>(0L, 0L);

        r8 = $r4;

     label06:
        virtualinvoke r8.<android.app.AppOpsManager$HistoricalOps: void increaseRejectCount(int,int,java.lang.String,java.lang.String,int,int,long)>(i1, i0, r1, r2, i9, i2, l11);

        r6 = r8;

        goto label07;

     label07:
        l12 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r7, "du", 0L);

        r9 = r6;

        $b6 = l12 cmp 0L;

        if $b6 <= 0 goto label10;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label08;

        $d1 = (double) l12;

        $d2 = $d1 * d0;

        $d3 = staticinvoke <android.app.AppOpsManager$HistoricalOps: double round(double)>($d2);

        l12 = (long) $d3;

        goto label08;

     label08:
        r9 = r6;

        if r6 != null goto label09;

        $r3 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke $r3.<android.app.AppOpsManager$HistoricalOps: void <init>(long,long)>(0L, 0L);

        r9 = $r3;

     label09:
        virtualinvoke r9.<android.app.AppOpsManager$HistoricalOps: void increaseAccessDuration(int,int,java.lang.String,java.lang.String,int,int,long)>(i1, i0, r1, r2, i9, i2, l12);

     label10:
        return r9;
    }

    private android.app.AppOpsManager$HistoricalOps readeHistoricalOpsDLocked(org.xmlpull.v1.XmlPullParser, int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int, long[]) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, i2, i3;
        java.lang.String r2, r3, $r5, $r6;
        java.lang.String[] r4;
        byte $b4, $b5;
        long $l6, $l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17;
        double $d0, d1, d2;
        boolean $z0, $z1;
        android.app.AppOpsManager$HistoricalOps $r7, r10, r11;
        long[] r8;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        i1 := @parameter5: int;

        l8 := @parameter6: long;

        l9 := @parameter7: long;

        i2 := @parameter8: int;

        r8 := @parameter9: long[];

        l10 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r1, "beg", 0L);

        if r8 == null goto label01;

        l11 = r8[0];

        goto label02;

     label01:
        l11 = 0L;

     label02:
        l12 = l10 + l11;

        l13 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r1, "end", 0L);

        if r8 == null goto label03;

        l14 = r8[0];

        goto label04;

     label03:
        l14 = 0L;

     label04:
        l15 = l13 + l14;

        $b4 = l9 cmp l12;

        if $b4 >= 0 goto label05;

        return null;

     label05:
        $b5 = l8 cmp l15;

        if $b5 <= 0 goto label06;

        $r7 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke $r7.<android.app.AppOpsManager$HistoricalOps: void <init>(long,long)>(0L, 0L);

        return $r7;

     label06:
        l16 = staticinvoke <java.lang.Math: long max(long,long)>(l12, l8);

        l17 = staticinvoke <java.lang.Math: long min(long,long)>(l15, l9);

        $l6 = l17 - l16;

        d1 = (double) $l6;

        $l7 = l15 - l12;

        $d0 = (double) $l7;

        d2 = d1 / $d0;

        i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r10 = null;

     label07:
        $z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i3);

        if $z1 == 0 goto label10;

        $r5 = "uid";

        $r6 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label09;

        r11 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps readHistoricalUidOpsDLocked(android.app.AppOpsManager$HistoricalOps,org.xmlpull.v1.XmlPullParser,int,java.lang.String,java.lang.String,java.lang.String[],int,int,double)>(r10, r1, i0, r2, r3, r4, i1, i2, d2);

        if r10 != null goto label08;

        r10 = r11;

        goto label08;

     label08:
        goto label07;

     label09:
        goto label07;

     label10:
        if r10 == null goto label11;

        virtualinvoke r10.<android.app.AppOpsManager$HistoricalOps: void setBeginAndEndTime(long,long)>(l16, l17);

     label11:
        return r10;
    }

    private static android.app.AppOpsManager$HistoricalOps spliceFromBeginning(android.app.AppOpsManager$HistoricalOps, double)
    {
        android.app.AppOpsManager$HistoricalOps r0, $r1;
        double d0;

        r0 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        d0 := @parameter1: double;

        $r1 = virtualinvoke r0.<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalOps spliceFromBeginning(double)>(d0);

        return $r1;
    }

    private static android.app.AppOpsManager$HistoricalOps spliceFromEnd(android.app.AppOpsManager$HistoricalOps, double)
    {
        android.app.AppOpsManager$HistoricalOps r0, $r1;
        double d0;

        r0 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        d0 := @parameter1: double;

        $r1 = virtualinvoke r0.<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalOps spliceFromEnd(double)>(d0);

        return $r1;
    }

    private void writeHistoricalAttributionOpsDLocked(android.app.AppOpsManager$AttributedHistoricalOps, org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$AttributedHistoricalOps r1;
        org.xmlpull.v1.XmlSerializer r2;
        int i0, i1;
        java.lang.String $r4;
        android.app.AppOpsManager$HistoricalOp $r6;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: android.app.AppOpsManager$AttributedHistoricalOps;

        r2 := @parameter1: org.xmlpull.v1.XmlSerializer;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "ftr");

        $r4 = virtualinvoke r1.<android.app.AppOpsManager$AttributedHistoricalOps: java.lang.String getTag()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "na", $r4);

        i0 = virtualinvoke r1.<android.app.AppOpsManager$AttributedHistoricalOps: int getOpCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = virtualinvoke r1.<android.app.AppOpsManager$AttributedHistoricalOps: android.app.AppOpsManager$HistoricalOp getOpAt(int)>(i1);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void writeHistoricalOpDLocked(android.app.AppOpsManager$HistoricalOp,org.xmlpull.v1.XmlSerializer)>($r6, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "ftr");

        return;
    }

    private void writeHistoricalOpDLocked(android.app.AppOpsManager$HistoricalOp, org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$HistoricalOp r1;
        org.xmlpull.v1.XmlSerializer r2;
        android.util.LongSparseArray r3;
        int i0, $i1, $i2, i4;
        java.lang.String $r5;
        long $l3;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalOp;

        r2 := @parameter1: org.xmlpull.v1.XmlSerializer;

        r3 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOp: android.util.LongSparseArray collectKeys()>();

        if r3 == null goto label4;

        $i1 = virtualinvoke r3.<android.util.LongSparseArray: int size()>();

        if $i1 > 0 goto label1;

        goto label4;

     label1:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "op");

        $i2 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOp: int getOpCode()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "na", $r5);

        i0 = virtualinvoke r3.<android.util.LongSparseArray: int size()>();

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        $l3 = virtualinvoke r3.<android.util.LongSparseArray: long keyAt(int)>(i4);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void writeStateOnLocked(android.app.AppOpsManager$HistoricalOp,long,org.xmlpull.v1.XmlSerializer)>(r1, $l3, r2);

        i4 = i4 + 1;

        goto label2;

     label3:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "op");

        return;

     label4:
        return;
    }

    private void writeHistoricalOpDLocked(android.app.AppOpsManager$HistoricalOps, org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$HistoricalOps r1;
        org.xmlpull.v1.XmlSerializer r2;
        int i0, i3;
        long $l1, $l2;
        java.lang.String $r4, $r6;
        android.app.AppOpsManager$HistoricalUidOps $r9;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        r2 := @parameter1: org.xmlpull.v1.XmlSerializer;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "ops");

        $l1 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "beg", $r4);

        $l2 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "end", $r6);

        i0 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: int getUidCount()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r9 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalUidOps getUidOpsAt(int)>(i3);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void writeHistoricalUidOpsDLocked(android.app.AppOpsManager$HistoricalUidOps,org.xmlpull.v1.XmlSerializer)>($r9, r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "ops");

        return;
    }

    private void writeHistoricalOpsDLocked(java.util.List, long, java.io.File) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        long l0;
        org.xmlpull.v1.XmlSerializer r1;
        int i1, i3;
        com.android.internal.os.AtomicDirectory $r2, $r10, $r16;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r7, $r13;
        java.lang.Boolean $r5;
        byte $b2;
        java.lang.Object $r11;
        android.app.AppOpsManager$HistoricalOps $r12;
        java.lang.Throwable $r15;
        java.util.List r17;
        java.io.File r18;
        java.io.FileOutputStream r19;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r17 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        r18 := @parameter2: java.io.File;

        $r2 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        r19 = virtualinvoke $r2.<com.android.internal.os.AtomicDirectory: java.io.FileOutputStream openWrite(java.io.File)>(r18);

     label01:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r19, $r4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "history");

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "ver", $r7);

     label02:
        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label04;

     label03:
        $r13 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "ov", $r13);

     label04:
        if r17 == null goto label10;

     label05:
        i1 = interfaceinvoke r17.<java.util.List: int size()>();

     label06:
        i3 = 0;

     label07:
        if i3 >= i1 goto label10;

     label08:
        $r11 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>(i3);

        $r12 = (android.app.AppOpsManager$HistoricalOps) $r11;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void writeHistoricalOpDLocked(android.app.AppOpsManager$HistoricalOps,org.xmlpull.v1.XmlSerializer)>($r12, r1);

     label09:
        i3 = i3 + 1;

        goto label07;

     label10:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "history");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r10 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r10.<com.android.internal.os.AtomicDirectory: void closeWrite(java.io.FileOutputStream)>(r19);

     label11:
        return;

     label12:
        $r15 := @caughtexception;

        $r16 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r16.<com.android.internal.os.AtomicDirectory: void failWrite(java.io.FileOutputStream)>(r19);

        throw $r15;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label12;
    }

    private void writeHistoricalPackageOpsDLocked(android.app.AppOpsManager$HistoricalPackageOps, org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$HistoricalPackageOps r1;
        org.xmlpull.v1.XmlSerializer r2;
        int i0, i1;
        java.lang.String $r4;
        android.app.AppOpsManager$AttributedHistoricalOps $r7;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalPackageOps;

        r2 := @parameter1: org.xmlpull.v1.XmlSerializer;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "pkg");

        $r4 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalPackageOps: java.lang.String getPackageName()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "na", $r4);

        i0 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalPackageOps: int getAttributedOpsCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r7 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalPackageOps: android.app.AppOpsManager$AttributedHistoricalOps getAttributedOpsAt(int)>(i1);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void writeHistoricalAttributionOpsDLocked(android.app.AppOpsManager$AttributedHistoricalOps,org.xmlpull.v1.XmlSerializer)>($r7, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "pkg");

        return;
    }

    private void writeHistoricalUidOpsDLocked(android.app.AppOpsManager$HistoricalUidOps, org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$HistoricalUidOps r1;
        org.xmlpull.v1.XmlSerializer r2;
        int i0, $i1, i2;
        java.lang.String $r4;
        android.app.AppOpsManager$HistoricalPackageOps $r7;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalUidOps;

        r2 := @parameter1: org.xmlpull.v1.XmlSerializer;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "uid");

        $i1 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalUidOps: int getUid()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "na", $r4);

        i0 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalUidOps: int getPackageCount()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r7 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalUidOps: android.app.AppOpsManager$HistoricalPackageOps getPackageOpsAt(int)>(i2);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void writeHistoricalPackageOpsDLocked(android.app.AppOpsManager$HistoricalPackageOps,org.xmlpull.v1.XmlSerializer)>($r7, r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "uid");

        return;
    }

    private void writeStateOnLocked(android.app.AppOpsManager$HistoricalOp, long, org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        android.app.AppOpsManager$HistoricalOp r1;
        long l0, l3, l4, l5;
        org.xmlpull.v1.XmlSerializer r2;
        int i1, i2;
        byte $b6, $b7, $b8, $b9, $b10, $b11;
        java.lang.String $r6, $r8, $r10, $r12;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalOp;

        l0 := @parameter1: long;

        r2 := @parameter2: org.xmlpull.v1.XmlSerializer;

        i1 = staticinvoke <android.app.AppOpsManager: int extractUidStateFromKey(long)>(l0);

        i2 = staticinvoke <android.app.AppOpsManager: int extractFlagsFromKey(long)>(l0);

        l3 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOp: long getAccessCount(int,int,int)>(i1, i1, i2);

        l4 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOp: long getRejectCount(int,int,int)>(i1, i1, i2);

        l5 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOp: long getAccessDuration(int,int,int)>(i1, i1, i2);

        $b6 = l3 cmp 0L;

        if $b6 > 0 goto label1;

        $b9 = l4 cmp 0L;

        if $b9 > 0 goto label1;

        $b10 = l5 cmp 0L;

        if $b10 > 0 goto label1;

        return;

     label1:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "st");

        $r12 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "na", $r12);

        $b11 = l3 cmp 0L;

        if $b11 <= 0 goto label2;

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l3);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "ac", $r10);

     label2:
        $b7 = l4 cmp 0L;

        if $b7 <= 0 goto label3;

        $r8 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l4);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "rc", $r8);

     label3:
        $b8 = l5 cmp 0L;

        if $b8 <= 0 goto label4;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l5);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "du", $r6);

     label4:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "st");

        return;
    }

    void clearHistoryDLocked(int, java.lang.String)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        int i0, $i1, i2;
        java.lang.String r1;
        java.util.List r2;
        java.lang.Object $r3;
        android.app.AppOpsManager$HistoricalOps $r4;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.List readHistoryDLocked()>();

        if r2 != null goto label1;

        return;

     label1:
        i2 = 0;

     label2:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if i2 >= $i1 goto label3;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (android.app.AppOpsManager$HistoricalOps) $r3;

        virtualinvoke $r4.<android.app.AppOpsManager$HistoricalOps: void clearHistory(int,java.lang.String)>(i0, r1);

        i2 = i2 + 1;

        goto label2;

     label3:
        staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: void clearHistoryDLocked()>();

        virtualinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void persistHistoricalOpsDLocked(java.util.List)>(r2);

        return;
    }

    long getLastPersistTimeMillisDLocked()
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.io.File r1, r3, r10, r11, r12;
        java.io.File[] r2;
        int i0, $i1, $i3, $i4, i5;
        java.lang.String r4, $r7;
        com.android.internal.os.AtomicDirectory $r5, $r6, $r9;
        long $l2;
        boolean $z0;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r10 = null;

     label01:
        $r5 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        r1 = virtualinvoke $r5.<com.android.internal.os.AtomicDirectory: java.io.File startRead()>();

     label02:
        r10 = r1;

     label03:
        r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

     label04:
        if r2 == null goto label22;

        r10 = r1;

     label05:
        $i1 = lengthof r2;

        if $i1 <= 0 goto label22;

     label06:
        r11 = null;

        r10 = r1;

     label07:
        i0 = lengthof r2;

     label08:
        i5 = 0;

     label09:
        if i5 >= i0 goto label19;

        r3 = r2[i5];

        r10 = r1;

     label10:
        r4 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

     label11:
        r10 = r1;

     label12:
        $z0 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 != 0 goto label14;

     label13:
        r12 = r11;

        goto label18;

     label14:
        if r11 != null goto label15;

        r12 = r3;

        goto label18;

     label15:
        r12 = r11;

        r10 = r1;

     label16:
        $i3 = virtualinvoke r4.<java.lang.String: int length()>();

        $r7 = virtualinvoke r11.<java.io.File: java.lang.String getName()>();

        $i4 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i3 >= $i4 goto label18;

     label17:
        r12 = r3;

     label18:
        i5 = i5 + 1;

        r11 = r12;

        goto label09;

     label19:
        if r11 != null goto label20;

        return 0L;

     label20:
        r10 = r1;

     label21:
        $l2 = virtualinvoke r11.<java.io.File: long lastModified()>();

        return $l2;

     label22:
        r10 = r1;

     label23:
        $r6 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r6.<com.android.internal.os.AtomicDirectory: void finishRead()>();

     label24:
        goto label26;

     label25:
        $r8 := @caughtexception;

        staticinvoke <com.android.server.appop.HistoricalRegistry: void access$300(java.lang.String,java.lang.Throwable,java.io.File)>("Error reading historical app ops. Deleting history.", $r8, r10);

        $r9 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r9.<com.android.internal.os.AtomicDirectory: void delete()>();

     label26:
        return 0L;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    void persistHistoricalOpsDLocked(java.util.List)
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.io.File r1, r2;
        com.android.internal.os.AtomicDirectory $r3, $r4, $r6, $r8;
        java.util.Set $r5;
        java.lang.Throwable $r7;
        java.util.List r9;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r9 := @parameter0: java.util.List;

     label1:
        $r3 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        r1 = virtualinvoke $r3.<com.android.internal.os.AtomicDirectory: java.io.File startWrite()>();

        $r4 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        r2 = virtualinvoke $r4.<com.android.internal.os.AtomicDirectory: java.io.File getBackupDirectory()>();

        $r5 = staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: java.util.Set getHistoricalFileNames(java.io.File)>(r2);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: void handlePersistHistoricalOpsRecursiveDLocked(java.io.File,java.io.File,java.util.List,java.util.Set,int)>(r1, r2, r9, $r5, 0);

        $r6 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r6.<com.android.internal.os.AtomicDirectory: void finishWrite()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <com.android.server.appop.HistoricalRegistry: void access$300(java.lang.String,java.lang.Throwable,java.io.File)>("Failed to write historical app ops, restoring backup", $r7, null);

        $r8 = <com.android.server.appop.HistoricalRegistry$Persistence: com.android.internal.os.AtomicDirectory sHistoricalAppOpsDir>;

        virtualinvoke $r8.<com.android.internal.os.AtomicDirectory: void failWrite()>();

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    java.util.List readHistoryDLocked()
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.util.List r1;
        int i0, i2;
        java.lang.Object $r2;
        long $l1;
        android.app.AppOpsManager$HistoricalOps $r3;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        r1 = virtualinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.List readHistoryRawDLocked()>();

        if r1 == null goto label2;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (android.app.AppOpsManager$HistoricalOps) $r2;

        $l1 = r0.<com.android.server.appop.HistoricalRegistry$Persistence: long mBaseSnapshotInterval>;

        virtualinvoke $r3.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>($l1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    java.util.List readHistoryRawDLocked()
    {
        com.android.server.appop.HistoricalRegistry$Persistence r0;
        java.util.LinkedList $r1;

        r0 := @this: com.android.server.appop.HistoricalRegistry$Persistence;

        $r1 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.LinkedList collectHistoricalOpsBaseDLocked(int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int)>(-1, null, null, null, 0, 0L, 9223372036854775807L, 31);

        return $r1;
    }
}
