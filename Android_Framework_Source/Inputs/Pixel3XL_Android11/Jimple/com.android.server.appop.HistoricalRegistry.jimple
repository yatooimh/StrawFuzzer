final class com.android.server.appop.HistoricalRegistry extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final long DEFAULT_COMPRESSION_STEP;
    private static final int DEFAULT_MODE;
    private static final long DEFAULT_SNAPSHOT_INTERVAL_MILLIS;
    private static final java.lang.String HISTORY_FILE_SUFFIX;
    private static final boolean KEEP_WTF_LOG;
    private static final java.lang.String LOG_TAG;
    private static final int MSG_WRITE_PENDING_HISTORY;
    private static final java.lang.String PARAMETER_ASSIGNMENT;
    private static final java.lang.String PARAMETER_DELIMITER;
    private static final java.lang.String PROPERTY_PERMISSIONS_HUB_ENABLED;
    private long mBaseSnapshotInterval;
    private android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps;
    private final java.lang.Object mInMemoryLock;
    private long mIntervalCompressionMultiplier;
    private int mMode;
    private long mNextPersistDueTimeMillis;
    private final java.lang.Object mOnDiskLock;
    private long mPendingHistoryOffsetMillis;
    private java.util.LinkedList mPendingWrites;
    private com.android.server.appop.HistoricalRegistry$Persistence mPersistence;

    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.concurrent.TimeUnit $r2;
        long $l0;

        <com.android.server.appop.HistoricalRegistry: java.lang.String PROPERTY_PERMISSIONS_HUB_ENABLED> = "permissions_hub_enabled";

        <com.android.server.appop.HistoricalRegistry: java.lang.String PARAMETER_DELIMITER> = ",";

        <com.android.server.appop.HistoricalRegistry: java.lang.String PARAMETER_ASSIGNMENT> = "=";

        <com.android.server.appop.HistoricalRegistry: int MSG_WRITE_PENDING_HISTORY> = 1;

        <com.android.server.appop.HistoricalRegistry: java.lang.String HISTORY_FILE_SUFFIX> = ".xml";

        <com.android.server.appop.HistoricalRegistry: int DEFAULT_MODE> = 1;

        <com.android.server.appop.HistoricalRegistry: long DEFAULT_COMPRESSION_STEP> = 10L;

        <com.android.server.appop.HistoricalRegistry: boolean DEBUG> = 0;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        <com.android.server.appop.HistoricalRegistry: boolean KEEP_WTF_LOG> = $z0;

        $r0 = class "Lcom/android/server/appop/HistoricalRegistry;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG> = $r1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(15L);

        <com.android.server.appop.HistoricalRegistry: long DEFAULT_SNAPSHOT_INTERVAL_MILLIS> = $l0;

        return;
    }

    void <init>(com.android.server.appop.HistoricalRegistry)
    {
        com.android.server.appop.HistoricalRegistry r0, r1;
        java.lang.Object $r2;
        int $i0;
        long $l1, $l2;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 := @parameter0: com.android.server.appop.HistoricalRegistry;

        $r2 = r1.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void <init>(java.lang.Object)>($r2);

        $i0 = r1.<com.android.server.appop.HistoricalRegistry: int mMode>;

        r0.<com.android.server.appop.HistoricalRegistry: int mMode> = $i0;

        $l1 = r1.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval> = $l1;

        $l2 = r1.<com.android.server.appop.HistoricalRegistry: long mIntervalCompressionMultiplier>;

        r0.<com.android.server.appop.HistoricalRegistry: long mIntervalCompressionMultiplier> = $l2;

        return;
    }

    void <init>(java.lang.Object)
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1, $r3;
        java.util.LinkedList $r2;
        long $l0;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock> = $r3;

        r0.<com.android.server.appop.HistoricalRegistry: int mMode> = 1;

        $l0 = <com.android.server.appop.HistoricalRegistry: long DEFAULT_SNAPSHOT_INTERVAL_MILLIS>;

        r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval> = $l0;

        r0.<com.android.server.appop.HistoricalRegistry: long mIntervalCompressionMultiplier> = 10L;

        r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock> = r1;

        return;
    }

    static void access$000(com.android.server.appop.HistoricalRegistry, android.content.ContentResolver)
    {
        com.android.server.appop.HistoricalRegistry r0;
        android.content.ContentResolver r1;

        r0 := @parameter0: com.android.server.appop.HistoricalRegistry;

        r1 := @parameter1: android.content.ContentResolver;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void updateParametersFromSetting(android.content.ContentResolver)>(r1);

        return;
    }

    static void access$300(java.lang.String, java.lang.Throwable, java.io.File)
    {
        java.lang.String r0;
        java.lang.Throwable r1;
        java.io.File r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.io.File;

        staticinvoke <com.android.server.appop.HistoricalRegistry: void wtf(java.lang.String,java.lang.Throwable,java.io.File)>(r0, r1, r2);

        return;
    }

    private void clearHistoryOnDiskDLocked()
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1;
        android.os.Handler $r3;
        long $l0;
        java.util.LinkedList $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        $r3 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(1);

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps> = null;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.server.appop.HistoricalRegistry: long mNextPersistDueTimeMillis> = $l0;

        $r4 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        virtualinvoke $r4.<java.util.LinkedList: void clear()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: void clearHistoryDLocked()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.app.AppOpsManager$HistoricalOps getUpdatedPendingHistoricalOpsMLocked(long)
    {
        com.android.server.appop.HistoricalRegistry r0;
        long l0, $l1, $l2, $l3, $l5, $l7, $l8, $l9, $l10, $l11, $l12, $l13, l14, l15, l16, l17;
        android.app.AppOpsManager$HistoricalOps $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r11;
        byte $b4, $b6;
        boolean $z0;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        if $r1 == null goto label4;

        $l3 = r0.<com.android.server.appop.HistoricalRegistry: long mNextPersistDueTimeMillis>;

        l14 = $l3 - l0;

        l15 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $b4 = l14 cmp l15;

        if $b4 <= 0 goto label1;

        $l13 = l14 - l15;

        r0.<com.android.server.appop.HistoricalRegistry: long mPendingHistoryOffsetMillis> = $l13;

     label1:
        l16 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $r3 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        $l5 = l16 - l14;

        virtualinvoke $r3.<android.app.AppOpsManager$HistoricalOps: void setEndTime(long)>($l5);

        $b6 = l14 cmp 0L;

        if $b6 <= 0 goto label2;

        $r10 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        return $r10;

     label2:
        $r4 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        $z0 = virtualinvoke $r4.<android.app.AppOpsManager$HistoricalOps: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        virtualinvoke $r8.<android.app.AppOpsManager$HistoricalOps: void setBeginAndEndTime(long,long)>(0L, 0L);

        $l11 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $l12 = $l11 + l0;

        r0.<com.android.server.appop.HistoricalRegistry: long mNextPersistDueTimeMillis> = $l12;

        $r9 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        return $r9;

     label3:
        $r5 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        $l7 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        virtualinvoke $r5.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>($l7);

        r11 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        $l8 = virtualinvoke r11.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l9 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $l10 = $l8 - $l9;

        virtualinvoke r11.<android.app.AppOpsManager$HistoricalOps: void setBeginTime(long)>($l10);

        l17 = staticinvoke <java.lang.Math: long abs(long)>(l14);

        $r6 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        virtualinvoke $r6.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>(l17);

        $r7 = r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps>;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void schedulePersistHistoricalOpsMLocked(android.app.AppOpsManager$HistoricalOps)>($r7);

     label4:
        $r2 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke $r2.<android.app.AppOpsManager$HistoricalOps: void <init>(long,long)>(0L, 0L);

        r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps> = $r2;

        $l1 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $l2 = $l1 + l0;

        r0.<com.android.server.appop.HistoricalRegistry: long mNextPersistDueTimeMillis> = $l2;

        return $r2;
    }

    private static boolean isApiEnabled()
    {
        int i0, i1;
        boolean $z0, z1;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Process: int myUid()>();

        z1 = 0;

        if i0 == i1 goto label1;

        $z0 = staticinvoke <android.provider.DeviceConfig: boolean getBoolean(java.lang.String,java.lang.String,boolean)>("privacy", "permissions_hub_enabled", 0);

        if $z0 == 0 goto label2;

     label1:
        z1 = 1;

     label2:
        return z1;
    }

    private boolean isPersistenceInitializedMLocked()
    {
        com.android.server.appop.HistoricalRegistry r0;
        com.android.server.appop.HistoricalRegistry$Persistence $r1;
        boolean z0;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        $r1 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static void makeRelativeToEpochStart(android.app.AppOpsManager$HistoricalOps, long)
    {
        android.app.AppOpsManager$HistoricalOps r0;
        long l0, $l1, $l2, $l3, $l4;

        r0 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        l0 := @parameter1: long;

        $l1 = virtualinvoke r0.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l2 = l0 - $l1;

        $l3 = virtualinvoke r0.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $l4 = l0 - $l3;

        virtualinvoke r0.<android.app.AppOpsManager$HistoricalOps: void setBeginAndEndTime(long,long)>($l2, $l4);

        return;
    }

    private void persistPendingHistory(java.util.List)
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1, $r5, $r6;
        int i0, $i1, i3;
        android.app.AppOpsManager$HistoricalOps r2, $r7;
        android.os.Handler $r3;
        boolean $z0;
        com.android.server.appop.HistoricalRegistry$Persistence $r4;
        long $l2;
        java.lang.Throwable $r8;
        java.util.List r9;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r9 := @parameter0: java.util.List;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r1;

     label01:
        $r3 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(1);

        $z0 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        i0 = interfaceinvoke r9.<java.util.List: int size()>();

     label04:
        i3 = 0;

     label05:
        if i3 >= i0 goto label10;

     label06:
        $r5 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (android.app.AppOpsManager$HistoricalOps) $r5;

     label07:
        if i3 <= 0 goto label09;

     label08:
        $i1 = i3 - 1;

        $r6 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>($i1);

        $r7 = (android.app.AppOpsManager$HistoricalOps) $r6;

        $l2 = virtualinvoke $r7.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>($l2);

     label09:
        i3 = i3 + 1;

        goto label05;

     label10:
        $r4 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        virtualinvoke $r4.<com.android.server.appop.HistoricalRegistry$Persistence: void persistHistoricalOpsDLocked(java.util.List)>(r9);

        exitmonitor r1;

     label11:
        return;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void pruneFutureOps(java.util.List)
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.util.List r1;
        android.app.AppOpsManager$HistoricalOps r2;
        int $i0, i11;
        java.lang.Object $r3;
        long $l1, $l2, $l4, $l5, $l7, $l8, $l9, $l10;
        byte $b3, $b6;
        double $d0, $d1, $d2;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i11 = $i0 - 1;

     label1:
        if i11 < 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        r2 = (android.app.AppOpsManager$HistoricalOps) $r3;

        $l1 = virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l2 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $b3 = $l1 cmp $l2;

        if $b3 > 0 goto label2;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i11);

        goto label3;

     label2:
        $l4 = virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $l5 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $b6 = $l4 cmp $l5;

        if $b6 >= 0 goto label3;

        $l7 = virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $l8 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $l9 = $l7 - $l8;

        $d0 = (double) $l9;

        $l10 = virtualinvoke r2.<android.app.AppOpsManager$HistoricalOps: long getDurationMillis()>();

        $d1 = (double) $l10;

        $d2 = $d0 / $d1;

        staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: android.app.AppOpsManager$HistoricalOps access$200(android.app.AppOpsManager$HistoricalOps,double)>(r2, $d2);

     label3:
        i11 = i11 + -1;

        goto label1;

     label4:
        return;
    }

    private void resampleHistoryOnDiskInMemoryDMLocked(long)
    {
        com.android.server.appop.HistoricalRegistry r0;
        long l0, $l1, $l2;
        com.android.server.appop.HistoricalRegistry$Persistence $r1;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        l0 := @parameter0: long;

        $r1 = new com.android.server.appop.HistoricalRegistry$Persistence;

        $l2 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $l1 = r0.<com.android.server.appop.HistoricalRegistry: long mIntervalCompressionMultiplier>;

        specialinvoke $r1.<com.android.server.appop.HistoricalRegistry$Persistence: void <init>(long,long)>($l2, $l1);

        r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence> = $r1;

        virtualinvoke r0.<com.android.server.appop.HistoricalRegistry: void offsetHistory(long)>(l0);

        return;
    }

    private void schedulePersistHistoricalOpsMLocked(android.app.AppOpsManager$HistoricalOps)
    {
        com.android.server.appop.HistoricalRegistry r0;
        android.app.AppOpsManager$HistoricalOps r1;
        android.os.Message r2;
        com.android.server.appop.'-$$Lambda$bQMBlCyJOKKFDz59ICFPuj1hKGE' $r3;
        android.os.Handler $r4;
        java.util.LinkedList $r5;
        java.util.function.Consumer r6;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        $r3 = <com.android.server.appop._$$Lambda$bQMBlCyJOKKFDz59ICFPuj1hKGE: com.android.server.appop.'-$$Lambda$bQMBlCyJOKKFDz59ICFPuj1hKGE' INSTANCE>;

        r6 = (java.util.function.Consumer) $r3;

        r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.Consumer,java.lang.Object)>(r6, r0);

        r2.<android.os.Message: int what> = 1;

        $r4 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r2);

        $r5 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        virtualinvoke $r5.<java.util.LinkedList: boolean offerFirst(java.lang.Object)>(r1);

        return;
    }

    private void updateParametersFromSetting(android.content.ContentResolver)
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.String r1, r3, $r8, $r9, $r10, $r11, $r15, r18, r19, r20, r21, r22, r23, r24, r25, r28, $r31;
        java.lang.String[] r2, r4;
        int i0, i1, $i3, $i5, $i7, i9;
        long $l4, $l6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r12, $r29;
        java.lang.Throwable $r16;
        android.content.ContentResolver r17;
        byte b10;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r17 := @parameter0: android.content.ContentResolver;

        r1 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r17, "appop_history_parameters");

        if r1 != null goto label01;

        return;

     label01:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r2;

        r18 = null;

        r19 = null;

        r20 = null;

        i9 = 0;

     label02:
        if i9 >= i0 goto label12;

        r3 = r2[i9];

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        r21 = r20;

        r22 = r19;

        r23 = r18;

        $i7 = lengthof r4;

        if $i7 != 2 goto label11;

        $r8 = r4[0];

        r24 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        b10 = -1;

        i1 = virtualinvoke r24.<java.lang.String: int hashCode()>();

        if i1 == -190198682 goto label06;

        if i1 == 3357091 goto label05;

        if i1 == 245634204 goto label04;

     label03:
        goto label07;

     label04:
        $z2 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("baseIntervalMillis");

        if $z2 == 0 goto label03;

        b10 = 1;

        goto label07;

     label05:
        $z1 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("mode");

        if $z1 == 0 goto label03;

        b10 = 0;

        goto label07;

     label06:
        $z0 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("intervalMultiplier");

        if $z0 == 0 goto label03;

        b10 = 2;

     label07:
        if b10 == 0 goto label10;

        if b10 == 1 goto label09;

        if b10 == 2 goto label08;

        r25 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameter: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r25, $r15);

        r21 = r20;

        r22 = r19;

        r23 = r18;

        goto label11;

     label08:
        $r11 = r4[1];

        r23 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        r21 = r20;

        r22 = r19;

        goto label11;

     label09:
        $r10 = r4[1];

        r22 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        r21 = r20;

        r23 = r18;

        goto label11;

     label10:
        $r9 = r4[1];

        r21 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        r23 = r18;

        r22 = r19;

     label11:
        i9 = i9 + 1;

        r20 = r21;

        r19 = r22;

        r18 = r23;

        goto label02;

     label12:
        if r20 == null goto label16;

        if r19 == null goto label16;

        if r18 == null goto label16;

     label13:
        $i3 = staticinvoke <android.app.AppOpsManager: int parseHistoricalMode(java.lang.String)>(r20);

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r19);

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r18);

        $l6 = (long) $i5;

        virtualinvoke r0.<com.android.server.appop.HistoricalRegistry: void setHistoryParameters(int,long,long)>($i3, $l4, $l6);

     label14:
        return;

     label15:
        $r16 := @caughtexception;

     label16:
        r28 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value forappop_history_parameters=");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resetting!");

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r28, $r31);

        return;

        catch java.lang.NumberFormatException from label13 to label14 with label15;
    }

    private static void wtf(java.lang.String, java.lang.Throwable, java.io.File)
    {
        java.io.File r0, r1, r2, $r4;
        java.lang.String $r3, $r6, $r8, $r10, $r15, $r17, $r20, r25;
        boolean $z0, $z1;
        long $l1;
        java.io.PrintWriter $r9, $r19, r28;
        java.io.File[] $r14;
        java.lang.Throwable $r22, $r23, $r24, r26;
        java.lang.StringBuilder r27, r29;

        r25 := @parameter0: java.lang.String;

        r26 := @parameter1: java.lang.Throwable;

        r0 := @parameter2: java.io.File;

        $r3 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r25, r26);

        $z0 = <com.android.server.appop.HistoricalRegistry: boolean KEEP_WTF_LOG>;

        if $z0 == 0 goto label19;

     label01:
        r1 = new java.io.File;

        r2 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "appops");

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wtf");

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = staticinvoke <android.util.TimeUtils: java.lang.String formatForLogging(long)>($l1);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r8);

        $z1 = virtualinvoke r1.<java.io.File: boolean createNewFile()>();

        if $z1 == 0 goto label17;

        r28 = new java.io.PrintWriter;

        specialinvoke r28.<java.io.PrintWriter: void <init>(java.io.File)>(r1);

     label02:
        if r26 == null goto label04;

     label03:
        $r19 = virtualinvoke r28.<java.io.PrintWriter: java.io.PrintWriter append(char)>(10);

        $r20 = virtualinvoke r26.<java.lang.Throwable: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r20);

     label04:
        $r9 = virtualinvoke r28.<java.io.PrintWriter: java.io.PrintWriter append(char)>(10);

        $r10 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(10);

        virtualinvoke $r9.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r10);

     label05:
        if r0 == null goto label08;

     label06:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nfiles: ");

        $r14 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        $r15 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r14);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r28.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r17);

     label07:
        goto label09;

     label08:
        virtualinvoke r28.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("\nfiles: none");

     label09:
        virtualinvoke r28.<java.io.PrintWriter: void close()>();

     label10:
        goto label17;

     label11:
        $r23 := @caughtexception;

     label12:
        virtualinvoke r28.<java.io.PrintWriter: void close()>();

     label13:
        goto label16;

     label14:
        $r22 := @caughtexception;

     label15:
        virtualinvoke $r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

     label16:
        throw $r23;

     label17:
        goto label19;

     label18:
        $r24 := @caughtexception;

     label19:
        return;

        catch java.io.IOException from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.io.IOException from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label18;
        catch java.io.IOException from label16 to label17 with label18;
    }

    void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1;
        boolean $z0;
        long $l0;
        java.util.LinkedList $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        android.app.AppOpsManager$HistoricalOps r7;
        java.util.ArrayList r8;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r7 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label3;

        $r5 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r5, "Interaction before persistence initialized");

        exitmonitor r1;

     label2:
        return;

     label3:
        $l0 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        virtualinvoke r7.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>($l0);

        $r2 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        virtualinvoke $r2.<java.util.LinkedList: boolean offerFirst(java.lang.Object)>(r7);

        r8 = new java.util.ArrayList;

        $r3 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        specialinvoke r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        virtualinvoke $r4.<java.util.LinkedList: void clear()>();

        exitmonitor r1;

     label4:
        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void persistPendingHistory(java.util.List)>(r8);

        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void clearHistory()
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1, r6;
        boolean $z0;
        java.lang.String $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r1;

     label01:
        r6 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r6;

     label02:
        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label05;

        $r3 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r3, "Interaction before persistence initialized");

        exitmonitor r6;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void clearHistoryOnDiskDLocked()>();

        r0.<com.android.server.appop.HistoricalRegistry: long mNextPersistDueTimeMillis> = 0L;

        r0.<com.android.server.appop.HistoricalRegistry: long mPendingHistoryOffsetMillis> = 0L;

        r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps mCurrentHistoricalOps> = null;

        exitmonitor r6;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        throw $r5;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void clearHistory(int, java.lang.String)
    {
        com.android.server.appop.HistoricalRegistry r0;
        int i0, $i1, $i2, i5;
        java.lang.Object r1, r2, $r7;
        boolean $z0;
        java.util.LinkedList $r3, $r6;
        long $l3;
        android.app.AppOpsManager$HistoricalOps $r4, $r8;
        com.android.server.appop.HistoricalRegistry$Persistence $r5;
        java.lang.String $r9, r12;
        java.lang.Throwable $r10, $r11;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        i0 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r1;

     label01:
        r2 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r2;

     label02:
        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label05;

        $r9 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r9, "Interaction before persistence initialized");

        exitmonitor r2;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $i1 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        if $i1 == 1 goto label08;

        exitmonitor r2;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        i5 = 0;

     label09:
        $r3 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        $i2 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if i5 >= $i2 goto label11;

        $r6 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object get(int)>(i5);

        $r8 = (android.app.AppOpsManager$HistoricalOps) $r7;

        virtualinvoke $r8.<android.app.AppOpsManager$HistoricalOps: void clearHistory(int,java.lang.String)>(i0, r12);

     label10:
        i5 = i5 + 1;

        goto label09;

     label11:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps getUpdatedPendingHistoricalOpsMLocked(long)>($l3);

        virtualinvoke $r4.<android.app.AppOpsManager$HistoricalOps: void clearHistory(int,java.lang.String)>(i0, r12);

        $r5 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        virtualinvoke $r5.<com.android.server.appop.HistoricalRegistry$Persistence: void clearHistoryDLocked(int,java.lang.String)>(i0, r12);

        exitmonitor r2;

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r11 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r11;

     label17:
        $r10 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    void dump(java.lang.String, java.io.PrintWriter, int, java.lang.String, java.lang.String, int, int)
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.String r1, r2, $r7, $r10, $r13, r16;
        int i0, $i4, i8, i9, i10, i11;
        java.lang.Object r3, r4, $r12;
        com.android.server.appop.HistoricalRegistry$StringDumpVisitor r5;
        java.lang.StringBuilder r6;
        long l1, l2, l3, $l5, $l6;
        boolean $z0, $z1;
        com.android.server.appop.HistoricalRegistry$Persistence $r11;
        java.lang.Throwable $r14, $r15;
        java.io.PrintWriter r17;
        android.app.AppOpsManager$HistoricalOps r18, r20;
        java.util.List r19;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.io.PrintWriter;

        i8 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        i9 := @parameter5: int;

        i0 := @parameter6: int;

        $z0 = staticinvoke <com.android.server.appop.HistoricalRegistry: boolean isApiEnabled()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r3 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r3;

     label02:
        r4 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r4;

     label03:
        virtualinvoke r17.<java.io.PrintWriter: void println()>();

        virtualinvoke r17.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r17.<java.io.PrintWriter: void print(java.lang.String)>("History:");

        virtualinvoke r17.<java.io.PrintWriter: void print(java.lang.String)>("  mode=");

        $i4 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        $r7 = staticinvoke <android.app.AppOpsManager: java.lang.String historicalModeToString(int)>($i4);

        virtualinvoke r17.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        r5 = new com.android.server.appop.HistoricalRegistry$StringDumpVisitor;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r10 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<com.android.server.appop.HistoricalRegistry$StringDumpVisitor: void <init>(com.android.server.appop.HistoricalRegistry,java.lang.String,java.io.PrintWriter,int,java.lang.String,java.lang.String,int,int)>(r0, $r10, r17, i8, r1, r2, i9, i0);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r18 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps getUpdatedPendingHistoricalOpsMLocked(long)>(l1);

        staticinvoke <com.android.server.appop.HistoricalRegistry: void makeRelativeToEpochStart(android.app.AppOpsManager$HistoricalOps,long)>(r18, l1);

        virtualinvoke r18.<android.app.AppOpsManager$HistoricalOps: void accept(android.app.AppOpsManager$HistoricalOpsVisitor)>(r5);

        $z1 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z1 != 0 goto label06;

        $r13 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r13, "Interaction before persistence initialized");

        exitmonitor r4;

     label04:
        exitmonitor r3;

     label05:
        return;

     label06:
        $r11 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        r19 = virtualinvoke $r11.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.List readHistoryDLocked()>();

     label07:
        if r19 == null goto label14;

     label08:
        l2 = r0.<com.android.server.appop.HistoricalRegistry: long mNextPersistDueTimeMillis>;

        l3 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        i10 = interfaceinvoke r19.<java.util.List: int size()>();

     label09:
        i11 = 0;

     label10:
        if i11 >= i10 goto label13;

     label11:
        $r12 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i11);

        r20 = (android.app.AppOpsManager$HistoricalOps) $r12;

        $l5 = l2 - l1;

        $l6 = $l5 - l3;

        virtualinvoke r20.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>($l6);

        staticinvoke <com.android.server.appop.HistoricalRegistry: void makeRelativeToEpochStart(android.app.AppOpsManager$HistoricalOps,long)>(r20, l1);

        virtualinvoke r20.<android.app.AppOpsManager$HistoricalOps: void accept(android.app.AppOpsManager$HistoricalOpsVisitor)>(r5);

     label12:
        i11 = i11 + 1;

        goto label10;

     label13:
        goto label15;

     label14:
        virtualinvoke r17.<java.io.PrintWriter: void println(java.lang.String)>("  Empty");

     label15:
        exitmonitor r4;

     label16:
        exitmonitor r3;

     label17:
        return;

     label18:
        $r15 := @caughtexception;

     label19:
        exitmonitor r4;

     label20:
        throw $r15;

     label21:
        $r14 := @caughtexception;

     label22:
        exitmonitor r3;

     label23:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    void getHistoricalOps(int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int, android.os.RemoteCallback)
    {
        com.android.server.appop.HistoricalRegistry r0;
        int i0, i1, i3;
        java.lang.String r1, r26, r27;
        java.lang.String[] r2;
        long l2, l4, l5, $l7, $l8, $l10, $l11, $l12, $l13, l16, l17, l18, l19, $l20, l22, l23, l24, l25;
        android.os.RemoteCallback r3;
        java.lang.Object r5, r6;
        boolean z0, $z1, z2;
        android.app.AppOpsManager$HistoricalOps r7, $r8, r31;
        byte $b6, $b9, $b14, $b21;
        com.android.server.appop.HistoricalRegistry$Persistence $r9;
        android.os.Bundle $r10, r28, r35;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, r29, r30;
        java.util.ArrayList r32;
        java.util.LinkedList $r33, $r34;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        i0 := @parameter0: int;

        r26 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String[];

        i1 := @parameter4: int;

        l2 := @parameter5: long;

        l16 := @parameter6: long;

        i3 := @parameter7: int;

        r3 := @parameter8: android.os.RemoteCallback;

        $z1 = staticinvoke <com.android.server.appop.HistoricalRegistry: boolean isApiEnabled()>();

        if $z1 != 0 goto label01;

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>($r10);

        return;

     label01:
        l17 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b6 = l16 cmp 9223372036854775807L;

        if $b6 != 0 goto label02;

        l16 = l17;

        goto label02;

     label02:
        $l7 = l17 - l16;

        l4 = staticinvoke <java.lang.Math: long max(long,long)>($l7, 0L);

        $l8 = l17 - l2;

        l18 = staticinvoke <java.lang.Math: long max(long,long)>($l8, 0L);

        $r8 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke $r8.<android.app.AppOpsManager$HistoricalOps: void <init>(long,long)>(l4, l18);

        r5 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r5;

     label03:
        r6 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r6;

     label04:
        z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

     label05:
        if z0 != 0 goto label13;

     label06:
        r27 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r27, "Interaction before persistence initialized");

        r28 = new android.os.Bundle;

        specialinvoke r28.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(r28);

        exitmonitor r6;

     label08:
        exitmonitor r5;

     label09:
        return;

     label10:
        $r23 := @caughtexception;

        r29 = $r23;

        goto label45;

     label11:
        $r21 := @caughtexception;

        r30 = $r21;

        goto label41;

     label12:
        $r13 := @caughtexception;

        r30 = $r13;

        goto label41;

     label13:
        r7 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps getUpdatedPendingHistoricalOpsMLocked(long)>(l17);

        l19 = virtualinvoke r7.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

     label14:
        $b9 = l4 cmp l19;

        if $b9 >= 0 goto label21;

     label15:
        $l13 = virtualinvoke r7.<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()>();

        $b14 = l18 cmp $l13;

        if $b14 <= 0 goto label19;

        r31 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke r31.<android.app.AppOpsManager$HistoricalOps: void <init>(android.app.AppOpsManager$HistoricalOps)>(r7);

     label16:
        virtualinvoke r31.<android.app.AppOpsManager$HistoricalOps: void filter(int,java.lang.String,java.lang.String,java.lang.String[],int,long,long)>(i0, r26, r1, r2, i1, l4, l18);

        virtualinvoke $r8.<android.app.AppOpsManager$HistoricalOps: void merge(android.app.AppOpsManager$HistoricalOps)>(r31);

     label17:
        goto label21;

     label18:
        $r22 := @caughtexception;

        r30 = $r22;

        goto label41;

     label19:
        goto label21;

     label20:
        $r20 := @caughtexception;

        r30 = $r20;

        goto label41;

     label21:
        r32 = new java.util.ArrayList;

        $r33 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        specialinvoke r32.<java.util.ArrayList: void <init>(java.util.Collection)>($r33);

        $r34 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        virtualinvoke $r34.<java.util.LinkedList: void clear()>();

        $l20 = virtualinvoke r7.<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()>();

        $b21 = l18 cmp $l20;

        if $b21 <= 0 goto label23;

     label22:
        z2 = 1;

        goto label24;

     label23:
        z2 = 0;

     label24:
        exitmonitor r6;

     label25:
        if z2 == 0 goto label34;

     label26:
        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void persistPendingHistory(java.util.List)>(r32);

        l5 = r0.<com.android.server.appop.HistoricalRegistry: long mNextPersistDueTimeMillis>;

     label27:
        l22 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

     label28:
        $l10 = l17 - l5;

        l23 = $l10 + l22;

     label29:
        $l11 = l4 - l23;

        l24 = staticinvoke <java.lang.Math: long max(long,long)>($l11, 0L);

        $l12 = l18 - l23;

        l25 = staticinvoke <java.lang.Math: long max(long,long)>($l12, 0L);

        $r9 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: void access$100(com.android.server.appop.HistoricalRegistry$Persistence,android.app.AppOpsManager$HistoricalOps,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int)>($r9, $r8, i0, r26, r1, r2, i1, l24, l25, i3);

     label30:
        goto label34;

     label31:
        $r12 := @caughtexception;

        r29 = $r12;

        goto label45;

     label32:
        $r11 := @caughtexception;

        r29 = $r11;

        goto label45;

     label33:
        $r24 := @caughtexception;

        r29 = $r24;

        goto label45;

     label34:
        virtualinvoke $r8.<android.app.AppOpsManager$HistoricalOps: void setBeginAndEndTime(long,long)>(l2, l16);

        r35 = new android.os.Bundle;

        specialinvoke r35.<android.os.Bundle: void <init>()>();

        virtualinvoke r35.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("historical_ops", $r8);

     label35:
        virtualinvoke r3.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(r35);

        exitmonitor r5;

     label36:
        return;

     label37:
        $r17 := @caughtexception;

        r29 = $r17;

        goto label45;

     label38:
        $r25 := @caughtexception;

        r30 = $r25;

        goto label41;

     label39:
        $r19 := @caughtexception;

        r30 = $r19;

        goto label41;

     label40:
        $r14 := @caughtexception;

        r30 = $r14;

     label41:
        exitmonitor r6;

     label42:
        throw r30;

     label43:
        $r18 := @caughtexception;

        r30 = $r18;

        goto label41;

     label44:
        $r15 := @caughtexception;

        r29 = $r15;

     label45:
        exitmonitor r5;

     label46:
        throw r29;

     label47:
        $r16 := @caughtexception;

        r29 = $r16;

        goto label45;

        catch java.lang.Throwable from label03 to label04 with label44;
        catch java.lang.Throwable from label04 to label05 with label40;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label39;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label21 to label22 with label38;
        catch java.lang.Throwable from label24 to label25 with label38;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label27 to label28 with label32;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label34 to label35 with label37;
        catch java.lang.Throwable from label35 to label36 with label47;
        catch java.lang.Throwable from label41 to label42 with label43;
        catch java.lang.Throwable from label42 to label43 with label47;
        catch java.lang.Throwable from label45 to label46 with label47;
    }

    void getHistoricalOpsFromDiskRaw(int, java.lang.String, java.lang.String, java.lang.String[], int, long, long, int, android.os.RemoteCallback)
    {
        com.android.server.appop.HistoricalRegistry r0;
        int i0, i1, i4;
        java.lang.String r1, $r8, r12;
        java.lang.String[] r2;
        long l2, l3;
        android.os.RemoteCallback r3;
        java.lang.Object r4, r5;
        android.app.AppOpsManager$HistoricalOps r6;
        boolean $z0, $z1;
        com.android.server.appop.HistoricalRegistry$Persistence $r7;
        android.os.Bundle $r9, r13, r14;
        java.lang.Throwable $r10, $r11;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        i0 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String[];

        i1 := @parameter4: int;

        l2 := @parameter5: long;

        l3 := @parameter6: long;

        i4 := @parameter7: int;

        r3 := @parameter8: android.os.RemoteCallback;

        $z0 = staticinvoke <com.android.server.appop.HistoricalRegistry: boolean isApiEnabled()>();

        if $z0 != 0 goto label01;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>($r9);

        return;

     label01:
        r4 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r4;

     label02:
        r5 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r5;

     label03:
        $z1 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z1 != 0 goto label06;

        $r8 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r8, "Interaction before persistence initialized");

        r13 = new android.os.Bundle;

        specialinvoke r13.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(r13);

        exitmonitor r5;

     label04:
        exitmonitor r4;

     label05:
        return;

     label06:
        r6 = new android.app.AppOpsManager$HistoricalOps;

        specialinvoke r6.<android.app.AppOpsManager$HistoricalOps: void <init>(long,long)>(l2, l3);

        $r7 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        staticinvoke <com.android.server.appop.HistoricalRegistry$Persistence: void access$100(com.android.server.appop.HistoricalRegistry$Persistence,android.app.AppOpsManager$HistoricalOps,int,java.lang.String,java.lang.String,java.lang.String[],int,long,long,int)>($r7, r6, i0, r12, r1, r2, i1, l2, l3, i4);

        r14 = new android.os.Bundle;

        specialinvoke r14.<android.os.Bundle: void <init>()>();

        virtualinvoke r14.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("historical_ops", r6);

        virtualinvoke r3.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(r14);

        exitmonitor r5;

     label07:
        exitmonitor r4;

     label08:
        return;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        throw $r10;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r4;

     label14:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    int getMode()
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void increaseOpAccessDuration(int, int, java.lang.String, java.lang.String, int, int, long)
    {
        com.android.server.appop.HistoricalRegistry r0;
        int i0, i1, i2, i3, $i5;
        java.lang.String r1, $r4, r6;
        long l4, $l6;
        java.lang.Object r2;
        boolean $z0;
        android.app.AppOpsManager$HistoricalOps $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        l4 := @parameter6: long;

        r2 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r2;

     label1:
        $i5 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        if $i5 != 1 goto label4;

        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label3;

        $r4 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r4, "Interaction before persistence initialized");

        exitmonitor r2;

     label2:
        return;

     label3:
        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps getUpdatedPendingHistoricalOpsMLocked(long)>($l6);

        virtualinvoke $r3.<android.app.AppOpsManager$HistoricalOps: void increaseAccessDuration(int,int,java.lang.String,java.lang.String,int,int,long)>(i0, i1, r6, r1, i2, i3, l4);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void incrementOpAccessedCount(int, int, java.lang.String, java.lang.String, int, int)
    {
        com.android.server.appop.HistoricalRegistry r0;
        int i0, i1, i2, i3, $i4;
        java.lang.String r1, $r4, r6;
        java.lang.Object r2;
        boolean $z0;
        long $l5;
        android.app.AppOpsManager$HistoricalOps $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r2;

     label1:
        $i4 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        if $i4 != 1 goto label4;

        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label3;

        $r4 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r4, "Interaction before persistence initialized");

        exitmonitor r2;

     label2:
        return;

     label3:
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps getUpdatedPendingHistoricalOpsMLocked(long)>($l5);

        virtualinvoke $r3.<android.app.AppOpsManager$HistoricalOps: void increaseAccessCount(int,int,java.lang.String,java.lang.String,int,int,long)>(i0, i1, r6, r1, i2, i3, 1L);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void incrementOpRejected(int, int, java.lang.String, java.lang.String, int, int)
    {
        com.android.server.appop.HistoricalRegistry r0;
        int i0, i1, i2, i3, $i4;
        java.lang.String r1, $r4, r6;
        java.lang.Object r2;
        boolean $z0;
        long $l5;
        android.app.AppOpsManager$HistoricalOps $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r2;

     label1:
        $i4 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        if $i4 != 1 goto label4;

        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label3;

        $r4 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r4, "Interaction before persistence initialized");

        exitmonitor r2;

     label2:
        return;

     label3:
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: android.app.AppOpsManager$HistoricalOps getUpdatedPendingHistoricalOpsMLocked(long)>($l5);

        virtualinvoke $r3.<android.app.AppOpsManager$HistoricalOps: void increaseRejectCount(int,int,java.lang.String,java.lang.String,int,int,long)>(i0, i1, r6, r1, i2, i3, 1L);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void offsetHistory(long)
    {
        com.android.server.appop.HistoricalRegistry r0;
        long l0;
        java.lang.Object r1, $r4, r9;
        int i1, i4;
        boolean $z0;
        com.android.server.appop.HistoricalRegistry$Persistence $r2, $r3;
        byte $b2;
        android.app.AppOpsManager$HistoricalOps $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7, $r8;
        java.util.List r10;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r1;

     label01:
        r9 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r9;

     label02:
        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label05;

        $r6 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r6, "Interaction before persistence initialized");

        exitmonitor r9;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r2 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        r10 = virtualinvoke $r2.<com.android.server.appop.HistoricalRegistry$Persistence: java.util.List readHistoryDLocked()>();

        virtualinvoke r0.<com.android.server.appop.HistoricalRegistry: void clearHistory()>();

     label06:
        if r10 == null goto label15;

     label07:
        i1 = interfaceinvoke r10.<java.util.List: int size()>();

     label08:
        i4 = 0;

     label09:
        if i4 >= i1 goto label12;

     label10:
        $r4 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i4);

        $r5 = (android.app.AppOpsManager$HistoricalOps) $r4;

        virtualinvoke $r5.<android.app.AppOpsManager$HistoricalOps: void offsetBeginAndEndTime(long)>(l0);

     label11:
        i4 = i4 + 1;

        goto label09;

     label12:
        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label14;

     label13:
        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void pruneFutureOps(java.util.List)>(r10);

     label14:
        $r3 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        virtualinvoke $r3.<com.android.server.appop.HistoricalRegistry$Persistence: void persistHistoricalOpsDLocked(java.util.List)>(r10);

     label15:
        exitmonitor r9;

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r7 := @caughtexception;

     label19:
        exitmonitor r9;

     label20:
        throw $r7;

     label21:
        $r8 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    void persistPendingHistory()
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1, r6;
        java.util.LinkedList $r2, $r3;
        long $l0, $l2;
        byte $b1;
        java.lang.Throwable $r4, $r5;
        java.util.ArrayList r7;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r1;

     label01:
        r6 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r6;

     label02:
        r7 = new java.util.ArrayList;

        $r2 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        specialinvoke r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = r0.<com.android.server.appop.HistoricalRegistry: java.util.LinkedList mPendingWrites>;

        virtualinvoke $r3.<java.util.LinkedList: void clear()>();

        $l0 = r0.<com.android.server.appop.HistoricalRegistry: long mPendingHistoryOffsetMillis>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label03;

        $l2 = r0.<com.android.server.appop.HistoricalRegistry: long mPendingHistoryOffsetMillis>;

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void resampleHistoryOnDiskInMemoryDMLocked(long)>($l2);

        r0.<com.android.server.appop.HistoricalRegistry: long mPendingHistoryOffsetMillis> = 0L;

     label03:
        exitmonitor r6;

     label04:
        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void persistPendingHistory(java.util.List)>(r7);

        exitmonitor r1;

     label05:
        return;

     label06:
        $r4 := @caughtexception;

     label07:
        exitmonitor r6;

     label08:
        throw $r4;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void resetHistoryParameters()
    {
        com.android.server.appop.HistoricalRegistry r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label1;

        $r1 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r1, "Interaction before persistence initialized");

        return;

     label1:
        $l0 = <com.android.server.appop.HistoricalRegistry: long DEFAULT_SNAPSHOT_INTERVAL_MILLIS>;

        virtualinvoke r0.<com.android.server.appop.HistoricalRegistry: void setHistoryParameters(int,long,long)>(1, $l0, 10L);

        return;
    }

    void setHistoryParameters(int, long, long)
    {
        com.android.server.appop.HistoricalRegistry r0;
        long l0, l1, $l4, $l7;
        java.lang.Object r1, r13;
        java.lang.StringBuilder r2;
        java.lang.String $r4, $r10, r14;
        int $i3, i6;
        byte $b5, $b8;
        java.lang.Throwable $r11, $r12;
        boolean z1;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        i6 := @parameter0: int;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r1;

     label01:
        r13 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r13;

     label02:
        r14 = <com.android.server.appop.HistoricalRegistry: java.lang.String LOG_TAG>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New history parameters: mode:");

        $r4 = staticinvoke <android.app.AppOpsManager: java.lang.String historicalModeToString(int)>(i6);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" baseSnapshotInterval:");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" intervalCompressionMultiplier:");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r14, $r10);

        $i3 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        if $i3 == i6 goto label05;

        r0.<com.android.server.appop.HistoricalRegistry: int mMode> = i6;

     label03:
        if i6 != 0 goto label05;

     label04:
        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void clearHistoryOnDiskDLocked()>();

     label05:
        z1 = 0;

     label06:
        $l7 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $b8 = $l7 cmp l0;

        if $b8 == 0 goto label08;

        r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval> = l0;

     label07:
        z1 = 1;

     label08:
        $l4 = r0.<com.android.server.appop.HistoricalRegistry: long mIntervalCompressionMultiplier>;

        $b5 = $l4 cmp l1;

        if $b5 == 0 goto label10;

        r0.<com.android.server.appop.HistoricalRegistry: long mIntervalCompressionMultiplier> = l1;

     label09:
        z1 = 1;

     label10:
        if z1 == 0 goto label12;

     label11:
        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void resampleHistoryOnDiskInMemoryDMLocked(long)>(0L);

     label12:
        exitmonitor r13;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r11 := @caughtexception;

     label16:
        exitmonitor r13;

     label17:
        throw $r11;

     label18:
        $r12 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    void shutdown()
    {
        com.android.server.appop.HistoricalRegistry r0;
        java.lang.Object r1;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r1 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        if $i0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.appop.HistoricalRegistry: void persistPendingHistory()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void systemReady(android.content.ContentResolver)
    {
        com.android.server.appop.HistoricalRegistry r0;
        long l0, $l3, $l4, $l5, $l6;
        android.net.Uri $r1;
        com.android.server.appop.HistoricalRegistry$1 $r2;
        android.os.Handler $r3;
        int $i1;
        boolean $z0;
        com.android.server.appop.HistoricalRegistry$Persistence $r4, r10;
        byte $b2;
        java.lang.Throwable $r5, $r6;
        android.content.ContentResolver r7;
        java.lang.Object r8, r9;

        r0 := @this: com.android.server.appop.HistoricalRegistry;

        r7 := @parameter0: android.content.ContentResolver;

        $r1 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("appop_history_parameters");

        $r2 = new com.android.server.appop.HistoricalRegistry$1;

        $r3 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        specialinvoke $r2.<com.android.server.appop.HistoricalRegistry$1: void <init>(com.android.server.appop.HistoricalRegistry,android.os.Handler,android.content.ContentResolver)>(r0, $r3, r7);

        virtualinvoke r7.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r1, 0, $r2);

        specialinvoke r0.<com.android.server.appop.HistoricalRegistry: void updateParametersFromSetting(android.content.ContentResolver)>(r7);

        r8 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mOnDiskLock>;

        entermonitor r8;

     label01:
        r9 = r0.<com.android.server.appop.HistoricalRegistry: java.lang.Object mInMemoryLock>;

        entermonitor r9;

     label02:
        $i1 = r0.<com.android.server.appop.HistoricalRegistry: int mMode>;

        if $i1 == 0 goto label06;

        $z0 = specialinvoke r0.<com.android.server.appop.HistoricalRegistry: boolean isPersistenceInitializedMLocked()>();

        if $z0 != 0 goto label03;

        r10 = new com.android.server.appop.HistoricalRegistry$Persistence;

        $l6 = r0.<com.android.server.appop.HistoricalRegistry: long mBaseSnapshotInterval>;

        $l5 = r0.<com.android.server.appop.HistoricalRegistry: long mIntervalCompressionMultiplier>;

        specialinvoke r10.<com.android.server.appop.HistoricalRegistry$Persistence: void <init>(long,long)>($l6, $l5);

        r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence> = r10;

     label03:
        $r4 = r0.<com.android.server.appop.HistoricalRegistry: com.android.server.appop.HistoricalRegistry$Persistence mPersistence>;

        l0 = virtualinvoke $r4.<com.android.server.appop.HistoricalRegistry$Persistence: long getLastPersistTimeMillisDLocked()>();

     label04:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label06;

     label05:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = $l3 - l0;

        r0.<com.android.server.appop.HistoricalRegistry: long mPendingHistoryOffsetMillis> = $l4;

     label06:
        exitmonitor r9;

     label07:
        exitmonitor r8;

     label08:
        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r9;

     label11:
        throw $r5;

     label12:
        $r6 := @caughtexception;

     label13:
        exitmonitor r8;

     label14:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }
}
