public class com.android.server.audio.AudioService$AudioPolicyProxy extends android.media.audiopolicy.AudioPolicyConfig implements android.os.IBinder$DeathRecipient
{
    private static final java.lang.String TAG;
    int mFocusDuckBehavior;
    final boolean mHasFocusListener;
    boolean mIsFocusPolicy;
    boolean mIsTestFocusPolicy;
    final boolean mIsVolumeController;
    final android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback;
    final android.media.projection.IMediaProjection mProjection;
    com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback mProjectionCallback;
    final java.util.HashMap mUidDeviceAffinities;
    final java.util.HashMap mUserIdDeviceAffinities;
    final com.android.server.audio.AudioService this$0;

    void <init>(com.android.server.audio.AudioService, android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback, boolean, boolean, boolean, boolean, android.media.projection.IMediaProjection)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        android.media.audiopolicy.IAudioPolicyCallback r1, $r20, $r22, $r24;
        boolean z0, z1, z2, z3, $z4, $z5;
        android.media.projection.IMediaProjection r2, $r12, $r19;
        int i0, $i1, $i2;
        java.util.HashMap $r4, $r5;
        java.lang.StringBuilder $r6, $r13, $r26;
        java.lang.String $r10, $r11, $r17, $r31;
        java.lang.IllegalStateException $r16, $r30;
        com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback $r18;
        com.android.server.audio.MediaFocusControl $r21, $r23;
        android.os.RemoteException $r25;
        com.android.server.audio.AudioService r32;
        android.media.audiopolicy.AudioPolicyConfig r33;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        r32 := @parameter0: com.android.server.audio.AudioService;

        r33 := @parameter1: android.media.audiopolicy.AudioPolicyConfig;

        r1 := @parameter2: android.media.audiopolicy.IAudioPolicyCallback;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        z3 := @parameter6: boolean;

        r2 := @parameter7: android.media.projection.IMediaProjection;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0> = r32;

        specialinvoke r0.<android.media.audiopolicy.AudioPolicyConfig: void <init>(android.media.audiopolicy.AudioPolicyConfig)>(r33);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUidDeviceAffinities> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUserIdDeviceAffinities> = $r5;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int mFocusDuckBehavior> = 0;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsFocusPolicy> = 0;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsTestFocusPolicy> = 0;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $i1 = virtualinvoke r33.<android.media.audiopolicy.AudioPolicyConfig: int hashCode()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":ap:");

        $i2 = staticinvoke <com.android.server.audio.AudioService: int access$9608(com.android.server.audio.AudioService)>(r32);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = new java.lang.String;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.String: void <init>(java.lang.String)>($r11);

        virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: void setRegistration(java.lang.String)>($r10);

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback> = r1;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mHasFocusListener> = z0;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsVolumeController> = z3;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.projection.IMediaProjection mProjection> = r2;

        if z0 == 0 goto label1;

        $r21 = staticinvoke <com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl access$7400(com.android.server.audio.AudioService)>(r32);

        $r22 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        virtualinvoke $r21.<com.android.server.audio.MediaFocusControl: void addFocusFollower(android.media.audiopolicy.IAudioPolicyCallback)>($r22);

        if z1 == 0 goto label1;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsFocusPolicy> = 1;

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsTestFocusPolicy> = z2;

        $r23 = staticinvoke <com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl access$7400(com.android.server.audio.AudioService)>(r32);

        $r24 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        $z4 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsTestFocusPolicy>;

        virtualinvoke $r23.<com.android.server.audio.MediaFocusControl: void setFocusPolicy(android.media.audiopolicy.IAudioPolicyCallback,boolean)>($r24, $z4);

     label1:
        $z5 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsVolumeController>;

        if $z5 == 0 goto label2;

        $r20 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        staticinvoke <com.android.server.audio.AudioService: void access$9700(com.android.server.audio.AudioService,android.media.audiopolicy.IAudioPolicyCallback)>(r32, $r20);

     label2:
        $r12 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.projection.IMediaProjection mProjection>;

        if $r12 == null goto label6;

        $r18 = new com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback;

        specialinvoke $r18.<com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback: void <init>(com.android.server.audio.AudioService$AudioPolicyProxy,com.android.server.audio.AudioService$1)>(r0, null);

        r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback mProjectionCallback> = $r18;

     label3:
        $r19 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.projection.IMediaProjection mProjection>;

        interfaceinvoke $r19.<android.media.projection.IMediaProjection: void registerCallback(android.media.projection.IMediaProjectionCallback)>($r18);

     label4:
        goto label6;

     label5:
        $r25 := @caughtexception;

        virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: void release()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MediaProjection callback registration failed, could not link to ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" binder death");

        $r30 = new java.lang.IllegalStateException;

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r25);

        throw $r30;

     label6:
        i0 = virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int connectMixes()>();

        if i0 != 0 goto label7;

        return;

     label7:
        virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: void release()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect mix, error: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private java.lang.String logFriendlyAttributeDeviceArrayMap(java.lang.String, java.util.Map, java.lang.String)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        java.lang.String r1, r2, $r6, $r22, $r26, r34;
        java.lang.StringBuilder $r4, $r15;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r7, $r11, $r14;
        int[] $r18, $r21;
        int $i0, $i1, i2;
        java.lang.String[] $r25;
        java.util.Map r29;
        java.util.Iterator r30;
        java.util.Map$Entry r31;
        com.android.server.audio.AudioService$AudioDeviceArray r32;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        r1 := @parameter0: java.lang.String;

        r29 := @parameter1: java.util.Map;

        r2 := @parameter2: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = interfaceinvoke r29.<java.util.Map: java.util.Set entrySet()>();

        r30 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.util.Map$Entry) $r7;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r14 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getValue()>();

        r32 = (com.android.server.audio.AudioService$AudioDeviceArray) $r14;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        r34 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        i2 = 0;

     label2:
        $r18 = r32.<com.android.server.audio.AudioService$AudioDeviceArray: int[] mDeviceTypes>;

        $i0 = lengthof $r18;

        if i2 >= $i0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type: 0x");

        $r21 = r32.<com.android.server.audio.AudioService$AudioDeviceArray: int[] mDeviceTypes>;

        $i1 = $r21[i2];

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Address: ");

        $r25 = r32.<com.android.server.audio.AudioService$AudioDeviceArray: java.lang.String[] mDeviceAddresses>;

        $r26 = $r25[i2];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i2 = i2 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private int removeUidDeviceAffinitiesFromSystem(int)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        long l0;
        java.lang.Throwable $r2;
        int i1, i2;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i1 := @parameter0: int;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        i2 = staticinvoke <android.media.AudioSystem: int removeUidDeviceAffinities(int)>(i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i2;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int removeUserIdDeviceAffinitiesFromSystem(int)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        long l0;
        java.lang.Throwable $r2;
        int i1, i2;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i1 := @parameter0: int;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        i2 = staticinvoke <android.media.AudioSystem: int removeUserIdDeviceAffinities(int)>(i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i2;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int setUidDeviceAffinitiesOnSystem(int, com.android.server.audio.AudioService$AudioDeviceArray)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        long l0;
        java.lang.String[] $r1;
        int[] $r2;
        java.lang.Throwable $r3;
        int i1, i2;
        com.android.server.audio.AudioService$AudioDeviceArray r4;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i1 := @parameter0: int;

        r4 := @parameter1: com.android.server.audio.AudioService$AudioDeviceArray;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r4.<com.android.server.audio.AudioService$AudioDeviceArray: int[] mDeviceTypes>;

        $r1 = r4.<com.android.server.audio.AudioService$AudioDeviceArray: java.lang.String[] mDeviceAddresses>;

        i2 = staticinvoke <android.media.AudioSystem: int setUidDeviceAffinities(int,int[],java.lang.String[])>(i1, $r2, $r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i2;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int setUserIdDeviceAffinitiesOnSystem(int, com.android.server.audio.AudioService$AudioDeviceArray)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        long l0;
        java.lang.String[] $r1;
        int[] $r2;
        java.lang.Throwable $r3;
        int i1, i2;
        com.android.server.audio.AudioService$AudioDeviceArray r4;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i1 := @parameter0: int;

        r4 := @parameter1: com.android.server.audio.AudioService$AudioDeviceArray;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r4.<com.android.server.audio.AudioService$AudioDeviceArray: int[] mDeviceTypes>;

        $r1 = r4.<com.android.server.audio.AudioService$AudioDeviceArray: java.lang.String[] mDeviceAddresses>;

        i2 = staticinvoke <android.media.AudioSystem: int setUserIdDeviceAffinities(int,int[],java.lang.String[])>(i1, $r2, $r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i2;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int addMixes(java.util.ArrayList)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        java.util.ArrayList r1, $r2, $r3, r5;
        int i0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        r5 := @parameter0: java.util.ArrayList;

        r1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        staticinvoke <android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)>($r2, 0);

        virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: void add(java.util.ArrayList)>(r5);

        $r3 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        i0 = staticinvoke <android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)>($r3, 1);

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void binderDied()
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        java.lang.StringBuilder $r2;
        android.media.audiopolicy.IAudioPolicyCallback $r4;
        java.lang.String $r7;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio policy ");

        $r4 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" died");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r7);

        virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: void release()>();

        return;
    }

    int connectMixes()
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        long l0;
        int i1;
        java.util.ArrayList $r1;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        i1 = staticinvoke <android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)>($r1, 1);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i1;
    }

    java.lang.String getRegistrationId()
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        $r1 = virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String getRegistration()>();

        return $r1;
    }

    boolean hasMixAffectingUsage(int, int)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        int i0, i1, $i2, $i3;
        java.util.Iterator r1;
        android.media.audiopolicy.AudioMix r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.audiopolicy.AudioMix) $r4;

        $z1 = virtualinvoke r2.<android.media.audiopolicy.AudioMix: boolean isAffectingUsage(int)>(i0);

        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r2.<android.media.audiopolicy.AudioMix: int getRouteFlags()>();

        $i3 = $i2 & i1;

        if $i3 == i1 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    boolean hasMixRoutedToDevices(int[], java.lang.String[])
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        int[] r1;
        java.lang.String[] r2;
        java.util.Iterator r3;
        int $i0, $i1, i2;
        java.util.ArrayList $r4;
        boolean $z1, $z2, z3;
        java.lang.Object $r5;
        java.lang.String $r6;
        android.media.audiopolicy.AudioMix $r7;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        r1 := @parameter0: int[];

        r2 := @parameter1: java.lang.String[];

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label6;

        $r4 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        r3 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        z3 = 0;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.media.audiopolicy.AudioMix) $r5;

        $i1 = r1[i2];

        $r6 = r2[i2];

        $z2 = virtualinvoke $r7.<android.media.audiopolicy.AudioMix: boolean isRoutedToDevice(int,java.lang.String)>($i1, $r6);

        if $z2 == 0 goto label3;

        z3 = 1;

        goto label4;

     label3:
        goto label2;

     label4:
        if z3 != 0 goto label5;

        return 0;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return 1;
    }

    void release()
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        long l0;
        boolean $z0, $z1, $z2, $z3;
        int $i1;
        java.util.ArrayList $r1;
        com.android.server.audio.AudioService $r2, $r3, $r9, $r10, $r13, $r16, $r18;
        java.util.HashMap $r4, r29;
        android.media.audiopolicy.IAudioPolicyCallback $r5, $r8, $r15, $r20;
        android.os.IBinder $r6;
        android.media.projection.IMediaProjection $r12;
        com.android.server.audio.MediaFocusControl $r14, $r17, $r19;
        java.lang.Throwable $r21, $r22;
        android.os.RemoteException $r23, $r24;
        com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback r25;
        java.lang.Object r27;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        $z0 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsFocusPolicy>;

        if $z0 == 0 goto label01;

        $r18 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0>;

        $r19 = staticinvoke <com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl access$7400(com.android.server.audio.AudioService)>($r18);

        $r20 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        $z2 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsTestFocusPolicy>;

        virtualinvoke $r19.<com.android.server.audio.MediaFocusControl: void unsetFocusPolicy(android.media.audiopolicy.IAudioPolicyCallback,boolean)>($r20, $z2);

     label01:
        $i1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int mFocusDuckBehavior>;

        if $i1 != 1 goto label02;

        $r16 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0>;

        $r17 = staticinvoke <com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl access$7400(com.android.server.audio.AudioService)>($r16);

        virtualinvoke $r17.<com.android.server.audio.MediaFocusControl: void setDuckingInExtPolicyAvailable(boolean)>(0);

     label02:
        $z1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mHasFocusListener>;

        if $z1 == 0 goto label03;

        $r13 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0>;

        $r14 = staticinvoke <com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl access$7400(com.android.server.audio.AudioService)>($r13);

        $r15 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        virtualinvoke $r14.<com.android.server.audio.MediaFocusControl: void removeFocusFollower(android.media.audiopolicy.IAudioPolicyCallback)>($r15);

     label03:
        r25 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback mProjectionCallback>;

        if r25 == null goto label07;

     label04:
        $r12 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.projection.IMediaProjection mProjection>;

        interfaceinvoke $r12.<android.media.projection.IMediaProjection: void unregisterCallback(android.media.projection.IMediaProjectionCallback)>(r25);

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", "Fail to unregister Audiopolicy callback from MediaProjection");

     label07:
        $z3 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsVolumeController>;

        if $z3 == 0 goto label13;

        $r9 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0>;

        r27 = staticinvoke <com.android.server.audio.AudioService: java.lang.Object access$9900(com.android.server.audio.AudioService)>($r9);

        entermonitor r27;

     label08:
        $r10 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0>;

        staticinvoke <com.android.server.audio.AudioService: android.media.audiopolicy.IAudioPolicyCallback access$10002(com.android.server.audio.AudioService,android.media.audiopolicy.IAudioPolicyCallback)>($r10, null);

        exitmonitor r27;

     label09:
        goto label13;

     label10:
        $r22 := @caughtexception;

     label11:
        exitmonitor r27;

     label12:
        throw $r22;

     label13:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        staticinvoke <android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)>($r1, 0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r2 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0>;

        r29 = staticinvoke <com.android.server.audio.AudioService: java.util.HashMap access$10100(com.android.server.audio.AudioService)>($r2);

        entermonitor r29;

     label14:
        $r3 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: com.android.server.audio.AudioService this$0>;

        $r4 = staticinvoke <com.android.server.audio.AudioService: java.util.HashMap access$10100(com.android.server.audio.AudioService)>($r3);

        $r5 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        $r6 = interfaceinvoke $r5.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);

        exitmonitor r29;

     label15:
        $r8 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        interfaceinvoke $r8.<android.media.audiopolicy.IAudioPolicyCallback: void notifyUnregistration()>();

     label16:
        goto label18;

     label17:
        $r24 := @caughtexception;

     label18:
        return;

     label19:
        $r21 := @caughtexception;

     label20:
        exitmonitor r29;

     label21:
        throw $r21;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch android.os.RemoteException from label15 to label16 with label17;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    int removeMixes(java.util.ArrayList)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        java.util.ArrayList r1, $r2, $r3, r5;
        int i0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        r5 := @parameter0: java.util.ArrayList;

        r1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        staticinvoke <android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)>($r2, 0);

        virtualinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: void remove(java.util.ArrayList)>(r5);

        $r3 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList mMixes>;

        i0 = staticinvoke <android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)>($r3, 1);

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int removeUidDeviceAffinities(int)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        int i0, $i2;
        java.lang.Integer $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUidDeviceAffinities>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        if $r3 == null goto label1;

        $i2 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUidDeviceAffinitiesFromSystem(int)>(i0);

        if $i2 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", "AudioSystem. removeUidDeviceAffinities failed");

        return -1;
    }

    int removeUserIdDeviceAffinities(int)
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        int i0, $i2;
        java.lang.Integer $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUserIdDeviceAffinities>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        if $r3 == null goto label1;

        $i2 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUserIdDeviceAffinitiesFromSystem(int)>(i0);

        if $i2 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", "AudioSystem.removeUserIdDeviceAffinities failed");

        return -1;
    }

    int setUidDeviceAffinities(int, int[], java.lang.String[])
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        int i0, $i1, $i3;
        java.lang.String[] r1;
        java.lang.Integer $r3;
        java.util.HashMap $r4, $r12;
        java.lang.Object $r5;
        com.android.server.audio.AudioService$AudioDeviceArray $r6;
        java.lang.StringBuilder $r7, $r14;
        java.lang.String $r11, $r18;
        int[] r19;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i0 := @parameter0: int;

        r19 := @parameter1: int[];

        r1 := @parameter2: java.lang.String[];

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        $r4 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUidDeviceAffinities>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r3);

        if $r5 == null goto label1;

        $i3 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUidDeviceAffinitiesFromSystem(int)>(i0);

        if $i3 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioSystem. removeUidDeviceAffinities(");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") failed,  cannot call AudioSystem.setUidDeviceAffinities");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r18);

        return -1;

     label1:
        $r6 = new com.android.server.audio.AudioService$AudioDeviceArray;

        specialinvoke $r6.<com.android.server.audio.AudioService$AudioDeviceArray: void <init>(int[],java.lang.String[])>(r19, r1);

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int setUidDeviceAffinitiesOnSystem(int,com.android.server.audio.AudioService$AudioDeviceArray)>(i0, $r6);

        if $i1 != 0 goto label2;

        $r12 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUidDeviceAffinities>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        return 0;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioSystem. setUidDeviceAffinities(");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") failed");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r11);

        return -1;
    }

    int setUserIdDeviceAffinities(int, int[], java.lang.String[])
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        int i0, $i1, $i3;
        java.lang.String[] r1;
        java.lang.Integer $r3;
        java.util.HashMap $r4, $r12;
        java.lang.Object $r5;
        com.android.server.audio.AudioService$AudioDeviceArray $r6;
        java.lang.StringBuilder $r7, $r14;
        java.lang.String $r11, $r18;
        int[] r19;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        i0 := @parameter0: int;

        r19 := @parameter1: int[];

        r1 := @parameter2: java.lang.String[];

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        $r4 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUserIdDeviceAffinities>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r3);

        if $r5 == null goto label1;

        $i3 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUserIdDeviceAffinitiesFromSystem(int)>(i0);

        if $i3 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioSystem. removeUserIdDeviceAffinities(");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") failed,  cannot call AudioSystem.setUserIdDeviceAffinities");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r18);

        return -1;

     label1:
        $r6 = new com.android.server.audio.AudioService$AudioDeviceArray;

        specialinvoke $r6.<com.android.server.audio.AudioService$AudioDeviceArray: void <init>(int[],java.lang.String[])>(r19, r1);

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int setUserIdDeviceAffinitiesOnSystem(int,com.android.server.audio.AudioService$AudioDeviceArray)>(i0, $r6);

        if $i1 != 0 goto label2;

        $r12 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUserIdDeviceAffinities>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        return 0;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioSystem.setUserIdDeviceAffinities(");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") failed");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r11);

        return -1;
    }

    int setupDeviceAffinities()
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        java.util.HashMap $r1, $r3;
        java.util.Set $r2, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6, $r8, $r10, $r14, $r19, $r22, $r23, $r25, $r27, $r31, $r36;
        java.lang.Integer $r7, $r9, $r24, $r26;
        int $i0, $i1, $i4, $i5, i8, i9, i10, i11;
        com.android.server.audio.AudioService$AudioDeviceArray $r11, $r28;
        java.lang.StringBuilder $r12, $r17, $r29, $r34;
        java.lang.String $r16, $r21, $r33, $r38;
        java.util.Iterator r39, r43;
        java.util.Map$Entry r40, r44;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        $r1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUidDeviceAffinities>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        r39 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.util.Map$Entry) $r22;

        $r23 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.Integer) $r23;

        $i4 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        i8 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUidDeviceAffinitiesFromSystem(int)>($i4);

        if i8 == 0 goto label2;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setupDeviceAffinities failed to remove device affinity for uid ");

        $r36 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r38);

        return i8;

     label2:
        $r25 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.Integer) $r25;

        $i5 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        $r27 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r28 = (com.android.server.audio.AudioService$AudioDeviceArray) $r27;

        i9 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int setUidDeviceAffinitiesOnSystem(int,com.android.server.audio.AudioService$AudioDeviceArray)>($i5, $r28);

        if i9 == 0 goto label3;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setupDeviceAffinities failed to set device affinity for uid ");

        $r31 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r33);

        return i9;

     label3:
        goto label1;

     label4:
        $r3 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUserIdDeviceAffinities>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set entrySet()>();

        r43 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r5 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        i10 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUserIdDeviceAffinitiesFromSystem(int)>($i0);

        if i10 == 0 goto label6;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setupDeviceAffinities failed to remove device affinity for userId ");

        $r19 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r21);

        return i10;

     label6:
        $r8 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.android.server.audio.AudioService$AudioDeviceArray) $r10;

        i11 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int setUserIdDeviceAffinitiesOnSystem(int,com.android.server.audio.AudioService$AudioDeviceArray)>($i1, $r11);

        if i11 == 0 goto label7;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setupDeviceAffinities failed to set device affinity for userId ");

        $r14 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicyProxy", $r16);

        return i11;

     label7:
        goto label5;

     label8:
        return 0;
    }

    public java.lang.String toLogFriendlyString()
    {
        com.android.server.audio.AudioService$AudioPolicyProxy r0;
        java.lang.StringBuilder $r1, $r4, $r9, $r12, $r17, $r20, $r25, $r32, $r37, $r42;
        java.util.HashMap $r6, $r14;
        java.lang.String $r7, $r15, $r31, r47, r49, r51, r53, r55, r57, r59, r60, r62, r64;
        boolean $z0, $z1, $z2, $z3;
        android.media.projection.IMediaProjection $r28;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService$AudioPolicyProxy;

        r47 = specialinvoke r0.<android.media.audiopolicy.AudioPolicyConfig: java.lang.String toLogFriendlyString()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Uid Device Affinities:\n");

        r49 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        $r6 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUidDeviceAffinities>;

        $r7 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String logFriendlyAttributeDeviceArrayMap(java.lang.String,java.util.Map,java.lang.String)>("Uid", $r6, "     ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r51 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UserId Device Affinities:\n");

        r53 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r53);

        $r14 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.HashMap mUserIdDeviceAffinities>;

        $r15 = specialinvoke r0.<com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String logFriendlyAttributeDeviceArrayMap(java.lang.String,java.util.Map,java.lang.String)>("UserId", $r14, "     ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r55 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r55);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Proxy:\n");

        r57 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   is focus policy= ");

        $z0 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsFocusPolicy>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r59 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r60 = r59;

        $z1 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsFocusPolicy>;

        if $z1 == 0 goto label1;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     focus duck behaviour= ");

        $i0 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: int mFocusDuckBehavior>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r62 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     is test focus policy= ");

        $z2 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mIsTestFocusPolicy>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r64 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     has focus listener= ");

        $z3 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean mHasFocusListener>;

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r60 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   media projection= ");

        $r28 = r0.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.projection.IMediaProjection mProjection>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r31;
    }

    public static void <clinit>()
    {
        <com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String TAG> = "AudioPolicyProxy";

        return;
    }
}
