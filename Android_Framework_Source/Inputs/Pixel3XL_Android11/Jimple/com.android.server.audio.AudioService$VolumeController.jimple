public class com.android.server.audio.AudioService$VolumeController extends java.lang.Object
{
    private static final java.lang.String TAG;
    private android.media.IVolumeController mController;
    private int mLongPressTimeout;
    private long mNextLongPress;
    private boolean mVisible;

    public void <init>()
    {
        com.android.server.audio.AudioService$VolumeController r0;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static android.os.IBinder binder(android.media.IVolumeController)
    {
        android.media.IVolumeController r0;
        android.os.IBinder r1;

        r0 := @parameter0: android.media.IVolumeController;

        if r0 != null goto label1;

        r1 = null;

        goto label2;

     label1:
        r1 = interfaceinvoke r0.<android.media.IVolumeController: android.os.IBinder asBinder()>();

     label2:
        return r1;
    }

    public android.os.IBinder asBinder()
    {
        com.android.server.audio.AudioService$VolumeController r0;
        android.media.IVolumeController $r1;
        android.os.IBinder $r2;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        $r1 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        $r2 = staticinvoke <com.android.server.audio.AudioService$VolumeController: android.os.IBinder binder(android.media.IVolumeController)>($r1);

        return $r2;
    }

    public boolean isSameBinder(android.media.IVolumeController)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        android.media.IVolumeController r1;
        android.os.IBinder $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        r1 := @parameter0: android.media.IVolumeController;

        $r2 = virtualinvoke r0.<com.android.server.audio.AudioService$VolumeController: android.os.IBinder asBinder()>();

        $r3 = staticinvoke <com.android.server.audio.AudioService$VolumeController: android.os.IBinder binder(android.media.IVolumeController)>(r1);

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $z0;
    }

    public void loadSettings(android.content.ContentResolver)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        android.content.ContentResolver r1;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        r1 := @parameter0: android.content.ContentResolver;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "long_press_timeout", 500, -2);

        r0.<com.android.server.audio.AudioService$VolumeController: int mLongPressTimeout> = $i0;

        return;
    }

    public void postDismiss()
    {
        com.android.server.audio.AudioService$VolumeController r0;
        android.os.RemoteException $r1;
        android.media.IVolumeController r2;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        r2 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        if r2 != null goto label1;

        return;

     label1:
        interfaceinvoke r2.<android.media.IVolumeController: void dismiss()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("VolumeController", "Error calling dismiss", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void postDisplaySafeVolumeWarning(int)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        int i0;
        android.os.RemoteException $r1;
        android.media.IVolumeController r2;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        i0 := @parameter0: int;

        r2 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        if r2 != null goto label1;

        return;

     label1:
        interfaceinvoke r2.<android.media.IVolumeController: void displaySafeVolumeWarning(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("VolumeController", "Error calling displaySafeVolumeWarning", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void postMasterMuteChanged(int)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        int i0;
        android.os.RemoteException $r1;
        android.media.IVolumeController r2;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        i0 := @parameter0: int;

        r2 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        if r2 != null goto label1;

        return;

     label1:
        interfaceinvoke r2.<android.media.IVolumeController: void masterMuteChanged(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("VolumeController", "Error calling masterMuteChanged", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void postVolumeChanged(int, int)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        int i0, i1;
        android.os.RemoteException $r1;
        android.media.IVolumeController r2;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        if r2 != null goto label1;

        return;

     label1:
        interfaceinvoke r2.<android.media.IVolumeController: void volumeChanged(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("VolumeController", "Error calling volumeChanged", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setA11yMode(int)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        int i0;
        android.os.RemoteException $r1;
        android.media.IVolumeController r2;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        i0 := @parameter0: int;

        r2 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        if r2 != null goto label1;

        return;

     label1:
        interfaceinvoke r2.<android.media.IVolumeController: void setA11yMode(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("VolumeController", "Error calling setA11Mode", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setController(android.media.IVolumeController)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        android.media.IVolumeController r1;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        r1 := @parameter0: android.media.IVolumeController;

        r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController> = r1;

        r0.<com.android.server.audio.AudioService$VolumeController: boolean mVisible> = 0;

        return;
    }

    public void setLayoutDirection(int)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        int i0;
        android.os.RemoteException $r1;
        android.media.IVolumeController r2;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        i0 := @parameter0: int;

        r2 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        if r2 != null goto label1;

        return;

     label1:
        interfaceinvoke r2.<android.media.IVolumeController: void setLayoutDirection(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("VolumeController", "Error calling setLayoutDirection", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVisible(boolean)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        z0 := @parameter0: boolean;

        r0.<com.android.server.audio.AudioService$VolumeController: boolean mVisible> = z0;

        return;
    }

    public boolean suppressAdjustment(int, int, boolean)
    {
        com.android.server.audio.AudioService$VolumeController r0;
        int i0, i1, $i4, $i9, $i12;
        long l2, l3, $l7, $l10, $l11;
        android.media.IVolumeController $r1;
        byte $b5, $b6, $b8;
        boolean $z1, $z2, z3, z4;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z3 := @parameter2: boolean;

        if z3 == 0 goto label1;

        return 0;

     label1:
        z4 = 0;

        if i0 != 3 goto label6;

        z4 = 0;

        $r1 = r0.<com.android.server.audio.AudioService$VolumeController: android.media.IVolumeController mController>;

        if $r1 == null goto label6;

        if i0 != 3 goto label2;

        $i12 = r0.<com.android.server.audio.AudioService$VolumeController: int mLongPressTimeout>;

        $z2 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, $i12);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i4 = i1 & 1;

        if $i4 == 0 goto label4;

        $z1 = r0.<com.android.server.audio.AudioService$VolumeController: boolean mVisible>;

        if $z1 != 0 goto label4;

        $l7 = r0.<com.android.server.audio.AudioService$VolumeController: long mNextLongPress>;

        $b8 = $l7 cmp l2;

        if $b8 >= 0 goto label3;

        $i9 = r0.<com.android.server.audio.AudioService$VolumeController: int mLongPressTimeout>;

        $l10 = (long) $i9;

        $l11 = $l10 + l2;

        r0.<com.android.server.audio.AudioService$VolumeController: long mNextLongPress> = $l11;

     label3:
        z4 = 1;

        goto label6;

     label4:
        l3 = r0.<com.android.server.audio.AudioService$VolumeController: long mNextLongPress>;

        z4 = 0;

        $b5 = l3 cmp 0L;

        if $b5 <= 0 goto label6;

        $b6 = l2 cmp l3;

        if $b6 <= 0 goto label5;

        r0.<com.android.server.audio.AudioService$VolumeController: long mNextLongPress> = 0L;

        z4 = 0;

        goto label6;

     label5:
        z4 = 1;

     label6:
        return z4;
    }

    public java.lang.String toString()
    {
        com.android.server.audio.AudioService$VolumeController r0;
        java.lang.StringBuilder $r2;
        android.os.IBinder $r4;
        boolean $z0;
        java.lang.String $r9;

        r0 := @this: com.android.server.audio.AudioService$VolumeController;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VolumeController(");

        $r4 = virtualinvoke r0.<com.android.server.audio.AudioService$VolumeController: android.os.IBinder asBinder()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",mVisible=");

        $z0 = r0.<com.android.server.audio.AudioService$VolumeController: boolean mVisible>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static void <clinit>()
    {
        <com.android.server.audio.AudioService$VolumeController: java.lang.String TAG> = "VolumeController";

        return;
    }
}
