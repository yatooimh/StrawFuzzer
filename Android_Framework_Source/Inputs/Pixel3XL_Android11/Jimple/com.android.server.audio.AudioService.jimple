public class com.android.server.audio.AudioService extends android.media.IAudioService$Stub implements android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener, android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener
{
    private static final java.lang.String AUDIO_HAL_SERVICE_PREFIX;
    public static final int BECOMING_NOISY_DELAY_MS;
    private static final int CHECK_MODE_FOR_UID_PERIOD_MS;
    static final int CONNECTION_STATE_CONNECTED;
    static final int CONNECTION_STATE_DISCONNECTED;
    protected static final boolean DEBUG_AP;
    protected static final boolean DEBUG_DEVICES;
    protected static final boolean DEBUG_MODE;
    protected static final boolean DEBUG_VOL;
    private static final int DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS;
    protected static final int DEFAULT_VOL_STREAM_NO_PLAYBACK;
    private static final java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET;
    private static final int FLAG_ADJUST_VOLUME;
    private static final int INDICATE_SYSTEM_READY_RETRY_DELAY_MS;
    static final int LOG_NB_EVENTS_DEVICE_CONNECTION;
    static final int LOG_NB_EVENTS_DYN_POLICY;
    static final int LOG_NB_EVENTS_FORCE_USE;
    static final int LOG_NB_EVENTS_PHONE_STATE;
    static final int LOG_NB_EVENTS_VOLUME;
    protected static int[] MAX_STREAM_VOLUME;
    protected static final float MIN_ALARM_ATTENUATION_NON_PRIVILEGED_DB;
    protected static int[] MIN_STREAM_VOLUME;
    private static final int MSG_ACCESSORY_PLUG_MEDIA_UNMUTE;
    private static final int MSG_AUDIO_SERVER_DIED;
    private static final int MSG_BROADCAST_MICROPHONE_MUTE;
    private static final int MSG_BT_HEADSET_CNCT_FAILED;
    private static final int MSG_CHECK_MODE_FOR_UID;
    private static final int MSG_CHECK_MUSIC_ACTIVE;
    private static final int MSG_CONFIGURE_SAFE_MEDIA_VOLUME;
    private static final int MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED;
    private static final int MSG_DISABLE_AUDIO_FOR_UID;
    private static final int MSG_DISPATCH_AUDIO_SERVER_STATE;
    private static final int MSG_DYN_POLICY_MIX_STATE_UPDATE;
    private static final int MSG_ENABLE_SURROUND_FORMATS;
    private static final int MSG_HDMI_VOLUME_CHECK;
    private static final int MSG_INDICATE_SYSTEM_READY;
    private static final int MSG_LOAD_SOUND_EFFECTS;
    private static final int MSG_NOTIFY_VOL_EVENT;
    private static final int MSG_OBSERVE_DEVICES_FOR_ALL_STREAMS;
    private static final int MSG_PERSIST_MUSIC_ACTIVE_MS;
    private static final int MSG_PERSIST_RINGER_MODE;
    private static final int MSG_PERSIST_SAFE_VOLUME_STATE;
    private static final int MSG_PERSIST_VOLUME;
    private static final int MSG_PERSIST_VOLUME_GROUP;
    private static final int MSG_PLAYBACK_CONFIG_CHANGE;
    private static final int MSG_PLAY_SOUND_EFFECT;
    private static final int MSG_SET_ALL_VOLUMES;
    private static final int MSG_SET_DEVICE_STREAM_VOLUME;
    private static final int MSG_SET_DEVICE_VOLUME;
    private static final int MSG_SET_FORCE_USE;
    private static final int MSG_SYSTEM_READY;
    private static final int MSG_UNLOAD_SOUND_EFFECTS;
    private static final int MSG_UNMUTE_STREAM;
    private static final int MSG_UPDATE_RINGER_MODE;
    private static final int MUSIC_ACTIVE_POLL_PERIOD_MS;
    private static final int PERSIST_DELAY;
    private static final java.lang.String[] RINGER_MODE_NAMES;
    private static final int SAFE_MEDIA_VOLUME_ACTIVE;
    private static final int SAFE_MEDIA_VOLUME_DISABLED;
    private static final int SAFE_MEDIA_VOLUME_INACTIVE;
    private static final int SAFE_MEDIA_VOLUME_NOT_CONFIGURED;
    private static final int SAFE_VOLUME_CONFIGURE_TIMEOUT_MS;
    private static final int SENDMSG_NOOP;
    private static final int SENDMSG_QUEUE;
    private static final int SENDMSG_REPLACE;
    private static final int[] STREAM_VOLUME_OPS;
    private static final java.lang.String TAG;
    private static final int TOUCH_EXPLORE_STREAM_TYPE_OVERRIDE_DELAY_MS;
    private static final int UNMUTE_STREAM_DELAY;
    private static final int UNSAFE_VOLUME_MUSIC_ACTIVE_MS_MAX;
    private static final android.media.AudioAttributes VIBRATION_ATTRIBUTES;
    private static final int VOL_ADJUST_END;
    private static final int VOL_ADJUST_NORMAL;
    private static final int VOL_ADJUST_START;
    private static final java.lang.String mMetricsId;
    protected static int[] mStreamVolumeAlias;
    static final com.android.server.audio.AudioEventLogger sDeviceLogger;
    private static java.util.Set sDeviceVolumeBehaviorSupportedDeviceOutSet;
    static final com.android.server.audio.AudioEventLogger sForceUseLogger;
    private static boolean sIndependentA11yVolume;
    private static int sStreamOverrideDelayMs;
    private static final android.util.SparseArray sVolumeGroupStates;
    static final com.android.server.audio.AudioEventLogger sVolumeLogger;
    private final int[] STREAM_VOLUME_ALIAS_DEFAULT;
    private final int[] STREAM_VOLUME_ALIAS_TELEVISION;
    private final int[] STREAM_VOLUME_ALIAS_VOICE;
    java.util.Set mAbsVolumeMultiModeCaseDevices;
    private int[] mAccessibilityServiceUids;
    private final java.lang.Object mAccessibilityServiceUidsLock;
    private final android.app.ActivityManagerInternal mActivityManagerInternal;
    private final android.app.AppOpsManager mAppOps;
    private int mAssistantUid;
    private android.os.PowerManager$WakeLock mAudioEventWakeLock;
    private com.android.server.audio.AudioService$AudioHandler mAudioHandler;
    private final java.util.HashMap mAudioPolicies;
    private int mAudioPolicyCounter;
    private java.util.HashMap mAudioServerStateListeners;
    private final com.android.server.audio.AudioSystemAdapter mAudioSystem;
    private final android.media.AudioSystem$ErrorCallback mAudioSystemCallback;
    private com.android.server.audio.AudioService$AudioSystemThread mAudioSystemThread;
    private volatile boolean mAvrcpAbsVolSupported;
    private boolean mCameraSoundForced;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private int mCurrentImeUid;
    private final com.android.server.audio.AudioDeviceBroker mDeviceBroker;
    private boolean mDockAudioMediaEnabled;
    private int mDockState;
    private final android.media.AudioSystem$DynamicPolicyCallback mDynPolicyCallback;
    private final com.android.server.audio.AudioEventLogger mDynPolicyLogger;
    private java.lang.String mEnabledSurroundFormats;
    private int mEncodedSurroundMode;
    private android.media.audiopolicy.IAudioPolicyCallback mExtVolumeController;
    private final java.lang.Object mExtVolumeControllerLock;
    java.util.Set mFixedVolumeDevices;
    private com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient;
    private final java.lang.Object mForceControlStreamLock;
    java.util.Set mFullVolumeDevices;
    private final boolean mHasVibrator;
    private android.hardware.hdmi.HdmiAudioSystemClient mHdmiAudioSystemClient;
    private boolean mHdmiCecSink;
    private boolean mHdmiCecVolumeControlEnabled;
    private final java.lang.Object mHdmiClientLock;
    private com.android.server.audio.AudioService$MyHdmiControlStatusChangeListenerCallback mHdmiControlStatusChangeListenerCallback;
    private android.hardware.hdmi.HdmiControlManager mHdmiManager;
    private android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient;
    private boolean mHdmiSystemAudioSupported;
    private android.hardware.hdmi.HdmiTvClient mHdmiTvClient;
    private int mInputMethodServiceUid;
    private final java.lang.Object mInputMethodServiceUidLock;
    private boolean mIsCallScreeningModeSupported;
    private final boolean mIsSingleVolume;
    private long mLoweredFromNormalToVibrateTime;
    private int mMcc;
    private final com.android.server.audio.MediaFocusControl mMediaFocusControl;
    private boolean mMicMuteFromApi;
    private boolean mMicMuteFromRestrictions;
    private boolean mMicMuteFromSwitch;
    private boolean mMicMuteFromSystemCached;
    private int mMode;
    private final com.android.server.audio.AudioEventLogger mModeLogger;
    private final boolean mMonitorRotation;
    private int mMusicActiveMs;
    private int mMuteAffectedStreams;
    private com.android.server.audio.AudioService$MyHdmiCecVolumeControlFeatureListener mMyHdmiCecVolumeControlFeatureListener;
    private android.app.NotificationManager mNm;
    private com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand;
    private final int mPlatformType;
    private final com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor;
    private float[] mPrescaleAbsoluteVolume;
    private int mPrevVolDirection;
    private android.media.projection.IMediaProjectionManager mProjectionService;
    private final android.content.BroadcastReceiver mReceiver;
    private final com.android.server.audio.RecordingActivityMonitor mRecordMonitor;
    private int mRingerAndZenModeMutedStreams;
    private int mRingerMode;
    private int mRingerModeAffectedStreams;
    private android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate;
    private int mRingerModeExternal;
    private volatile android.media.IRingtonePlayer mRingtonePlayer;
    private java.util.ArrayList mRmtSbmxFullVolDeathHandlers;
    private int mRmtSbmxFullVolRefCount;
    com.android.server.audio.AudioService$RoleObserver mRoleObserver;
    private boolean mRttEnabled;
    final java.util.Set mSafeMediaVolumeDevices;
    private int mSafeMediaVolumeIndex;
    private int mSafeMediaVolumeState;
    private final java.lang.Object mSafeMediaVolumeStateLock;
    private float mSafeUsbMediaVolumeDbfs;
    private int mSafeUsbMediaVolumeIndex;
    final java.util.ArrayList mSetModeDeathHandlers;
    private final java.lang.Object mSettingsLock;
    private com.android.server.audio.AudioService$SettingsObserver mSettingsObserver;
    private com.android.server.audio.SoundEffectsHelper mSfxHelper;
    private com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates;
    private int[] mSupportedSystemUsages;
    private final java.lang.Object mSupportedSystemUsagesLock;
    private boolean mSurroundModeChanged;
    private boolean mSystemReady;
    private final com.android.server.audio.SystemServerAdapter mSystemServer;
    private final android.app.IUidObserver mUidObserver;
    private final boolean mUseFixedVolume;
    private final android.os.UserManagerInternal mUserManagerInternal;
    private final android.os.UserManagerInternal$UserRestrictionsListener mUserRestrictionsListener;
    private boolean mUserSelectedVolumeControlStream;
    private boolean mUserSwitchedReceived;
    private int mVibrateSetting;
    private android.os.Vibrator mVibrator;
    private java.util.concurrent.atomic.AtomicBoolean mVoiceActive;
    private final android.media.IPlaybackConfigDispatcher mVoiceActivityMonitor;
    private int mVolumeControlStream;
    private final com.android.server.audio.AudioService$VolumeController mVolumeController;
    private android.media.VolumePolicy mVolumePolicy;
    private int mZenModeAffectedStreams;

    static void <clinit>()
    {
        java.lang.Integer r0, r1, $r8, $r9, $r16, $r18;
        int[] $r3, $r4, $r5;
        java.util.HashSet $r6, $r15;
        java.lang.Integer[] $r7;
        java.util.List $r10;
        android.media.AudioAttributes$Builder $r11, $r12, $r13;
        android.media.AudioAttributes $r14;
        java.util.Set $r17, $r19, $r20, $r21, $r22, $r23, $r24;
        android.util.SparseArray $r25;
        com.android.server.audio.AudioEventLogger $r26, $r27, $r28;
        java.lang.String[] $r29;

        <com.android.server.audio.AudioService: java.lang.String mMetricsId> = "audio.service.";

        <com.android.server.audio.AudioService: int VOL_ADJUST_START> = 1;

        <com.android.server.audio.AudioService: int VOL_ADJUST_NORMAL> = 0;

        <com.android.server.audio.AudioService: int VOL_ADJUST_END> = 2;

        <com.android.server.audio.AudioService: int UNSAFE_VOLUME_MUSIC_ACTIVE_MS_MAX> = 72000000;

        <com.android.server.audio.AudioService: int UNMUTE_STREAM_DELAY> = 350;

        <com.android.server.audio.AudioService: int TOUCH_EXPLORE_STREAM_TYPE_OVERRIDE_DELAY_MS> = 1000;

        <com.android.server.audio.AudioService: java.lang.String TAG> = "AS.AudioService";

        <com.android.server.audio.AudioService: int SENDMSG_REPLACE> = 0;

        <com.android.server.audio.AudioService: int SENDMSG_QUEUE> = 2;

        <com.android.server.audio.AudioService: int SENDMSG_NOOP> = 1;

        <com.android.server.audio.AudioService: int SAFE_VOLUME_CONFIGURE_TIMEOUT_MS> = 30000;

        <com.android.server.audio.AudioService: int SAFE_MEDIA_VOLUME_NOT_CONFIGURED> = 0;

        <com.android.server.audio.AudioService: int SAFE_MEDIA_VOLUME_INACTIVE> = 2;

        <com.android.server.audio.AudioService: int SAFE_MEDIA_VOLUME_DISABLED> = 1;

        <com.android.server.audio.AudioService: int SAFE_MEDIA_VOLUME_ACTIVE> = 3;

        <com.android.server.audio.AudioService: int PERSIST_DELAY> = 500;

        <com.android.server.audio.AudioService: int MUSIC_ACTIVE_POLL_PERIOD_MS> = 60000;

        <com.android.server.audio.AudioService: int MSG_UPDATE_RINGER_MODE> = 25;

        <com.android.server.audio.AudioService: int MSG_UNMUTE_STREAM> = 18;

        <com.android.server.audio.AudioService: int MSG_UNLOAD_SOUND_EFFECTS> = 15;

        <com.android.server.audio.AudioService: int MSG_SYSTEM_READY> = 16;

        <com.android.server.audio.AudioService: int MSG_SET_FORCE_USE> = 8;

        <com.android.server.audio.AudioService: int MSG_SET_DEVICE_VOLUME> = 0;

        <com.android.server.audio.AudioService: int MSG_SET_DEVICE_STREAM_VOLUME> = 26;

        <com.android.server.audio.AudioService: int MSG_SET_ALL_VOLUMES> = 10;

        <com.android.server.audio.AudioService: int MSG_PLAY_SOUND_EFFECT> = 5;

        <com.android.server.audio.AudioService: int MSG_PLAYBACK_CONFIG_CHANGE> = 29;

        <com.android.server.audio.AudioService: int MSG_PERSIST_VOLUME_GROUP> = 2;

        <com.android.server.audio.AudioService: int MSG_PERSIST_VOLUME> = 1;

        <com.android.server.audio.AudioService: int MSG_PERSIST_SAFE_VOLUME_STATE> = 14;

        <com.android.server.audio.AudioService: int MSG_PERSIST_RINGER_MODE> = 3;

        <com.android.server.audio.AudioService: int MSG_PERSIST_MUSIC_ACTIVE_MS> = 17;

        <com.android.server.audio.AudioService: int MSG_OBSERVE_DEVICES_FOR_ALL_STREAMS> = 27;

        <com.android.server.audio.AudioService: int MSG_NOTIFY_VOL_EVENT> = 22;

        <com.android.server.audio.AudioService: int MSG_LOAD_SOUND_EFFECTS> = 7;

        <com.android.server.audio.AudioService: int MSG_INDICATE_SYSTEM_READY> = 20;

        <com.android.server.audio.AudioService: int MSG_HDMI_VOLUME_CHECK> = 28;

        <com.android.server.audio.AudioService: int MSG_ENABLE_SURROUND_FORMATS> = 24;

        <com.android.server.audio.AudioService: int MSG_DYN_POLICY_MIX_STATE_UPDATE> = 19;

        <com.android.server.audio.AudioService: int MSG_DISPATCH_AUDIO_SERVER_STATE> = 23;

        <com.android.server.audio.AudioService: int MSG_DISABLE_AUDIO_FOR_UID> = 100;

        <com.android.server.audio.AudioService: int MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED> = 13;

        <com.android.server.audio.AudioService: int MSG_CONFIGURE_SAFE_MEDIA_VOLUME> = 12;

        <com.android.server.audio.AudioService: int MSG_CHECK_MUSIC_ACTIVE> = 11;

        <com.android.server.audio.AudioService: int MSG_CHECK_MODE_FOR_UID> = 31;

        <com.android.server.audio.AudioService: int MSG_BT_HEADSET_CNCT_FAILED> = 9;

        <com.android.server.audio.AudioService: int MSG_BROADCAST_MICROPHONE_MUTE> = 30;

        <com.android.server.audio.AudioService: int MSG_AUDIO_SERVER_DIED> = 4;

        <com.android.server.audio.AudioService: int MSG_ACCESSORY_PLUG_MEDIA_UNMUTE> = 21;

        <com.android.server.audio.AudioService: float MIN_ALARM_ATTENUATION_NON_PRIVILEGED_DB> = -36.0F;

        <com.android.server.audio.AudioService: int LOG_NB_EVENTS_VOLUME> = 40;

        <com.android.server.audio.AudioService: int LOG_NB_EVENTS_PHONE_STATE> = 20;

        <com.android.server.audio.AudioService: int LOG_NB_EVENTS_FORCE_USE> = 20;

        <com.android.server.audio.AudioService: int LOG_NB_EVENTS_DYN_POLICY> = 10;

        <com.android.server.audio.AudioService: int LOG_NB_EVENTS_DEVICE_CONNECTION> = 30;

        <com.android.server.audio.AudioService: int INDICATE_SYSTEM_READY_RETRY_DELAY_MS> = 1000;

        <com.android.server.audio.AudioService: int FLAG_ADJUST_VOLUME> = 1;

        <com.android.server.audio.AudioService: int DEFAULT_VOL_STREAM_NO_PLAYBACK> = 3;

        <com.android.server.audio.AudioService: int DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS> = 0;

        <com.android.server.audio.AudioService: boolean DEBUG_VOL> = 0;

        <com.android.server.audio.AudioService: boolean DEBUG_MODE> = 0;

        <com.android.server.audio.AudioService: boolean DEBUG_DEVICES> = 0;

        <com.android.server.audio.AudioService: boolean DEBUG_AP> = 0;

        <com.android.server.audio.AudioService: int CONNECTION_STATE_DISCONNECTED> = 0;

        <com.android.server.audio.AudioService: int CONNECTION_STATE_CONNECTED> = 1;

        <com.android.server.audio.AudioService: int CHECK_MODE_FOR_UID_PERIOD_MS> = 3000;

        <com.android.server.audio.AudioService: int BECOMING_NOISY_DELAY_MS> = 1000;

        <com.android.server.audio.AudioService: java.lang.String AUDIO_HAL_SERVICE_PREFIX> = "android.hardware.audio";

        $r3 = newarray (int)[12];

        $r3[0] = 5;

        $r3[1] = 7;

        $r3[2] = 7;

        $r3[3] = 15;

        $r3[4] = 7;

        $r3[5] = 7;

        $r3[6] = 15;

        $r3[7] = 7;

        $r3[8] = 15;

        $r3[9] = 15;

        $r3[10] = 15;

        $r3[11] = 15;

        <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME> = $r3;

        $r4 = newarray (int)[12];

        $r4[0] = 1;

        $r4[1] = 0;

        $r4[2] = 0;

        $r4[3] = 0;

        $r4[4] = 1;

        $r4[5] = 0;

        $r4[6] = 0;

        $r4[7] = 0;

        $r4[8] = 0;

        $r4[9] = 0;

        $r4[10] = 1;

        $r4[11] = 0;

        <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME> = $r4;

        $r5 = newarray (int)[12];

        $r5[0] = 34;

        $r5[1] = 36;

        $r5[2] = 35;

        $r5[3] = 36;

        $r5[4] = 37;

        $r5[5] = 38;

        $r5[6] = 39;

        $r5[7] = 36;

        $r5[8] = 36;

        $r5[9] = 36;

        $r5[10] = 64;

        $r5[11] = 36;

        <com.android.server.audio.AudioService: int[] STREAM_VOLUME_OPS> = $r5;

        r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1024);

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(131072);

        $r6 = new java.util.HashSet;

        $r7 = newarray (java.lang.Integer)[4];

        $r7[0] = r0;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(262144);

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(524288);

        $r7[2] = $r9;

        $r7[3] = r1;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        specialinvoke $r6.<java.util.HashSet: void <init>(java.util.Collection)>($r10);

        <com.android.server.audio.AudioService: java.util.Set sDeviceVolumeBehaviorSupportedDeviceOutSet> = $r6;

        $r11 = new android.media.AudioAttributes$Builder;

        specialinvoke $r11.<android.media.AudioAttributes$Builder: void <init>()>();

        $r12 = virtualinvoke $r11.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>(4);

        $r13 = virtualinvoke $r12.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(13);

        $r14 = virtualinvoke $r13.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        <com.android.server.audio.AudioService: android.media.AudioAttributes VIBRATION_ATTRIBUTES> = $r14;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        <com.android.server.audio.AudioService: java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET> = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r16);

        $r17 = <com.android.server.audio.AudioService: java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>($r18);

        $r19 = <com.android.server.audio.AudioService: java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r21 = <com.android.server.audio.AudioService: java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET>;

        $r20 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_A2DP_SET>;

        interfaceinvoke $r21.<java.util.Set: boolean addAll(java.util.Collection)>($r20);

        $r23 = <com.android.server.audio.AudioService: java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET>;

        $r22 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_USB_SET>;

        interfaceinvoke $r23.<java.util.Set: boolean addAll(java.util.Collection)>($r22);

        $r24 = <com.android.server.audio.AudioService: java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET>;

        interfaceinvoke $r24.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r25 = new android.util.SparseArray;

        specialinvoke $r25.<android.util.SparseArray: void <init>()>();

        <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates> = $r25;

        <com.android.server.audio.AudioService: boolean sIndependentA11yVolume> = 0;

        $r26 = new com.android.server.audio.AudioEventLogger;

        specialinvoke $r26.<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>(30, "wired/A2DP/hearing aid device connection");

        <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sDeviceLogger> = $r26;

        $r27 = new com.android.server.audio.AudioEventLogger;

        specialinvoke $r27.<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>(20, "force use (logged before setForceUse() is executed)");

        <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sForceUseLogger> = $r27;

        $r28 = new com.android.server.audio.AudioEventLogger;

        specialinvoke $r28.<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>(40, "volume changes (logged when command received by AudioService)");

        <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger> = $r28;

        $r29 = newarray (java.lang.String)[3];

        $r29[0] = "SILENT";

        $r29[1] = "VIBRATE";

        $r29[2] = "NORMAL";

        <com.android.server.audio.AudioService: java.lang.String[] RINGER_MODE_NAMES> = $r29;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.audio.AudioService r0;
        android.content.Context r1;
        com.android.server.audio.AudioSystemAdapter $r2;
        com.android.server.audio.SystemServerAdapter $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <com.android.server.audio.AudioSystemAdapter: com.android.server.audio.AudioSystemAdapter getDefaultAdapter()>();

        $r3 = staticinvoke <com.android.server.audio.SystemServerAdapter: com.android.server.audio.SystemServerAdapter getDefaultAdapter(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.audio.AudioService: void <init>(android.content.Context,com.android.server.audio.AudioSystemAdapter,com.android.server.audio.SystemServerAdapter)>(r1, $r2, $r3);

        return;
    }

    public void <init>(android.content.Context, com.android.server.audio.AudioSystemAdapter, com.android.server.audio.SystemServerAdapter)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.SystemServerAdapter r1, $r91;
        com.android.server.audio.AudioService$VolumeController $r2;
        java.lang.Object $r3, $r11, $r27, $r28, $r29, $r35, $r42, $r47, $r52, $r54, $r56, $r58, $r63;
        int[] $r4, $r5, $r6, $r30, $r65, $r66, $r67, $r68, $r69, $r70, $r83, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r127, $r128;
        com.android.server.audio.AudioService$1 $r7;
        com.android.server.audio.AudioService$AudioServiceBroadcastReceiver $r8;
        com.android.server.audio.AudioService$AudioServiceUserRestrictionsListener $r9;
        java.util.ArrayList $r10, $r34;
        java.util.HashSet $r12, $r20, $r21, $r36;
        java.lang.Integer[] $r13, $r22, $r37;
        java.lang.Integer $r14, $r15, $r16, $r17, $r18, $r23, $r38, $r39, $r40;
        java.util.List $r19, $r24, $r41, $r64;
        float[] $r25, $r98, r133;
        android.media.VolumePolicy $r26;
        com.android.server.audio.AudioService$2 $r31;
        java.util.concurrent.atomic.AtomicBoolean $r32;
        com.android.server.audio.AudioService$3 $r33;
        com.android.server.audio.AudioService$MyHdmiControlStatusChangeListenerCallback $r43;
        com.android.server.audio.AudioService$MyHdmiCecVolumeControlFeatureListener $r44;
        com.android.server.audio.AudioEventLogger $r45, $r46;
        com.android.server.audio.AudioService$5 $r48;
        java.util.HashMap $r49, $r50;
        android.content.ContentResolver $r51, $r72;
        android.app.AppOpsManager $r53;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, $i30, $i31, $i32, i33, i34, i35, i36, i37, i38, i40, $i41;
        boolean $z0, $z1, $z2, $z3, z4, $z5, z6, $z7, z8;
        android.os.UserManagerInternal $r55, $r101;
        android.app.ActivityManagerInternal $r57;
        android.os.PowerManager $r59;
        android.os.PowerManager$WakeLock $r60;
        com.android.server.audio.SoundEffectsHelper $r61;
        android.content.Context $r62, $r73, $r75, $r78, $r80, $r86, $r92, $r94, $r96, $r104, r123;
        java.lang.String $r71;
        android.content.res.Resources $r74, $r76, $r93, $r95, $r97;
        com.android.server.audio.AudioDeviceBroker $r77;
        com.android.server.audio.RecordingActivityMonitor $r79, $r102;
        com.android.server.audio.AudioService$SettingsObserver $r81;
        com.android.server.audio.PlaybackActivityMonitor $r82, $r85;
        com.android.server.audio.MediaFocusControl $r84;
        android.content.IntentFilter $r87;
        android.os.UserHandle $r88;
        android.content.BroadcastReceiver $r89;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        byte $b14, $b15, b39;
        com.android.server.audio.AudioService$AudioServiceInternal $r99;
        android.os.UserManagerInternal$UserRestrictionsListener $r100;
        com.android.server.audio.AudioService$AudioHandler $r103, r131;
        com.android.server.audio.AudioSystemAdapter r124;
        android.os.Vibrator r125;
        android.media.AudioAttributes r126;
        android.media.AudioSystem$ErrorCallback $r129;
        java.lang.Boolean $r130;

        r0 := @this: com.android.server.audio.AudioService;

        r123 := @parameter0: android.content.Context;

        r124 := @parameter1: com.android.server.audio.AudioSystemAdapter;

        r1 := @parameter2: com.android.server.audio.SystemServerAdapter;

        specialinvoke r0.<android.media.IAudioService$Stub: void <init>()>();

        $r2 = new com.android.server.audio.AudioService$VolumeController;

        specialinvoke $r2.<com.android.server.audio.AudioService$VolumeController: void <init>()>();

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController> = $r2;

        r0.<com.android.server.audio.AudioService: int mMode> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock> = $r3;

        $r4 = newarray (int)[12];

        $r4[0] = 0;

        $r4[1] = 2;

        $r4[2] = 2;

        $r4[3] = 3;

        $r4[4] = 4;

        $r4[5] = 2;

        $r4[6] = 6;

        $r4[7] = 2;

        $r4[8] = 2;

        $r4[9] = 3;

        $r4[10] = 3;

        $r4[11] = 3;

        r0.<com.android.server.audio.AudioService: int[] STREAM_VOLUME_ALIAS_VOICE> = $r4;

        $r5 = newarray (int)[12];

        $r5[0] = 3;

        $r5[1] = 3;

        $r5[2] = 3;

        $r5[3] = 3;

        $r5[4] = 3;

        $r5[5] = 3;

        $r5[6] = 6;

        $r5[7] = 3;

        $r5[8] = 3;

        $r5[9] = 3;

        $r5[10] = 3;

        $r5[11] = 3;

        r0.<com.android.server.audio.AudioService: int[] STREAM_VOLUME_ALIAS_TELEVISION> = $r5;

        $r6 = newarray (int)[12];

        $r6[0] = 0;

        $r6[1] = 2;

        $r6[2] = 2;

        $r6[3] = 3;

        $r6[4] = 4;

        $r6[5] = 2;

        $r6[6] = 6;

        $r6[7] = 2;

        $r6[8] = 2;

        $r6[9] = 3;

        $r6[10] = 3;

        $r6[11] = 3;

        r0.<com.android.server.audio.AudioService: int[] STREAM_VOLUME_ALIAS_DEFAULT> = $r6;

        r0.<com.android.server.audio.AudioService: boolean mAvrcpAbsVolSupported> = 0;

        $r7 = new com.android.server.audio.AudioService$1;

        specialinvoke $r7.<com.android.server.audio.AudioService$1: void <init>(com.android.server.audio.AudioService)>(r0);

        r0.<com.android.server.audio.AudioService: android.media.AudioSystem$ErrorCallback mAudioSystemCallback> = $r7;

        r0.<com.android.server.audio.AudioService: int mRingerModeExternal> = -1;

        r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams> = 0;

        r0.<com.android.server.audio.AudioService: int mZenModeAffectedStreams> = 0;

        $r8 = new com.android.server.audio.AudioService$AudioServiceBroadcastReceiver;

        specialinvoke $r8.<com.android.server.audio.AudioService$AudioServiceBroadcastReceiver: void <init>(com.android.server.audio.AudioService,com.android.server.audio.AudioService$1)>(r0, null);

        r0.<com.android.server.audio.AudioService: android.content.BroadcastReceiver mReceiver> = $r8;

        $r9 = new com.android.server.audio.AudioService$AudioServiceUserRestrictionsListener;

        specialinvoke $r9.<com.android.server.audio.AudioService$AudioServiceUserRestrictionsListener: void <init>(com.android.server.audio.AudioService,com.android.server.audio.AudioService$1)>(r0, null);

        r0.<com.android.server.audio.AudioService: android.os.UserManagerInternal$UserRestrictionsListener mUserRestrictionsListener> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers> = $r10;

        r0.<com.android.server.audio.AudioService: int mPrevVolDirection> = 0;

        r0.<com.android.server.audio.AudioService: int mVolumeControlStream> = -1;

        r0.<com.android.server.audio.AudioService: boolean mUserSelectedVolumeControlStream> = 0;

        $r11 = new java.lang.Object;

        specialinvoke $r11.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mForceControlStreamLock> = $r11;

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient> = null;

        $r12 = new java.util.HashSet;

        $r13 = newarray (java.lang.Integer)[5];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4096);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2048);

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(262144);

        $r13[2] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(524288);

        $r13[3] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2097152);

        $r13[4] = $r18;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r13);

        specialinvoke $r12.<java.util.HashSet: void <init>(java.util.Collection)>($r19);

        r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices> = $r12;

        $r20 = new java.util.HashSet;

        specialinvoke $r20.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.util.Set mFullVolumeDevices> = $r20;

        $r21 = new java.util.HashSet;

        $r22 = newarray (java.lang.Integer)[1];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(134217728);

        $r22[0] = $r23;

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r22);

        specialinvoke $r21.<java.util.HashSet: void <init>(java.util.Collection)>($r24);

        r0.<com.android.server.audio.AudioService: java.util.Set mAbsVolumeMultiModeCaseDevices> = $r21;

        r0.<com.android.server.audio.AudioService: boolean mDockAudioMediaEnabled> = 1;

        r0.<com.android.server.audio.AudioService: int mDockState> = 0;

        $r25 = newarray (float)[3];

        $r25[0] = 0.5F;

        $r25[1] = 0.7F;

        $r25[2] = 0.85F;

        r0.<com.android.server.audio.AudioService: float[] mPrescaleAbsoluteVolume> = $r25;

        $r26 = <android.media.VolumePolicy: android.media.VolumePolicy DEFAULT>;

        r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy> = $r26;

        $r27 = new java.lang.Object;

        specialinvoke $r27.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mAccessibilityServiceUidsLock> = $r27;

        r0.<com.android.server.audio.AudioService: int mInputMethodServiceUid> = -1;

        $r28 = new java.lang.Object;

        specialinvoke $r28.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mInputMethodServiceUidLock> = $r28;

        $r29 = new java.lang.Object;

        specialinvoke $r29.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mSupportedSystemUsagesLock> = $r29;

        $r30 = newarray (int)[1];

        $r30[0] = 17;

        r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages> = $r30;

        $r31 = new com.android.server.audio.AudioService$2;

        specialinvoke $r31.<com.android.server.audio.AudioService$2: void <init>(com.android.server.audio.AudioService)>(r0);

        r0.<com.android.server.audio.AudioService: android.app.IUidObserver mUidObserver> = $r31;

        r0.<com.android.server.audio.AudioService: boolean mRttEnabled> = 0;

        $r32 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r32.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.audio.AudioService: java.util.concurrent.atomic.AtomicBoolean mVoiceActive> = $r32;

        $r33 = new com.android.server.audio.AudioService$3;

        specialinvoke $r33.<com.android.server.audio.AudioService$3: void <init>(com.android.server.audio.AudioService)>(r0);

        r0.<com.android.server.audio.AudioService: android.media.IPlaybackConfigDispatcher mVoiceActivityMonitor> = $r33;

        r0.<com.android.server.audio.AudioService: int mRmtSbmxFullVolRefCount> = 0;

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.util.ArrayList mRmtSbmxFullVolDeathHandlers> = $r34;

        r0.<com.android.server.audio.AudioService: boolean mIsCallScreeningModeSupported> = 0;

        $r35 = new java.lang.Object;

        specialinvoke $r35.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock> = $r35;

        r0.<com.android.server.audio.AudioService: int mMcc> = 0;

        $r36 = new java.util.HashSet;

        $r37 = newarray (java.lang.Integer)[3];

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r37[0] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r37[1] = $r39;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(67108864);

        $r37[2] = $r40;

        $r41 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r37);

        specialinvoke $r36.<java.util.HashSet: void <init>(java.util.Collection)>($r41);

        r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices> = $r36;

        $r42 = new java.lang.Object;

        specialinvoke $r42.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock> = $r42;

        r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported> = 0;

        $r43 = new com.android.server.audio.AudioService$MyHdmiControlStatusChangeListenerCallback;

        specialinvoke $r43.<com.android.server.audio.AudioService$MyHdmiControlStatusChangeListenerCallback: void <init>(com.android.server.audio.AudioService,com.android.server.audio.AudioService$1)>(r0, null);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$MyHdmiControlStatusChangeListenerCallback mHdmiControlStatusChangeListenerCallback> = $r43;

        $r44 = new com.android.server.audio.AudioService$MyHdmiCecVolumeControlFeatureListener;

        specialinvoke $r44.<com.android.server.audio.AudioService$MyHdmiCecVolumeControlFeatureListener: void <init>(com.android.server.audio.AudioService,com.android.server.audio.AudioService$1)>(r0, null);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$MyHdmiCecVolumeControlFeatureListener mMyHdmiCecVolumeControlFeatureListener> = $r44;

        $r45 = new com.android.server.audio.AudioEventLogger;

        specialinvoke $r45.<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>(20, "phone state (logged after successful call to AudioSystem.setPhoneState(int, int))");

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mModeLogger> = $r45;

        $r46 = new com.android.server.audio.AudioEventLogger;

        specialinvoke $r46.<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>(10, "dynamic policy events (logged when command received by AudioService)");

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mDynPolicyLogger> = $r46;

        $r47 = new java.lang.Object;

        specialinvoke $r47.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.lang.Object mExtVolumeControllerLock> = $r47;

        $r48 = new com.android.server.audio.AudioService$5;

        specialinvoke $r48.<com.android.server.audio.AudioService$5: void <init>(com.android.server.audio.AudioService)>(r0);

        r0.<com.android.server.audio.AudioService: android.media.AudioSystem$DynamicPolicyCallback mDynPolicyCallback> = $r48;

        $r49 = new java.util.HashMap;

        specialinvoke $r49.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners> = $r49;

        $r50 = new java.util.HashMap;

        specialinvoke $r50.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies> = $r50;

        r0.<com.android.server.audio.AudioService: int mAudioPolicyCounter> = 0;

        r0.<com.android.server.audio.AudioService: android.content.Context mContext> = r123;

        $r51 = virtualinvoke r123.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver> = $r51;

        $r52 = virtualinvoke r123.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r53 = (android.app.AppOpsManager) $r52;

        r0.<com.android.server.audio.AudioService: android.app.AppOpsManager mAppOps> = $r53;

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioSystemAdapter mAudioSystem> = r124;

        r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer> = r1;

        $i0 = staticinvoke <android.media.AudioSystem: int getPlatformType(android.content.Context)>(r123);

        r0.<com.android.server.audio.AudioService: int mPlatformType> = $i0;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isSingleVolume(android.content.Context)>(r123);

        r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume> = $z0;

        $r54 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r55 = (android.os.UserManagerInternal) $r54;

        r0.<com.android.server.audio.AudioService: android.os.UserManagerInternal mUserManagerInternal> = $r55;

        $r56 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r57 = (android.app.ActivityManagerInternal) $r56;

        r0.<com.android.server.audio.AudioService: android.app.ActivityManagerInternal mActivityManagerInternal> = $r57;

        $r58 = virtualinvoke r123.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r59 = (android.os.PowerManager) $r58;

        $r60 = virtualinvoke $r59.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "handleAudioEvent");

        r0.<com.android.server.audio.AudioService: android.os.PowerManager$WakeLock mAudioEventWakeLock> = $r60;

        $r61 = new com.android.server.audio.SoundEffectsHelper;

        $r62 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        specialinvoke $r61.<com.android.server.audio.SoundEffectsHelper: void <init>(android.content.Context)>($r62);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.SoundEffectsHelper mSfxHelper> = $r61;

        $r63 = virtualinvoke r123.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        r125 = (android.os.Vibrator) $r63;

        r0.<com.android.server.audio.AudioService: android.os.Vibrator mVibrator> = r125;

        if r125 != null goto label01;

        z4 = 0;

        goto label02;

     label01:
        z4 = virtualinvoke r125.<android.os.Vibrator: boolean hasVibrator()>();

     label02:
        r0.<com.android.server.audio.AudioService: boolean mHasVibrator> = z4;

        $r64 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: java.util.List getAudioProductStrategies()>();

        $i1 = interfaceinvoke $r64.<java.util.List: int size()>();

        if $i1 <= 0 goto label06;

        $i24 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i25 = $i24 - 1;

     label03:
        if i25 < 0 goto label06;

        r126 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes getAudioAttributesForStrategyWithLegacyStreamType(int)>(i25);

        i26 = staticinvoke <android.media.AudioSystem: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>(r126);

        if i26 == -1 goto label04;

        $r122 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $r122[i25] = i26;

     label04:
        i27 = staticinvoke <android.media.AudioSystem: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>(r126);

        if i27 == -1 goto label05;

        $r121 = <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME>;

        $r121[i25] = i27;

     label05:
        i25 = i25 + -1;

        goto label03;

     label06:
        i28 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.vc_call_vol_steps", -1);

        if i28 == -1 goto label07;

        $r120 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $r120[0] = i28;

     label07:
        i29 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.vc_call_vol_default", -1);

        if i29 == -1 goto label08;

        $r117 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i22 = $r117[0];

        if i29 > $i22 goto label08;

        $r118 = <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME>;

        $i23 = $r118[0];

        if i29 < $i23 goto label08;

        $r119 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r119[0] = i29;

        goto label09;

     label08:
        $r127 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r128 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i30 = $r128[0];

        $i31 = $i30 * 3;

        $i32 = $i31 / 4;

        $r127[0] = $i32;

     label09:
        i33 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.media_vol_steps", -1);

        if i33 == -1 goto label10;

        $r116 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $r116[3] = i33;

     label10:
        i34 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.media_vol_default", -1);

        if i34 == -1 goto label11;

        $r113 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i20 = $r113[3];

        if i34 > $i20 goto label11;

        $r114 = <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME>;

        $i21 = $r114[3];

        if i34 < $i21 goto label11;

        $r115 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r115[3] = i34;

        goto label13;

     label11:
        $z5 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isPlatformTelevision()>();

        if $z5 == 0 goto label12;

        $r112 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r111 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i18 = $r111[3];

        $i19 = $i18 / 4;

        $r112[3] = $i19;

        goto label13;

     label12:
        $r66 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r65 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i2 = $r65[3];

        $i3 = $i2 / 3;

        $r66[3] = $i3;

     label13:
        i35 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.alarm_vol_steps", -1);

        if i35 == -1 goto label14;

        $r110 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $r110[4] = i35;

     label14:
        i36 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.alarm_vol_default", -1);

        if i36 == -1 goto label15;

        $r108 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i17 = $r108[4];

        if i36 > $i17 goto label15;

        $r109 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r109[4] = i36;

        goto label16;

     label15:
        $r68 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r67 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i4 = $r67[4];

        $i5 = $i4 * 6;

        $i6 = $i5 / 7;

        $r68[4] = $i6;

     label16:
        i37 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.system_vol_steps", -1);

        if i37 == -1 goto label17;

        $r107 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $r107[1] = i37;

     label17:
        i38 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.system_vol_default", -1);

        if i38 == -1 goto label18;

        $r105 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i16 = $r105[1];

        if i38 > $i16 goto label18;

        $r106 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r106[1] = i38;

        goto label19;

     label18:
        $r70 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        $r69 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i7 = $r69[1];

        $r70[1] = $i7;

     label19:
        specialinvoke r0.<com.android.server.audio.AudioService: void createAudioSystemThread()>();

        $r129 = r0.<com.android.server.audio.AudioService: android.media.AudioSystem$ErrorCallback mAudioSystemCallback>;

        staticinvoke <android.media.AudioSystem: void setErrorCallback(android.media.AudioSystem$ErrorCallback)>($r129);

        specialinvoke r0.<com.android.server.audio.AudioService: void updateAudioHalPids()>();

        z6 = specialinvoke r0.<com.android.server.audio.AudioService: boolean readCameraSoundForced()>();

        $r130 = new java.lang.Boolean;

        specialinvoke $r130.<java.lang.Boolean: void <init>(boolean)>(z6);

        $z7 = virtualinvoke $r130.<java.lang.Boolean: boolean booleanValue()>();

        r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced> = $z7;

        r131 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        if z6 == 0 goto label20;

        b39 = 11;

        goto label21;

     label20:
        b39 = 0;

     label21:
        $r71 = new java.lang.String;

        specialinvoke $r71.<java.lang.String: void <init>(java.lang.String)>("AudioService ctor");

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r131, 8, 2, 4, b39, $r71, 0);

        $r72 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        $i8 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r72, "audio_safe_volume_state", 0);

        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState> = $i8;

        $r73 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r74 = virtualinvoke $r73.<android.content.Context: android.content.res.Resources getResources()>();

        $i9 = virtualinvoke $r74.<android.content.res.Resources: int getInteger(int)>(17694882);

        $i10 = $i9 * 10;

        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeIndex> = $i10;

        $r75 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r76 = virtualinvoke $r75.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r76.<android.content.res.Resources: boolean getBoolean(int)>(17891571);

        r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume> = $z1;

        $r77 = new com.android.server.audio.AudioDeviceBroker;

        $r78 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        specialinvoke $r77.<com.android.server.audio.AudioDeviceBroker: void <init>(android.content.Context,com.android.server.audio.AudioService)>($r78, r0);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker> = $r77;

        $r79 = new com.android.server.audio.RecordingActivityMonitor;

        $r80 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        specialinvoke $r79.<com.android.server.audio.RecordingActivityMonitor: void <init>(android.content.Context)>($r80);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor> = $r79;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateStreamVolumeAlias(boolean,java.lang.String)>(0, "AS.AudioService");

        specialinvoke r0.<com.android.server.audio.AudioService: void readPersistedSettings()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void readUserRestrictions()>();

        $r81 = new com.android.server.audio.AudioService$SettingsObserver;

        specialinvoke $r81.<com.android.server.audio.AudioService$SettingsObserver: void <init>(com.android.server.audio.AudioService)>(r0);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$SettingsObserver mSettingsObserver> = $r81;

        specialinvoke r0.<com.android.server.audio.AudioService: void createStreamStates()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void initVolumeGroupStates()>();

        $i11 = specialinvoke r0.<com.android.server.audio.AudioService: int getSafeUsbMediaVolumeIndex()>();

        r0.<com.android.server.audio.AudioService: int mSafeUsbMediaVolumeIndex> = $i11;

        $r82 = new com.android.server.audio.PlaybackActivityMonitor;

        $r83 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i12 = $r83[4];

        specialinvoke $r82.<com.android.server.audio.PlaybackActivityMonitor: void <init>(android.content.Context,int)>(r123, $i12);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor> = $r82;

        $r84 = new com.android.server.audio.MediaFocusControl;

        $r86 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r85 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        specialinvoke $r84.<com.android.server.audio.MediaFocusControl: void <init>(android.content.Context,com.android.server.audio.PlayerFocusEnforcer)>($r86, $r85);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl> = $r84;

        staticinvoke <com.android.server.audio.AudioService: void readAndSetLowRamDevice()>();

        $z2 = staticinvoke <android.media.AudioSystem: boolean isCallScreeningModeSupported()>();

        r0.<com.android.server.audio.AudioService: boolean mIsCallScreeningModeSupported> = $z2;

        r0.<com.android.server.audio.AudioService: int mRingerAndZenModeMutedStreams> = 0;

        $i13 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>($i13, 0);

        $r87 = new android.content.IntentFilter;

        specialinvoke $r87.<android.content.IntentFilter: void <init>(java.lang.String)>("android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.bluetooth.headset.profile.action.ACTIVE_DEVICE_CHANGED");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_BACKGROUND");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_FOREGROUND");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.hardware.usb.action.USB_DEVICE_ATTACHED");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.bluetooth.adapter.action.STATE_CHANGED");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGES_SUSPENDED");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.CONFIGURATION_CHANGED");

        z8 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.audio.monitorRotation", 0);

        r0.<com.android.server.audio.AudioService: boolean mMonitorRotation> = z8;

        if z8 == 0 goto label22;

        $r104 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r103 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.RotationHelper: void init(android.content.Context,android.os.Handler)>($r104, $r103);

     label22:
        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION");

        virtualinvoke $r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION");

        $r89 = r0.<com.android.server.audio.AudioService: android.content.BroadcastReceiver mReceiver>;

        $r88 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r123.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r89, $r88, $r87, null, null);

        $r91 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer>;

        $z3 = virtualinvoke $r91.<com.android.server.audio.SystemServerAdapter: boolean isPrivileged()>();

        if $z3 == 0 goto label23;

        $r99 = new com.android.server.audio.AudioService$AudioServiceInternal;

        specialinvoke $r99.<com.android.server.audio.AudioService$AudioServiceInternal: void <init>(com.android.server.audio.AudioService)>(r0);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/media/AudioManagerInternal;", $r99);

        $r101 = r0.<com.android.server.audio.AudioService: android.os.UserManagerInternal mUserManagerInternal>;

        $r100 = r0.<com.android.server.audio.AudioService: android.os.UserManagerInternal$UserRestrictionsListener mUserRestrictionsListener>;

        virtualinvoke $r101.<android.os.UserManagerInternal: void addUserRestrictionsListener(android.os.UserManagerInternal$UserRestrictionsListener)>($r100);

        $r102 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        virtualinvoke $r102.<com.android.server.audio.RecordingActivityMonitor: void initMonitor()>();

     label23:
        r133 = newarray (float)[3];

        $r92 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r93 = virtualinvoke $r92.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r93.<android.content.res.Resources: float getFraction(int,int,int)>(18022403, 1, 1);

        r133[0] = $f0;

        $r94 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r95 = virtualinvoke $r94.<android.content.Context: android.content.res.Resources getResources()>();

        $f1 = virtualinvoke $r95.<android.content.res.Resources: float getFraction(int,int,int)>(18022404, 1, 1);

        r133[1] = $f1;

        $r96 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r97 = virtualinvoke $r96.<android.content.Context: android.content.res.Resources getResources()>();

        $f2 = virtualinvoke $r97.<android.content.res.Resources: float getFraction(int,int,int)>(18022405, 1, 1);

        r133[2] = $f2;

        i40 = 0;

     label24:
        $i41 = lengthof r133;

        if i40 >= $i41 goto label26;

        $f3 = r133[i40];

        $b14 = 0.0F cmpg $f3;

        if $b14 > 0 goto label25;

        $f4 = r133[i40];

        $b15 = $f4 cmpg 1.0F;

        if $b15 > 0 goto label25;

        $r98 = r0.<com.android.server.audio.AudioService: float[] mPrescaleAbsoluteVolume>;

        $f5 = r133[i40];

        $r98[i40] = $f5;

     label25:
        i40 = i40 + 1;

        goto label24;

     label26:
        return;
    }

    static com.android.server.audio.RecordingActivityMonitor access$000(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.RecordingActivityMonitor $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        return $r1;
    }

    static com.android.server.audio.AudioService$AudioHandler access$100(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        return $r1;
    }

    static android.media.audiopolicy.IAudioPolicyCallback access$10002(com.android.server.audio.AudioService, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        r0.<com.android.server.audio.AudioService: android.media.audiopolicy.IAudioPolicyCallback mExtVolumeController> = r1;

        return r1;
    }

    static java.util.HashMap access$10100(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        return $r1;
    }

    static com.android.server.audio.AudioService$AudioHandler access$102(com.android.server.audio.AudioService, com.android.server.audio.AudioService$AudioHandler)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioHandler r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: com.android.server.audio.AudioService$AudioHandler;

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler> = r1;

        return r1;
    }

    static java.util.HashMap access$10200(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        return $r1;
    }

    static java.lang.Object access$1500(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mForceControlStreamLock>;

        return $r1;
    }

    static com.android.server.audio.AudioService$ForceControlStreamClient access$1600(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$ForceControlStreamClient $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        return $r1;
    }

    static com.android.server.audio.AudioService$ForceControlStreamClient access$1602(com.android.server.audio.AudioService, com.android.server.audio.AudioService$ForceControlStreamClient)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$ForceControlStreamClient r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: com.android.server.audio.AudioService$ForceControlStreamClient;

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient> = r1;

        return r1;
    }

    static int access$1702(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        r0.<com.android.server.audio.AudioService: int mVolumeControlStream> = i0;

        return i0;
    }

    static boolean access$1802(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.audio.AudioService: boolean mUserSelectedVolumeControlStream> = z0;

        return z0;
    }

    static void access$200(android.os.Handler, int, int, int, int, java.lang.Object, int)
    {
        android.os.Handler r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object r1;

        r0 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        i4 := @parameter6: int;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r0, i0, i1, i2, i3, r1, i4);

        return;
    }

    static com.android.server.audio.AudioDeviceBroker access$2000(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioDeviceBroker $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        return $r1;
    }

    static int access$2100(com.android.server.audio.AudioService, int, android.os.IBinder, int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, $i3;
        android.os.IBinder r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.IBinder;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: java.lang.String;

        $i3 = specialinvoke r0.<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>(i0, r1, i1, i2, r2);

        return $i3;
    }

    static boolean access$2500(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        return $z0;
    }

    static com.android.server.audio.AudioService$VolumeStreamState[] access$2600(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        return $r1;
    }

    static android.content.ContentResolver access$2700(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    static com.android.server.audio.SystemServerAdapter access$2800(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.SystemServerAdapter $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer>;

        return $r1;
    }

    static void access$2900(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void observeDevicesForStreams(int)>(i0);

        return;
    }

    static void access$3000(com.android.server.audio.AudioService, android.content.Intent)
    {
        com.android.server.audio.AudioService r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.server.audio.AudioService: void sendBroadcastToAll(android.content.Intent)>(r1);

        return;
    }

    static java.lang.Object access$3100(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        return $r1;
    }

    static boolean access$3200(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced>;

        return $z0;
    }

    static float[] access$3300(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        float[] $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: float[] mPrescaleAbsoluteVolume>;

        return $r1;
    }

    static boolean access$3400(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mAvrcpAbsVolSupported>;

        return $z0;
    }

    static boolean access$3500(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFullVolumeDevice(int)>(i0);

        return $z0;
    }

    static int access$3600(com.android.server.audio.AudioService, int, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, $i3;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = specialinvoke r0.<com.android.server.audio.AudioService: int rescaleIndex(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    static boolean access$3700(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFixedVolumeDevice(int)>(i0);

        return $z0;
    }

    static int access$3800(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService: int getDevicesForStream(int)>(i0);

        return $i1;
    }

    static boolean access$4000(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        return $z0;
    }

    static void access$4300(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void onDispatchAudioServerStateChange(boolean)>(z0);

        return;
    }

    static com.android.server.audio.SoundEffectsHelper access$4400(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.SoundEffectsHelper $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SoundEffectsHelper mSfxHelper>;

        return $r1;
    }

    static boolean access$4500(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mSystemReady>;

        return $z0;
    }

    static com.android.server.audio.PlaybackActivityMonitor access$4600(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.PlaybackActivityMonitor $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        return $r1;
    }

    static android.os.PowerManager$WakeLock access$4700(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.os.PowerManager$WakeLock mAudioEventWakeLock>;

        return $r1;
    }

    static void access$4800(com.android.server.audio.AudioService, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void onCheckMusicActive(java.lang.String)>(r1);

        return;
    }

    static void access$4900(com.android.server.audio.AudioService, boolean, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void onConfigureSafeVolume(boolean,java.lang.String)>(z0, r1);

        return;
    }

    static void access$500(com.android.server.audio.AudioService, android.os.Handler, int, int, int, java.lang.Object, int)
    {
        com.android.server.audio.AudioService r0;
        android.os.Handler r1;
        int i0, i1, i2, i3;
        java.lang.Object r2;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        i3 := @parameter6: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void queueMsgUnderWakeLock(android.os.Handler,int,int,int,java.lang.Object,int)>(r1, i0, i1, i2, r2, i3);

        return;
    }

    static void access$5000(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void onAccessoryPlugMediaUnmute(int)>(i0);

        return;
    }

    static void access$5100(com.android.server.audio.AudioService, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void onUnmuteStream(int,int)>(i0, i1);

        return;
    }

    static void access$5200(com.android.server.audio.AudioService, java.lang.String, int)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void onDynPolicyMixStateUpdate(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$5300(com.android.server.audio.AudioService, java.util.ArrayList)
    {
        com.android.server.audio.AudioService r0;
        java.util.ArrayList r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: java.util.ArrayList;

        specialinvoke r0.<com.android.server.audio.AudioService: void onEnableSurroundFormats(java.util.ArrayList)>(r1);

        return;
    }

    static void access$5400(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void onUpdateRingerModeServiceInt()>();

        return;
    }

    static void access$5500(com.android.server.audio.AudioService, com.android.server.audio.AudioService$DeviceVolumeUpdate)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$DeviceVolumeUpdate r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: com.android.server.audio.AudioService$DeviceVolumeUpdate;

        specialinvoke r0.<com.android.server.audio.AudioService: void onSetVolumeIndexOnDevice(com.android.server.audio.AudioService$DeviceVolumeUpdate)>(r1);

        return;
    }

    static void access$5600(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void onObserveDevicesForAllStreams()>();

        return;
    }

    static void access$5700(com.android.server.audio.AudioService, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void onCheckVolumeCecOnHdmiConnection(int,java.lang.String)>(i0, r1);

        return;
    }

    static void access$5800(com.android.server.audio.AudioService, java.util.List)
    {
        com.android.server.audio.AudioService r0;
        java.util.List r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<com.android.server.audio.AudioService: void onPlaybackConfigChange(java.util.List)>(r1);

        return;
    }

    static com.android.server.audio.AudioEventLogger access$5900(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioEventLogger $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mModeLogger>;

        return $r1;
    }

    static android.content.Context access$600(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        return $r1;
    }

    static int access$6000(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        int $i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $i0 = r0.<com.android.server.audio.AudioService: int mEncodedSurroundMode>;

        return $i0;
    }

    static int access$6002(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        r0.<com.android.server.audio.AudioService: int mEncodedSurroundMode> = i0;

        return i0;
    }

    static java.lang.String access$6102(com.android.server.audio.AudioService, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.audio.AudioService: java.lang.String mEnabledSurroundFormats> = r1;

        return r1;
    }

    static boolean access$6200(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean updateRingerAndZenModeAffectedStreams()>();

        return $z0;
    }

    static void access$6300(com.android.server.audio.AudioService, int, boolean)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>(i0, z0);

        return;
    }

    static void access$6400(com.android.server.audio.AudioService, android.content.ContentResolver)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.ContentResolver;

        specialinvoke r0.<com.android.server.audio.AudioService: void readDockAudioSettings(android.content.ContentResolver)>(r1);

        return;
    }

    static void access$6500(com.android.server.audio.AudioService, android.content.ContentResolver)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.ContentResolver;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateMasterMono(android.content.ContentResolver)>(r1);

        return;
    }

    static void access$6600(com.android.server.audio.AudioService, android.content.ContentResolver)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.ContentResolver;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateMasterBalance(android.content.ContentResolver)>(r1);

        return;
    }

    static boolean access$6700(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mSurroundModeChanged>;

        return $z0;
    }

    static boolean access$6702(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.audio.AudioService: boolean mSurroundModeChanged> = z0;

        return z0;
    }

    static void access$6800(com.android.server.audio.AudioService, android.content.ContentResolver, boolean)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver r1;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.ContentResolver;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEnabledSurroundFormats(android.content.ContentResolver,boolean)>(r1, z0);

        return;
    }

    static void access$6900(com.android.server.audio.AudioService, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEncodedSurroundMode(int,java.lang.String)>(i0, r1);

        return;
    }

    static void access$700(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateAssistantUId(boolean)>(z0);

        return;
    }

    static int access$7000(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        int $i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $i0 = r0.<com.android.server.audio.AudioService: int mDockState>;

        return $i0;
    }

    static int access$7002(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        r0.<com.android.server.audio.AudioService: int mDockState> = i0;

        return i0;
    }

    static boolean access$7100(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mMonitorRotation>;

        return $z0;
    }

    static void access$7200(com.android.server.audio.AudioService, android.content.Context)
    {
        com.android.server.audio.AudioService r0;
        android.content.Context r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.Context;

        specialinvoke r0.<com.android.server.audio.AudioService: void handleConfigurationChanged(android.content.Context)>(r1);

        return;
    }

    static boolean access$7300(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mUserSwitchedReceived>;

        return $z0;
    }

    static boolean access$7302(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.audio.AudioService: boolean mUserSwitchedReceived> = z0;

        return z0;
    }

    static com.android.server.audio.MediaFocusControl access$7400(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.MediaFocusControl $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        return $r1;
    }

    static void access$7500(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void readAudioSettings(boolean)>(z0);

        return;
    }

    static void access$7600(com.android.server.audio.AudioService, android.content.pm.UserInfo)
    {
        com.android.server.audio.AudioService r0;
        android.content.pm.UserInfo r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.pm.UserInfo;

        specialinvoke r0.<com.android.server.audio.AudioService: void killBackgroundUserProcessesWithRecordAudioPermission(android.content.pm.UserInfo)>(r1);

        return;
    }

    static void access$7700(com.android.server.audio.AudioService, android.content.Context, android.content.Intent)
    {
        com.android.server.audio.AudioService r0;
        android.content.Context r1;
        android.content.Intent r2;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: android.content.Intent;

        specialinvoke r0.<com.android.server.audio.AudioService: void handleAudioEffectBroadcast(android.content.Context,android.content.Intent)>(r1, r2);

        return;
    }

    static boolean access$7802(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.audio.AudioService: boolean mMicMuteFromRestrictions> = z0;

        return z0;
    }

    static void access$7900(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void setMicrophoneMuteNoCallerCheck(int)>(i0);

        return;
    }

    static void access$8000(com.android.server.audio.AudioService, boolean, int, int)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        int i0, i1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void setMasterMuteInternalNoCallerCheck(boolean,int,int)>(z0, i0, i1);

        return;
    }

    static java.lang.Object access$8100(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        return $r1;
    }

    static android.hardware.hdmi.HdmiControlManager access$8200(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        android.hardware.hdmi.HdmiControlManager $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        return $r1;
    }

    static void access$8300(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateHdmiCecSinkLocked(boolean)>(z0);

        return;
    }

    static boolean access$8402(com.android.server.audio.AudioService, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.audio.AudioService: boolean mHdmiCecVolumeControlEnabled> = z0;

        return z0;
    }

    static com.android.server.audio.AudioService$VolumeController access$8700(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$VolumeController $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        return $r1;
    }

    static android.media.AudioManagerInternal$RingerModeDelegate access$8800(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioManagerInternal$RingerModeDelegate $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        return $r1;
    }

    static android.media.AudioManagerInternal$RingerModeDelegate access$8802(com.android.server.audio.AudioService, android.media.AudioManagerInternal$RingerModeDelegate)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioManagerInternal$RingerModeDelegate r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.media.AudioManagerInternal$RingerModeDelegate;

        r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate> = r1;

        return r1;
    }

    static void access$8900(com.android.server.audio.AudioService, int, int, int, java.lang.String, java.lang.String, int, boolean, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, i4;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: java.lang.String;

        i3 := @parameter6: int;

        z0 := @parameter7: boolean;

        i4 := @parameter8: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>(i0, i1, i2, r1, r2, i3, z0, i4);

        return;
    }

    static void access$9000(com.android.server.audio.AudioService, int, int, int, java.lang.String, java.lang.String, int, boolean)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: java.lang.String;

        i3 := @parameter6: int;

        z0 := @parameter7: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean)>(i0, i1, i2, r1, r2, i3, z0);

        return;
    }

    static java.lang.Object access$9100(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mAccessibilityServiceUidsLock>;

        return $r1;
    }

    static int[] access$9200(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        int[] $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        return $r1;
    }

    static int[] access$9202(com.android.server.audio.AudioService, int[])
    {
        com.android.server.audio.AudioService r0;
        int[] r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: int[];

        r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids> = r1;

        return r1;
    }

    static java.lang.Object access$9300(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mInputMethodServiceUidLock>;

        return $r1;
    }

    static int access$9400(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        int $i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $i0 = r0.<com.android.server.audio.AudioService: int mInputMethodServiceUid>;

        return $i0;
    }

    static int access$9402(com.android.server.audio.AudioService, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 := @parameter1: int;

        r0.<com.android.server.audio.AudioService: int mInputMethodServiceUid> = i0;

        return i0;
    }

    static com.android.server.audio.AudioSystemAdapter access$9500(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioSystemAdapter $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioSystemAdapter mAudioSystem>;

        return $r1;
    }

    static int access$9608(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        i0 = r0.<com.android.server.audio.AudioService: int mAudioPolicyCounter>;

        $i1 = i0 + 1;

        r0.<com.android.server.audio.AudioService: int mAudioPolicyCounter> = $i1;

        return i0;
    }

    static void access$9700(com.android.server.audio.AudioService, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        r1 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        specialinvoke r0.<com.android.server.audio.AudioService: void setExtVolumeController(android.media.audiopolicy.IAudioPolicyCallback)>(r1);

        return;
    }

    static java.lang.Object access$9900(com.android.server.audio.AudioService)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mExtVolumeControllerLock>;

        return $r1;
    }

    private void addAudioSystemDeviceOutToFixedVolumeDevices(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.Set $r1;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void addAudioSystemDeviceOutToFullVolumeDevices(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.Set $r1;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.Set mFullVolumeDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void adjustSuggestedStreamVolume(int, int, int, java.lang.String, java.lang.String, int, boolean, int)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r17, r20, r25, r28;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8, i9, $i10;
        boolean z0, $z2, $z3, z4, z5, z6, $z7;
        android.media.MediaMetrics$Item $r2, $r3, $r5, $r7, $r10, r23, r26;
        android.media.MediaMetrics$Key $r4, $r6, $r8, r24, r27;
        java.lang.Integer $r9;
        java.lang.StringBuilder $r11;
        com.android.server.audio.AudioServiceEvents$VolumeEvent $r16;
        java.lang.Throwable $r18, $r19, r32;
        com.android.server.audio.AudioEventLogger r21;
        java.lang.Object r29;
        int[] $r30;
        com.android.server.audio.AudioService$VolumeController $r31;

        r0 := @this: com.android.server.audio.AudioService;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        r20 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        z0 := @parameter6: boolean;

        i1 := @parameter7: int;

        if i6 == 0 goto label01;

        r21 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(r20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = new com.android.server.audio.AudioServiceEvents$VolumeEvent;

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.android.server.audio.AudioServiceEvents$VolumeEvent: void <init>(int,int,int,int,java.lang.String)>(0, i7, i6, i8, $r17);

        virtualinvoke r21.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r16);

        goto label01;

     label01:
        z4 = specialinvoke r0.<com.android.server.audio.AudioService: boolean notifyExternalVolumeController(int)>(i6);

        $r2 = new android.media.MediaMetrics$Item;

        specialinvoke $r2.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.service.adjustSuggestedStreamVolume");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke $r2.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>($i3);

        $r4 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CALLING_PACKAGE>;

        $r5 = virtualinvoke $r3.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r4, r20);

        $r6 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CLIENT_NAME>;

        r23 = virtualinvoke $r5.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r6, r1);

        r24 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key DIRECTION>;

        if i6 <= 0 goto label02;

        r25 = "up";

        goto label03;

     label02:
        r25 = "down";

     label03:
        r26 = virtualinvoke r23.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r24, r25);

        r27 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EXTERNAL>;

        if z4 == 0 goto label04;

        r28 = "yes";

        goto label05;

     label04:
        r28 = "no";

     label05:
        $r7 = virtualinvoke r26.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r27, r28);

        $r8 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key FLAGS>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r10 = virtualinvoke $r7.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r8, $r9);

        virtualinvoke $r10.<android.media.MediaMetrics$Item: boolean record()>();

        if z4 == 0 goto label06;

        return;

     label06:
        r29 = r0.<com.android.server.audio.AudioService: java.lang.Object mForceControlStreamLock>;

        entermonitor r29;

     label07:
        $z2 = r0.<com.android.server.audio.AudioService: boolean mUserSelectedVolumeControlStream>;

        if $z2 == 0 goto label09;

        i9 = r0.<com.android.server.audio.AudioService: int mVolumeControlStream>;

     label08:
        goto label19;

     label09:
        i9 = specialinvoke r0.<com.android.server.audio.AudioService: int getActiveStreamType(int)>(i7);

     label10:
        if i9 == 2 goto label13;

        if i9 != 5 goto label11;

        goto label13;

     label11:
        z5 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(i9, 0);

     label12:
        goto label14;

     label13:
        z5 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wasStreamActiveRecently(int,int)>(i9, 0);

     label14:
        if z5 != 0 goto label19;

     label15:
        $i5 = r0.<com.android.server.audio.AudioService: int mVolumeControlStream>;

        if $i5 != -1 goto label17;

     label16:
        goto label19;

     label17:
        i9 = r0.<com.android.server.audio.AudioService: int mVolumeControlStream>;

     label18:
        goto label19;

     label19:
        exitmonitor r29;

     label20:
        z6 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isMuteAdjust(int)>(i6);

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i9);

        $r30 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        i2 = $r30[i9];

        $i10 = i8 & 4;

        if $i10 == 0 goto label21;

        if i2 == 2 goto label21;

        i8 = i8 & -5;

        goto label21;

     label21:
        $r31 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        $z7 = virtualinvoke $r31.<com.android.server.audio.AudioService$VolumeController: boolean suppressAdjustment(int,int,boolean)>(i2, i8, z6);

        if $z7 == 0 goto label22;

        $z3 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z3 != 0 goto label22;

        $i4 = i8 & -5;

        i8 = $i4 & -17;

        i6 = 0;

        goto label22;

     label22:
        virtualinvoke r0.<com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>(i9, i6, i8, r20, r1, i0, z0, i1);

        return;

     label23:
        $r18 := @caughtexception;

        r32 = $r18;

     label24:
        exitmonitor r29;

     label25:
        throw r32;

     label26:
        $r19 := @caughtexception;

        r32 = $r19;

        goto label24;

        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    private void broadcastMasterMuteStatus(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        android.content.Intent $r2;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.media.MASTER_MUTE_CHANGED_ACTION");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.media.EXTRA_MASTER_VOLUME_MUTED", z0);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(603979776);

        specialinvoke r0.<com.android.server.audio.AudioService: void sendStickyBroadcastToAll(android.content.Intent)>($r2);

        return;
    }

    private void broadcastRingerMode(java.lang.String, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        com.android.server.audio.SystemServerAdapter $r1;
        boolean $z0;
        android.content.Intent $r2;
        java.lang.String r5;

        r0 := @this: com.android.server.audio.AudioService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer>;

        $z0 = virtualinvoke $r1.<com.android.server.audio.SystemServerAdapter: boolean isPrivileged()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>(r5);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_RINGER_MODE", i0);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(603979776);

        specialinvoke r0.<com.android.server.audio.AudioService: void sendStickyBroadcastToAll(android.content.Intent)>($r2);

        return;
    }

    private void broadcastVibrateSetting(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        com.android.server.audio.SystemServerAdapter $r2;
        boolean $z0, $z1;
        android.app.ActivityManagerInternal $r3;
        android.content.Intent $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer>;

        $z0 = virtualinvoke $r2.<com.android.server.audio.SystemServerAdapter: boolean isPrivileged()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: android.app.ActivityManagerInternal mActivityManagerInternal>;

        $z1 = virtualinvoke $r3.<android.app.ActivityManagerInternal: boolean isSystemReady()>();

        if $z1 == 0 goto label2;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.media.VIBRATE_SETTING_CHANGED");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_VIBRATE_TYPE", i0);

        $i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getVibrateSetting(int)>(i0);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_VIBRATE_SETTING", $i1);

        specialinvoke r0.<com.android.server.audio.AudioService: void sendBroadcastToAll(android.content.Intent)>($r4);

     label2:
        return;
    }

    private boolean callerHasPermission(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean canChangeAccessibilityVolume()
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, i4;
        android.content.Context $r3;
        int[] $r4, $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mAccessibilityServiceUidsLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.CHANGE_ACCESSIBILITY_VOLUME");

        if $i1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return 1;

     label03:
        $r4 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        if $r4 == null goto label08;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label04:
        i4 = 0;

     label05:
        $r5 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        $i2 = lengthof $r5;

        if i4 >= $i2 goto label08;

        $r6 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        $i3 = $r6[i4];

        if $i3 != i0 goto label07;

        exitmonitor r1;

     label06:
        return 1;

     label07:
        i4 = i4 + 1;

        goto label05;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean canProjectAudio(android.media.projection.IMediaProjection)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0, $z1;
        android.os.RemoteException $r1, $r7;
        java.lang.StringBuilder $r2, $r8;
        android.os.IBinder $r4, $r10;
        java.lang.String $r6, $r12;
        android.media.projection.IMediaProjection r13;
        android.media.projection.IMediaProjectionManager r14;

        r0 := @this: com.android.server.audio.AudioService;

        r13 := @parameter0: android.media.projection.IMediaProjection;

        if r13 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "MediaProjection is null");

        return 0;

     label1:
        r14 = specialinvoke r0.<com.android.server.audio.AudioService: android.media.projection.IMediaProjectionManager getProjectionService()>();

        if r14 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Can\'t get service IMediaProjectionManager");

        return 0;

     label2:
        $z0 = interfaceinvoke r14.<android.media.projection.IMediaProjectionManager: boolean isValidMediaProjection(android.media.projection.IMediaProjection)>(r13);

        if $z0 != 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "App passed invalid MediaProjection token");

     label3:
        return 0;

     label4:
        $z1 = interfaceinvoke r13.<android.media.projection.IMediaProjection: boolean canProjectAudio()>();

        if $z1 != 0 goto label6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "App passed MediaProjection that can not project audio");

     label5:
        return 0;

     label6:
        return 1;

     label7:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call .canProjectAudio() on valid IMediaProjection");

        $r10 = interfaceinvoke r13.<android.media.projection.IMediaProjection: android.os.IBinder asBinder()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", $r12, $r7);

        return 0;

     label8:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call .isValidMediaProjection() on IMediaProjectionManager");

        $r4 = interfaceinvoke r14.<android.media.projection.IMediaProjectionManager: android.os.IBinder asBinder()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", $r6, $r1);

        return 0;

        catch android.os.RemoteException from label2 to label3 with label8;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    private void checkAddAllFixedVolumeDevices(int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3, i4;
        java.lang.String r1;
        com.android.server.audio.AudioService$VolumeStreamState[] r2, $r3, $r5;
        com.android.server.audio.AudioService$VolumeStreamState $r4, $r6, $r8, $r9;
        boolean $z0;
        int[] $r7;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i4 = 0;

     label1:
        if i4 >= i1 goto label3;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i4];

        $z0 = virtualinvoke $r4.<com.android.server.audio.AudioService$VolumeStreamState: boolean hasIndexForDevice(int)>(i0);

        if $z0 != 0 goto label2;

        r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r9 = r2[i4];

        $r7 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i2 = $r7[i4];

        $r8 = r2[$i2];

        $i3 = virtualinvoke $r8.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(1073741824);

        virtualinvoke $r9.<com.android.server.audio.AudioService$VolumeStreamState: boolean setIndex(int,int,java.lang.String,boolean)>($i3, i0, r1, 1);

     label2:
        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[i4];

        virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeStreamState: void checkFixedVolumeDevices()>();

        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    private void checkAllAliasStreamVolumes()
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int i0, $i1, i2;
        com.android.server.audio.AudioService$VolumeStreamState[] $r2, $r4, $r7, $r9;
        int[] $r3;
        com.android.server.audio.AudioService$VolumeStreamState $r5, $r6, $r8, $r10;
        boolean $z0;
        java.lang.Throwable $r11, $r12;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label01:
        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label02:
        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label07;

     label05:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r2[i2];

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r3 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i1 = $r3[i2];

        $r5 = $r4[$i1];

        virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeStreamState: void setAllIndexes(com.android.server.audio.AudioService$VolumeStreamState,java.lang.String)>($r5, "AS.AudioService");

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = $r7[i2];

        $z0 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>($r8);

        if $z0 != 0 goto label06;

        $r9 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r10 = $r9[i2];

        virtualinvoke $r10.<com.android.server.audio.AudioService$VolumeStreamState: void applyAllVolumes()>();

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label12:
        throw $r11;

     label13:
        $r12 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void checkAllFixedVolumeDevices()
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1;
        com.android.server.audio.AudioService$VolumeStreamState $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i1];

        virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: void checkFixedVolumeDevices()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void checkAllFixedVolumeDevices(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1;
        com.android.server.audio.AudioService$VolumeStreamState $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: void checkFixedVolumeDevices()>();

        return;
    }

    private int checkForRingerModeChange(int, int, int, boolean, java.lang.String, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i5, $i6, $i7, $i10, $i14, $i16, i19, i22, $i24;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.String r1, $r12;
        android.app.NotificationManager $r3;
        java.lang.SecurityException $r4;
        android.media.VolumePolicy $r5, $r6, $r8, $r13;
        long $l8, $l9, $l11, $l12, $l17;
        byte $b13;
        android.media.AudioManagerInternal$RingerModeDelegate $r7;
        java.lang.StringBuilder $r9;
        short s21, s23, s25;

        r0 := @this: com.android.server.audio.AudioService;

        i19 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.lang.String;

        i2 := @parameter5: int;

        $z1 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isPlatformTelevision()>();

        if $z1 != 0 goto label25;

        $z2 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z2 == 0 goto label01;

        goto label25;

     label01:
        i5 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        if i5 == 0 goto label16;

        if i5 == 1 goto label08;

        if i5 == 2 goto label02;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkForRingerModeChange() wrong ringer mode: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r12);

        s21 = 1;

        i22 = i5;

        goto label22;

     label02:
        if i0 != -1 goto label04;

        $z13 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z13 == 0 goto label03;

        s21 = 1;

        i22 = i5;

        if i1 > i19 goto label22;

        s21 = 1;

        i22 = i5;

        $i16 = i1 * 2;

        if i19 >= $i16 goto label22;

        i22 = 1;

        $l17 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.audio.AudioService: long mLoweredFromNormalToVibrateTime> = $l17;

        s21 = 1;

        goto label22;

     label03:
        s21 = 1;

        i22 = i5;

        if i19 != i1 goto label22;

        s21 = 1;

        i22 = i5;

        $r8 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        $z14 = $r8.<android.media.VolumePolicy: boolean volumeDownToEnterSilent>;

        if $z14 == 0 goto label22;

        i22 = 0;

        s21 = 1;

        goto label22;

     label04:
        s21 = 1;

        i22 = i5;

        $z11 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z11 == 0 goto label22;

        if i0 == 101 goto label05;

        s21 = 1;

        i22 = i5;

        if i0 != -100 goto label22;

     label05:
        $z12 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z12 == 0 goto label06;

        i22 = 1;

        goto label07;

     label06:
        i22 = 0;

     label07:
        s21 = 1 & -2;

        goto label22;

     label08:
        $z7 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z7 != 0 goto label09;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "checkForRingerModeChange() current ringer mode is vibratebut no vibrator is present");

        s21 = 1;

        i22 = i5;

        goto label22;

     label09:
        if i0 != -1 goto label13;

        $z8 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z8 == 0 goto label10;

        $i14 = i1 * 2;

        if i19 < $i14 goto label10;

        if z0 == 0 goto label10;

        i22 = 2;

        s23 = 1;

        goto label15;

     label10:
        s23 = 1;

        i22 = i5;

        $i24 = r0.<com.android.server.audio.AudioService: int mPrevVolDirection>;

        if $i24 == -1 goto label15;

        $r5 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        $z9 = $r5.<android.media.VolumePolicy: boolean volumeDownToEnterSilent>;

        if $z9 == 0 goto label12;

        i22 = i5;

        $l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l9 = r0.<com.android.server.audio.AudioService: long mLoweredFromNormalToVibrateTime>;

        $l12 = $l8 - $l9;

        $r6 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        $i10 = $r6.<android.media.VolumePolicy: int vibrateToSilentDebounce>;

        $l11 = (long) $i10;

        $b13 = $l12 cmp $l11;

        if $b13 <= 0 goto label11;

        i22 = i5;

        $r7 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        $z10 = interfaceinvoke $r7.<android.media.AudioManagerInternal$RingerModeDelegate: boolean canVolumeDownEnterSilent()>();

        if $z10 == 0 goto label11;

        i22 = 0;

     label11:
        s23 = 1;

        goto label15;

     label12:
        s23 = 1 | 2048;

        i22 = i5;

        goto label15;

     label13:
        if i0 == 1 goto label14;

        if i0 == 101 goto label14;

        s23 = 1;

        i22 = i5;

        if i0 != 100 goto label15;

     label14:
        i22 = 2;

        s23 = 1;

     label15:
        s21 = s23 & -2;

        goto label22;

     label16:
        $z3 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z3 == 0 goto label17;

        if i0 != -1 goto label17;

        $i7 = i1 * 2;

        if i19 < $i7 goto label17;

        if z0 == 0 goto label17;

        i22 = 2;

        s25 = 1;

        goto label21;

     label17:
        if i0 == 1 goto label18;

        if i0 == 101 goto label18;

        s25 = 1;

        i22 = i5;

        if i0 != 100 goto label21;

     label18:
        $r13 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        $z15 = $r13.<android.media.VolumePolicy: boolean volumeUpToExitSilent>;

        if $z15 != 0 goto label19;

        s25 = 1 | 128;

        i22 = i5;

        goto label21;

     label19:
        $z4 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z4 == 0 goto label20;

        if i0 != 1 goto label20;

        i22 = 1;

        s25 = 1;

        goto label21;

     label20:
        i22 = 2;

        s25 = 1;

     label21:
        s21 = s25 & -2;

     label22:
        $z16 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isAndroidNPlus(java.lang.String)>(r1);

        if $z16 == 0 goto label24;

        $z5 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wouldToggleZenMode(int)>(i22);

        if $z5 == 0 goto label24;

        $r3 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        $z6 = virtualinvoke $r3.<android.app.NotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>(r1);

        if $z6 != 0 goto label24;

        $i6 = i2 & 4096;

        if $i6 == 0 goto label23;

        goto label24;

     label23:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Not allowed to change Do Not Disturb state");

        throw $r4;

     label24:
        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerMode(int,java.lang.String,boolean)>(i22, "AS.AudioService.checkForRingerModeChange", 0);

        r0.<com.android.server.audio.AudioService: int mPrevVolDirection> = i0;

        return s21;

     label25:
        return 1;
    }

    private void checkMonitorAudioServerStatePermission()
    {
        com.android.server.audio.AudioService r0;
        android.content.Context $r1, $r2;
        int $i0, $i1;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i0 == 0 goto label2;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Not allowed to monitor audioserver state");

        throw $r3;

     label2:
        return;
    }

    private void checkMuteAffectedStreams()
    {
        com.android.server.audio.AudioService r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        com.android.server.audio.AudioService$VolumeStreamState[] r1;
        com.android.server.audio.AudioService$VolumeStreamState r2;

        r0 := @this: com.android.server.audio.AudioService;

        i8 = 0;

     label1:
        r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $i0 = lengthof r1;

        if i8 >= $i0 goto label3;

        r2 = r1[i8];

        $i1 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$800(com.android.server.audio.AudioService$VolumeStreamState)>(r2);

        if $i1 <= 0 goto label2;

        $i2 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$1100(com.android.server.audio.AudioService$VolumeStreamState)>(r2);

        if $i2 == 0 goto label2;

        $i3 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$1100(com.android.server.audio.AudioService$VolumeStreamState)>(r2);

        if $i3 == 6 goto label2;

        $i4 = r0.<com.android.server.audio.AudioService: int mMuteAffectedStreams>;

        $i5 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$1100(com.android.server.audio.AudioService$VolumeStreamState)>(r2);

        $i6 = 1 << $i5;

        $i7 = $i4 & $i6;

        r0.<com.android.server.audio.AudioService: int mMuteAffectedStreams> = $i7;

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        return;
    }

    private boolean checkSafeMediaVolume(int, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Object r1;
        int[] $r3;
        java.util.Set $r4;
        java.lang.Integer $r5;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r1;

     label1:
        $i3 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i3 != 3 goto label3;

        $r3 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i4 = $r3[i0];

        if $i4 != 3 goto label3;

        $r4 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $i5 = specialinvoke r0.<com.android.server.audio.AudioService: int safeMediaVolumeIndex(int)>(i2);

        if i1 <= $i5 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        exitmonitor r1;

     label4:
        return 1;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r13, $r21;
        android.content.Context $r2;
        int $i0, $i1, $i2, $i4, $i5;
        java.util.HashMap $r3;
        android.os.IBinder $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r14;
        android.media.audiopolicy.IAudioPolicyCallback r22;
        boolean z0;
        com.android.server.audio.AudioService$AudioPolicyProxy r24;

        r0 := @this: com.android.server.audio.AudioService;

        r22 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 != 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / uid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", need MODIFY_AUDIO_ROUTING");

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r21);

        return null;

     label3:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r4 = interfaceinvoke r22.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        r24 = (com.android.server.audio.AudioService$AudioPolicyProxy) $r5;

        if r24 != null goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for pid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / uid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", unregistered policy");

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r13);

        return null;

     label4:
        return r24;
    }

    private void createAudioSystemThread()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioSystemThread $r2;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = new com.android.server.audio.AudioService$AudioSystemThread;

        specialinvoke $r2.<com.android.server.audio.AudioService$AudioSystemThread: void <init>(com.android.server.audio.AudioService)>(r0);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioSystemThread mAudioSystemThread> = $r2;

        virtualinvoke $r2.<com.android.server.audio.AudioService$AudioSystemThread: void start()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void waitForAudioHandlerCreation()>();

        return;
    }

    private void createStreamStates()
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, i2;
        com.android.server.audio.AudioService$VolumeStreamState[] r1;
        com.android.server.audio.AudioService$VolumeStreamState $r2;
        int[] $r3;
        java.lang.String[] $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.audio.AudioService;

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        r1 = newarray (com.android.server.audio.AudioService$VolumeStreamState)[i0];

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates> = r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r2 = new com.android.server.audio.AudioService$VolumeStreamState;

        $r4 = <android.provider.Settings$System: java.lang.String[] VOLUME_SETTINGS_INT>;

        $r3 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i1 = $r3[i2];

        $r5 = $r4[$i1];

        specialinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: void <init>(com.android.server.audio.AudioService,java.lang.String,int,com.android.server.audio.AudioService$1)>(r0, $r5, i2, null);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.audio.AudioService: void checkAllFixedVolumeDevices()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void checkAllAliasStreamVolumes()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void checkMuteAffectedStreams()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void updateDefaultVolumes()>();

        return;
    }

    private boolean discardRmtSbmxFullVolDeathHandlerFor(android.os.IBinder)
    {
        com.android.server.audio.AudioService r0;
        android.os.IBinder r1;
        java.util.Iterator r2;
        com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler r3;
        java.util.ArrayList $r4, $r6;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.os.IBinder;

        $r4 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mRmtSbmxFullVolDeathHandlers>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler) $r5;

        $z1 = virtualinvoke r3.<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: boolean isHandlerFor(android.os.IBinder)>(r1);

        if $z1 == 0 goto label2;

        virtualinvoke r3.<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void forget()>();

        $r6 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mRmtSbmxFullVolDeathHandlers>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private void dumpAudioPolicies(java.io.PrintWriter)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1, $r3;
        java.util.Iterator r2;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.android.server.audio.AudioService$AudioPolicyProxy $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.io.PrintWriter r9;

        r0 := @this: com.android.server.audio.AudioService;

        r9 := @parameter0: java.io.PrintWriter;

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>("\nAudio policies:");

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.audio.AudioService$AudioPolicyProxy) $r5;

        $r7 = virtualinvoke $r6.<com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String toLogFriendlyString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r7);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private java.lang.String dumpDeviceTypes(java.util.Set)
    {
        com.android.server.audio.AudioService r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r12;
        java.lang.Object $r5, $r14;
        java.lang.Integer $r6, $r15;
        int $i0, $i1;
        java.lang.String $r7, $r9, $r11, $r16, $r18;
        java.util.Set r20;
        java.util.Iterator r21;

        r0 := @this: com.android.server.audio.AudioService;

        r20 := @parameter0: java.util.Set;

        r21 = interfaceinvoke r20.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r5 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label2:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",0x");

        $r14 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.lang.Integer) $r14;

        $i1 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        goto label2;

     label3:
        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private void dumpRingerMode(java.io.PrintWriter)
    {
        com.android.server.audio.AudioService r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r8, $r14;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String[] $r4, $r10;
        java.lang.String $r5, $r7, $r11, $r13, $r17, $r19;
        android.app.NotificationManager $r16;
        android.media.AudioManagerInternal$RingerModeDelegate $r20;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nRinger mode: ");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- mode (internal) = ");

        $r4 = <com.android.server.audio.AudioService: java.lang.String[] RINGER_MODE_NAMES>;

        $i0 = r0.<com.android.server.audio.AudioService: int mRingerMode>;

        $r5 = $r4[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- mode (external) = ");

        $r10 = <com.android.server.audio.AudioService: java.lang.String[] RINGER_MODE_NAMES>;

        $i1 = r0.<com.android.server.audio.AudioService: int mRingerModeExternal>;

        $r11 = $r10[$i1];

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- zen mode:");

        $r16 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        $i2 = virtualinvoke $r16.<android.app.NotificationManager: int getZenMode()>();

        $r17 = staticinvoke <android.provider.Settings$Global: java.lang.String zenModeToString(int)>($i2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        $i3 = r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams>;

        specialinvoke r0.<com.android.server.audio.AudioService: void dumpRingerModeStreams(java.io.PrintWriter,java.lang.String,int)>(r1, "affected", $i3);

        $i4 = r0.<com.android.server.audio.AudioService: int mRingerAndZenModeMutedStreams>;

        specialinvoke r0.<com.android.server.audio.AudioService: void dumpRingerModeStreams(java.io.PrintWriter,java.lang.String,int)>(r1, "muted", $i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("- delegate = ");

        $r20 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r20);

        return;
    }

    private void dumpRingerModeStreams(java.io.PrintWriter, java.lang.String, int)
    {
        com.android.server.audio.AudioService r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r3, $r6;
        int i0, $i1, $i2, i3, i5, i6, i7;
        java.lang.String[] $r4, $r5;
        boolean z0, z1;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("- ringer mode ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" streams = 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r3);

        if i3 == 0 goto label7;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" (");

        z0 = 1;

        i5 = i3;

        i6 = 0;

     label1:
        $r4 = <android.media.AudioSystem: java.lang.String[] STREAM_NAMES>;

        $i1 = lengthof $r4;

        if i6 >= $i1 goto label4;

        i0 = 1 << i6;

        z1 = z0;

        i7 = i5;

        $i2 = i5 & i0;

        if $i2 == 0 goto label3;

        if z0 != 0 goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

     label2:
        $r5 = <android.media.AudioSystem: java.lang.String[] STREAM_NAMES>;

        $r6 = $r5[i6];

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        i7 = i5 & i0;

        z1 = 0;

     label3:
        i6 = i6 + 1;

        z0 = z1;

        i5 = i7;

        goto label1;

     label4:
        if i5 == 0 goto label6;

        if z0 != 0 goto label5;

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

     label5:
        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i5);

     label6:
        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(41);

     label7:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    private void dumpStreamStates(java.io.PrintWriter)
    {
        com.android.server.audio.AudioService r0;
        java.io.PrintWriter r1;
        int i0, $i1, i2;
        java.lang.String $r3, $r7, $r10;
        java.lang.StringBuilder $r4;
        java.lang.String[] $r6;
        com.android.server.audio.AudioService$VolumeStreamState[] $r11;
        com.android.server.audio.AudioService$VolumeStreamState $r12;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nStream volumes (device: index)");

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- ");

        $r6 = <android.media.AudioSystem: java.lang.String[] STREAM_NAMES>;

        $r7 = $r6[i2];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r12 = $r11[i2];

        staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: void access$1300(com.android.server.audio.AudioService$VolumeStreamState,java.io.PrintWriter)>($r12, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("\n- mute affected streams = 0x");

        $i1 = r0.<com.android.server.audio.AudioService: int mMuteAffectedStreams>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        return;
    }

    private void dumpSupportedSystemUsage(java.io.PrintWriter)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int[] $r2, $r4;
        int $i0, $i1, i2;
        java.lang.Object[] $r3;
        java.lang.String $r5;
        java.lang.Throwable $r7;
        java.io.PrintWriter r8;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: java.io.PrintWriter;

        virtualinvoke r8.<java.io.PrintWriter: void println(java.lang.String)>("Supported System Usages:");

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSupportedSystemUsagesLock>;

        entermonitor r1;

        i2 = 0;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages>;

        $i0 = lengthof $r2;

        if i2 >= $i0 goto label3;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages>;

        $i1 = $r4[i2];

        $r5 = staticinvoke <android.media.AudioAttributes: java.lang.String usageToString(int)>($i1);

        $r3[0] = $r5;

        virtualinvoke r8.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("\t%s\n", $r3);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void dumpVolumeGroups(java.io.PrintWriter)
    {
        com.android.server.audio.AudioService r0;
        java.io.PrintWriter r1;
        android.util.SparseArray $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.audio.AudioService$VolumeGroupState $r5;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nVolume Groups (device: index)");

        i1 = 0;

     label1:
        $r2 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r5 = (com.android.server.audio.AudioService$VolumeGroupState) $r4;

        staticinvoke <com.android.server.audio.AudioService$VolumeGroupState: void access$2400(com.android.server.audio.AudioService$VolumeGroupState,java.io.PrintWriter)>($r5, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void enforceModifyAudioRoutingPermission()
    {
        com.android.server.audio.AudioService r0;
        android.content.Context $r1;
        int $i0;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Missing MODIFY_AUDIO_ROUTING permission");

        throw $r2;
    }

    private void enforceSafeMediaVolume(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;
        com.android.server.audio.AudioService$VolumeStreamState r2;
        java.util.Iterator r3;
        int i0, $i1, $i2, $i3;
        com.android.server.audio.AudioService$VolumeStreamState[] $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Integer $r7;
        com.android.server.audio.AudioService$AudioHandler $r8;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r2 = $r4[3];

        $r5 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r2.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i0);

        $i2 = specialinvoke r0.<com.android.server.audio.AudioService: int safeMediaVolumeIndex(int)>(i0);

        if $i1 <= $i2 goto label2;

        $i3 = specialinvoke r0.<com.android.server.audio.AudioService: int safeMediaVolumeIndex(int)>(i0);

        virtualinvoke r2.<com.android.server.audio.AudioService$VolumeStreamState: boolean setIndex(int,int,java.lang.String,boolean)>($i3, i0, r1, 1);

        $r8 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r8, 0, 2, i0, 0, r2, 0);

     label2:
        goto label1;

     label3:
        return;
    }

    private void enforceVolumeController(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r7;
        android.content.Context r2;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only SystemUI can ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", $r7);

        return;
    }

    private void ensureValidAttributes(android.media.audiopolicy.AudioVolumeGroup)
    {
        com.android.server.audio.AudioService r0;
        android.media.audiopolicy.AudioVolumeGroup r1;
        java.util.List $r3;
        java.util.stream.Stream $r4;
        com.android.server.audio.'-$$Lambda$AudioService$eq0KnrBbF7KWNGmAJRjyeCTIdzQ' $r5;
        boolean $z0;
        java.lang.String $r8, $r12;
        java.lang.StringBuilder r13;
        java.lang.IllegalArgumentException r14;
        java.util.function.Predicate r15;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.audiopolicy.AudioVolumeGroup;

        $r3 = virtualinvoke r1.<android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioAttributes()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = <com.android.server.audio._$$Lambda$AudioService$eq0KnrBbF7KWNGmAJRjyeCTIdzQ: com.android.server.audio.'-$$Lambda$AudioService$eq0KnrBbF7KWNGmAJRjyeCTIdzQ' INSTANCE>;

        r15 = (java.util.function.Predicate) $r5;

        $z0 = interfaceinvoke $r4.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(r15);

        if $z0 == 0 goto label1;

        return;

     label1:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Volume Group ");

        $r8 = virtualinvoke r1.<android.media.audiopolicy.AudioVolumeGroup: java.lang.String name()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no valid audio attributes");

        r14 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw r14;
    }

    private void ensureValidDirection(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 == -100 goto label2;

        if i0 == -1 goto label2;

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 == 100 goto label2;

        if i0 != 101 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad direction ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    private void ensureValidRingerMode(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isValidRingerMode(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad ringer mode ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void ensureValidStreamType(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        com.android.server.audio.AudioService$VolumeStreamState[] $r7;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $i1 = lengthof $r7;

        if i0 >= $i1 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad stream type ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private boolean forceFocusDuckingForAccessibility(android.media.AudioAttributes, int, int)
    {
        com.android.server.audio.AudioService r0;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        boolean $z0;
        int[] $r2, $r3, $r4;
        java.lang.Throwable $r5;
        android.media.AudioAttributes r6;
        android.os.Bundle r7;
        java.lang.Object r8;

        r0 := @this: com.android.server.audio.AudioService;

        r6 := @parameter0: android.media.AudioAttributes;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        if r6 == null goto label15;

        $i0 = virtualinvoke r6.<android.media.AudioAttributes: int getUsage()>();

        if $i0 != 11 goto label15;

        if i3 == 3 goto label01;

        goto label15;

     label01:
        r7 = virtualinvoke r6.<android.media.AudioAttributes: android.os.Bundle getBundle()>();

        if r7 == null goto label14;

        $z0 = virtualinvoke r7.<android.os.Bundle: boolean getBoolean(java.lang.String)>("a11y_force_ducking");

        if $z0 != 0 goto label02;

        goto label14;

     label02:
        if i4 != 0 goto label03;

        return 1;

     label03:
        r8 = r0.<com.android.server.audio.AudioService: java.lang.Object mAccessibilityServiceUidsLock>;

        entermonitor r8;

     label04:
        $r2 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        if $r2 == null goto label09;

        i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label05:
        i6 = 0;

     label06:
        $r3 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        $i1 = lengthof $r3;

        if i6 >= $i1 goto label09;

        $r4 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        $i2 = $r4[i6];

        if $i2 != i5 goto label08;

        exitmonitor r8;

     label07:
        return 1;

     label08:
        i6 = i6 + 1;

        goto label06;

     label09:
        exitmonitor r8;

     label10:
        return 0;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r8;

     label13:
        throw $r5;

     label14:
        return 0;

     label15:
        return 0;

        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private int getActiveStreamType(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z0 == 0 goto label01;

        if i0 != -2147483648 goto label01;

        return 3;

     label01:
        $i1 = r0.<com.android.server.audio.AudioService: int mPlatformType>;

        if $i1 == 1 goto label02;

        goto label09;

     label02:
        $z1 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isInCommunication()>();

        if $z1 == 0 goto label04;

        $i11 = staticinvoke <android.media.AudioSystem: int getForceUse(int)>(0);

        if $i11 != 3 goto label03;

        return 6;

     label03:
        return 0;

     label04:
        if i0 != -2147483648 goto label07;

        $i9 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z9 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wasStreamActiveRecently(int,int)>(2, $i9);

        if $z9 == 0 goto label05;

        return 2;

     label05:
        $i10 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z10 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wasStreamActiveRecently(int,int)>(5, $i10);

        if $z10 == 0 goto label06;

        return 5;

     label06:
        return 3;

     label07:
        $i2 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wasStreamActiveRecently(int,int)>(5, $i2);

        if $z2 == 0 goto label08;

        return 5;

     label08:
        $i3 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z3 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wasStreamActiveRecently(int,int)>(2, $i3);

        if $z3 == 0 goto label09;

        return 2;

     label09:
        $z4 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isInCommunication()>();

        if $z4 == 0 goto label11;

        $i8 = staticinvoke <android.media.AudioSystem: int getForceUse(int)>(0);

        if $i8 != 3 goto label10;

        return 6;

     label10:
        return 0;

     label11:
        $i4 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z5 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(5, $i4);

        if $z5 == 0 goto label12;

        return 5;

     label12:
        $i5 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z6 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(2, $i5);

        if $z6 == 0 goto label13;

        return 2;

     label13:
        if i0 != -2147483648 goto label16;

        $i6 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z7 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(5, $i6);

        if $z7 == 0 goto label14;

        return 5;

     label14:
        $i7 = <com.android.server.audio.AudioService: int sStreamOverrideDelayMs>;

        $z8 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(2, $i7);

        if $z8 == 0 goto label15;

        return 2;

     label15:
        return 3;

     label16:
        return i0;
    }

    private java.util.Set getAudioHalPids()
    {
        com.android.server.audio.AudioService r0;
        java.util.Iterator r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        java.lang.Integer $r5;
        android.os.RemoteException $r6;
        java.util.HashSet $r7, r10;
        android.hidl.manager.V1_0.IServiceManager r8;
        java.util.ArrayList r9;
        android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo r11;

        r0 := @this: com.android.server.audio.AudioService;

     label1:
        r8 = staticinvoke <android.hidl.manager.V1_0.IServiceManager: android.hidl.manager.V1_0.IServiceManager getService()>();

     label2:
        r9 = interfaceinvoke r8.<android.hidl.manager.V1_0.IServiceManager: java.util.ArrayList debugDump()>();

        r10 = new java.util.HashSet;

        specialinvoke r10.<java.util.HashSet: void <init>()>();

        r1 = virtualinvoke r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo) $r2;

        $i0 = r11.<android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo: int pid>;

        if $i0 == -1 goto label4;

        $r3 = r11.<android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo: java.lang.String interfaceName>;

        if $r3 == null goto label4;

        $r4 = r11.<android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo: java.lang.String interfaceName>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("android.hardware.audio");

        if $z1 == 0 goto label4;

        $i1 = r11.<android.hidl.manager.V1_0.IServiceManager$InstanceDebugInfo: int pid>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r10.<java.util.HashSet: boolean add(java.lang.Object)>($r5);

     label4:
        goto label3;

     label5:
        return r10;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        return $r7;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    private android.media.audiopolicy.AudioVolumeGroup getAudioVolumeGroupById(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i2;
        android.media.audiopolicy.AudioVolumeGroup r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        java.lang.Object $r8;
        java.util.Iterator r9;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r2 = staticinvoke <android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioVolumeGroups()>();

        r9 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.media.audiopolicy.AudioVolumeGroup) $r8;

        $i2 = virtualinvoke r1.<android.media.audiopolicy.AudioVolumeGroup: int getId()>();

        if $i2 != i0 goto label2;

        return r1;

     label2:
        goto label1;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invalid volume group id: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requested");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r7);

        return null;
    }

    private int getCurrentUserId()
    {
        com.android.server.audio.AudioService r0;
        long l0;
        int i1;
        android.app.IActivityManager $r1;
        android.content.pm.UserInfo $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.audio.AudioService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = interfaceinvoke $r1.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        i1 = $r2.<android.content.pm.UserInfo: int id>;

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i1;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int getDevicesForStream(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService: int getDevicesForStream(int,boolean)>(i0, 1);

        return $i1;
    }

    private int getDevicesForStream(int, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r2;
        com.android.server.audio.AudioService$VolumeStreamState $r3;
        java.lang.Throwable $r4;
        int i0, i1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i0);

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r3 = $r2[i0];

        i1 = virtualinvoke $r3.<com.android.server.audio.AudioService$VolumeStreamState: int observeDevicesForStream_syncVSS(boolean)>(z0);

        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label2:
        return i1;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private int getHearingAidStreamType(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 == 2 goto label2;

        if i0 == 3 goto label2;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.concurrent.atomic.AtomicBoolean mVoiceActive>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 3;

     label2:
        return 0;
    }

    private int getIndexRange(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1, $r3;
        com.android.server.audio.AudioService$VolumeStreamState $r2, $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: int getMaxIndex()>();

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i0];

        $i2 = virtualinvoke $r4.<com.android.server.audio.AudioService$VolumeStreamState: int getMinIndex()>();

        $i3 = $i1 - $i2;

        return $i3;
    }

    private int getNewRingerMode(int, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        boolean $z0, $z1, $z2;
        android.media.VolumePolicy $r1;
        byte b7;

        r0 := @this: com.android.server.audio.AudioService;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeExternal()>();

        return $i5;

     label1:
        $i2 = i1 & 2;

        if $i2 != 0 goto label3;

        $i3 = virtualinvoke r0.<com.android.server.audio.AudioService: int getUiSoundsStreamType()>();

        if i6 != $i3 goto label2;

        goto label3;

     label2:
        $i4 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeExternal()>();

        return $i4;

     label3:
        if i0 != 0 goto label7;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z1 == 0 goto label4;

        b7 = 1;

        goto label6;

     label4:
        $r1 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        $z2 = $r1.<android.media.VolumePolicy: boolean volumeDownToEnterSilent>;

        if $z2 == 0 goto label5;

        b7 = 0;

        goto label6;

     label5:
        b7 = 2;

     label6:
        goto label8;

     label7:
        b7 = 2;

     label8:
        return b7;
    }

    private android.media.projection.IMediaProjectionManager getProjectionService()
    {
        com.android.server.audio.AudioService r0;
        android.media.projection.IMediaProjectionManager $r1, $r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.media.projection.IMediaProjectionManager mProjectionService>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media_projection");

        $r4 = staticinvoke <android.media.projection.IMediaProjectionManager$Stub: android.media.projection.IMediaProjectionManager asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.audio.AudioService: android.media.projection.IMediaProjectionManager mProjectionService> = $r4;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: android.media.projection.IMediaProjectionManager mProjectionService>;

        return $r2;
    }

    private int getSafeUsbMediaVolumeIndex()
    {
        com.android.server.audio.AudioService r0;
        float f0, f1, $f2, $f3;
        int[] $r1, $r2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        int $i0, $i1, $i2, $i3, i6, i7, i8, $i9;
        boolean $z0;
        byte $b4, $b5;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME>;

        i6 = $r1[3];

        $r2 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        i7 = $r2[3];

        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r4.<android.content.res.Resources: int getInteger(int)>(17694883);

        $f2 = (float) $i0;

        $f3 = $f2 / 100.0F;

        r0.<com.android.server.audio.AudioService: float mSafeUsbMediaVolumeDbfs> = $f3;

     label1:
        i8 = i6;

        $i1 = i7 - i6;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        if $i2 <= 1 goto label6;

        $i3 = i7 + i6;

        i8 = $i3 / 2;

        f0 = staticinvoke <android.media.AudioSystem: float getStreamVolumeDB(int,int,int)>(3, i8, 67108864);

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label2;

        i8 = i6;

        goto label6;

     label2:
        f1 = r0.<com.android.server.audio.AudioService: float mSafeUsbMediaVolumeDbfs>;

        $b4 = f0 cmpl f1;

        if $b4 != 0 goto label3;

        goto label6;

     label3:
        $b5 = f0 cmpg f1;

        if $b5 >= 0 goto label4;

        i6 = i8;

        goto label5;

     label4:
        i7 = i8;

     label5:
        goto label1;

     label6:
        $i9 = i8 * 10;

        return $i9;
    }

    private static java.lang.String getSettingsNameForDeviceVolumeBehavior(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r5;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioService_DeviceVolumeBehavior_");

        $r3 = staticinvoke <android.media.AudioSystem: java.lang.String getOutputDeviceName(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private int getVolumeGroupIdForAttributes(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1, $r3;
        int i0, $i1;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "attributes must not be null");

        i0 = specialinvoke r0.<com.android.server.audio.AudioService: int getVolumeGroupIdForAttributesInt(android.media.AudioAttributes)>(r1);

        if i0 == -1 goto label1;

        return i0;

     label1:
        $r3 = <android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes sDefaultAttributes>;

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService: int getVolumeGroupIdForAttributesInt(android.media.AudioAttributes)>($r3);

        return $i1;
    }

    private int getVolumeGroupIdForAttributesInt(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1;
        java.util.Iterator r2;
        int i0;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.media.audiopolicy.AudioProductStrategy $r6;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "attributes must not be null");

        $r4 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: java.util.List getAudioProductStrategies()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.media.audiopolicy.AudioProductStrategy) $r5;

        i0 = virtualinvoke $r6.<android.media.audiopolicy.AudioProductStrategy: int getVolumeGroupIdForAudioAttributes(android.media.AudioAttributes)>(r1);

        if i0 == -1 goto label2;

        return i0;

     label2:
        goto label1;

     label3:
        return -1;
    }

    private void handleAudioEffectBroadcast(android.content.Context, android.content.Intent)
    {
        com.android.server.audio.AudioService r0;
        android.content.Intent r1;
        android.content.pm.PackageManager $r3;
        int $i1;
        java.lang.Object $r4;
        android.content.pm.ActivityInfo $r5, $r6, $r8;
        java.lang.String $r7, $r9, $r15, r17;
        android.os.UserHandle $r11;
        java.lang.StringBuilder $r12;
        android.content.Context r16;
        java.util.List r19;
        android.content.pm.ResolveInfo r20;

        r0 := @this: com.android.server.audio.AudioService;

        r16 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.Intent;

        r17 = virtualinvoke r1.<android.content.Intent: java.lang.String getPackage()>();

        if r17 == null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("effect broadcast already targeted to ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r15);

        return;

     label1:
        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(32);

        $r3 = virtualinvoke r16.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r19 = virtualinvoke $r3.<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>(r1, 0);

        if r19 == null goto label2;

        $i1 = interfaceinvoke r19.<java.util.List: int size()>();

        if $i1 == 0 goto label2;

        $r4 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(0);

        r20 = (android.content.pm.ResolveInfo) $r4;

        if r20 == null goto label2;

        $r5 = r20.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r5 == null goto label2;

        $r6 = r20.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = $r6.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        if $r7 == null goto label2;

        $r8 = r20.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = $r8.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r9);

        $r11 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r16.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r11);

        return;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "couldn\'t find receiver package for effect intent");

        return;
    }

    private void handleConfigurationChanged(android.content.Context)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, z1, $z2, z3;
        android.content.res.Resources $r1;
        com.android.server.audio.AudioService$AudioHandler $r2, $r5;
        com.android.server.audio.AudioService$VolumeStreamState[] $r3, $r6, $r7;
        com.android.server.audio.AudioService$VolumeStreamState $r4, $r8, r15;
        int $i1, $i2, $i3, $i4, $i5, $i8;
        java.lang.Exception $r9;
        java.lang.Throwable $r10, $r11;
        android.content.Context r12;
        android.content.res.Configuration r13;
        java.lang.Object r14;
        com.android.server.audio.AudioDeviceBroker r17;
        byte b7;
        com.android.server.audio.AudioService$VolumeController $r18;

        r0 := @this: com.android.server.audio.AudioService;

        r12 := @parameter0: android.content.Context;

     label01:
        $r1 = virtualinvoke r12.<android.content.Context: android.content.res.Resources getResources()>();

        r13 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r2, 12, 0, 0, 0, "AS.AudioService", 0);

        z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean readCameraSoundForced()>();

        r14 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r14;

     label02:
        z1 = r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced>;

     label03:
        if z0 == z1 goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced> = z0;

     label06:
        if z3 == 0 goto label23;

     label07:
        $z2 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z2 != 0 goto label19;

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label08:
        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r15 = $r6[7];

     label09:
        if z0 == 0 goto label12;

     label10:
        virtualinvoke r15.<com.android.server.audio.AudioService$VolumeStreamState: void setAllIndexesToMax()>();

        $i4 = r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams>;

        $i5 = $i4 & -129;

        r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams> = $i5;

     label11:
        goto label13;

     label12:
        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = $r7[1];

        virtualinvoke r15.<com.android.server.audio.AudioService$VolumeStreamState: void setAllIndexes(com.android.server.audio.AudioService$VolumeStreamState,java.lang.String)>($r8, "AS.AudioService");

        $i1 = r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams>;

        $i2 = $i1 | 128;

        r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams> = $i2;

     label13:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label14:
        $i3 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>($i3, 0);

     label15:
        goto label19;

     label16:
        $r10 := @caughtexception;

     label17:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label18:
        throw $r10;

     label19:
        r17 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

     label20:
        if z0 == 0 goto label21;

        b7 = 11;

        goto label22;

     label21:
        b7 = 0;

     label22:
        virtualinvoke r17.<com.android.server.audio.AudioDeviceBroker: void setForceUse_Async(int,int,java.lang.String)>(4, b7, "handleConfigurationChanged");

        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[7];

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r5, 10, 2, 0, 0, $r4, 0);

     label23:
        exitmonitor r14;

     label24:
        $r18 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        $i8 = virtualinvoke r13.<android.content.res.Configuration: int getLayoutDirection()>();

        virtualinvoke $r18.<com.android.server.audio.AudioService$VolumeController: void setLayoutDirection(int)>($i8);

     label25:
        goto label30;

     label26:
        $r11 := @caughtexception;

     label27:
        exitmonitor r14;

     label28:
        throw $r11;

     label29:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", "Error handling configuration change: ", $r9);

     label30:
        return;

        catch java.lang.Exception from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Exception from label24 to label25 with label29;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Exception from label28 to label29 with label29;
    }

    private boolean hasDeviceVolumeBehavior(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService: int retrieveStoredDeviceVolumeBehavior(int)>(i0);

        if $i1 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasRmtSbmxFullVolDeathHandlerFor(android.os.IBinder)
    {
        com.android.server.audio.AudioService r0;
        android.os.IBinder r1;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler $r5;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mRmtSbmxFullVolDeathHandlers>;

        r2 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler) $r4;

        $z1 = virtualinvoke $r5.<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: boolean isHandlerFor(android.os.IBinder)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    private void initA11yMonitoring()
    {
        com.android.server.audio.AudioService r0;
        android.view.accessibility.AccessibilityManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        r1 = (android.view.accessibility.AccessibilityManager) $r3;

        $z0 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void updateDefaultStreamOverrideDelay(boolean)>($z0);

        $z1 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: boolean isAccessibilityVolumeStreamActive()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void updateA11yVolumeAlias(boolean)>($z1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,android.os.Handler)>(r0, null);

        virtualinvoke r1.<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener,android.os.Handler)>(r0, null);

        return;
    }

    private void initVolumeGroupStates()
    {
        com.android.server.audio.AudioService r0;
        java.util.Iterator r1;
        java.util.List $r2;
        android.util.SparseArray $r3, $r4, $r8;
        int $i0, $i1, i2;
        java.lang.Object $r5, $r7;
        com.android.server.audio.AudioService$VolumeGroupState $r6, $r9;
        java.lang.Throwable $r10;
        boolean $z0;
        android.media.audiopolicy.AudioVolumeGroup r11;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = virtualinvoke r0.<com.android.server.audio.AudioService: java.util.List getAudioVolumeGroups()>();

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.media.audiopolicy.AudioVolumeGroup) $r7;

     label2:
        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidAttributes(android.media.audiopolicy.AudioVolumeGroup)>(r11);

     label3:
        $r8 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $i1 = virtualinvoke r11.<android.media.audiopolicy.AudioVolumeGroup: int getId()>();

        $r9 = new com.android.server.audio.AudioService$VolumeGroupState;

        specialinvoke $r9.<com.android.server.audio.AudioService$VolumeGroupState: void <init>(com.android.server.audio.AudioService,android.media.audiopolicy.AudioVolumeGroup,com.android.server.audio.AudioService$1)>(r0, r11, null);

        virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>($i1, $r9);

        goto label1;

     label4:
        $r10 := @caughtexception;

        goto label1;

     label5:
        i2 = 0;

     label6:
        $r3 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label7;

        $r4 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r6 = (com.android.server.audio.AudioService$VolumeGroupState) $r5;

        virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeGroupState: void applyAllVolumes()>();

        i2 = i2 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private boolean isAlarm(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 != 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isAndroidNPlus(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        android.content.pm.ApplicationInfo $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.audio.AudioService;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r5, 0, $i2);

        i0 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label2:
        if i0 < 24 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $r4 := @caughtexception;

        return 1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    private boolean isFixedVolumeDevice(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.Set $r1;
        java.lang.Integer $r2;
        boolean $z0, $z1;
        com.android.server.audio.RecordingActivityMonitor $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 != 32768 goto label1;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        $z1 = virtualinvoke $r3.<com.android.server.audio.RecordingActivityMonitor: boolean isLegacyRemoteSubmixActive()>();

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isFullVolumeDevice(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.Set $r1;
        java.lang.Integer $r2;
        boolean $z0, $z1;
        com.android.server.audio.RecordingActivityMonitor $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 != 32768 goto label1;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        $z1 = virtualinvoke $r3.<com.android.server.audio.RecordingActivityMonitor: boolean isLegacyRemoteSubmixActive()>();

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.server.audio.AudioService: java.util.Set mFullVolumeDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isMedia(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 != 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isMicrophoneSupposedToBeMuted()
    {
        com.android.server.audio.AudioService r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSwitch>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromRestrictions>;

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromApi>;

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private boolean isMuteAdjust(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 == -100 goto label2;

        if i0 == 100 goto label2;

        if i0 != 101 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isNotificationOrRinger(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 == 5 goto label2;

        if i0 != 2 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isPlatformVoice()
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 = r0.<com.android.server.audio.AudioService: int mPlatformType>;

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isPolicyRegisterAllowed(android.media.audiopolicy.AudioPolicyConfig, boolean, boolean, android.media.projection.IMediaProjection)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13, $z14, z15, z16;
        android.media.projection.IMediaProjection r1;
        java.util.Iterator r2, r17;
        android.media.audiopolicy.AudioMix r3, $r5;
        int $i0, $i1;
        java.lang.Object $r4, $r7;
        android.media.audiopolicy.AudioMixingRule $r6, $r8;
        android.media.AudioFormat $r9;
        java.util.ArrayList $r10, $r11, $r13, r14, r15;
        android.media.audiopolicy.AudioPolicyConfig r12;
        java.lang.String r16;

        r0 := @this: com.android.server.audio.AudioService;

        r12 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: android.media.projection.IMediaProjection;

        z11 = 0;

        z12 = 0;

        z13 = 0;

        if z0 != 0 goto label02;

        if z1 == 0 goto label01;

        goto label02;

     label01:
        $r11 = virtualinvoke r12.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList getMixes()>();

        $z10 = virtualinvoke $r11.<java.util.ArrayList: boolean isEmpty()>();

        if $z10 == 0 goto label03;

        z13 = 1;

        goto label03;

     label02:
        z13 = 1;

     label03:
        $r13 = virtualinvoke r12.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList getMixes()>();

        r2 = virtualinvoke $r13.<java.util.ArrayList: java.util.Iterator iterator()>();

        r14 = null;

     label04:
        $z14 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label10;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.audiopolicy.AudioMix) $r7;

        z15 = z12;

        r15 = r14;

        $r8 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule getRule()>();

        $z8 = virtualinvoke $r8.<android.media.audiopolicy.AudioMixingRule: boolean allowPrivilegedPlaybackCapture()>();

        if $z8 == 0 goto label07;

        z16 = z12 | 1;

        $r9 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        r16 = staticinvoke <android.media.audiopolicy.AudioMix: java.lang.String canBeUsedForPrivilegedCapture(android.media.AudioFormat)>($r9);

        if r16 == null goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", r16);

        return 0;

     label05:
        z15 = z16;

        r15 = r14;

        $z9 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: boolean containsMatchAttributeRuleForUsage(int)>(2);

        if $z9 == 0 goto label07;

        r15 = r14;

        if r14 != null goto label06;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r15 = $r10;

     label06:
        virtualinvoke r15.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        z15 = z16;

     label07:
        $i1 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: int getRouteFlags()>();

        if $i1 != 3 goto label08;

        if r1 == null goto label08;

        z11 = z11 | 1;

        goto label09;

     label08:
        z13 = z13 | 1;

     label09:
        z12 = z15;

        r14 = r15;

        goto label04;

     label10:
        if z12 == 0 goto label11;

        $z6 = specialinvoke r0.<com.android.server.audio.AudioService: boolean callerHasPermission(java.lang.String)>("android.permission.CAPTURE_MEDIA_OUTPUT");

        if $z6 != 0 goto label11;

        $z7 = specialinvoke r0.<com.android.server.audio.AudioService: boolean callerHasPermission(java.lang.String)>("android.permission.CAPTURE_AUDIO_OUTPUT");

        if $z7 != 0 goto label11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Privileged audio capture requires CAPTURE_MEDIA_OUTPUT or CAPTURE_AUDIO_OUTPUT system permission");

        return 0;

     label11:
        if r14 == null goto label14;

        $i0 = virtualinvoke r14.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label14;

        $z4 = specialinvoke r0.<com.android.server.audio.AudioService: boolean callerHasPermission(java.lang.String)>("android.permission.CAPTURE_VOICE_COMMUNICATION_OUTPUT");

        if $z4 != 0 goto label12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Privileged audio capture for voice communication requires CAPTURE_VOICE_COMMUNICATION_OUTPUT system permission");

        return 0;

     label12:
        r17 = virtualinvoke r14.<java.util.ArrayList: java.util.Iterator iterator()>();

     label13:
        $z5 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r4 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.media.audiopolicy.AudioMix) $r4;

        $r6 = virtualinvoke $r5.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule getRule()>();

        virtualinvoke $r6.<android.media.audiopolicy.AudioMixingRule: void setVoiceCommunicationCaptureAllowed(boolean)>(1);

        goto label13;

     label14:
        if z11 == 0 goto label15;

        $z3 = specialinvoke r0.<com.android.server.audio.AudioService: boolean canProjectAudio(android.media.projection.IMediaProjection)>(r1);

        if $z3 != 0 goto label15;

        return 0;

     label15:
        if z13 == 0 goto label16;

        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean callerHasPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $z2 != 0 goto label16;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Can not capture audio without MODIFY_AUDIO_ROUTING");

        return 0;

     label16:
        return 1;
    }

    private boolean isStreamMutedByRingerOrZenMode(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 = r0.<com.android.server.audio.AudioService: int mRingerAndZenModeMutedStreams>;

        z0 = 1;

        $i2 = 1 << i0;

        $i3 = i1 & $i2;

        if $i3 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isSupportedSystemUsage(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, i3;
        java.lang.Object r1;
        int[] $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSupportedSystemUsagesLock>;

        entermonitor r1;

        i3 = 0;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages>;

        $i1 = lengthof $r3;

        if i3 >= $i1 goto label4;

        $r4 = r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages>;

        $i2 = $r4[i3];

        if $i2 != i0 goto label3;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        return 0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private boolean isSystem(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isValidAudioAttributesUsage(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1;
        int i0;
        boolean z0, $z1, $z2, z3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        i0 = virtualinvoke r1.<android.media.AudioAttributes: int getSystemUsage()>();

        z0 = staticinvoke <android.media.AudioAttributes: boolean isSystemUsage(int)>(i0);

        z3 = 1;

        if z0 == 0 goto label3;

        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean callerHasPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isSupportedSystemUsage(int)>(i0);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;

     label3:
        return 1;
    }

    private void killBackgroundUserProcessesWithRecordAudioPermission(android.content.pm.UserInfo)
    {
        com.android.server.audio.AudioService r0;
        android.content.pm.PackageManager r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i7, i8, $i9, $i10;
        android.content.Context $r2;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r3;
        android.content.pm.ParceledListSlice $r4;
        java.lang.Object $r5, $r11;
        android.content.pm.ApplicationInfo $r6, $r10, $r21;
        java.lang.String $r7, $r8, $r9;
        com.android.server.wm.ActivityTaskManagerInternal $r12;
        android.os.RemoteException $r13, $r15;
        android.util.AndroidRuntimeException $r14;
        android.content.pm.UserInfo r16;
        android.content.ComponentName r17;
        android.content.pm.IPackageManager r18;
        java.util.List r19;
        android.content.pm.PackageInfo r20;
        android.app.IActivityManager $r22;

        r0 := @this: com.android.server.audio.AudioService;

        r16 := @parameter0: android.content.pm.UserInfo;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r17 = null;

        $z0 = virtualinvoke r16.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 != 0 goto label01;

        $r11 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r12 = (com.android.server.wm.ActivityTaskManagerInternal) $r11;

        $i5 = r16.<android.content.pm.UserInfo: int id>;

        r17 = virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerInternal: android.content.ComponentName getHomeActivityForUser(int)>($i5);

     label01:
        r18 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        i7 = r16.<android.content.pm.UserInfo: int id>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "android.permission.RECORD_AUDIO";

        $r4 = interfaceinvoke r18.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>($r3, 0, i7);

        r19 = virtualinvoke $r4.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label02:
        $i1 = interfaceinvoke r19.<java.util.List: int size()>();

        i8 = $i1 - 1;

     label03:
        if i8 < 0 goto label10;

        $r5 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i8);

        r20 = (android.content.pm.PackageInfo) $r5;

        $r6 = r20.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r6.<android.content.pm.ApplicationInfo: int uid>;

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i2);

        if $i3 >= 10000 goto label04;

        goto label09;

     label04:
        $r7 = r20.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $i4 = virtualinvoke r1.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS", $r7);

        if $i4 != 0 goto label05;

        goto label09;

     label05:
        if r17 == null goto label06;

        $r8 = r20.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r9 = virtualinvoke r17.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label06;

        $r10 = r20.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z2 = virtualinvoke $r10.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z2 == 0 goto label06;

        goto label09;

     label06:
        $r21 = r20.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r21.<android.content.pm.ApplicationInfo: int uid>;

        $r22 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i9 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $i10 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        interfaceinvoke $r22.<android.app.IActivityManager: void killUid(int,int,java.lang.String)>($i9, $i10, "killBackgroundUserProcessesWithAudioRecordPermission");

     label07:
        goto label09;

     label08:
        $r15 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", "Error calling killUid", $r15);

     label09:
        i8 = i8 + -1;

        goto label03;

     label10:
        return;

     label11:
        $r13 := @caughtexception;

        $r14 = new android.util.AndroidRuntimeException;

        specialinvoke $r14.<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>($r13);

        throw $r14;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label06 to label07 with label08;
    }

    static boolean lambda$ensureValidAttributes$0(android.media.AudioAttributes)
    {
        android.media.AudioAttributes r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: android.media.AudioAttributes;

        $r1 = <android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes sDefaultAttributes>;

        $z0 = virtualinvoke r0.<android.media.AudioAttributes: boolean equals(java.lang.Object)>($r1);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public static java.lang.String makeAlsaAddressString(int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("card=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";device=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private void maybeSendSystemAudioStatusCommand(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2, $z3;
        long l0;
        android.hardware.hdmi.HdmiAudioSystemClient $r1, $r2;
        int $i1, $i2;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiAudioSystemClient mHdmiAudioSystemClient>;

        if $r1 == null goto label2;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        if $z1 == 0 goto label2;

        $z2 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecVolumeControlEnabled>;

        if $z2 != 0 goto label1;

        goto label2;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiAudioSystemClient mHdmiAudioSystemClient>;

        $i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getStreamVolume(int)>(3);

        $i2 = virtualinvoke r0.<com.android.server.audio.AudioService: int getStreamMaxVolume(int)>(3);

        $z3 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isStreamMute(int)>(3);

        virtualinvoke $r2.<android.hardware.hdmi.HdmiAudioSystemClient: void sendReportAudioStatusCecCommand(boolean,int,int,boolean)>(z0, $i1, $i2, $z3);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label2:
        return;
    }

    private boolean maybeVibrate(android.os.VibrationEffect, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        android.os.VibrationEffect r1;
        java.lang.String r2, $r7;
        boolean $z0, z1;
        android.content.Context $r3, $r6;
        android.content.ContentResolver $r4;
        int $i0, $i1;
        android.os.Vibrator $r5;
        android.media.AudioAttributes $r8;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.os.VibrationEffect;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r4, "haptic_feedback_enabled", 0, -2);

        if $i0 != 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        if z1 == 0 goto label4;

        return 0;

     label4:
        if r1 != null goto label5;

        return 0;

     label5:
        $r5 = r0.<com.android.server.audio.AudioService: android.os.Vibrator mVibrator>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r6 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getOpPackageName()>();

        $r8 = <com.android.server.audio.AudioService: android.media.AudioAttributes VIBRATION_ATTRIBUTES>;

        virtualinvoke $r5.<android.os.Vibrator: void vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)>($i1, $r7, r1, r2, $r8);

        return 1;
    }

    private void muteRingerModeStreams()
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;
        android.app.NotificationManager $r2, $r21;
        com.android.server.audio.AudioService$VolumeStreamState[] $r7, $r10, $r12, $r14;
        com.android.server.audio.AudioService$VolumeStreamState $r8, $r11, $r15, r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i10, i11, i12, i20, i25, i28, i29, i30, i31, i32;
        int[] $r9;
        android.util.SparseIntArray $r13, $r17, $r18;
        com.android.server.audio.AudioService$AudioHandler $r16, r26;
        boolean $z3, $z4, z5, z6, z7, z8, z9, $z10, z11, z12;
        android.content.Context $r19;
        java.lang.Object $r20;
        java.lang.Throwable $r22, $r23, r28;
        java.lang.StringBuilder $r24;

        r0 := @this: com.android.server.audio.AudioService;

        i7 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        $r2 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        if $r2 != null goto label01;

        $r19 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r20 = virtualinvoke $r19.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r21 = (android.app.NotificationManager) $r20;

        r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm> = $r21;

     label01:
        i8 = r0.<com.android.server.audio.AudioService: int mRingerMode>;

        z5 = 1;

        if i8 == 1 goto label03;

        if i8 != 0 goto label02;

        goto label03;

     label02:
        z6 = 0;

        goto label04;

     label03:
        z6 = 1;

     label04:
        if i8 != 1 goto label05;

        $z4 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isBluetoothScoOn()>();

        if $z4 == 0 goto label05;

        z7 = 1;

        goto label06;

     label05:
        z7 = 0;

     label06:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("muteRingerModeStreams() from u/pid:");

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i10 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        r1 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r26 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        if z7 == 0 goto label07;

        i11 = 3;

        goto label08;

     label07:
        i11 = 0;

     label08:
        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r26, 8, 2, 7, i11, r1, 0);

        i12 = i7 - 1;

     label09:
        if i12 < 0 goto label35;

        z8 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isStreamMutedByRingerOrZenMode(int)>(i12);

        if z7 == 0 goto label11;

        if i12 == 2 goto label10;

        goto label11;

     label10:
        z9 = 0;

        goto label12;

     label11:
        z9 = z5;

     label12:
        $z10 = specialinvoke r0.<com.android.server.audio.AudioService: boolean shouldZenMuteStream(int)>(i12);

        if $z10 != 0 goto label14;

        if z6 == 0 goto label13;

        $z3 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isStreamAffectedByRingerMode(int)>(i12);

        if $z3 == 0 goto label13;

        if z9 == 0 goto label13;

        goto label14;

     label13:
        z11 = 0;

        goto label15;

     label14:
        z11 = z5;

     label15:
        if z8 != z11 goto label16;

        z12 = z5;

        goto label34;

     label16:
        if z11 != 0 goto label33;

        $r9 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i3 = $r9[i12];

        if $i3 != 2 goto label32;

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label17:
        $r12 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r27 = $r12[i12];

     label18:
        i20 = 0;

     label19:
        $r13 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: android.util.SparseIntArray access$1900(com.android.server.audio.AudioService$VolumeStreamState)>(r27);

        $i6 = virtualinvoke $r13.<android.util.SparseIntArray: int size()>();

        if i20 >= $i6 goto label26;

     label20:
        $r17 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: android.util.SparseIntArray access$1900(com.android.server.audio.AudioService$VolumeStreamState)>(r27);

        i25 = virtualinvoke $r17.<android.util.SparseIntArray: int keyAt(int)>(i20);

     label21:
        $r18 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: android.util.SparseIntArray access$1900(com.android.server.audio.AudioService$VolumeStreamState)>(r27);

        i28 = virtualinvoke $r18.<android.util.SparseIntArray: int valueAt(int)>(i20);

     label22:
        if i28 != 0 goto label25;

     label23:
        virtualinvoke r27.<com.android.server.audio.AudioService$VolumeStreamState: boolean setIndex(int,int,java.lang.String,boolean)>(10, i25, "AS.AudioService", 1);

     label24:
        goto label25;

     label25:
        i20 = i20 + 1;

        goto label19;

     label26:
        i29 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i12);

        $r16 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r14 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r15 = $r14[i12];

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r16, 1, 2, i29, 0, $r15, 500);

        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label27:
        goto label32;

     label28:
        $r22 := @caughtexception;

        r28 = $r22;

     label29:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label30:
        throw r28;

     label31:
        $r23 := @caughtexception;

        r28 = $r23;

        goto label29;

     label32:
        $r10 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r11 = $r10[i12];

        virtualinvoke $r11.<com.android.server.audio.AudioService$VolumeStreamState: boolean mute(boolean)>(0);

        i30 = r0.<com.android.server.audio.AudioService: int mRingerAndZenModeMutedStreams>;

        z12 = 1;

        $i4 = 1 << i12;

        $i5 = i30 & $i4;

        r0.<com.android.server.audio.AudioService: int mRingerAndZenModeMutedStreams> = $i5;

        goto label34;

     label33:
        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = $r7[i12];

        virtualinvoke $r8.<com.android.server.audio.AudioService$VolumeStreamState: boolean mute(boolean)>(z5);

        $i1 = r0.<com.android.server.audio.AudioService: int mRingerAndZenModeMutedStreams>;

        i32 = (int) z5;

        $i0 = i32 << i12;

        $i2 = $i1 | $i0;

        r0.<com.android.server.audio.AudioService: int mRingerAndZenModeMutedStreams> = $i2;

        z12 = z5;

     label34:
        i31 = i12 - 1;

        z5 = z12;

        i12 = i31;

        goto label09;

     label35:
        return;

        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label23 to label24 with label31;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.lang.Throwable from label29 to label30 with label31;
    }

    private boolean notifyExternalVolumeController(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.audio.AudioService$AudioHandler $r2;
        java.lang.Throwable $r3;
        android.media.audiopolicy.IAudioPolicyCallback r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mExtVolumeControllerLock>;

        entermonitor r1;

     label1:
        r4 = r0.<com.android.server.audio.AudioService: android.media.audiopolicy.IAudioPolicyCallback mExtVolumeController>;

        exitmonitor r1;

     label2:
        if r4 != null goto label3;

        return 0;

     label3:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r2, 22, 2, i0, 0, r4, 0);

        return 1;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void observeDevicesForStreams(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, i3;
        com.android.server.audio.AudioService$VolumeStreamState[] $r2, $r3;
        com.android.server.audio.AudioService$VolumeStreamState $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

        i3 = 0;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $i1 = lengthof $r2;

        if i3 >= $i1 goto label5;

     label2:
        if i3 == i0 goto label4;

     label3:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i3];

        virtualinvoke $r4.<com.android.server.audio.AudioService$VolumeStreamState: int observeDevicesForStream_syncVSS(boolean)>(0);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label6:
        return;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void onAccessoryPlugMediaUnmute(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4;
        android.app.NotificationManager $r1;
        boolean $z0, $z1, $z2;
        java.util.Set $r2;
        java.lang.Integer $r3;
        com.android.server.audio.AudioService$VolumeStreamState[] $r4, $r6, $r8;
        com.android.server.audio.AudioService$VolumeStreamState $r5, $r7, $r9;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        $i1 = virtualinvoke $r1.<android.app.NotificationManager: int getZenMode()>();

        if $i1 == 2 goto label1;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isStreamMutedByRingerOrZenMode(int)>(3);

        if $z0 != 0 goto label1;

        $r2 = <com.android.server.audio.AudioService: java.util.Set DEVICE_MEDIA_UNMUTED_ON_PLUG_SET>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r5 = $r4[3];

        $z2 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>($r5);

        if $z2 == 0 goto label1;

        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r7 = $r6[3];

        $i2 = virtualinvoke $r7.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i0);

        if $i2 == 0 goto label1;

        $i3 = staticinvoke <android.media.AudioSystem: int getDevicesForStream(int)>(3);

        $i4 = $i3 & i0;

        if $i4 == 0 goto label1;

        $r8 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r9 = $r8[3];

        virtualinvoke $r9.<com.android.server.audio.AudioService$VolumeStreamState: boolean mute(boolean)>(0);

     label1:
        return;
    }

    private void onCheckMusicActive(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, i4, i5;
        java.util.Set $r2;
        java.lang.Integer $r3;
        boolean $z0, $z1;
        com.android.server.audio.AudioService$AudioHandler $r4;
        com.android.server.audio.AudioService$VolumeStreamState[] $r5;
        com.android.server.audio.AudioService$VolumeStreamState $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i1 != 2 goto label5;

        i4 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(3);

        $r2 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r4, 11, 0, 0, 0, r8, 60000);

        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[3];

        i0 = virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i4);

        $z1 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, 0);

        if $z1 == 0 goto label5;

        $i2 = specialinvoke r0.<com.android.server.audio.AudioService: int safeMediaVolumeIndex(int)>(i4);

        if i0 <= $i2 goto label5;

        $i3 = r0.<com.android.server.audio.AudioService: int mMusicActiveMs>;

        i5 = $i3 + 60000;

        r0.<com.android.server.audio.AudioService: int mMusicActiveMs> = i5;

     label2:
        if i5 <= 72000000 goto label4;

     label3:
        specialinvoke r0.<com.android.server.audio.AudioService: void setSafeMediaVolumeEnabled(boolean,java.lang.String)>(1, r8);

        r0.<com.android.server.audio.AudioService: int mMusicActiveMs> = 0;

     label4:
        specialinvoke r0.<com.android.server.audio.AudioService: void saveMusicActiveMs()>();

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void onCheckVolumeCecOnHdmiConnection(int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.hardware.hdmi.HdmiControlManager $r1, $r5;
        java.util.Set $r2;
        java.lang.Integer $r3;
        android.content.ContentResolver $r4;
        android.hardware.hdmi.HdmiPlaybackClient $r6;
        com.android.server.audio.AudioService$AudioHandler $r7;
        java.lang.Throwable $r8, $r9;
        java.lang.String r10;
        java.lang.Object r11, r13;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        if i0 != 1 goto label09;

        $r2 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1024);

        $z3 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z3 == 0 goto label01;

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r7, 11, 0, 0, 0, r10, 60000);

     label01:
        $z4 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isPlatformTelevision()>();

        if $z4 == 0 goto label08;

        specialinvoke r0.<com.android.server.audio.AudioService: void checkAddAllFixedVolumeDevices(int,java.lang.String)>(1024, r10);

        r11 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r11;

     label02:
        $r5 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        if $r5 == null goto label03;

        $r6 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient>;

        if $r6 == null goto label03;

        $z5 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecSink>;

        $z6 = $z5 | 0;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateHdmiCecSinkLocked(boolean)>($z6);

     label03:
        exitmonitor r11;

     label04:
        goto label08;

     label05:
        $r9 := @caughtexception;

     label06:
        exitmonitor r11;

     label07:
        throw $r9;

     label08:
        $r4 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEnabledSurroundFormats(android.content.ContentResolver,boolean)>($r4, 1);

        goto label16;

     label09:
        $z0 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isPlatformTelevision()>();

        if $z0 == 0 goto label16;

        r13 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r13;

     label10:
        $r1 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        if $r1 == null goto label11;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecSink>;

        $z2 = $z1 | 0;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateHdmiCecSinkLocked(boolean)>($z2);

     label11:
        exitmonitor r13;

     label12:
        goto label16;

     label13:
        $r8 := @caughtexception;

     label14:
        exitmonitor r13;

     label15:
        throw $r8;

     label16:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void onConfigureSafeVolume(boolean, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.content.Context $r2, $r5, $r7;
        android.content.res.Resources $r3, $r6, $r8;
        android.content.res.Configuration $r4;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.Throwable $r9;
        java.lang.String r10;
        byte b9;
        com.android.server.audio.AudioService$AudioHandler $r11;

        r0 := @this: com.android.server.audio.AudioService;

        z2 := @parameter0: boolean;

        r10 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        i0 = $r4.<android.content.res.Configuration: int mcc>;

        $i2 = r0.<com.android.server.audio.AudioService: int mMcc>;

        if $i2 != i0 goto label03;

        $i8 = r0.<com.android.server.audio.AudioService: int mMcc>;

        if $i8 != 0 goto label16;

     label02:
        if z2 == 0 goto label16;

     label03:
        $r5 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r6.<android.content.res.Resources: int getInteger(int)>(17694882);

        $i4 = $i3 * 10;

        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeIndex> = $i4;

        $i5 = specialinvoke r0.<com.android.server.audio.AudioService: int getSafeUsbMediaVolumeIndex()>();

        r0.<com.android.server.audio.AudioService: int mSafeUsbMediaVolumeIndex> = $i5;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("audio.safemedia.force", 0);

        if $z0 != 0 goto label06;

        $r7 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891514);

        if $z1 == 0 goto label05;

     label04:
        goto label06;

     label05:
        z3 = 0;

        goto label07;

     label06:
        z3 = 1;

     label07:
        z4 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("audio.safemedia.bypass", 0);

     label08:
        if z3 == 0 goto label13;

        if z4 != 0 goto label13;

        b9 = 3;

     label09:
        $i6 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i6 == 2 goto label15;

        $i7 = r0.<com.android.server.audio.AudioService: int mMusicActiveMs>;

        if $i7 != 0 goto label11;

        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState> = 3;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceSafeMediaVolume(java.lang.String)>(r10);

     label10:
        b9 = 3;

        goto label15;

     label11:
        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState> = 2;

     label12:
        b9 = 3;

        goto label15;

     label13:
        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState> = 1;

     label14:
        b9 = 1;

     label15:
        r0.<com.android.server.audio.AudioService: int mMcc> = i0;

        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r11, 14, 2, b9, 0, null, 0);

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r9 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private void onDispatchAudioServerStateChange(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1;
        java.util.HashMap r1, $r2;
        java.util.Collection $r3;
        java.lang.Object $r4;
        android.media.IAudioServerStateDispatcher $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        java.util.Iterator r8;
        com.android.server.audio.AudioService$AsdProxy r9;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r8 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.server.audio.AudioService$AsdProxy) $r4;

     label03:
        $r5 = virtualinvoke r9.<com.android.server.audio.AudioService$AsdProxy: android.media.IAudioServerStateDispatcher callback()>();

        interfaceinvoke $r5.<android.media.IAudioServerStateDispatcher: void dispatchAudioServerStateChange(boolean)>(z0);

     label04:
        goto label07;

     label05:
        $r7 := @caughtexception;

     label06:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", "Could not call dispatchAudioServerStateChange()", $r7);

     label07:
        goto label02;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void onDynPolicyMixStateUpdate(java.lang.String, int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.HashMap r1, $r4;
        com.android.server.audio.AudioService$AudioPolicyProxy r2;
        java.util.Iterator r3, r20;
        boolean z0, $z1, $z2;
        java.util.Collection $r5;
        java.lang.Object $r6, $r8;
        java.util.ArrayList $r7;
        android.media.audiopolicy.AudioMix $r9;
        java.lang.String $r10, $r18, r19;
        android.media.audiopolicy.IAudioPolicyCallback $r11, $r15;
        java.lang.Throwable $r12;
        android.os.RemoteException $r13;
        android.os.IBinder $r16;
        java.lang.StringBuilder r22;

        r0 := @this: com.android.server.audio.AudioService;

        r19 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r6 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.audio.AudioService$AudioPolicyProxy) $r6;

        $r7 = virtualinvoke r2.<com.android.server.audio.AudioService$AudioPolicyProxy: java.util.ArrayList getMixes()>();

        r3 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.media.audiopolicy.AudioMix) $r8;

        $r10 = virtualinvoke $r9.<android.media.audiopolicy.AudioMix: java.lang.String getRegistration()>();

        z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r19);

     label04:
        if z0 == 0 goto label11;

     label05:
        $r11 = r2.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        interfaceinvoke $r11.<android.media.audiopolicy.IAudioPolicyCallback: void notifyMixStateUpdate(java.lang.String,int)>(r19, i0);

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

     label08:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call notifyMixStateUpdate() on IAudioPolicyCallback ");

        $r15 = r2.<com.android.server.audio.AudioService$AudioPolicyProxy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCallback>;

        $r16 = interfaceinvoke $r15.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", $r18, $r13);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        goto label03;

     label12:
        goto label02;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r12 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void onEnableSurroundFormats(java.util.ArrayList)
    {
        com.android.server.audio.AudioService r0;
        java.util.ArrayList r1;
        int[] r2;
        int i0, i1, i2, i4;
        boolean z0;
        java.lang.Integer $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r12;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.util.ArrayList;

        r2 = <android.media.AudioFormat: int[] SURROUND_SOUND_ENCODING>;

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        i1 = r2[i4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        z0 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>($r4);

        i2 = staticinvoke <android.media.AudioSystem: int setSurroundFormatEnabled(int,boolean)>(i1, z0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enable surround format:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AS.AudioService", $r12);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private void onObserveDevicesForAllStreams()
    {
        com.android.server.audio.AudioService r0;

        r0 := @this: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void observeDevicesForStreams(int)>(-1);

        return;
    }

    private void onPlaybackConfigChange(java.util.List)
    {
        com.android.server.audio.AudioService r0;
        java.util.Iterator r1;
        int i0, $i1;
        boolean $z1, $z2, z3;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.lang.Object $r3;
        android.media.AudioAttributes $r4;
        java.util.List r5;
        android.media.AudioPlaybackConfiguration r6;

        r0 := @this: com.android.server.audio.AudioService;

        r5 := @parameter0: java.util.List;

        r1 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        z3 = 0;

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.media.AudioPlaybackConfiguration) $r3;

        $r4 = virtualinvoke r6.<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>();

        i0 = virtualinvoke $r4.<android.media.AudioAttributes: int getUsage()>();

        if i0 == 2 goto label2;

        if i0 != 3 goto label3;

     label2:
        $i1 = virtualinvoke r6.<android.media.AudioPlaybackConfiguration: int getPlayerState()>();

        if $i1 != 2 goto label3;

        z3 = 1;

        goto label4;

     label3:
        goto label1;

     label4:
        $r2 = r0.<com.android.server.audio.AudioService: java.util.concurrent.atomic.AtomicBoolean mVoiceActive>;

        $z2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(z3);

        if $z2 == z3 goto label5;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateHearingAidVolumeOnVoiceActivityUpdate()>();

     label5:
        return;
    }

    private void onSetStreamVolume(int, int, int, int, java.lang.String, boolean)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        int[] $r1;
        com.android.server.audio.AudioService$VolumeStreamState[] $r2;
        java.lang.String r3;
        boolean z1, z2;
        com.android.server.audio.AudioService$VolumeStreamState r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        z1 := @parameter5: boolean;

        $r1 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        i4 = $r1[i0];

        specialinvoke r0.<com.android.server.audio.AudioService: void setStreamVolumeInt(int,int,int,boolean,java.lang.String,boolean)>(i4, i1, i3, 0, r3, z1);

        z2 = 0;

        $i5 = i2 & 2;

        if $i5 != 0 goto label1;

        $i7 = virtualinvoke r0.<com.android.server.audio.AudioService: int getUiSoundsStreamType()>();

        if i4 != $i7 goto label2;

     label1:
        $i6 = specialinvoke r0.<com.android.server.audio.AudioService: int getNewRingerMode(int,int,int)>(i4, i1, i2);

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerMode(int,java.lang.String,boolean)>($i6, "AS.AudioService.onSetStreamVolume", 0);

     label2:
        if i0 == 6 goto label4;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r4 = $r2[i4];

        if i1 != 0 goto label3;

        z2 = 1;

     label3:
        virtualinvoke r4.<com.android.server.audio.AudioService$VolumeStreamState: boolean mute(boolean)>(z2);

     label4:
        return;
    }

    private void onSetVolumeIndexOnDevice(com.android.server.audio.AudioService$DeviceVolumeUpdate)
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$DeviceVolumeUpdate r1;
        com.android.server.audio.AudioService$VolumeStreamState r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.audio.AudioService$VolumeStreamState[] $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r13;
        java.lang.String $r5, $r8, $r11, $r12, $r14, $r17, $r22;
        com.android.server.audio.AudioEventLogger$StringEvent $r10, $r21;
        com.android.server.audio.AudioEventLogger r23, r25;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: com.android.server.audio.AudioService$DeviceVolumeUpdate;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $i1 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: int mStreamType>;

        r2 = $r3[$i1];

        $z0 = virtualinvoke r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: boolean hasVolumeIndex()>();

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: int getVolumeIndex()>();

        $i4 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: int mDevice>;

        $r12 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: java.lang.String mCaller>;

        virtualinvoke r2.<com.android.server.audio.AudioService$VolumeStreamState: boolean setIndex(int,int,java.lang.String,boolean)>(i0, $i4, $r12, 1);

        r23 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: java.lang.String mCaller>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dev:0x");

        $i5 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: int mDevice>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" volIdx:");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = new com.android.server.audio.AudioEventLogger$StringEvent;

        $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r22);

        virtualinvoke r23.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r21);

        goto label2;

     label1:
        r25 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: java.lang.String mCaller>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" update vol on dev:0x");

        $i2 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: int mDevice>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = new com.android.server.audio.AudioEventLogger$StringEvent;

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r11);

        virtualinvoke r25.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r10);

     label2:
        $i3 = r1.<com.android.server.audio.AudioService$DeviceVolumeUpdate: int mDevice>;

        virtualinvoke r0.<com.android.server.audio.AudioService: void setDeviceVolume(com.android.server.audio.AudioService$VolumeStreamState,int)>(r2, $i3);

        return;
    }

    private void onUnmuteStream(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3;
        boolean z0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r2;
        java.lang.Throwable $r3, $r4;
        com.android.server.audio.AudioService$VolumeStreamState r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label01:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r5 = $r2[i0];

        z0 = virtualinvoke r5.<com.android.server.audio.AudioService$VolumeStreamState: boolean mute(boolean)>(0);

        i2 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i0);

        i3 = virtualinvoke r5.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i2);

        virtualinvoke r0.<com.android.server.audio.AudioService: void sendVolumeUpdate(int,int,int,int,int)>(i0, i3, i3, i1, i2);

        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label02:
        if i0 != 3 goto label08;

        if z0 == 0 goto label08;

        r6 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r6;

     label03:
        specialinvoke r0.<com.android.server.audio.AudioService: void maybeSendSystemAudioStatusCommand(boolean)>(1);

        exitmonitor r6;

     label04:
        goto label08;

     label05:
        $r3 := @caughtexception;

     label06:
        exitmonitor r6;

     label07:
        throw $r3;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void onUpdateRingerModeServiceInt()
    {
        com.android.server.audio.AudioService r0;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        $i0 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>($i0, 0);

        return;
    }

    private void persistDeviceVolumeBehavior(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        android.content.ContentResolver $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        $r2 = staticinvoke <com.android.server.audio.AudioService: java.lang.String getSettingsNameForDeviceVolumeBehavior(int)>(i0);

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, $r2, i1, -2);

        return;
    }

    private void queueMsgUnderWakeLock(android.os.Handler, int, int, int, java.lang.Object, int)
    {
        com.android.server.audio.AudioService r0;
        android.os.Handler r1;
        int i0, i1, i2, i3;
        java.lang.Object r2;
        long l4;
        android.os.PowerManager$WakeLock $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        i3 := @parameter5: int;

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r3 = r0.<com.android.server.audio.AudioService: android.os.PowerManager$WakeLock mAudioEventWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r1, i0, 2, i1, i2, r2, i3);

        return;
    }

    private static void readAndSetLowRamDevice()
    {
        int i1;
        android.app.IActivityManager $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        boolean z0;
        android.app.ActivityManager$MemoryInfo r6;
        long l4;

        z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

     label1:
        r6 = new android.app.ActivityManager$MemoryInfo;

        specialinvoke r6.<android.app.ActivityManager$MemoryInfo: void <init>()>();

        $r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r0.<android.app.IActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>(r6);

        l4 = r6.<android.app.ActivityManager$MemoryInfo: long totalMem>;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "Cannot obtain MemoryInfo from ActivityManager, assume low memory device");

        z0 = 1;

        l4 = 1073741824L;

     label4:
        i1 = staticinvoke <android.media.AudioSystem: int setLowRamDevice(boolean,long)>(z0, l4);

        if i1 == 0 goto label5;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioFlinger informed of device\'s low RAM attribute; status ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r4);

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void readAudioSettings(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2, $z3, $z5;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Object r1;
        android.content.ContentResolver $r2;
        com.android.server.audio.AudioService$VolumeStreamState[] $r3;
        int[] $r4;
        java.lang.Throwable $r5, $r6;
        com.android.server.audio.AudioService$VolumeStreamState r7;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void readPersistedSettings()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void readUserRestrictions()>();

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i6 = 0;

     label01:
        if i6 >= i0 goto label11;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r7 = $r3[i6];

        if z0 == 0 goto label02;

        $r4 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i5 = $r4[i6];

        if $i5 != 3 goto label02;

        goto label07;

     label02:
        virtualinvoke r7.<com.android.server.audio.AudioService$VolumeStreamState: void readSettings()>();

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label03:
        $z1 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>(r7);

        if $z1 == 0 goto label06;

        $z2 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isStreamAffectedByMute(int)>(i6);

        if $z2 != 0 goto label04;

        $z5 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isStreamMutedByRingerOrZenMode(int)>(i6);

        if $z5 == 0 goto label05;

     label04:
        $z3 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        if $z3 == 0 goto label06;

     label05:
        staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1002(com.android.server.audio.AudioService$VolumeStreamState,boolean)>(r7, 0);

     label06:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label07:
        i6 = i6 + 1;

        goto label01;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label10:
        throw $r5;

     label11:
        $i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>($i1, 0);

        specialinvoke r0.<com.android.server.audio.AudioService: void checkAllFixedVolumeDevices()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void checkAllAliasStreamVolumes()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void checkMuteAffectedStreams()>();

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r1;

     label12:
        $r2 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "unsafe_volume_music_active_ms", 0, -2);

        $i3 = staticinvoke <android.util.MathUtils: int constrain(int,int,int)>($i2, 0, 72000000);

        r0.<com.android.server.audio.AudioService: int mMusicActiveMs> = $i3;

        $i4 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i4 != 3 goto label13;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceSafeMediaVolume(java.lang.String)>("AS.AudioService");

     label13:
        exitmonitor r1;

     label14:
        specialinvoke r0.<com.android.server.audio.AudioService: void readVolumeGroupsSettings()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void restoreDeviceVolumeBehavior()>();

        return;

     label15:
        $r6 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private boolean readCameraSoundForced()
    {
        com.android.server.audio.AudioService r0;
        boolean $z0, $z1, z2;
        android.content.Context $r1;
        android.content.res.Resources $r2;

        r0 := @this: com.android.server.audio.AudioService;

        z2 = 0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("audio.camerasound.force", 0);

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891389);

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

     label2:
        return z2;
    }

    private void readDockAudioSettings(android.content.ContentResolver)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String $r1;
        android.content.ContentResolver r2;
        byte b1;
        boolean z0;
        com.android.server.audio.AudioService$AudioHandler r3;

        r0 := @this: com.android.server.audio.AudioService;

        r2 := @parameter0: android.content.ContentResolver;

        b1 = 0;

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r2, "dock_audio_media_enabled", 0);

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.audio.AudioService: boolean mDockAudioMediaEnabled> = z0;

        r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        if z0 == 0 goto label3;

        b1 = 8;

        goto label3;

     label3:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>("readDockAudioSettings");

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r3, 8, 2, 3, b1, $r1, 0);

        return;
    }

    private void readPersistedSettings()
    {
        com.android.server.audio.AudioService r0;
        int i1, $i2, $i4, $i5, $i6, i8, i9, $i10, i12;
        java.lang.Object r1;
        com.android.server.audio.SystemServerAdapter $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z9;
        com.android.server.audio.AudioService$VolumeController $r3;
        java.lang.Throwable $r4;
        android.content.ContentResolver r5;
        byte b11, b13;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer>;

        $z0 = virtualinvoke $r2.<com.android.server.audio.SystemServerAdapter: boolean isPrivileged()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r5 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r5, "mode_ringer", 2);

        i8 = i1;

        $z1 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isValidRingerMode(int)>(i1);

        if $z1 != 0 goto label02;

        i8 = 2;

     label02:
        i9 = i8;

        if i8 != 1 goto label03;

        i9 = i8;

        $z9 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z9 != 0 goto label03;

        i9 = 0;

     label03:
        if i9 == i1 goto label04;

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r5, "mode_ringer", i9);

     label04:
        $z2 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        if $z2 != 0 goto label05;

        $z7 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z7 == 0 goto label06;

     label05:
        i9 = 2;

     label06:
        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label07:
        r0.<com.android.server.audio.AudioService: int mRingerMode> = i9;

        $i10 = r0.<com.android.server.audio.AudioService: int mRingerModeExternal>;

        if $i10 != -1 goto label08;

        r0.<com.android.server.audio.AudioService: int mRingerModeExternal> = i9;

     label08:
        $z3 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z3 == 0 goto label10;

     label09:
        b11 = 2;

        goto label11;

     label10:
        b11 = 0;

     label11:
        i12 = staticinvoke <android.media.AudioSystem: int getValueForVibrateSetting(int,int,int)>(0, 1, b11);

        r0.<com.android.server.audio.AudioService: int mVibrateSetting> = i12;

     label12:
        $z4 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z4 == 0 goto label14;

     label13:
        b13 = 2;

        goto label15;

     label14:
        b13 = 0;

     label15:
        $i2 = staticinvoke <android.media.AudioSystem: int getValueForVibrateSetting(int,int,int)>(i12, 0, b13);

        r0.<com.android.server.audio.AudioService: int mVibrateSetting> = $i2;

        specialinvoke r0.<com.android.server.audio.AudioService: boolean updateRingerAndZenModeAffectedStreams()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void readDockAudioSettings(android.content.ContentResolver)>(r5);

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEncodedSurroundMode(android.content.ContentResolver,java.lang.String)>(r5, "readPersistedSettings");

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEnabledSurroundFormats(android.content.ContentResolver,boolean)>(r5, 1);

        specialinvoke r0.<com.android.server.audio.AudioService: void updateAssistantUId(boolean)>(1);

        $z6 = r0.<com.android.server.audio.AudioService: boolean mRttEnabled>;

        staticinvoke <android.media.AudioSystem: int setRttEnabled(boolean)>($z6);

        exitmonitor r1;

     label16:
        $i4 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r5, "mute_streams_affected", 111, -2);

        r0.<com.android.server.audio.AudioService: int mMuteAffectedStreams> = $i4;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateMasterMono(android.content.ContentResolver)>(r5);

        specialinvoke r0.<com.android.server.audio.AudioService: void updateMasterBalance(android.content.ContentResolver)>(r5);

        $i5 = r0.<com.android.server.audio.AudioService: int mRingerModeExternal>;

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastRingerMode(java.lang.String,int)>("android.media.RINGER_MODE_CHANGED", $i5);

        $i6 = r0.<com.android.server.audio.AudioService: int mRingerMode>;

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastRingerMode(java.lang.String,int)>("android.media.INTERNAL_RINGER_MODE_CHANGED_ACTION", $i6);

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastVibrateSetting(int)>(0);

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastVibrateSetting(int)>(1);

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r3.<com.android.server.audio.AudioService$VolumeController: void loadSettings(android.content.ContentResolver)>(r5);

        return;

     label17:
        $r4 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r4;

        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void readUserRestrictions()
    {
        com.android.server.audio.AudioService r0;
        int i0;
        com.android.server.audio.SystemServerAdapter $r1;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        android.os.UserManagerInternal $r2, $r3, $r4;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer>;

        $z0 = virtualinvoke $r1.<com.android.server.audio.SystemServerAdapter: boolean isPrivileged()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        i0 = specialinvoke r0.<com.android.server.audio.AudioService: int getCurrentUserId()>();

        $r2 = r0.<com.android.server.audio.AudioService: android.os.UserManagerInternal mUserManagerInternal>;

        $z1 = virtualinvoke $r2.<android.os.UserManagerInternal: boolean getUserRestriction(int,java.lang.String)>(i0, "disallow_unmute_device");

        if $z1 != 0 goto label3;

        $r4 = r0.<com.android.server.audio.AudioService: android.os.UserManagerInternal mUserManagerInternal>;

        $z3 = virtualinvoke $r4.<android.os.UserManagerInternal: boolean getUserRestriction(int,java.lang.String)>(i0, "no_adjust_volume");

        if $z3 == 0 goto label2;

        goto label3;

     label2:
        z4 = 0;

        goto label4;

     label3:
        z4 = 1;

     label4:
        $z5 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        if $z5 == 0 goto label5;

        z4 = 0;

        staticinvoke <android.media.AudioSystem: int setMasterVolume(float)>(1.0F);

     label5:
        specialinvoke r0.<com.android.server.audio.AudioService: void setSystemAudioMute(boolean)>(z4);

        staticinvoke <android.media.AudioSystem: int setMasterMute(boolean)>(z4);

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastMasterMuteStatus(boolean)>(z4);

        $r3 = r0.<com.android.server.audio.AudioService: android.os.UserManagerInternal mUserManagerInternal>;

        $z2 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean getUserRestriction(int,java.lang.String)>(i0, "no_unmute_microphone");

        r0.<com.android.server.audio.AudioService: boolean mMicMuteFromRestrictions> = $z2;

        specialinvoke r0.<com.android.server.audio.AudioService: void setMicrophoneMuteNoCallerCheck(int)>(i0);

        return;
    }

    private void readVolumeGroupsSettings()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$VolumeGroupState r1;
        android.util.SparseArray $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i1 = 0;

     label1:
        $r2 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r1 = (com.android.server.audio.AudioService$VolumeGroupState) $r4;

        virtualinvoke r1.<com.android.server.audio.AudioService$VolumeGroupState: void readSettings()>();

        virtualinvoke r1.<com.android.server.audio.AudioService$VolumeGroupState: void applyAllVolumes()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void removeAudioSystemDeviceOutFromFixedVolumeDevices(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.Set $r1;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        return;
    }

    private void removeAudioSystemDeviceOutFromFullVolumeDevices(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.util.Set $r1;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.Set mFullVolumeDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        return;
    }

    private int rescaleIndex(int, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1, $r3, $r5;
        com.android.server.audio.AudioService$VolumeStreamState $r2, $r4, $r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = specialinvoke r0.<com.android.server.audio.AudioService: int getIndexRange(int)>(i1);

        i4 = specialinvoke r0.<com.android.server.audio.AudioService: int getIndexRange(int)>(i2);

        if i3 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "rescaleIndex : index range should not be zero");

        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[i2];

        $i14 = virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeStreamState: int getMinIndex()>();

        return $i14;

     label1:
        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i2];

        $i5 = virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: int getMinIndex()>();

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i1];

        $i6 = virtualinvoke $r4.<com.android.server.audio.AudioService$VolumeStreamState: int getMinIndex()>();

        $i7 = i0 - $i6;

        $i9 = $i7 * i4;

        $i8 = i3 / 2;

        $i10 = $i9 + $i8;

        $i11 = $i10 / i3;

        $i12 = $i5 + $i11;

        return $i12;
    }

    private int rescaleStep(int, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4, i6, i7, i8, i9;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        i8 = specialinvoke r0.<com.android.server.audio.AudioService: int getIndexRange(int)>(i6);

        i9 = specialinvoke r0.<com.android.server.audio.AudioService: int getIndexRange(int)>(i7);

        if i8 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "rescaleStep : index range should not be zero");

        return 0;

     label1:
        $i2 = i0 * i9;

        $i1 = i8 / 2;

        $i3 = $i2 + $i1;

        $i4 = $i3 / i8;

        return $i4;
    }

    private void restoreDeviceVolumeBehavior()
    {
        com.android.server.audio.AudioService r0;
        java.util.Iterator r1;
        int i0, i1;
        java.util.Set $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = <com.android.server.audio.AudioService: java.util.Set sDeviceVolumeBehaviorSupportedDeviceOutSet>;

        r1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i1 = specialinvoke r0.<com.android.server.audio.AudioService: int retrieveStoredDeviceVolumeBehavior(int)>(i0);

        if i1 != -1 goto label2;

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.audio.AudioService: void setDeviceVolumeBehaviorInternal(int,int,java.lang.String)>(i0, i1, "AudioService.restoreDeviceVolumeBehavior()");

        goto label1;

     label3:
        return;
    }

    private void restoreVolumeGroups()
    {
        com.android.server.audio.AudioService r0;
        android.util.SparseArray $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.audio.AudioService$VolumeGroupState $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i1 = 0;

     label1:
        $r1 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r4 = (com.android.server.audio.AudioService$VolumeGroupState) $r3;

        virtualinvoke $r4.<com.android.server.audio.AudioService$VolumeGroupState: void applyAllVolumes()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private int retrieveStoredDeviceVolumeBehavior(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        android.content.ContentResolver $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        $r2 = staticinvoke <com.android.server.audio.AudioService: java.lang.String getSettingsNameForDeviceVolumeBehavior(int)>(i0);

        $i1 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, $r2, -1, -2);

        return $i1;
    }

    private int safeMediaVolumeIndex(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3;
        java.util.Set $r1;
        java.lang.Integer $r2;
        boolean $z0;
        int[] $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i3 = $r3[3];

        return $i3;

     label1:
        if i0 != 67108864 goto label2;

        $i2 = r0.<com.android.server.audio.AudioService: int mSafeUsbMediaVolumeIndex>;

        return $i2;

     label2:
        $i1 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeIndex>;

        return $i1;
    }

    private static java.lang.String safeMediaVolumeStateToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        return null;

     label1:
        return "SAFE_MEDIA_VOLUME_ACTIVE";

     label2:
        return "SAFE_MEDIA_VOLUME_INACTIVE";

     label3:
        return "SAFE_MEDIA_VOLUME_DISABLED";

     label4:
        return "SAFE_MEDIA_VOLUME_NOT_CONFIGURED";
    }

    private void saveMusicActiveMs()
    {
        com.android.server.audio.AudioService r0;
        int $i0;
        com.android.server.audio.AudioService$AudioHandler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $i0 = r0.<com.android.server.audio.AudioService: int mMusicActiveMs>;

        $r2 = virtualinvoke $r1.<com.android.server.audio.AudioService$AudioHandler: android.os.Message obtainMessage(int,int,int)>(17, $i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void sendBroadcastToAll(android.content.Intent)
    {
        com.android.server.audio.AudioService r0;
        long l0;
        com.android.server.audio.SystemServerAdapter $r1;
        boolean $z0;
        android.os.UserHandle $r4;
        android.content.Context $r5;
        java.lang.Throwable $r6;
        android.content.Intent r7;

        r0 := @this: com.android.server.audio.AudioService;

        r7 := @parameter0: android.content.Intent;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SystemServerAdapter mSystemServer>;

        $z0 = virtualinvoke $r1.<com.android.server.audio.SystemServerAdapter: boolean isPrivileged()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r7.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r7.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r7, $r4);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void sendEnabledSurroundFormats(android.content.ContentResolver, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z3, $z5, z6;
        java.lang.String[] r1;
        int i0, i1, i2, $i3, $i4, i6, i7;
        java.util.ArrayList $r3;
        android.content.Context $r4;
        android.content.ContentResolver $r5, r17;
        java.lang.String $r6, $r11, $r16, r18, r19;
        com.android.server.audio.AudioService$AudioHandler $r7;
        java.lang.Integer $r8, $r9, $r10;
        java.lang.Exception $r12;
        java.lang.StringBuilder $r13;
        int[] r20;

        r0 := @this: com.android.server.audio.AudioService;

        r17 := @parameter0: android.content.ContentResolver;

        z0 := @parameter1: boolean;

        $i3 = r0.<com.android.server.audio.AudioService: int mEncodedSurroundMode>;

        if $i3 == 3 goto label01;

        return;

     label01:
        r18 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r17, "encoded_surround_output_enabled_formats");

        if r18 != null goto label02;

        r18 = "";

        goto label02;

     label02:
        if z0 != 0 goto label03;

        $r11 = r0.<com.android.server.audio.AudioService: java.lang.String mEnabledSurroundFormats>;

        $z5 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r18, $r11);

        if $z5 == 0 goto label03;

        return;

     label03:
        r0.<com.android.server.audio.AudioService: java.lang.String mEnabledSurroundFormats> = r18;

        r1 = staticinvoke <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r18, ",");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

        i6 = 0;

     label04:
        if i6 >= i0 goto label15;

        r19 = r1[i6];

     label05:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r19);

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

     label06:
        r20 = <android.media.AudioFormat: int[] SURROUND_SOUND_ENCODING>;

        i2 = lengthof r20;

     label07:
        i7 = 0;

     label08:
        z6 = 0;

        if i7 >= i2 goto label10;

        $i4 = r20[i7];

        if $i4 != i1 goto label09;

        z6 = 1;

        goto label10;

     label09:
        i7 = i7 + 1;

        goto label08;

     label10:
        if z6 == 0 goto label12;

     label11:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z3 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r9);

        if $z3 != 0 goto label12;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid enabled surround format:");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r16);

     label14:
        i6 = i6 + 1;

        goto label04;

     label15:
        $r4 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", $r3);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r5, "encoded_surround_output_enabled_formats", $r6);

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r7, 24, 2, 0, 0, $r3, 0);

        return;

        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Exception from label06 to label07 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    private void sendEncodedSurroundMode(int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r7;
        com.android.server.audio.AudioDeviceBroker $r3;
        java.lang.StringBuilder $r4;
        int i2;
        byte b3;

        r0 := @this: com.android.server.audio.AudioService;

        i2 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i2 == 0 goto label4;

        if i2 == 1 goto label3;

        if i2 == 2 goto label2;

        if i2 == 3 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateSurroundSoundSettings: illegal value ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r7);

        b3 = 16;

        goto label5;

     label1:
        b3 = 15;

        goto label5;

     label2:
        b3 = 14;

        goto label5;

     label3:
        b3 = 13;

        goto label5;

     label4:
        b3 = 0;

     label5:
        if b3 == 16 goto label6;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r3.<com.android.server.audio.AudioDeviceBroker: void setForceUse_Async(int,int,java.lang.String)>(6, b3, r1);

     label6:
        return;
    }

    private void sendEncodedSurroundMode(android.content.ContentResolver, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver r1;
        java.lang.String r2;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "encoded_surround_output", 0);

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEncodedSurroundMode(int,java.lang.String)>($i0, r2);

        return;
    }

    private void sendMasterMuteUpdate(boolean, int)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        int i0, $i1;
        com.android.server.audio.AudioService$VolumeController $r1;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService: int updateFlagsForTvPlatform(int)>(i0);

        virtualinvoke $r1.<com.android.server.audio.AudioService$VolumeController: void postMasterMuteChanged(int)>($i1);

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastMasterMuteStatus(boolean)>(z0);

        return;
    }

    private static void sendMsg(android.os.Handler, int, int, int, int, java.lang.Object, int)
    {
        android.os.Handler r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object r1;
        long l5, l6, $l7;
        boolean $z1;
        android.os.Message $r2;

        r0 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        i4 := @parameter6: int;

        if i1 != 0 goto label1;

        virtualinvoke r0.<android.os.Handler: void removeMessages(int)>(i0);

        goto label2;

     label1:
        if i1 != 1 goto label2;

        $z1 = virtualinvoke r0.<android.os.Handler: boolean hasMessages(int)>(i0);

        if $z1 == 0 goto label2;

        return;

     label2:
        l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l6 = (long) i4;

        $r2 = virtualinvoke r0.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i2, i3, r1);

        $l7 = l5 + l6;

        virtualinvoke r0.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>($r2, $l7);

        return;
    }

    private void sendStickyBroadcastToAll(android.content.Intent)
    {
        com.android.server.audio.AudioService r0;
        long l0;
        android.os.UserHandle $r2;
        android.content.Context $r3;
        java.lang.Throwable $r4;
        android.content.Intent r5;

        r0 := @this: com.android.server.audio.AudioService;

        r5 := @parameter0: android.content.Intent;

        virtualinvoke r5.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r2 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r3.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r5, $r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setDeviceVolumeBehaviorInternal(int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        com.android.server.audio.AudioEventLogger r1;
        java.util.Set $r2;
        java.lang.Integer $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r19, $r24;
        java.lang.IllegalArgumentException $r7, $r17;
        java.lang.String $r8, r18, $r21, $r23, $r26;
        com.android.server.audio.AudioEventLogger$StringEvent $r22;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r18 := @parameter2: java.lang.String;

        $r2 = <com.android.server.audio.AudioService: java.util.Set sDeviceVolumeBehaviorSupportedDeviceOutSet>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label6;

        if i1 == 0 goto label4;

        if i1 == 1 goto label3;

        if i1 == 2 goto label2;

        if i1 == 3 goto label1;

        if i1 == 4 goto label1;

        goto label5;

     label1:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Absolute volume unsupported for now");

        throw $r17;

     label2:
        specialinvoke r0.<com.android.server.audio.AudioService: void removeAudioSystemDeviceOutFromFullVolumeDevices(int)>(i0);

        specialinvoke r0.<com.android.server.audio.AudioService: void addAudioSystemDeviceOutToFixedVolumeDevices(int)>(i0);

        goto label5;

     label3:
        specialinvoke r0.<com.android.server.audio.AudioService: void addAudioSystemDeviceOutToFullVolumeDevices(int)>(i0);

        specialinvoke r0.<com.android.server.audio.AudioService: void removeAudioSystemDeviceOutFromFixedVolumeDevices(int)>(i0);

        goto label5;

     label4:
        specialinvoke r0.<com.android.server.audio.AudioService: void removeAudioSystemDeviceOutFromFullVolumeDevices(int)>(i0);

        specialinvoke r0.<com.android.server.audio.AudioService: void removeAudioSystemDeviceOutFromFixedVolumeDevices(int)>(i0);

     label5:
        r1 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sDeviceLogger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Volume behavior ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for dev=0x");

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from:");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r22 = new com.android.server.audio.AudioEventLogger$StringEvent;

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r23);

        virtualinvoke r1.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r22);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDeviceVolumeBehavior:");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void checkAddAllFixedVolumeDevices(int,java.lang.String)>(i0, $r26);

        return;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported device type ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private void setExtVolumeController(android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        boolean $z0, $z1;
        android.media.audiopolicy.IAudioPolicyCallback $r4, $r5, r8;
        android.os.IBinder $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17891469);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Cannot set external volume controller: device not set for volume keys handled in PhoneWindowManager");

        return;

     label1:
        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mExtVolumeControllerLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<com.android.server.audio.AudioService: android.media.audiopolicy.IAudioPolicyCallback mExtVolumeController>;

        if $r4 == null goto label3;

        $r5 = r0.<com.android.server.audio.AudioService: android.media.audiopolicy.IAudioPolicyCallback mExtVolumeController>;

        $r6 = interfaceinvoke $r5.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $z1 = interfaceinvoke $r6.<android.os.IBinder: boolean pingBinder()>();

        if $z1 != 0 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Cannot set external volume controller: existing controller");

     label3:
        r0.<com.android.server.audio.AudioService: android.media.audiopolicy.IAudioPolicyCallback mExtVolumeController> = r8;

        exitmonitor r1;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void setMasterMuteInternal(boolean, int, java.lang.String, int, int)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String r1;
        android.content.Context $r2;
        android.app.AppOpsManager $r3;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i7 = i1;

        if i1 != 1000 goto label1;

        $i6 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        i7 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i2, $i6);

     label1:
        if z0 != 0 goto label2;

        $r3 = r0.<com.android.server.audio.AudioService: android.app.AppOpsManager mAppOps>;

        $i5 = virtualinvoke $r3.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>(33, i7, r1);

        if $i5 == 0 goto label2;

        return;

     label2:
        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i2 == $i3 goto label3;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i4 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i4 == 0 goto label3;

        return;

     label3:
        specialinvoke r0.<com.android.server.audio.AudioService: void setMasterMuteInternalNoCallerCheck(boolean,int,int)>(z0, i0, i2);

        return;
    }

    private void setMasterMuteInternalNoCallerCheck(boolean, int, int)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1, $i2;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z1 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isPlatformAutomotive()>();

        if $z1 != 0 goto label1;

        $z4 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        if $z4 == 0 goto label1;

        return;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isPlatformAutomotive()>();

        if $z2 == 0 goto label2;

        if i1 == 0 goto label3;

     label2:
        $i2 = specialinvoke r0.<com.android.server.audio.AudioService: int getCurrentUserId()>();

        if $i2 != i1 goto label4;

     label3:
        $z3 = staticinvoke <android.media.AudioSystem: boolean getMasterMute()>();

        if z0 == $z3 goto label4;

        specialinvoke r0.<com.android.server.audio.AudioService: void setSystemAudioMute(boolean)>(z0);

        staticinvoke <android.media.AudioSystem: int setMasterMute(boolean)>(z0);

        specialinvoke r0.<com.android.server.audio.AudioService: void sendMasterMuteUpdate(boolean,int)>(z0, i0);

     label4:
        return;
    }

    private void setMicMuteFromSwitchInput()
    {
        com.android.server.audio.AudioService r0;
        android.hardware.input.InputManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/input/InputManager;");

        r1 = (android.hardware.input.InputManager) $r3;

        $i0 = virtualinvoke r1.<android.hardware.input.InputManager: int isMicMuted()>();

        if $i0 == -1 goto label3;

        $i1 = virtualinvoke r1.<android.hardware.input.InputManager: int isMicMuted()>();

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r0.<com.android.server.audio.AudioService: void setMicrophoneMuteFromSwitch(boolean)>(z0);

     label3:
        return;
    }

    private void setMicrophoneMuteNoCallerCheck(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i2, $i3;
        boolean z0, z1, $z2, $z3, $z5;
        long l1;
        com.android.server.audio.AudioSystemAdapter $r1, $r2, $r3;
        android.media.MediaMetrics$Item $r4, $r5, $r7, $r10, r20, r23;
        android.media.MediaMetrics$Key $r6, $r8, r21, r24;
        java.lang.Integer $r9;
        com.android.server.audio.AudioService$AudioHandler $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r17, r22, r25;
        java.lang.Throwable $r18;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isMicrophoneSupposedToBeMuted()>();

        $i3 = specialinvoke r0.<com.android.server.audio.AudioService: int getCurrentUserId()>();

        if $i3 == i0 goto label01;

        if i0 != 1000 goto label11;

     label01:
        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioSystemAdapter mAudioSystem>;

        z1 = virtualinvoke $r1.<com.android.server.audio.AudioSystemAdapter: boolean isMicrophoneMuted()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioSystemAdapter mAudioSystem>;

        i2 = virtualinvoke $r2.<com.android.server.audio.AudioSystemAdapter: int muteMicrophone(boolean)>(z0);

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioSystemAdapter mAudioSystem>;

        $z2 = virtualinvoke $r3.<com.android.server.audio.AudioSystemAdapter: boolean isMicrophoneMuted()>();

        r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSystemCached> = $z2;

        if i2 == 0 goto label02;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error changing mic mute state to ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" current:");

        $z5 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSystemCached>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r17);

     label02:
        $r4 = new android.media.MediaMetrics$Item;

        specialinvoke $r4.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.mic");

        $r5 = virtualinvoke $r4.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        $r6 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        r20 = virtualinvoke $r5.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r6, "setMicrophoneMuteNoCallerCheck");

        r21 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key MUTE>;

        $z3 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSystemCached>;

        if $z3 == 0 goto label03;

        r22 = "on";

        goto label04;

     label03:
        r22 = "off";

     label04:
        r23 = virtualinvoke r20.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r21, r22);

        r24 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key REQUEST>;

        if z0 == 0 goto label05;

        r25 = "mute";

        goto label06;

     label05:
        r25 = "unmute";

     label06:
        $r7 = virtualinvoke r23.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r24, r25);

        $r8 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key STATUS>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10 = virtualinvoke $r7.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r8, $r9);

        virtualinvoke $r10.<android.media.MediaMetrics$Item: boolean record()>();

        if z0 == z1 goto label10;

     label07:
        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r11, 30, 1, 0, 0, null, 0);

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r18;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label11:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private int setModeInt(int, android.os.IBinder, int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r24;
        java.util.Iterator r2;
        int i0, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i11, i12, i13, i14, i15, i16, i17;
        long l1;
        java.util.ArrayList $r3, $r4, $r12, $r13, $r15, $r16;
        boolean $z0, $z1, $z2;
        com.android.server.audio.AudioServiceEvents$PhoneStateEvent $r5;
        com.android.server.audio.AudioEventLogger $r6;
        int[] $r7, $r10;
        com.android.server.audio.AudioService$VolumeStreamState[] $r8;
        com.android.server.audio.AudioService$VolumeStreamState $r9;
        com.android.server.audio.AudioService$AudioHandler $r11, $r20;
        com.android.server.audio.AudioService$SetModeDeathHandler $r14, r26;
        java.lang.Object $r17, $r18;
        android.os.IBinder $r19, r25, r27;
        java.lang.Throwable $r21;
        android.os.RemoteException $r22;
        java.lang.StringBuilder $r23;

        r0 := @this: com.android.server.audio.AudioService;

        i7 := @parameter0: int;

        r25 := @parameter1: android.os.IBinder;

        i8 := @parameter2: int;

        i9 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        if r25 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "setModeInt() called with null binder");

        return 0;

     label01:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        r2 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r18 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.android.server.audio.AudioService$SetModeDeathHandler) $r18;

        $i5 = virtualinvoke r26.<com.android.server.audio.AudioService$SetModeDeathHandler: int getPid()>();

        if $i5 != i8 goto label07;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $i6 = virtualinvoke r26.<com.android.server.audio.AudioService$SetModeDeathHandler: int getMode()>();

        if $i6 != 3 goto label03;

        $r20 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        virtualinvoke $r20.<com.android.server.audio.AudioService$AudioHandler: void removeEqualMessages(int,java.lang.Object)>(31, r26);

     label03:
        $r19 = virtualinvoke r26.<com.android.server.audio.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>();

        interfaceinvoke $r19.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0);

        r27 = virtualinvoke r26.<com.android.server.audio.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>();

     label04:
        if r25 == r27 goto label05;

        r26 = null;

        goto label05;

     label05:
        goto label09;

     label06:
        $r21 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "link does not exist ...");

        r26 = null;

        goto label09;

     label07:
        goto label02;

     label08:
        r26 = null;

     label09:
        i0 = r0.<com.android.server.audio.AudioService: int mMode>;

     label10:
        if i7 != 0 goto label12;

        $r15 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $z2 = virtualinvoke $r15.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label11;

        $r16 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $r17 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r26 = (com.android.server.audio.AudioService$SetModeDeathHandler) $r17;

        r25 = virtualinvoke r26.<com.android.server.audio.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>();

        i10 = virtualinvoke r26.<com.android.server.audio.AudioService$SetModeDeathHandler: int getMode()>();

        goto label17;

     label11:
        i10 = i7;

        goto label17;

     label12:
        if r26 != null goto label13;

        $r14 = new com.android.server.audio.AudioService$SetModeDeathHandler;

        specialinvoke $r14.<com.android.server.audio.AudioService$SetModeDeathHandler: void <init>(com.android.server.audio.AudioService,android.os.IBinder,int,int,java.lang.String)>(r0, r25, i8, i9, r1);

        r26 = $r14;

        goto label13;

     label13:
        interfaceinvoke r25.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0);

     label14:
        goto label16;

     label15:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setMode() could not link to ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" binder death");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r24);

     label16:
        $r4 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r26);

        virtualinvoke r26.<com.android.server.audio.AudioService$SetModeDeathHandler: void setMode(int)>(i7);

        i10 = i7;

     label17:
        $i11 = r0.<com.android.server.audio.AudioService: int mMode>;

        if i10 == $i11 goto label21;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $i4 = virtualinvoke r0.<com.android.server.audio.AudioService: int getModeOwnerUid()>();

        i12 = staticinvoke <android.media.AudioSystem: int setPhoneState(int,int)>(i10, $i4);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        if i12 != 0 goto label18;

        r0.<com.android.server.audio.AudioService: int mMode> = i10;

        goto label20;

     label18:
        if r26 == null goto label19;

        $r13 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>(r26);

        interfaceinvoke r25.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0);

     label19:
        i7 = 0;

     label20:
        goto label22;

     label21:
        i12 = 0;

     label22:
        if i12 == 0 goto label24;

        $r12 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $z1 = virtualinvoke $r12.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label23;

        goto label24;

     label23:
        goto label10;

     label24:
        if i12 != 0 goto label29;

        if i10 == 0 goto label26;

        i13 = virtualinvoke r0.<com.android.server.audio.AudioService: int getModeOwnerPid()>();

        if i13 != 0 goto label25;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "setMode() different from MODE_NORMAL with empty mode client stack");

     label25:
        goto label27;

     label26:
        i13 = 0;

     label27:
        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mModeLogger>;

        $r5 = new com.android.server.audio.AudioServiceEvents$PhoneStateEvent;

        specialinvoke $r5.<com.android.server.audio.AudioServiceEvents$PhoneStateEvent: void <init>(java.lang.String,int,int,int,int)>(r1, i8, i7, i13, i10);

        virtualinvoke $r6.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r5);

        i14 = specialinvoke r0.<com.android.server.audio.AudioService: int getActiveStreamType(int)>(-2147483648);

        i15 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i14);

        $r8 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r7 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i2 = $r7[i14];

        $r9 = $r8[$i2];

        i16 = virtualinvoke $r9.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i15);

        $r10 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i3 = $r10[i14];

        specialinvoke r0.<com.android.server.audio.AudioService: void setStreamVolumeInt(int,int,int,boolean,java.lang.String,boolean)>($i3, i16, i15, 1, r1, 1);

        specialinvoke r0.<com.android.server.audio.AudioService: void updateStreamVolumeAlias(boolean,java.lang.String)>(1, r1);

        virtualinvoke r0.<com.android.server.audio.AudioService: void updateAbsVolumeMultiModeDevices(int,int)>(i0, i10);

        if i10 != 3 goto label28;

        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r11, 31, 2, 0, 0, r26, 3000);

     label28:
        i17 = i13;

        goto label30;

     label29:
        i17 = 0;

     label30:
        return i17;

        catch java.util.NoSuchElementException from label03 to label04 with label06;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    private void setRingerMode(int, java.lang.String, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2, $z3;
        long l0;
        int i1, i2, $i3, i4, i5, i6;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r14;
        android.media.AudioManagerInternal$RingerModeDelegate $r6, $r8, $r9, $r11;
        android.media.VolumePolicy $r7, $r10;
        java.lang.Throwable $r12, $r13;
        java.lang.Object r15;

        r0 := @this: com.android.server.audio.AudioService;

        i4 := @parameter0: int;

        r14 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        if $z1 != 0 goto label24;

        $z2 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z2 == 0 goto label01;

        goto label24;

     label01:
        if r14 == null goto label23;

        $i3 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i3 == 0 goto label23;

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidRingerMode(int)>(i4);

        if i4 != 1 goto label02;

        $z3 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z3 != 0 goto label02;

        i4 = 0;

        goto label02;

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r15 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r15;

     label04:
        i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        i2 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeExternal()>();

     label05:
        if z0 == 0 goto label12;

     label06:
        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeExt(int)>(i4);

     label07:
        i5 = i4;

     label08:
        $r9 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        if $r9 == null goto label09;

        $r11 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        $r10 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        i5 = interfaceinvoke $r11.<android.media.AudioManagerInternal$RingerModeDelegate: int onSetRingerModeExternal(int,int,java.lang.String,int,android.media.VolumePolicy)>(i2, i4, r14, i1, $r10);

     label09:
        if i5 == i1 goto label17;

     label10:
        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>(i5, 1);

     label11:
        goto label17;

     label12:
        if i4 == i1 goto label14;

     label13:
        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>(i4, 1);

     label14:
        i6 = i4;

     label15:
        $r6 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        if $r6 == null goto label16;

        $r8 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        $r7 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        i6 = interfaceinvoke $r8.<android.media.AudioManagerInternal$RingerModeDelegate: int onSetRingerModeInternal(int,int,java.lang.String,int,android.media.VolumePolicy)>(i1, i4, r14, i2, $r7);

     label16:
        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeExt(int)>(i6);

     label17:
        exitmonitor r15;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label19:
        $r12 := @caughtexception;

     label20:
        exitmonitor r15;

     label21:
        throw $r12;

     label22:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r13;

     label23:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad caller: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label24:
        return;

        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    private void setRingerModeExt(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.audio.AudioService: int mRingerModeExternal>;

        if i0 != $i1 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.audio.AudioService: int mRingerModeExternal> = i0;

        exitmonitor r1;

     label4:
        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastRingerMode(java.lang.String,int)>("android.media.RINGER_MODE_CHANGED", i0);

        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void setRingerModeInt(int, boolean)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        boolean z0, z1;
        java.lang.Object r1;
        com.android.server.audio.AudioService$AudioHandler $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<com.android.server.audio.AudioService: int mRingerMode>;

        if $i1 == i0 goto label03;

     label02:
        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        r0.<com.android.server.audio.AudioService: int mRingerMode> = i0;

        specialinvoke r0.<com.android.server.audio.AudioService: void muteRingerModeStreams()>();

        exitmonitor r1;

     label05:
        if z0 == 0 goto label06;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r3, 3, 0, 0, 0, null, 500);

     label06:
        if z1 == 0 goto label07;

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastRingerMode(java.lang.String,int)>("android.media.INTERNAL_RINGER_MODE_CHANGED_ACTION", i0);

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void setSafeMediaVolumeEnabled(boolean, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3;
        com.android.server.audio.AudioService$AudioHandler $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r4 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r1;

     label01:
        $i0 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i0 == 0 goto label07;

        $i1 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i1 == 1 goto label07;

     label02:
        if z0 == 0 goto label05;

     label03:
        $i3 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i3 != 2 goto label05;

        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState> = 3;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceSafeMediaVolume(java.lang.String)>(r4);

     label04:
        goto label07;

     label05:
        if z0 != 0 goto label07;

     label06:
        $i2 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i2 != 3 goto label07;

        r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState> = 2;

        r0.<com.android.server.audio.AudioService: int mMusicActiveMs> = 1;

        specialinvoke r0.<com.android.server.audio.AudioService: void saveMusicActiveMs()>();

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r2, 11, 0, 0, 0, r4, 60000);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void setStreamVolume(int, int, int, java.lang.String, java.lang.String, int, boolean)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, i23, i24, i25;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.android.server.audio.AudioService$VolumeStreamState r1, $r10;
        java.lang.Object r2, r37;
        int[] $r3, $r7;
        com.android.server.audio.AudioService$VolumeStreamState[] $r4, $r9;
        java.util.Set $r5, $r12, $r20;
        java.lang.Integer $r6, $r13, $r21;
        android.app.AppOpsManager $r8;
        com.android.server.audio.AudioService$VolumeController $r11;
        java.lang.String $r18, r32, r33;
        com.android.server.audio.AudioDeviceBroker $r19, $r22;
        android.app.NotificationManager $r23;
        java.lang.SecurityException $r24;
        java.lang.Throwable $r25, $r26, $r27, $r28, $r29, $r30, $r31, r34;
        java.lang.StringBuilder r35;
        com.android.server.audio.AudioService$StreamVolumeCommand r36;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i17 := @parameter1: int;

        i18 := @parameter2: int;

        r32 := @parameter3: java.lang.String;

        r33 := @parameter4: java.lang.String;

        i19 := @parameter5: int;

        z0 := @parameter6: boolean;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        if $z1 == 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i0);

        $r3 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        i1 = $r3[i0];

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r1 = $r4[i1];

        i2 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i0);

        $r5 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_A2DP_SET>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z2 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z2 != 0 goto label02;

        $i16 = i18 & 64;

        if $i16 == 0 goto label02;

        return;

     label02:
        if i19 != 1000 goto label03;

        $i14 = specialinvoke r0.<com.android.server.audio.AudioService: int getCurrentUserId()>();

        $i15 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i19);

        i19 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i14, $i15);

        goto label03;

     label03:
        $r8 = r0.<com.android.server.audio.AudioService: android.app.AppOpsManager mAppOps>;

        $r7 = <com.android.server.audio.AudioService: int[] STREAM_VOLUME_OPS>;

        $i4 = $r7[i1];

        $i5 = virtualinvoke $r8.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>($i4, i19, r32);

        if $i5 == 0 goto label04;

        return;

     label04:
        $z3 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isAndroidNPlus(java.lang.String)>(r32);

        if $z3 == 0 goto label06;

        $i13 = specialinvoke r0.<com.android.server.audio.AudioService: int getNewRingerMode(int,int,int)>(i1, i17, i18);

        $z7 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wouldToggleZenMode(int)>($i13);

        if $z7 == 0 goto label06;

        $r23 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        $z8 = virtualinvoke $r23.<android.app.NotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>(r32);

        if $z8 == 0 goto label05;

        goto label06;

     label05:
        $r24 = new java.lang.SecurityException;

        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>("Not allowed to change Do Not Disturb state");

        throw $r24;

     label06:
        $z9 = specialinvoke r0.<com.android.server.audio.AudioService: boolean volumeAdjustmentAllowedByDnd(int,int)>(i1, i18);

        if $z9 != 0 goto label07;

        return;

     label07:
        r2 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r2;

     label08:
        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand> = null;

        i3 = virtualinvoke r1.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i2);

        $i6 = i17 * 10;

        i20 = specialinvoke r0.<com.android.server.audio.AudioService: int rescaleIndex(int,int,int)>($i6, i0, i1);

     label09:
        if i1 != 3 goto label15;

     label10:
        $r20 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_A2DP_SET>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z6 = interfaceinvoke $r20.<java.util.Set: boolean contains(java.lang.Object)>($r21);

        if $z6 == 0 goto label15;

     label11:
        $i11 = i18 & 64;

        if $i11 != 0 goto label15;

     label12:
        $r22 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $i12 = i20 / 10;

        virtualinvoke $r22.<com.android.server.audio.AudioDeviceBroker: void postSetAvrcpAbsoluteVolumeIndex(int)>($i12);

     label13:
        goto label15;

     label14:
        $r26 := @caughtexception;

        r34 = $r26;

        goto label44;

     label15:
        if i2 != 134217728 goto label17;

     label16:
        $i9 = virtualinvoke r0.<com.android.server.audio.AudioService: int getHearingAidStreamType()>();

        if i0 != $i9 goto label17;

        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setStreamVolume postSetHearingAidVolumeIndex index=");

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stream=");

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AS.AudioService", $r18);

        $r19 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r19.<com.android.server.audio.AudioDeviceBroker: void postSetHearingAidVolumeIndex(int,int)>(i20, i0);

     label17:
        if i1 != 3 goto label19;

     label18:
        $i8 = virtualinvoke r0.<com.android.server.audio.AudioService: int getStreamMaxVolume(int)>(i0);

        specialinvoke r0.<com.android.server.audio.AudioService: void setSystemAudioVolume(int,int,int,int)>(i3, i20, $i8, i18);

     label19:
        i21 = i18 & -33;

        if i1 != 3 goto label27;

     label20:
        $z4 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFixedVolumeDevice(int)>(i2);

        if $z4 == 0 goto label27;

     label21:
        i22 = i21 | 32;

        if i20 == 0 goto label26;

     label22:
        $i7 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i7 != 3 goto label24;

        $r12 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z5 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z5 == 0 goto label24;

        i23 = specialinvoke r0.<com.android.server.audio.AudioService: int safeMediaVolumeIndex(int)>(i2);

     label23:
        i21 = i22;

        i24 = i23;

        goto label28;

     label24:
        i25 = virtualinvoke r1.<com.android.server.audio.AudioService$VolumeStreamState: int getMaxIndex()>();

     label25:
        i21 = i22;

        i24 = i25;

        goto label28;

     label26:
        i21 = i22;

        i24 = i20;

        goto label28;

     label27:
        i24 = i20;

     label28:
        $z10 = specialinvoke r0.<com.android.server.audio.AudioService: boolean checkSafeMediaVolume(int,int,int)>(i1, i24, i2);

        if $z10 != 0 goto label31;

        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r11.<com.android.server.audio.AudioService$VolumeController: void postDisplaySafeVolumeWarning(int)>(i21);

        r36 = new com.android.server.audio.AudioService$StreamVolumeCommand;

     label29:
        specialinvoke r36.<com.android.server.audio.AudioService$StreamVolumeCommand: void <init>(com.android.server.audio.AudioService,int,int,int,int)>(r0, i0, i24, i21, i2);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand> = r36;

     label30:
        goto label32;

     label31:
        specialinvoke r0.<com.android.server.audio.AudioService: void onSetStreamVolume(int,int,int,int,java.lang.String,boolean)>(i0, i24, i21, i2, r33, z0);

        $r9 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r10 = $r9[i0];

        i24 = virtualinvoke $r10.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i2);

     label32:
        exitmonitor r2;

     label33:
        r37 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r37;

        if i1 != 3 goto label35;

        if i3 == i24 goto label35;

     label34:
        specialinvoke r0.<com.android.server.audio.AudioService: void maybeSendSystemAudioStatusCommand(boolean)>(0);

     label35:
        exitmonitor r37;

     label36:
        virtualinvoke r0.<com.android.server.audio.AudioService: void sendVolumeUpdate(int,int,int,int,int)>(i0, i3, i24, i21, i2);

        return;

     label37:
        $r25 := @caughtexception;

     label38:
        exitmonitor r37;

     label39:
        throw $r25;

     label40:
        $r31 := @caughtexception;

        r34 = $r31;

        goto label44;

     label41:
        $r30 := @caughtexception;

        r34 = $r30;

        goto label44;

     label42:
        $r27 := @caughtexception;

        r34 = $r27;

        goto label44;

     label43:
        $r29 := @caughtexception;

        r34 = $r29;

     label44:
        exitmonitor r2;

     label45:
        throw r34;

     label46:
        $r28 := @caughtexception;

        r34 = $r28;

        goto label44;

        catch java.lang.Throwable from label08 to label09 with label43;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label18 to label19 with label14;
        catch java.lang.Throwable from label20 to label21 with label46;
        catch java.lang.Throwable from label22 to label23 with label46;
        catch java.lang.Throwable from label24 to label25 with label46;
        catch java.lang.Throwable from label28 to label29 with label42;
        catch java.lang.Throwable from label29 to label30 with label41;
        catch java.lang.Throwable from label31 to label32 with label41;
        catch java.lang.Throwable from label32 to label33 with label40;
        catch java.lang.Throwable from label34 to label35 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
        catch java.lang.Throwable from label44 to label45 with label46;
    }

    private void setStreamVolumeInt(int, int, int, boolean, java.lang.String, boolean)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2;
        boolean z0, z1, $z2, $z3;
        java.lang.String r1;
        com.android.server.audio.AudioService$VolumeStreamState r2;
        com.android.server.audio.AudioService$VolumeStreamState[] $r3;
        com.android.server.audio.AudioService$AudioHandler $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.lang.String;

        z1 := @parameter5: boolean;

        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFullVolumeDevice(int)>(i2);

        if $z2 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r2 = $r3[i0];

        $z3 = virtualinvoke r2.<com.android.server.audio.AudioService$VolumeStreamState: boolean setIndex(int,int,java.lang.String,boolean)>(i1, i2, r1, z1);

        if $z3 != 0 goto label2;

        if z0 == 0 goto label3;

     label2:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r4, 0, 2, i2, 0, r2, 0);

     label3:
        return;
    }

    private void setSystemAudioMute(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        long l0;
        android.hardware.hdmi.HdmiControlManager $r2;
        android.hardware.hdmi.HdmiTvClient $r3, $r4;
        java.lang.Throwable $r5, $r6;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        if $r2 == null goto label11;

        $r3 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        if $r3 == null goto label11;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        if $z1 != 0 goto label03;

     label02:
        goto label11;

     label03:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r4 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        virtualinvoke $r4.<android.hardware.hdmi.HdmiTvClient: void setSystemAudioMute(boolean)>(z0);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        throw $r5;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r6 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void setSystemAudioVolume(int, int, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, $i5;
        java.lang.Object r1;
        long l4;
        android.hardware.hdmi.HdmiControlManager $r2;
        android.hardware.hdmi.HdmiTvClient $r3, $r4;
        boolean $z0, $z1;
        java.lang.Throwable $r5, $r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        if $r2 == null goto label13;

        $r3 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        if $r3 == null goto label13;

     label02:
        if i0 == i1 goto label13;

        $i5 = i3 & 256;

        if $i5 != 0 goto label13;

     label03:
        $z0 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        if $z0 == 0 goto label13;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecVolumeControlEnabled>;

        if $z1 != 0 goto label05;

     label04:
        goto label13;

     label05:
        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r4 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        virtualinvoke $r4.<android.hardware.hdmi.HdmiTvClient: void setSystemAudioVolume(int,int,int)>(i0, i1, i2);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label12:
        throw $r6;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r5 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private boolean shouldZenMuteStream(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.app.NotificationManager$Policy r1;
        boolean z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8;
        android.app.NotificationManager $r2, $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        i7 = virtualinvoke $r2.<android.app.NotificationManager: int getZenMode()>();

        z5 = 0;

        if i7 == 1 goto label01;

        return 0;

     label01:
        $r3 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        r1 = virtualinvoke $r3.<android.app.NotificationManager: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>();

        $i1 = r1.<android.app.NotificationManager$Policy: int priorityCategories>;

        $i2 = $i1 & 32;

        if $i2 != 0 goto label02;

        z6 = 1;

        goto label03;

     label02:
        z6 = 0;

     label03:
        $i3 = r1.<android.app.NotificationManager$Policy: int priorityCategories>;

        $i4 = $i3 & 64;

        if $i4 != 0 goto label04;

        z7 = 1;

        goto label05;

     label04:
        z7 = 0;

     label05:
        $i5 = r1.<android.app.NotificationManager$Policy: int priorityCategories>;

        $i6 = $i5 & 128;

        if $i6 != 0 goto label06;

        z8 = 1;

        goto label07;

     label06:
        z8 = 0;

     label07:
        z0 = staticinvoke <android.service.notification.ZenModeConfig: boolean areAllPriorityOnlyRingerSoundsMuted(android.app.NotificationManager$Policy)>(r1);

        if z6 == 0 goto label08;

        $z4 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isAlarm(int)>(i0);

        if $z4 != 0 goto label11;

     label08:
        if z7 == 0 goto label09;

        $z3 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isMedia(int)>(i0);

        if $z3 != 0 goto label11;

     label09:
        if z8 == 0 goto label10;

        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isSystem(int)>(i0);

        if $z2 != 0 goto label11;

     label10:
        if z0 == 0 goto label12;

        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isNotificationOrRinger(int)>(i0);

        if $z1 == 0 goto label12;

     label11:
        z5 = 1;

        goto label12;

     label12:
        return z5;
    }

    private void unregisterAudioPolicyInt(android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        java.lang.StringBuilder $r1, r23;
        android.os.IBinder $r3, $r9, $r11;
        com.android.server.audio.AudioEventLogger$StringEvent $r5;
        java.lang.String $r6, $r16;
        com.android.server.audio.AudioEventLogger$Event $r7;
        java.util.HashMap $r8, r21;
        java.lang.Object $r10;
        int $i0, $i1;
        java.lang.Throwable $r17;
        android.media.audiopolicy.IAudioPolicyCallback r18;
        com.android.server.audio.AudioEventLogger r19;
        com.android.server.audio.AudioService$AudioPolicyProxy r22;

        r0 := @this: com.android.server.audio.AudioService;

        r18 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        r19 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mDynPolicyLogger>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregisterAudioPolicyAsync for ");

        $r3 = interfaceinvoke r18.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = new com.android.server.audio.AudioEventLogger$StringEvent;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<com.android.server.audio.AudioEventLogger$StringEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AS.AudioService");

        virtualinvoke r19.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r7);

        r21 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r21;

     label1:
        $r8 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r9 = interfaceinvoke r18.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r9);

        r22 = (com.android.server.audio.AudioService$AudioPolicyProxy) $r10;

     label2:
        if r22 != null goto label5;

     label3:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to unregister unknown audio policy for pid ");

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r16 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r16);

        exitmonitor r21;

     label4:
        return;

     label5:
        $r11 = interfaceinvoke r18.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r11.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r22, 0);

        virtualinvoke r22.<com.android.server.audio.AudioService$AudioPolicyProxy: void release()>();

        exitmonitor r21;

     label6:
        return;

     label7:
        $r17 := @caughtexception;

     label8:
        exitmonitor r21;

     label9:
        throw $r17;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void updateA11yVolumeAlias(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2;
        com.android.server.audio.AudioService$VolumeController r1, $r2;
        byte b0;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        $z1 = <com.android.server.audio.AudioService: boolean sIndependentA11yVolume>;

        if $z1 == z0 goto label3;

        <com.android.server.audio.AudioService: boolean sIndependentA11yVolume> = z0;

        b0 = 1;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateStreamVolumeAlias(boolean,java.lang.String)>(1, "AS.AudioService");

        r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        $z2 = <com.android.server.audio.AudioService: boolean sIndependentA11yVolume>;

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        virtualinvoke r1.<com.android.server.audio.AudioService$VolumeController: void setA11yMode(int)>(b0);

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeController: void postVolumeChanged(int,int)>(10, 0);

     label3:
        return;
    }

    private void updateAssistantUId(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        android.content.Context $r1, $r2;
        java.lang.Object $r3;
        int $i2, $i3, i6, $i7;
        android.content.ContentResolver $r4, $r9;
        java.lang.StringBuilder $r5, $r11;
        java.lang.String $r8, $r14, r15, r17, r18, r19;
        android.content.pm.PackageManager$NameNotFoundException $r10;
        com.android.server.audio.AudioService$RoleObserver r16;
        android.content.ComponentName r20;
        android.content.pm.PackageManager r22;
        android.app.ActivityManager r23;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r15 = "";

        r16 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$RoleObserver mRoleObserver>;

        if r16 == null goto label01;

        r15 = virtualinvoke r16.<com.android.server.audio.AudioService$RoleObserver: java.lang.String getAssistantRoleHolder()>();

     label01:
        r17 = r15;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r15);

        if $z1 == 0 goto label04;

        $r4 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        r18 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r4, "voice_interaction_service", -2);

        r19 = r18;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r18);

        if $z2 == 0 goto label02;

        $r9 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        r19 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r9, "assistant", -2);

     label02:
        r17 = r15;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r19);

        if $z3 != 0 goto label04;

        r20 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r19);

        if r20 != null goto label03;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid service name for voice_interaction_service: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r8);

        return;

     label03:
        r17 = virtualinvoke r20.<android.content.ComponentName: java.lang.String getPackageName()>();

     label04:
        i6 = 0;

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r17);

        if $z4 != 0 goto label08;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        r22 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        r23 = (android.app.ActivityManager) $r3;

        i6 = 0;

        $i2 = virtualinvoke r22.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>("android.permission.CAPTURE_AUDIO_HOTWORD", r17);

        if $i2 != 0 goto label08;

     label05:
        $i3 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        i6 = virtualinvoke r22.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r17, $i3);

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAssistantUId() could not find UID for package: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r14);

        i6 = 0;

     label08:
        $i7 = r0.<com.android.server.audio.AudioService: int mAssistantUid>;

        if i6 != $i7 goto label09;

        if z0 == 0 goto label10;

     label09:
        staticinvoke <android.media.AudioSystem: int setAssistantUid(int)>(i6);

        r0.<com.android.server.audio.AudioService: int mAssistantUid> = i6;

     label10:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label07;
    }

    private void updateAudioHalPids()
    {
        com.android.server.audio.AudioService r0;
        java.util.Set r1;
        boolean $z0;
        java.util.stream.Stream $r2;
        com.android.server.audio.'-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw' $r3;
        java.util.stream.IntStream $r4;
        int[] $r5;
        java.util.function.ToIntFunction r6;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = specialinvoke r0.<com.android.server.audio.AudioService: java.util.Set getAudioHalPids()>();

        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", "Could not retrieve audio HAL service pids");

        return;

     label1:
        $r2 = interfaceinvoke r1.<java.util.Set: java.util.stream.Stream stream()>();

        $r3 = <com.android.server.audio._$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw: com.android.server.audio.'-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw' INSTANCE>;

        r6 = (java.util.function.ToIntFunction) $r3;

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>(r6);

        $r5 = interfaceinvoke $r4.<java.util.stream.IntStream: int[] toArray()>();

        staticinvoke <android.media.AudioSystem: int setAudioHalPids(int[])>($r5);

        return;
    }

    private void updateDefaultStreamOverrideDelay(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        <com.android.server.audio.AudioService: int sStreamOverrideDelayMs> = 1000;

        goto label2;

     label1:
        <com.android.server.audio.AudioService: int sStreamOverrideDelayMs> = 0;

     label2:
        return;
    }

    private void updateDefaultVolumes()
    {
        com.android.server.audio.AudioService r0;
        int[] r1, r2, r3, $r5;
        com.android.server.audio.AudioService$VolumeStreamState[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;

        r0 := @this: com.android.server.audio.AudioService;

        i9 = 0;

     label1:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $i0 = lengthof $r4;

        if i9 >= $i0 goto label3;

        $r5 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i1 = $r5[i9];

        if i9 == $i1 goto label2;

        r1 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        r2 = <android.media.AudioSystem: int[] DEFAULT_STREAM_VOLUME>;

        r3 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i2 = r3[i9];

        $i3 = r2[$i2];

        $i5 = $i3 * 10;

        $i4 = r3[i9];

        $i6 = specialinvoke r0.<com.android.server.audio.AudioService: int rescaleIndex(int,int,int)>($i5, $i4, i9);

        $i7 = $i6 + 5;

        $i8 = $i7 / 10;

        r1[i9] = $i8;

     label2:
        i9 = i9 + 1;

        goto label1;

     label3:
        return;
    }

    private int updateFlagsForTvPlatform(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        java.lang.Object r1;
        android.hardware.hdmi.HdmiTvClient $r3;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r4;
        android.hardware.hdmi.HdmiPlaybackClient $r5;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        if $r3 == null goto label02;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        if $z1 == 0 goto label02;

        $z2 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecVolumeControlEnabled>;

        if $z2 != 0 goto label06;

     label02:
        i1 = i0;

     label03:
        $r5 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient>;

        if $r5 == null goto label07;

     label04:
        i1 = i0;

     label05:
        $z0 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecVolumeControlEnabled>;

        if $z0 == 0 goto label07;

     label06:
        i1 = i0 & -2;

     label07:
        exitmonitor r1;

     label08:
        return i1;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void updateHdmiCecSinkLocked(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.audio.AudioService: boolean mHdmiCecSink> = z0;

        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean hasDeviceVolumeBehavior(int)>(1024);

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecSink>;

        if $z2 == 0 goto label1;

        specialinvoke r0.<com.android.server.audio.AudioService: void addAudioSystemDeviceOutToFullVolumeDevices(int)>(1024);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.audio.AudioService: void removeAudioSystemDeviceOutFromFullVolumeDevices(int)>(1024);

     label2:
        specialinvoke r0.<com.android.server.audio.AudioService: void checkAddAllFixedVolumeDevices(int,java.lang.String)>(1024, "HdmiPlaybackClient.DisplayStatusCallback");

        return;
    }

    private void updateHearingAidVolumeOnVoiceActivityUpdate()
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2;
        com.android.server.audio.AudioServiceEvents$VolumeEvent $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        com.android.server.audio.AudioEventLogger $r3;
        boolean $z0;
        com.android.server.audio.AudioDeviceBroker $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 = virtualinvoke r0.<com.android.server.audio.AudioService: int getHearingAidStreamType()>();

        i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getStreamVolume(int)>(i0);

        $r3 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r1 = new com.android.server.audio.AudioServiceEvents$VolumeEvent;

        $r2 = r0.<com.android.server.audio.AudioService: java.util.concurrent.atomic.AtomicBoolean mVoiceActive>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        specialinvoke $r1.<com.android.server.audio.AudioServiceEvents$VolumeEvent: void <init>(int,boolean,int,int)>(6, $z0, i0, i1);

        virtualinvoke $r3.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r1);

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $i2 = i1 * 10;

        virtualinvoke $r4.<com.android.server.audio.AudioDeviceBroker: void postSetHearingAidVolumeIndex(int,int)>($i2, i0);

        return;
    }

    private void updateMasterBalance(android.content.ContentResolver)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver r1;
        float f0;
        int $i0;
        java.lang.Object[] $r2;
        java.lang.Float $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.content.ContentResolver;

        f0 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>(r1, "master_balance", 0.0F, -2);

        $i0 = staticinvoke <android.media.AudioSystem: int setMasterBalance(float)>(f0);

        if $i0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("setMasterBalance failed for %f", $r2);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r4);

     label1:
        return;
    }

    private void updateMasterMono(android.content.ContentResolver)
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.content.ContentResolver;

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "master_mono", 0, -2);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        staticinvoke <android.media.AudioSystem: int setMasterMono(boolean)>(z0);

        return;
    }

    private boolean updateRingerAndZenModeAffectedStreams()
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z3;
        int i0, $i1, $i2, i3, i4, i5;
        android.media.AudioManagerInternal$RingerModeDelegate r1;
        android.content.ContentResolver $r2, $r4;
        int[] $r3;

        r0 := @this: com.android.server.audio.AudioService;

        z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean updateZenModeAffectedStreams()>();

        $r2 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "mode_ringer_streams_affected", 166, -2);

        $z1 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z1 == 0 goto label1;

        i3 = 0;

        goto label2;

     label1:
        r1 = r0.<com.android.server.audio.AudioService: android.media.AudioManagerInternal$RingerModeDelegate mRingerModeDelegate>;

        i3 = i0;

        if r1 == null goto label2;

        i3 = interfaceinvoke r1.<android.media.AudioManagerInternal$RingerModeDelegate: int getRingerModeAffectedStreams(int)>(i0);

     label2:
        $z3 = r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced>;

        if $z3 == 0 goto label3;

        i4 = i3 & -129;

        goto label4;

     label3:
        i4 = i3 | 128;

     label4:
        $r3 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i1 = $r3[8];

        if $i1 != 2 goto label5;

        i5 = i4 | 256;

        goto label6;

     label5:
        i5 = i4 & -257;

     label6:
        $i2 = r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams>;

        if i5 == $i2 goto label7;

        $r4 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r4, "mode_ringer_streams_affected", i5, -2);

        r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams> = i5;

        return 1;

     label7:
        return z0;
    }

    private void updateStreamVolumeAlias(boolean, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r3, $r26, $r27, r31;
        com.android.server.audio.AudioService$VolumeStreamState[] $r4, $r5, $r6, $r9, $r14, $r15, $r18, $r21, $r24;
        com.android.server.audio.AudioService$VolumeStreamState $r7, $r8, $r12, $r16, $r17, $r19, $r22, $r25;
        java.lang.String[] $r10;
        java.lang.String $r11, r30;
        com.android.server.audio.AudioService$AudioHandler $r20, $r23;
        java.lang.Throwable $r28, $r29;
        byte b6, b7, b8;
        java.lang.Object r32;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r30 := @parameter1: java.lang.String;

        z1 = <com.android.server.audio.AudioService: boolean sIndependentA11yVolume>;

        b6 = 3;

        if z1 == 0 goto label01;

        b7 = 10;

        goto label02;

     label01:
        b7 = 3;

     label02:
        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891567);

        if $z2 == 0 goto label03;

        b6 = 11;

        goto label03;

     label03:
        $z3 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z3 == 0 goto label04;

        $r27 = r0.<com.android.server.audio.AudioService: int[] STREAM_VOLUME_ALIAS_TELEVISION>;

        <com.android.server.audio.AudioService: int[] mStreamVolumeAlias> = $r27;

        b8 = 3;

        goto label06;

     label04:
        $i0 = r0.<com.android.server.audio.AudioService: int mPlatformType>;

        if $i0 == 1 goto label05;

        $r26 = r0.<com.android.server.audio.AudioService: int[] STREAM_VOLUME_ALIAS_DEFAULT>;

        <com.android.server.audio.AudioService: int[] mStreamVolumeAlias> = $r26;

        b8 = 3;

        goto label06;

     label05:
        $r3 = r0.<com.android.server.audio.AudioService: int[] STREAM_VOLUME_ALIAS_VOICE>;

        <com.android.server.audio.AudioService: int[] mStreamVolumeAlias> = $r3;

        b8 = 2;

     label06:
        $z6 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z6 == 0 goto label07;

        r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams> = 0;

        goto label09;

     label07:
        $z4 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isInCommunication()>();

        if $z4 == 0 goto label08;

        $i4 = r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams>;

        $i5 = $i4 & -257;

        r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams> = $i5;

        b8 = 0;

        goto label09;

     label08:
        $i1 = r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams>;

        $i2 = $i1 | 256;

        r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams> = $i2;

     label09:
        r31 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        r31[8] = b8;

        r31[10] = b7;

        r31[11] = b6;

        if z0 == 0 goto label21;

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        if $r4 == null goto label21;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateDefaultVolumes()>();

        r32 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r32;

     label10:
        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label11:
        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = $r5[8];

        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r7 = $r6[b8];

        virtualinvoke $r8.<com.android.server.audio.AudioService$VolumeStreamState: void setAllIndexes(com.android.server.audio.AudioService$VolumeStreamState,java.lang.String)>($r7, r30);

        $r9 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r12 = $r9[10];

        $r10 = <android.provider.Settings$System: java.lang.String[] VOLUME_SETTINGS_INT>;

        $r11 = $r10[b7];

        staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: java.lang.String access$1402(com.android.server.audio.AudioService$VolumeStreamState,java.lang.String)>($r12, $r11);

        $r14 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r17 = $r14[10];

        $r15 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r16 = $r15[b7];

        virtualinvoke $r17.<com.android.server.audio.AudioService$VolumeStreamState: void setAllIndexes(com.android.server.audio.AudioService$VolumeStreamState,java.lang.String)>($r16, r30);

        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label12:
        exitmonitor r32;

     label13:
        $z5 = <com.android.server.audio.AudioService: boolean sIndependentA11yVolume>;

        if $z5 == 0 goto label14;

        $r24 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r25 = $r24[10];

        virtualinvoke $r25.<com.android.server.audio.AudioService$VolumeStreamState: void readSettings()>();

     label14:
        $i3 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>($i3, 0);

        $r20 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r18 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r19 = $r18[8];

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r20, 10, 2, 0, 0, $r19, 0);

        $r23 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r21 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r22 = $r21[10];

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r23, 10, 2, 0, 0, $r22, 0);

        goto label21;

     label15:
        $r29 := @caughtexception;

     label16:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label17:
        throw $r29;

     label18:
        $r28 := @caughtexception;

     label19:
        exitmonitor r32;

     label20:
        throw $r28;

     label21:
        return;

        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private boolean updateZenModeAffectedStreams()
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i13;
        android.app.NotificationManager$Policy r1;
        boolean $z0, $z1;
        android.app.NotificationManager $r2, $r3;
        byte $b7, $b8, b9, b10, b11, b12;

        r0 := @this: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mSystemReady>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        b9 = 0;

        b10 = 0;

        $r2 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        i0 = virtualinvoke $r2.<android.app.NotificationManager: int getZenMode()>();

        if i0 != 2 goto label2;

        $b8 = 0 | 16;

        b9 = $b8 | 8;

        goto label6;

     label2:
        if i0 != 1 goto label6;

        $r3 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        r1 = virtualinvoke $r3.<android.app.NotificationManager: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>();

        $i1 = r1.<android.app.NotificationManager$Policy: int priorityCategories>;

        $i2 = $i1 & 32;

        if $i2 != 0 goto label3;

        b10 = 0 | 16;

     label3:
        b11 = b10;

        $i3 = r1.<android.app.NotificationManager$Policy: int priorityCategories>;

        $i4 = $i3 & 64;

        if $i4 != 0 goto label4;

        b11 = b10 | 8;

     label4:
        b12 = b11;

        $i5 = r1.<android.app.NotificationManager$Policy: int priorityCategories>;

        $i6 = $i5 & 128;

        if $i6 != 0 goto label5;

        b12 = b11 | 2;

     label5:
        b9 = b12;

        $z1 = staticinvoke <android.service.notification.ZenModeConfig: boolean areAllPriorityOnlyRingerSoundsMuted(android.app.NotificationManager$Policy)>(r1);

        if $z1 == 0 goto label6;

        $b7 = b12 | 32;

        b9 = $b7 | 4;

     label6:
        $i13 = r0.<com.android.server.audio.AudioService: int mZenModeAffectedStreams>;

        if $i13 == b9 goto label7;

        r0.<com.android.server.audio.AudioService: int mZenModeAffectedStreams> = b9;

        return 1;

     label7:
        return 0;
    }

    private void validateAudioAttributesUsage(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7;
        java.lang.IllegalArgumentException $r6;
        android.media.AudioAttributes r8;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: android.media.AudioAttributes;

        i0 = virtualinvoke r8.<android.media.AudioAttributes: int getSystemUsage()>();

        $z0 = staticinvoke <android.media.AudioAttributes: boolean isSystemUsage(int)>(i0);

        if $z0 == 0 goto label3;

        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean callerHasPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isSupportedSystemUsage(int)>(i0);

        if $z2 == 0 goto label1;

        goto label3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported usage ");

        $r4 = staticinvoke <android.media.AudioAttributes: java.lang.String usageToString(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Missing MODIFY_AUDIO_ROUTING permission");

        throw $r1;

     label3:
        return;
    }

    private void verifySystemUsages(int[])
    {
        com.android.server.audio.AudioService r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: int[];

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $i1 = r1[i3];

        $z0 = staticinvoke <android.media.AudioAttributes: boolean isSystemUsage(int)>($i1);

        if $z0 == 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system usage provided: ");

        $i2 = r1[i3];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        return;
    }

    private boolean volumeAdjustmentAllowedByDnd(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, $i3, $i4;
        android.app.NotificationManager $r1;
        boolean z0, $z1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        i2 = virtualinvoke $r1.<android.app.NotificationManager: int getZenMode()>();

        z0 = 1;

        if i2 == 1 goto label1;

        if i2 == 2 goto label1;

        if i2 == 3 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isStreamMutedByRingerOrZenMode(int)>(i0);

        if $z1 == 0 goto label3;

        $i3 = virtualinvoke r0.<com.android.server.audio.AudioService: int getUiSoundsStreamType()>();

        if i0 == $i3 goto label3;

        $i4 = i1 & 2;

        if $i4 == 0 goto label2;

        goto label3;

     label2:
        z0 = 0;

        goto label3;

     label3:
        return z0;
    }

    private void waitForAudioHandlerCreation()
    {
        com.android.server.audio.AudioService r0;
        java.lang.Throwable $r1, $r2;
        com.android.server.audio.AudioService$AudioHandler r3;

        r0 := @this: com.android.server.audio.AudioService;

        entermonitor r0;

     label01:
        r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

     label02:
        if r3 != null goto label08;

     label03:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label04:
        goto label01;

     label05:
        $r1 := @caughtexception;

     label06:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Interrupted while waiting on volume handler.");

     label07:
        goto label01;

     label08:
        exitmonitor r0;

     label09:
        return;

     label10:
        $r2 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean wasStreamActiveRecently(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(i0, i1);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.media.AudioSystem: boolean isStreamActiveRemotely(int,int)>(i0, i1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean wouldToggleZenMode(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeExternal()>();

        if $i1 != 0 goto label1;

        if i0 == 0 goto label1;

        return 1;

     label1:
        $i2 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeExternal()>();

        if $i2 == 0 goto label2;

        if i0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public int abandonAudioFocus(android.media.IAudioFocusDispatcher, java.lang.String, android.media.AudioAttributes, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        android.media.IAudioFocusDispatcher r1;
        java.lang.String r2, r4;
        android.media.AudioAttributes r3;
        android.media.MediaMetrics$Item r5, $r6, $r8, $r10, $r14;
        android.media.MediaMetrics$Key $r7, $r9, $r11, $r13;
        com.android.server.audio.MediaFocusControl $r12;
        int $i0;
        boolean $z1;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IAudioFocusDispatcher;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.media.AudioAttributes;

        r4 := @parameter3: java.lang.String;

        $r6 = new android.media.MediaMetrics$Item;

        specialinvoke $r6.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.service.focus");

        $r7 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CALLING_PACKAGE>;

        $r8 = virtualinvoke $r6.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r7, r4);

        $r9 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CLIENT_NAME>;

        $r10 = virtualinvoke $r8.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r9, r2);

        $r11 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        r5 = virtualinvoke $r10.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r11, "abandonAudioFocus");

        if r3 == null goto label1;

        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isValidAudioAttributesUsage(android.media.AudioAttributes)>(r3);

        if $z1 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "Request using unsupported usage.");

        $r13 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r14 = virtualinvoke r5.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r13, "unsupported usage");

        virtualinvoke $r14.<android.media.MediaMetrics$Item: boolean record()>();

        return 0;

     label1:
        virtualinvoke r5.<android.media.MediaMetrics$Item: boolean record()>();

        $r12 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        $i0 = virtualinvoke $r12.<com.android.server.audio.MediaFocusControl: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>(r1, r2, r3, r4);

        return $i0;
    }

    public int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Throwable $r3;
        android.media.audiopolicy.AudioPolicyConfig r4;
        android.media.audiopolicy.IAudioPolicyCallback r5;
        com.android.server.audio.AudioService$AudioPolicyProxy r6;
        byte b1;

        r0 := @this: com.android.server.audio.AudioService;

        r4 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r5 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label01:
        r6 = specialinvoke r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback,java.lang.String)>(r5, "Cannot add AudioMix in audio policy");

     label02:
        b1 = -1;

        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return -1;

     label05:
        $r2 = virtualinvoke r4.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList getMixes()>();

        $i0 = virtualinvoke r6.<com.android.server.audio.AudioService$AudioPolicyProxy: int addMixes(java.util.ArrayList)>($r2);

        if $i0 != 0 goto label07;

     label06:
        b1 = 0;

        goto label07;

     label07:
        exitmonitor r1;

     label08:
        return b1;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void adjustStreamVolume(int, int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r1, $r9;
        android.content.Context $r3;
        com.android.server.audio.AudioServiceEvents$VolumeEvent $r4;
        com.android.server.audio.AudioEventLogger $r5;
        boolean $z0, z1;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        if i0 != 10 goto label1;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean canChangeAccessibilityVolume()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to call adjustStreamVolume() for a11y withoutCHANGE_ACCESSIBILITY_VOLUME / callingPackage=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r9);

        return;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i3 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_SETTINGS");

        if $i3 != 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        $r5 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r4 = new com.android.server.audio.AudioServiceEvents$VolumeEvent;

        specialinvoke $r4.<com.android.server.audio.AudioServiceEvents$VolumeEvent: void <init>(int,int,int,int,java.lang.String)>(1, i0, i1, i2, r1);

        virtualinvoke $r5.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r4);

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r0.<com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>(i0, i1, i2, r1, r1, $i4, z1, 0);

        return;
    }

    protected void adjustStreamVolume(int, int, int, java.lang.String, java.lang.String, int, boolean, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, $i44, i45, i46, i47, i48, $i49, i50, i51, i52, i53, i54, i56;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z12, $z13, $z14, $z16, $z17, $z18, $z19, z20, z21, z22, z23, $z24, z25, z26;
        com.android.server.audio.AudioService$VolumeStreamState r1, $r10, $r32, $r34, $r65, $r67;
        java.lang.Object r2, r68;
        long l4;
        int[] $r3, $r7, $r30;
        com.android.server.audio.AudioService$VolumeStreamState[] $r4, $r9, $r31, $r33, $r61, $r64, $r66;
        java.util.Set $r5, $r21, $r35;
        java.lang.Integer $r6, $r22, $r36;
        android.app.AppOpsManager $r8;
        android.hardware.hdmi.HdmiControlManager $r11;
        android.hardware.hdmi.HdmiPlaybackClient $r12, $r13, $r14, $r15;
        java.lang.String $r18, $r28, $r43, $r50, r57, r58;
        com.android.server.audio.AudioService$AudioHandler $r19, $r24, $r63;
        com.android.server.audio.AudioDeviceBroker $r20, $r23;
        java.lang.StringBuilder $r25, $r38, $r45, r69;
        com.android.server.audio.AudioService$VolumeController $r29;
        android.content.Context $r37, $r44;
        java.lang.Throwable $r51, $r52, $r53, $r54, $r55, $r56, r71, r72;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i34 := @parameter1: int;

        i35 := @parameter2: int;

        r57 := @parameter3: java.lang.String;

        r58 := @parameter4: java.lang.String;

        i36 := @parameter5: int;

        z20 := @parameter6: boolean;

        i1 := @parameter7: int;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        if $z1 == 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidDirection(int)>(i34);

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i0);

        z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isMuteAdjust(int)>(i34);

        if z0 == 0 goto label02;

        $z19 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean isStreamAffectedByMute(int)>(i0);

        if $z19 != 0 goto label02;

        return;

     label02:
        if z0 == 0 goto label04;

        if i0 == 0 goto label03;

        if i0 != 6 goto label04;

     label03:
        $r44 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i30 = virtualinvoke $r44.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i30 == 0 goto label04;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MODIFY_PHONE_STATE Permission Denial: adjustStreamVolume from pid=");

        $i31 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i32 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r50);

        return;

     label04:
        if i0 != 11 goto label05;

        $r37 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i26 = virtualinvoke $r37.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i26 == 0 goto label05;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MODIFY_AUDIO_ROUTING Permission Denial: adjustStreamVolume from pid=");

        $i27 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i28 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r43);

        return;

     label05:
        $r3 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        i2 = $r3[i0];

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r1 = $r4[i2];

        i3 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i2);

        i37 = virtualinvoke r1.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i3);

        z21 = 1;

        $r5 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_A2DP_SET>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z2 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z2 != 0 goto label06;

        $i25 = i35 & 64;

        if $i25 == 0 goto label06;

        return;

     label06:
        if i36 != 1000 goto label07;

        $i23 = specialinvoke r0.<com.android.server.audio.AudioService: int getCurrentUserId()>();

        $i24 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i36);

        i36 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i23, $i24);

        goto label07;

     label07:
        $r8 = r0.<com.android.server.audio.AudioService: android.app.AppOpsManager mAppOps>;

        $r7 = <com.android.server.audio.AudioService: int[] STREAM_VOLUME_OPS>;

        $i5 = $r7[i2];

        $i6 = virtualinvoke $r8.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>($i5, i36, r57);

        if $i6 == 0 goto label08;

        return;

     label08:
        r2 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r2;

     label09:
        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand> = null;

        exitmonitor r2;

     label10:
        i38 = i35 & -33;

        if i2 != 3 goto label14;

        $z17 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFixedVolumeDevice(int)>(i3);

        if $z17 == 0 goto label14;

        i39 = i38 | 32;

        $i22 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        if $i22 != 3 goto label11;

        $r35 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z18 = interfaceinvoke $r35.<java.util.Set: boolean contains(java.lang.Object)>($r36);

        if $z18 == 0 goto label11;

        i40 = specialinvoke r0.<com.android.server.audio.AudioService: int safeMediaVolumeIndex(int)>(i3);

        goto label12;

     label11:
        i40 = virtualinvoke r1.<com.android.server.audio.AudioService$VolumeStreamState: int getMaxIndex()>();

     label12:
        if i37 == 0 goto label13;

        i41 = i40;

        i42 = i40;

        i38 = i39;

        goto label15;

     label13:
        i41 = i37;

        i42 = i40;

        i38 = i39;

        goto label15;

     label14:
        i43 = specialinvoke r0.<com.android.server.audio.AudioService: int rescaleStep(int,int,int)>(10, i0, i2);

        i41 = i37;

        i42 = i43;

     label15:
        $i44 = i38 & 2;

        if $i44 != 0 goto label17;

        $i21 = virtualinvoke r0.<com.android.server.audio.AudioService: int getUiSoundsStreamType()>();

        if i2 != $i21 goto label16;

        goto label17;

     label16:
        goto label23;

     label17:
        i45 = i38;

        $i7 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        if $i7 != 1 goto label18;

        i45 = i38 & -17;

     label18:
        $z3 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>(r1);

        i46 = specialinvoke r0.<com.android.server.audio.AudioService: int checkForRingerModeChange(int,int,int,boolean,java.lang.String,int)>(i41, i34, i42, $z3, r57, i45);

        $i8 = i46 & 1;

        if $i8 == 0 goto label19;

        z22 = 1;

        goto label20;

     label19:
        z22 = 0;

     label20:
        z23 = z22;

        i38 = i45;

        $i9 = i46 & 128;

        if $i9 == 0 goto label21;

        i38 = i45 | 128;

     label21:
        $i10 = i46 & 2048;

        if $i10 == 0 goto label22;

        i38 = i38 | 2048;

        z21 = z23;

        goto label23;

     label22:
        z21 = z23;

     label23:
        $z24 = specialinvoke r0.<com.android.server.audio.AudioService: boolean volumeAdjustmentAllowedByDnd(int,int)>(i2, i38);

        if $z24 != 0 goto label24;

        z21 = 0;

     label24:
        $r9 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r10 = $r9[i0];

        i47 = virtualinvoke $r10.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i3);

        if z21 == 0 goto label45;

        if i34 == 0 goto label45;

        if i1 == 2 goto label45;

        $r19 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        virtualinvoke $r19.<com.android.server.audio.AudioService$AudioHandler: void removeMessages(int)>(18);

        if z0 == 0 goto label33;

        if i34 != 101 goto label25;

        $z16 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>(r1);

        z25 = $z16 ^ 1;

        goto label27;

     label25:
        if i34 != -100 goto label26;

        z25 = 1;

        goto label27;

     label26:
        z25 = 0;

     label27:
        if i2 != 3 goto label28;

        specialinvoke r0.<com.android.server.audio.AudioService: void setSystemAudioMute(boolean)>(z25);

     label28:
        i48 = 0;

     label29:
        $r61 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $i49 = lengthof $r61;

        if i48 >= $i49 goto label32;

        $r30 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i19 = $r30[i48];

        if i2 != $i19 goto label31;

        $z14 = specialinvoke r0.<com.android.server.audio.AudioService: boolean readCameraSoundForced()>();

        if $z14 == 0 goto label30;

        $r33 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r34 = $r33[i48];

        $i20 = virtualinvoke $r34.<com.android.server.audio.AudioService$VolumeStreamState: int getStreamType()>();

        if $i20 == 7 goto label31;

     label30:
        $r31 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r32 = $r31[i48];

        virtualinvoke $r32.<com.android.server.audio.AudioService$VolumeStreamState: boolean mute(boolean)>(z25);

     label31:
        i48 = i48 + 1;

        goto label29;

     label32:
        goto label41;

     label33:
        if i34 != 1 goto label34;

        $i17 = i41 + i42;

        $z13 = specialinvoke r0.<com.android.server.audio.AudioService: boolean checkSafeMediaVolume(int,int,int)>(i2, $i17, i3);

        if $z13 != 0 goto label34;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adjustStreamVolume() safe volume index = ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i47);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r28);

        $r29 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r29.<com.android.server.audio.AudioService$VolumeController: void postDisplaySafeVolumeWarning(int)>(i38);

        goto label41;

     label34:
        $z6 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFullVolumeDevice(int)>(i3);

        if $z6 != 0 goto label41;

        $i16 = i34 * i42;

        $z8 = virtualinvoke r1.<com.android.server.audio.AudioService$VolumeStreamState: boolean adjustIndex(int,int,java.lang.String,boolean)>($i16, i3, r58, z20);

        if $z8 != 0 goto label36;

        $z12 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>(r1);

        if $z12 == 0 goto label35;

        goto label36;

     label35:
        goto label41;

     label36:
        $z9 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>(r1);

        if $z9 == 0 goto label40;

        if i34 != 1 goto label37;

        virtualinvoke r1.<com.android.server.audio.AudioService$VolumeStreamState: boolean mute(boolean)>(0);

        goto label40;

     label37:
        if i34 != -1 goto label39;

        $z10 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        if $z10 == 0 goto label38;

        $r24 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r24, 18, 2, i2, i38, null, 350);

        goto label40;

     label38:
        goto label40;

     label39:
        goto label40;

     label40:
        $r63 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r63, 0, 2, i3, 0, r1, 0);

        goto label41;

     label41:
        i50 = i47;

        i51 = i38;

        $r64 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r65 = $r64[i0];

        i52 = virtualinvoke $r65.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i3);

        if i2 != 3 goto label42;

        $r21 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_A2DP_SET>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z7 = interfaceinvoke $r21.<java.util.Set: boolean contains(java.lang.Object)>($r22);

        if $z7 == 0 goto label42;

        $i14 = i38 & 64;

        if $i14 != 0 goto label42;

        $r23 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $i15 = i52 / 10;

        virtualinvoke $r23.<com.android.server.audio.AudioDeviceBroker: void postSetAvrcpAbsoluteVolumeIndex(int)>($i15);

     label42:
        if i3 != 134217728 goto label43;

        $i13 = virtualinvoke r0.<com.android.server.audio.AudioService: int getHearingAidStreamType()>();

        if i0 != $i13 goto label43;

        $r20 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r20.<com.android.server.audio.AudioDeviceBroker: void postSetHearingAidVolumeIndex(int,int)>(i52, i0);

     label43:
        if i2 != 3 goto label44;

        i53 = virtualinvoke r0.<com.android.server.audio.AudioService: int getStreamMaxVolume(int)>(i0);

        specialinvoke r0.<com.android.server.audio.AudioService: void setSystemAudioVolume(int,int,int,int)>(i47, i52, i53, i51);

        goto label46;

     label44:
        goto label46;

     label45:
        i50 = i47;

     label46:
        $r66 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r67 = $r66[i0];

        i54 = virtualinvoke $r67.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i3);

        if z21 == 0 goto label84;

        r68 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r68;

     label47:
        $r11 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        if $r11 == null goto label78;

        z26 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecSink>;

     label48:
        if z26 == 0 goto label73;

     label49:
        $z4 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecVolumeControlEnabled>;

        if $z4 == 0 goto label73;

     label50:
        if i2 != 3 goto label73;

     label51:
        $z5 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFullVolumeDevice(int)>(i3);

        if $z5 == 0 goto label73;

     label52:
        if i34 == -1 goto label55;

        if i34 == 1 goto label54;

        if i34 == 101 goto label53;

        i56 = 0;

        goto label56;

     label53:
        i56 = 164;

        goto label56;

     label54:
        i56 = 24;

        goto label56;

     label55:
        i56 = 25;

     label56:
        if i56 == 0 goto label73;

     label57:
        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label58:
        staticinvoke <java.lang.System: long currentTimeMillis()>();

     label59:
        if i1 == 0 goto label66;

        if i1 == 1 goto label64;

        if i1 == 2 goto label62;

     label60:
        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid keyEventMode ");

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r18);

     label61:
        goto label67;

     label62:
        $r15 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient>;

        virtualinvoke $r15.<android.hardware.hdmi.HdmiPlaybackClient: void sendVolumeKeyEvent(int,boolean)>(i56, 0);

     label63:
        goto label67;

     label64:
        $r14 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient>;

        virtualinvoke $r14.<android.hardware.hdmi.HdmiPlaybackClient: void sendVolumeKeyEvent(int,boolean)>(i56, 1);

     label65:
        goto label67;

     label66:
        $r12 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient>;

        virtualinvoke $r12.<android.hardware.hdmi.HdmiPlaybackClient: void sendVolumeKeyEvent(int,boolean)>(i56, 1);

        $r13 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient>;

        virtualinvoke $r13.<android.hardware.hdmi.HdmiPlaybackClient: void sendVolumeKeyEvent(int,boolean)>(i56, 0);

     label67:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label68:
        goto label73;

     label69:
        $r56 := @caughtexception;

     label70:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label71:
        throw $r56;

     label72:
        $r55 := @caughtexception;

        r71 = $r55;

        goto label81;

     label73:
        if i2 != 3 goto label77;

        if i50 != i54 goto label75;

        if z0 == 0 goto label74;

        goto label75;

     label74:
        goto label78;

     label75:
        specialinvoke r0.<com.android.server.audio.AudioService: void maybeSendSystemAudioStatusCommand(boolean)>(z0);

     label76:
        goto label78;

     label77:
        goto label78;

     label78:
        exitmonitor r68;

     label79:
        goto label84;

     label80:
        $r51 := @caughtexception;

        r71 = $r51;

     label81:
        exitmonitor r68;

     label82:
        throw r71;

     label83:
        $r52 := @caughtexception;

        r71 = $r52;

        goto label81;

     label84:
        virtualinvoke r0.<com.android.server.audio.AudioService: void sendVolumeUpdate(int,int,int,int,int)>(i0, i50, i54, i38, i3);

        return;

     label85:
        $r53 := @caughtexception;

        r72 = $r53;

     label86:
        exitmonitor r2;

     label87:
        throw r72;

     label88:
        $r54 := @caughtexception;

        r72 = $r54;

        goto label86;

        catch java.lang.Throwable from label09 to label10 with label85;
        catch java.lang.Throwable from label47 to label48 with label80;
        catch java.lang.Throwable from label49 to label50 with label72;
        catch java.lang.Throwable from label51 to label52 with label72;
        catch java.lang.Throwable from label57 to label58 with label72;
        catch java.lang.Throwable from label58 to label59 with label69;
        catch java.lang.Throwable from label60 to label61 with label69;
        catch java.lang.Throwable from label62 to label63 with label69;
        catch java.lang.Throwable from label64 to label65 with label69;
        catch java.lang.Throwable from label66 to label67 with label69;
        catch java.lang.Throwable from label67 to label68 with label72;
        catch java.lang.Throwable from label70 to label71 with label72;
        catch java.lang.Throwable from label71 to label72 with label72;
        catch java.lang.Throwable from label75 to label76 with label83;
        catch java.lang.Throwable from label78 to label79 with label83;
        catch java.lang.Throwable from label81 to label82 with label83;
        catch java.lang.Throwable from label86 to label87 with label88;
    }

    public void adjustSuggestedStreamVolume(int, int, int, java.lang.String, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r1, r2;
        android.content.Context $r3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i3 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_SETTINGS");

        if $i3 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>(i0, i1, i2, r1, r2, $i4, z0, 0);

        return;
    }

    public void avrcpSupportsAbsoluteVolume(java.lang.String, boolean)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r10;
        boolean z0;
        com.android.server.audio.AudioEventLogger r2;
        java.lang.StringBuilder $r4;
        com.android.server.audio.AudioEventLogger$StringEvent $r9;
        com.android.server.audio.AudioDeviceBroker $r11;
        com.android.server.audio.AudioService$VolumeStreamState[] $r12;
        com.android.server.audio.AudioService$VolumeStreamState $r13;
        com.android.server.audio.AudioService$AudioHandler $r14;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("avrcpSupportsAbsoluteVolume addr=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" support=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = new com.android.server.audio.AudioEventLogger$StringEvent;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r10);

        virtualinvoke r2.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r9);

        r0.<com.android.server.audio.AudioService: boolean mAvrcpAbsVolSupported> = z0;

        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r11.<com.android.server.audio.AudioDeviceBroker: void setAvrcpAbsoluteVolumeSupported(boolean)>(z0);

        $r14 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r12 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r13 = $r12[3];

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r14, 0, 2, 128, 0, $r13, 0);

        return;
    }

    boolean checkAudioSettingsPermission(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r11;
        android.content.Context $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_SETTINGS");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Audio Settings Permission Denial: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r11);

        return 0;
    }

    void checkMusicActive(int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String r1;
        java.util.Set $r2;
        java.lang.Integer $r3;
        boolean $z0;
        com.android.server.audio.AudioService$AudioHandler $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.audio.AudioService: java.util.Set mSafeMediaVolumeDevices>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r4, 11, 0, 0, 0, r1, 60000);

     label1:
        return;
    }

    public void disableRingtoneSync(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i2;
        long l1;
        android.content.ContentResolver $r2;
        android.content.Context $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 == i0 goto label1;

        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "disable sound settings syncing for another profile");

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r2 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "sync_parent_sounds", 0, i0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void disableSafeMediaVolume(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        com.android.server.audio.AudioService$StreamVolumeCommand $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceVolumeController(java.lang.String)>("disable the safe media volume");

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSafeMediaVolumeStateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.audio.AudioService: void setSafeMediaVolumeEnabled(boolean,java.lang.String)>(0, r8);

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i3 = $r3.<com.android.server.audio.AudioService$StreamVolumeCommand: int mStreamType>;

        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i2 = $r4.<com.android.server.audio.AudioService$StreamVolumeCommand: int mIndex>;

        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i1 = $r5.<com.android.server.audio.AudioService$StreamVolumeCommand: int mFlags>;

        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i0 = $r6.<com.android.server.audio.AudioService$StreamVolumeCommand: int mDevice>;

        specialinvoke r0.<com.android.server.audio.AudioService: void onSetStreamVolume(int,int,int,int,java.lang.String,boolean)>($i3, $i2, $i1, $i0, r8, 1);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand> = null;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int dispatchFocusChange(android.media.AudioFocusInfo, int, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;
        java.util.HashMap r2, $r5;
        java.lang.IllegalArgumentException $r3, $r4;
        android.os.IBinder $r6;
        boolean $z0;
        com.android.server.audio.MediaFocusControl $r7;
        java.lang.Throwable $r8;
        android.media.AudioFocusInfo r9;
        int i0, i1;
        java.lang.IllegalStateException r10;

        r0 := @this: com.android.server.audio.AudioService;

        r9 := @parameter0: android.media.AudioFocusInfo;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.audiopolicy.IAudioPolicyCallback;

        if r9 == null goto label8;

        if r1 == null goto label7;

        r2 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r6 = interfaceinvoke r1.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        i1 = virtualinvoke $r7.<com.android.server.audio.MediaFocusControl: int dispatchFocusChange(android.media.AudioFocusInfo,int)>(r9, i0);

        exitmonitor r2;

     label2:
        return i1;

     label3:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unregistered AudioPolicy for focus dispatch");

        throw r10;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r8;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPolicy callback");

        throw $r4;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFocusInfo");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.audio.AudioService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        android.content.Context $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.android.server.audio.AudioService$AudioHandler $r4, $r42;
        com.android.server.audio.MediaFocusControl $r5;
        com.android.server.audio.AudioDeviceBroker $r6, $r9, $r35;
        android.media.AudioRoutesInfo $r7, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r8, $r13, $r17, $r31;
        java.lang.CharSequence $r11;
        com.android.server.audio.AudioService$VolumeController $r12;
        float $f0;
        com.android.server.audio.AudioService$StreamVolumeCommand $r14;
        android.media.VolumePolicy $r15;
        java.util.Set $r16;
        android.media.audiopolicy.IAudioPolicyCallback $r18;
        android.hardware.hdmi.HdmiAudioSystemClient $r19;
        android.hardware.hdmi.HdmiPlaybackClient $r20;
        android.hardware.hdmi.HdmiTvClient $r21;
        java.lang.StringBuilder $r22;
        com.android.server.audio.AudioEventLogger $r32, $r37, $r38, $r39, $r40;
        com.android.server.audio.PlaybackActivityMonitor $r33;
        com.android.server.audio.RecordingActivityMonitor $r34;
        com.android.server.audio.SoundEffectsHelper $r36;
        android.util.PrintWriterPrinter $r41;
        java.io.FileDescriptor r43;

        r0 := @this: com.android.server.audio.AudioService;

        r43 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r3, "AS.AudioService", r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        if $r4 == null goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nMessage handler (watch for unhandled messages):");

        $r42 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r41 = new android.util.PrintWriterPrinter;

        specialinvoke $r41.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>(r1);

        virtualinvoke $r42.<com.android.server.audio.AudioService$AudioHandler: void dump(android.util.Printer,java.lang.String)>($r41, "  ");

        goto label3;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nMessage handler is null");

     label3:
        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r5.<com.android.server.audio.MediaFocusControl: void dump(java.io.PrintWriter)>(r1);

        specialinvoke r0.<com.android.server.audio.AudioService: void dumpStreamStates(java.io.PrintWriter)>(r1);

        specialinvoke r0.<com.android.server.audio.AudioService: void dumpVolumeGroups(java.io.PrintWriter)>(r1);

        specialinvoke r0.<com.android.server.audio.AudioService: void dumpRingerMode(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nAudio routes:");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mMainType=0x");

        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $r7 = virtualinvoke $r6.<com.android.server.audio.AudioDeviceBroker: android.media.AudioRoutesInfo getCurAudioRoutes()>();

        $i0 = $r7.<android.media.AudioRoutesInfo: int mainType>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mBluetoothName=");

        $r9 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $r10 = virtualinvoke $r9.<com.android.server.audio.AudioDeviceBroker: android.media.AudioRoutesInfo getCurAudioRoutes()>();

        $r11 = $r10.<android.media.AudioRoutesInfo: java.lang.CharSequence bluetoothName>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r11);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nOther state:");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mVolumeController=");

        $r12 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSafeMediaVolumeState=");

        $i1 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeState>;

        $r13 = staticinvoke <com.android.server.audio.AudioService: java.lang.String safeMediaVolumeStateToString(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSafeMediaVolumeIndex=");

        $i2 = r0.<com.android.server.audio.AudioService: int mSafeMediaVolumeIndex>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSafeUsbMediaVolumeIndex=");

        $i3 = r0.<com.android.server.audio.AudioService: int mSafeUsbMediaVolumeIndex>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSafeUsbMediaVolumeDbfs=");

        $f0 = r0.<com.android.server.audio.AudioService: float mSafeUsbMediaVolumeDbfs>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  sIndependentA11yVolume=");

        $z1 = <com.android.server.audio.AudioService: boolean sIndependentA11yVolume>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mPendingVolumeCommand=");

        $r14 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r14);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mMusicActiveMs=");

        $i4 = r0.<com.android.server.audio.AudioService: int mMusicActiveMs>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mMcc=");

        $i5 = r0.<com.android.server.audio.AudioService: int mMcc>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mCameraSoundForced=");

        $z2 = r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHasVibrator=");

        $z3 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mVolumePolicy=");

        $r15 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r15);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mAvrcpAbsVolSupported=");

        $z4 = r0.<com.android.server.audio.AudioService: boolean mAvrcpAbsVolSupported>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mIsSingleVolume=");

        $z5 = r0.<com.android.server.audio.AudioService: boolean mIsSingleVolume>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mUseFixedVolume=");

        $z6 = r0.<com.android.server.audio.AudioService: boolean mUseFixedVolume>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mFixedVolumeDevices=");

        $r16 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r17 = specialinvoke r0.<com.android.server.audio.AudioService: java.lang.String dumpDeviceTypes(java.util.Set)>($r16);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mExtVolumeController=");

        $r18 = r0.<com.android.server.audio.AudioService: android.media.audiopolicy.IAudioPolicyCallback mExtVolumeController>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r18);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHdmiCecSink=");

        $z7 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecSink>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHdmiAudioSystemClient=");

        $r19 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiAudioSystemClient mHdmiAudioSystemClient>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r19);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHdmiPlaybackClient=");

        $r20 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHdmiTvClient=");

        $r21 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r21);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHdmiSystemAudioSupported=");

        $z8 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHdmiCecVolumeControlEnabled=");

        $z9 = r0.<com.android.server.audio.AudioService: boolean mHdmiCecVolumeControlEnabled>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mIsCallScreeningModeSupported=");

        $z10 = r0.<com.android.server.audio.AudioService: boolean mIsCallScreeningModeSupported>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z10);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mic mute FromSwitch=");

        $z11 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSwitch>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FromRestrictions=");

        $z12 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromRestrictions>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FromApi=");

        $z13 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromApi>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from system=");

        $z14 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSystemCached>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r31 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r31);

        specialinvoke r0.<com.android.server.audio.AudioService: void dumpAudioPolicies(java.io.PrintWriter)>(r1);

        $r32 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mDynPolicyLogger>;

        virtualinvoke $r32.<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>(r1);

        $r33 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        virtualinvoke $r33.<com.android.server.audio.PlaybackActivityMonitor: void dump(java.io.PrintWriter)>(r1);

        $r34 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        virtualinvoke $r34.<com.android.server.audio.RecordingActivityMonitor: void dump(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nAudioDeviceBroker:");

        $r35 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r35.<com.android.server.audio.AudioDeviceBroker: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nSoundEffects:");

        $r36 = r0.<com.android.server.audio.AudioService: com.android.server.audio.SoundEffectsHelper mSfxHelper>;

        virtualinvoke $r36.<com.android.server.audio.SoundEffectsHelper: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nEvent logs:");

        $r37 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mModeLogger>;

        virtualinvoke $r37.<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        $r38 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sDeviceLogger>;

        virtualinvoke $r38.<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        $r39 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sForceUseLogger>;

        virtualinvoke $r39.<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        $r40 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        virtualinvoke $r40.<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        specialinvoke r0.<com.android.server.audio.AudioService: void dumpSupportedSystemUsage(java.io.PrintWriter)>(r1);

        return;
    }

    public void forceRemoteSubmixFullVolume(boolean, android.os.IBinder)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z2, $z5, z10;
        java.util.ArrayList r1, r2;
        com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler r3;
        android.content.Context $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7;
        com.android.server.audio.AudioService$VolumeStreamState[] $r5;
        com.android.server.audio.AudioService$VolumeStreamState $r6;
        java.util.Set $r7, $r9, $r11, $r13;
        java.lang.Integer $r8, $r10, $r12, $r14;
        java.lang.Throwable $r15;
        android.os.IBinder r16;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r16 := @parameter1: android.os.IBinder;

        if r16 != null goto label01;

        return;

     label01:
        $r4 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.CAPTURE_AUDIO_OUTPUT");

        if $i0 == 0 goto label02;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "Trying to call forceRemoteSubmixFullVolume() without CAPTURE_AUDIO_OUTPUT");

        return;

     label02:
        r1 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mRmtSbmxFullVolDeathHandlers>;

        entermonitor r1;

        if z0 == 0 goto label09;

        z10 = 0;

     label03:
        $z5 = specialinvoke r0.<com.android.server.audio.AudioService: boolean hasRmtSbmxFullVolDeathHandlerFor(android.os.IBinder)>(r16);

        if $z5 != 0 goto label16;

        r2 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mRmtSbmxFullVolDeathHandlers>;

        r3 = new com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler;

        specialinvoke r3.<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>(r0, r16);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label04:
        z10 = 0;

     label05:
        $i3 = r0.<com.android.server.audio.AudioService: int mRmtSbmxFullVolRefCount>;

        if $i3 != 0 goto label07;

        $r11 = r0.<com.android.server.audio.AudioService: java.util.Set mFullVolumeDevices>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32768);

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32768);

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label06:
        z10 = 1;

     label07:
        $i4 = r0.<com.android.server.audio.AudioService: int mRmtSbmxFullVolRefCount>;

        $i5 = $i4 + 1;

        r0.<com.android.server.audio.AudioService: int mRmtSbmxFullVolRefCount> = $i5;

     label08:
        goto label16;

     label09:
        z10 = 0;

     label10:
        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean discardRmtSbmxFullVolDeathHandlerFor(android.os.IBinder)>(r16);

        if $z2 == 0 goto label16;

     label11:
        z10 = 0;

     label12:
        $i1 = r0.<com.android.server.audio.AudioService: int mRmtSbmxFullVolRefCount>;

        if $i1 <= 0 goto label16;

        $i2 = r0.<com.android.server.audio.AudioService: int mRmtSbmxFullVolRefCount>;

        i7 = $i2 - 1;

        r0.<com.android.server.audio.AudioService: int mRmtSbmxFullVolRefCount> = i7;

     label13:
        z10 = 0;

        if i7 != 0 goto label16;

     label14:
        $r7 = r0.<com.android.server.audio.AudioService: java.util.Set mFullVolumeDevices>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32768);

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>($r8);

        $r9 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32768);

        interfaceinvoke $r9.<java.util.Set: boolean remove(java.lang.Object)>($r10);

     label15:
        z10 = 1;

     label16:
        if z10 == 0 goto label18;

     label17:
        specialinvoke r0.<com.android.server.audio.AudioService: void checkAllFixedVolumeDevices(int)>(3);

        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[3];

        virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeStreamState: void applyAllVolumes()>();

     label18:
        exitmonitor r1;

     label19:
        return;

     label20:
        $r15 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r15;

        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public void forceVolumeControlStream(int, android.os.IBinder)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        android.content.Context $r2;
        com.android.server.audio.AudioService$ForceControlStreamClient $r3, $r4, $r6, $r11, $r12, r15, r17;
        android.os.IBinder $r5, r14;
        java.lang.String $r10;
        java.lang.Throwable $r13;
        java.lang.StringBuilder r16;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r14 := @parameter1: android.os.IBinder;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i1 == 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mForceControlStreamLock>;

        entermonitor r1;

     label02:
        $i2 = r0.<com.android.server.audio.AudioService: int mVolumeControlStream>;

        if $i2 == -1 goto label05;

     label03:
        if i0 == -1 goto label05;

     label04:
        r0.<com.android.server.audio.AudioService: boolean mUserSelectedVolumeControlStream> = 1;

     label05:
        r0.<com.android.server.audio.AudioService: int mVolumeControlStream> = i0;

     label06:
        if i0 != -1 goto label10;

     label07:
        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        if $r11 == null goto label08;

        $r12 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        virtualinvoke $r12.<com.android.server.audio.AudioService$ForceControlStreamClient: void release()>();

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient> = null;

     label08:
        r0.<com.android.server.audio.AudioService: boolean mUserSelectedVolumeControlStream> = 0;

     label09:
        goto label15;

     label10:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        if $r3 != null goto label12;

        r15 = new com.android.server.audio.AudioService$ForceControlStreamClient;

        specialinvoke r15.<com.android.server.audio.AudioService$ForceControlStreamClient: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>(r0, r14);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient> = r15;

     label11:
        goto label15;

     label12:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        $r5 = virtualinvoke $r4.<com.android.server.audio.AudioService$ForceControlStreamClient: android.os.IBinder getBinder()>();

        if $r5 != r14 goto label14;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forceVolumeControlStream cb:");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already linked.");

        $r10 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AS.AudioService", $r10);

     label13:
        goto label15;

     label14:
        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        virtualinvoke $r6.<com.android.server.audio.AudioService$ForceControlStreamClient: void release()>();

        r17 = new com.android.server.audio.AudioService$ForceControlStreamClient;

        specialinvoke r17.<com.android.server.audio.AudioService$ForceControlStreamClient: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>(r0, r14);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$ForceControlStreamClient mForceControlStreamClient> = r17;

     label15:
        exitmonitor r1;

     label16:
        return;

     label17:
        $r13 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public java.util.List getActivePlaybackConfigurations()
    {
        com.android.server.audio.AudioService r0;
        android.content.Context $r1;
        int $i0;
        com.android.server.audio.PlaybackActivityMonitor $r2;
        java.util.List $r3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $r3 = virtualinvoke $r2.<com.android.server.audio.PlaybackActivityMonitor: java.util.List getActivePlaybackConfigurations(boolean)>(z0);

        return $r3;
    }

    public java.util.List getActiveRecordingConfigurations()
    {
        com.android.server.audio.AudioService r0;
        android.content.Context $r1;
        int $i0;
        com.android.server.audio.RecordingActivityMonitor $r2;
        java.util.List $r3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        $r3 = virtualinvoke $r2.<com.android.server.audio.RecordingActivityMonitor: java.util.List getActiveRecordingConfigurations(boolean)>(z0);

        return $r3;
    }

    public int getAllowedCapturePolicy()
    {
        com.android.server.audio.AudioService r0;
        long l0;
        com.android.server.audio.PlaybackActivityMonitor $r1;
        int i1, i2;

        r0 := @this: com.android.server.audio.AudioService;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        i2 = virtualinvoke $r1.<com.android.server.audio.PlaybackActivityMonitor: int getAllowedCapturePolicy(int)>(i1);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i2;
    }

    public java.util.List getAudioProductStrategies()
    {
        com.android.server.audio.AudioService r0;
        java.util.List $r1;

        r0 := @this: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $r1 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: java.util.List getAudioProductStrategies()>();

        return $r1;
    }

    public java.util.List getAudioVolumeGroups()
    {
        com.android.server.audio.AudioService r0;
        java.util.List $r1;

        r0 := @this: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $r1 = staticinvoke <android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioVolumeGroups()>();

        return $r1;
    }

    android.content.ContentResolver getContentResolver()
    {
        com.android.server.audio.AudioService r0;
        android.content.ContentResolver $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    public int getCurrentAudioFocus()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.MediaFocusControl $r1;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        $i0 = virtualinvoke $r1.<com.android.server.audio.MediaFocusControl: int getCurrentAudioFocus()>();

        return $i0;
    }

    public int getDeviceForStream(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        java.util.Iterator r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i8 := @parameter0: int;

        i0 = specialinvoke r0.<com.android.server.audio.AudioService: int getDevicesForStream(int)>(i8);

        i9 = i0;

        $i1 = i0 - 1;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label7;

        $i3 = i0 & 2;

        if $i3 == 0 goto label1;

        i9 = 2;

        goto label7;

     label1:
        $i4 = 262144 & i0;

        if $i4 == 0 goto label2;

        i9 = 262144;

        goto label7;

     label2:
        $i5 = 524288 & i0;

        if $i5 == 0 goto label3;

        i9 = 524288;

        goto label7;

     label3:
        $i6 = 2097152 & i0;

        if $i6 == 0 goto label4;

        i9 = 2097152;

        goto label7;

     label4:
        $r2 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_A2DP_SET>;

        r1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        i9 = i0;

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        i10 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i7 = i10 & i0;

        if $i7 != i10 goto label6;

        return i10;

     label6:
        goto label5;

     label7:
        return i9;
    }

    public int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2;
        java.util.Set $r1, $r3, $r5, $r7;
        java.lang.Integer $r2, $r4, $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r9;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13;
        android.media.AudioDeviceAttributes r14;

        r0 := @this: com.android.server.audio.AudioService;

        r14 := @parameter0: android.media.AudioDeviceAttributes;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $i2 = virtualinvoke r14.<android.media.AudioDeviceAttributes: int getType()>();

        i0 = staticinvoke <android.media.AudioDeviceInfo: int convertDeviceTypeToInternalDevice(int)>($i2);

        $r1 = <com.android.server.audio.AudioService: java.util.Set sDeviceVolumeBehaviorSupportedDeviceOutSet>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        if i0 == 128 goto label2;

        if i0 != 134217728 goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported volume behavior ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        i1 = specialinvoke r0.<com.android.server.audio.AudioService: int retrieveStoredDeviceVolumeBehavior(int)>(i0);

        if i1 == -1 goto label3;

        return i1;

     label3:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.Set mFullVolumeDevices>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        $r5 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z2 == 0 goto label5;

        return 2;

     label5:
        $r7 = r0.<com.android.server.audio.AudioService: java.util.Set mAbsVolumeMultiModeCaseDevices>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z3 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z3 == 0 goto label6;

        return 4;

     label6:
        if i0 != 128 goto label7;

        $z4 = r0.<com.android.server.audio.AudioService: boolean mAvrcpAbsVolSupported>;

        if $z4 == 0 goto label7;

        return 3;

     label7:
        return 0;
    }

    public java.util.ArrayList getDevicesForAttributes(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1;
        java.util.ArrayList $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $r3 = staticinvoke <android.media.AudioSystem: java.util.ArrayList getDevicesForAttributes(android.media.AudioAttributes)>(r1);

        return $r3;
    }

    public volatile java.util.List getDevicesForAttributes(android.media.AudioAttributes) throws android.os.RemoteException
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        $r2 = virtualinvoke r0.<com.android.server.audio.AudioService: java.util.ArrayList getDevicesForAttributes(android.media.AudioAttributes)>(r1);

        return $r2;
    }

    public int getFocusRampTimeMs(int, android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        android.media.AudioAttributes r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.AudioAttributes;

        $i1 = staticinvoke <com.android.server.audio.MediaFocusControl: int getFocusRampTimeMs(int,android.media.AudioAttributes)>(i0, r1);

        return $i1;
    }

    int getHearingAidStreamType()
    {
        com.android.server.audio.AudioService r0;
        int $i0, $i1;

        r0 := @this: com.android.server.audio.AudioService;

        $i0 = r0.<com.android.server.audio.AudioService: int mMode>;

        $i1 = specialinvoke r0.<com.android.server.audio.AudioService: int getHearingAidStreamType(int)>($i0);

        return $i1;
    }

    public int getLastAudibleStreamVolume(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3, $i4;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1;
        com.android.server.audio.AudioService$VolumeStreamState $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i0);

        i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i0);

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        $i2 = virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i1);

        $i3 = $i2 + 5;

        $i4 = $i3 / 10;

        return $i4;
    }

    public int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "attr must not be null");

        $i0 = staticinvoke <android.media.AudioSystem: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>(r1);

        return $i0;
    }

    public int getMinVolumeIndexForAttributes(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "attr must not be null");

        $i0 = staticinvoke <android.media.AudioSystem: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>(r1);

        return $i0;
    }

    public int getMode()
    {
        com.android.server.audio.AudioService r0;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        $i0 = r0.<com.android.server.audio.AudioService: int mMode>;

        return $i0;
    }

    int getModeOwnerPid()
    {
        com.android.server.audio.AudioService r0;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        com.android.server.audio.AudioService$SetModeDeathHandler $r4;
        java.lang.Exception $r5;
        int i1;

        r0 := @this: com.android.server.audio.AudioService;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r4 = (com.android.server.audio.AudioService$SetModeDeathHandler) $r3;

        i1 = virtualinvoke $r4.<com.android.server.audio.AudioService$SetModeDeathHandler: int getPid()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        i1 = 0;

     label4:
        return i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    int getModeOwnerUid()
    {
        com.android.server.audio.AudioService r0;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        com.android.server.audio.AudioService$SetModeDeathHandler $r4;
        java.lang.Exception $r5;
        int i1;

        r0 := @this: com.android.server.audio.AudioService;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r4 = (com.android.server.audio.AudioService$SetModeDeathHandler) $r3;

        i1 = virtualinvoke $r4.<com.android.server.audio.AudioService$SetModeDeathHandler: int getUid()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        i1 = 0;

     label4:
        return i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i2;
        android.media.AudioDeviceAttributes[] r1;
        long l1;
        android.media.AudioDeviceAttributes $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        r1 = newarray (android.media.AudioDeviceAttributes)[1];

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        i2 = staticinvoke <android.media.AudioSystem: int getPreferredDeviceForStrategy(int,android.media.AudioDeviceAttributes[])>(i0, r1);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        if i2 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error %d in getPreferredDeviceForStrategy(%d)", $r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r6);

        return null;

     label1:
        $r2 = r1[0];

        return $r2;
    }

    public int getRingerModeExternal()
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.audio.AudioService: int mRingerModeExternal>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getRingerModeInternal()
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.audio.AudioService: int mRingerMode>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.media.IRingtonePlayer getRingtonePlayer()
    {
        com.android.server.audio.AudioService r0;
        android.media.IRingtonePlayer $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.media.IRingtonePlayer mRingtonePlayer>;

        return $r1;
    }

    public int getStreamMaxVolume(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1;
        com.android.server.audio.AudioService$VolumeStreamState $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i0);

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: int getMaxIndex()>();

        $i2 = $i1 + 5;

        $i3 = $i2 / 10;

        return $i3;
    }

    public int getStreamMinVolume(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.content.Context $r1, $r2;
        boolean z0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r3;
        com.android.server.audio.AudioService$VolumeStreamState $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i0);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label2;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_SETTINGS");

        if $i2 == 0 goto label2;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i0];

        $i4 = virtualinvoke $r4.<com.android.server.audio.AudioService$VolumeStreamState: int getMinIndex(boolean)>(z0);

        $i5 = $i4 + 5;

        $i6 = $i5 / 10;

        return $i6;
    }

    public int getStreamVolume(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, i2, i3, i4, $i5, i6;
        com.android.server.audio.AudioService$VolumeStreamState[] $r2, $r4, $r7;
        com.android.server.audio.AudioService$VolumeStreamState $r3, $r5, $r8;
        boolean $z0, $z1;
        int[] $r6;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.audio.AudioService;

        i2 := @parameter0: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i2);

        i0 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i2);

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label01:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r3 = $r2[i2];

        i3 = virtualinvoke $r3.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i0);

     label02:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r5 = $r4[i2];

        $z0 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>($r5);

        if $z0 == 0 goto label04;

     label03:
        i3 = 0;

     label04:
        i4 = i3;

        if i3 == 0 goto label08;

        i4 = i3;

     label05:
        $r6 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i1 = $r6[i2];

        if $i1 != 3 goto label08;

     label06:
        i4 = i3;

     label07:
        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFixedVolumeDevice(int)>(i0);

        if $z1 == 0 goto label08;

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = $r7[i2];

        i4 = virtualinvoke $r8.<com.android.server.audio.AudioService$VolumeStreamState: int getMaxIndex()>();

     label08:
        $i5 = i4 + 5;

        i6 = $i5 / 10;

        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label09:
        return i6;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label12:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public int[] getSupportedSystemUsages()
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        int[] $r2, $r3, r5;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSupportedSystemUsagesLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages>;

        $r2 = r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages>;

        $i0 = lengthof $r2;

        r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r3, $i0);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getUiSoundsStreamType()
    {
        com.android.server.audio.AudioService r0;
        int[] $r1;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i0 = $r1[1];

        return $i0;
    }

    public int getVibrateSetting(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i2 = r0.<com.android.server.audio.AudioService: int mVibrateSetting>;

        $i1 = i0 * 2;

        $i3 = $i2 >> $i1;

        $i4 = $i3 & 3;

        return $i4;
    }

    public int getVolumeIndexForAttributes(android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioAttributes r1;
        int i0, $i1, $i2;
        android.util.SparseArray $r4, $r10;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;
        java.lang.Object $r11;
        com.android.server.audio.AudioService$VolumeGroupState $r12;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioAttributes;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "attr must not be null");

        i0 = specialinvoke r0.<com.android.server.audio.AudioService: int getVolumeGroupIdForAttributes(android.media.AudioAttributes)>(r1);

        $r4 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $i1 = virtualinvoke $r4.<android.util.SparseArray: int indexOfKey(int)>(i0);

        if $i1 < 0 goto label1;

        $r10 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r12 = (com.android.server.audio.AudioService$VolumeGroupState) $r11;

        $i2 = virtualinvoke $r12.<com.android.server.audio.AudioService$VolumeGroupState: int getVolumeIndex()>();

        return $i2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No volume group for attributes ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    int getVssVolumeForDevice(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1;
        com.android.server.audio.AudioService$VolumeStreamState $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        $i2 = virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: int getIndex(int)>(i1);

        return $i2;
    }

    public void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)
    {
        com.android.server.audio.AudioService r0;
        android.bluetooth.BluetoothDevice r1;
        java.lang.IllegalArgumentException $r2;
        com.android.server.audio.AudioDeviceBroker $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        if r1 == null goto label1;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r3.<com.android.server.audio.AudioDeviceBroker: void postBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null device");

        throw $r2;
    }

    public void handleVolumeKey(android.view.KeyEvent, boolean, java.lang.String, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        android.view.KeyEvent r1;
        boolean z0;
        java.lang.String r2, $r8, r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.lang.StringBuilder $r3;
        byte b10;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.view.KeyEvent;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.String;

        b10 = 0;

        if z0 == 0 goto label2;

        $i9 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i9 != 0 goto label1;

        b10 = 1;

        goto label3;

     label1:
        b10 = 2;

        goto label3;

     label2:
        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i1 == 0 goto label3;

        return;

     label3:
        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        if i0 == 24 goto label6;

        if i0 == 25 goto label5;

        if i0 == 164 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key code ");

        $i7 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sent by ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r8);

        return;

     label4:
        $i4 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i4 != 0 goto label7;

        $i5 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i5 != 0 goto label7;

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>(101, -2147483648, 4101, r2, r9, $i6, 1, 0);

        goto label7;

     label5:
        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>(-1, -2147483648, 4101, r2, r9, $i3, 1, b10);

        goto label7;

     label6:
        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>(1, -2147483648, 4101, r2, r9, $i2, 1, b10);

     label7:
        return;
    }

    public boolean hasAudioFocusUsers()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.MediaFocusControl $r1;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        $z0 = virtualinvoke $r1.<com.android.server.audio.MediaFocusControl: boolean hasAudioFocusUsers()>();

        return $z0;
    }

    public boolean hasHapticChannels(android.net.Uri)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1, i3;
        android.media.MediaExtractor $r1;
        android.content.Context $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        android.net.Uri r8;
        android.media.MediaFormat r10;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: android.net.Uri;

        $r1 = new android.media.MediaExtractor;

        specialinvoke $r1.<android.media.MediaExtractor: void <init>()>();

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        virtualinvoke $r1.<android.media.MediaExtractor: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>($r2, r8, null);

     label2:
        i3 = 0;

     label3:
        $i1 = virtualinvoke $r1.<android.media.MediaExtractor: int getTrackCount()>();

        if i3 >= $i1 goto label6;

        r10 = virtualinvoke $r1.<android.media.MediaExtractor: android.media.MediaFormat getTrackFormat(int)>(i3);

        $z0 = virtualinvoke r10.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("haptic-channel-count");

        if $z0 == 0 goto label5;

        i0 = virtualinvoke r10.<android.media.MediaFormat: int getInteger(java.lang.String)>("haptic-channel-count");

     label4:
        if i0 <= 0 goto label5;

        return 1;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hasHapticChannels failure:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r7);

     label8:
        return 0;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
    }

    public boolean hasMediaDynamicPolicy()
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1, $r2, $r3;
        boolean $z0, $z1, $z2;
        java.util.Collection $r4;
        java.lang.Object $r5;
        com.android.server.audio.AudioService$AudioPolicyProxy $r6;
        java.lang.Throwable $r7;
        java.util.Iterator r8;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r8 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.audio.AudioService$AudioPolicyProxy) $r5;

        $z2 = virtualinvoke $r6.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean hasMixAffectingUsage(int,int)>(1, 3);

        if $z2 == 0 goto label06;

        exitmonitor r1;

     label05:
        return 1;

     label06:
        goto label04;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean hasRegisteredDynamicPolicy()
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1, $r3;
        boolean $z0, z1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean isEmpty()>();

        if $z0 != 0 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected void initMinStreamVolumeWithoutModifyAudioSettings()
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i8, i9, $i10, i11, i12;
        int[] $r1, $r2, $r3, $r4, $r7, r8, r9;
        float $f0, $f1;
        boolean $z0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r5;
        com.android.server.audio.AudioService$VolumeStreamState $r6;
        byte $b7;

        r0 := @this: com.android.server.audio.AudioService;

        i8 = 4194304;

        $r1 = <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME>;

        $i2 = $r1[4];

        $f0 = staticinvoke <android.media.AudioSystem: float getStreamVolumeDB(int,int,int)>(4, $i2, 4194304);

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 == 0 goto label1;

        i8 = 2;

     label1:
        $r2 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        i9 = $r2[4];

     label2:
        $r7 = <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME>;

        $i10 = $r7[4];

        if i9 < $i10 goto label4;

        $f1 = staticinvoke <android.media.AudioSystem: float getStreamVolumeDB(int,int,int)>(4, i9, i8);

        $b7 = $f1 cmpg -36.0F;

        if $b7 >= 0 goto label3;

        goto label4;

     label3:
        i9 = i9 + -1;

        goto label2;

     label4:
        r8 = <com.android.server.audio.AudioService: int[] MIN_STREAM_VOLUME>;

        $i3 = r8[4];

        if i9 > $i3 goto label5;

        i11 = r8[4];

        goto label6;

     label5:
        $i5 = i9 + 1;

        $r3 = <com.android.server.audio.AudioService: int[] MAX_STREAM_VOLUME>;

        $i4 = $r3[4];

        i11 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i4);

     label6:
        r9 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        i0 = lengthof r9;

        i12 = 0;

     label7:
        if i12 >= i0 goto label9;

        i1 = r9[i12];

        $r4 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i6 = $r4[i1];

        if $i6 != 4 goto label8;

        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[i1];

        virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeStreamState: void updateNoPermMinIndex(int)>(i11);

     label8:
        i12 = i12 + 1;

        goto label7;

     label9:
        return;
    }

    public boolean isAudioServerRunning()
    {
        com.android.server.audio.AudioService r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void checkMonitorAudioServerStatePermission()>();

        $i0 = staticinvoke <android.media.AudioSystem: int checkAudioFlinger()>();

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isBluetoothA2dpOn()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioDeviceBroker $r1;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $z0 = virtualinvoke $r1.<com.android.server.audio.AudioDeviceBroker: boolean isBluetoothA2dpOn()>();

        return $z0;
    }

    public boolean isBluetoothScoOn()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioDeviceBroker $r1;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $z0 = virtualinvoke $r1.<com.android.server.audio.AudioDeviceBroker: boolean isBluetoothScoOnForApp()>();

        return $z0;
    }

    public boolean isCallScreeningModeSupported()
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mIsCallScreeningModeSupported>;

        return $z0;
    }

    public boolean isCameraSoundForced()
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isHdmiSystemAudioSupported()
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        return $z0;
    }

    public boolean isInCommunication()
    {
        com.android.server.audio.AudioService r0;
        android.telecom.TelecomManager r1;
        long l0;
        android.content.Context $r2;
        java.lang.Object $r3;
        int $i1, $i2;
        boolean z0, z1;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        r1 = (android.telecom.TelecomManager) $r3;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        z0 = virtualinvoke r1.<android.telecom.TelecomManager: boolean isInCall()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        if z0 != 0 goto label2;

        $i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getMode()>();

        if $i1 == 3 goto label2;

        $i2 = virtualinvoke r0.<com.android.server.audio.AudioService: int getMode()>();

        if $i2 != 2 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public boolean isMasterMute()
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $z0 = staticinvoke <android.media.AudioSystem: boolean getMasterMute()>();

        return $z0;
    }

    public boolean isMicrophoneMuted()
    {
        com.android.server.audio.AudioService r0;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSystemCached>;

        return $z0;
    }

    boolean isPlatformAutomotive()
    {
        com.android.server.audio.AudioService r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        return $z0;
    }

    boolean isPlatformTelevision()
    {
        com.android.server.audio.AudioService r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        $i0 = r0.<com.android.server.audio.AudioService: int mPlatformType>;

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSpeakerphoneOn()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioDeviceBroker $r1;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $z0 = virtualinvoke $r1.<com.android.server.audio.AudioDeviceBroker: boolean isSpeakerphoneOn()>();

        return $z0;
    }

    public boolean isStreamAffectedByMute(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 = r0.<com.android.server.audio.AudioService: int mMuteAffectedStreams>;

        z0 = 1;

        $i2 = 1 << i0;

        $i3 = i1 & $i2;

        if $i3 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isStreamAffectedByRingerMode(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 = r0.<com.android.server.audio.AudioService: int mRingerModeAffectedStreams>;

        z0 = 1;

        $i2 = 1 << i0;

        $i3 = i1 & $i2;

        if $i3 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isStreamMute(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        boolean z0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r2;
        com.android.server.audio.AudioService$VolumeStreamState $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 = i0;

        if i0 != -2147483648 goto label1;

        i1 = specialinvoke r0.<com.android.server.audio.AudioService: int getActiveStreamType(int)>(i0);

     label1:
        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label2:
        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i1);

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r3 = $r2[i1];

        z0 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: boolean access$1000(com.android.server.audio.AudioService$VolumeStreamState)>($r3);

        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isValidRingerMode(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean loadSoundEffects()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$LoadSoundEffectReply $r2;
        com.android.server.audio.AudioService$AudioHandler $r3;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        $r2 = new com.android.server.audio.AudioService$LoadSoundEffectReply;

        specialinvoke $r2.<com.android.server.audio.AudioService$LoadSoundEffectReply: void <init>(com.android.server.audio.AudioService$1)>(null);

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r3, 7, 2, 0, 0, $r2, 0);

        $z0 = virtualinvoke $r2.<com.android.server.audio.AudioService$LoadSoundEffectReply: boolean waitForLoaded(int)>(3);

        return $z0;
    }

    public void notifyVolumeControllerVisible(android.media.IVolumeController, boolean)
    {
        com.android.server.audio.AudioService r0;
        android.media.IVolumeController r1;
        boolean z0, $z1;
        com.android.server.audio.AudioService$VolumeController $r2, $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IVolumeController;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceVolumeController(java.lang.String)>("notify about volume controller visibility");

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        $z1 = virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeController: boolean isSameBinder(android.media.IVolumeController)>(r1);

        if $z1 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r3.<com.android.server.audio.AudioService$VolumeController: void setVisible(boolean)>(z0);

        return;
    }

    public void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)
    {
        com.android.server.audio.AudioService r0;
        android.view.accessibility.AccessibilityManager r1;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager;

        $z0 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: boolean isAccessibilityVolumeStreamActive()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void updateA11yVolumeAlias(boolean)>($z0);

        return;
    }

    public void onAudioServerDied()
    {
        com.android.server.audio.AudioService r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.server.audio.AudioService$AudioHandler $r1, $r16;
        int $i1, $i4, $i5, $i6, $i7, $i8, $i11, $i15, $i16, $i17, $i18, $i20, $i24, $i25, $i26, $i27, $i29, $i30, i32, i34, i35, i36;
        com.android.server.audio.AudioDeviceBroker $r2, $r3, $r4, $r7;
        android.content.ContentResolver $r5, $r6, $r8, $r9;
        int[] $r10, $r78;
        com.android.server.audio.AudioSystemAdapter $r11;
        android.hardware.hdmi.HdmiControlManager $r12;
        com.android.server.audio.PlaybackActivityMonitor $r13, $r31, r86;
        java.util.HashMap $r14, r79, $r80;
        java.util.Set $r15;
        java.lang.Object $r17, $r18, $r20, $r23, $r26, $r32, $r34, r67, r71, r73, r74, r75, r76, r77;
        java.lang.Integer $r19, $r21, $r33;
        java.lang.String $r30, $r36, $r39, $r41, $r43, $r46, $r48, $r52, $r57;
        android.hardware.hdmi.HdmiTvClient $r49;
        com.android.server.audio.AudioService$VolumeStreamState[] $r50;
        java.lang.Throwable $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66;
        com.android.server.audio.AudioEventLogger r68;
        com.android.server.audio.AudioEventLogger$StringEvent r69;
        java.lang.StringBuilder r70, r84, r85, r89;
        byte b31, b33;
        com.android.server.audio.AudioService$VolumeStreamState r72;
        java.util.Collection $r81;
        java.util.Iterator r82, r87;
        com.android.server.audio.AudioService$AudioPolicyProxy r83;
        java.util.Map$Entry r88;

        r0 := @this: com.android.server.audio.AudioService;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mSystemReady>;

        if $z0 == 0 goto label74;

        $i1 = staticinvoke <android.media.AudioSystem: int checkAudioFlinger()>();

        if $i1 == 0 goto label01;

        goto label74;

     label01:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Audioserver started.");

        specialinvoke r0.<com.android.server.audio.AudioService: void updateAudioHalPids()>();

        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("restarting=true");

        staticinvoke <com.android.server.audio.AudioService: void readAndSetLowRamDevice()>();

        $z1 = staticinvoke <android.media.AudioSystem: boolean isCallScreeningModeSupported()>();

        r0.<com.android.server.audio.AudioService: boolean mIsCallScreeningModeSupported> = $z1;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r2.<com.android.server.audio.AudioDeviceBroker: void onAudioServerDied()>();

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        r67 = $r3.<com.android.server.audio.AudioDeviceBroker: java.lang.Object mSetModeLock>;

        entermonitor r67;

     label02:
        $i4 = r0.<com.android.server.audio.AudioService: int mMode>;

        $i5 = virtualinvoke r0.<com.android.server.audio.AudioService: int getModeOwnerUid()>();

        $i6 = staticinvoke <android.media.AudioSystem: int setPhoneState(int,int)>($i4, $i5);

        if $i6 != 0 goto label03;

        r68 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mModeLogger>;

        r69 = new com.android.server.audio.AudioEventLogger$StringEvent;

        r70 = new java.lang.StringBuilder;

        specialinvoke r70.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onAudioServerDied causes setPhoneState(");

        $i29 = r0.<com.android.server.audio.AudioService: int mMode>;

        $r52 = staticinvoke <android.media.AudioSystem: java.lang.String modeToString(int)>($i29);

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i30 = virtualinvoke r0.<com.android.server.audio.AudioService: int getModeOwnerUid()>();

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r57 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r69.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r57);

        virtualinvoke r68.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>(r69);

     label03:
        exitmonitor r67;

     label04:
        r71 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r71;

     label05:
        $z2 = r0.<com.android.server.audio.AudioService: boolean mCameraSoundForced>;

        if $z2 == 0 goto label07;

     label06:
        b31 = 11;

        goto label08;

     label07:
        b31 = 0;

     label08:
        exitmonitor r71;

     label09:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r4.<com.android.server.audio.AudioDeviceBroker: void setForceUse_Async(int,int,java.lang.String)>(4, b31, "onAudioServerDied");

        $i7 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i32 = $i7 - 1;

     label10:
        if i32 < 0 goto label11;

        $r50 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        r72 = $r50[i32];

        $i24 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$800(com.android.server.audio.AudioService$VolumeStreamState)>(r72);

        $i25 = $i24 / 10;

        $i26 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$900(com.android.server.audio.AudioService$VolumeStreamState)>(r72);

        $i27 = $i26 / 10;

        staticinvoke <android.media.AudioSystem: int initStreamVolume(int,int,int)>(i32, $i25, $i27);

        virtualinvoke r72.<com.android.server.audio.AudioService$VolumeStreamState: void applyAllVolumes()>();

        i32 = i32 + -1;

        goto label10;

     label11:
        specialinvoke r0.<com.android.server.audio.AudioService: void restoreVolumeGroups()>();

        $r5 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateMasterMono(android.content.ContentResolver)>($r5);

        $r6 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateMasterBalance(android.content.ContentResolver)>($r6);

        $i8 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeInternal()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)>($i8, 0);

        $z3 = r0.<com.android.server.audio.AudioService: boolean mMonitorRotation>;

        if $z3 == 0 goto label12;

        staticinvoke <com.android.server.audio.RotationHelper: void updateOrientation()>();

     label12:
        r73 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r73;

     label13:
        $z4 = r0.<com.android.server.audio.AudioService: boolean mDockAudioMediaEnabled>;

        if $z4 == 0 goto label15;

     label14:
        b33 = 8;

        goto label16;

     label15:
        b33 = 0;

     label16:
        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r7.<com.android.server.audio.AudioDeviceBroker: void setForceUse_Async(int,int,java.lang.String)>(3, b33, "onAudioServerDied");

        $r8 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEncodedSurroundMode(android.content.ContentResolver,java.lang.String)>($r8, "onAudioServerDied");

        $r9 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        specialinvoke r0.<com.android.server.audio.AudioService: void sendEnabledSurroundFormats(android.content.ContentResolver,boolean)>($r9, 1);

        specialinvoke r0.<com.android.server.audio.AudioService: void updateAssistantUId(boolean)>(1);

        $z5 = r0.<com.android.server.audio.AudioService: boolean mRttEnabled>;

        staticinvoke <android.media.AudioSystem: int setRttEnabled(boolean)>($z5);

     label17:
        exitmonitor r73;

     label18:
        r74 = r0.<com.android.server.audio.AudioService: java.lang.Object mAccessibilityServiceUidsLock>;

        entermonitor r74;

     label19:
        $r10 = r0.<com.android.server.audio.AudioService: int[] mAccessibilityServiceUids>;

        staticinvoke <android.media.AudioSystem: int setA11yServicesUids(int[])>($r10);

        exitmonitor r74;

     label20:
        r75 = r0.<com.android.server.audio.AudioService: java.lang.Object mInputMethodServiceUidLock>;

        entermonitor r75;

     label21:
        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioSystemAdapter mAudioSystem>;

        $i11 = r0.<com.android.server.audio.AudioService: int mInputMethodServiceUid>;

        virtualinvoke $r11.<com.android.server.audio.AudioSystemAdapter: int setCurrentImeUid(int)>($i11);

        exitmonitor r75;

     label22:
        r76 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r76;

     label23:
        $r12 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        if $r12 == null goto label24;

        $r49 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        if $r49 == null goto label24;

        $z7 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        virtualinvoke r0.<com.android.server.audio.AudioService: int setHdmiSystemAudioSupported(boolean)>($z7);

     label24:
        exitmonitor r76;

     label25:
        r77 = r0.<com.android.server.audio.AudioService: java.lang.Object mSupportedSystemUsagesLock>;

        entermonitor r77;

     label26:
        $r78 = r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages>;

        staticinvoke <android.media.AudioSystem: int setSupportedSystemUsages(int[])>($r78);

        exitmonitor r77;

     label27:
        r79 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r79;

     label28:
        $r80 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r81 = virtualinvoke $r80.<java.util.HashMap: java.util.Collection values()>();

        r82 = interfaceinvoke $r81.<java.util.Collection: java.util.Iterator iterator()>();

     label29:
        $z8 = interfaceinvoke r82.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label37;

        $r34 = interfaceinvoke r82.<java.util.Iterator: java.lang.Object next()>();

        r83 = (com.android.server.audio.AudioService$AudioPolicyProxy) $r34;

        i34 = virtualinvoke r83.<com.android.server.audio.AudioService$AudioPolicyProxy: int connectMixes()>();

     label30:
        if i34 == 0 goto label33;

     label31:
        r84 = new java.lang.StringBuilder;

        specialinvoke r84.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onAudioServerDied: error ");

        $r43 = staticinvoke <android.media.AudioSystem: java.lang.String audioSystemErrorToString(int)>(i34);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when connecting mixes for policy ");

        $r46 = virtualinvoke r83.<com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String toLogFriendlyString()>();

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke r84.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r48);

        virtualinvoke r83.<com.android.server.audio.AudioService$AudioPolicyProxy: void release()>();

     label32:
        goto label36;

     label33:
        i35 = virtualinvoke r83.<com.android.server.audio.AudioService$AudioPolicyProxy: int setupDeviceAffinities()>();

     label34:
        if i35 == 0 goto label36;

     label35:
        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onAudioServerDied: error ");

        $r36 = staticinvoke <android.media.AudioSystem: java.lang.String audioSystemErrorToString(int)>(i35);

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when connecting device affinities for policy ");

        $r39 = virtualinvoke r83.<com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String toLogFriendlyString()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r41);

        virtualinvoke r83.<com.android.server.audio.AudioService$AudioPolicyProxy: void release()>();

     label36:
        goto label29;

     label37:
        exitmonitor r79;

     label38:
        r86 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        entermonitor r86;

     label39:
        $r13 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $r14 = virtualinvoke $r13.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap getAllAllowedCapturePolicies()>();

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.util.Set entrySet()>();

        r87 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label40:
        $z6 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label45;

        $r17 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>();

        r88 = (java.util.Map$Entry) $r17;

     label41:
        $r18 = interfaceinvoke r88.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.Integer) $r18;

        $i16 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $r20 = interfaceinvoke r88.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (java.lang.Integer) $r20;

        $i17 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        $i18 = staticinvoke <android.media.AudioAttributes: int capturePolicyToFlags(int,int)>($i17, 0);

        i36 = staticinvoke <android.media.AudioSystem: int setAllowedCapturePolicy(int,int)>($i16, $i18);

     label42:
        if i36 == 0 goto label44;

     label43:
        r89 = new java.lang.StringBuilder;

        specialinvoke r89.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore capture policy, uid: ");

        $r23 = interfaceinvoke r88.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", capture policy: ");

        $r26 = interfaceinvoke r88.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", result: ");

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i36);

        $r30 = virtualinvoke r89.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r30);

        $r31 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $r32 = interfaceinvoke r88.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r33 = (java.lang.Integer) $r32;

        $i20 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        virtualinvoke $r31.<com.android.server.audio.PlaybackActivityMonitor: void setAllowedCapturePolicy(int,int)>($i20, 1);

     label44:
        goto label40;

     label45:
        exitmonitor r86;

     label46:
        virtualinvoke r0.<com.android.server.audio.AudioService: void onIndicateSystemReady()>();

        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("restarting=false");

        $r16 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r16, 23, 2, 1, 0, null, 0);

        $i15 = specialinvoke r0.<com.android.server.audio.AudioService: int getCurrentUserId()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setMicrophoneMuteNoCallerCheck(int)>($i15);

        specialinvoke r0.<com.android.server.audio.AudioService: void setMicMuteFromSwitchInput()>();

        return;

     label47:
        $r58 := @caughtexception;

     label48:
        exitmonitor r86;

     label49:
        throw $r58;

     label50:
        $r64 := @caughtexception;

     label51:
        exitmonitor r79;

     label52:
        throw $r64;

     label53:
        $r65 := @caughtexception;

     label54:
        exitmonitor r77;

     label55:
        throw $r65;

     label56:
        $r59 := @caughtexception;

     label57:
        exitmonitor r76;

     label58:
        throw $r59;

     label59:
        $r62 := @caughtexception;

     label60:
        exitmonitor r75;

     label61:
        throw $r62;

     label62:
        $r63 := @caughtexception;

     label63:
        exitmonitor r74;

     label64:
        throw $r63;

     label65:
        $r66 := @caughtexception;

     label66:
        exitmonitor r73;

     label67:
        throw $r66;

     label68:
        $r60 := @caughtexception;

     label69:
        exitmonitor r71;

     label70:
        throw $r60;

     label71:
        $r61 := @caughtexception;

     label72:
        exitmonitor r67;

     label73:
        throw $r61;

     label74:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Audioserver died.");

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 4, 1, 0, 0, null, 500);

        return;

        catch java.lang.Throwable from label02 to label03 with label71;
        catch java.lang.Throwable from label03 to label04 with label71;
        catch java.lang.Throwable from label05 to label06 with label68;
        catch java.lang.Throwable from label08 to label09 with label68;
        catch java.lang.Throwable from label13 to label14 with label65;
        catch java.lang.Throwable from label16 to label17 with label65;
        catch java.lang.Throwable from label17 to label18 with label65;
        catch java.lang.Throwable from label19 to label20 with label62;
        catch java.lang.Throwable from label21 to label22 with label59;
        catch java.lang.Throwable from label23 to label24 with label56;
        catch java.lang.Throwable from label24 to label25 with label56;
        catch java.lang.Throwable from label26 to label27 with label53;
        catch java.lang.Throwable from label28 to label29 with label50;
        catch java.lang.Throwable from label29 to label30 with label50;
        catch java.lang.Throwable from label31 to label32 with label50;
        catch java.lang.Throwable from label33 to label34 with label50;
        catch java.lang.Throwable from label35 to label36 with label50;
        catch java.lang.Throwable from label37 to label38 with label50;
        catch java.lang.Throwable from label39 to label40 with label47;
        catch java.lang.Throwable from label40 to label41 with label47;
        catch java.lang.Throwable from label41 to label42 with label47;
        catch java.lang.Throwable from label43 to label44 with label47;
        catch java.lang.Throwable from label45 to label46 with label47;
        catch java.lang.Throwable from label48 to label49 with label47;
        catch java.lang.Throwable from label51 to label52 with label50;
        catch java.lang.Throwable from label54 to label55 with label53;
        catch java.lang.Throwable from label57 to label58 with label56;
        catch java.lang.Throwable from label60 to label61 with label59;
        catch java.lang.Throwable from label63 to label64 with label62;
        catch java.lang.Throwable from label66 to label67 with label65;
        catch java.lang.Throwable from label69 to label70 with label68;
        catch java.lang.Throwable from label72 to label73 with label71;
    }

    void onIndicateSystemReady()
    {
        com.android.server.audio.AudioService r0;
        int $i0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $i0 = staticinvoke <android.media.AudioSystem: int systemReady()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 20, 0, 0, 0, null, 1000);

        return;
    }

    public void onSystemReady()
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1, $z2;
        com.android.server.audio.AudioDeviceBroker $r1;
        android.content.Context $r2, $r4, $r9, $r19;
        android.content.pm.PackageManager $r3;
        java.lang.Object $r5, $r10, r24;
        android.app.NotificationManager $r6;
        com.android.server.audio.AudioService$RoleObserver $r7;
        com.android.server.audio.AudioSystemAdapter $r8;
        android.hardware.hdmi.HdmiControlManager $r11, $r12, $r14, $r20, r25;
        android.hardware.hdmi.HdmiPlaybackClient $r13;
        android.hardware.hdmi.HdmiAudioSystemClient $r15;
        java.util.Set $r16, $r17;
        com.android.server.audio.AudioService$MyHdmiControlStatusChangeListenerCallback $r18;
        java.util.concurrent.Executor $r21;
        com.android.server.audio.AudioService$MyHdmiCecVolumeControlFeatureListener $r22;
        java.lang.Throwable $r23;
        short s0;
        android.hardware.hdmi.HdmiTvClient r26;
        com.android.server.audio.AudioService$AudioHandler r28;

        r0 := @this: com.android.server.audio.AudioService;

        r0.<com.android.server.audio.AudioService: boolean mSystemReady> = 1;

        virtualinvoke r0.<com.android.server.audio.AudioService: void scheduleLoadSoundEffects()>();

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r1.<com.android.server.audio.AudioDeviceBroker: void onSystemReady()>();

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z0 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.hdmi.cec");

        s0 = 0;

        if z0 == 0 goto label12;

        r24 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r24;

     label01:
        r0.<com.android.server.audio.AudioService: boolean mHdmiCecSink> = 0;

        $r9 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/hdmi/HdmiControlManager;");

        r25 = (android.hardware.hdmi.HdmiControlManager) $r10;

        r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager> = r25;

     label02:
        if r25 == null goto label04;

     label03:
        $r18 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$MyHdmiControlStatusChangeListenerCallback mHdmiControlStatusChangeListenerCallback>;

        virtualinvoke r25.<android.hardware.hdmi.HdmiControlManager: void addHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)>($r18);

        $r20 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        $r19 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r21 = virtualinvoke $r19.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        $r22 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$MyHdmiCecVolumeControlFeatureListener mMyHdmiCecVolumeControlFeatureListener>;

        virtualinvoke $r20.<android.hardware.hdmi.HdmiControlManager: void addHdmiCecVolumeControlFeatureListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)>($r21, $r22);

     label04:
        $r11 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        r26 = virtualinvoke $r11.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiTvClient getTvClient()>();

        r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient> = r26;

     label05:
        if r26 == null goto label07;

     label06:
        $r17 = r0.<com.android.server.audio.AudioService: java.util.Set mFixedVolumeDevices>;

        $r16 = <android.media.AudioSystem: java.util.Set DEVICE_ALL_HDMI_SYSTEM_AUDIO_AND_SPEAKER_SET>;

        interfaceinvoke $r17.<java.util.Set: boolean removeAll(java.util.Collection)>($r16);

     label07:
        $r12 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        $r13 = virtualinvoke $r12.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiPlaybackClient getPlaybackClient()>();

        r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiPlaybackClient mHdmiPlaybackClient> = $r13;

        $r14 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        $r15 = virtualinvoke $r14.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiAudioSystemClient getAudioSystemClient()>();

        r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiAudioSystemClient mHdmiAudioSystemClient> = $r15;

        exitmonitor r24;

     label08:
        goto label12;

     label09:
        $r23 := @caughtexception;

     label10:
        exitmonitor r24;

     label11:
        throw $r23;

     label12:
        $r4 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r6 = (android.app.NotificationManager) $r5;

        r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm> = $r6;

        r28 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("audio.safemedia.bypass", 0);

        if $z1 == 0 goto label13;

        goto label14;

     label13:
        s0 = 30000;

     label14:
        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r28, 13, 0, 0, 0, "AS.AudioService", s0);

        specialinvoke r0.<com.android.server.audio.AudioService: void initA11yMonitoring()>();

        $r7 = new com.android.server.audio.AudioService$RoleObserver;

        specialinvoke $r7.<com.android.server.audio.AudioService$RoleObserver: void <init>(com.android.server.audio.AudioService)>(r0);

        r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$RoleObserver mRoleObserver> = $r7;

        virtualinvoke $r7.<com.android.server.audio.AudioService$RoleObserver: void register()>();

        virtualinvoke r0.<com.android.server.audio.AudioService: void onIndicateSystemReady()>();

        $r8 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioSystemAdapter mAudioSystem>;

        $z2 = virtualinvoke $r8.<com.android.server.audio.AudioSystemAdapter: boolean isMicrophoneMuted()>();

        r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSystemCached> = $z2;

        specialinvoke r0.<com.android.server.audio.AudioService: void setMicMuteFromSwitchInput()>();

        virtualinvoke r0.<com.android.server.audio.AudioService: void initMinStreamVolumeWithoutModifyAudioSettings()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void onTouchExplorationStateChanged(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void updateDefaultStreamOverrideDelay(boolean)>(z0);

        return;
    }

    public void playSoundEffect(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.audio.AudioService: void playSoundEffectVolume(int,float)>(i0, -1.0F);

        return;
    }

    public void playSoundEffectVolume(int, float)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i2;
        float f0, $f1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        com.android.server.audio.AudioService$AudioHandler $r7;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isStreamMutedByRingerOrZenMode(int)>(1);

        if $z0 == 0 goto label1;

        return;

     label1:
        if i0 >= 10 goto label3;

        if i0 >= 0 goto label2;

        goto label3;

     label2:
        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $f1 = 1000.0F * f0;

        $i2 = (int) $f1;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r7, 5, 2, i0, $i2, null, 0);

        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioService effectType value ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r6);

        return;
    }

    public void playerAttributes(int, android.media.AudioAttributes)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        android.media.AudioAttributes r1;
        com.android.server.audio.PlaybackActivityMonitor $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.AudioAttributes;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.audio.AudioService: void validateAudioAttributesUsage(android.media.AudioAttributes)>(r1);

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<com.android.server.audio.PlaybackActivityMonitor: void playerAttributes(int,android.media.AudioAttributes,int)>(i0, r1, $i1);

        return;
    }

    public void playerEvent(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2;
        com.android.server.audio.PlaybackActivityMonitor $r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<com.android.server.audio.PlaybackActivityMonitor: void playerEvent(int,int,int)>(i0, i1, $i2);

        return;
    }

    public void playerHasOpPlayAudio(int, boolean)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        boolean z0;
        com.android.server.audio.PlaybackActivityMonitor $r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<com.android.server.audio.PlaybackActivityMonitor: void playerHasOpPlayAudio(int,boolean,int)>(i0, z0, $i1);

        return;
    }

    public void postAccessoryPlugMediaUnmute(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 21, 2, i0, 0, null, 0);

        return;
    }

    void postApplyVolumeOnDevice(int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        java.lang.String r1;
        com.android.server.audio.AudioService$DeviceVolumeUpdate $r2;
        com.android.server.audio.AudioService$AudioHandler $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r2 = new com.android.server.audio.AudioService$DeviceVolumeUpdate;

        specialinvoke $r2.<com.android.server.audio.AudioService$DeviceVolumeUpdate: void <init>(int,int,java.lang.String)>(i0, i1, r1);

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r3, 26, 2, 0, 0, $r2, 0);

        return;
    }

    void postCheckVolumeCecOnHdmiConnection(int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String r1;
        com.android.server.audio.AudioService$AudioHandler $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r2, 28, 0, i0, 0, r1, 0);

        return;
    }

    public void postObserveDevicesForAllStreams()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 27, 2, 0, 0, null, 0);

        return;
    }

    public void postSetVolumeIndexOnDevice(int, int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2;
        java.lang.String r1;
        com.android.server.audio.AudioService$DeviceVolumeUpdate $r2;
        com.android.server.audio.AudioService$AudioHandler $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        $r2 = new com.android.server.audio.AudioService$DeviceVolumeUpdate;

        specialinvoke $r2.<com.android.server.audio.AudioService$DeviceVolumeUpdate: void <init>(int,int,int,java.lang.String)>(i0, i1, i2, r1);

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r3, 26, 2, 0, 0, $r2, 0);

        return;
    }

    void postUpdateRingerModeServiceInt()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 25, 2, 0, 0, null, 0);

        return;
    }

    public void recorderEvent(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        com.android.server.audio.RecordingActivityMonitor $r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        virtualinvoke $r1.<com.android.server.audio.RecordingActivityMonitor: void recorderEvent(int,int)>(i0, i1);

        return;
    }

    public java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback, boolean, boolean, boolean, boolean, android.media.projection.IMediaProjection)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, z1, z2, z3, $z4, z5, $z6;
        com.android.server.audio.AudioService$AudioPolicyProxy r1;
        android.media.AudioSystem$DynamicPolicyCallback $r3;
        java.lang.StringBuilder $r4, $r19, r50, r51;
        android.os.IBinder $r6, $r14, $r15, $r17;
        com.android.server.audio.AudioEventLogger$StringEvent $r10;
        java.lang.String $r11, $r25, $r30, $r36, r47;
        com.android.server.audio.AudioEventLogger$Event $r12;
        java.util.HashMap $r13, $r16, r45, r46, r53;
        int $i1, $i2;
        java.lang.Throwable $r26, $r27, $r31, $r37, r48, r52;
        android.os.RemoteException $r32, $r38, r49;
        android.media.audiopolicy.AudioPolicyConfig r39;
        android.media.audiopolicy.IAudioPolicyCallback r40;
        android.media.projection.IMediaProjection r41;
        com.android.server.audio.AudioEventLogger r43;

        r0 := @this: com.android.server.audio.AudioService;

        r39 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r40 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        r41 := @parameter6: android.media.projection.IMediaProjection;

        $r3 = r0.<com.android.server.audio.AudioService: android.media.AudioSystem$DynamicPolicyCallback mDynPolicyCallback>;

        staticinvoke <android.media.AudioSystem: void setDynamicPolicyCallback(android.media.AudioSystem$DynamicPolicyCallback)>($r3);

        if z1 != 0 goto label02;

        if z2 != 0 goto label02;

        if z0 == 0 goto label01;

        goto label02;

     label01:
        z5 = 0;

        goto label03;

     label02:
        z5 = 1;

     label03:
        $z6 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isPolicyRegisterAllowed(android.media.audiopolicy.AudioPolicyConfig,boolean,boolean,android.media.projection.IMediaProjection)>(r39, z5, z3, r41);

        if $z6 != 0 goto label04;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission denied to register audio policy for pid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / uid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", need MODIFY_AUDIO_ROUTING or MediaProjection that can project audio");

        $r25 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r25);

        return null;

     label04:
        r43 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger mDynPolicyLogger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registerAudioPolicy for ");

        $r6 = interfaceinvoke r40.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with config:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r10 = new com.android.server.audio.AudioEventLogger$StringEvent;

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<com.android.server.audio.AudioEventLogger$StringEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AS.AudioService");

        virtualinvoke r43.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r12);

        r45 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r45;

     label05:
        $r13 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r14 = interfaceinvoke r40.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $z4 = virtualinvoke $r13.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r14);

        if $z4 == 0 goto label07;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Cannot re-register policy");

        exitmonitor r45;

     label06:
        return null;

     label07:
        r1 = new com.android.server.audio.AudioService$AudioPolicyProxy;

     label08:
        r46 = r45;

     label09:
        specialinvoke r1.<com.android.server.audio.AudioService$AudioPolicyProxy: void <init>(com.android.server.audio.AudioService,android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>(r0, r39, r40, z0, z1, z2, z3, r41);

     label10:
        r46 = r45;

     label11:
        $r15 = interfaceinvoke r40.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

     label12:
        r46 = r45;

     label13:
        r47 = virtualinvoke r1.<com.android.server.audio.AudioService$AudioPolicyProxy: java.lang.String getRegistrationId()>();

     label14:
        r46 = r45;

     label15:
        $r16 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r17 = interfaceinvoke r40.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r1);

     label16:
        r46 = r45;

     label17:
        exitmonitor r45;

     label18:
        return r47;

     label19:
        $r27 := @caughtexception;

        r48 = $r27;

        goto label22;

     label20:
        $r32 := @caughtexception;

        r49 = $r32;

        goto label36;

     label21:
        $r31 := @caughtexception;

        r48 = $r31;

     label22:
        r46 = r45;

     label23:
        r50 = new java.lang.StringBuilder;

     label24:
        r46 = r45;

     label25:
        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

     label26:
        r46 = r45;

     label27:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Audio policy registration failed for binder ");

     label28:
        r46 = r45;

     label29:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

     label30:
        r46 = r45;

     label31:
        $r30 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", $r30, r48);

     label32:
        r46 = r45;

     label33:
        exitmonitor r45;

     label34:
        return null;

     label35:
        $r38 := @caughtexception;

        r49 = $r38;

     label36:
        r46 = r45;

     label37:
        r51 = new java.lang.StringBuilder;

     label38:
        r46 = r45;

     label39:
        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

     label40:
        r46 = r45;

     label41:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Audio policy registration failed, could not link to ");

     label42:
        r46 = r45;

     label43:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

     label44:
        r46 = r45;

     label45:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" binder death");

     label46:
        r46 = r45;

     label47:
        $r36 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", $r36, r49);

     label48:
        r46 = r45;

     label49:
        exitmonitor r45;

     label50:
        return null;

     label51:
        $r26 := @caughtexception;

        r52 = $r26;

        r53 = r45;

     label52:
        r46 = r53;

     label53:
        exitmonitor r53;

     label54:
        throw r52;

     label55:
        $r37 := @caughtexception;

        r52 = $r37;

        r53 = r46;

        goto label52;

        catch java.lang.Throwable from label05 to label06 with label51;
        catch android.os.RemoteException from label07 to label08 with label35;
        catch java.lang.IllegalStateException from label07 to label08 with label21;
        catch java.lang.Throwable from label07 to label08 with label51;
        catch android.os.RemoteException from label09 to label10 with label20;
        catch java.lang.IllegalStateException from label09 to label10 with label19;
        catch java.lang.Throwable from label09 to label10 with label55;
        catch android.os.RemoteException from label11 to label12 with label20;
        catch java.lang.IllegalStateException from label11 to label12 with label19;
        catch java.lang.Throwable from label11 to label12 with label55;
        catch android.os.RemoteException from label13 to label14 with label20;
        catch java.lang.IllegalStateException from label13 to label14 with label19;
        catch java.lang.Throwable from label13 to label14 with label55;
        catch android.os.RemoteException from label15 to label16 with label20;
        catch java.lang.IllegalStateException from label15 to label16 with label19;
        catch java.lang.Throwable from label15 to label16 with label55;
        catch java.lang.Throwable from label17 to label18 with label55;
        catch java.lang.Throwable from label23 to label24 with label55;
        catch java.lang.Throwable from label25 to label26 with label55;
        catch java.lang.Throwable from label27 to label28 with label55;
        catch java.lang.Throwable from label29 to label30 with label55;
        catch java.lang.Throwable from label31 to label32 with label55;
        catch java.lang.Throwable from label33 to label34 with label55;
        catch java.lang.Throwable from label37 to label38 with label55;
        catch java.lang.Throwable from label39 to label40 with label55;
        catch java.lang.Throwable from label41 to label42 with label55;
        catch java.lang.Throwable from label43 to label44 with label55;
        catch java.lang.Throwable from label45 to label46 with label55;
        catch java.lang.Throwable from label47 to label48 with label55;
        catch java.lang.Throwable from label49 to label50 with label55;
        catch java.lang.Throwable from label53 to label54 with label55;
    }

    public void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1, $r4, $r7;
        com.android.server.audio.AudioService$AsdProxy r2;
        android.os.IBinder $r5, $r6, $r8;
        boolean $z0;
        java.lang.Throwable $r10;
        android.os.RemoteException $r11;
        android.media.IAudioServerStateDispatcher r12;

        r0 := @this: com.android.server.audio.AudioService;

        r12 := @parameter0: android.media.IAudioServerStateDispatcher;

        specialinvoke r0.<com.android.server.audio.AudioService: void checkMonitorAudioServerStatePermission()>();

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        $r5 = interfaceinvoke r12.<android.media.IAudioServerStateDispatcher: android.os.IBinder asBinder()>();

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", "Cannot re-register audio server state dispatcher");

        exitmonitor r1;

     label02:
        return;

     label03:
        r2 = new com.android.server.audio.AudioService$AsdProxy;

        specialinvoke r2.<com.android.server.audio.AudioService$AsdProxy: void <init>(com.android.server.audio.AudioService,android.media.IAudioServerStateDispatcher)>(r0, r12);

     label04:
        $r6 = interfaceinvoke r12.<android.media.IAudioServerStateDispatcher: android.os.IBinder asBinder()>();

        interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0);

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

     label07:
        $r7 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        $r8 = interfaceinvoke r12.<android.media.IAudioServerStateDispatcher: android.os.IBinder asBinder()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r2);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)
    {
        com.android.server.audio.AudioService r0;
        android.media.IPlaybackConfigDispatcher r1;
        android.content.Context $r2;
        int $i0;
        com.android.server.audio.PlaybackActivityMonitor $r3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IPlaybackConfigDispatcher;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        virtualinvoke $r3.<com.android.server.audio.PlaybackActivityMonitor: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher,boolean)>(r1, z0);

        return;
    }

    public void registerRecordingCallback(android.media.IRecordingConfigDispatcher)
    {
        com.android.server.audio.AudioService r0;
        android.media.IRecordingConfigDispatcher r1;
        android.content.Context $r2;
        int $i0;
        com.android.server.audio.RecordingActivityMonitor $r3;
        boolean z0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IRecordingConfigDispatcher;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        virtualinvoke $r3.<com.android.server.audio.RecordingActivityMonitor: void registerRecordingCallback(android.media.IRecordingConfigDispatcher,boolean)>(r1, z0);

        return;
    }

    public void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)
    {
        com.android.server.audio.AudioService r0;
        android.media.IStrategyPreferredDeviceDispatcher r1;
        com.android.server.audio.AudioDeviceBroker $r2;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IStrategyPreferredDeviceDispatcher;

        if r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r2.<com.android.server.audio.AudioDeviceBroker: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>(r1);

        return;
    }

    public void releasePlayer(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        com.android.server.audio.PlaybackActivityMonitor $r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<com.android.server.audio.PlaybackActivityMonitor: void releasePlayer(int,int)>(i0, $i1);

        return;
    }

    public void releaseRecorder(int)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        com.android.server.audio.RecordingActivityMonitor $r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        virtualinvoke $r1.<com.android.server.audio.RecordingActivityMonitor: void releaseRecorder(int)>(i0);

        return;
    }

    public void reloadAudioSettings()
    {
        com.android.server.audio.AudioService r0;

        r0 := @this: com.android.server.audio.AudioService;

        specialinvoke r0.<com.android.server.audio.AudioService: void readAudioSettings(boolean)>(0);

        return;
    }

    public int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Throwable $r3;
        android.media.audiopolicy.AudioPolicyConfig r4;
        android.media.audiopolicy.IAudioPolicyCallback r5;
        com.android.server.audio.AudioService$AudioPolicyProxy r6;
        byte b1;

        r0 := @this: com.android.server.audio.AudioService;

        r4 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r5 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label01:
        r6 = specialinvoke r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback,java.lang.String)>(r5, "Cannot add AudioMix in audio policy");

     label02:
        b1 = -1;

        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return -1;

     label05:
        $r2 = virtualinvoke r4.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList getMixes()>();

        $i0 = virtualinvoke r6.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeMixes(java.util.ArrayList)>($r2);

        if $i0 != 0 goto label07;

     label06:
        b1 = 0;

        goto label07;

     label07:
        exitmonitor r1;

     label08:
        return b1;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int removePreferredDeviceForStrategy(int)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r10;
        java.lang.Object[] $r2, $r8;
        java.lang.Integer $r3, $r9;
        com.android.server.audio.AudioEventLogger$StringEvent $r4;
        com.android.server.audio.AudioEventLogger $r5;
        com.android.server.audio.AudioEventLogger$Event $r6;
        com.android.server.audio.AudioDeviceBroker $r7;
        int i1, i2;

        r0 := @this: com.android.server.audio.AudioService;

        i1 := @parameter0: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("removePreferredDeviceForStrategy strat:%d", $r2);

        $r5 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sDeviceLogger>;

        $r4 = new com.android.server.audio.AudioEventLogger$StringEvent;

        specialinvoke $r4.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>(r1);

        $r6 = virtualinvoke $r4.<com.android.server.audio.AudioEventLogger$StringEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AS.AudioService");

        virtualinvoke $r5.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r6);

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        i2 = virtualinvoke $r7.<com.android.server.audio.AudioDeviceBroker: int removePreferredDeviceForStrategySync(int)>(i1);

        if i2 == 0 goto label1;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r8[0] = $r9;

        $r8[1] = r1;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error %d in %s)", $r8);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r10);

     label1:
        return i2;
    }

    public int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1;
        java.lang.Throwable $r2;
        android.media.audiopolicy.IAudioPolicyCallback r3;
        int i0, i1;
        com.android.server.audio.AudioService$AudioPolicyProxy r4;

        r0 := @this: com.android.server.audio.AudioService;

        r3 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label1:
        r4 = specialinvoke r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback,java.lang.String)>(r3, "Cannot remove device affinity in audio policy");

     label2:
        if r4 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return -1;

     label5:
        i1 = virtualinvoke r4.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUidDeviceAffinities(int)>(i0);

        exitmonitor r1;

     label6:
        return i1;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1;
        java.lang.Throwable $r2;
        android.media.audiopolicy.IAudioPolicyCallback r3;
        int i0, i1;
        com.android.server.audio.AudioService$AudioPolicyProxy r4;

        r0 := @this: com.android.server.audio.AudioService;

        r3 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label1:
        r4 = specialinvoke r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback,java.lang.String)>(r3, "Cannot remove device affinity in audio policy");

     label2:
        if r4 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return -1;

     label5:
        i1 = virtualinvoke r4.<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUserIdDeviceAffinities(int)>(i0);

        exitmonitor r1;

     label6:
        return i1;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int requestAudioFocus(android.media.AudioAttributes, int, android.os.IBinder, android.media.IAudioFocusDispatcher, java.lang.String, java.lang.String, int, android.media.audiopolicy.IAudioPolicyCallback, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, $i4, $i6, $i8;
        android.os.IBinder r1, $r21;
        android.media.IAudioFocusDispatcher r2;
        java.lang.String r3, r4, $r19;
        android.media.audiopolicy.IAudioPolicyCallback r5;
        android.media.MediaMetrics$Item r6, $r8, $r9, $r11, $r13, $r15, $r23, $r27, $r29, $r34;
        java.util.HashMap r7, $r20;
        android.media.MediaMetrics$Key $r10, $r12, $r14, $r16, $r22, $r26, $r28, $r33;
        java.lang.Integer $r17;
        com.android.server.audio.MediaFocusControl $r18;
        boolean $z2, $z3, $z4, $z7;
        android.content.Context $r24;
        java.lang.Exception $r25;
        java.lang.Throwable $r30;
        android.media.AudioAttributes r31;

        r0 := @this: com.android.server.audio.AudioService;

        r31 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.IBinder;

        r2 := @parameter3: android.media.IAudioFocusDispatcher;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        i1 := @parameter6: int;

        r5 := @parameter7: android.media.audiopolicy.IAudioPolicyCallback;

        i2 := @parameter8: int;

        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = new android.media.MediaMetrics$Item;

        specialinvoke $r8.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.service.focus");

        $r9 = virtualinvoke $r8.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i3);

        $r10 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CALLING_PACKAGE>;

        $r11 = virtualinvoke $r9.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r10, r4);

        $r12 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CLIENT_NAME>;

        $r13 = virtualinvoke $r11.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r12, r3);

        $r14 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        $r15 = virtualinvoke $r13.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r14, "requestAudioFocus");

        $r16 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key FLAGS>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r6 = virtualinvoke $r15.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r16, $r17);

        if r31 == null goto label01;

        $z7 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isValidAudioAttributesUsage(android.media.AudioAttributes)>(r31);

        if $z7 != 0 goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "Request using unsupported usage");

        $r28 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r29 = virtualinvoke r6.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r28, "Request using unsupported usage");

        virtualinvoke $r29.<android.media.MediaMetrics$Item: boolean record()>();

        return 0;

     label01:
        $i4 = i1 & 4;

        if $i4 != 4 goto label10;

        $r19 = "AudioFocus_For_Phone_Ring_And_Calls";

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z3 == 0 goto label02;

        $r24 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i8 = virtualinvoke $r24.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i8 == 0 goto label10;

        $r25 = new java.lang.Exception;

        specialinvoke $r25.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AS.AudioService", "Invalid permission to (un)lock audio focus", $r25);

        $r26 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r27 = virtualinvoke r6.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r26, "Invalid permission to (un)lock audio focus");

        virtualinvoke $r27.<android.media.MediaMetrics$Item: boolean record()>();

        return 0;

     label02:
        r7 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r7;

     label03:
        $r20 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r21 = interfaceinvoke r5.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $z4 = virtualinvoke $r20.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r21);

        if $z4 != 0 goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Invalid unregistered AudioPolicy to (un)lock audio focus");

        $r22 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r23 = virtualinvoke r6.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r22, "Invalid unregistered AudioPolicy to (un)lock audio focus");

        virtualinvoke $r23.<android.media.MediaMetrics$Item: boolean record()>();

        exitmonitor r7;

     label04:
        return 0;

     label05:
        exitmonitor r7;

     label06:
        goto label10;

     label07:
        $r30 := @caughtexception;

     label08:
        exitmonitor r7;

     label09:
        throw $r30;

     label10:
        if r4 == null goto label12;

        if r3 == null goto label12;

        if r31 != null goto label11;

        goto label12;

     label11:
        virtualinvoke r6.<android.media.MediaMetrics$Item: boolean record()>();

        $r18 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        $z2 = specialinvoke r0.<com.android.server.audio.AudioService: boolean forceFocusDuckingForAccessibility(android.media.AudioAttributes,int,int)>(r31, i0, i3);

        $i6 = virtualinvoke $r18.<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>(r31, i0, r1, r2, r3, r4, i1, i2, $z2);

        return $i6;

     label12:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Invalid null parameter to request audio focus");

        $r33 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r34 = virtualinvoke r6.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r33, "Invalid null parameter to request audio focus");

        virtualinvoke $r34.<android.media.MediaMetrics$Item: boolean record()>();

        return 0;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    protected void scheduleLoadSoundEffects()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 7, 2, 0, 0, null, 0);

        return;
    }

    protected void sendVolumeUpdate(int, int, int, int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        int[] $r1;
        boolean $z0;
        com.android.server.audio.AudioService$VolumeController $r2;

        r0 := @this: com.android.server.audio.AudioService;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r1 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        i5 = $r1[i2];

        i6 = i0;

        if i5 != 3 goto label1;

        i7 = specialinvoke r0.<com.android.server.audio.AudioService: int updateFlagsForTvPlatform(int)>(i0);

        i6 = i7;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isFullVolumeDevice(int)>(i1);

        if $z0 == 0 goto label1;

        i6 = i7 & -2;

     label1:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeController: void postVolumeChanged(int,int)>(i5, i6);

        return;
    }

    public int setAllowedCapturePolicy(int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i3, i4;
        long l2;
        com.android.server.audio.PlaybackActivityMonitor r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = staticinvoke <android.media.AudioAttributes: int capturePolicyToFlags(int,int)>(i0, 0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        entermonitor r1;

     label1:
        i4 = staticinvoke <android.media.AudioSystem: int setAllowedCapturePolicy(int,int)>(i1, i3);

     label2:
        if i4 != 0 goto label4;

     label3:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        virtualinvoke $r3.<com.android.server.audio.PlaybackActivityMonitor: void setAllowedCapturePolicy(int,int)>(i1, i0);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r1;

     label5:
        return i4;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice, int, int, boolean, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2;
        boolean z0;
        java.lang.IllegalArgumentException $r1, $r6;
        com.android.server.audio.AudioDeviceBroker $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        android.bluetooth.BluetoothDevice r8;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        if r8 == null goto label3;

        if i0 == 2 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal BluetoothProfile state for device  (dis)connection, got ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r2.<com.android.server.audio.AudioDeviceBroker: void postBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>(r8, i0, i1, z0, i2);

        return;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null device");

        throw $r1;
    }

    public void setBluetoothA2dpOn(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        int i0, i1;
        java.lang.String r1, r15;
        android.media.MediaMetrics$Item r2, $r10, $r11, $r12;
        android.media.MediaMetrics$Key r3;
        java.lang.StringBuilder $r4;
        com.android.server.audio.AudioDeviceBroker $r13;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("setBluetoothA2dpOn(");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from u/pid:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new android.media.MediaMetrics$Item;

        specialinvoke $r10.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.device.setBluetoothA2dpOn");

        $r11 = virtualinvoke $r10.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        r2 = virtualinvoke $r11.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setPid(int)>(i1);

        r3 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key STATE>;

        if z0 == 0 goto label1;

        r15 = "on";

        goto label2;

     label1:
        r15 = "off";

     label2:
        $r12 = virtualinvoke r2.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r3, r15);

        virtualinvoke $r12.<android.media.MediaMetrics$Item: boolean record()>();

        $r13 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r13.<com.android.server.audio.AudioDeviceBroker: void setBluetoothA2dpOn_Async(boolean,java.lang.String)>(z0, r1);

        return;
    }

    public void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice, int, boolean, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        boolean z0;
        java.lang.IllegalArgumentException $r1, $r10;
        android.media.IPlaybackConfigDispatcher $r2, $r5;
        com.android.server.audio.PlaybackActivityMonitor $r3, $r6;
        com.android.server.audio.AudioDeviceBroker $r4;
        java.lang.StringBuilder $r7;
        java.lang.String $r11;
        android.bluetooth.BluetoothDevice r12;

        r0 := @this: com.android.server.audio.AudioService;

        r12 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        if r12 == null goto label5;

        if i0 == 2 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal BluetoothProfile state for device  (dis)connection, got ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label2:
        if i0 != 2 goto label3;

        $r6 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $r5 = r0.<com.android.server.audio.AudioService: android.media.IPlaybackConfigDispatcher mVoiceActivityMonitor>;

        virtualinvoke $r6.<com.android.server.audio.PlaybackActivityMonitor: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher,boolean)>($r5, 1);

        goto label4;

     label3:
        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $r2 = r0.<com.android.server.audio.AudioService: android.media.IPlaybackConfigDispatcher mVoiceActivityMonitor>;

        virtualinvoke $r3.<com.android.server.audio.PlaybackActivityMonitor: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>($r2);

     label4:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r4.<com.android.server.audio.AudioDeviceBroker: void postBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int,java.lang.String)>(r12, i0, z0, i1, "AudioService");

        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null device");

        throw $r1;
    }

    public void setBluetoothScoOn(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1;
        int i0, i1, $i2;
        java.lang.String r1, r16;
        android.media.MediaMetrics$Item r2, $r10, $r11, $r12;
        android.media.MediaMetrics$Key r3;
        java.lang.StringBuilder $r4;
        com.android.server.audio.AudioDeviceBroker $r13, $r14;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("setBluetoothScoOn()");

        if $z1 != 0 goto label1;

        return;

     label1:
        $i2 = staticinvoke <android.os.UserHandle: int getCallingAppId()>();

        if $i2 < 10000 goto label2;

        $r14 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r14.<com.android.server.audio.AudioDeviceBroker: void setBluetoothScoOnByApp(boolean)>(z0);

        return;

     label2:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("setBluetoothScoOn(");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from u/pid:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new android.media.MediaMetrics$Item;

        specialinvoke $r10.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.device.setBluetoothScoOn");

        $r11 = virtualinvoke $r10.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        r2 = virtualinvoke $r11.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setPid(int)>(i1);

        r3 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key STATE>;

        if z0 == 0 goto label3;

        r16 = "on";

        goto label4;

     label3:
        r16 = "off";

     label4:
        $r12 = virtualinvoke r2.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r3, r16);

        virtualinvoke $r12.<android.media.MediaMetrics$Item: boolean record()>();

        $r13 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r13.<com.android.server.audio.AudioDeviceBroker: void setBluetoothScoOn(boolean,java.lang.String)>(z0, r1);

        return;
    }

    void setDeviceVolume(com.android.server.audio.AudioService$VolumeStreamState, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        com.android.server.audio.AudioService$AudioHandler $r1;
        int[] $r2;
        boolean $z0, $z1;
        java.util.Set $r3;
        java.lang.Integer $r4;
        com.android.server.audio.AudioService$VolumeStreamState[] $r5, $r9;
        com.android.server.audio.AudioService$VolumeStreamState $r6, r8, $r10;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.audio.AudioService;

        r8 := @parameter0: com.android.server.audio.AudioService$VolumeStreamState;

        i0 := @parameter1: int;

        entermonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label01:
        virtualinvoke r8.<com.android.server.audio.AudioService$VolumeStreamState: void applyDeviceVolume_syncVSS(int)>(i0);

        $i2 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i6 = $i2 - 1;

     label02:
        if i6 < 0 goto label08;

     label03:
        $i3 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$1100(com.android.server.audio.AudioService$VolumeStreamState)>(r8);

        if i6 == $i3 goto label07;

        $r2 = <com.android.server.audio.AudioService: int[] mStreamVolumeAlias>;

        $i4 = $r2[i6];

        $i5 = staticinvoke <com.android.server.audio.AudioService$VolumeStreamState: int access$1100(com.android.server.audio.AudioService$VolumeStreamState)>(r8);

        if $i4 != $i5 goto label07;

        i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getDeviceForStream(int)>(i6);

     label04:
        if i0 == i1 goto label06;

     label05:
        $z0 = r0.<com.android.server.audio.AudioService: boolean mAvrcpAbsVolSupported>;

        if $z0 == 0 goto label06;

        $r3 = <android.media.AudioSystem: java.util.Set DEVICE_OUT_ALL_A2DP_SET>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z1 == 0 goto label06;

        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[i6];

        virtualinvoke $r6.<com.android.server.audio.AudioService$VolumeStreamState: void applyDeviceVolume_syncVSS(int)>(i0);

     label06:
        $r9 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r10 = $r9[i6];

        virtualinvoke $r10.<com.android.server.audio.AudioService$VolumeStreamState: void applyDeviceVolume_syncVSS(int)>(i1);

     label07:
        i6 = i6 + -1;

        goto label02;

     label08:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label09:
        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 1, 2, i0, 0, r8, 500);

        return;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor class "Lcom/android/server/audio/AudioService$VolumeStreamState;";

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        android.media.AudioDeviceAttributes r1;
        int i0, i1, $i2;
        java.lang.String r2, r4;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.AudioDeviceAttributes;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <android.media.AudioManager: void enforceValidVolumeBehavior(int)>(i0);

        r4 = r2;

        if r2 != null goto label1;

        r4 = "";

     label1:
        $i2 = virtualinvoke r1.<android.media.AudioDeviceAttributes: int getType()>();

        i1 = staticinvoke <android.media.AudioDeviceInfo: int convertDeviceTypeToInternalDevice(int)>($i2);

        specialinvoke r0.<com.android.server.audio.AudioService: void setDeviceVolumeBehaviorInternal(int,int,java.lang.String)>(i1, i0, r4);

        specialinvoke r0.<com.android.server.audio.AudioService: void persistDeviceVolumeBehavior(int,int)>(i1, i0);

        return;
    }

    public int setFocusPropertiesForPolicy(int, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        int i0, $i1;
        java.util.HashMap r1, $r3, $r5;
        com.android.server.audio.AudioService$AudioPolicyProxy r2, $r8;
        android.os.IBinder $r4;
        boolean $z0, $z1, z2;
        java.util.Collection $r6;
        java.lang.Object $r7;
        java.lang.Throwable $r9;
        android.media.audiopolicy.IAudioPolicyCallback r10;
        java.util.Iterator r11;
        com.android.server.audio.MediaFocusControl r12;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r10 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback,java.lang.String)>(r10, "Cannot change audio policy focus properties");

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return -1;

     label05:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r4 = interfaceinvoke r10.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label07;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Cannot change audio policy focus properties, unregistered policy");

        exitmonitor r1;

     label06:
        return -1;

     label07:
        z2 = 1;

        if i0 != 1 goto label12;

     label08:
        $r5 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r11 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.android.server.audio.AudioService$AudioPolicyProxy) $r7;

        $i1 = $r8.<com.android.server.audio.AudioService$AudioPolicyProxy: int mFocusDuckBehavior>;

        if $i1 != 1 goto label11;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AS.AudioService", "Cannot change audio policy ducking behavior, already handled");

        exitmonitor r1;

     label10:
        return -1;

     label11:
        goto label09;

     label12:
        r2.<com.android.server.audio.AudioService$AudioPolicyProxy: int mFocusDuckBehavior> = i0;

        r12 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

     label13:
        if i0 != 1 goto label14;

        goto label15;

     label14:
        z2 = 0;

     label15:
        virtualinvoke r12.<com.android.server.audio.MediaFocusControl: void setDuckingInExtPolicyAvailable(boolean)>(z2);

        exitmonitor r1;

     label16:
        return 0;

     label17:
        $r9 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo, int, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        android.media.audiopolicy.IAudioPolicyCallback r1;
        java.util.HashMap r2, $r5;
        java.lang.IllegalArgumentException $r3, $r4;
        android.os.IBinder $r6;
        boolean $z0;
        com.android.server.audio.MediaFocusControl $r7;
        java.lang.Throwable $r8;
        android.media.AudioFocusInfo r9;
        java.lang.IllegalStateException r10;

        r0 := @this: com.android.server.audio.AudioService;

        r9 := @parameter0: android.media.AudioFocusInfo;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.audiopolicy.IAudioPolicyCallback;

        if r9 == null goto label8;

        if r1 == null goto label7;

        r2 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        $r6 = interfaceinvoke r1.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r7.<com.android.server.audio.MediaFocusControl: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int)>(r9, i0);

        exitmonitor r2;

     label2:
        return;

     label3:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unregistered AudioPolicy for external focus");

        throw r10;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r8;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPolicy callback");

        throw $r4;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFocusInfo");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int setHdmiSystemAudioSupported(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        android.hardware.hdmi.HdmiControlManager $r3;
        android.hardware.hdmi.HdmiTvClient $r4;
        com.android.server.audio.AudioDeviceBroker $r5;
        android.hardware.hdmi.HdmiAudioSystemClient $r6;
        java.lang.Throwable $r7;
        int i1;
        byte b2;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        i1 = 0;

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mHdmiClientLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiControlManager mHdmiManager>;

        if $r3 == null goto label08;

        $r4 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiTvClient mHdmiTvClient>;

        if $r4 != null goto label03;

        $r6 = r0.<com.android.server.audio.AudioService: android.hardware.hdmi.HdmiAudioSystemClient mHdmiAudioSystemClient>;

        if $r6 != null goto label03;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "Only Hdmi-Cec enabled TV or audio system device supportssystem audio mode.");

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $z1 = r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported>;

        if $z1 == z0 goto label07;

        r0.<com.android.server.audio.AudioService: boolean mHdmiSystemAudioSupported> = z0;

     label04:
        if z0 == 0 goto label05;

        b2 = 12;

        goto label06;

     label05:
        b2 = 0;

     label06:
        $r5 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r5.<com.android.server.audio.AudioDeviceBroker: void setForceUse_Async(int,int,java.lang.String)>(5, b2, "setHdmiSystemAudioSupported");

     label07:
        i1 = specialinvoke r0.<com.android.server.audio.AudioService: int getDevicesForStream(int)>(3);

     label08:
        exitmonitor r1;

     label09:
        return i1;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setMasterMute(boolean, int, java.lang.String, int)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        int i0, i1, $i2;
        java.lang.String r1;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setMasterMuteInternal(boolean,int,java.lang.String,int,int)>(z0, i0, r1, $i2, i1);

        return;
    }

    public void setMicrophoneMute(boolean, java.lang.String, int)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1;
        java.lang.String r1, r17;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        android.media.MediaMetrics$Item r2, $r4, $r5, $r7, $r11, $r13, $r16, r18;
        android.media.MediaMetrics$Key r3, $r6, $r8, $r10, $r12, $r15;
        android.content.Context $r9;
        android.app.AppOpsManager $r14;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = i1;

        if i1 != 1000 goto label1;

        $i5 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        i6 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i5);

     label1:
        $r4 = new android.media.MediaMetrics$Item;

        specialinvoke $r4.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.mic");

        $r5 = virtualinvoke $r4.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i6);

        $r6 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CALLING_PACKAGE>;

        $r7 = virtualinvoke $r5.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r6, r1);

        $r8 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        r2 = virtualinvoke $r7.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r8, "setMicrophoneMute");

        r3 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key REQUEST>;

        if z0 == 0 goto label2;

        r17 = "mute";

        goto label3;

     label2:
        r17 = "unmute";

     label3:
        r18 = virtualinvoke r2.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r3, r17);

        if z0 != 0 goto label4;

        $r14 = r0.<com.android.server.audio.AudioService: android.app.AppOpsManager mAppOps>;

        $i4 = virtualinvoke $r14.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>(44, i6, r1);

        if $i4 == 0 goto label4;

        $r15 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r16 = virtualinvoke r18.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r15, "disallow unmuting");

        virtualinvoke $r16.<android.media.MediaMetrics$Item: boolean record()>();

        return;

     label4:
        $z1 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("setMicrophoneMute()");

        if $z1 != 0 goto label5;

        $r12 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r13 = virtualinvoke r18.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r12, "!checkAudioSettingsPermission");

        virtualinvoke $r13.<android.media.MediaMetrics$Item: boolean record()>();

        return;

     label5:
        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == $i2 goto label6;

        $r9 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i3 = virtualinvoke $r9.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i3 == 0 goto label6;

        $r10 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r11 = virtualinvoke r18.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r10, "permission");

        virtualinvoke $r11.<android.media.MediaMetrics$Item: boolean record()>();

        return;

     label6:
        r0.<com.android.server.audio.AudioService: boolean mMicMuteFromApi> = z0;

        virtualinvoke r18.<android.media.MediaMetrics$Item: boolean record()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setMicrophoneMuteNoCallerCheck(int)>(i0);

        return;
    }

    public void setMicrophoneMuteFromSwitch(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        int i0;
        android.media.MediaMetrics$Item r1, $r3, $r4, $r6;
        android.media.MediaMetrics$Key r2, $r5;
        java.lang.String r7;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 1000 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", "setMicrophoneMuteFromSwitch() called from non system user!");

        return;

     label1:
        r0.<com.android.server.audio.AudioService: boolean mMicMuteFromSwitch> = z0;

        $r3 = new android.media.MediaMetrics$Item;

        specialinvoke $r3.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.mic");

        $r4 = virtualinvoke $r3.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        $r5 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        r1 = virtualinvoke $r4.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r5, "setMicrophoneMuteFromSwitch");

        r2 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key REQUEST>;

        if z0 == 0 goto label2;

        r7 = "mute";

        goto label3;

     label2:
        r7 = "unmute";

     label3:
        $r6 = virtualinvoke r1.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r2, r7);

        virtualinvoke $r6.<android.media.MediaMetrics$Item: boolean record()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setMicrophoneMuteNoCallerCheck(int)>(i0);

        return;
    }

    public void setMode(int, android.os.IBinder, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r14, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, i11, i12, i13, $i14, i15;
        java.lang.Object r2;
        boolean $z0, $z1, z2;
        android.content.Context $r3;
        com.android.server.audio.AudioDeviceBroker $r4, $r25;
        java.lang.StringBuilder $r15, r24;
        java.lang.Throwable $r21;
        android.os.IBinder r22;

        r0 := @this: com.android.server.audio.AudioService;

        i11 := @parameter0: int;

        r22 := @parameter1: android.os.IBinder;

        r1 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("setMode()");

        if $z0 != 0 goto label01;

        return;

     label01:
        $r3 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i1 != 0 goto label02;

        z2 = 1;

        goto label03;

     label02:
        z2 = 0;

     label03:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if i11 != 2 goto label04;

        if z2 != 0 goto label04;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MODIFY_PHONE_STATE Permission Denial: setMode(MODE_IN_CALL) from pid=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r20);

        return;

     label04:
        if i11 != 4 goto label05;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mIsCallScreeningModeSupported>;

        if $z1 != 0 goto label05;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", "setMode(MODE_CALL_SCREENING) not permitted when call screening is not supported");

        return;

     label05:
        if i11 < -1 goto label19;

        if i11 < 5 goto label06;

        goto label19;

     label06:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        r2 = $r4.<com.android.server.audio.AudioDeviceBroker: java.lang.Object mSetModeLock>;

        entermonitor r2;

        i12 = i11;

        if i11 != -1 goto label08;

     label07:
        i12 = r0.<com.android.server.audio.AudioService: int mMode>;

     label08:
        i13 = virtualinvoke r0.<com.android.server.audio.AudioService: int getModeOwnerPid()>();

        $i2 = r0.<com.android.server.audio.AudioService: int mMode>;

        if i12 == $i2 goto label14;

     label09:
        if i12 == 0 goto label14;

     label10:
        $i3 = r0.<com.android.server.audio.AudioService: int mMode>;

        if $i3 == 2 goto label11;

        $i7 = r0.<com.android.server.audio.AudioService: int mMode>;

        if $i7 != 3 goto label14;

     label11:
        if z2 != 0 goto label14;

        if i13 == i0 goto label14;

     label12:
        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setMode(");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from pid=");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", cannot change mode from ");

        $i5 = r0.<com.android.server.audio.AudioService: int mMode>;

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission or being mode owner");

        $r14 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r14);

        exitmonitor r2;

     label13:
        return;

     label14:
        $i14 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i15 = specialinvoke r0.<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>(i12, r22, i0, $i14, r1);

        exitmonitor r2;

     label15:
        $r25 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r25.<com.android.server.audio.AudioDeviceBroker: void postSetModeOwnerPid(int)>(i15);

        return;

     label16:
        $r21 := @caughtexception;

     label17:
        exitmonitor r2;

     label18:
        throw $r21;

     label19:
        return;

        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void setMultiAudioFocusEnabled(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, $z1;
        com.android.server.audio.MediaFocusControl r1, $r2;
        com.android.server.audio.AudioDeviceBroker $r3;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<com.android.server.audio.MediaFocusControl: boolean getMultiAudioFocusEnabled()>();

        if $z1 == z0 goto label1;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<com.android.server.audio.MediaFocusControl: void updateMultiAudioFocus(boolean)>(z0);

        if z0 != 0 goto label1;

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r3.<com.android.server.audio.AudioDeviceBroker: void postBroadcastBecomingNoisy()>();

     label1:
        return;
    }

    void setMusicMute(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        com.android.server.audio.AudioService$VolumeStreamState[] $r1;
        com.android.server.audio.AudioService$VolumeStreamState $r2;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[3];

        virtualinvoke $r2.<com.android.server.audio.AudioService$VolumeStreamState: boolean muteInternally(boolean)>(z0);

        return;
    }

    public int setPreferredDeviceForStrategy(int, android.media.AudioDeviceAttributes)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1, $r6, $r13, $r17;
        java.lang.Object[] $r2, $r11;
        int $i0, $i1, $i2, i5, i6;
        java.lang.Integer $r3, $r4, $r5, $r12;
        com.android.server.audio.AudioEventLogger$StringEvent $r7;
        com.android.server.audio.AudioEventLogger $r8;
        com.android.server.audio.AudioEventLogger$Event $r9;
        com.android.server.audio.AudioDeviceBroker $r10;
        java.lang.StringBuilder $r14;
        android.media.AudioDeviceAttributes r18;

        r0 := @this: com.android.server.audio.AudioService;

        i5 := @parameter0: int;

        r18 := @parameter1: android.media.AudioDeviceAttributes;

        if r18 != null goto label1;

        return -1;

     label1:
        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $r2 = newarray (java.lang.Object)[4];

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r2[2] = $r5;

        $r6 = virtualinvoke r18.<android.media.AudioDeviceAttributes: java.lang.String toString()>();

        $r2[3] = $r6;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("setPreferredDeviceForStrategy u/pid:%d/%d strat:%d dev:%s", $r2);

        $r8 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sDeviceLogger>;

        $r7 = new com.android.server.audio.AudioEventLogger$StringEvent;

        specialinvoke $r7.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>(r1);

        $r9 = virtualinvoke $r7.<com.android.server.audio.AudioEventLogger$StringEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AS.AudioService");

        virtualinvoke $r8.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r9);

        $i2 = virtualinvoke r18.<android.media.AudioDeviceAttributes: int getRole()>();

        if $i2 != 1 goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported input routing in ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r17);

        return -1;

     label2:
        $r10 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        i6 = virtualinvoke $r10.<com.android.server.audio.AudioDeviceBroker: int setPreferredDeviceForStrategySync(int,android.media.AudioDeviceAttributes)>(i5, r18);

        if i6 == 0 goto label3;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r11[0] = $r12;

        $r11[1] = r1;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error %d in %s)", $r11);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r13);

     label3:
        return i6;
    }

    public void setRingerModeExternal(int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;
        android.app.NotificationManager $r2;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean isAndroidNPlus(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.audio.AudioService: boolean wouldToggleZenMode(int)>(i0);

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.server.audio.AudioService: android.app.NotificationManager mNm>;

        $z2 = virtualinvoke $r2.<android.app.NotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>(r1);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Not allowed to change Do Not Disturb state");

        throw $r3;

     label2:
        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerMode(int,java.lang.String,boolean)>(i0, r1, 1);

        return;
    }

    public void setRingerModeInternal(int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceVolumeController(java.lang.String)>("setRingerModeInternal");

        specialinvoke r0.<com.android.server.audio.AudioService: void setRingerMode(int,java.lang.String,boolean)>(i0, r1, 0);

        return;
    }

    public void setRingtonePlayer(android.media.IRingtonePlayer)
    {
        com.android.server.audio.AudioService r0;
        android.media.IRingtonePlayer r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IRingtonePlayer;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REMOTE_AUDIO_PLAYBACK", null);

        r0.<com.android.server.audio.AudioService: android.media.IRingtonePlayer mRingtonePlayer> = r1;

        return;
    }

    public void setRttEnabled(boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0;
        long l0;
        android.content.Context $r1;
        int $i1, $i3, $i4;
        java.lang.StringBuilder $r2;
        java.lang.String $r7;
        java.lang.Throwable $r8, $r9;
        java.lang.Object r11;

        r0 := @this: com.android.server.audio.AudioService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i1 == 0 goto label01;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MODIFY_PHONE_STATE Permission Denial: setRttEnabled from pid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r7);

        return;

     label01:
        r11 = r0.<com.android.server.audio.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r11;

     label02:
        r0.<com.android.server.audio.AudioService: boolean mRttEnabled> = z0;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        staticinvoke <android.media.AudioSystem: int setRttEnabled(boolean)>(z0);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label05:
        exitmonitor r11;

     label06:
        return;

     label07:
        $r9 := @caughtexception;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label09:
        throw $r9;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r11;

     label12:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setSpeakerphoneOn(android.os.IBinder, boolean)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, z1, $z2;
        int i0, i1;
        android.media.MediaMetrics$Item r1, $r9, $r10, $r11;
        long l2;
        java.lang.StringBuilder $r2;
        com.android.server.audio.AudioDeviceBroker $r8;
        android.content.Intent $r12, r21;
        android.os.UserHandle $r13;
        java.lang.Throwable $r14;
        android.os.IBinder r15;
        java.lang.String r17, r19;
        android.media.MediaMetrics$Key r18;
        android.content.Context r20;

        r0 := @this: com.android.server.audio.AudioService;

        r15 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $z2 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("setSpeakerphoneOn()");

        if $z2 != 0 goto label1;

        return;

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("setSpeakerphoneOn(");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from u/pid:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r17 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        z1 = virtualinvoke $r8.<com.android.server.audio.AudioDeviceBroker: boolean setSpeakerphoneOn(android.os.IBinder,int,boolean,java.lang.String)>(r15, i1, z0, r17);

        $r9 = new android.media.MediaMetrics$Item;

        specialinvoke $r9.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.device.setSpeakerphoneOn");

        $r10 = virtualinvoke $r9.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        r1 = virtualinvoke $r10.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setPid(int)>(i1);

        r18 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key STATE>;

        if z0 == 0 goto label2;

        r19 = "on";

        goto label3;

     label2:
        r19 = "off";

     label3:
        $r11 = virtualinvoke r1.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r18, r19);

        virtualinvoke $r11.<android.media.MediaMetrics$Item: boolean record()>();

        if z1 == 0 goto label7;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        r20 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        r21 = new android.content.Intent;

        specialinvoke r21.<android.content.Intent: void <init>(java.lang.String)>("android.media.action.SPEAKERPHONE_STATE_CHANGED");

        $r12 = virtualinvoke r21.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        $r13 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r20.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r12, $r13);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label7;

     label6:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r14;

     label7:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void setStreamVolume(int, int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        java.lang.String r1, $r9, $r14, $r18;
        android.content.Context $r2, $r5, $r10;
        com.android.server.audio.AudioServiceEvents$VolumeEvent $r3;
        com.android.server.audio.AudioEventLogger $r4;
        java.lang.StringBuilder $r6, $r11, $r15;
        boolean $z0, z1;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        if i0 != 10 goto label1;

        $z0 = specialinvoke r0.<com.android.server.audio.AudioService: boolean canChangeAccessibilityVolume()>();

        if $z0 != 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to call setStreamVolume() for a11y without CHANGE_ACCESSIBILITY_VOLUME  callingPackage=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r18);

        return;

     label1:
        if i0 != 0 goto label2;

        if i1 != 0 goto label2;

        $r10 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i7 = virtualinvoke $r10.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i7 == 0 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to call setStreamVolume() for STREAM_VOICE_CALL and index 0 without MODIFY_PHONE_STATE  callingPackage=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r14);

        return;

     label2:
        if i0 != 11 goto label3;

        $r5 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i5 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i5 == 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to call setStreamVolume() for STREAM_ASSISTANT without MODIFY_AUDIO_ROUTING  callingPackage=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r9);

        return;

     label3:
        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_SETTINGS");

        if $i3 != 0 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        $r4 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r3 = new com.android.server.audio.AudioServiceEvents$VolumeEvent;

        specialinvoke $r3.<com.android.server.audio.AudioServiceEvents$VolumeEvent: void <init>(int,int,int,int,java.lang.String)>(2, i0, i1, i2, r1);

        virtualinvoke $r4.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r3);

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean)>(i0, i1, i2, r1, r1, $i4, z1);

        return;
    }

    public void setSupportedSystemUsages(int[])
    {
        com.android.server.audio.AudioService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        int[] r3;

        r0 := @this: com.android.server.audio.AudioService;

        r3 := @parameter0: int[];

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void verifySystemUsages(int[])>(r3);

        r1 = r0.<com.android.server.audio.AudioService: java.lang.Object mSupportedSystemUsagesLock>;

        entermonitor r1;

     label1:
        staticinvoke <android.media.AudioSystem: int setSupportedSystemUsages(int[])>(r3);

        r0.<com.android.server.audio.AudioService: int[] mSupportedSystemUsages> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int, int[], java.lang.String[])
    {
        com.android.server.audio.AudioService r0;
        int[] r1;
        java.lang.String[] r2;
        java.util.HashMap r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.media.audiopolicy.IAudioPolicyCallback r5;
        int i0, i1;
        com.android.server.audio.AudioService$AudioPolicyProxy r6;

        r0 := @this: com.android.server.audio.AudioService;

        r5 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: java.lang.String[];

        r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r3;

     label01:
        r6 = specialinvoke r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback,java.lang.String)>(r5, "Cannot change device affinity in audio policy");

     label02:
        if r6 != null goto label05;

     label03:
        exitmonitor r3;

     label04:
        return -1;

     label05:
        $z0 = virtualinvoke r6.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean hasMixRoutedToDevices(int[],java.lang.String[])>(r1, r2);

        if $z0 != 0 goto label07;

        exitmonitor r3;

     label06:
        return -1;

     label07:
        i1 = virtualinvoke r6.<com.android.server.audio.AudioService$AudioPolicyProxy: int setUidDeviceAffinities(int,int[],java.lang.String[])>(i0, r1, r2);

        exitmonitor r3;

     label08:
        return i1;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r3;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int, int[], java.lang.String[])
    {
        com.android.server.audio.AudioService r0;
        int[] r1;
        java.lang.String[] r2;
        java.util.HashMap r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.media.audiopolicy.IAudioPolicyCallback r5;
        int i0, i1;
        com.android.server.audio.AudioService$AudioPolicyProxy r6;

        r0 := @this: com.android.server.audio.AudioService;

        r5 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: java.lang.String[];

        r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioPolicies>;

        entermonitor r3;

     label01:
        r6 = specialinvoke r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioPolicyProxy checkUpdateForPolicy(android.media.audiopolicy.IAudioPolicyCallback,java.lang.String)>(r5, "Cannot change device affinity in audio policy");

     label02:
        if r6 != null goto label05;

     label03:
        exitmonitor r3;

     label04:
        return -1;

     label05:
        $z0 = virtualinvoke r6.<com.android.server.audio.AudioService$AudioPolicyProxy: boolean hasMixRoutedToDevices(int[],java.lang.String[])>(r1, r2);

        if $z0 != 0 goto label07;

        exitmonitor r3;

     label06:
        return -1;

     label07:
        i1 = virtualinvoke r6.<com.android.server.audio.AudioService$AudioPolicyProxy: int setUserIdDeviceAffinities(int,int[],java.lang.String[])>(i0, r1, r2);

        exitmonitor r3;

     label08:
        return i1;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r3;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setVibrateSetting(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.audio.AudioService: int mVibrateSetting>;

        $i3 = staticinvoke <android.media.AudioSystem: int getValueForVibrateSetting(int,int,int)>($i2, i0, i1);

        r0.<com.android.server.audio.AudioService: int mVibrateSetting> = $i3;

        specialinvoke r0.<com.android.server.audio.AudioService: void broadcastVibrateSetting(int)>(i0);

        return;
    }

    public void setVolumeController(android.media.IVolumeController)
    {
        com.android.server.audio.AudioService r0;
        android.media.IVolumeController r1;
        android.os.IBinder r2;
        com.android.server.audio.AudioService$VolumeController $r3, $r4, $r8;
        boolean $z0;
        android.os.RemoteException $r5;
        com.android.server.audio.AudioService$4 r6;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IVolumeController;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceVolumeController(java.lang.String)>("set the volume controller");

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        $z0 = virtualinvoke $r3.<com.android.server.audio.AudioService$VolumeController: boolean isSameBinder(android.media.IVolumeController)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r4.<com.android.server.audio.AudioService$VolumeController: void postDismiss()>();

        if r1 == null goto label5;

     label2:
        r2 = interfaceinvoke r1.<android.media.IVolumeController: android.os.IBinder asBinder()>();

        r6 = new com.android.server.audio.AudioService$4;

        specialinvoke r6.<com.android.server.audio.AudioService$4: void <init>(com.android.server.audio.AudioService,android.media.IVolumeController)>(r0, r1);

        interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        $r8 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$VolumeController mVolumeController>;

        virtualinvoke $r8.<com.android.server.audio.AudioService$VolumeController: void setController(android.media.IVolumeController)>(r1);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setVolumeIndexForAttributes(android.media.AudioAttributes, int, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i9;
        android.util.SparseArray $r2, $r3;
        java.lang.Object $r4;
        com.android.server.audio.AudioServiceEvents$VolumeEvent $r5;
        com.android.server.audio.AudioEventLogger $r6;
        java.lang.String $r7, $r10, $r12, $r20, r22;
        java.lang.StringBuilder $r8, $r14;
        java.lang.Throwable $r13;
        android.media.AudioAttributes r21;
        com.android.server.audio.AudioService$VolumeGroupState r24;
        int[] r25;

        r0 := @this: com.android.server.audio.AudioService;

        r21 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r22 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r21, "attr must not be null");

        i2 = specialinvoke r0.<com.android.server.audio.AudioService: int getVolumeGroupIdForAttributes(android.media.AudioAttributes)>(r21);

        $r2 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $i5 = virtualinvoke $r2.<android.util.SparseArray: int indexOfKey(int)>(i2);

        if $i5 >= 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": no volume group found for attributes ");

        $r10 = virtualinvoke r21.<android.media.AudioAttributes: java.lang.String toString()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AS.AudioService", $r12);

        return;

     label1:
        $r3 = <com.android.server.audio.AudioService: android.util.SparseArray sVolumeGroupStates>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r24 = (com.android.server.audio.AudioService$VolumeGroupState) $r4;

        $r6 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r5 = new com.android.server.audio.AudioServiceEvents$VolumeEvent;

        $r7 = virtualinvoke r24.<com.android.server.audio.AudioService$VolumeGroupState: java.lang.String name()>();

        specialinvoke $r5.<com.android.server.audio.AudioServiceEvents$VolumeEvent: void <init>(int,android.media.AudioAttributes,java.lang.String,int,int,java.lang.String)>(8, r21, $r7, i0, i1, r22);

        virtualinvoke $r6.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r5);

        virtualinvoke r24.<com.android.server.audio.AudioService$VolumeGroupState: void setVolumeIndex(int,int)>(i0, i1);

        r25 = virtualinvoke r24.<com.android.server.audio.AudioService$VolumeGroupState: int[] getLegacyStreamTypes()>();

        i3 = lengthof r25;

        i9 = 0;

     label2:
        if i9 >= i3 goto label7;

        i4 = r25[i9];

     label3:
        specialinvoke r0.<com.android.server.audio.AudioService: void ensureValidStreamType(int)>(i4);

     label4:
        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean)>(i4, i0, i1, r22, r22, $i6, 1);

        goto label6;

     label5:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("volume group ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has internal streams (");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), do not change associated stream volume");

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AS.AudioService", $r20);

     label6:
        i9 = i9 + 1;

        goto label2;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public void setVolumePolicy(android.media.VolumePolicy)
    {
        com.android.server.audio.AudioService r0;
        android.media.VolumePolicy r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.VolumePolicy;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceVolumeController(java.lang.String)>("set volume policy");

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy>;

        $z0 = virtualinvoke r1.<android.media.VolumePolicy: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        r0.<com.android.server.audio.AudioService: android.media.VolumePolicy mVolumePolicy> = r1;

     label1:
        return;
    }

    public void setWiredDeviceConnectionState(int, int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        java.lang.String r1, r2, $r11, $r20, r21, r23;
        android.media.MediaMetrics$Item r3, $r5, $r7, $r9, $r12, $r14;
        android.media.MediaMetrics$Key r4, $r6, $r8, $r10, $r13;
        com.android.server.audio.AudioDeviceBroker $r15;
        java.lang.StringBuilder $r16;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: com.android.server.audio.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r21 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        if i1 == 1 goto label2;

        if i1 != 0 goto label1;

        goto label2;

     label1:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label2:
        $r5 = new android.media.MediaMetrics$Item;

        specialinvoke $r5.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.service.setWiredDeviceConnectionState");

        $r6 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key ADDRESS>;

        $r7 = virtualinvoke $r5.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r6, r21);

        $r8 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CLIENT_NAME>;

        $r9 = virtualinvoke $r7.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r8, r2);

        $r10 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key DEVICE>;

        $r11 = staticinvoke <android.media.AudioSystem: java.lang.String getDeviceName(int)>(i0);

        $r12 = virtualinvoke $r9.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r10, $r11);

        $r13 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key NAME>;

        r3 = virtualinvoke $r12.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r13, r1);

        r4 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key STATE>;

        if i1 != 1 goto label3;

        r23 = "connected";

        goto label4;

     label3:
        r23 = "disconnected";

     label4:
        $r14 = virtualinvoke r3.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>(r4, r23);

        virtualinvoke $r14.<android.media.MediaMetrics$Item: boolean record()>();

        $r15 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r15.<com.android.server.audio.AudioDeviceBroker: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r21, r1, r2);

        return;
    }

    public boolean shouldVibrate(int)
    {
        com.android.server.audio.AudioService r0;
        boolean z0, z2, z3;
        int $i0, $i1, i2, i3;

        r0 := @this: com.android.server.audio.AudioService;

        i2 := @parameter0: int;

        z0 = r0.<com.android.server.audio.AudioService: boolean mHasVibrator>;

        z2 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        i3 = virtualinvoke r0.<com.android.server.audio.AudioService: int getVibrateSetting(int)>(i2);

        if i3 == 1 goto label4;

        if i3 == 2 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeExternal()>();

        if $i1 != 1 goto label3;

        z2 = 1;

     label3:
        return z2;

     label4:
        z3 = 0;

        $i0 = virtualinvoke r0.<com.android.server.audio.AudioService: int getRingerModeExternal()>();

        if $i0 == 0 goto label5;

        z3 = 1;

     label5:
        return z3;
    }

    public void silenceRingerModeInternal(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;
        android.content.Context $r2, $r6;
        android.content.res.Resources $r3;
        boolean $z0;
        android.content.ContentResolver $r4;
        android.os.VibrationEffect r5;
        int i1, i2;
        byte b3;
        android.widget.Toast $r7;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.lang.String;

        r5 = null;

        i1 = 0;

        i2 = 0;

        $r2 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17891585);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.audio.AudioService: android.content.ContentResolver mContentResolver>;

        i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r4, "volume_hush_gesture", 0, -2);

     label1:
        if i2 == 1 goto label3;

        if i2 == 2 goto label2;

        b3 = 0;

        goto label4;

     label2:
        r5 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int)>(1);

        b3 = 0;

        i1 = 17041413;

        goto label4;

     label3:
        r5 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int)>(5);

        b3 = 1;

        i1 = 17041414;

     label4:
        specialinvoke r0.<com.android.server.audio.AudioService: boolean maybeVibrate(android.os.VibrationEffect,java.lang.String)>(r5, r1);

        virtualinvoke r0.<com.android.server.audio.AudioService: void setRingerModeInternal(int,java.lang.String)>(b3, r1);

        $r6 = r0.<com.android.server.audio.AudioService: android.content.Context mContext>;

        $r7 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>($r6, i1, 0);

        virtualinvoke $r7.<android.widget.Toast: void show()>();

        return;
    }

    public void startBluetoothSco(android.os.IBinder, int)
    {
        com.android.server.audio.AudioService r0;
        android.os.IBinder r1;
        int i0, i1, i2;
        java.lang.StringBuilder $r2;
        android.media.MediaMetrics$Item $r7, $r8, $r9, $r11, $r14;
        android.media.MediaMetrics$Key $r10, $r12;
        java.lang.String $r13, r16;
        byte b3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.os.IBinder;

        i2 := @parameter1: int;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if i2 >= 18 goto label1;

        b3 = 0;

        goto label2;

     label1:
        b3 = -1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("startBluetoothSco()");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from u/pid:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new android.media.MediaMetrics$Item;

        specialinvoke $r7.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.bluetooth");

        $r8 = virtualinvoke $r7.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        $r9 = virtualinvoke $r8.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setPid(int)>(i1);

        $r10 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        $r11 = virtualinvoke $r9.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r10, "startBluetoothSco");

        $r12 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key SCO_AUDIO_MODE>;

        $r13 = staticinvoke <com.android.server.audio.BtHelper: java.lang.String scoAudioModeToString(int)>(b3);

        $r14 = virtualinvoke $r11.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r12, $r13);

        virtualinvoke $r14.<android.media.MediaMetrics$Item: boolean record()>();

        virtualinvoke r0.<com.android.server.audio.AudioService: void startBluetoothScoInt(android.os.IBinder,int,java.lang.String)>(r1, b3, r16);

        return;
    }

    void startBluetoothScoInt(android.os.IBinder, int, java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        int i0;
        java.lang.String r1, $r8;
        android.media.MediaMetrics$Item r2, $r4, $r6, $r10;
        java.lang.Object r3;
        android.media.MediaMetrics$Key $r5, $r7, $r9;
        boolean $z0, $z2;
        com.android.server.audio.AudioDeviceBroker $r11, $r12;
        java.lang.Throwable $r13;
        android.os.IBinder r14;

        r0 := @this: com.android.server.audio.AudioService;

        r14 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r4 = new android.media.MediaMetrics$Item;

        specialinvoke $r4.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.bluetooth");

        $r5 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        $r6 = virtualinvoke $r4.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r5, "startBluetoothScoInt");

        $r7 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key SCO_AUDIO_MODE>;

        $r8 = staticinvoke <com.android.server.audio.BtHelper: java.lang.String scoAudioModeToString(int)>(i0);

        r2 = virtualinvoke $r6.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r7, $r8);

        $z0 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("startBluetoothSco()");

        if $z0 == 0 goto label7;

        $z2 = r0.<com.android.server.audio.AudioService: boolean mSystemReady>;

        if $z2 != 0 goto label1;

        goto label7;

     label1:
        $r11 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        r3 = $r11.<com.android.server.audio.AudioDeviceBroker: java.lang.Object mSetModeLock>;

        entermonitor r3;

     label2:
        $r12 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r12.<com.android.server.audio.AudioDeviceBroker: void startBluetoothScoForClient_Sync(android.os.IBinder,int,java.lang.String)>(r14, i0, r1);

        exitmonitor r3;

     label3:
        virtualinvoke r2.<android.media.MediaMetrics$Item: boolean record()>();

        return;

     label4:
        $r13 := @caughtexception;

     label5:
        exitmonitor r3;

     label6:
        throw $r13;

     label7:
        $r9 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EARLY_RETURN>;

        $r10 = virtualinvoke r2.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r9, "permission or systemReady");

        virtualinvoke $r10.<android.media.MediaMetrics$Item: boolean record()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void startBluetoothScoVirtualCall(android.os.IBinder)
    {
        com.android.server.audio.AudioService r0;
        android.os.IBinder r1;
        int i0, i1;
        java.lang.StringBuilder $r2;
        android.media.MediaMetrics$Item $r7, $r8, $r9, $r11, $r14;
        android.media.MediaMetrics$Key $r10, $r12;
        java.lang.String $r13, r16;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.os.IBinder;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("startBluetoothScoVirtualCall()");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from u/pid:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new android.media.MediaMetrics$Item;

        specialinvoke $r7.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.bluetooth");

        $r8 = virtualinvoke $r7.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        $r9 = virtualinvoke $r8.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setPid(int)>(i1);

        $r10 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        $r11 = virtualinvoke $r9.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r10, "startBluetoothScoVirtualCall");

        $r12 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key SCO_AUDIO_MODE>;

        $r13 = staticinvoke <com.android.server.audio.BtHelper: java.lang.String scoAudioModeToString(int)>(0);

        $r14 = virtualinvoke $r11.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r12, $r13);

        virtualinvoke $r14.<android.media.MediaMetrics$Item: boolean record()>();

        virtualinvoke r0.<com.android.server.audio.AudioService: void startBluetoothScoInt(android.os.IBinder,int,java.lang.String)>(r1, 0, r16);

        return;
    }

    public android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)
    {
        com.android.server.audio.AudioService r0;
        android.media.IAudioRoutesObserver r1;
        com.android.server.audio.AudioDeviceBroker $r2;
        android.media.AudioRoutesInfo $r3;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IAudioRoutesObserver;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $r3 = virtualinvoke $r2.<com.android.server.audio.AudioDeviceBroker: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>(r1);

        return $r3;
    }

    public void stopBluetoothSco(android.os.IBinder)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1;
        java.lang.String r1, $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        com.android.server.audio.AudioDeviceBroker $r7, $r8;
        android.media.MediaMetrics$Item $r9, $r10, $r11, $r13, $r16;
        android.media.MediaMetrics$Key $r12, $r14;
        java.lang.Throwable $r17;
        android.os.IBinder r18;
        java.lang.Object r20;

        r0 := @this: com.android.server.audio.AudioService;

        r18 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.audio.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("stopBluetoothSco()");

        if $z0 == 0 goto label7;

        $z1 = r0.<com.android.server.audio.AudioService: boolean mSystemReady>;

        if $z1 != 0 goto label1;

        goto label7;

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("stopBluetoothSco()");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from u/pid:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        r20 = $r7.<com.android.server.audio.AudioDeviceBroker: java.lang.Object mSetModeLock>;

        entermonitor r20;

     label2:
        $r8 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r8.<com.android.server.audio.AudioDeviceBroker: void stopBluetoothScoForClient_Sync(android.os.IBinder,java.lang.String)>(r18, r1);

        exitmonitor r20;

     label3:
        $r9 = new android.media.MediaMetrics$Item;

        specialinvoke $r9.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.bluetooth");

        $r10 = virtualinvoke $r9.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)>(i0);

        $r11 = virtualinvoke $r10.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setPid(int)>(i1);

        $r12 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        $r13 = virtualinvoke $r11.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r12, "stopBluetoothSco");

        $r14 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key SCO_AUDIO_MODE>;

        $r15 = staticinvoke <com.android.server.audio.BtHelper: java.lang.String scoAudioModeToString(int)>(-1);

        $r16 = virtualinvoke $r13.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r14, $r15);

        virtualinvoke $r16.<android.media.MediaMetrics$Item: boolean record()>();

        return;

     label4:
        $r17 := @caughtexception;

     label5:
        exitmonitor r20;

     label6:
        throw $r17;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void systemReady()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 16, 2, 0, 0, null, 0);

        return;
    }

    public int trackPlayer(android.media.PlayerBase$PlayerIdCard)
    {
        com.android.server.audio.AudioService r0;
        android.media.PlayerBase$PlayerIdCard r1;
        android.media.AudioAttributes $r2, $r3;
        com.android.server.audio.PlaybackActivityMonitor $r4;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.PlayerBase$PlayerIdCard;

        if r1 == null goto label1;

        $r2 = r1.<android.media.PlayerBase$PlayerIdCard: android.media.AudioAttributes mAttributes>;

        if $r2 == null goto label1;

        $r3 = r1.<android.media.PlayerBase$PlayerIdCard: android.media.AudioAttributes mAttributes>;

        specialinvoke r0.<com.android.server.audio.AudioService: void validateAudioAttributesUsage(android.media.AudioAttributes)>($r3);

     label1:
        $r4 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        $i0 = virtualinvoke $r4.<com.android.server.audio.PlaybackActivityMonitor: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>(r1);

        return $i0;
    }

    public int trackRecorder(android.os.IBinder)
    {
        com.android.server.audio.AudioService r0;
        android.os.IBinder r1;
        com.android.server.audio.RecordingActivityMonitor $r2;
        int $i0;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        $i0 = virtualinvoke $r2.<com.android.server.audio.RecordingActivityMonitor: int trackRecorder(android.os.IBinder)>(r1);

        return $i0;
    }

    public void unloadSoundEffects()
    {
        com.android.server.audio.AudioService r0;
        com.android.server.audio.AudioService$AudioHandler $r1;

        r0 := @this: com.android.server.audio.AudioService;

        $r1 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <com.android.server.audio.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 15, 2, 0, 0, null, 0);

        return;
    }

    public void unregisterAudioFocusClient(java.lang.String)
    {
        com.android.server.audio.AudioService r0;
        java.lang.String r1;
        android.media.MediaMetrics$Item $r2, $r4, $r6;
        android.media.MediaMetrics$Key $r3, $r5;
        com.android.server.audio.MediaFocusControl $r7;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.media.MediaMetrics$Item;

        specialinvoke $r2.<android.media.MediaMetrics$Item: void <init>(java.lang.String)>("audio.service.focus");

        $r3 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key CLIENT_NAME>;

        $r4 = virtualinvoke $r2.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r3, r1);

        $r5 = <android.media.MediaMetrics$Property: android.media.MediaMetrics$Key EVENT>;

        $r6 = virtualinvoke $r4.<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item set(android.media.MediaMetrics$Key,java.lang.Object)>($r5, "unregisterAudioFocusClient");

        virtualinvoke $r6.<android.media.MediaMetrics$Item: boolean record()>();

        $r7 = r0.<com.android.server.audio.AudioService: com.android.server.audio.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r7.<com.android.server.audio.MediaFocusControl: void unregisterAudioFocusClient(java.lang.String)>(r1);

        return;
    }

    public void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        if r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.audio.AudioService: void unregisterAudioPolicyInt(android.media.audiopolicy.IAudioPolicyCallback)>(r1);

        return;
    }

    public void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.AudioService r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        virtualinvoke r0.<com.android.server.audio.AudioService: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>(r1);

        return;
    }

    public void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)
    {
        com.android.server.audio.AudioService r0;
        java.util.HashMap r1, $r3;
        com.android.server.audio.AudioService$AsdProxy r2;
        android.os.IBinder $r4, $r6;
        java.lang.Object $r5;
        int $i0, $i1;
        java.lang.String $r11;
        java.lang.Throwable $r12;
        android.media.IAudioServerStateDispatcher r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.audio.AudioService;

        r13 := @parameter0: android.media.IAudioServerStateDispatcher;

        specialinvoke r0.<com.android.server.audio.AudioService: void checkMonitorAudioServerStatePermission()>();

        r1 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.audio.AudioService: java.util.HashMap mAudioServerStateListeners>;

        $r4 = interfaceinvoke r13.<android.media.IAudioServerStateDispatcher: android.os.IBinder asBinder()>();

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        r2 = (com.android.server.audio.AudioService$AsdProxy) $r5;

     label02:
        if r2 != null goto label05;

     label03:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to unregister unknown audioserver state dispatcher for pid ");

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AS.AudioService", $r11);

        exitmonitor r1;

     label04:
        return;

     label05:
        $r6 = interfaceinvoke r13.<android.media.IAudioServerStateDispatcher: android.os.IBinder asBinder()>();

        interfaceinvoke $r6.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)
    {
        com.android.server.audio.AudioService r0;
        android.media.IPlaybackConfigDispatcher r1;
        com.android.server.audio.PlaybackActivityMonitor $r2;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IPlaybackConfigDispatcher;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.PlaybackActivityMonitor mPlaybackMonitor>;

        virtualinvoke $r2.<com.android.server.audio.PlaybackActivityMonitor: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>(r1);

        return;
    }

    public void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)
    {
        com.android.server.audio.AudioService r0;
        android.media.IRecordingConfigDispatcher r1;
        com.android.server.audio.RecordingActivityMonitor $r2;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IRecordingConfigDispatcher;

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.RecordingActivityMonitor mRecordMonitor>;

        virtualinvoke $r2.<com.android.server.audio.RecordingActivityMonitor: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>(r1);

        return;
    }

    public void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)
    {
        com.android.server.audio.AudioService r0;
        android.media.IStrategyPreferredDeviceDispatcher r1;
        com.android.server.audio.AudioDeviceBroker $r2;

        r0 := @this: com.android.server.audio.AudioService;

        r1 := @parameter0: android.media.IStrategyPreferredDeviceDispatcher;

        if r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.audio.AudioService: void enforceModifyAudioRoutingPermission()>();

        $r2 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        virtualinvoke $r2.<com.android.server.audio.AudioDeviceBroker: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>(r1);

        return;
    }

    void updateAbsVolumeMultiModeDevices(int, int)
    {
        com.android.server.audio.AudioService r0;
        int i0, i1, $i2, i3, i4, $i5;
        boolean $z0, $z1;
        com.android.server.audio.AudioServiceEvents$VolumeEvent $r1;
        com.android.server.audio.AudioEventLogger $r2;
        com.android.server.audio.AudioDeviceBroker $r3;
        java.util.Set r4, $r5, r6;

        r0 := @this: com.android.server.audio.AudioService;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        if i3 != i0 goto label1;

        return;

     label1:
        if i0 == 0 goto label2;

        if i0 == 2 goto label2;

        if i0 == 3 goto label2;

        return;

     label2:
        i4 = specialinvoke r0.<com.android.server.audio.AudioService: int getHearingAidStreamType(int)>(i0);

        $i5 = staticinvoke <android.media.AudioSystem: int getDevicesForStream(int)>(i4);

        r4 = staticinvoke <android.media.AudioSystem: java.util.Set generateAudioDeviceTypesSet(int)>($i5);

        $r5 = r0.<com.android.server.audio.AudioService: java.util.Set mAbsVolumeMultiModeCaseDevices>;

        r6 = staticinvoke <android.media.AudioSystem: java.util.Set intersectionAudioDeviceTypes(java.util.Set,java.util.Set)>($r5, r4);

        $z1 = interfaceinvoke r6.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        return;

     label3:
        $z0 = staticinvoke <android.media.AudioSystem: boolean isSingleAudioDeviceType(java.util.Set,int)>(r6, 134217728);

        if $z0 == 0 goto label4;

        i1 = virtualinvoke r0.<com.android.server.audio.AudioService: int getStreamVolume(int)>(i4);

        $r2 = <com.android.server.audio.AudioService: com.android.server.audio.AudioEventLogger sVolumeLogger>;

        $r1 = new com.android.server.audio.AudioServiceEvents$VolumeEvent;

        specialinvoke $r1.<com.android.server.audio.AudioServiceEvents$VolumeEvent: void <init>(int,int,int,int)>(7, i0, i4, i1);

        virtualinvoke $r2.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r1);

        $r3 = r0.<com.android.server.audio.AudioService: com.android.server.audio.AudioDeviceBroker mDeviceBroker>;

        $i2 = i1 * 10;

        virtualinvoke $r3.<com.android.server.audio.AudioDeviceBroker: void postSetHearingAidVolumeIndex(int,int)>($i2, i4);

     label4:
        return;
    }
}
