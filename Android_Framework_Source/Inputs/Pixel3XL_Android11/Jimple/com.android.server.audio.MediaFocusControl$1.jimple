class com.android.server.audio.MediaFocusControl$1 extends java.lang.Thread
{
    final com.android.server.audio.MediaFocusControl this$0;
    final android.media.audiopolicy.IAudioPolicyCallback val$pcb2;

    void <init>(com.android.server.audio.MediaFocusControl, android.media.audiopolicy.IAudioPolicyCallback)
    {
        com.android.server.audio.MediaFocusControl$1 r0;
        com.android.server.audio.MediaFocusControl r1;
        android.media.audiopolicy.IAudioPolicyCallback r2;

        r0 := @this: com.android.server.audio.MediaFocusControl$1;

        r1 := @parameter0: com.android.server.audio.MediaFocusControl;

        r2 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        r0.<com.android.server.audio.MediaFocusControl$1: com.android.server.audio.MediaFocusControl this$0> = r1;

        r0.<com.android.server.audio.MediaFocusControl$1: android.media.audiopolicy.IAudioPolicyCallback val$pcb2> = r2;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        return;
    }

    public void run()
    {
        com.android.server.audio.MediaFocusControl$1 r0;
        java.lang.Object r1, $r8;
        com.android.server.audio.MediaFocusControl $r3, $r5;
        java.util.Stack $r4, $r7;
        boolean $z0;
        android.media.audiopolicy.IAudioPolicyCallback $r6, $r13;
        com.android.server.audio.FocusRequester $r9;
        android.media.AudioFocusInfo $r10;
        android.os.RemoteException $r11;
        android.os.IBinder $r14;
        java.lang.String $r16;
        java.lang.Throwable $r17;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.audio.MediaFocusControl$1;

        r1 = staticinvoke <com.android.server.audio.MediaFocusControl: java.lang.Object access$000()>();

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.audio.MediaFocusControl$1: com.android.server.audio.MediaFocusControl this$0>;

        $r4 = staticinvoke <com.android.server.audio.MediaFocusControl: java.util.Stack access$500(com.android.server.audio.MediaFocusControl)>($r3);

        $z0 = virtualinvoke $r4.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r6 = r0.<com.android.server.audio.MediaFocusControl$1: android.media.audiopolicy.IAudioPolicyCallback val$pcb2>;

        $r5 = r0.<com.android.server.audio.MediaFocusControl$1: com.android.server.audio.MediaFocusControl this$0>;

        $r7 = staticinvoke <com.android.server.audio.MediaFocusControl: java.util.Stack access$500(com.android.server.audio.MediaFocusControl)>($r5);

        $r8 = virtualinvoke $r7.<java.util.Stack: java.lang.Object peek()>();

        $r9 = (com.android.server.audio.FocusRequester) $r8;

        $r10 = virtualinvoke $r9.<com.android.server.audio.FocusRequester: android.media.AudioFocusInfo toAudioFocusInfo()>();

        interfaceinvoke $r6.<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>($r10, 1);

     label04:
        goto label07;

     label05:
        $r11 := @caughtexception;

     label06:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call notifyAudioFocusGrant() on IAudioPolicyCallback ");

        $r13 = r0.<com.android.server.audio.MediaFocusControl$1: android.media.audiopolicy.IAudioPolicyCallback val$pcb2>;

        $r14 = interfaceinvoke $r13.<android.media.audiopolicy.IAudioPolicyCallback: android.os.IBinder asBinder()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaFocusControl", $r16, $r11);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r17 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }
}
