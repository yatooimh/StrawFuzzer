final class com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp extends java.lang.Object
{
    private final java.util.ArrayList mDuckedPlayers;
    private final int mUid;

    void <init>(int)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r0;
        int i0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: java.util.ArrayList mDuckedPlayers> = $r1;

        r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: int mUid> = i0;

        return;
    }

    void addDuck(android.media.AudioPlaybackConfiguration, boolean)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r0;
        boolean z0, $z1;
        int i0, $i1, $i2;
        java.lang.Integer $r1, $r3, $r6;
        java.util.ArrayList $r2, $r5;
        com.android.server.audio.AudioEventLogger$Event $r4;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r13;
        android.media.AudioPlaybackConfiguration r14;
        com.android.server.audio.AudioEventLogger r15;
        com.android.server.audio.PlaybackActivityMonitor$DuckEvent r16;
        android.media.PlayerProxy r17;
        android.media.VolumeShaper$Configuration r18;
        android.media.VolumeShaper$Operation r19;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp;

        r14 := @parameter0: android.media.AudioPlaybackConfiguration;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.Integer;

        $i1 = virtualinvoke r14.<android.media.AudioPlaybackConfiguration: int getPlayerInterfaceId()>();

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i1);

        i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: java.util.ArrayList mDuckedPlayers>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return;

     label1:
        r15 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger access$100()>();

        r16 = new com.android.server.audio.PlaybackActivityMonitor$DuckEvent;

        specialinvoke r16.<com.android.server.audio.PlaybackActivityMonitor$DuckEvent: void <init>(android.media.AudioPlaybackConfiguration,boolean)>(r14, z0);

        $r4 = virtualinvoke r16.<com.android.server.audio.PlaybackActivityMonitor$DuckEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AudioService.PlaybackActivityMonitor");

        virtualinvoke r15.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r4);

        r17 = virtualinvoke r14.<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()>();

        r18 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Configuration access$200()>();

     label2:
        if z0 == 0 goto label5;

     label3:
        r19 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Operation access$300()>();

     label4:
        goto label6;

     label5:
        r19 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Operation access$400()>();

     label6:
        virtualinvoke r17.<android.media.PlayerProxy: void applyVolumeShaper(android.media.VolumeShaper$Configuration,android.media.VolumeShaper$Operation)>(r18, r19);

        $r5 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: java.util.ArrayList mDuckedPlayers>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error ducking player piid:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        $i2 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: int mUid>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService.PlaybackActivityMonitor", $r13, $r7);

     label9:
        return;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Exception from label5 to label6 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    void dump(java.io.PrintWriter)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r0;
        java.io.PrintWriter r1;
        int i0, $i1;
        java.lang.StringBuilder $r3, $r11;
        java.lang.String $r7, $r14;
        java.util.ArrayList $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.Integer $r10;
        java.util.Iterator r16;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp;

        r1 := @parameter0: java.io.PrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t uid:");

        $i1 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: int mUid>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" piids:");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        $r8 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: java.util.ArrayList mDuckedPlayers>;

        r16 = virtualinvoke $r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r14);

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        return;
    }

    void removeReleased(android.media.AudioPlaybackConfiguration)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r0;
        android.media.AudioPlaybackConfiguration r1;
        java.lang.Integer $r2;
        java.util.ArrayList $r3;
        int $i0;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp;

        r1 := @parameter0: android.media.AudioPlaybackConfiguration;

        $r3 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: java.util.ArrayList mDuckedPlayers>;

        $r2 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: int getPlayerInterfaceId()>();

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>($r2);

        return;
    }

    void removeUnduckAll(java.util.HashMap)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r0;
        java.util.HashMap r1;
        java.util.Iterator r2;
        int i0, $i1;
        android.media.AudioPlaybackConfiguration r3;
        java.lang.StringBuilder r4, $r19;
        java.util.ArrayList $r5, $r6;
        boolean $z0;
        java.lang.Object $r7, $r10;
        java.lang.Integer $r8, $r9;
        java.lang.String $r13, $r24;
        com.android.server.audio.AudioEventLogger$Event $r14;
        android.media.PlayerProxy $r15;
        android.media.VolumeShaper$Configuration $r16;
        android.media.VolumeShaper$Operation $r17;
        java.lang.Exception $r18;
        com.android.server.audio.AudioEventLogger r25;
        com.android.server.audio.AudioEventLogger$StringEvent r26;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp;

        r1 := @parameter0: java.util.HashMap;

        $r5 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: java.util.ArrayList mDuckedPlayers>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        r3 = (android.media.AudioPlaybackConfiguration) $r10;

        if r3 == null goto label5;

     label2:
        r25 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger access$100()>();

        r26 = new com.android.server.audio.AudioEventLogger$StringEvent;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unducking piid:");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke r26.<com.android.server.audio.AudioEventLogger$StringEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AudioService.PlaybackActivityMonitor");

        virtualinvoke r25.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r14);

        $r15 = virtualinvoke r3.<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()>();

        $r16 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Configuration access$500()>();

        $r17 = <android.media.VolumeShaper$Operation: android.media.VolumeShaper$Operation REVERSE>;

        virtualinvoke $r15.<android.media.PlayerProxy: void applyVolumeShaper(android.media.VolumeShaper$Configuration,android.media.VolumeShaper$Operation)>($r16, $r17);

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error unducking player piid:");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        $i1 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: int mUid>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService.PlaybackActivityMonitor", $r24, $r18);

     label5:
        goto label1;

     label6:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: java.util.ArrayList mDuckedPlayers>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
