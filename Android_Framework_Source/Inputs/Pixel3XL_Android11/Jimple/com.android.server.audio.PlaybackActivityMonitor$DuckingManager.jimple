final class com.android.server.audio.PlaybackActivityMonitor$DuckingManager extends java.lang.Object
{
    private final java.util.HashMap mDuckers;

    private void <init>()
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers> = $r1;

        return;
    }

    void <init>(com.android.server.audio.PlaybackActivityMonitor$1)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager r0;
        com.android.server.audio.PlaybackActivityMonitor$1 r1;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        r1 := @parameter0: com.android.server.audio.PlaybackActivityMonitor$1;

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void <init>()>();

        return;
    }

    void checkDuck(android.media.AudioPlaybackConfiguration)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager r0;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r1;
        java.util.HashMap $r2;
        int $i0;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        android.media.AudioPlaybackConfiguration r6;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        r6 := @parameter0: android.media.AudioPlaybackConfiguration;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers>;

        $i0 = virtualinvoke r6.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp) $r4;

     label2:
        if r1 != null goto label3;

        exitmonitor r0;

        return;

     label3:
        virtualinvoke r1.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: void addDuck(android.media.AudioPlaybackConfiguration,boolean)>(r6, 1);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void duckUid(int, java.util.ArrayList)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager r0;
        int i0;
        java.util.HashMap r1, $r2, $r4;
        java.lang.Integer $r3, $r5, $r9;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7;
        android.media.AudioPlaybackConfiguration $r8;
        java.lang.Throwable $r11;
        java.util.ArrayList r12;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r13, r14;
        java.util.Iterator r15;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        i0 := @parameter0: int;

        r12 := @parameter1: java.util.ArrayList;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers>;

        r13 = new com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp;

        specialinvoke r13.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: void <init>(int)>(i0);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r13);

     label2:
        $r4 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r14 = (com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp) $r6;

        r15 = virtualinvoke r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.media.AudioPlaybackConfiguration) $r7;

        virtualinvoke r14.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: void addDuck(android.media.AudioPlaybackConfiguration,boolean)>($r8, 0);

     label4:
        goto label3;

     label5:
        exitmonitor r0;

        return;

     label6:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    void dump(java.io.PrintWriter)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager r0;
        java.util.Iterator r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp $r5;
        java.lang.Throwable $r6;
        java.io.PrintWriter r7;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        r7 := @parameter0: java.io.PrintWriter;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp) $r4;

        virtualinvoke $r5.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: void dump(java.io.PrintWriter)>(r7);

     label3:
        goto label2;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    void removeReleased(android.media.AudioPlaybackConfiguration)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager r0;
        int i0;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r1;
        java.util.HashMap $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        android.media.AudioPlaybackConfiguration r6;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        r6 := @parameter0: android.media.AudioPlaybackConfiguration;

        entermonitor r0;

     label1:
        i0 = virtualinvoke r6.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp) $r4;

     label2:
        if r1 != null goto label3;

        exitmonitor r0;

        return;

     label3:
        virtualinvoke r1.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: void removeReleased(android.media.AudioPlaybackConfiguration)>(r6);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void unduckUid(int, java.util.HashMap)
    {
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager r0;
        int i0;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp r1;
        java.util.HashMap $r2, r6;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        i0 := @parameter0: int;

        r6 := @parameter1: java.util.HashMap;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: java.util.HashMap mDuckers>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r3);

        r1 = (com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp) $r4;

     label2:
        if r1 != null goto label3;

        exitmonitor r0;

        return;

     label3:
        virtualinvoke r1.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager$DuckedApp: void removeUnduckAll(java.util.HashMap)>(r6);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
