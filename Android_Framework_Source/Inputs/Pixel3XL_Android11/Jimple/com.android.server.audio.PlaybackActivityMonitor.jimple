public final class com.android.server.audio.PlaybackActivityMonitor extends java.lang.Object implements android.media.AudioPlaybackConfiguration$PlayerDeathMonitor, com.android.server.audio.PlayerFocusEnforcer
{
    private static final boolean DEBUG;
    private static final android.media.VolumeShaper$Configuration DUCK_ID;
    private static final android.media.VolumeShaper$Configuration DUCK_VSHAPE;
    private static final int FLAGS_FOR_SILENCE_OVERRIDE;
    private static final android.media.VolumeShaper$Operation PLAY_CREATE_IF_NEEDED;
    private static final android.media.VolumeShaper$Operation PLAY_SKIP_RAMP;
    public static final java.lang.String TAG;
    private static final int[] UNDUCKABLE_PLAYER_TYPES;
    private static final int VOLUME_SHAPER_SYSTEM_DUCK_ID;
    private static final com.android.server.audio.AudioEventLogger sEventLogger;
    private final java.util.HashMap mAllowedCapturePolicies;
    private final java.util.ArrayList mBannedUids;
    private final java.util.ArrayList mClients;
    private final android.content.Context mContext;
    private final com.android.server.audio.PlaybackActivityMonitor$DuckingManager mDuckingManager;
    private boolean mHasPublicClients;
    private final int mMaxAlarmVolume;
    private final java.util.ArrayList mMutedPlayers;
    private final java.lang.Object mPlayerLock;
    private final java.util.HashMap mPlayers;
    private int mPrivilegedAlarmActiveCount;
    private int mSavedAlarmVolume;

    static void <clinit>()
    {
        android.media.VolumeShaper$Configuration$Builder $r0, $r1, $r4, $r5, $r9;
        float[] $r2, $r3;
        android.media.AudioAttributes$Builder $r6, $r7;
        android.media.AudioAttributes $r8;
        int $i0;
        long $l1;
        android.media.VolumeShaper$Configuration $r10, $r11;
        android.media.VolumeShaper$Operation$Builder $r12, $r14, $r17, $r19;
        android.media.VolumeShaper$Operation $r13, $r15, $r18, $r20;
        int[] $r16;
        com.android.server.audio.AudioEventLogger $r21;

        <com.android.server.audio.PlaybackActivityMonitor: int VOLUME_SHAPER_SYSTEM_DUCK_ID> = 1;

        <com.android.server.audio.PlaybackActivityMonitor: java.lang.String TAG> = "AudioService.PlaybackActivityMonitor";

        <com.android.server.audio.PlaybackActivityMonitor: int FLAGS_FOR_SILENCE_OVERRIDE> = 192;

        <com.android.server.audio.PlaybackActivityMonitor: boolean DEBUG> = 0;

        $r0 = new android.media.VolumeShaper$Configuration$Builder;

        specialinvoke $r0.<android.media.VolumeShaper$Configuration$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setId(int)>(1);

        $r2 = newarray (float)[2];

        $r2[0] = 0.0F;

        $r2[1] = 1.0F;

        $r3 = newarray (float)[2];

        $r3[0] = 1.0F;

        $r3[1] = 0.2F;

        $r4 = virtualinvoke $r1.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>($r2, $r3);

        $r5 = virtualinvoke $r4.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setOptionFlags(int)>(2);

        $r6 = new android.media.AudioAttributes$Builder;

        specialinvoke $r6.<android.media.AudioAttributes$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(5);

        $r8 = virtualinvoke $r7.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $i0 = staticinvoke <com.android.server.audio.MediaFocusControl: int getFocusRampTimeMs(int,android.media.AudioAttributes)>(3, $r8);

        $l1 = (long) $i0;

        $r9 = virtualinvoke $r5.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>($l1);

        $r10 = virtualinvoke $r9.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>();

        <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Configuration DUCK_VSHAPE> = $r10;

        $r11 = new android.media.VolumeShaper$Configuration;

        specialinvoke $r11.<android.media.VolumeShaper$Configuration: void <init>(int)>(1);

        <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Configuration DUCK_ID> = $r11;

        $r12 = new android.media.VolumeShaper$Operation$Builder;

        $r13 = <android.media.VolumeShaper$Operation: android.media.VolumeShaper$Operation PLAY>;

        specialinvoke $r12.<android.media.VolumeShaper$Operation$Builder: void <init>(android.media.VolumeShaper$Operation)>($r13);

        $r14 = virtualinvoke $r12.<android.media.VolumeShaper$Operation$Builder: android.media.VolumeShaper$Operation$Builder createIfNeeded()>();

        $r15 = virtualinvoke $r14.<android.media.VolumeShaper$Operation$Builder: android.media.VolumeShaper$Operation build()>();

        <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Operation PLAY_CREATE_IF_NEEDED> = $r15;

        $r16 = newarray (int)[2];

        $r16[0] = 13;

        $r16[1] = 3;

        <com.android.server.audio.PlaybackActivityMonitor: int[] UNDUCKABLE_PLAYER_TYPES> = $r16;

        $r17 = new android.media.VolumeShaper$Operation$Builder;

        $r18 = <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Operation PLAY_CREATE_IF_NEEDED>;

        specialinvoke $r17.<android.media.VolumeShaper$Operation$Builder: void <init>(android.media.VolumeShaper$Operation)>($r18);

        $r19 = virtualinvoke $r17.<android.media.VolumeShaper$Operation$Builder: android.media.VolumeShaper$Operation$Builder setXOffset(float)>(1.0F);

        $r20 = virtualinvoke $r19.<android.media.VolumeShaper$Operation$Builder: android.media.VolumeShaper$Operation build()>();

        <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Operation PLAY_SKIP_RAMP> = $r20;

        $r21 = new com.android.server.audio.AudioEventLogger;

        specialinvoke $r21.<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>(100, "playback activity as reported through PlayerBase");

        <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger> = $r21;

        return;
    }

    void <init>(android.content.Context, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        android.content.Context r1;
        int i0;
        java.util.ArrayList $r2, $r5, $r7;
        java.lang.Object $r3;
        java.util.HashMap $r4, $r6;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager $r8;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients> = $r2;

        r0.<com.android.server.audio.PlaybackActivityMonitor: boolean mHasPublicClients> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers> = $r4;

        r0.<com.android.server.audio.PlaybackActivityMonitor: int mSavedAlarmVolume> = -1;

        r0.<com.android.server.audio.PlaybackActivityMonitor: int mPrivilegedAlarmActiveCount> = 0;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mBannedUids> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mMutedPlayers> = $r7;

        $r8 = new com.android.server.audio.PlaybackActivityMonitor$DuckingManager;

        specialinvoke $r8.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void <init>(com.android.server.audio.PlaybackActivityMonitor$1)>(null);

        r0.<com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.PlaybackActivityMonitor$DuckingManager mDuckingManager> = $r8;

        r0.<com.android.server.audio.PlaybackActivityMonitor: android.content.Context mContext> = r1;

        r0.<com.android.server.audio.PlaybackActivityMonitor: int mMaxAlarmVolume> = i0;

        <com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: com.android.server.audio.PlaybackActivityMonitor sListenerDeathMonitor> = r0;

        <android.media.AudioPlaybackConfiguration: android.media.AudioPlaybackConfiguration$PlayerDeathMonitor sPlayerDeathMonitor> = r0;

        return;
    }

    static com.android.server.audio.AudioEventLogger access$100()
    {
        com.android.server.audio.AudioEventLogger $r0;

        $r0 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        return $r0;
    }

    static android.media.VolumeShaper$Configuration access$200()
    {
        android.media.VolumeShaper$Configuration $r0;

        $r0 = <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Configuration DUCK_VSHAPE>;

        return $r0;
    }

    static android.media.VolumeShaper$Operation access$300()
    {
        android.media.VolumeShaper$Operation $r0;

        $r0 = <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Operation PLAY_SKIP_RAMP>;

        return $r0;
    }

    static android.media.VolumeShaper$Operation access$400()
    {
        android.media.VolumeShaper$Operation $r0;

        $r0 = <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Operation PLAY_CREATE_IF_NEEDED>;

        return $r0;
    }

    static android.media.VolumeShaper$Configuration access$500()
    {
        android.media.VolumeShaper$Configuration $r0;

        $r0 = <com.android.server.audio.PlaybackActivityMonitor: android.media.VolumeShaper$Configuration DUCK_ID>;

        return $r0;
    }

    private java.util.ArrayList anonymizeForPublicConsumption(java.util.List)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        android.media.AudioPlaybackConfiguration r2, $r5;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.util.List r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r6 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.AudioPlaybackConfiguration) $r4;

        $z1 = virtualinvoke r2.<android.media.AudioPlaybackConfiguration: boolean isActive()>();

        if $z1 == 0 goto label2;

        $r5 = staticinvoke <android.media.AudioPlaybackConfiguration: android.media.AudioPlaybackConfiguration anonymizedCopy(android.media.AudioPlaybackConfiguration)>(r2);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label2:
        goto label1;

     label3:
        return $r3;
    }

    private boolean checkBanPlayer(android.media.AudioPlaybackConfiguration, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, i1, $i2;
        java.lang.String $r5, $r13;
        android.media.PlayerProxy $r6;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8, r15;
        android.media.AudioPlaybackConfiguration r14;
        boolean z0;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r14 := @parameter0: android.media.AudioPlaybackConfiguration;

        i0 := @parameter1: int;

        $i2 = virtualinvoke r14.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        if $i2 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label6;

        i1 = virtualinvoke r14.<android.media.AudioPlaybackConfiguration: int getPlayerInterfaceId()>();

     label3:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("banning player ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AudioService.PlaybackActivityMonitor", $r5);

        $r6 = virtualinvoke r14.<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()>();

        virtualinvoke $r6.<android.media.PlayerProxy: void pause()>();

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error banning player ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService.PlaybackActivityMonitor", $r13, $r7);

     label6:
        return z0;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static boolean checkConfigurationCaller(int, android.media.AudioPlaybackConfiguration, int)
    {
        int i0, i1, $i2;
        java.lang.StringBuilder $r0;
        java.lang.String $r5;
        android.media.AudioPlaybackConfiguration r6;

        i0 := @parameter0: int;

        r6 := @parameter1: android.media.AudioPlaybackConfiguration;

        i1 := @parameter2: int;

        if r6 != null goto label1;

        return 0;

     label1:
        if i1 == 0 goto label2;

        $i2 = virtualinvoke r6.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        if $i2 == i1 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forbidden operation from uid ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for player ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService.PlaybackActivityMonitor", $r5);

        return 0;

     label2:
        return 1;
    }

    private void checkVolumeForPrivilegedAlarm(android.media.AudioPlaybackConfiguration, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        android.media.AudioPlaybackConfiguration r1;
        android.media.AudioAttributes $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i17, i18, i19, i20;
        android.content.Context $r4;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r1 := @parameter0: android.media.AudioPlaybackConfiguration;

        i18 := @parameter1: int;

        if i18 == 2 goto label1;

        $i17 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: int getPlayerState()>();

        if $i17 != 2 goto label3;

     label1:
        $r2 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>();

        $i0 = virtualinvoke $r2.<android.media.AudioAttributes: int getAllFlags()>();

        $i1 = $i0 & 192;

        if $i1 != 192 goto label3;

        $r3 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>();

        $i2 = virtualinvoke $r3.<android.media.AudioAttributes: int getUsage()>();

        if $i2 != 4 goto label3;

        $r4 = r0.<com.android.server.audio.PlaybackActivityMonitor: android.content.Context mContext>;

        $i3 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: int getClientPid()>();

        $i4 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        $i5 = virtualinvoke $r4.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.MODIFY_PHONE_STATE", $i3, $i4);

        if $i5 != 0 goto label3;

        if i18 != 2 goto label2;

        $i12 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: int getPlayerState()>();

        if $i12 == 2 goto label2;

        i19 = r0.<com.android.server.audio.PlaybackActivityMonitor: int mPrivilegedAlarmActiveCount>;

        $i13 = i19 + 1;

        r0.<com.android.server.audio.PlaybackActivityMonitor: int mPrivilegedAlarmActiveCount> = $i13;

        if i19 != 0 goto label3;

        $i14 = staticinvoke <android.media.AudioSystem: int getStreamVolumeIndex(int,int)>(4, 2);

        r0.<com.android.server.audio.PlaybackActivityMonitor: int mSavedAlarmVolume> = $i14;

        $i15 = r0.<com.android.server.audio.PlaybackActivityMonitor: int mMaxAlarmVolume>;

        staticinvoke <android.media.AudioSystem: int setStreamVolumeIndexAS(int,int,int)>(4, $i15, 2);

        goto label3;

     label2:
        if i18 == 2 goto label3;

        $i6 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: int getPlayerState()>();

        if $i6 != 2 goto label3;

        $i7 = r0.<com.android.server.audio.PlaybackActivityMonitor: int mPrivilegedAlarmActiveCount>;

        i20 = $i7 - 1;

        r0.<com.android.server.audio.PlaybackActivityMonitor: int mPrivilegedAlarmActiveCount> = i20;

        if i20 != 0 goto label3;

        $i8 = staticinvoke <android.media.AudioSystem: int getStreamVolumeIndex(int,int)>(4, 2);

        $i9 = r0.<com.android.server.audio.PlaybackActivityMonitor: int mMaxAlarmVolume>;

        if $i8 != $i9 goto label3;

        $i10 = r0.<com.android.server.audio.PlaybackActivityMonitor: int mSavedAlarmVolume>;

        staticinvoke <android.media.AudioSystem: int setStreamVolumeIndexAS(int,int,int)>(4, $i10, 2);

     label3:
        return;
    }

    private void dispatchPlaybackChange(boolean)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.ArrayList r1, $r6, $r10, $r11, r24, r26, r27;
        java.util.Iterator r2;
        com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient r3;
        java.lang.StringBuilder r5;
        java.util.HashMap $r7, $r8;
        java.util.Collection $r9;
        java.lang.Object $r12, r25;
        int $i0, $i1, $i2, $i3;
        android.media.IPlaybackConfigDispatcher $r13, $r14;
        android.os.RemoteException $r15;
        java.lang.String $r20;
        java.lang.Throwable $r21, $r22, $r23;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        z0 := @parameter0: boolean;

        r24 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r24;

     label01:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        exitmonitor r24;

     label02:
        return;

     label03:
        exitmonitor r24;

     label04:
        r25 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r25;

     label05:
        $r7 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $z2 = virtualinvoke $r7.<java.util.HashMap: boolean isEmpty()>();

        if $z2 == 0 goto label07;

        exitmonitor r25;

     label06:
        return;

     label07:
        r26 = new java.util.ArrayList;

        $r8 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke r26.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        exitmonitor r25;

     label08:
        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r1;

     label09:
        $r10 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        $z3 = virtualinvoke $r10.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 == 0 goto label11;

        exitmonitor r1;

     label10:
        return;

     label11:
        $z4 = r0.<com.android.server.audio.PlaybackActivityMonitor: boolean mHasPublicClients>;

        if $z4 == 0 goto label13;

        r27 = specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList anonymizeForPublicConsumption(java.util.List)>(r26);

     label12:
        goto label14;

     label13:
        r27 = null;

     label14:
        $r11 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        r2 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label23;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient) $r12;

     label16:
        $i0 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: int mErrorCount>;

        if $i0 >= 5 goto label19;

        $z5 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean mIsPrivileged>;

        if $z5 == 0 goto label18;

        $r14 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: android.media.IPlaybackConfigDispatcher mDispatcherCb>;

        interfaceinvoke $r14.<android.media.IPlaybackConfigDispatcher: void dispatchPlaybackConfigChange(java.util.List,boolean)>(r26, z0);

     label17:
        goto label19;

     label18:
        $r13 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: android.media.IPlaybackConfigDispatcher mDispatcherCb>;

        interfaceinvoke $r13.<android.media.IPlaybackConfigDispatcher: void dispatchPlaybackConfigChange(java.util.List,boolean)>(r27, 0);

     label19:
        goto label22;

     label20:
        $r15 := @caughtexception;

     label21:
        $i1 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: int mErrorCount>;

        $i2 = $i1 + 1;

        r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: int mErrorCount> = $i2;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error (");

        $i3 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: int mErrorCount>;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") trying to dispatch playback config change to ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r20 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService.PlaybackActivityMonitor", $r20, $r15);

     label22:
        goto label15;

     label23:
        exitmonitor r1;

     label24:
        return;

     label25:
        $r23 := @caughtexception;

     label26:
        exitmonitor r1;

     label27:
        throw $r23;

     label28:
        $r21 := @caughtexception;

     label29:
        exitmonitor r25;

     label30:
        throw $r21;

     label31:
        $r22 := @caughtexception;

     label32:
        exitmonitor r24;

     label33:
        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label31;
        catch java.lang.Throwable from label03 to label04 with label31;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch android.os.RemoteException from label16 to label17 with label20;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch android.os.RemoteException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label29 to label30 with label28;
        catch java.lang.Throwable from label32 to label33 with label31;
    }

    private void updateAllowedCapturePolicy(android.media.AudioPlaybackConfiguration, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        android.media.AudioPlaybackConfiguration r1;
        int i0, $i1;
        android.media.AudioAttributes $r2, $r4, $r6;
        android.media.AudioAttributes$Builder $r3, $r5;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r1 := @parameter0: android.media.AudioPlaybackConfiguration;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>();

        $i1 = virtualinvoke $r2.<android.media.AudioAttributes: int getAllowedCapturePolicy()>();

        if $i1 < i0 goto label1;

        return;

     label1:
        $r3 = new android.media.AudioAttributes$Builder;

        $r4 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>();

        specialinvoke $r3.<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>($r4);

        $r5 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setAllowedCapturePolicy(int)>(i0);

        $r6 = virtualinvoke $r5.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        virtualinvoke r1.<android.media.AudioPlaybackConfiguration: boolean handleAudioAttributesEvent(android.media.AudioAttributes)>($r6);

        return;
    }

    public void disableAudioForUid(boolean, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        boolean z0, $z1;
        int i0, i1;
        java.lang.Object r1, $r4;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        android.media.AudioPlaybackConfiguration $r5;
        java.util.ArrayList $r6, r9, r12;
        java.lang.Throwable $r8;
        java.lang.Integer r10, r13;
        java.util.Iterator r11;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r1;

     label01:
        r9 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mBannedUids>;

        r10 = new java.lang.Integer;

        specialinvoke r10.<java.lang.Integer: void <init>(int)>(i0);

        i1 = virtualinvoke r9.<java.util.ArrayList: int indexOf(java.lang.Object)>(r10);

     label02:
        if i1 < 0 goto label05;

        if z0 != 0 goto label10;

     label03:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mBannedUids>;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

     label04:
        goto label10;

     label05:
        if z0 == 0 goto label10;

     label06:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r11 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r4 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.media.AudioPlaybackConfiguration) $r4;

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: boolean checkBanPlayer(android.media.AudioPlaybackConfiguration,int)>($r5, i0);

     label08:
        goto label07;

     label09:
        r12 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mBannedUids>;

        r13 = new java.lang.Integer;

        specialinvoke r13.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean duckPlayers(com.android.server.audio.FocusRequester, com.android.server.audio.FocusRequester, boolean)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        com.android.server.audio.FocusRequester r1, r32;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r2, $r10;
        java.util.Iterator r3;
        java.util.ArrayList r4;
        android.media.AudioPlaybackConfiguration r5;
        java.util.HashMap $r6, $r7;
        java.util.Collection $r8;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13;
        int[] $r11;
        java.lang.String $r19, $r21, $r30;
        android.media.AudioAttributes $r22;
        java.lang.Throwable $r31;
        java.lang.StringBuilder r33, r34;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r32 := @parameter0: com.android.server.audio.FocusRequester;

        r1 := @parameter1: com.android.server.audio.FocusRequester;

        z0 := @parameter2: boolean;

        r2 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $z1 = virtualinvoke $r6.<java.util.HashMap: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        exitmonitor r2;

     label02:
        return 1;

     label03:
        $r7 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label04:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.media.AudioPlaybackConfiguration) $r10;

        $i1 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        $z3 = virtualinvoke r32.<com.android.server.audio.FocusRequester: boolean hasSameUid(int)>($i1);

        if $z3 != 0 goto label11;

        $i2 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        $z4 = virtualinvoke r1.<com.android.server.audio.FocusRequester: boolean hasSameUid(int)>($i2);

        if $z4 == 0 goto label11;

        $i3 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getPlayerState()>();

        if $i3 != 2 goto label11;

     label05:
        if z0 != 0 goto label08;

     label06:
        $r22 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>();

        $i10 = virtualinvoke $r22.<android.media.AudioAttributes: int getContentType()>();

        if $i10 != 1 goto label08;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not ducking player ");

        $i11 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getPlayerInterfaceId()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        $i12 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pid:");

        $i13 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getClientPid()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - SPEECH");

        $r30 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AudioService.PlaybackActivityMonitor", $r30);

        exitmonitor r2;

     label07:
        return 0;

     label08:
        $r11 = <com.android.server.audio.PlaybackActivityMonitor: int[] UNDUCKABLE_PLAYER_TYPES>;

        $i4 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getPlayerType()>();

        $z5 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r11, $i4);

        if $z5 == 0 goto label10;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not ducking player ");

        $i5 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getPlayerInterfaceId()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        $i6 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pid:");

        $i7 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getClientPid()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to type:");

        $i8 = virtualinvoke r5.<android.media.AudioPlaybackConfiguration: int getPlayerType()>();

        $r19 = staticinvoke <android.media.AudioPlaybackConfiguration: java.lang.String toLogFriendlyPlayerType(int)>($i8);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AudioService.PlaybackActivityMonitor", $r21);

        exitmonitor r2;

     label09:
        return 0;

     label10:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label11:
        goto label04;

     label12:
        $r9 = r0.<com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.PlaybackActivityMonitor$DuckingManager mDuckingManager>;

        $i0 = virtualinvoke r1.<com.android.server.audio.FocusRequester: int getClientUid()>();

        virtualinvoke $r9.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void duckUid(int,java.util.ArrayList)>($i0, r4);

        exitmonitor r2;

     label13:
        return 1;

     label14:
        $r31 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r31;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected void dump(java.io.PrintWriter)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        java.util.Iterator r1, r56, r59, r61, r64;
        com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient r2;
        java.lang.StringBuilder $r3, r53, r60, r62, r66;
        java.text.DateFormat $r5;
        java.util.Date $r6;
        java.lang.String $r7, $r9, $r26, $r31, $r36, $r43, $r45, r54;
        java.util.ArrayList $r10, $r14, $r15, r52, r55;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.HashMap $r11, $r17, $r38, r63;
        java.util.Set $r12, $r18;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager $r13;
        com.android.server.audio.AudioEventLogger $r16;
        java.lang.Object $r19, $r21, $r24, $r27, $r32, $r37, $r39, $r40, r51;
        java.lang.Integer $r28, $r33, r57;
        java.lang.Throwable $r46, $r47, $r48;
        java.io.PrintWriter r49;
        android.media.AudioPlaybackConfiguration r58;
        int i0, i1;
        java.util.Map$Entry r65;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r49 := @parameter0: java.io.PrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPlaybackActivityMonitor dump time: ");

        $r5 = staticinvoke <java.text.DateFormat: java.text.DateFormat getTimeInstance()>();

        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>()>();

        $r7 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        r51 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r51;

     label01:
        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>("\n  playback listeners:");

        r52 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r52;

     label02:
        $r10 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        r1 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r40 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient) $r40;

        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $z5 = r2.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean mIsPrivileged>;

        if $z5 == 0 goto label05;

     label04:
        r54 = "(S)";

        goto label06;

     label05:
        r54 = "(P)";

     label06:
        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        $r43 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r49.<java.io.PrintWriter: void print(java.lang.String)>($r45);

     label07:
        goto label03;

     label08:
        exitmonitor r52;

     label09:
        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>("\n  players:");

        r55 = new java.util.ArrayList;

        $r11 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.util.Set keySet()>();

        specialinvoke r55.<java.util.ArrayList: void <init>(java.util.Collection)>($r12);

        staticinvoke <java.util.Collections: void sort(java.util.List)>(r55);

        r56 = interfaceinvoke r55.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r37 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.lang.Integer) $r37;

        $r38 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r39 = virtualinvoke $r38.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r57);

        r58 = (android.media.AudioPlaybackConfiguration) $r39;

     label11:
        if r58 == null goto label13;

     label12:
        virtualinvoke r58.<android.media.AudioPlaybackConfiguration: void dump(java.io.PrintWriter)>(r49);

     label13:
        goto label10;

     label14:
        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>("\n  ducked players piids:");

        $r13 = r0.<com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.PlaybackActivityMonitor$DuckingManager mDuckingManager>;

        virtualinvoke $r13.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void dump(java.io.PrintWriter)>(r49);

        virtualinvoke r49.<java.io.PrintWriter: void print(java.lang.String)>("\n  muted player piids:");

        $r14 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mMutedPlayers>;

        r59 = virtualinvoke $r14.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z2 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label17;

        $r32 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        $r33 = (java.lang.Integer) $r32;

        i0 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        r60 = new java.lang.StringBuilder;

        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r36 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r49.<java.io.PrintWriter: void print(java.lang.String)>($r36);

     label16:
        goto label15;

     label17:
        virtualinvoke r49.<java.io.PrintWriter: void println()>();

        virtualinvoke r49.<java.io.PrintWriter: void print(java.lang.String)>("\n  banned uids:");

        $r15 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mBannedUids>;

        r61 = virtualinvoke $r15.<java.util.ArrayList: java.util.Iterator iterator()>();

     label18:
        $z3 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label20;

        $r27 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>();

        $r28 = (java.lang.Integer) $r27;

        i1 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();

        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r31 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r49.<java.io.PrintWriter: void print(java.lang.String)>($r31);

     label19:
        goto label18;

     label20:
        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        $r16 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        virtualinvoke $r16.<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>(r49);

        exitmonitor r51;

     label21:
        r63 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        entermonitor r63;

     label22:
        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>("\n  allowed capture policies:");

        $r17 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r18 = virtualinvoke $r17.<java.util.HashMap: java.util.Set entrySet()>();

        r64 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label23:
        $z4 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label25;

        $r19 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (java.util.Map$Entry) $r19;

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  uid: ");

        $r21 = interfaceinvoke r65.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" policy: ");

        $r24 = interfaceinvoke r65.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r49.<java.io.PrintWriter: void println(java.lang.String)>($r26);

     label24:
        goto label23;

     label25:
        exitmonitor r63;

     label26:
        return;

     label27:
        $r46 := @caughtexception;

     label28:
        exitmonitor r63;

     label29:
        throw $r46;

     label30:
        $r48 := @caughtexception;

     label31:
        exitmonitor r52;

     label32:
        throw $r48;

     label33:
        $r47 := @caughtexception;

     label34:
        exitmonitor r51;

     label35:
        throw $r47;

        catch java.lang.Throwable from label01 to label02 with label33;
        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label06 to label07 with label30;
        catch java.lang.Throwable from label08 to label09 with label30;
        catch java.lang.Throwable from label09 to label10 with label33;
        catch java.lang.Throwable from label10 to label11 with label33;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Throwable from label14 to label15 with label33;
        catch java.lang.Throwable from label15 to label16 with label33;
        catch java.lang.Throwable from label17 to label18 with label33;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label20 to label21 with label33;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label31 to label32 with label30;
        catch java.lang.Throwable from label32 to label33 with label33;
        catch java.lang.Throwable from label34 to label35 with label33;
    }

    java.util.List getActivePlaybackConfigurations(boolean)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        boolean z0;
        java.util.HashMap r1, $r2, $r4;
        java.util.Collection $r3, $r5;
        java.lang.Throwable $r6, $r7;
        java.util.ArrayList r8, r10, r11;
        java.lang.Object r9;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        entermonitor r1;

        if z0 == 0 goto label03;

     label01:
        r8 = new java.util.ArrayList;

        $r4 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        exitmonitor r1;

     label02:
        return r8;

     label03:
        r9 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r9;

     label04:
        r10 = new java.util.ArrayList;

        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke r10.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r11 = specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList anonymizeForPublicConsumption(java.util.List)>(r10);

        exitmonitor r9;

     label05:
        exitmonitor r1;

     label06:
        return r11;

     label07:
        $r6 := @caughtexception;

     label08:
        exitmonitor r9;

     label09:
        throw $r6;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.util.HashMap getAllAllowedCapturePolicies()
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        $r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        return $r1;
    }

    public int getAllowedCapturePolicy(int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, $i1;
        java.util.HashMap $r1;
        java.lang.Integer $r2, $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public boolean isPlaybackActiveForUid(int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, $i1;
        java.lang.Object r1, $r5;
        android.media.AudioPlaybackConfiguration r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        boolean $z0, $z1;
        java.lang.Throwable $r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r7 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.AudioPlaybackConfiguration) $r5;

        $z1 = virtualinvoke r2.<android.media.AudioPlaybackConfiguration: boolean isActive()>();

        if $z1 == 0 goto label4;

        $i1 = virtualinvoke r2.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        if $i1 != i0 goto label4;

        exitmonitor r1;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return 0;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void mutePlayersForCall(int[])
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        java.lang.Object r1, $r8, $r10;
        java.util.Iterator r2;
        java.lang.Integer r3, r28;
        android.media.AudioPlaybackConfiguration r4;
        int i0, i1, $i2, $i3, i5, i6;
        com.android.server.audio.AudioEventLogger r5;
        java.util.HashMap $r6, $r9;
        java.util.Set $r7;
        android.media.AudioAttributes $r11;
        java.lang.String $r16, $r22;
        com.android.server.audio.AudioEventLogger$Event $r17;
        android.media.PlayerProxy $r18;
        java.lang.Exception $r19;
        java.lang.Throwable $r23;
        int[] r24;
        boolean $z2, z3;
        com.android.server.audio.AudioEventLogger$StringEvent r25;
        java.lang.StringBuilder r26, r30;
        java.util.ArrayList r27;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r24 := @parameter0: int[];

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r1;

     label01:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r8;

        $r9 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (android.media.AudioPlaybackConfiguration) $r10;

     label03:
        if r4 != null goto label04;

        goto label02;

     label04:
        $r11 = virtualinvoke r4.<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>();

        i0 = virtualinvoke $r11.<android.media.AudioAttributes: int getUsage()>();

     label05:
        i1 = lengthof r24;

     label06:
        i5 = 0;

     label07:
        z3 = 0;

        if i5 >= i1 goto label09;

        i6 = r24[i5];

        if i0 != i6 goto label08;

        z3 = 1;

        goto label09;

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        if z3 == 0 goto label14;

     label10:
        r5 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r25 = new com.android.server.audio.AudioEventLogger$StringEvent;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("call: muting piid:");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        $i2 = virtualinvoke r4.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke r25.<com.android.server.audio.AudioEventLogger$StringEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AudioService.PlaybackActivityMonitor");

        virtualinvoke r5.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r17);

        $r18 = virtualinvoke r4.<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()>();

        virtualinvoke $r18.<android.media.PlayerProxy: void setVolume(float)>(0.0F);

        r27 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mMutedPlayers>;

        r28 = new java.lang.Integer;

        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        specialinvoke r28.<java.lang.Integer: void <init>(int)>($i3);

        virtualinvoke r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r28);

     label11:
        goto label14;

     label12:
        $r19 := @caughtexception;

     label13:
        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("call: error muting player ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r22 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService.PlaybackActivityMonitor", $r22, $r19);

     label14:
        goto label02;

     label15:
        exitmonitor r1;

     label16:
        return;

     label17:
        $r23 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void playerAttributes(int, android.media.AudioAttributes, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, i1, $i3, $i4, $i5;
        com.android.server.audio.AudioEventLogger r1;
        java.util.HashMap $r2, $r4, $r8, r16, r20;
        java.lang.Integer $r3, $r5, $r7, $r9, $r11, r21;
        boolean $z0, $z1, z2;
        java.lang.Object $r6, $r10, r19, $r22;
        android.media.AudioAttributes$Builder $r12, r18;
        java.lang.Throwable $r13, $r14;
        android.media.AudioAttributes r15, r17;
        android.media.AudioPlaybackConfiguration r23;
        com.android.server.audio.PlaybackActivityMonitor$AudioAttrEvent r24;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        r15 := @parameter1: android.media.AudioAttributes;

        i1 := @parameter2: int;

        r16 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        entermonitor r16;

        r17 = r15;

     label01:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label04;

     label02:
        r17 = r15;

     label03:
        $i3 = virtualinvoke r15.<android.media.AudioAttributes: int getAllowedCapturePolicy()>();

        $r4 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        $i4 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i3 >= $i4 goto label04;

        r18 = new android.media.AudioAttributes$Builder;

        specialinvoke r18.<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>(r15);

        $r8 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.lang.Integer) $r10;

        $i5 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r12 = virtualinvoke r18.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setAllowedCapturePolicy(int)>($i5);

        r17 = virtualinvoke $r12.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

     label04:
        exitmonitor r16;

     label05:
        r19 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r19;

     label06:
        r20 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        r21 = new java.lang.Integer;

        specialinvoke r21.<java.lang.Integer: void <init>(int)>(i0);

        $r22 = virtualinvoke r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r21);

        r23 = (android.media.AudioPlaybackConfiguration) $r22;

        $z1 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: boolean checkConfigurationCaller(int,android.media.AudioPlaybackConfiguration,int)>(i0, r23, i1);

        if $z1 == 0 goto label08;

        r1 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r24 = new com.android.server.audio.PlaybackActivityMonitor$AudioAttrEvent;

        specialinvoke r24.<com.android.server.audio.PlaybackActivityMonitor$AudioAttrEvent: void <init>(int,android.media.AudioAttributes)>(i0, r17);

        virtualinvoke r1.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>(r24);

        z2 = virtualinvoke r23.<android.media.AudioPlaybackConfiguration: boolean handleAudioAttributesEvent(android.media.AudioAttributes)>(r17);

     label07:
        goto label10;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService.PlaybackActivityMonitor", "Error updating audio attributes");

     label09:
        z2 = 0;

     label10:
        exitmonitor r19;

     label11:
        if z2 == 0 goto label12;

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void dispatchPlaybackChange(boolean)>(0);

     label12:
        return;

     label13:
        $r13 := @caughtexception;

     label14:
        exitmonitor r19;

     label15:
        throw $r13;

     label16:
        $r14 := @caughtexception;

     label17:
        exitmonitor r16;

     label18:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void playerDeath(int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void releasePlayer(int,int)>(i0, 0);

        return;
    }

    public void playerEvent(int, int, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, i1, i2, $i3, $i5;
        java.lang.Object r1, $r2, $r8;
        boolean $z0, $z1, $z2, z3, z4;
        java.lang.String $r5, $r13;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager $r6;
        java.util.ArrayList $r7;
        java.lang.Integer $r9, r16;
        java.lang.Throwable $r14;
        java.util.HashMap r15;
        android.media.AudioPlaybackConfiguration r17;
        com.android.server.audio.AudioEventLogger r18, r21;
        com.android.server.audio.PlaybackActivityMonitor$PlayerEvent r19;
        java.util.Iterator r20;
        com.android.server.audio.AudioEventLogger$StringEvent r22;
        java.lang.StringBuilder r23, r24;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r1;

     label01:
        r15 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        r16 = new java.lang.Integer;

        specialinvoke r16.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = virtualinvoke r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (android.media.AudioPlaybackConfiguration) $r2;

     label02:
        if r17 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        r18 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r19 = new com.android.server.audio.PlaybackActivityMonitor$PlayerEvent;

        specialinvoke r19.<com.android.server.audio.PlaybackActivityMonitor$PlayerEvent: void <init>(int,int)>(i0, i1);

        virtualinvoke r18.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>(r19);

     label06:
        if i1 != 2 goto label11;

     label07:
        $r7 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mBannedUids>;

        r20 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r8 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Integer) $r8;

        $i5 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $z2 = specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: boolean checkBanPlayer(android.media.AudioPlaybackConfiguration,int)>(r17, $i5);

        if $z2 == 0 goto label10;

        r21 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r22 = new com.android.server.audio.AudioEventLogger$StringEvent;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not starting piid:");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ,is banned");

        $r13 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r13);

        virtualinvoke r21.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>(r22);

        exitmonitor r1;

     label09:
        return;

     label10:
        goto label08;

     label11:
        $i3 = virtualinvoke r17.<android.media.AudioPlaybackConfiguration: int getPlayerType()>();

        if $i3 != 3 goto label13;

        exitmonitor r1;

     label12:
        return;

     label13:
        $z0 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: boolean checkConfigurationCaller(int,android.media.AudioPlaybackConfiguration,int)>(i0, r17, i2);

        if $z0 == 0 goto label15;

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void checkVolumeForPrivilegedAlarm(android.media.AudioPlaybackConfiguration,int)>(r17, i1);

        z3 = virtualinvoke r17.<android.media.AudioPlaybackConfiguration: boolean handleStateEvent(int)>(i1);

     label14:
        goto label17;

     label15:
        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error handling event ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService.PlaybackActivityMonitor", $r5);

     label16:
        z3 = 0;

     label17:
        if z3 == 0 goto label19;

        if i1 != 2 goto label19;

     label18:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.PlaybackActivityMonitor$DuckingManager mDuckingManager>;

        virtualinvoke $r6.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void checkDuck(android.media.AudioPlaybackConfiguration)>(r17);

     label19:
        exitmonitor r1;

     label20:
        if z3 == 0 goto label23;

        if i1 != 0 goto label21;

        z4 = 1;

        goto label22;

     label21:
        z4 = 0;

     label22:
        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void dispatchPlaybackChange(boolean)>(z4);

     label23:
        return;

     label24:
        $r14 := @caughtexception;

     label25:
        exitmonitor r1;

     label26:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    public void playerHasOpPlayAudio(int, boolean, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, i1;
        boolean z0;
        com.android.server.audio.PlaybackActivityMonitor$PlayerOpPlayAudioEvent $r1;
        com.android.server.audio.AudioEventLogger $r2;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        $r2 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        $r1 = new com.android.server.audio.PlaybackActivityMonitor$PlayerOpPlayAudioEvent;

        specialinvoke $r1.<com.android.server.audio.PlaybackActivityMonitor$PlayerOpPlayAudioEvent: void <init>(int,boolean,int)>(i0, z0, i1);

        virtualinvoke $r2.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r1);

        return;
    }

    void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher, boolean)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        boolean z0, $z1;
        java.util.ArrayList r1, $r3;
        com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient r2;
        java.lang.Throwable $r4;
        android.media.IPlaybackConfigDispatcher r5;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r5 := @parameter0: android.media.IPlaybackConfigDispatcher;

        z0 := @parameter1: boolean;

        if r5 != null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r1;

     label02:
        r2 = new com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient;

        specialinvoke r2.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: void <init>(android.media.IPlaybackConfigDispatcher,boolean)>(r5, z0);

        $z1 = virtualinvoke r2.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean init()>();

        if $z1 == 0 goto label06;

     label03:
        if z0 != 0 goto label05;

     label04:
        r0.<com.android.server.audio.PlaybackActivityMonitor: boolean mHasPublicClients> = 1;

     label05:
        $r3 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void releasePlayer(int, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, i1;
        java.lang.Object r1, $r3;
        com.android.server.audio.AudioEventLogger$StringEvent r2;
        boolean $z0, z1;
        java.lang.String $r6;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager $r8;
        java.lang.Throwable $r9;
        java.util.HashMap r10, r15;
        java.lang.Integer r11, r16;
        android.media.AudioPlaybackConfiguration r12;
        com.android.server.audio.AudioEventLogger r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 = 0;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r1;

     label1:
        r10 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        r11 = new java.lang.Integer;

        specialinvoke r11.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = virtualinvoke r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (android.media.AudioPlaybackConfiguration) $r3;

     label2:
        $z0 = staticinvoke <com.android.server.audio.PlaybackActivityMonitor: boolean checkConfigurationCaller(int,android.media.AudioPlaybackConfiguration,int)>(i0, r12, i1);

        if $z0 == 0 goto label3;

        r13 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r2 = new com.android.server.audio.AudioEventLogger$StringEvent;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("releasing player piid:");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r6);

        virtualinvoke r13.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>(r2);

        r15 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        r16 = new java.lang.Integer;

        specialinvoke r16.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke r15.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r16);

        $r8 = r0.<com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.PlaybackActivityMonitor$DuckingManager mDuckingManager>;

        virtualinvoke $r8.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void removeReleased(android.media.AudioPlaybackConfiguration)>(r12);

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void checkVolumeForPrivilegedAlarm(android.media.AudioPlaybackConfiguration,int)>(r12, 0);

        z1 = virtualinvoke r12.<android.media.AudioPlaybackConfiguration: boolean handleStateEvent(int)>(0);

     label3:
        exitmonitor r1;

     label4:
        if z1 == 0 goto label5;

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void dispatchPlaybackChange(boolean)>(1);

     label5:
        return;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setAllowedCapturePolicy(int, int)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, i1, $i2;
        android.media.AudioPlaybackConfiguration r1;
        java.util.HashMap $r2, $r6, $r9, r14;
        java.lang.Integer $r3, $r4, $r10;
        java.util.Collection $r7;
        boolean $z0;
        java.lang.Object $r8, r15;
        java.lang.Throwable $r12, $r13;
        java.util.Iterator r16;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r14 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        entermonitor r14;

        if i1 != 1 goto label03;

     label01:
        $r9 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r10);

        exitmonitor r14;

     label02:
        return;

     label03:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        exitmonitor r14;

     label04:
        r15 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r15;

     label05:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        r16 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r8 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.media.AudioPlaybackConfiguration) $r8;

        $i2 = virtualinvoke r1.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        if $i2 != i0 goto label07;

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void updateAllowedCapturePolicy(android.media.AudioPlaybackConfiguration,int)>(r1, i1);

     label07:
        goto label06;

     label08:
        exitmonitor r15;

     label09:
        return;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r15;

     label12:
        throw $r12;

     label13:
        $r13 := @caughtexception;

     label14:
        exitmonitor r14;

     label15:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public int trackPlayer(android.media.PlayerBase$PlayerIdCard)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        int i0, i1, $i2, $i3, $i4;
        android.media.AudioPlaybackConfiguration $r1;
        java.util.HashMap $r2, $r6, $r9, r17;
        java.lang.Integer $r3, $r7, $r10, $r12;
        boolean $z0;
        com.android.server.audio.PlaybackActivityMonitor$NewPlayerEvent $r4;
        com.android.server.audio.AudioEventLogger $r5;
        java.lang.Object $r11, r18;
        java.lang.Throwable $r13, $r14;
        android.media.PlayerBase$PlayerIdCard r15;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r15 := @parameter0: android.media.PlayerBase$PlayerIdCard;

        i0 = staticinvoke <android.media.AudioSystem: int newAudioPlayerId()>();

        $r1 = new android.media.AudioPlaybackConfiguration;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        specialinvoke $r1.<android.media.AudioPlaybackConfiguration: void <init>(android.media.PlayerBase$PlayerIdCard,int,int,int)>(r15, i0, $i2, $i3);

        virtualinvoke $r1.<android.media.AudioPlaybackConfiguration: void init()>();

        r17 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        entermonitor r17;

     label01:
        i1 = virtualinvoke $r1.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label02;

        $r9 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mAllowedCapturePolicies>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.audio.PlaybackActivityMonitor: void updateAllowedCapturePolicy(android.media.AudioPlaybackConfiguration,int)>($r1, $i4);

     label02:
        exitmonitor r17;

     label03:
        $r5 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        $r4 = new com.android.server.audio.PlaybackActivityMonitor$NewPlayerEvent;

        specialinvoke $r4.<com.android.server.audio.PlaybackActivityMonitor$NewPlayerEvent: void <init>(android.media.AudioPlaybackConfiguration)>($r1);

        virtualinvoke $r5.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r4);

        r18 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r18;

     label04:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r1);

        exitmonitor r18;

     label05:
        return i0;

     label06:
        $r13 := @caughtexception;

     label07:
        exitmonitor r18;

     label08:
        throw $r13;

     label09:
        $r14 := @caughtexception;

     label10:
        exitmonitor r17;

     label11:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void unduckPlayers(com.android.server.audio.FocusRequester)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        java.lang.Object r1;
        com.android.server.audio.PlaybackActivityMonitor$DuckingManager $r2;
        int $i0;
        java.util.HashMap $r3;
        java.lang.Throwable $r4;
        com.android.server.audio.FocusRequester r5;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r5 := @parameter0: com.android.server.audio.FocusRequester;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.PlaybackActivityMonitor$DuckingManager mDuckingManager>;

        $i0 = virtualinvoke r5.<com.android.server.audio.FocusRequester: int getClientUid()>();

        $r3 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        virtualinvoke $r2.<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void unduckUid(int,java.util.HashMap)>($i0, $r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void unmutePlayersForCall()
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        java.lang.Object r1, $r7, $r11;
        java.util.Iterator r2;
        int i0, $i1;
        com.android.server.audio.AudioEventLogger$StringEvent r3;
        java.util.ArrayList $r4, $r5, $r6;
        boolean $z0, $z1;
        java.lang.Integer $r8, $r10;
        java.util.HashMap $r9;
        java.lang.String $r14, $r22;
        com.android.server.audio.AudioEventLogger$Event $r15;
        android.media.PlayerProxy $r16;
        java.lang.Exception $r17;
        java.lang.Throwable $r23;
        android.media.AudioPlaybackConfiguration r24;
        com.android.server.audio.AudioEventLogger r25;
        java.lang.StringBuilder r26, r28;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.lang.Object mPlayerLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mMutedPlayers>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r5 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mMutedPlayers>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap mPlayers>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        r24 = (android.media.AudioPlaybackConfiguration) $r11;

     label05:
        if r24 == null goto label10;

     label06:
        r25 = <com.android.server.audio.PlaybackActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r3 = new com.android.server.audio.AudioEventLogger$StringEvent;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("call: unmuting piid:");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<com.android.server.audio.AudioEventLogger$StringEvent: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke r3.<com.android.server.audio.AudioEventLogger$StringEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AudioService.PlaybackActivityMonitor");

        virtualinvoke r25.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r15);

        $r16 = virtualinvoke r24.<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()>();

        virtualinvoke $r16.<android.media.PlayerProxy: void setVolume(float)>(1.0F);

     label07:
        goto label10;

     label08:
        $r17 := @caughtexception;

     label09:
        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("call: error unmuting player ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid:");

        $i1 = virtualinvoke r24.<android.media.AudioPlaybackConfiguration: int getClientUid()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r22 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService.PlaybackActivityMonitor", $r22, $r17);

     label10:
        goto label04;

     label11:
        $r6 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mMutedPlayers>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

        exitmonitor r1;

     label12:
        return;

     label13:
        $r23 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)
    {
        com.android.server.audio.PlaybackActivityMonitor r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient r3;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object $r5;
        android.media.IPlaybackConfigDispatcher $r6, r8;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.audio.PlaybackActivityMonitor;

        r8 := @parameter0: android.media.IPlaybackConfigDispatcher;

        if r8 != null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.audio.PlaybackActivityMonitor: java.util.ArrayList mClients>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        z3 = 0;

     label04:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient) $r5;

        $r6 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: android.media.IPlaybackConfigDispatcher mDispatcherCb>;

        $z1 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label06;

        virtualinvoke r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: void release()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label05:
        goto label08;

     label06:
        $z2 = r3.<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean mIsPrivileged>;

        if $z2 != 0 goto label08;

     label07:
        z3 = 1;

     label08:
        goto label04;

     label09:
        r0.<com.android.server.audio.PlaybackActivityMonitor: boolean mHasPublicClients> = z3;

        exitmonitor r1;

     label10:
        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }
}
