final class com.android.server.audio.RecordingActivityMonitor$RecordingState extends java.lang.Object
{
    private android.media.AudioRecordingConfiguration mConfig;
    private final com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler mDeathHandler;
    private boolean mIsActive;
    private final int mRiid;

    void <init>(int, com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler)
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        int i0;
        com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler r1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int mRiid> = i0;

        r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler mDeathHandler> = r1;

        return;
    }

    void <init>(android.media.AudioRecordingConfiguration)
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        android.media.AudioRecordingConfiguration r1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        r1 := @parameter0: android.media.AudioRecordingConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int mRiid> = -1;

        r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler mDeathHandler> = null;

        r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig> = r1;

        return;
    }

    void dump(java.io.PrintWriter)
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2;
        int $i0;
        boolean $z0;
        java.lang.String $r7;
        android.media.AudioRecordingConfiguration r9;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("riid ");

        $i0 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int mRiid>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; active? ");

        $z0 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean mIsActive>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        r9 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig>;

        if r9 == null goto label1;

        virtualinvoke r9.<android.media.AudioRecordingConfiguration: void dump(java.io.PrintWriter)>(r1);

        goto label2;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  no config");

     label2:
        return;
    }

    android.media.AudioRecordingConfiguration getConfig()
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        android.media.AudioRecordingConfiguration $r1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        $r1 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig>;

        return $r1;
    }

    int getPortId()
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        android.media.AudioRecordingConfiguration r1;
        int i0;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.media.AudioRecordingConfiguration: int getClientPortId()>();

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    int getRiid()
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        int $i0;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        $i0 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int mRiid>;

        return $i0;
    }

    boolean hasDeathHandler()
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler $r1;
        boolean z0;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        $r1 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler mDeathHandler>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isActiveConfiguration()
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        boolean $z0, z1;
        android.media.AudioRecordingConfiguration $r1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        $z0 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean mIsActive>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig>;

        if $r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    void release()
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler r1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler mDeathHandler>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: void release()>();

     label1:
        return;
    }

    boolean setActive(boolean)
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        boolean z0, z2, z3;
        android.media.AudioRecordingConfiguration $r1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        z2 := @parameter0: boolean;

        z0 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean mIsActive>;

        if z0 != z2 goto label1;

        return 0;

     label1:
        r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean mIsActive> = z2;

        z3 = 0;

        $r1 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig>;

        if $r1 == null goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    boolean setConfig(android.media.AudioRecordingConfiguration)
    {
        com.android.server.audio.RecordingActivityMonitor$RecordingState r0;
        android.media.AudioRecordingConfiguration r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor$RecordingState;

        r1 := @parameter0: android.media.AudioRecordingConfiguration;

        $r2 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig>;

        $z0 = virtualinvoke r1.<android.media.AudioRecordingConfiguration: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration mConfig> = r1;

        $z1 = r0.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean mIsActive>;

        return $z1;
    }
}
