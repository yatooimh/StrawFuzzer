public final class com.android.server.audio.RecordingActivityMonitor extends java.lang.Object implements android.media.AudioSystem$AudioRecordingCallback
{
    public static final java.lang.String TAG;
    private static final com.android.server.audio.AudioEventLogger sEventLogger;
    private java.util.ArrayList mClients;
    private boolean mHasPublicClients;
    private java.util.concurrent.atomic.AtomicBoolean mLegacyRemoteSubmixActive;
    private java.util.concurrent.atomic.AtomicInteger mLegacyRemoteSubmixRiid;
    private final android.content.pm.PackageManager mPackMan;
    private java.util.List mRecordStates;

    static void <clinit>()
    {
        com.android.server.audio.AudioEventLogger $r0;

        <com.android.server.audio.RecordingActivityMonitor: java.lang.String TAG> = "AudioService.RecordingActivityMonitor";

        $r0 = new com.android.server.audio.AudioEventLogger;

        specialinvoke $r0.<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>(50, "recording activity received by AudioService");

        <com.android.server.audio.RecordingActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger> = $r0;

        return;
    }

    void <init>(android.content.Context)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        android.content.Context r1;
        java.util.ArrayList $r2, $r5;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        android.content.pm.PackageManager $r6;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList mClients> = $r2;

        r0.<com.android.server.audio.RecordingActivityMonitor: boolean mHasPublicClients> = 0;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(-1);

        r0.<com.android.server.audio.RecordingActivityMonitor: java.util.concurrent.atomic.AtomicInteger mLegacyRemoteSubmixRiid> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.audio.RecordingActivityMonitor: java.util.concurrent.atomic.AtomicBoolean mLegacyRemoteSubmixActive> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates> = $r5;

        <com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: com.android.server.audio.RecordingActivityMonitor sMonitor> = r0;

        <com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: com.android.server.audio.RecordingActivityMonitor sMonitor> = r0;

        $r6 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.audio.RecordingActivityMonitor: android.content.pm.PackageManager mPackMan> = $r6;

        return;
    }

    private static java.util.ArrayList anonymizeForPublicConsumption(java.util.List)
    {
        java.util.ArrayList $r1;
        boolean $z0;
        java.lang.Object $r2;
        android.media.AudioRecordingConfiguration $r3, $r4;
        java.util.List r5;
        java.util.Iterator r6;

        r5 := @parameter0: java.util.List;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (android.media.AudioRecordingConfiguration) $r2;

        $r4 = staticinvoke <android.media.AudioRecordingConfiguration: android.media.AudioRecordingConfiguration anonymizedCopy(android.media.AudioRecordingConfiguration)>($r3);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r1;
    }

    private android.media.AudioRecordingConfiguration createRecordingConfiguration(int, int, int, int[], int, boolean, int, android.media.audiofx.AudioEffect$Descriptor[], android.media.audiofx.AudioEffect$Descriptor[])
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0;
        android.media.audiofx.AudioEffect$Descriptor[] r1, r2;
        android.media.AudioFormat r3, r4;
        android.media.AudioFormat$Builder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        android.content.pm.PackageManager $r13;
        int[] r14;
        java.lang.String[] r15;
        java.lang.String r16;
        android.media.AudioRecordingConfiguration $r17;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r14 := @parameter3: int[];

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        r1 := @parameter7: android.media.audiofx.AudioEffect$Descriptor[];

        r2 := @parameter8: android.media.audiofx.AudioEffect$Descriptor[];

        $r5 = new android.media.AudioFormat$Builder;

        specialinvoke $r5.<android.media.AudioFormat$Builder: void <init>()>();

        $i6 = r14[0];

        $r6 = virtualinvoke $r5.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>($i6);

        $i7 = r14[1];

        $r7 = virtualinvoke $r6.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>($i7);

        $i8 = r14[2];

        $r8 = virtualinvoke $r7.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>($i8);

        r3 = virtualinvoke $r8.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        $r9 = new android.media.AudioFormat$Builder;

        specialinvoke $r9.<android.media.AudioFormat$Builder: void <init>()>();

        $i9 = r14[3];

        $r10 = virtualinvoke $r9.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>($i9);

        $i10 = r14[4];

        $r11 = virtualinvoke $r10.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>($i10);

        $i11 = r14[5];

        $r12 = virtualinvoke $r11.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>($i11);

        r4 = virtualinvoke $r12.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        i5 = r14[6];

        $r13 = r0.<com.android.server.audio.RecordingActivityMonitor: android.content.pm.PackageManager mPackMan>;

        r15 = virtualinvoke $r13.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r15 == null goto label1;

        $i12 = lengthof r15;

        if $i12 <= 0 goto label1;

        r16 = r15[0];

        goto label2;

     label1:
        r16 = "";

     label2:
        $r17 = new android.media.AudioRecordingConfiguration;

        specialinvoke $r17.<android.media.AudioRecordingConfiguration: void <init>(int,int,int,android.media.AudioFormat,android.media.AudioFormat,int,java.lang.String,int,boolean,int,android.media.audiofx.AudioEffect$Descriptor[],android.media.audiofx.AudioEffect$Descriptor[])>(i0, i1, i2, r3, r4, i5, r16, i3, z0, i4, r1, r2);

        return $r17;
    }

    private void dispatchCallbacks(java.util.List)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        java.util.ArrayList r1, $r3, $r4, r11;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        android.media.IRecordingConfigDispatcher $r6, $r7;
        android.os.RemoteException $r8;
        java.lang.Throwable $r9;
        java.util.List r10;
        com.android.server.audio.RecordingActivityMonitor$RecMonitorClient r12;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        r10 := @parameter0: java.util.List;

        if r10 != null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r1;

     label02:
        $z0 = r0.<com.android.server.audio.RecordingActivityMonitor: boolean mHasPublicClients>;

        if $z0 == 0 goto label04;

        r11 = staticinvoke <com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList anonymizeForPublicConsumption(java.util.List)>(r10);

     label03:
        goto label05;

     label04:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r11 = $r3;

     label05:
        $r4 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList mClients>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.android.server.audio.RecordingActivityMonitor$RecMonitorClient) $r5;

     label07:
        $z1 = r12.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean mIsPrivileged>;

        if $z1 == 0 goto label09;

        $r7 = r12.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: android.media.IRecordingConfigDispatcher mDispatcherCb>;

        interfaceinvoke $r7.<android.media.IRecordingConfigDispatcher: void dispatchRecordingConfigChange(java.util.List)>(r10);

     label08:
        goto label10;

     label09:
        $r6 = r12.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: android.media.IRecordingConfigDispatcher mDispatcherCb>;

        interfaceinvoke $r6.<android.media.IRecordingConfigDispatcher: void dispatchRecordingConfigChange(java.util.List)>(r11);

     label10:
        goto label13;

     label11:
        $r8 := @caughtexception;

     label12:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService.RecordingActivityMonitor", "Could not call dispatchRecordingConfigChange() on client", $r8);

     label13:
        goto label06;

     label14:
        exitmonitor r1;

     label15:
        return;

     label16:
        $r9 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private int findStateByPortId(int)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0, $i1, $i2, i3;
        java.util.List r1, $r3, $r4, $r7;
        java.lang.Object $r5, $r8;
        com.android.server.audio.RecordingActivityMonitor$RecordingState $r6, $r9;
        boolean $z0;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r1;

        i3 = 0;

     label1:
        $r3 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r4 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r5;

        $z0 = virtualinvoke $r6.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean hasDeathHandler()>();

        if $z0 != 0 goto label3;

        $r7 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        $r9 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r8;

        $i2 = virtualinvoke $r9.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int getPortId()>();

        if $i2 != i0 goto label3;

        exitmonitor r1;

     label2:
        return i3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        return -1;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private int findStateByRiid(int)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0, $i1, $i2, i3;
        java.util.List r1, $r3, $r4;
        java.lang.Object $r5;
        com.android.server.audio.RecordingActivityMonitor$RecordingState $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r1;

        i3 = 0;

     label1:
        $r3 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r4 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r5;

        $i2 = virtualinvoke $r6.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int getRiid()>();

        if $i2 != i0 goto label3;

        exitmonitor r1;

     label2:
        return i3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        return -1;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private java.util.List updateSnapshot(int, int, android.media.AudioRecordingConfiguration)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.util.List r1, $r3, $r6, $r7, $r17, r21, r23;
        com.android.server.audio.RecordingActivityMonitor$RecordingState r2, r22;
        java.lang.Object $r4;
        android.media.AudioRecordingConfiguration $r5, r19;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.Object[] $r8, $r13;
        java.lang.Integer $r9, $r10, $r11, $r14, $r15;
        java.lang.String $r12, $r16;
        java.lang.Throwable $r18;
        com.android.server.audio.AudioEventLogger r24;
        com.android.server.audio.RecordingActivityMonitor$RecordingEvent r25;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r19 := @parameter2: android.media.AudioRecordingConfiguration;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r1;

        i5 = -1;

        if i1 == -1 goto label04;

     label01:
        i5 = specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: int findStateByRiid(int)>(i1);

     label02:
        goto label06;

     label03:
        $r18 := @caughtexception;

        goto label34;

     label04:
        if r19 == null goto label06;

     label05:
        $i4 = virtualinvoke r19.<android.media.AudioRecordingConfiguration: int getClientPortId()>();

        i5 = specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: int findStateByPortId(int)>($i4);

     label06:
        i6 = i5;

        if i5 != -1 goto label13;

        if i0 != 0 goto label09;

        if r19 == null goto label09;

     label07:
        r21 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        r2 = new com.android.server.audio.RecordingActivityMonitor$RecordingState;

        specialinvoke r2.<com.android.server.audio.RecordingActivityMonitor$RecordingState: void <init>(android.media.AudioRecordingConfiguration)>(r19);

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r17 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        $i3 = interfaceinvoke $r17.<java.util.List: int size()>();

        i6 = $i3 - 1;

     label08:
        goto label13;

     label09:
        if r19 != null goto label11;

     label10:
        $r13 = newarray (java.lang.Object)[2];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected event %d for riid %d", $r13);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService.RecordingActivityMonitor", $r16);

     label11:
        exitmonitor r1;

     label12:
        return null;

     label13:
        $r3 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i6);

        r22 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r4;

     label14:
        if i0 == 0 goto label25;

        if i0 == 1 goto label21;

        if i0 == 2 goto label19;

        if i0 == 3 goto label17;

     label15:
        $r8 = newarray (java.lang.Object)[3];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[1] = $r10;

        $i2 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int getPortId()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8[2] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown event %d for riid %d / portid %d", $r8);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService.RecordingActivityMonitor", $r12);

     label16:
        z2 = 0;

        goto label30;

     label17:
        z2 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean isActiveConfiguration()>();

        virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: void release()>();

        $r7 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i6);

     label18:
        goto label30;

     label19:
        z2 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean setConfig(android.media.AudioRecordingConfiguration)>(r19);

     label20:
        goto label30;

     label21:
        z3 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean setActive(boolean)>(0);

     label22:
        z2 = z3;

     label23:
        $z1 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean hasDeathHandler()>();

        if $z1 != 0 goto label30;

        $r6 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i6);

     label24:
        z2 = z3;

        goto label30;

     label25:
        z4 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean setActive(boolean)>(1);

     label26:
        z2 = z4;

        if r19 == null goto label30;

     label27:
        $z0 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean setConfig(android.media.AudioRecordingConfiguration)>(r19);

        if $z0 != 0 goto label29;

     label28:
        z2 = 0;

        if z4 == 0 goto label30;

     label29:
        z2 = 1;

     label30:
        r23 = null;

        if z2 == 0 goto label32;

     label31:
        r24 = <com.android.server.audio.RecordingActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r25 = new com.android.server.audio.RecordingActivityMonitor$RecordingEvent;

        $r5 = virtualinvoke r22.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration getConfig()>();

        specialinvoke r25.<com.android.server.audio.RecordingActivityMonitor$RecordingEvent: void <init>(int,int,android.media.AudioRecordingConfiguration)>(i0, i1, $r5);

        virtualinvoke r24.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>(r25);

        r23 = virtualinvoke r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List getActiveRecordingConfigurations(boolean)>(1);

     label32:
        exitmonitor r1;

     label33:
        return r23;

     label34:
        exitmonitor r1;

     label35:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label11 to label12 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
        catch java.lang.Throwable from label15 to label16 with label03;
        catch java.lang.Throwable from label17 to label18 with label03;
        catch java.lang.Throwable from label19 to label20 with label03;
        catch java.lang.Throwable from label21 to label22 with label03;
        catch java.lang.Throwable from label23 to label24 with label03;
        catch java.lang.Throwable from label25 to label26 with label03;
        catch java.lang.Throwable from label27 to label28 with label03;
        catch java.lang.Throwable from label31 to label32 with label03;
        catch java.lang.Throwable from label32 to label33 with label03;
        catch java.lang.Throwable from label34 to label35 with label03;
    }

    protected void dump(java.io.PrintWriter)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        java.util.Iterator r1;
        java.lang.StringBuilder $r2;
        java.text.DateFormat $r4;
        java.util.Date $r5;
        java.lang.String $r6, $r8;
        java.util.List $r9, r16;
        boolean $z0;
        com.android.server.audio.AudioEventLogger $r10;
        java.lang.Object $r11;
        com.android.server.audio.RecordingActivityMonitor$RecordingState $r12;
        java.lang.Throwable $r13;
        java.io.PrintWriter r14;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        r14 := @parameter0: java.io.PrintWriter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nRecordActivityMonitor dump time: ");

        $r4 = staticinvoke <java.text.DateFormat: java.text.DateFormat getTimeInstance()>();

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        $r6 = virtualinvoke $r4.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r14.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        r16 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r16;

     label1:
        $r9 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        r1 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r11;

        virtualinvoke $r12.<com.android.server.audio.RecordingActivityMonitor$RecordingState: void dump(java.io.PrintWriter)>(r14);

     label3:
        goto label2;

     label4:
        exitmonitor r16;

     label5:
        virtualinvoke r14.<java.io.PrintWriter: void println(java.lang.String)>("\n");

        $r10 = <com.android.server.audio.RecordingActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        virtualinvoke $r10.<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>(r14);

        return;

     label6:
        $r13 := @caughtexception;

     label7:
        exitmonitor r16;

     label8:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.util.List getActiveRecordingConfigurations(boolean)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        boolean z0, $z1, $z2;
        java.util.Iterator r1;
        com.android.server.audio.RecordingActivityMonitor$RecordingState r2;
        java.util.ArrayList $r3, r10;
        java.util.List $r4, r9;
        java.lang.Object $r5;
        android.media.AudioRecordingConfiguration $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        z0 := @parameter0: boolean;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r9 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r9;

     label1:
        $r4 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r5;

        $z2 = virtualinvoke r2.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean isActiveConfiguration()>();

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke r2.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration getConfig()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label2;

     label4:
        exitmonitor r9;

     label5:
        r10 = $r3;

        if z0 != 0 goto label6;

        r10 = staticinvoke <com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList anonymizeForPublicConsumption(java.util.List)>($r3);

     label6:
        return r10;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r9;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void initMonitor()
    {
        com.android.server.audio.RecordingActivityMonitor r0;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        staticinvoke <android.media.AudioSystem: void setRecordingCallback(android.media.AudioSystem$AudioRecordingCallback)>(r0);

        return;
    }

    boolean isLegacyRemoteSubmixActive()
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        $r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.concurrent.atomic.AtomicBoolean mLegacyRemoteSubmixActive>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isRecordingActiveForUid(int)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0, $i1;
        java.util.List r1, $r3;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r4;
        android.media.AudioRecordingConfiguration $r5;
        java.lang.Throwable $r6;
        com.android.server.audio.RecordingActivityMonitor$RecordingState r7;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r4;

        $z1 = virtualinvoke r7.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean isActiveConfiguration()>();

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r7.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration getConfig()>();

        $i1 = virtualinvoke $r5.<android.media.AudioRecordingConfiguration: int getClientUid()>();

        if $i1 != i0 goto label4;

        exitmonitor r1;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return 0;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void onAudioServerDied()
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        java.util.List r1, $r6, r10;
        java.util.Iterator r2;
        com.android.server.audio.RecordingActivityMonitor$RecordingState r3;
        com.android.server.audio.AudioEventLogger r4;
        com.android.server.audio.RecordingActivityMonitor$RecordingEvent r5;
        boolean $z0, $z1, $z2, z3, z4;
        java.lang.Object $r7;
        int $i0;
        android.media.AudioRecordingConfiguration $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        r10 = null;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r1;

        z3 = 0;

     label01:
        $r6 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.audio.RecordingActivityMonitor$RecordingState) $r7;

     label03:
        z4 = z3;

     label04:
        $z1 = virtualinvoke r3.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean hasDeathHandler()>();

        if $z1 != 0 goto label10;

     label05:
        $z2 = virtualinvoke r3.<com.android.server.audio.RecordingActivityMonitor$RecordingState: boolean isActiveConfiguration()>();

        if $z2 == 0 goto label08;

     label06:
        z3 = 1;

     label07:
        r4 = <com.android.server.audio.RecordingActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        r5 = new com.android.server.audio.RecordingActivityMonitor$RecordingEvent;

        $i0 = virtualinvoke r3.<com.android.server.audio.RecordingActivityMonitor$RecordingState: int getRiid()>();

        $r8 = virtualinvoke r3.<com.android.server.audio.RecordingActivityMonitor$RecordingState: android.media.AudioRecordingConfiguration getConfig()>();

        specialinvoke r5.<com.android.server.audio.RecordingActivityMonitor$RecordingEvent: void <init>(int,int,android.media.AudioRecordingConfiguration)>(3, $i0, $r8);

        virtualinvoke r4.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>(r5);

     label08:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label09:
        z4 = z3;

     label10:
        z3 = z4;

        goto label02;

     label11:
        if z3 == 0 goto label13;

     label12:
        r10 = virtualinvoke r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List getActiveRecordingConfigurations(boolean)>(1);

     label13:
        exitmonitor r1;

     label14:
        specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: void dispatchCallbacks(java.util.List)>(r10);

        return;

     label15:
        $r9 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void onRecordingConfigurationChanged(int, int, int, int, int, int, boolean, int[], android.media.audiofx.AudioEffect$Descriptor[], android.media.audiofx.AudioEffect$Descriptor[], int, java.lang.String)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0, i1, i2, i3, i4, i5, i6;
        boolean z0, $z1, $z2;
        android.media.audiofx.AudioEffect$Descriptor[] r1, r12;
        java.lang.String r2, $r7, $r8;
        java.util.List $r3;
        com.android.server.audio.RecordingActivityMonitor$RecordingEvent $r4;
        com.android.server.audio.AudioEventLogger $r5;
        com.android.server.audio.AudioEventLogger$Event $r6;
        java.util.concurrent.atomic.AtomicInteger $r9;
        java.util.concurrent.atomic.AtomicBoolean $r10;
        int[] r11;
        android.media.AudioRecordingConfiguration r13;
        android.media.AudioDeviceInfo r14;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        z0 := @parameter6: boolean;

        r11 := @parameter7: int[];

        r12 := @parameter8: android.media.audiofx.AudioEffect$Descriptor[];

        r1 := @parameter9: android.media.audiofx.AudioEffect$Descriptor[];

        i6 := @parameter10: int;

        r2 := @parameter11: java.lang.String;

        r13 = specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: android.media.AudioRecordingConfiguration createRecordingConfiguration(int,int,int,int[],int,boolean,int,android.media.audiofx.AudioEffect$Descriptor[],android.media.audiofx.AudioEffect$Descriptor[])>(i2, i3, i4, r11, i5, z0, i6, r12, r1);

        if i4 != 8 goto label2;

        if i0 == 0 goto label1;

        if i0 != 2 goto label2;

     label1:
        r14 = virtualinvoke r13.<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()>();

        if r14 == null goto label2;

        $r7 = "0";

        $r8 = virtualinvoke r14.<android.media.AudioDeviceInfo: java.lang.String getAddress()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r9 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.concurrent.atomic.AtomicInteger mLegacyRemoteSubmixRiid>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i1);

        $r10 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.concurrent.atomic.AtomicBoolean mLegacyRemoteSubmixActive>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label2:
        $z2 = staticinvoke <android.media.MediaRecorder: boolean isSystemOnlyAudioSource(int)>(i4);

        if $z2 == 0 goto label3;

        $r5 = <com.android.server.audio.RecordingActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        $r4 = new com.android.server.audio.RecordingActivityMonitor$RecordingEvent;

        specialinvoke $r4.<com.android.server.audio.RecordingActivityMonitor$RecordingEvent: void <init>(int,int,android.media.AudioRecordingConfiguration)>(i0, i1, r13);

        $r6 = virtualinvoke $r4.<com.android.server.audio.RecordingActivityMonitor$RecordingEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AudioService.RecordingActivityMonitor");

        virtualinvoke $r5.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r6);

        return;

     label3:
        $r3 = specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List updateSnapshot(int,int,android.media.AudioRecordingConfiguration)>(i0, i1, r13);

        specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: void dispatchCallbacks(java.util.List)>($r3);

        return;
    }

    public void recorderEvent(int, int)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0, i1, i2;
        java.util.concurrent.atomic.AtomicBoolean r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        com.android.server.audio.RecordingActivityMonitor$RecordingEvent $r3;
        com.android.server.audio.AudioEventLogger $r4;
        com.android.server.audio.AudioEventLogger$Event $r5;
        java.util.List $r6;
        byte b3;
        boolean z0;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.concurrent.atomic.AtomicInteger mLegacyRemoteSubmixRiid>;

        i2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        b3 = 0;

        if i2 != i0 goto label3;

        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.concurrent.atomic.AtomicBoolean mLegacyRemoteSubmixActive>;

        if i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

     label3:
        if i1 != 0 goto label4;

        goto label6;

     label4:
        if i1 != 1 goto label5;

        b3 = 1;

        goto label6;

     label5:
        b3 = -1;

     label6:
        if i0 == -1 goto label8;

        if b3 != -1 goto label7;

        goto label8;

     label7:
        $r6 = specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List updateSnapshot(int,int,android.media.AudioRecordingConfiguration)>(b3, i0, null);

        specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: void dispatchCallbacks(java.util.List)>($r6);

        return;

     label8:
        $r4 = <com.android.server.audio.RecordingActivityMonitor: com.android.server.audio.AudioEventLogger sEventLogger>;

        $r3 = new com.android.server.audio.RecordingActivityMonitor$RecordingEvent;

        specialinvoke $r3.<com.android.server.audio.RecordingActivityMonitor$RecordingEvent: void <init>(int,int,android.media.AudioRecordingConfiguration)>(i1, i0, null);

        $r5 = virtualinvoke $r3.<com.android.server.audio.RecordingActivityMonitor$RecordingEvent: com.android.server.audio.AudioEventLogger$Event printLog(java.lang.String)>("AudioService.RecordingActivityMonitor");

        virtualinvoke $r4.<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>($r5);

        return;
    }

    void registerRecordingCallback(android.media.IRecordingConfigDispatcher, boolean)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        boolean z0, $z1;
        java.util.ArrayList r1, $r3;
        com.android.server.audio.RecordingActivityMonitor$RecMonitorClient r2;
        java.lang.Throwable $r4;
        android.media.IRecordingConfigDispatcher r5;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        r5 := @parameter0: android.media.IRecordingConfigDispatcher;

        z0 := @parameter1: boolean;

        if r5 != null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r1;

     label02:
        r2 = new com.android.server.audio.RecordingActivityMonitor$RecMonitorClient;

        specialinvoke r2.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: void <init>(android.media.IRecordingConfigDispatcher,boolean)>(r5, z0);

        $z1 = virtualinvoke r2.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean init()>();

        if $z1 == 0 goto label06;

     label03:
        if z0 != 0 goto label05;

     label04:
        r0.<com.android.server.audio.RecordingActivityMonitor: boolean mHasPublicClients> = 1;

     label05:
        $r3 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList mClients>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void releaseRecorder(int)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0;
        java.util.List $r1;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List updateSnapshot(int,int,android.media.AudioRecordingConfiguration)>(3, i0, null);

        specialinvoke r0.<com.android.server.audio.RecordingActivityMonitor: void dispatchCallbacks(java.util.List)>($r1);

        return;
    }

    public int trackRecorder(android.os.IBinder)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        int i0;
        java.util.List r2, r6;
        com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        com.android.server.audio.RecordingActivityMonitor$RecordingState r7;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        r5 := @parameter0: android.os.IBinder;

        if r5 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService.RecordingActivityMonitor", "trackRecorder called with null token");

        return -1;

     label1:
        i0 = staticinvoke <android.media.AudioSystem: int newAudioRecorderId()>();

        $r3 = new com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler;

        specialinvoke $r3.<com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: void <init>(int,android.os.IBinder)>(i0, r5);

        $z0 = virtualinvoke $r3.<com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: boolean init()>();

        if $z0 != 0 goto label2;

        return -1;

     label2:
        r6 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        entermonitor r6;

     label3:
        r2 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.List mRecordStates>;

        r7 = new com.android.server.audio.RecordingActivityMonitor$RecordingState;

        specialinvoke r7.<com.android.server.audio.RecordingActivityMonitor$RecordingState: void <init>(int,com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler)>(i0, $r3);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

        exitmonitor r6;

     label4:
        return i0;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r6;

     label7:
        throw $r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)
    {
        com.android.server.audio.RecordingActivityMonitor r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        com.android.server.audio.RecordingActivityMonitor$RecMonitorClient r3;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object $r5;
        android.media.IRecordingConfigDispatcher $r6, r8;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.audio.RecordingActivityMonitor;

        r8 := @parameter0: android.media.IRecordingConfigDispatcher;

        if r8 != null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList mClients>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.audio.RecordingActivityMonitor: java.util.ArrayList mClients>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        z3 = 0;

     label04:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.audio.RecordingActivityMonitor$RecMonitorClient) $r5;

        $r6 = r3.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: android.media.IRecordingConfigDispatcher mDispatcherCb>;

        $z1 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label06;

        virtualinvoke r3.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: void release()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label05:
        goto label08;

     label06:
        $z2 = r3.<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean mIsPrivileged>;

        if $z2 != 0 goto label08;

     label07:
        z3 = 1;

     label08:
        goto label04;

     label09:
        r0.<com.android.server.audio.RecordingActivityMonitor: boolean mHasPublicClients> = z3;

        exitmonitor r1;

     label10:
        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }
}
