public class com.android.server.backup.BackupManagerService extends android.app.backup.IBackupManager$Stub
{
    private static final java.lang.String BACKUP_ACTIVATED_FILENAME;
    private static final java.lang.String BACKUP_DISABLE_PROPERTY;
    private static final java.lang.String BACKUP_SUPPRESS_FILENAME;
    private static final java.lang.String BACKUP_THREAD;
    public static final boolean DEBUG;
    public static final boolean DEBUG_SCHEDULING;
    static final java.lang.String DUMP_RUNNING_USERS_MESSAGE;
    public static final boolean MORE_DEBUG;
    private static final java.lang.String REMEMBER_ACTIVATED_FILENAME;
    public static final java.lang.String TAG;
    static com.android.server.backup.BackupManagerService sInstance;
    private final android.content.Context mContext;
    private final boolean mGlobalDisable;
    private final android.os.Handler mHandler;
    private final java.lang.Object mStateLock;
    private final java.util.Set mTransportWhitelist;
    private final android.os.UserManager mUserManager;
    private final android.content.BroadcastReceiver mUserRemovedReceiver;
    private final android.util.SparseArray mUserServices;

    public void <init>(android.content.Context)
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.Context r1;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.content.Context;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void <init>(android.content.Context,android.util.SparseArray)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, android.util.SparseArray)
    {
        com.android.server.backup.BackupManagerService r0;
        android.util.SparseArray r1;
        boolean $z0;
        android.os.Looper $r7;
        android.os.UserManager $r8;
        com.android.server.SystemConfig $r9;
        android.content.Context $r11, r14;
        android.content.BroadcastReceiver $r12;
        java.lang.Object r15, r16;
        com.android.server.backup.BackupManagerService$1 r17;
        android.os.HandlerThread r18;
        android.os.Handler r19;
        android.content.IntentFilter r20;
        java.util.Set r21;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r14 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.SparseArray;

        specialinvoke r0.<android.app.backup.IBackupManager$Stub: void <init>()>();

        r16 = new java.lang.Object;

        specialinvoke r16.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.lang.Object mStateLock> = r16;

        r17 = new com.android.server.backup.BackupManagerService$1;

        specialinvoke r17.<com.android.server.backup.BackupManagerService$1: void <init>(com.android.server.backup.BackupManagerService)>(r0);

        r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mUserRemovedReceiver> = r17;

        r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext> = r14;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isBackupDisabled()>();

        r0.<com.android.server.backup.BackupManagerService: boolean mGlobalDisable> = $z0;

        r18 = new android.os.HandlerThread;

        specialinvoke r18.<android.os.HandlerThread: void <init>(java.lang.String,int)>("backup", 10);

        virtualinvoke r18.<android.os.HandlerThread: void start()>();

        r19 = new android.os.Handler;

        $r7 = virtualinvoke r18.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r19.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<com.android.server.backup.BackupManagerService: android.os.Handler mHandler> = r19;

        $r8 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>(r14);

        r0.<com.android.server.backup.BackupManagerService: android.os.UserManager mUserManager> = $r8;

        r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices> = r1;

        $r9 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        r15 = virtualinvoke $r9.<com.android.server.SystemConfig: android.util.ArraySet getBackupTransportWhitelist()>();

        if r15 != null goto label1;

        r15 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        goto label1;

     label1:
        r21 = (java.util.Set) r15;

        r0.<com.android.server.backup.BackupManagerService: java.util.Set mTransportWhitelist> = r21;

        $r11 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r12 = r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mUserRemovedReceiver>;

        r20 = new android.content.IntentFilter;

        specialinvoke r20.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke $r11.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r12, r20);

        return;
    }

    static android.os.Handler access$000(com.android.server.backup.BackupManagerService)
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$100(com.android.server.backup.BackupManagerService, int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void onRemovedNonSystemUser(int)>(i0);

        return;
    }

    private void activateBackupForUserLocked(int) throws java.io.IOException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.io.File getSuppressFileForSystemUser()>();

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void deleteFile(java.io.File)>($r2);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.io.File getActivatedFileForNonSystemUser(int)>(i0);

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void createFile(java.io.File)>($r1);

     label2:
        return;
    }

    private void createFile(java.io.File) throws java.io.IOException
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.File r1, $r3;
        boolean $z0, $z2;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r8;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

        $z2 = virtualinvoke r1.<java.io.File: boolean createNewFile()>();

        if $z2 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create file ");

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

     label2:
        return;
    }

    private void deactivateBackupForUserLocked(int) throws java.io.IOException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.io.File getSuppressFileForSystemUser()>();

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void createFile(java.io.File)>($r2);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.io.File getActivatedFileForNonSystemUser(int)>(i0);

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void deleteFile(java.io.File)>($r1);

     label2:
        return;
    }

    private void deleteFile(java.io.File)
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.File r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete file ");

        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r7);

     label2:
        return;
    }

    private void enforcePermissionsOnUser(int) throws java.lang.SecurityException
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.Context $r1, $r2;
        java.lang.SecurityException $r3;
        android.os.UserManager $r4;
        android.content.pm.UserInfo $r5;
        boolean $z0, z1;
        int i0, i1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.os.UserManager getUserManager()>();

        $r5 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        if z1 == 0 goto label6;

        i1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUid()>();

        if i1 == 1000 goto label5;

        if i1 != 0 goto label4;

        goto label5;

     label4:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("No permission to configure backup activity");

        throw $r3;

     label5:
        goto label7;

     label6:
        $r1 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "No permission to configure backup activity");

        $r2 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "No permission to configure backup activity");

     label7:
        return;
    }

    static com.android.server.backup.BackupManagerService getInstance()
    {
        com.android.server.backup.BackupManagerService r0, $r2;

        r0 = <com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService sInstance>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r2 = (com.android.server.backup.BackupManagerService) r0;

        return $r2;
    }

    private boolean isBackupActivatedForUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean z0, $z1, z2;
        java.io.File $r1, $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.io.File getSuppressFileForSystemUser()>();

        z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        z2 = 0;

        if z0 == 0 goto label1;

        return 0;

     label1:
        if i0 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.io.File getActivatedFileForNonSystemUser(int)>(i0);

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private void onRemovedNonSystemUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.StringBuilder $r1, $r6;
        java.lang.String $r4, $r9;
        java.io.File $r5;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing state for non system user ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r4);

        $r5 = staticinvoke <com.android.server.backup.UserBackupManagerFiles: java.io.File getStateDirInSystemDir(int)>(i0);

        $z0 = staticinvoke <android.os.FileUtils: boolean deleteContentsAndDir(java.io.File)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete state dir for removed user: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

     label1:
        return;
    }

    public void acknowledgeAdbBackupOrRestore(int, int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1;
        boolean z0;
        java.lang.String r1, r2;
        android.app.backup.IFullBackupRestoreObserver r3;
        com.android.server.backup.UserBackupManagerService r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: android.app.backup.IFullBackupRestoreObserver;

        r4 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "acknowledgeAdbBackupOrRestore()");

        if r4 == null goto label1;

        virtualinvoke r4.<com.android.server.backup.UserBackupManagerService: void acknowledgeAdbBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>(i1, z0, r1, r2, r3);

     label1:
        return;
    }

    public void acknowledgeFullBackupOrRestore(int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, $i1;
        boolean z0;
        java.lang.String r1, r2;
        android.app.backup.IFullBackupRestoreObserver r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.app.backup.IFullBackupRestoreObserver;

        $i1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>($i1, i0, z0, r1, r2, r3);

        return;
    }

    public void acknowledgeFullBackupOrRestoreForUser(int, int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1;
        boolean z0, $z1;
        java.lang.String r1, r2;
        android.app.backup.IFullBackupRestoreObserver r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: android.app.backup.IFullBackupRestoreObserver;

        $z1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void acknowledgeAdbBackupOrRestore(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>(i0, i1, z0, r1, r2, r3);

     label1:
        return;
    }

    public void adbBackup(int, android.os.ParcelFileDescriptor, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.os.ParcelFileDescriptor r1;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8;
        java.lang.String[] r2;
        com.android.server.backup.UserBackupManagerService r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        z4 := @parameter6: boolean;

        z5 := @parameter7: boolean;

        z6 := @parameter8: boolean;

        z7 := @parameter9: boolean;

        r2 := @parameter10: java.lang.String[];

        $z8 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z8 != 0 goto label1;

        return;

     label1:
        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "adbBackup()");

        if r3 == null goto label2;

        virtualinvoke r3.<com.android.server.backup.UserBackupManagerService: void adbBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>(r1, z0, z1, z2, z3, z4, z5, z6, z7, r2);

     label2:
        return;
    }

    public void adbRestore(int, android.os.ParcelFileDescriptor)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.os.ParcelFileDescriptor r1;
        com.android.server.backup.UserBackupManagerService r2;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "adbRestore()");

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: void adbRestore(android.os.ParcelFileDescriptor)>(r1);

     label2:
        return;
    }

    public void agentConnected(int, java.lang.String, android.os.IBinder)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        android.os.IBinder r2;
        com.android.server.backup.UserBackupManagerService r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.IBinder;

        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "agentConnected()");

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.backup.UserBackupManagerService: void agentConnected(java.lang.String,android.os.IBinder)>(r1, r2);

     label1:
        return;
    }

    public void agentConnected(java.lang.String, android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        android.os.IBinder r2;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.IBinder;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>($i0, r1, r2);

        return;
    }

    public void agentConnectedForUser(int, java.lang.String, android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        android.os.IBinder r2;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void agentConnected(int,java.lang.String,android.os.IBinder)>(i0, r1, r2);

     label1:
        return;
    }

    public void agentDisconnected(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        com.android.server.backup.UserBackupManagerService r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "agentDisconnected()");

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: void agentDisconnected(java.lang.String)>(r1);

     label1:
        return;
    }

    public void agentDisconnected(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void agentDisconnectedForUser(int,java.lang.String)>($i0, r1);

        return;
    }

    public void agentDisconnectedForUser(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void agentDisconnected(int,java.lang.String)>(i0, r1);

     label1:
        return;
    }

    public void backupNow() throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void backupNowForUser(int)>($i0);

        return;
    }

    public void backupNow(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "backupNow()");

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void backupNow()>();

     label1:
        return;
    }

    public void backupNowForUser(int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void backupNow(int)>(i0);

     label1:
        return;
    }

    public boolean beginFullBackup(int, com.android.server.backup.FullBackupJob)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.FullBackupJob r1;
        boolean z0, $z1, z2;
        com.android.server.backup.UserBackupManagerService r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.backup.FullBackupJob;

        z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        z2 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "beginFullBackup()");

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: boolean beginFullBackup(com.android.server.backup.FullBackupJob)>(r1);

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label2;

     label2:
        return z2;
    }

    public android.app.backup.IRestoreSession beginRestoreSession(int, java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1, r3;
        com.android.server.backup.UserBackupManagerService r2;
        android.app.backup.IRestoreSession r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "beginRestoreSession()");

        if r2 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        r4 = virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)>(r3, r1);

     label2:
        return r4;
    }

    public android.app.backup.IRestoreSession beginRestoreSessionForUser(int, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1, r2;
        boolean $z0;
        android.app.backup.IRestoreSession r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.app.backup.IRestoreSession beginRestoreSession(int,java.lang.String,java.lang.String)>(i0, r2, r1);

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    protected int binderGetCallingUid()
    {
        com.android.server.backup.BackupManagerService r0;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        return $i0;
    }

    protected int binderGetCallingUserId()
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.UserHandle $r1;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $i0 = virtualinvoke $r1.<android.os.UserHandle: int getIdentifier()>();

        return $i0;
    }

    public void cancelBackups() throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void cancelBackupsForUser(int)>($i0);

        return;
    }

    public void cancelBackups(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "cancelBackups()");

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void cancelBackups()>();

     label1:
        return;
    }

    public void cancelBackupsForUser(int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void cancelBackups(int)>(i0);

     label1:
        return;
    }

    public void clearBackupData(int, java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1, r2;
        com.android.server.backup.UserBackupManagerService r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "clearBackupData()");

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.backup.UserBackupManagerService: void clearBackupData(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    public void clearBackupData(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void clearBackupDataForUser(int,java.lang.String,java.lang.String)>($i0, r1, r2);

        return;
    }

    public void clearBackupDataForUser(int, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void clearBackupData(int,java.lang.String,java.lang.String)>(i0, r1, r2);

     label1:
        return;
    }

    public void dataChanged(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        com.android.server.backup.UserBackupManagerService r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "dataChanged()");

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: void dataChanged(java.lang.String)>(r1);

     label1:
        return;
    }

    public void dataChanged(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void dataChangedForUser(int,java.lang.String)>($i0, r1);

        return;
    }

    public void dataChangedForUser(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void dataChanged(int,java.lang.String)>(i0, r1);

     label1:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        android.content.Context $r4;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "BackupManagerService", r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void dumpWithoutCheckingPermission(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        return;
    }

    void dumpWithoutCheckingPermission(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8;
        boolean $z0, $z1, $z2;
        android.util.SparseArray $r3, $r7, $r10, $r16;
        java.lang.String $r4, $r5, $r6, $r12, r14;
        java.lang.StringBuilder $r8;
        java.io.FileDescriptor r13;
        com.android.server.backup.UserBackupManagerService r17;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r13 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $i1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>($i1);

        if $z0 != 0 goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Inactive");

        return;

     label01:
        if r2 == null goto label07;

        i0 = lengthof r2;

        i5 = 0;

     label02:
        if i5 >= i0 goto label07;

        r14 = r2[i5];

        $r4 = "-h";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z1 == 0 goto label03;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\'dumpsys backup\' optional arguments:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  -h       : this help text");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  a[gents] : dump information about defined backup agents");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  transportclients : dump information about transport clients");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  transportstats : dump transport statts");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  users    : dump the list of users for which backup service is running");

        return;

     label03:
        $r5 = "users";

        $r6 = virtualinvoke r14.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Backup Manager is running for users:");

        i6 = 0;

     label04:
        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $i3 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        if i6 >= $i3 goto label05;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $i4 = virtualinvoke $r10.<android.util.SparseArray: int keyAt(int)>(i6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r12);

        i6 = i6 + 1;

        goto label04;

     label05:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;

     label06:
        i5 = i5 + 1;

        goto label02;

     label07:
        i7 = 0;

     label08:
        $r16 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $i8 = virtualinvoke $r16.<android.util.SparseArray: int size()>();

        if i7 >= $i8 goto label10;

        $r3 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $i2 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i7);

        r17 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>($i2, "dump()");

        if r17 == null goto label09;

        virtualinvoke r17.<com.android.server.backup.UserBackupManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r13, r1, r2);

     label09:
        i7 = i7 + 1;

        goto label08;

     label10:
        return;
    }

    public void endFullBackup(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "endFullBackup()");

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void endFullBackup()>();

     label2:
        return;
    }

    void enforceCallingPermissionOnUserId(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, $i1;
        java.lang.String r1;
        android.os.UserHandle $r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $i1 = virtualinvoke $r2.<android.os.UserHandle: int getIdentifier()>();

        if $i1 == i0 goto label1;

        $r3 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", r1);

     label1:
        return;
    }

    public void excludeKeysFromRestore(java.lang.String, java.util.List)
    {
        com.android.server.backup.BackupManagerService r0;
        java.util.List r1;
        int i0;
        com.android.server.backup.UserBackupManagerService r2;
        android.os.UserHandle $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r8, r9;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        $r3 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning from excludeKeysFromRestore as backup for user");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not initialized yet");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "excludeKeysFromRestore()");

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: void excludeKeysFromRestore(java.lang.String,java.util.List)>(r9, r1);

     label2:
        return;
    }

    public java.lang.String[] filterAppsEligibleForBackup(int, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String[] r2, r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String[];

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "filterAppsEligibleForBackup()");

        if r1 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: java.lang.String[] filterAppsEligibleForBackup(java.lang.String[])>(r2);

     label2:
        return r3;
    }

    public java.lang.String[] filterAppsEligibleForBackupForUser(int, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String[] r1, r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String[] filterAppsEligibleForBackup(int,java.lang.String[])>(i0, r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public void fullTransportBackup(int, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String[] r1;
        com.android.server.backup.UserBackupManagerService r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "fullTransportBackup()");

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: void fullTransportBackup(java.lang.String[])>(r1);

     label1:
        return;
    }

    public void fullTransportBackupForUser(int, java.lang.String[]) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String[] r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void fullTransportBackup(int,java.lang.String[])>(i0, r1);

     label1:
        return;
    }

    protected java.io.File getActivatedFileForNonSystemUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.io.File $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.backup.UserBackupManagerFiles: java.io.File getStateFileInSystemDir(java.lang.String,int)>("backup-activated", i0);

        return $r1;
    }

    public long getAvailableRestoreToken(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        com.android.server.backup.UserBackupManagerService r2;
        long l1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "getAvailableRestoreToken()");

        if r2 != null goto label1;

        l1 = 0L;

        goto label2;

     label1:
        l1 = virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: long getAvailableRestoreToken(java.lang.String)>(r1);

     label2:
        return l1;
    }

    public long getAvailableRestoreTokenForUser(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        long l1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        l1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: long getAvailableRestoreToken(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        l1 = 0L;

     label2:
        return l1;
    }

    android.os.Handler getBackupHandler()
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    public android.content.Intent getConfigurationIntent(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String r2;
        android.content.Intent r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "getConfigurationIntent()");

        if r1 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)>(r2);

     label2:
        return r3;
    }

    public android.content.Intent getConfigurationIntent(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        int $i0;
        android.content.Intent $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.content.Intent getConfigurationIntentForUser(int,java.lang.String)>($i0, r1);

        return $r2;
    }

    public android.content.Intent getConfigurationIntentForUser(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String r1;
        android.content.Intent r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.content.Intent getConfigurationIntent(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    protected android.content.Context getContext()
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        return $r1;
    }

    public java.lang.String getCurrentTransport() throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String getCurrentTransportForUser(int)>($i0);

        return $r1;
    }

    public java.lang.String getCurrentTransport(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "getCurrentTransport()");

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: java.lang.String getCurrentTransport()>();

     label2:
        return r2;
    }

    public android.content.ComponentName getCurrentTransportComponent(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        android.content.ComponentName r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "getCurrentTransportComponent()");

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: android.content.ComponentName getCurrentTransportComponent()>();

     label2:
        return r2;
    }

    public android.content.ComponentName getCurrentTransportComponentForUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        android.content.ComponentName r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.content.ComponentName getCurrentTransportComponent(int)>(i0);

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public java.lang.String getCurrentTransportForUser(int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String getCurrentTransport(int)>(i0);

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public android.content.Intent getDataManagementIntent(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String r2;
        android.content.Intent r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "getDataManagementIntent()");

        if r1 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: android.content.Intent getDataManagementIntent(java.lang.String)>(r2);

     label2:
        return r3;
    }

    public android.content.Intent getDataManagementIntent(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        int $i0;
        android.content.Intent $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.content.Intent getDataManagementIntentForUser(int,java.lang.String)>($i0, r1);

        return $r2;
    }

    public android.content.Intent getDataManagementIntentForUser(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String r1;
        android.content.Intent r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.content.Intent getDataManagementIntent(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public java.lang.CharSequence getDataManagementLabel(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String r2;
        java.lang.CharSequence r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "getDataManagementLabel()");

        if r1 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: java.lang.CharSequence getDataManagementLabel(java.lang.String)>(r2);

     label2:
        return r3;
    }

    public java.lang.CharSequence getDataManagementLabelForUser(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String r1;
        java.lang.CharSequence r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.CharSequence getDataManagementLabel(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public java.lang.String getDestinationString(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String r2, r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "getDestinationString()");

        if r1 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: java.lang.String getDestinationString(java.lang.String)>(r2);

     label2:
        return r3;
    }

    public java.lang.String getDestinationString(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String getDestinationStringForUser(int,java.lang.String)>($i0, r1);

        return $r2;
    }

    public java.lang.String getDestinationStringForUser(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String getDestinationString(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    protected java.io.File getRememberActivatedFileForNonSystemUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.io.File $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.backup.UserBackupManagerFiles: java.io.File getStateFileInSystemDir(java.lang.String,int)>("backup-remember-activated", i0);

        return $r1;
    }

    com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1, $r11;
        com.android.server.backup.UserBackupManagerService r2;
        android.util.SparseArray $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void enforceCallingPermissionOnUserId(int,java.lang.String)>(i0, r1);

        $r4 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.backup.UserBackupManagerService) $r5;

        if r2 != null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Called ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for unknown user: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label1:
        return r2;
    }

    protected java.io.File getSuppressFileForSystemUser()
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = new java.io.File;

        $r2 = staticinvoke <com.android.server.backup.UserBackupManagerFiles: java.io.File getBaseStateDir(int)>(0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "backup-suppress");

        return $r1;
    }

    public java.lang.String[] getTransportWhitelist()
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String[] r1;
        java.util.Iterator r2;
        int $i0, $i1, i2;
        boolean $z0, $z1;
        java.util.Set $r3, $r4;
        java.lang.Object $r5;
        android.content.ComponentName $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>($i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mTransportWhitelist>;

        $i1 = interfaceinvoke $r3.<java.util.Set: int size()>();

        r1 = newarray (java.lang.String)[$i1];

        i2 = 0;

        $r4 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mTransportWhitelist>;

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.ComponentName) $r5;

        $r7 = virtualinvoke $r6.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    public android.os.UserHandle getUserForAncestralSerialNumber(long)
    {
        com.android.server.backup.BackupManagerService r0;
        long l0, l1, $l3;
        int i2, i5, i6, i7;
        com.android.server.backup.UserBackupManagerService r1;
        boolean $z0;
        android.os.UserHandle $r2, $r5;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        byte $b4;
        java.lang.Throwable $r6;
        android.os.UserManager r7;
        int[] r8;

        r0 := @this: com.android.server.backup.BackupManagerService;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.server.backup.BackupManagerService: boolean mGlobalDisable>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i5 = virtualinvoke $r2.<android.os.UserHandle: int getIdentifier()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r7 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.os.UserManager getUserManager()>();

     label3:
        i6 = 0;

     label4:
        r8 = virtualinvoke r7.<android.os.UserManager: int[] getProfileIds(int,boolean)>(i5, 0);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        i7 = lengthof r8;

     label6:
        if i6 >= i7 goto label8;

        i2 = r8[i6];

        $r3 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r1 = (com.android.server.backup.UserBackupManagerService) $r4;

        if r1 == null goto label7;

        $l3 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: long getAncestralSerialNumber()>();

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label7;

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i2);

        return $r5;

     label7:
        i6 = i6 + 1;

        goto label6;

     label8:
        return null;

     label9:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
    }

    protected android.os.UserManager getUserManager()
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.UserManager $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.os.UserManager mUserManager>;

        return $r1;
    }

    public com.android.server.backup.UserBackupManagerService getUserService(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        com.android.server.backup.UserBackupManagerService $r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (com.android.server.backup.UserBackupManagerService) $r2;

        return $r3;
    }

    android.util.SparseArray getUserServices()
    {
        com.android.server.backup.BackupManagerService r0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        return $r1;
    }

    public boolean hasBackupPassword() throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        com.android.server.backup.UserBackupManagerService r1;
        int $i0;
        boolean $z1, z2, z3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        z2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>($i0);

        if z2 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(0, "hasBackupPassword()");

        z3 = 0;

        if r1 == null goto label2;

        z3 = 0;

        $z1 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: boolean hasBackupPassword()>();

        if $z1 == 0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    public void initializeTransports(int, java.lang.String[], android.app.backup.IBackupObserver)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String[] r1;
        android.app.backup.IBackupObserver r2;
        com.android.server.backup.UserBackupManagerService r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: android.app.backup.IBackupObserver;

        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "initializeTransports()");

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.backup.UserBackupManagerService: void initializeTransports(java.lang.String[],android.app.backup.IBackupObserver)>(r1, r2);

     label1:
        return;
    }

    public void initializeTransportsForUser(int, java.lang.String[], android.app.backup.IBackupObserver) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String[] r1;
        android.app.backup.IBackupObserver r2;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: android.app.backup.IBackupObserver;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void initializeTransports(int,java.lang.String[],android.app.backup.IBackupObserver)>(i0, r1, r2);

     label1:
        return;
    }

    public boolean isAppEligibleForBackup(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        com.android.server.backup.UserBackupManagerService r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "isAppEligibleForBackup()");

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: boolean isAppEligibleForBackup(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isAppEligibleForBackupForUser(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isAppEligibleForBackup(int,java.lang.String)>(i0, r1);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    protected boolean isBackupDisabled()
    {
        com.android.server.backup.BackupManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.backup.disable", 0);

        return $z0;
    }

    public boolean isBackupEnabled() throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isBackupEnabledForUser(int)>($i0);

        return $z0;
    }

    public boolean isBackupEnabled(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "isBackupEnabled()");

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: boolean isBackupEnabled()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isBackupEnabledForUser(int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isBackupEnabled(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isBackupServiceActive(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mStateLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.backup.BackupManagerService: boolean mGlobalDisable>;

        if $z0 != 0 goto label3;

        $z1 = specialinvoke r0.<com.android.server.backup.BackupManagerService: boolean isBackupActivatedForUser(int)>(i0);

        if $z1 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z2;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isUserReadyForBackup(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.lang.Object $r2, $r4;
        boolean z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        z0 = 0;

        $r2 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(0);

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r4 == null goto label1;

        z0 = 1;

        goto label1;

     label1:
        return z0;
    }

    public void lambda$onStopUser$1$BackupManagerService(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.backup.BackupManagerService: boolean mGlobalDisable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping service for user: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r5);

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void stopServiceForUser(int)>(i0);

     label1:
        return;
    }

    public void lambda$onUnlockUser$0$BackupManagerService(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void startServiceForUser(int)>(i0);

        return;
    }

    public android.content.ComponentName[] listAllTransportComponents(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        android.content.ComponentName[] r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "listAllTransportComponents()");

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: android.content.ComponentName[] listAllTransportComponents()>();

     label2:
        return r2;
    }

    public android.content.ComponentName[] listAllTransportComponentsForUser(int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        android.content.ComponentName[] r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.content.ComponentName[] listAllTransportComponents(int)>(i0);

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public java.lang.String[] listAllTransports() throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int $i0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransportsForUser(int)>($i0);

        return $r1;
    }

    public java.lang.String[] listAllTransports(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String[] r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "listAllTransports()");

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: java.lang.String[] listAllTransports()>();

     label2:
        return r2;
    }

    public java.lang.String[] listAllTransportsForUser(int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String[] r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransports(int)>(i0);

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    void onStopUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup._$$Lambda$BackupManagerService$PzvNLQ5gp1PWnFQ6Pxc6Lw6ubKU $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r1 = new com.android.server.backup._$$Lambda$BackupManagerService$PzvNLQ5gp1PWnFQ6Pxc6Lw6ubKU;

        specialinvoke $r1.<com.android.server.backup._$$Lambda$BackupManagerService$PzvNLQ5gp1PWnFQ6Pxc6Lw6ubKU: void <init>(com.android.server.backup.BackupManagerService,int)>(r0, i0);

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void postToHandler(java.lang.Runnable)>($r1);

        return;
    }

    void onUnlockUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup._$$Lambda$BackupManagerService$6P4GQiH_FZ5t_w1XVcGR55OdSL4 $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r1 = new com.android.server.backup._$$Lambda$BackupManagerService$6P4GQiH_FZ5t_w1XVcGR55OdSL4;

        specialinvoke $r1.<com.android.server.backup._$$Lambda$BackupManagerService$6P4GQiH_FZ5t_w1XVcGR55OdSL4: void <init>(com.android.server.backup.BackupManagerService,int)>(r0, i0);

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void postToHandler(java.lang.Runnable)>($r1);

        return;
    }

    public void opComplete(int, int, long)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1;
        long l2;
        com.android.server.backup.UserBackupManagerService r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "opComplete()");

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void opComplete(int,long)>(i1, l2);

     label1:
        return;
    }

    public void opComplete(int, long) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, $i2;
        long l1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $i2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void opCompleteForUser(int,int,long)>($i2, i0, l1);

        return;
    }

    public void opCompleteForUser(int, int, long) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1;
        long l2;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void opComplete(int,int,long)>(i0, i1, l2);

     label1:
        return;
    }

    protected void postToHandler(java.lang.Runnable)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.backup.BackupManagerService: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

    public int requestBackup(int, java.lang.String[], android.app.backup.IBackupObserver, android.app.backup.IBackupManagerMonitor, int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String[] r1;
        android.app.backup.IBackupObserver r2;
        android.app.backup.IBackupManagerMonitor r3;
        int i0, i1, i2;
        com.android.server.backup.UserBackupManagerService r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i1 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: android.app.backup.IBackupObserver;

        r3 := @parameter3: android.app.backup.IBackupManagerMonitor;

        i0 := @parameter4: int;

        r4 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i1, "requestBackup()");

        if r4 != null goto label1;

        i2 = -2001;

        goto label2;

     label1:
        i2 = virtualinvoke r4.<com.android.server.backup.UserBackupManagerService: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>(r1, r2, r3, i0);

     label2:
        return i2;
    }

    public int requestBackup(java.lang.String[], android.app.backup.IBackupObserver, android.app.backup.IBackupManagerMonitor, int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String[] r1;
        android.app.backup.IBackupObserver r2;
        android.app.backup.IBackupManagerMonitor r3;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: android.app.backup.IBackupObserver;

        r3 := @parameter2: android.app.backup.IBackupManagerMonitor;

        i0 := @parameter3: int;

        $i1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $i2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>($i1, r1, r2, r3, i0);

        return $i2;
    }

    public int requestBackupForUser(int, java.lang.String[], android.app.backup.IBackupObserver, android.app.backup.IBackupManagerMonitor, int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1, $i2;
        java.lang.String[] r1;
        android.app.backup.IBackupObserver r2;
        android.app.backup.IBackupManagerMonitor r3;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: android.app.backup.IBackupObserver;

        r3 := @parameter3: android.app.backup.IBackupManagerMonitor;

        i1 := @parameter4: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 != 0 goto label1;

        return -2001;

     label1:
        $i2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int requestBackup(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>(i0, r1, r2, r3, i1);

        return $i2;
    }

    public void restoreAtInstall(int, java.lang.String, int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1;
        java.lang.String r1;
        com.android.server.backup.UserBackupManagerService r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "restoreAtInstall()");

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService: void restoreAtInstall(java.lang.String,int)>(r1, i1);

     label1:
        return;
    }

    public void restoreAtInstall(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void restoreAtInstallForUser(int,java.lang.String,int)>($i1, r1, i0);

        return;
    }

    public void restoreAtInstallForUser(int, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void restoreAtInstall(int,java.lang.String,int)>(i0, r1, i1);

     label1:
        return;
    }

    public java.lang.String selectBackupTransport(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String r2, r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "selectBackupTransport()");

        if r1 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: java.lang.String selectBackupTransport(java.lang.String)>(r2);

     label2:
        return r3;
    }

    public java.lang.String selectBackupTransport(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        $r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String selectBackupTransportForUser(int,java.lang.String)>($i0, r1);

        return $r2;
    }

    public void selectBackupTransportAsync(int, android.content.ComponentName, android.app.backup.ISelectBackupTransportCallback)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.content.ComponentName r1;
        android.app.backup.ISelectBackupTransportCallback r2;
        com.android.server.backup.UserBackupManagerService r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.ComponentName;

        r2 := @parameter2: android.app.backup.ISelectBackupTransportCallback;

        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "selectBackupTransportAsync()");

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.backup.UserBackupManagerService: void selectBackupTransportAsync(android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>(r1, r2);

     label1:
        return;
    }

    public void selectBackupTransportAsyncForUser(int, android.content.ComponentName, android.app.backup.ISelectBackupTransportCallback) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.app.backup.ISelectBackupTransportCallback r1;
        boolean $z0;
        android.os.RemoteException $r2;
        android.content.ComponentName r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: android.content.ComponentName;

        r1 := @parameter2: android.app.backup.ISelectBackupTransportCallback;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void selectBackupTransportAsync(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>(i0, r3, r1);

        goto label5;

     label1:
        if r1 == null goto label5;

     label2:
        interfaceinvoke r1.<android.app.backup.ISelectBackupTransportCallback: void onFailure(int)>(-2001);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public java.lang.String selectBackupTransportForUser(int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String selectBackupTransport(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public void setAncestralSerialNumber(long)
    {
        com.android.server.backup.BackupManagerService r0;
        long l0;
        com.android.server.backup.UserBackupManagerService r1;
        boolean $z0;
        android.os.UserHandle $r2;
        int $i1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.server.backup.BackupManagerService: boolean mGlobalDisable>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $i1 = virtualinvoke $r2.<android.os.UserHandle: int getIdentifier()>();

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>($i1, "setAncestralSerialNumber()");

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void setAncestralSerialNumber(long)>(l0);

     label2:
        return;
    }

    public void setAutoRestore(int, boolean)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean z0;
        com.android.server.backup.UserBackupManagerService r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "setAutoRestore()");

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void setAutoRestore(boolean)>(z0);

     label1:
        return;
    }

    public void setAutoRestore(boolean) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        boolean z0;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        z0 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void setAutoRestoreForUser(int,boolean)>($i0, z0);

        return;
    }

    public void setAutoRestoreForUser(int, boolean) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean z0, $z1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void setAutoRestore(int,boolean)>(i0, z0);

     label1:
        return;
    }

    public void setBackupEnabled(int, boolean)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean z0;
        com.android.server.backup.UserBackupManagerService r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "setBackupEnabled()");

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void setBackupEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void setBackupEnabled(boolean) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        boolean z0;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        z0 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void setBackupEnabledForUser(int,boolean)>($i0, z0);

        return;
    }

    public void setBackupEnabledForUser(int, boolean) throws android.os.RemoteException
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean z0, $z1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void setBackupEnabled(int,boolean)>(i0, z0);

     label1:
        return;
    }

    public boolean setBackupPassword(java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2;
        boolean z0, $z1, z2;
        com.android.server.backup.UserBackupManagerService r3;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int binderGetCallingUserId()>();

        z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>($i0);

        z2 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(0, "setBackupPassword()");

        if r3 == null goto label2;

        $z1 = virtualinvoke r3.<com.android.server.backup.UserBackupManagerService: boolean setBackupPassword(java.lang.String,java.lang.String)>(r1, r2);

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label2;

     label2:
        return z2;
    }

    public void setBackupServiceActive(int, boolean)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        long l1;
        java.lang.String $r6, r15;
        android.os.UserManager $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12;
        java.io.File r13;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void enforcePermissionsOnUser(int)>(i0);

        if i0 == 0 goto label04;

     label01:
        r13 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.io.File getRememberActivatedFileForNonSystemUser(int)>(i0);

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void createFile(java.io.File)>(r13);

        staticinvoke <com.android.server.backup.utils.RandomAccessFileUtils: void writeBoolean(java.io.File,boolean)>(r13, z0);

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Unable to persist backup service activity", $r9);

     label04:
        $z2 = r0.<com.android.server.backup.BackupManagerService: boolean mGlobalDisable>;

        if $z2 == 0 goto label05;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Backup service not supported");

        return;

     label05:
        r1 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mStateLock>;

        entermonitor r1;

     label06:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Making backup ");

     label07:
        if z0 == 0 goto label08;

        r15 = "";

        goto label09;

     label08:
        r15 = "in";

     label09:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("active");

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

     label10:
        if z0 == 0 goto label22;

     label11:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void activateBackupForUserLocked(int)>(i0);

     label12:
        goto label15;

     label13:
        $r8 := @caughtexception;

     label14:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to persist backup service activity");

     label15:
        $r7 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.os.UserManager getUserManager()>();

        $z1 = virtualinvoke $r7.<android.os.UserManager: boolean isUserUnlocked(int)>(i0);

        if $z1 == 0 goto label27;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label16:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void startServiceForUser(int)>(i0);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label18:
        goto label27;

     label19:
        $r12 := @caughtexception;

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label21:
        throw $r12;

     label22:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void deactivateBackupForUserLocked(int)>(i0);

     label23:
        goto label26;

     label24:
        $r11 := @caughtexception;

     label25:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to persist backup service inactivity");

     label26:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void onStopUser(int)>(i0);

     label27:
        exitmonitor r1;

     label28:
        return;

     label29:
        $r10 := @caughtexception;

     label30:
        exitmonitor r1;

     label31:
        throw $r10;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label14 to label15 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label25 to label26 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    void startServiceForUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean $z0, $z1;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3, $r10, $r15;
        java.lang.String $r6, $r14, $r18;
        java.util.Set $r7;
        android.content.Context $r8;
        com.android.server.backup.UserBackupManagerService $r9;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.backup.BackupManagerService: boolean mGlobalDisable>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Backup service not supported");

        return;

     label1:
        $z1 = specialinvoke r0.<com.android.server.backup.BackupManagerService: boolean isBackupActivatedForUser(int)>(i0);

        if $z1 != 0 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup not activated for user ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r18);

        return;

     label2:
        $r1 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r2 == null goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userId ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already started, so not starting again");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

        return;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting service for user: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

        $r8 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mTransportWhitelist>;

        $r9 = staticinvoke <com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService createAndInitializeService(int,android.content.Context,com.android.server.backup.BackupManagerService,java.util.Set)>(i0, $r8, r0, $r7);

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void startServiceForUser(int,com.android.server.backup.UserBackupManagerService)>(i0, $r9);

        return;
    }

    void startServiceForUser(int, com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.backup.UserBackupManagerService;

        $r2 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "backup enable");

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void initializeBackupEnableState()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return;
    }

    protected void stopServiceForUser(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.UserBackupManagerService r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        android.content.Context $r4, $r5;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mUserServices>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object removeReturnOld(int)>(i0);

        r1 = (com.android.server.backup.UserBackupManagerService) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: void tearDownService()>();

        $r4 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.backup.KeyValueBackupJob: void cancel(int,android.content.Context)>(i0, $r4);

        $r5 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.backup.FullBackupJob: void cancel(int,android.content.Context)>(i0, $r5);

     label1:
        return;
    }

    public void updateTransportAttributes(int, android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.CharSequence)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.content.ComponentName r1;
        java.lang.String r2, r4;
        android.content.Intent r3, r5;
        java.lang.CharSequence r6;
        com.android.server.backup.UserBackupManagerService r7;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.ComponentName;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.content.Intent;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: android.content.Intent;

        r6 := @parameter6: java.lang.CharSequence;

        r7 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.UserBackupManagerService getServiceForUserIfCallerHasPermission(int,java.lang.String)>(i0, "updateTransportAttributes()");

        if r7 == null goto label1;

        virtualinvoke r7.<com.android.server.backup.UserBackupManagerService: void updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>(r1, r2, r3, r4, r5, r6);

     label1:
        return;
    }

    public void updateTransportAttributesForUser(int, android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.CharSequence)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        android.content.ComponentName r1;
        java.lang.String r2, r4;
        android.content.Intent r3, r5;
        java.lang.CharSequence r6;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.ComponentName;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.content.Intent;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: android.content.Intent;

        r6 := @parameter6: java.lang.CharSequence;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void updateTransportAttributes(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>(i0, r1, r2, r3, r4, r5, r6);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.BackupManagerService: java.lang.String TAG> = "BackupManagerService";

        <com.android.server.backup.BackupManagerService: java.lang.String REMEMBER_ACTIVATED_FILENAME> = "backup-remember-activated";

        <com.android.server.backup.BackupManagerService: boolean MORE_DEBUG> = 0;

        <com.android.server.backup.BackupManagerService: java.lang.String DUMP_RUNNING_USERS_MESSAGE> = "Backup Manager is running for users:";

        <com.android.server.backup.BackupManagerService: boolean DEBUG_SCHEDULING> = 1;

        <com.android.server.backup.BackupManagerService: boolean DEBUG> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String BACKUP_THREAD> = "backup";

        <com.android.server.backup.BackupManagerService: java.lang.String BACKUP_SUPPRESS_FILENAME> = "backup-suppress";

        <com.android.server.backup.BackupManagerService: java.lang.String BACKUP_DISABLE_PROPERTY> = "ro.backup.disable";

        <com.android.server.backup.BackupManagerService: java.lang.String BACKUP_ACTIVATED_FILENAME> = "backup-activated";

        return;
    }
}
