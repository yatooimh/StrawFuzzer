public final class com.android.server.backup.BackupPasswordManager extends java.lang.Object
{
    private static final int BACKUP_PW_FILE_VERSION;
    private static final boolean DEBUG;
    private static final int DEFAULT_PW_FILE_VERSION;
    private static final java.lang.String PASSWORD_HASH_FILE_NAME;
    private static final java.lang.String PASSWORD_VERSION_FILE_NAME;
    public static final java.lang.String PBKDF_CURRENT;
    public static final java.lang.String PBKDF_FALLBACK;
    private static final java.lang.String TAG;
    private final java.io.File mBaseStateDir;
    private final android.content.Context mContext;
    private java.lang.String mPasswordHash;
    private byte[] mPasswordSalt;
    private int mPasswordVersion;
    private final java.security.SecureRandom mRng;

    void <init>(android.content.Context, java.io.File, java.security.SecureRandom)
    {
        com.android.server.backup.BackupPasswordManager r0;
        android.content.Context r1;
        java.io.File r2;
        java.security.SecureRandom r3;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.BackupPasswordManager: android.content.Context mContext> = r1;

        r0.<com.android.server.backup.BackupPasswordManager: java.security.SecureRandom mRng> = r3;

        r0.<com.android.server.backup.BackupPasswordManager: java.io.File mBaseStateDir> = r2;

        specialinvoke r0.<com.android.server.backup.BackupPasswordManager: void loadStateFromFilesystem()>();

        return;
    }

    private boolean clearPassword()
    {
        com.android.server.backup.BackupPasswordManager r0;
        java.io.File r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        r1 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: java.io.File getPasswordHashFile()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupPasswordManager", "Unable to clear backup password");

        return 0;

     label1:
        r0.<com.android.server.backup.BackupPasswordManager: java.lang.String mPasswordHash> = null;

        r0.<com.android.server.backup.BackupPasswordManager: byte[] mPasswordSalt> = null;

        return 1;
    }

    private java.io.File getPasswordHashFile()
    {
        com.android.server.backup.BackupPasswordManager r0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.backup.BackupPasswordManager: java.io.File mBaseStateDir>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "pwhash");

        return $r1;
    }

    private com.android.server.backup.utils.DataStreamFileCodec getPasswordHashFileCodec()
    {
        com.android.server.backup.BackupPasswordManager r0;
        com.android.server.backup.utils.DataStreamFileCodec $r1;
        java.io.File $r2;
        com.android.server.backup.BackupPasswordManager$PasswordHashFileCodec $r3;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        $r1 = new com.android.server.backup.utils.DataStreamFileCodec;

        $r2 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: java.io.File getPasswordHashFile()>();

        $r3 = new com.android.server.backup.BackupPasswordManager$PasswordHashFileCodec;

        specialinvoke $r3.<com.android.server.backup.BackupPasswordManager$PasswordHashFileCodec: void <init>(com.android.server.backup.BackupPasswordManager$1)>(null);

        specialinvoke $r1.<com.android.server.backup.utils.DataStreamFileCodec: void <init>(java.io.File,com.android.server.backup.utils.DataStreamCodec)>($r2, $r3);

        return $r1;
    }

    private com.android.server.backup.utils.DataStreamFileCodec getPasswordVersionFileCodec()
    {
        com.android.server.backup.BackupPasswordManager r0;
        com.android.server.backup.utils.DataStreamFileCodec $r1;
        java.io.File $r2, $r3;
        com.android.server.backup.BackupPasswordManager$PasswordVersionFileCodec $r4;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        $r1 = new com.android.server.backup.utils.DataStreamFileCodec;

        $r2 = new java.io.File;

        $r3 = r0.<com.android.server.backup.BackupPasswordManager: java.io.File mBaseStateDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "pwversion");

        $r4 = new com.android.server.backup.BackupPasswordManager$PasswordVersionFileCodec;

        specialinvoke $r4.<com.android.server.backup.BackupPasswordManager$PasswordVersionFileCodec: void <init>(com.android.server.backup.BackupPasswordManager$1)>(null);

        specialinvoke $r1.<com.android.server.backup.utils.DataStreamFileCodec: void <init>(java.io.File,com.android.server.backup.utils.DataStreamCodec)>($r2, $r4);

        return $r1;
    }

    private void loadStateFromFilesystem()
    {
        com.android.server.backup.BackupPasswordManager r0;
        com.android.server.backup.utils.DataStreamFileCodec $r1, $r4;
        java.lang.Object $r2, $r5;
        java.lang.Integer $r3;
        int $i0;
        java.lang.String $r6;
        byte[] $r7;
        java.lang.Throwable $r8, $r9;
        com.android.server.backup.BackupPasswordManager$BackupPasswordHash r11;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

     label1:
        $r1 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: com.android.server.backup.utils.DataStreamFileCodec getPasswordVersionFileCodec()>();

        $r2 = virtualinvoke $r1.<com.android.server.backup.utils.DataStreamFileCodec: java.lang.Object deserialize()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r0.<com.android.server.backup.BackupPasswordManager: int mPasswordVersion> = $i0;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupPasswordManager", "Unable to read backup pw version");

        r0.<com.android.server.backup.BackupPasswordManager: int mPasswordVersion> = 1;

     label4:
        $r4 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: com.android.server.backup.utils.DataStreamFileCodec getPasswordHashFileCodec()>();

        $r5 = virtualinvoke $r4.<com.android.server.backup.utils.DataStreamFileCodec: java.lang.Object deserialize()>();

        r11 = (com.android.server.backup.BackupPasswordManager$BackupPasswordHash) $r5;

        $r6 = r11.<com.android.server.backup.BackupPasswordManager$BackupPasswordHash: java.lang.String hash>;

        r0.<com.android.server.backup.BackupPasswordManager: java.lang.String mPasswordHash> = $r6;

        $r7 = r11.<com.android.server.backup.BackupPasswordManager$BackupPasswordHash: byte[] salt>;

        r0.<com.android.server.backup.BackupPasswordManager: byte[] mPasswordSalt> = $r7;

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupPasswordManager", "Unable to read saved backup pw hash");

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    private boolean passwordMatchesSaved(java.lang.String)
    {
        com.android.server.backup.BackupPasswordManager r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: boolean passwordMatchesSaved(java.lang.String,java.lang.String)>("PBKDF2WithHmacSHA1", r1);

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: boolean usePbkdf2Fallback()>();

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: boolean passwordMatchesSaved(java.lang.String,java.lang.String)>("PBKDF2WithHmacSHA1And8bit", r1);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private boolean passwordMatchesSaved(java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupPasswordManager r0;
        java.lang.String r1, r2, $r4, r5, r6;
        int $i0;
        byte[] $r3;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.backup.BackupPasswordManager: java.lang.String mPasswordHash>;

        z2 = 0;

        if r2 != null goto label3;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

     label2:
        return z2;

     label3:
        if r1 == null goto label5;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

        goto label5;

     label4:
        $r3 = r0.<com.android.server.backup.BackupPasswordManager: byte[] mPasswordSalt>;

        r6 = staticinvoke <com.android.server.backup.utils.PasswordUtils: java.lang.String buildPasswordHash(java.lang.String,java.lang.String,byte[],int)>(r5, r1, $r3, 10000);

        $r4 = r0.<com.android.server.backup.BackupPasswordManager: java.lang.String mPasswordHash>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        return $z0;

     label5:
        return 0;
    }

    private byte[] randomSalt()
    {
        com.android.server.backup.BackupPasswordManager r0;
        byte[] r1;
        int $i0;
        java.security.SecureRandom $r2;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        $i0 = 512 / 8;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<com.android.server.backup.BackupPasswordManager: java.security.SecureRandom mRng>;

        virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        return r1;
    }

    private boolean usePbkdf2Fallback()
    {
        com.android.server.backup.BackupPasswordManager r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        $i0 = r0.<com.android.server.backup.BackupPasswordManager: int mPasswordVersion>;

        if $i0 >= 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean backupPasswordMatches(java.lang.String)
    {
        com.android.server.backup.BackupPasswordManager r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupPasswordManager: boolean hasBackupPassword()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: boolean passwordMatchesSaved(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    boolean hasBackupPassword()
    {
        com.android.server.backup.BackupPasswordManager r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        $r2 = r0.<com.android.server.backup.BackupPasswordManager: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "hasBackupPassword");

        r1 = r0.<com.android.server.backup.BackupPasswordManager: java.lang.String mPasswordHash>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean setBackupPassword(java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupPasswordManager r0;
        java.lang.String r1, r8, r9;
        com.android.server.backup.utils.DataStreamFileCodec r2, $r4;
        android.content.Context $r3;
        boolean $z0, $z1, $z2;
        java.lang.Integer $r5;
        java.lang.Throwable $r6, $r7;
        byte[] r10;
        com.android.server.backup.BackupPasswordManager$BackupPasswordHash r11;

        r0 := @this: com.android.server.backup.BackupPasswordManager;

        r8 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.backup.BackupPasswordManager: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupPassword");

        $z0 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: boolean passwordMatchesSaved(java.lang.String)>(r8);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: com.android.server.backup.utils.DataStreamFileCodec getPasswordVersionFileCodec()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r4.<com.android.server.backup.utils.DataStreamFileCodec: void serialize(java.lang.Object)>($r5);

        r0.<com.android.server.backup.BackupPasswordManager: int mPasswordVersion> = 2;

     label2:
        if r9 == null goto label6;

        $z2 = virtualinvoke r9.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        goto label6;

     label3:
        r10 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: byte[] randomSalt()>();

        r1 = staticinvoke <com.android.server.backup.utils.PasswordUtils: java.lang.String buildPasswordHash(java.lang.String,java.lang.String,byte[],int)>("PBKDF2WithHmacSHA1", r9, r10, 10000);

        r2 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: com.android.server.backup.utils.DataStreamFileCodec getPasswordHashFileCodec()>();

        r11 = new com.android.server.backup.BackupPasswordManager$BackupPasswordHash;

        specialinvoke r11.<com.android.server.backup.BackupPasswordManager$BackupPasswordHash: void <init>(java.lang.String,byte[])>(r1, r10);

        virtualinvoke r2.<com.android.server.backup.utils.DataStreamFileCodec: void serialize(java.lang.Object)>(r11);

        r0.<com.android.server.backup.BackupPasswordManager: java.lang.String mPasswordHash> = r1;

        r0.<com.android.server.backup.BackupPasswordManager: byte[] mPasswordSalt> = r10;

     label4:
        return 1;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupPasswordManager", "Unable to set backup password");

        return 0;

     label6:
        $z1 = specialinvoke r0.<com.android.server.backup.BackupPasswordManager: boolean clearPassword()>();

        return $z1;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupPasswordManager", "Unable to write backup pw version; password not changed");

        return 0;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.BackupPasswordManager: java.lang.String TAG> = "BackupPasswordManager";

        <com.android.server.backup.BackupPasswordManager: java.lang.String PBKDF_FALLBACK> = "PBKDF2WithHmacSHA1And8bit";

        <com.android.server.backup.BackupPasswordManager: java.lang.String PBKDF_CURRENT> = "PBKDF2WithHmacSHA1";

        <com.android.server.backup.BackupPasswordManager: java.lang.String PASSWORD_VERSION_FILE_NAME> = "pwversion";

        <com.android.server.backup.BackupPasswordManager: java.lang.String PASSWORD_HASH_FILE_NAME> = "pwhash";

        <com.android.server.backup.BackupPasswordManager: int DEFAULT_PW_FILE_VERSION> = 1;

        <com.android.server.backup.BackupPasswordManager: boolean DEBUG> = 0;

        <com.android.server.backup.BackupPasswordManager: int BACKUP_PW_FILE_VERSION> = 2;

        return;
    }
}
