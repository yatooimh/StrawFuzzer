public class com.android.server.backup.PackageManagerBackupAgent extends android.app.backup.BackupAgent
{
    private static final java.lang.String ANCESTRAL_RECORD_KEY;
    private static final int ANCESTRAL_RECORD_VERSION;
    private static final boolean DEBUG;
    private static final java.lang.String DEFAULT_HOME_KEY;
    private static final java.lang.String GLOBAL_METADATA_KEY;
    private static final java.lang.String STATE_FILE_HEADER;
    private static final int STATE_FILE_VERSION;
    private static final java.lang.String TAG;
    private static final int UNDEFINED_ANCESTRAL_RECORD_VERSION;
    private java.util.List mAllPackages;
    private final java.util.HashSet mExisting;
    private boolean mHasMetadata;
    private android.content.pm.PackageManager mPackageManager;
    private android.content.ComponentName mRestoredHome;
    private java.lang.String mRestoredHomeInstaller;
    private java.util.ArrayList mRestoredHomeSigHashes;
    private long mRestoredHomeVersion;
    private java.util.HashMap mRestoredSignatures;
    private java.util.HashMap mStateVersions;
    private android.content.ComponentName mStoredHomeComponent;
    private java.util.ArrayList mStoredHomeSigHashes;
    private long mStoredHomeVersion;
    private java.lang.String mStoredIncrementalVersion;
    private int mStoredSdkVersion;
    private int mUserId;

    public void <init>(android.content.pm.PackageManager, int)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        android.content.pm.PackageManager r1;
        int i0;
        java.util.HashMap $r2;
        java.util.HashSet $r3;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter0: android.content.pm.PackageManager;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.backup.BackupAgent: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mStateVersions> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting> = $r3;

        specialinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: void init(android.content.pm.PackageManager,java.util.List,int)>(r1, null, i0);

        virtualinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: void evaluateStorablePackages()>();

        return;
    }

    public void <init>(android.content.pm.PackageManager, java.util.List, int)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        android.content.pm.PackageManager r1;
        java.util.List r2;
        int i0;
        java.util.HashMap $r3;
        java.util.HashSet $r4;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter0: android.content.pm.PackageManager;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.backup.BackupAgent: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mStateVersions> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting> = $r4;

        specialinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: void init(android.content.pm.PackageManager,java.util.List,int)>(r1, r2, i0);

        return;
    }

    static java.util.HashMap access$1002(com.android.server.backup.PackageManagerBackupAgent, java.util.HashMap)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        java.util.HashMap r1;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter1: java.util.HashMap;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mRestoredSignatures> = r1;

        return r1;
    }

    static int access$202(com.android.server.backup.PackageManagerBackupAgent, int)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        int i0;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        i0 := @parameter1: int;

        r0.<com.android.server.backup.PackageManagerBackupAgent: int mStoredSdkVersion> = i0;

        return i0;
    }

    static java.lang.String access$302(com.android.server.backup.PackageManagerBackupAgent, java.lang.String)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.lang.String mStoredIncrementalVersion> = r1;

        return r1;
    }

    static boolean access$402(com.android.server.backup.PackageManagerBackupAgent, boolean)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        boolean z0;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        z0 := @parameter1: boolean;

        r0.<com.android.server.backup.PackageManagerBackupAgent: boolean mHasMetadata> = z0;

        return z0;
    }

    static android.content.ComponentName access$502(com.android.server.backup.PackageManagerBackupAgent, android.content.ComponentName)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        android.content.ComponentName r1;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter1: android.content.ComponentName;

        r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.ComponentName mRestoredHome> = r1;

        return r1;
    }

    static long access$602(com.android.server.backup.PackageManagerBackupAgent, long)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        long l0;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        l0 := @parameter1: long;

        r0.<com.android.server.backup.PackageManagerBackupAgent: long mRestoredHomeVersion> = l0;

        return l0;
    }

    static java.lang.String access$702(com.android.server.backup.PackageManagerBackupAgent, java.lang.String)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.lang.String mRestoredHomeInstaller> = r1;

        return r1;
    }

    static java.util.ArrayList access$802(com.android.server.backup.PackageManagerBackupAgent, java.util.ArrayList)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        java.util.ArrayList r1;

        r0 := @parameter0: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter1: java.util.ArrayList;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.ArrayList mRestoredHomeSigHashes> = r1;

        return r1;
    }

    static java.util.ArrayList access$900(java.io.DataInputStream)
    {
        java.io.DataInputStream r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.io.DataInputStream;

        $r1 = staticinvoke <com.android.server.backup.PackageManagerBackupAgent: java.util.ArrayList readSignatureHashArray(java.io.DataInputStream)>(r0);

        return $r1;
    }

    private int getAncestralRecordVersionValue(android.app.backup.BackupDataInput) throws java.io.IOException
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        android.app.backup.BackupDataInput r1;
        int i1, i3;
        boolean $z0, $z1;
        java.lang.String $r2, r5;
        java.io.DataInputStream $r3;
        java.io.ByteArrayInputStream $r4;
        byte[] r6;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter0: android.app.backup.BackupDataInput;

        i3 = -1;

        $z0 = virtualinvoke r1.<android.app.backup.BackupDataInput: boolean readNextHeader()>();

        if $z0 == 0 goto label1;

        r5 = virtualinvoke r1.<android.app.backup.BackupDataInput: java.lang.String getKey()>();

        i1 = virtualinvoke r1.<android.app.backup.BackupDataInput: int getDataSize()>();

        i3 = -1;

        $r2 = "@ancestral_record@";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label1;

        r6 = newarray (byte)[i1];

        virtualinvoke r1.<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)>(r6, 0, i1);

        $r3 = new java.io.DataInputStream;

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r6);

        specialinvoke $r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r4);

        i3 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

     label1:
        return i3;
    }

    private android.content.ComponentName getPreferredHomeComponent()
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        java.util.ArrayList $r1;
        android.content.pm.PackageManager $r2;
        android.content.ComponentName $r3;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        $r2 = r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.pm.PackageManager mPackageManager>;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.ComponentName getHomeActivities(java.util.List)>($r1);

        return $r3;
    }

    private com.android.server.backup.PackageManagerBackupAgent$RestoreDataConsumer getRestoreDataConsumer(int)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        int i0;
        com.android.server.backup.PackageManagerBackupAgent$LegacyRestoreDataConsumer $r2;
        com.android.server.backup.PackageManagerBackupAgent$AncestralVersion1RestoreDataConsumer $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        i0 := @parameter0: int;

        if i0 == -1 goto label2;

        if i0 == 1 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized ANCESTRAL_RECORD_VERSION: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", $r7);

        return null;

     label1:
        $r3 = new com.android.server.backup.PackageManagerBackupAgent$AncestralVersion1RestoreDataConsumer;

        specialinvoke $r3.<com.android.server.backup.PackageManagerBackupAgent$AncestralVersion1RestoreDataConsumer: void <init>(com.android.server.backup.PackageManagerBackupAgent,com.android.server.backup.PackageManagerBackupAgent$1)>(r0, null);

        return $r3;

     label2:
        $r2 = new com.android.server.backup.PackageManagerBackupAgent$LegacyRestoreDataConsumer;

        specialinvoke $r2.<com.android.server.backup.PackageManagerBackupAgent$LegacyRestoreDataConsumer: void <init>(com.android.server.backup.PackageManagerBackupAgent,com.android.server.backup.PackageManagerBackupAgent$1)>(r0, null);

        return $r2;
    }

    public static java.util.List getStorableApplications(android.content.pm.PackageManager, int)
    {
        int i0, $i1, i2;
        java.lang.Object $r0;
        android.content.pm.PackageInfo $r1;
        android.content.pm.ApplicationInfo $r2;
        boolean $z0;
        android.content.pm.PackageManager r4;
        java.util.List r5;

        r4 := @parameter0: android.content.pm.PackageManager;

        i0 := @parameter1: int;

        r5 = virtualinvoke r4.<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(134217728, i0);

        $i1 = interfaceinvoke r5.<java.util.List: int size()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label3;

        $r0 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i2);

        $r1 = (android.content.pm.PackageInfo) $r0;

        $r2 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo,int)>($r2, i0);

        if $z0 != 0 goto label2;

        interfaceinvoke r5.<java.util.List: java.lang.Object remove(int)>(i2);

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        return r5;
    }

    private void init(android.content.pm.PackageManager, java.util.List, int)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        android.content.pm.PackageManager r1;
        java.util.List r2;
        int i0, $i1;
        java.lang.String $r3;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter0: android.content.pm.PackageManager;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.pm.PackageManager mPackageManager> = r1;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.List mAllPackages> = r2;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mRestoredSignatures> = null;

        r0.<com.android.server.backup.PackageManagerBackupAgent: boolean mHasMetadata> = 0;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        r0.<com.android.server.backup.PackageManagerBackupAgent: int mStoredSdkVersion> = $i1;

        $r3 = <android.os.Build$VERSION: java.lang.String INCREMENTAL>;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.lang.String mStoredIncrementalVersion> = $r3;

        r0.<com.android.server.backup.PackageManagerBackupAgent: int mUserId> = i0;

        return;
    }

    private void parseStateFile(android.os.ParcelFileDescriptor)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        com.android.server.backup.PackageManagerBackupAgent$Metadata r2;
        java.util.HashSet $r3, $r11, $r12;
        java.util.HashMap $r4, r31;
        java.io.DataInputStream $r5;
        java.io.BufferedInputStream $r6;
        java.io.FileInputStream $r7;
        java.io.FileDescriptor $r8;
        boolean $z0, $z1, $z2, z5;
        int $i2, i6, i7;
        java.lang.String $r9, $r13, $r19, $r24, r27, r29, r30;
        android.content.ComponentName $r14;
        long $l3, l8;
        java.util.ArrayList $r15;
        java.lang.Throwable $r20, $r25;
        java.lang.StringBuilder $r21, r28;
        android.os.ParcelFileDescriptor r26;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r26 := @parameter0: android.os.ParcelFileDescriptor;

        $r3 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        virtualinvoke $r3.<java.util.HashSet: void clear()>();

        $r4 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mStateVersions>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: int mStoredSdkVersion> = 0;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.lang.String mStoredIncrementalVersion> = null;

        r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.ComponentName mStoredHomeComponent> = null;

        r0.<com.android.server.backup.PackageManagerBackupAgent: long mStoredHomeVersion> = 0L;

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.ArrayList mStoredHomeSigHashes> = null;

        $r5 = new java.io.DataInputStream;

        $r6 = new java.io.BufferedInputStream;

        $r7 = new java.io.FileInputStream;

        $r8 = virtualinvoke r26.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r8);

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7);

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r6);

        z5 = 0;

     label01:
        r27 = virtualinvoke $r5.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z0 = virtualinvoke r27.<java.lang.String: boolean equals(java.lang.Object)>("=state=");

        if $z0 == 0 goto label07;

        i6 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

     label02:
        if i6 <= 2 goto label05;

     label03:
        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported state file version ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", redoing from start");

        $r19 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PMBA", $r19);

     label04:
        return;

     label05:
        r27 = virtualinvoke $r5.<java.io.DataInputStream: java.lang.String readUTF()>();

     label06:
        goto label09;

     label07:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PMBA", "Older version of saved state - rewriting");

     label08:
        z5 = 1;

     label09:
        r29 = r27;

     label10:
        $z1 = virtualinvoke r27.<java.lang.String: boolean equals(java.lang.Object)>("@home@");

        if $z1 == 0 goto label11;

        $r13 = virtualinvoke $r5.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r14 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r13);

        r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.ComponentName mStoredHomeComponent> = $r14;

        $l3 = virtualinvoke $r5.<java.io.DataInputStream: long readLong()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: long mStoredHomeVersion> = $l3;

        $r15 = staticinvoke <com.android.server.backup.PackageManagerBackupAgent: java.util.ArrayList readSignatureHashArray(java.io.DataInputStream)>($r5);

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.ArrayList mStoredHomeSigHashes> = $r15;

        r29 = virtualinvoke $r5.<java.io.DataInputStream: java.lang.String readUTF()>();

     label11:
        $z2 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("@meta@");

        if $z2 == 0 goto label23;

        $i2 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: int mStoredSdkVersion> = $i2;

        $r9 = virtualinvoke $r5.<java.io.DataInputStream: java.lang.String readUTF()>();

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.lang.String mStoredIncrementalVersion> = $r9;

     label12:
        if z5 != 0 goto label14;

     label13:
        $r12 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        virtualinvoke $r12.<java.util.HashSet: boolean add(java.lang.Object)>("@meta@");

     label14:
        r30 = virtualinvoke $r5.<java.io.DataInputStream: java.lang.String readUTF()>();

        i7 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

     label15:
        if i7 != -2147483648 goto label18;

     label16:
        l8 = virtualinvoke $r5.<java.io.DataInputStream: long readLong()>();

     label17:
        goto label19;

     label18:
        l8 = (long) i7;

     label19:
        if z5 != 0 goto label21;

     label20:
        $r11 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        virtualinvoke $r11.<java.util.HashSet: boolean add(java.lang.Object)>(r30);

     label21:
        r31 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mStateVersions>;

        r2 = new com.android.server.backup.PackageManagerBackupAgent$Metadata;

        specialinvoke r2.<com.android.server.backup.PackageManagerBackupAgent$Metadata: void <init>(com.android.server.backup.PackageManagerBackupAgent,long,java.util.ArrayList)>(r0, l8, null);

        virtualinvoke r31.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r30, r2);

     label22:
        goto label14;

     label23:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", "No global metadata in state file!");

     label24:
        return;

     label25:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read Package Manager state file: ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", $r24);

        goto label27;

     label26:
        $r25 := @caughtexception;

     label27:
        return;

        catch java.io.EOFException from label01 to label02 with label26;
        catch java.io.IOException from label01 to label02 with label25;
        catch java.io.EOFException from label03 to label04 with label26;
        catch java.io.IOException from label03 to label04 with label25;
        catch java.io.EOFException from label05 to label06 with label26;
        catch java.io.IOException from label05 to label06 with label25;
        catch java.io.EOFException from label07 to label08 with label26;
        catch java.io.IOException from label07 to label08 with label25;
        catch java.io.EOFException from label10 to label11 with label26;
        catch java.io.IOException from label10 to label11 with label25;
        catch java.io.EOFException from label11 to label12 with label26;
        catch java.io.IOException from label11 to label12 with label25;
        catch java.io.EOFException from label13 to label14 with label26;
        catch java.io.IOException from label13 to label14 with label25;
        catch java.io.EOFException from label14 to label15 with label26;
        catch java.io.IOException from label14 to label15 with label25;
        catch java.io.EOFException from label16 to label17 with label26;
        catch java.io.IOException from label16 to label17 with label25;
        catch java.io.EOFException from label20 to label21 with label26;
        catch java.io.IOException from label20 to label21 with label25;
        catch java.io.EOFException from label21 to label22 with label26;
        catch java.io.IOException from label21 to label22 with label25;
        catch java.io.EOFException from label23 to label24 with label26;
        catch java.io.IOException from label23 to label24 with label25;
    }

    private static java.util.ArrayList readSignatureHashArray(java.io.DataInputStream)
    {
        int i0, i1, i6;
        java.util.ArrayList r0, r5;
        byte[] r1;
        java.lang.Throwable $r2, $r3;
        java.io.DataInputStream r4;
        boolean z1;
        java.lang.IllegalStateException r6;

        r4 := @parameter0: java.io.DataInputStream;

     label01:
        i0 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

     label02:
        if i0 > 20 goto label12;

        z1 = 0;

     label03:
        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>(i0);

     label04:
        i6 = 0;

     label05:
        if i6 >= i0 goto label09;

     label06:
        i1 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        r1 = newarray (byte)[i1];

        virtualinvoke r4.<java.io.DataInputStream: int read(byte[])>(r1);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label07:
        if i1 == 32 goto label08;

        z1 = 1;

     label08:
        i6 = i6 + 1;

        goto label05;

     label09:
        r5 = r0;

        if z1 == 0 goto label11;

     label10:
        r5 = staticinvoke <com.android.server.backup.BackupUtils: java.util.ArrayList hashSignatureArray(java.util.List)>(r0);

     label11:
        return r5;

     label12:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", "Suspiciously large sig count in restore data; aborting");

        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Bad restore state");

        throw r6;

     label13:
        $r2 := @caughtexception;

        goto label17;

     label14:
        $r3 := @caughtexception;

     label15:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PMBA", "Read empty signature block");

     label16:
        return null;

     label17:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", "Unable to read signatures");

        return null;

        catch java.io.EOFException from label01 to label02 with label14;
        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.io.IOException from label10 to label11 with label13;
        catch java.io.IOException from label12 to label13 with label13;
        catch java.io.IOException from label15 to label16 with label13;
    }

    private static void writeEntity(android.app.backup.BackupDataOutput, java.lang.String, byte[]) throws java.io.IOException
    {
        android.app.backup.BackupDataOutput r0;
        java.lang.String r1;
        byte[] r2;
        int $i0, $i2;

        r0 := @parameter0: android.app.backup.BackupDataOutput;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        $i0 = lengthof r2;

        virtualinvoke r0.<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>(r1, $i0);

        $i2 = lengthof r2;

        virtualinvoke r0.<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)>(r2, $i2);

        return;
    }

    private static void writeSignatureHashArray(java.io.DataOutputStream, java.util.ArrayList) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        byte[] r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r2;
        java.util.ArrayList r3;
        java.util.Iterator r4;

        r0 := @parameter0: java.io.DataOutputStream;

        r3 := @parameter1: java.util.ArrayList;

        $i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>($i0);

        r4 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r1 = (byte[]) $r2;

        $i1 = lengthof r1;

        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>($i1);

        virtualinvoke r0.<java.io.DataOutputStream: void write(byte[])>(r1);

        goto label1;

     label2:
        return;
    }

    private void writeStateFile(java.util.List, android.content.ComponentName, long, java.util.ArrayList, android.os.ParcelFileDescriptor)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        long l0, $l4;
        java.util.ArrayList r1;
        java.io.DataOutputStream $r2;
        java.io.BufferedOutputStream $r3;
        java.io.FileOutputStream $r4;
        java.io.FileDescriptor $r5;
        int $i1, $i2, $i3;
        java.lang.String $r6, $r8, $r9;
        java.lang.Object $r7;
        java.lang.Throwable $r10;
        java.util.List r11;
        android.content.ComponentName r12;
        android.os.ParcelFileDescriptor r13;
        java.util.Iterator r15;
        boolean $z0;
        android.content.pm.PackageInfo r16;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r11 := @parameter0: java.util.List;

        r12 := @parameter1: android.content.ComponentName;

        l0 := @parameter2: long;

        r1 := @parameter3: java.util.ArrayList;

        r13 := @parameter4: android.os.ParcelFileDescriptor;

        $r2 = new java.io.DataOutputStream;

        $r3 = new java.io.BufferedOutputStream;

        $r4 = new java.io.FileOutputStream;

        $r5 = virtualinvoke r13.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r5);

        specialinvoke $r3.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r4);

        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r3);

     label01:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("=state=");

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(2);

     label02:
        if r12 == null goto label04;

     label03:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("@home@");

        $r9 = virtualinvoke r12.<android.content.ComponentName: java.lang.String flattenToString()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r9);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeLong(long)>(l0);

        staticinvoke <com.android.server.backup.PackageManagerBackupAgent: void writeSignatureHashArray(java.io.DataOutputStream,java.util.ArrayList)>($r2, r1);

     label04:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("@meta@");

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i1);

        $r6 = <android.os.Build$VERSION: java.lang.String INCREMENTAL>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r6);

        r15 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (android.content.pm.PackageInfo) $r7;

        $r8 = r16.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r8);

        $i2 = r16.<android.content.pm.PackageInfo: int versionCodeMajor>;

        if $i2 == 0 goto label07;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(-2147483648);

        $l4 = virtualinvoke r16.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeLong(long)>($l4);

     label06:
        goto label08;

     label07:
        $i3 = r16.<android.content.pm.PackageInfo: int versionCode>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i3);

     label08:
        goto label05;

     label09:
        virtualinvoke $r2.<java.io.DataOutputStream: void flush()>();

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", "Unable to write package manager state file!");

     label12:
        return;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
    }

    public void evaluateStorablePackages()
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        int $i0;
        android.content.pm.PackageManager $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        $r1 = r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.backup.PackageManagerBackupAgent: int mUserId>;

        $r2 = staticinvoke <com.android.server.backup.PackageManagerBackupAgent: java.util.List getStorableApplications(android.content.pm.PackageManager,int)>($r1, $i0);

        r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.List mAllPackages> = $r2;

        return;
    }

    public com.android.server.backup.PackageManagerBackupAgent$Metadata getRestoredMetadata(java.lang.String)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        java.lang.String r1;
        java.util.HashMap r2;
        java.lang.Object $r3;
        com.android.server.backup.PackageManagerBackupAgent$Metadata $r4;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mRestoredSignatures>;

        if r2 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PMBA", "getRestoredMetadata() before metadata read!");

        return null;

     label1:
        $r3 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.android.server.backup.PackageManagerBackupAgent$Metadata) $r3;

        return $r4;
    }

    public java.util.Set getRestoredPackages()
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        java.util.HashMap r1;
        java.util.Set $r2;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r1 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mRestoredSignatures>;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PMBA", "getRestoredPackages() before metadata read!");

        return null;

     label1:
        $r2 = virtualinvoke r1.<java.util.HashMap: java.util.Set keySet()>();

        return $r2;
    }

    public boolean hasMetadata()
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        boolean $z0;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        $z0 = r0.<com.android.server.backup.PackageManagerBackupAgent: boolean mHasMetadata>;

        return $z0;
    }

    public void onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        android.app.backup.BackupDataOutput r1;
        android.os.ParcelFileDescriptor r2, r45;
        android.content.pm.PackageManager r5, $r32, r68;
        long l0, $l4, $l5, $l6, l9;
        int i1, $i2, $i3, $i8, i10;
        java.io.ByteArrayOutputStream $r6;
        java.io.DataOutputStream $r7;
        java.lang.StringBuilder $r8, r72;
        java.lang.String $r9, $r10, $r11, $r21, $r26, $r28, $r33, $r35, r46, r52, r53, r54, r58, r66, r67, r69;
        java.util.HashSet $r12, $r13, $r18, $r22, $r64, $r74;
        java.util.List $r14, $r15;
        java.lang.Object $r16, $r24, $r62;
        android.content.pm.PackageInfo $r17, r49, r50, r60, r70;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, z7;
        java.util.ArrayList $r19, $r31, r56, r59;
        byte[] $r20, $r27, $r29, $r48;
        java.util.HashMap $r23;
        com.android.server.backup.PackageManagerBackupAgent$Metadata $r25;
        byte $b7, $b11;
        android.content.ComponentName $r30, r51;
        android.content.pm.Signature[] $r34, r73;
        android.content.pm.PackageManager$NameNotFoundException $r36, $r37, $r38, $r39, $r42, $r44;
        java.lang.Throwable $r40, $r41, $r43;
        android.content.pm.SigningInfo r55, r71;
        android.content.pm.PackageManagerInternal r63;
        java.util.Iterator r65;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r45 := @parameter0: android.os.ParcelFileDescriptor;

        r1 := @parameter1: android.app.backup.BackupDataOutput;

        r2 := @parameter2: android.os.ParcelFileDescriptor;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.DataOutputStream;

        specialinvoke $r7.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r6);

        specialinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: void parseStateFile(android.os.ParcelFileDescriptor)>(r45);

        r46 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.lang.String mStoredIncrementalVersion>;

        if r46 == null goto label01;

        $r35 = <android.os.Build$VERSION: java.lang.String INCREMENTAL>;

        $z2 = virtualinvoke r46.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z2 != 0 goto label02;

     label01:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previous metadata ");

        $r9 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.lang.String mStoredIncrementalVersion>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mismatch vs ");

        $r10 = <android.os.Build$VERSION: java.lang.String INCREMENTAL>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - rewriting");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PMBA", $r11);

        $r12 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        virtualinvoke $r12.<java.util.HashSet: void clear()>();

     label02:
        virtualinvoke $r7.<java.io.DataOutputStream: void writeInt(int)>(1);

        $r48 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <com.android.server.backup.PackageManagerBackupAgent: void writeEntity(android.app.backup.BackupDataOutput,java.lang.String,byte[])>(r1, "@ancestral_record@", $r48);

     label03:
        l9 = 0L;

        r49 = null;

        r50 = null;

        r51 = specialinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.ComponentName getPreferredHomeComponent()>();

        if r51 == null goto label21;

     label04:
        r5 = r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.pm.PackageManager mPackageManager>;

        r52 = virtualinvoke r51.<android.content.ComponentName: java.lang.String getPackageName()>();

        i10 = r0.<com.android.server.backup.PackageManagerBackupAgent: int mUserId>;

     label05:
        r53 = null;

     label06:
        r49 = virtualinvoke r5.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r52, 134217728, i10);

     label07:
        r50 = r49;

        r53 = null;

     label08:
        $r32 = r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.pm.PackageManager mPackageManager>;

        $r33 = virtualinvoke r51.<android.content.ComponentName: java.lang.String getPackageName()>();

        r54 = virtualinvoke $r32.<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>($r33);

     label09:
        r50 = r49;

        r53 = r54;

     label10:
        l9 = virtualinvoke r49.<android.content.pm.PackageInfo: long getLongVersionCode()>();

     label11:
        r55 = r49.<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo>;

     label12:
        if r55 != null goto label15;

     label13:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", "Home app has no signing information");

     label14:
        r56 = null;

        goto label16;

     label15:
        $r34 = virtualinvoke r55.<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>();

        r56 = staticinvoke <com.android.server.backup.BackupUtils: java.util.ArrayList hashSignatureArray(android.content.pm.Signature[])>($r34);

     label16:
        r58 = r54;

        r59 = r56;

        r60 = r49;

        goto label22;

     label17:
        $r38 := @caughtexception;

        goto label20;

     label18:
        $r42 := @caughtexception;

        l9 = 0L;

        r49 = r50;

        r54 = r53;

        goto label20;

     label19:
        $r39 := @caughtexception;

        r54 = null;

     label20:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PMBA", "Can\'t access preferred home info");

        r59 = null;

        r51 = null;

        r60 = r49;

        r58 = r54;

        goto label22;

     label21:
        r60 = null;

        r59 = null;

        r58 = null;

        l9 = 0L;

     label22:
        $r62 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r63 = (android.content.pm.PackageManagerInternal) $r62;

        l0 = r0.<com.android.server.backup.PackageManagerBackupAgent: long mStoredHomeVersion>;

     label23:
        $b11 = l9 cmp l0;

        if $b11 != 0 goto label30;

     label24:
        $r30 = r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.ComponentName mStoredHomeComponent>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r51, $r30);

        if $z1 == 0 goto label30;

     label25:
        if r51 == null goto label28;

     label26:
        $r31 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.ArrayList mStoredHomeSigHashes>;

        z3 = staticinvoke <com.android.server.backup.BackupUtils: boolean signaturesMatch(java.util.ArrayList,android.content.pm.PackageInfo,android.content.pm.PackageManagerInternal)>($r31, r60, r63);

     label27:
        if z3 != 0 goto label28;

        goto label30;

     label28:
        z4 = 0;

        goto label31;

     label29:
        $r41 := @caughtexception;

        goto label72;

     label30:
        z4 = 1;

     label31:
        if z4 == 0 goto label38;

        if r51 == null goto label37;

     label32:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        $r28 = virtualinvoke r51.<android.content.ComponentName: java.lang.String flattenToString()>();

        virtualinvoke $r7.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r28);

        virtualinvoke $r7.<java.io.DataOutputStream: void writeLong(long)>(l9);

     label33:
        if r58 == null goto label34;

        goto label35;

     label34:
        r58 = "";

     label35:
        virtualinvoke $r7.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r58);

        staticinvoke <com.android.server.backup.PackageManagerBackupAgent: void writeSignatureHashArray(java.io.DataOutputStream,java.util.ArrayList)>($r7, r59);

        $r29 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <com.android.server.backup.PackageManagerBackupAgent: void writeEntity(android.app.backup.BackupDataOutput,java.lang.String,byte[])>(r1, "@home@", $r29);

     label36:
        goto label38;

     label37:
        virtualinvoke r1.<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>("@home@", -1);

     label38:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        $r64 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        z5 = virtualinvoke $r64.<java.util.HashSet: boolean contains(java.lang.Object)>("@meta@");

     label39:
        if z5 != 0 goto label42;

     label40:
        $i8 = <android.os.Build$VERSION: int SDK_INT>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeInt(int)>($i8);

        $r26 = <android.os.Build$VERSION: java.lang.String INCREMENTAL>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r26);

        $r27 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <com.android.server.backup.PackageManagerBackupAgent: void writeEntity(android.app.backup.BackupDataOutput,java.lang.String,byte[])>(r1, "@meta@", $r27);

     label41:
        goto label43;

     label42:
        $r13 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        virtualinvoke $r13.<java.util.HashSet: boolean remove(java.lang.Object)>("@meta@");

     label43:
        $r14 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.List mAllPackages>;

        r65 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label44:
        r66 = "@meta@";

     label45:
        z6 = interfaceinvoke r65.<java.util.Iterator: boolean hasNext()>();

     label46:
        if z6 == 0 goto label70;

     label47:
        $r16 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (android.content.pm.PackageInfo) $r16;

        r67 = $r17.<android.content.pm.PackageInfo: java.lang.String packageName>;

        z7 = virtualinvoke r67.<java.lang.String: boolean equals(java.lang.Object)>(r66);

     label48:
        if z7 == 0 goto label49;

        goto label45;

     label49:
        r68 = r0.<com.android.server.backup.PackageManagerBackupAgent: android.content.pm.PackageManager mPackageManager>;

     label50:
        r69 = r66;

     label51:
        i1 = r0.<com.android.server.backup.PackageManagerBackupAgent: int mUserId>;

     label52:
        r70 = virtualinvoke r68.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r67, 134217728, i1);

     label53:
        $r18 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        $z0 = virtualinvoke $r18.<java.util.HashSet: boolean contains(java.lang.Object)>(r67);

        if $z0 == 0 goto label55;

        $r22 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        virtualinvoke $r22.<java.util.HashSet: boolean remove(java.lang.Object)>(r67);

        $l5 = virtualinvoke r70.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $r23 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashMap mStateVersions>;

        $r24 = virtualinvoke $r23.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r67);

        $r25 = (com.android.server.backup.PackageManagerBackupAgent$Metadata) $r24;

        $l6 = $r25.<com.android.server.backup.PackageManagerBackupAgent$Metadata: long versionCode>;

        $b7 = $l5 cmp $l6;

        if $b7 != 0 goto label55;

     label54:
        goto label45;

     label55:
        r71 = r70.<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo>;

     label56:
        if r71 != null goto label59;

     label57:
        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not backing up package ");

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since it appears to have no signatures.");

        $r21 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PMBA", $r21);

     label58:
        r66 = r69;

        goto label45;

     label59:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        $i2 = r70.<android.content.pm.PackageInfo: int versionCodeMajor>;

        if $i2 == 0 goto label61;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeInt(int)>(-2147483648);

        $l4 = virtualinvoke r70.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        virtualinvoke $r7.<java.io.DataOutputStream: void writeLong(long)>($l4);

     label60:
        goto label62;

     label61:
        $i3 = r70.<android.content.pm.PackageInfo: int versionCode>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeInt(int)>($i3);

     label62:
        r73 = virtualinvoke r71.<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>();

     label63:
        $r19 = staticinvoke <com.android.server.backup.BackupUtils: java.util.ArrayList hashSignatureArray(android.content.pm.Signature[])>(r73);

        staticinvoke <com.android.server.backup.PackageManagerBackupAgent: void writeSignatureHashArray(java.io.DataOutputStream,java.util.ArrayList)>($r7, $r19);

        $r20 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <com.android.server.backup.PackageManagerBackupAgent: void writeEntity(android.app.backup.BackupDataOutput,java.lang.String,byte[])>(r1, r67, $r20);

     label64:
        r66 = r69;

        goto label45;

     label65:
        $r37 := @caughtexception;

        goto label68;

     label66:
        $r36 := @caughtexception;

        goto label68;

     label67:
        $r44 := @caughtexception;

     label68:
        $r74 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.HashSet mExisting>;

        virtualinvoke $r74.<java.util.HashSet: boolean add(java.lang.Object)>(r67);

     label69:
        goto label45;

     label70:
        $r15 = r0.<com.android.server.backup.PackageManagerBackupAgent: java.util.List mAllPackages>;

        specialinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: void writeStateFile(java.util.List,android.content.ComponentName,long,java.util.ArrayList,android.os.ParcelFileDescriptor)>($r15, r51, l9, r59, r2);

        return;

     label71:
        $r40 := @caughtexception;

     label72:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", "Unable to write package backup data file!");

        return;

     label73:
        $r43 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PMBA", "Unable to write package backup data file!");

        return;

        catch java.io.IOException from label02 to label03 with label73;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label19;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label18;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label18;
        catch android.content.pm.PackageManager$NameNotFoundException from label10 to label11 with label18;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label13 to label14 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label15 to label16 with label17;
        catch java.io.IOException from label22 to label23 with label71;
        catch java.io.IOException from label24 to label25 with label29;
        catch java.io.IOException from label26 to label27 with label29;
        catch java.io.IOException from label32 to label33 with label29;
        catch java.io.IOException from label35 to label36 with label29;
        catch java.io.IOException from label37 to label38 with label29;
        catch java.io.IOException from label38 to label39 with label71;
        catch java.io.IOException from label40 to label41 with label29;
        catch java.io.IOException from label42 to label43 with label71;
        catch java.io.IOException from label43 to label44 with label71;
        catch java.io.IOException from label45 to label46 with label71;
        catch java.io.IOException from label47 to label48 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label49 to label50 with label67;
        catch java.io.IOException from label49 to label50 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label51 to label52 with label66;
        catch java.io.IOException from label51 to label52 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label52 to label53 with label65;
        catch java.io.IOException from label52 to label53 with label29;
        catch java.io.IOException from label53 to label54 with label29;
        catch java.io.IOException from label55 to label56 with label29;
        catch java.io.IOException from label57 to label58 with label29;
        catch java.io.IOException from label59 to label60 with label29;
        catch java.io.IOException from label61 to label62 with label29;
        catch java.io.IOException from label62 to label63 with label29;
        catch java.io.IOException from label63 to label64 with label29;
        catch java.io.IOException from label68 to label69 with label29;
    }

    public void onRestore(android.app.backup.BackupDataInput, int, android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        com.android.server.backup.PackageManagerBackupAgent r0;
        android.app.backup.BackupDataInput r1;
        int i0, $i1;
        android.os.ParcelFileDescriptor r2;
        com.android.server.backup.PackageManagerBackupAgent$RestoreDataConsumer r3;

        r0 := @this: com.android.server.backup.PackageManagerBackupAgent;

        r1 := @parameter0: android.app.backup.BackupDataInput;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.ParcelFileDescriptor;

        $i1 = specialinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: int getAncestralRecordVersionValue(android.app.backup.BackupDataInput)>(r1);

        r3 = specialinvoke r0.<com.android.server.backup.PackageManagerBackupAgent: com.android.server.backup.PackageManagerBackupAgent$RestoreDataConsumer getRestoreDataConsumer(int)>($i1);

        if r3 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PMBA", "Ancestral restore set version is unknown to this Android version; not restoring");

        return;

     label1:
        interfaceinvoke r3.<com.android.server.backup.PackageManagerBackupAgent$RestoreDataConsumer: void consumeRestoreData(android.app.backup.BackupDataInput)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.PackageManagerBackupAgent: int UNDEFINED_ANCESTRAL_RECORD_VERSION> = -1;

        <com.android.server.backup.PackageManagerBackupAgent: java.lang.String TAG> = "PMBA";

        <com.android.server.backup.PackageManagerBackupAgent: int STATE_FILE_VERSION> = 2;

        <com.android.server.backup.PackageManagerBackupAgent: java.lang.String STATE_FILE_HEADER> = "=state=";

        <com.android.server.backup.PackageManagerBackupAgent: java.lang.String GLOBAL_METADATA_KEY> = "@meta@";

        <com.android.server.backup.PackageManagerBackupAgent: java.lang.String DEFAULT_HOME_KEY> = "@home@";

        <com.android.server.backup.PackageManagerBackupAgent: boolean DEBUG> = 0;

        <com.android.server.backup.PackageManagerBackupAgent: int ANCESTRAL_RECORD_VERSION> = 1;

        <com.android.server.backup.PackageManagerBackupAgent: java.lang.String ANCESTRAL_RECORD_KEY> = "@ancestral_record@";

        return;
    }
}
