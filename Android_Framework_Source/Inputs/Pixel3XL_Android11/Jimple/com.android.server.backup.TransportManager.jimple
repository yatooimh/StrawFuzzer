public class com.android.server.backup.TransportManager extends java.lang.Object
{
    public static final java.lang.String SERVICE_ACTION_TRANSPORT_HOST;
    private static final java.lang.String TAG;
    private volatile java.lang.String mCurrentTransportName;
    private com.android.server.backup.transport.OnTransportRegisteredListener mOnTransportRegisteredListener;
    private final android.content.pm.PackageManager mPackageManager;
    private final java.util.Map mRegisteredTransportsDescriptionMap;
    private final com.android.server.backup.transport.TransportClientManager mTransportClientManager;
    private final java.lang.Object mTransportLock;
    private final android.content.Intent mTransportServiceIntent;
    private final com.android.server.backup.transport.TransportStats mTransportStats;
    private final java.util.Set mTransportWhitelist;
    private final int mUserId;

    void <init>(int, android.content.Context, java.util.Set, java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        int i0, $i1;
        android.content.Context r1;
        java.util.Set r2, $r10;
        java.lang.String r3;
        com.android.server.backup.'-$$Lambda$TransportManager$Z9ckpFUW2V4jkdHnyXIEiLuAoBc' $r5;
        android.content.pm.PackageManager $r8;
        java.lang.Object $r9, r15;
        com.android.server.backup.transport.TransportStats $r13, r17;
        android.content.Intent r14;
        android.util.ArrayMap r16;
        com.android.server.backup.transport.TransportClientManager r18;
        com.android.server.backup.transport.OnTransportRegisteredListener r19;

        r0 := @this: com.android.server.backup.TransportManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r14 = new android.content.Intent;

        specialinvoke r14.<android.content.Intent: void <init>(java.lang.String)>("android.backup.TRANSPORT_HOST");

        r0.<com.android.server.backup.TransportManager: android.content.Intent mTransportServiceIntent> = r14;

        $r5 = <com.android.server.backup._$$Lambda$TransportManager$Z9ckpFUW2V4jkdHnyXIEiLuAoBc: com.android.server.backup.'-$$Lambda$TransportManager$Z9ckpFUW2V4jkdHnyXIEiLuAoBc' INSTANCE>;

        r19 = (com.android.server.backup.transport.OnTransportRegisteredListener) $r5;

        r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.OnTransportRegisteredListener mOnTransportRegisteredListener> = r19;

        r15 = new java.lang.Object;

        specialinvoke r15.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock> = r15;

        r16 = new android.util.ArrayMap;

        specialinvoke r16.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap> = r16;

        r0.<com.android.server.backup.TransportManager: int mUserId> = i0;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.backup.TransportManager: android.content.pm.PackageManager mPackageManager> = $r8;

        $r9 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r10 = (java.util.Set) $r9;

        r0.<com.android.server.backup.TransportManager: java.util.Set mTransportWhitelist> = $r10;

        r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName> = r3;

        r17 = new com.android.server.backup.transport.TransportStats;

        specialinvoke r17.<com.android.server.backup.transport.TransportStats: void <init>()>();

        r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportStats mTransportStats> = r17;

        r18 = new com.android.server.backup.transport.TransportClientManager;

        $i1 = r0.<com.android.server.backup.TransportManager: int mUserId>;

        $r13 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportStats mTransportStats>;

        specialinvoke r18.<com.android.server.backup.transport.TransportClientManager: void <init>(int,android.content.Context,com.android.server.backup.transport.TransportStats)>($i1, r1, $r13);

        r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager> = r18;

        return;
    }

    void <init>(int, android.content.Context, java.util.Set, java.lang.String, com.android.server.backup.transport.TransportClientManager)
    {
        com.android.server.backup.TransportManager r0;
        int i0;
        android.content.Context r1;
        java.util.Set r2, $r11;
        java.lang.String r3;
        com.android.server.backup.transport.TransportClientManager r4;
        com.android.server.backup.'-$$Lambda$TransportManager$Z9ckpFUW2V4jkdHnyXIEiLuAoBc' $r6;
        android.content.pm.PackageManager $r9;
        java.lang.Object $r10, r14;
        android.content.Intent r13;
        android.util.ArrayMap r15;
        com.android.server.backup.transport.TransportStats r16;
        com.android.server.backup.transport.OnTransportRegisteredListener r17;

        r0 := @this: com.android.server.backup.TransportManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: com.android.server.backup.transport.TransportClientManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r13 = new android.content.Intent;

        specialinvoke r13.<android.content.Intent: void <init>(java.lang.String)>("android.backup.TRANSPORT_HOST");

        r0.<com.android.server.backup.TransportManager: android.content.Intent mTransportServiceIntent> = r13;

        $r6 = <com.android.server.backup._$$Lambda$TransportManager$Z9ckpFUW2V4jkdHnyXIEiLuAoBc: com.android.server.backup.'-$$Lambda$TransportManager$Z9ckpFUW2V4jkdHnyXIEiLuAoBc' INSTANCE>;

        r17 = (com.android.server.backup.transport.OnTransportRegisteredListener) $r6;

        r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.OnTransportRegisteredListener mOnTransportRegisteredListener> = r17;

        r14 = new java.lang.Object;

        specialinvoke r14.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock> = r14;

        r15 = new android.util.ArrayMap;

        specialinvoke r15.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap> = r15;

        r0.<com.android.server.backup.TransportManager: int mUserId> = i0;

        $r9 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.backup.TransportManager: android.content.pm.PackageManager mPackageManager> = $r9;

        $r10 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r11 = (java.util.Set) $r10;

        r0.<com.android.server.backup.TransportManager: java.util.Set mTransportWhitelist> = $r11;

        r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName> = r3;

        r16 = new com.android.server.backup.transport.TransportStats;

        specialinvoke r16.<com.android.server.backup.transport.TransportStats: void <init>()>();

        r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportStats mTransportStats> = r16;

        r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager> = r4;

        return;
    }

    private void checkCanUseTransport()
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.backup.TransportManager;

        $r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Can\'t call transport with transport lock held");

        return;
    }

    private static java.util.function.Predicate fromPackageFilter(java.lang.String)
    {
        java.lang.String r0;
        com.android.server.backup._$$Lambda$TransportManager$_dxJobf45tWiMkaNlKY_z26kB2Q $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new com.android.server.backup._$$Lambda$TransportManager$_dxJobf45tWiMkaNlKY_z26kB2Q;

        specialinvoke $r1.<com.android.server.backup._$$Lambda$TransportManager$_dxJobf45tWiMkaNlKY_z26kB2Q: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    private android.content.ComponentName getRegisteredTransportComponentLocked(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object $r1;
        java.lang.String r2;
        java.util.Map$Entry r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.backup.TransportManager;

        r2 := @parameter0: java.lang.String;

        r3 = specialinvoke r0.<com.android.server.backup.TransportManager: java.util.Map$Entry getRegisteredTransportEntryLocked(java.lang.String)>(r2);

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        $r1 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (android.content.ComponentName) $r1;

     label2:
        return r4;
    }

    private android.content.ComponentName getRegisteredTransportComponentOrThrowLocked(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1;
        android.content.ComponentName r2;
        com.android.server.backup.transport.TransportNotRegisteredException $r3;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<com.android.server.backup.TransportManager: android.content.ComponentName getRegisteredTransportComponentLocked(java.lang.String)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r3 = new com.android.server.backup.transport.TransportNotRegisteredException;

        specialinvoke $r3.<com.android.server.backup.transport.TransportNotRegisteredException: void <init>(java.lang.String)>(r1);

        throw $r3;
    }

    private com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionLocked(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object $r1;
        java.lang.String r2;
        java.util.Map$Entry r3;
        com.android.server.backup.TransportManager$TransportDescription r4;

        r0 := @this: com.android.server.backup.TransportManager;

        r2 := @parameter0: java.lang.String;

        r3 = specialinvoke r0.<com.android.server.backup.TransportManager: java.util.Map$Entry getRegisteredTransportEntryLocked(java.lang.String)>(r2);

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        $r1 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (com.android.server.backup.TransportManager$TransportDescription) $r1;

     label2:
        return r4;
    }

    private com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(android.content.ComponentName) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        android.content.ComponentName r1;
        com.android.server.backup.TransportManager$TransportDescription r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        com.android.server.backup.transport.TransportNotRegisteredException $r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.backup.TransportManager$TransportDescription) $r4;

        if r2 == null goto label1;

        return r2;

     label1:
        $r5 = new com.android.server.backup.transport.TransportNotRegisteredException;

        specialinvoke $r5.<com.android.server.backup.transport.TransportNotRegisteredException: void <init>(android.content.ComponentName)>(r1);

        throw $r5;
    }

    private com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1;
        com.android.server.backup.TransportManager$TransportDescription r2;
        com.android.server.backup.transport.TransportNotRegisteredException $r3;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionLocked(java.lang.String)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r3 = new com.android.server.backup.transport.TransportNotRegisteredException;

        specialinvoke $r3.<com.android.server.backup.transport.TransportNotRegisteredException: void <init>(java.lang.String)>(r1);

        throw $r3;
    }

    private java.util.Map$Entry getRegisteredTransportEntryLocked(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1, $r9;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7;
        com.android.server.backup.TransportManager$TransportDescription $r8;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (com.android.server.backup.TransportManager$TransportDescription) $r7;

        $r9 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$000(com.android.server.backup.TransportManager$TransportDescription)>($r8);

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    private boolean isTransportTrusted(android.content.ComponentName)
    {
        com.android.server.backup.TransportManager r0;
        java.util.Set $r1;
        boolean $z0;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3, $r7, $r10, $r13, $r16;
        int $i0, $i1, $i2;
        android.content.pm.PackageInfo $r4;
        android.content.pm.ApplicationInfo $r5;
        java.lang.StringBuilder $r11, r20;
        android.content.pm.PackageManager$NameNotFoundException $r17;
        android.content.ComponentName r18;

        r0 := @this: com.android.server.backup.TransportManager;

        r18 := @parameter0: android.content.ComponentName;

        $r1 = r0.<com.android.server.backup.TransportManager: java.util.Set mTransportWhitelist>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r18);

        if $z0 != 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BackupTransport ");

        $r13 = virtualinvoke r18.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not whitelisted.");

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupTransportManager", $r16);

        return 0;

     label1:
        $r2 = r0.<com.android.server.backup.TransportManager: android.content.pm.PackageManager mPackageManager>;

        $r3 = virtualinvoke r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i0 = r0.<com.android.server.backup.TransportManager: int mUserId>;

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>($r3, 0, $i0);

        $r5 = $r4.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r5.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i2 = $i1 & 8;

        if $i2 != 0 goto label3;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport package ");

        $r7 = virtualinvoke r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not privileged");

        $r10 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupTransportManager", $r10);

     label2:
        return 0;

     label3:
        return 1;

     label4:
        $r17 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupTransportManager", "Package not found.", $r17);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    static boolean lambda$fromPackageFilter$3(java.lang.String, android.content.ComponentName)
    {
        java.lang.String r0, $r2;
        android.content.ComponentName r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.ComponentName;

        $r2 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    static void lambda$new$0(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        return;
    }

    static boolean lambda$onPackageAdded$1(android.content.ComponentName)
    {
        android.content.ComponentName r0;

        r0 := @parameter0: android.content.ComponentName;

        return 1;
    }

    static boolean lambda$registerTransports$2(android.content.ComponentName)
    {
        android.content.ComponentName r0;

        r0 := @parameter0: android.content.ComponentName;

        return 1;
    }

    private int registerTransport(android.content.ComponentName)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1, r3, r4, $r10, $r18, $r25;
        com.android.internal.backup.IBackupTransport r2;
        boolean $z0;
        android.os.Bundle $r5;
        com.android.server.backup.transport.TransportClientManager $r6, $r12, $r19;
        com.android.server.backup.transport.OnTransportRegisteredListener $r11;
        com.android.server.backup.transport.TransportNotAvailableException $r13;
        java.lang.StringBuilder $r14, $r21, r29;
        android.os.RemoteException $r20;
        android.content.ComponentName r26;
        com.android.server.backup.transport.TransportClient r28;
        byte b3;

        r0 := @this: com.android.server.backup.TransportManager;

        r26 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.backup.TransportManager: void checkCanUseTransport()>();

        $z0 = specialinvoke r0.<com.android.server.backup.TransportManager: boolean isTransportTrusted(android.content.ComponentName)>(r26);

        if $z0 != 0 goto label1;

        return -2;

     label1:
        r1 = virtualinvoke r26.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>()>();

        virtualinvoke $r5.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.app.backup.extra.TRANSPORT_REGISTRATION", 1);

        $r6 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager>;

        r28 = virtualinvoke $r6.<com.android.server.backup.transport.TransportClientManager: com.android.server.backup.transport.TransportClient getTransportClient(android.content.ComponentName,android.os.Bundle,java.lang.String)>(r26, $r5, "TransportManager.registerTransport()");

     label2:
        r2 = virtualinvoke r28.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport connectOrThrow(java.lang.String)>("TransportManager.registerTransport()");

     label3:
        r3 = interfaceinvoke r2.<com.android.internal.backup.IBackupTransport: java.lang.String name()>();

        r4 = interfaceinvoke r2.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        specialinvoke r0.<com.android.server.backup.TransportManager: void registerTransport(android.content.ComponentName,com.android.internal.backup.IBackupTransport)>(r26, r2);

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" registered");

        $r10 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupTransportManager", $r10);

        $r11 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.OnTransportRegisteredListener mOnTransportRegisteredListener>;

        interfaceinvoke $r11.<com.android.server.backup.transport.OnTransportRegisteredListener: void onTransportRegistered(java.lang.String,java.lang.String)>(r3, r4);

     label4:
        b3 = 0;

        goto label6;

     label5:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" died while registering");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupTransportManager", $r25);

        b3 = -1;

     label6:
        $r12 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager>;

        virtualinvoke $r12.<com.android.server.backup.transport.TransportClientManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r28, "TransportManager.registerTransport()");

        return b3;

     label7:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t connect to transport ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for registration");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupTransportManager", $r18);

        $r19 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager>;

        virtualinvoke $r19.<com.android.server.backup.transport.TransportClientManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r28, "TransportManager.registerTransport()");

        return -1;

        catch com.android.server.backup.transport.TransportNotAvailableException from label2 to label3 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void registerTransport(android.content.ComponentName, com.android.internal.backup.IBackupTransport) throws android.os.RemoteException
    {
        com.android.server.backup.TransportManager r0;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.String $r3, $r4, $r6;
        android.content.Intent $r5, $r7;
        java.lang.CharSequence $r8;
        java.util.Map $r9;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;
        com.android.internal.backup.IBackupTransport r13;
        java.lang.Object r14;

        r0 := @this: com.android.server.backup.TransportManager;

        r12 := @parameter0: android.content.ComponentName;

        r13 := @parameter1: com.android.internal.backup.IBackupTransport;

        specialinvoke r0.<com.android.server.backup.TransportManager: void checkCanUseTransport()>();

        $r2 = new com.android.server.backup.TransportManager$TransportDescription;

        $r3 = interfaceinvoke r13.<com.android.internal.backup.IBackupTransport: java.lang.String name()>();

        $r4 = interfaceinvoke r13.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        $r5 = interfaceinvoke r13.<com.android.internal.backup.IBackupTransport: android.content.Intent configurationIntent()>();

        $r6 = interfaceinvoke r13.<com.android.internal.backup.IBackupTransport: java.lang.String currentDestinationString()>();

        $r7 = interfaceinvoke r13.<com.android.internal.backup.IBackupTransport: android.content.Intent dataManagementIntent()>();

        $r8 = interfaceinvoke r13.<com.android.internal.backup.IBackupTransport: java.lang.CharSequence dataManagementIntentLabel()>();

        specialinvoke $r2.<com.android.server.backup.TransportManager$TransportDescription: void <init>(java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence,com.android.server.backup.TransportManager$1)>($r3, $r4, $r5, $r6, $r7, $r8, null);

        r14 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r14;

     label1:
        $r9 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r2);

        exitmonitor r14;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

     label4:
        exitmonitor r14;

     label5:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void registerTransportsForIntent(android.content.Intent, java.util.function.Predicate)
    {
        com.android.server.backup.TransportManager r0;
        java.util.function.Predicate r1;
        java.util.Iterator r2;
        int $i0;
        android.content.pm.PackageManager $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        android.content.pm.ResolveInfo $r5;
        android.content.pm.ServiceInfo $r6;
        android.content.Intent r7;
        java.util.List r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.backup.TransportManager;

        r7 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.util.function.Predicate;

        $r3 = r0.<com.android.server.backup.TransportManager: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.backup.TransportManager: int mUserId>;

        r8 = virtualinvoke $r3.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>(r7, 0, $i0);

        if r8 != null goto label1;

        return;

     label1:
        r2 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.content.pm.ResolveInfo) $r4;

        $r6 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        r9 = virtualinvoke $r6.<android.content.pm.ServiceInfo: android.content.ComponentName getComponentName()>();

        $z1 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r9);

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.backup.TransportManager: boolean isTransportTrusted(android.content.ComponentName)>(r9);

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.android.server.backup.TransportManager: int registerTransport(android.content.ComponentName)>(r9);

     label3:
        goto label2;

     label4:
        return;
    }

    private void registerTransportsFromPackage(java.lang.String, java.util.function.Predicate)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1, $r13;
        int $i0;
        android.content.pm.PackageManager $r2;
        android.content.Intent $r4, $r5, $r6;
        java.util.function.Predicate $r7, $r8, r14;
        android.content.pm.PackageManager$NameNotFoundException $r9;
        java.lang.StringBuilder $r10;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.util.function.Predicate;

     label1:
        $r2 = r0.<com.android.server.backup.TransportManager: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.backup.TransportManager: int mUserId>;

        virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r1, 0, $i0);

     label2:
        $r4 = new android.content.Intent;

        $r5 = r0.<com.android.server.backup.TransportManager: android.content.Intent mTransportServiceIntent>;

        specialinvoke $r4.<android.content.Intent: void <init>(android.content.Intent)>($r5);

        $r6 = virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        $r7 = staticinvoke <com.android.server.backup.TransportManager: java.util.function.Predicate fromPackageFilter(java.lang.String)>(r1);

        $r8 = interfaceinvoke r14.<java.util.function.Predicate: java.util.function.Predicate and(java.util.function.Predicate)>($r7);

        specialinvoke r0.<com.android.server.backup.TransportManager: void registerTransportsForIntent(android.content.Intent,java.util.function.Predicate)>($r6, $r8);

        return;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to register transports from package not found ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupTransportManager", $r13);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public void disposeOfTransportClient(com.android.server.backup.transport.TransportClient, java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        com.android.server.backup.transport.TransportClient r1;
        java.lang.String r2;
        com.android.server.backup.transport.TransportClientManager $r3;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: com.android.server.backup.transport.TransportClient;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager>;

        virtualinvoke $r3.<com.android.server.backup.transport.TransportClientManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, r2);

        return;
    }

    public void dumpTransportClients(java.io.PrintWriter)
    {
        com.android.server.backup.TransportManager r0;
        java.io.PrintWriter r1;
        com.android.server.backup.transport.TransportClientManager $r2;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager>;

        virtualinvoke $r2.<com.android.server.backup.transport.TransportClientManager: void dump(java.io.PrintWriter)>(r1);

        return;
    }

    public void dumpTransportStats(java.io.PrintWriter)
    {
        com.android.server.backup.TransportManager r0;
        java.io.PrintWriter r1;
        com.android.server.backup.transport.TransportStats $r2;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportStats mTransportStats>;

        virtualinvoke $r2.<com.android.server.backup.transport.TransportStats: void dump(java.io.PrintWriter)>(r1);

        return;
    }

    public void forEachRegisteredTransport(java.util.function.Consumer)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        java.util.Map $r3;
        java.util.Collection $r4;
        boolean $z0;
        com.android.server.backup.TransportManager$TransportDescription $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.util.function.Consumer r9;

        r0 := @this: com.android.server.backup.TransportManager;

        r9 := @parameter0: java.util.function.Consumer;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.backup.TransportManager$TransportDescription) $r5;

        $r7 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$000(com.android.server.backup.TransportManager$TransportDescription)>($r6);

        interfaceinvoke r9.<java.util.function.Consumer: void accept(java.lang.Object)>($r7);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public com.android.server.backup.transport.TransportClient getCurrentTransportClient(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        java.lang.String $r2, $r4, r6;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r5;
        com.android.server.backup.transport.TransportClient r7;

        r0 := @this: com.android.server.backup.TransportManager;

        r6 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        if $r2 == null goto label6;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        r7 = virtualinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getTransportClient(java.lang.String,java.lang.String)>($r4, r6);

        exitmonitor r1;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No transport selected");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public com.android.server.backup.transport.TransportClient getCurrentTransportClientOrThrow(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        java.lang.String $r2, $r4, r6;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r5;
        com.android.server.backup.transport.TransportClient r7;

        r0 := @this: com.android.server.backup.TransportManager;

        r6 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        if $r2 == null goto label6;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        r7 = virtualinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getTransportClientOrThrow(java.lang.String,java.lang.String)>($r4, r6);

        exitmonitor r1;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No transport selected");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.ComponentName getCurrentTransportComponent() throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        java.lang.String $r2, $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        return null;

     label3:
        $r3 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        r5 = specialinvoke r0.<com.android.server.backup.TransportManager: android.content.ComponentName getRegisteredTransportComponentOrThrowLocked(java.lang.String)>($r3);

        exitmonitor r1;

     label4:
        return r5;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.String getCurrentTransportName()
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.backup.TransportManager;

        $r1 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        return $r1;
    }

    android.content.ComponentName[] getRegisteredTransportComponents()
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        java.util.Map $r2, $r4;
        java.util.Set $r3;
        int $i0;
        android.content.ComponentName[] $r5, r8;
        java.lang.Object[] $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        $r5 = newarray (android.content.ComponentName)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r8 = (android.content.ComponentName[]) $r6;

        exitmonitor r1;

     label2:
        return r8;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String[] getRegisteredTransportNames()
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1, $r6;
        java.util.Iterator r2;
        java.util.Map $r3, $r4;
        int $i0, i1;
        java.util.Collection $r5;
        boolean $z0;
        com.android.server.backup.TransportManager$TransportDescription $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        java.lang.String[] r10;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        r10 = newarray (java.lang.String)[$i0];

     label02:
        i1 = 0;

     label03:
        $r4 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.backup.TransportManager$TransportDescription) $r6;

        $r8 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$000(com.android.server.backup.TransportManager$TransportDescription)>($r7);

        r10[i1] = $r8;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        exitmonitor r1;

     label07:
        return r10;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public com.android.server.backup.transport.TransportClient getTransportClient(java.lang.String, java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1, $r7, r8;
        com.android.server.backup.transport.TransportNotRegisteredException $r2;
        java.lang.StringBuilder $r3;
        com.android.server.backup.transport.TransportClient r9;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

     label1:
        r9 = virtualinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getTransportClientOrThrow(java.lang.String,java.lang.String)>(r1, r8);

     label2:
        return r9;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupTransportManager", $r7);

        return null;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label1 to label2 with label3;
    }

    public com.android.server.backup.transport.TransportClient getTransportClientOrThrow(java.lang.String, java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        android.content.ComponentName r2;
        com.android.server.backup.transport.TransportClientManager $r3;
        java.lang.Throwable $r4;
        java.lang.String r5, r6;
        com.android.server.backup.transport.TransportClient r7;
        com.android.server.backup.transport.TransportNotRegisteredException r8;

        r0 := @this: com.android.server.backup.TransportManager;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        r2 = specialinvoke r0.<com.android.server.backup.TransportManager: android.content.ComponentName getRegisteredTransportComponentLocked(java.lang.String)>(r5);

     label2:
        if r2 == null goto label5;

     label3:
        $r3 = r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClientManager mTransportClientManager>;

        r7 = virtualinvoke $r3.<com.android.server.backup.transport.TransportClientManager: com.android.server.backup.transport.TransportClient getTransportClient(android.content.ComponentName,java.lang.String)>(r2, r6);

        exitmonitor r1;

     label4:
        return r7;

     label5:
        r8 = new com.android.server.backup.transport.TransportNotRegisteredException;

        specialinvoke r8.<com.android.server.backup.transport.TransportNotRegisteredException: void <init>(java.lang.String)>(r5);

        throw r8;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.content.Intent getTransportConfigurationIntent(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        android.content.Intent r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(java.lang.String)>(r4);

        r5 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: android.content.Intent access$200(com.android.server.backup.TransportManager$TransportDescription)>($r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getTransportCurrentDestinationString(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.Throwable $r3;
        java.lang.String r4, r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(java.lang.String)>(r4);

        r5 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$300(com.android.server.backup.TransportManager$TransportDescription)>($r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.Intent getTransportDataManagementIntent(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        android.content.Intent r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(java.lang.String)>(r4);

        r5 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: android.content.Intent access$400(com.android.server.backup.TransportManager$TransportDescription)>($r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.CharSequence getTransportDataManagementLabel(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        java.lang.CharSequence r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(java.lang.String)>(r4);

        r5 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.CharSequence access$500(com.android.server.backup.TransportManager$TransportDescription)>($r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getTransportDirName(android.content.ComponentName) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(android.content.ComponentName)>(r4);

        r5 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$100(com.android.server.backup.TransportManager$TransportDescription)>($r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getTransportDirName(java.lang.String) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.Throwable $r3;
        java.lang.String r4, r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(java.lang.String)>(r4);

        r5 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$100(com.android.server.backup.TransportManager$TransportDescription)>($r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getTransportName(android.content.ComponentName) throws com.android.server.backup.transport.TransportNotRegisteredException
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        com.android.server.backup.TransportManager$TransportDescription $r2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: com.android.server.backup.TransportManager$TransportDescription getRegisteredTransportDescriptionOrThrowLocked(android.content.ComponentName)>(r4);

        r5 = staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$000(com.android.server.backup.TransportManager$TransportDescription)>($r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.util.Set getTransportWhitelist()
    {
        com.android.server.backup.TransportManager r0;
        java.util.Set $r1;

        r0 := @this: com.android.server.backup.TransportManager;

        $r1 = r0.<com.android.server.backup.TransportManager: java.util.Set mTransportWhitelist>;

        return $r1;
    }

    public boolean isTransportRegistered(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        boolean z0;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.backup.TransportManager: java.util.Map$Entry getRegisteredTransportEntryLocked(java.lang.String)>(r4);

        if $r2 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void onPackageAdded(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1;
        com.android.server.backup.'-$$Lambda$TransportManager$4ND1hZMerK5gHU67okq6DZjKDQw' $r2;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.server.backup._$$Lambda$TransportManager$4ND1hZMerK5gHU67okq6DZjKDQw: com.android.server.backup.'-$$Lambda$TransportManager$4ND1hZMerK5gHU67okq6DZjKDQw' INSTANCE>;

        r3 = (java.util.function.Predicate) $r2;

        specialinvoke r0.<com.android.server.backup.TransportManager: void registerTransportsFromPackage(java.lang.String,java.util.function.Predicate)>(r1, r3);

        return;
    }

    transient void onPackageChanged(java.lang.String, java.lang.String[])
    {
        com.android.server.backup.TransportManager r0;
        int i0, $i1, i2;
        java.util.Set r2;
        com.android.server.backup._$$Lambda$_xfpm33S8Jqv3KpU__llxhj8ZPI r3, $r8;
        android.util.ArraySet $r4;
        java.util.Map $r5;
        android.content.ComponentName $r9;
        java.lang.String $r10, r12;
        java.lang.Throwable $r11;
        java.lang.String[] r13;
        java.lang.Object r14;

        r0 := @this: com.android.server.backup.TransportManager;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.String[];

        $r4 = new android.util.ArraySet;

        $i1 = lengthof r13;

        specialinvoke $r4.<android.util.ArraySet: void <init>(int)>($i1);

        i0 = lengthof r13;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r9 = new android.content.ComponentName;

        $r10 = r13[i2];

        specialinvoke $r9.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r12, $r10);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r9);

        i2 = i2 + 1;

        goto label1;

     label2:
        r14 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r14;

     label3:
        $r5 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        r2 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        r3 = new com.android.server.backup._$$Lambda$_xfpm33S8Jqv3KpU__llxhj8ZPI;

        specialinvoke r3.<com.android.server.backup._$$Lambda$_xfpm33S8Jqv3KpU__llxhj8ZPI: void <init>(java.util.Set)>($r4);

        interfaceinvoke r2.<java.util.Set: boolean removeIf(java.util.function.Predicate)>(r3);

        exitmonitor r14;

     label4:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        $r8 = new com.android.server.backup._$$Lambda$_xfpm33S8Jqv3KpU__llxhj8ZPI;

        specialinvoke $r8.<com.android.server.backup._$$Lambda$_xfpm33S8Jqv3KpU__llxhj8ZPI: void <init>(java.util.Set)>($r4);

        specialinvoke r0.<com.android.server.backup.TransportManager: void registerTransportsFromPackage(java.lang.String,java.util.function.Predicate)>(r12, $r8);

        return;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r14;

     label7:
        throw $r11;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void onPackageRemoved(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.function.Predicate $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.backup.TransportManager;

        r6 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = staticinvoke <com.android.server.backup.TransportManager: java.util.function.Predicate fromPackageFilter(java.lang.String)>(r6);

        interfaceinvoke $r3.<java.util.Set: boolean removeIf(java.util.function.Predicate)>($r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int registerAndSelectTransport(android.content.ComponentName)
    {
        com.android.server.backup.TransportManager r0;
        int i0;
        java.lang.String $r2, $r7;
        com.android.server.backup.transport.TransportNotRegisteredException $r4, $r6;
        java.lang.Throwable $r5, $r9;
        android.content.ComponentName r10;
        java.lang.Object r11, r13;

        r0 := @this: com.android.server.backup.TransportManager;

        r10 := @parameter0: android.content.ComponentName;

        r11 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r11;

     label01:
        $r2 = virtualinvoke r0.<com.android.server.backup.TransportManager: java.lang.String getTransportName(android.content.ComponentName)>(r10);

        virtualinvoke r0.<com.android.server.backup.TransportManager: java.lang.String selectTransport(java.lang.String)>($r2);

     label02:
        exitmonitor r11;

     label03:
        return 0;

     label04:
        $r9 := @caughtexception;

        goto label18;

     label05:
        $r6 := @caughtexception;

     label06:
        exitmonitor r11;

     label07:
        i0 = specialinvoke r0.<com.android.server.backup.TransportManager: int registerTransport(android.content.ComponentName)>(r10);

        if i0 == 0 goto label08;

        return i0;

     label08:
        r13 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r13;

     label09:
        $r7 = virtualinvoke r0.<com.android.server.backup.TransportManager: java.lang.String getTransportName(android.content.ComponentName)>(r10);

        virtualinvoke r0.<com.android.server.backup.TransportManager: java.lang.String selectTransport(java.lang.String)>($r7);

     label10:
        exitmonitor r13;

     label11:
        return 0;

     label12:
        $r5 := @caughtexception;

        goto label16;

     label13:
        $r4 := @caughtexception;

     label14:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BackupTransportManager", "Transport got unregistered");

        exitmonitor r13;

     label15:
        return -1;

     label16:
        exitmonitor r13;

     label17:
        throw $r5;

     label18:
        exitmonitor r11;

     label19:
        throw $r9;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch com.android.server.backup.transport.TransportNotRegisteredException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
        catch java.lang.Throwable from label16 to label17 with label12;
        catch java.lang.Throwable from label18 to label19 with label04;
    }

    public void registerTransports()
    {
        com.android.server.backup.TransportManager r0;
        com.android.server.backup.'-$$Lambda$TransportManager$Qbutmzd17ICwZdy0UzRrO-3_VK0' $r1;
        android.content.Intent $r2;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.backup.TransportManager;

        $r2 = r0.<com.android.server.backup.TransportManager: android.content.Intent mTransportServiceIntent>;

        $r1 = <com.android.server.backup._$$Lambda$TransportManager$Qbutmzd17ICwZdy0UzRrO_3_VK0: com.android.server.backup.'-$$Lambda$TransportManager$Qbutmzd17ICwZdy0UzRrO-3_VK0' INSTANCE>;

        r3 = (java.util.function.Predicate) $r1;

        specialinvoke r0.<com.android.server.backup.TransportManager: void registerTransportsForIntent(android.content.Intent,java.util.function.Predicate)>($r2, r3);

        return;
    }

    java.lang.String selectTransport(java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.Object r1;
        java.lang.String r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.backup.TransportManager;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r1;

     label1:
        r2 = r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName>;

        r0.<com.android.server.backup.TransportManager: java.lang.String mCurrentTransportName> = r4;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setOnTransportRegisteredListener(com.android.server.backup.transport.OnTransportRegisteredListener)
    {
        com.android.server.backup.TransportManager r0;
        com.android.server.backup.transport.OnTransportRegisteredListener r1;

        r0 := @this: com.android.server.backup.TransportManager;

        r1 := @parameter0: com.android.server.backup.transport.OnTransportRegisteredListener;

        r0.<com.android.server.backup.TransportManager: com.android.server.backup.transport.OnTransportRegisteredListener mOnTransportRegisteredListener> = r1;

        return;
    }

    public void updateTransportAttributes(android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.CharSequence)
    {
        com.android.server.backup.TransportManager r0;
        java.lang.String r1, r3, $r17, $r21;
        android.content.Intent r2, r4;
        java.lang.CharSequence r5;
        java.lang.Object r6, $r8;
        java.util.Map $r7;
        java.lang.Throwable $r22;
        android.content.ComponentName r23;
        com.android.server.backup.TransportManager$TransportDescription r24;
        java.lang.StringBuilder r25, r26;

        r0 := @this: com.android.server.backup.TransportManager;

        r23 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.Intent;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.content.Intent;

        r5 := @parameter5: java.lang.CharSequence;

        r6 = r0.<com.android.server.backup.TransportManager: java.lang.Object mTransportLock>;

        entermonitor r6;

     label01:
        $r7 = r0.<com.android.server.backup.TransportManager: java.util.Map mRegisteredTransportsDescriptionMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r23);

        r24 = (com.android.server.backup.TransportManager$TransportDescription) $r8;

     label02:
        if r24 != null goto label05;

     label03:
        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered tried to change description");

        $r21 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupTransportManager", $r21);

        exitmonitor r6;

     label04:
        return;

     label05:
        staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$002(com.android.server.backup.TransportManager$TransportDescription,java.lang.String)>(r24, r1);

        staticinvoke <com.android.server.backup.TransportManager$TransportDescription: android.content.Intent access$202(com.android.server.backup.TransportManager$TransportDescription,android.content.Intent)>(r24, r2);

        staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.String access$302(com.android.server.backup.TransportManager$TransportDescription,java.lang.String)>(r24, r3);

        staticinvoke <com.android.server.backup.TransportManager$TransportDescription: android.content.Intent access$402(com.android.server.backup.TransportManager$TransportDescription,android.content.Intent)>(r24, r4);

        staticinvoke <com.android.server.backup.TransportManager$TransportDescription: java.lang.CharSequence access$502(com.android.server.backup.TransportManager$TransportDescription,java.lang.CharSequence)>(r24, r5);

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" updated its attributes");

        $r17 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupTransportManager", $r17);

     label06:
        exitmonitor r6;

     label07:
        return;

     label08:
        $r22 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.TransportManager: java.lang.String TAG> = "BackupTransportManager";

        <com.android.server.backup.TransportManager: java.lang.String SERVICE_ACTION_TRANSPORT_HOST> = "android.backup.TRANSPORT_HOST";

        return;
    }
}
