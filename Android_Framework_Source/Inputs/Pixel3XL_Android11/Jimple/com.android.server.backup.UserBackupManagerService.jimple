public class com.android.server.backup.UserBackupManagerService extends java.lang.Object
{
    public static final java.lang.String BACKUP_FILE_HEADER_MAGIC;
    public static final int BACKUP_FILE_VERSION;
    private static final java.lang.String BACKUP_FINISHED_ACTION;
    private static final java.lang.String BACKUP_FINISHED_PACKAGE_EXTRA;
    public static final java.lang.String BACKUP_MANIFEST_FILENAME;
    public static final int BACKUP_MANIFEST_VERSION;
    public static final java.lang.String BACKUP_METADATA_FILENAME;
    public static final int BACKUP_METADATA_VERSION;
    public static final int BACKUP_WIDGET_METADATA_TOKEN;
    private static final long BIND_TIMEOUT_INTERVAL;
    private static final int BUSY_BACKOFF_FUZZ;
    private static final long BUSY_BACKOFF_MIN_MILLIS;
    private static final long CLEAR_DATA_TIMEOUT_INTERVAL;
    private static final int CURRENT_ANCESTRAL_RECORD_VERSION;
    private static final long INITIALIZATION_DELAY_MILLIS;
    private static final java.lang.String INIT_SENTINEL_FILE_NAME;
    public static final java.lang.String KEY_WIDGET_STATE;
    private static final int OP_ACKNOWLEDGED;
    public static final int OP_PENDING;
    private static final int OP_TIMEOUT;
    public static final int OP_TYPE_BACKUP;
    public static final int OP_TYPE_BACKUP_WAIT;
    public static final int OP_TYPE_RESTORE_WAIT;
    public static final java.lang.String PACKAGE_MANAGER_SENTINEL;
    public static final java.lang.String RUN_INITIALIZE_ACTION;
    private static final int SCHEDULE_FILE_VERSION;
    private static final java.lang.String SERIAL_ID_FILE;
    public static final java.lang.String SETTINGS_PACKAGE;
    public static final java.lang.String SHARED_BACKUP_AGENT_PACKAGE;
    private static final java.lang.String SKIP_USER_FACING_PACKAGES;
    private static final long TIMEOUT_FULL_CONFIRMATION;
    private static final long TRANSPORT_RETRY_INTERVAL;
    private static final java.lang.String WALLPAPER_PACKAGE;
    private com.android.server.backup.restore.ActiveRestoreSession mActiveRestoreSession;
    private final android.app.IActivityManager mActivityManager;
    private final android.app.ActivityManagerInternal mActivityManagerInternal;
    private final android.util.SparseArray mAdbBackupRestoreConfirmations;
    private final java.lang.Object mAgentConnectLock;
    private final com.android.server.backup.BackupAgentTimeoutParameters mAgentTimeoutParameters;
    private final android.app.AlarmManager mAlarmManager;
    private java.util.Set mAncestralPackages;
    private java.io.File mAncestralSerialNumberFile;
    private long mAncestralToken;
    private boolean mAutoRestore;
    private final com.android.server.backup.internal.BackupHandler mBackupHandler;
    private final android.app.backup.IBackupManager mBackupManagerBinder;
    private final android.util.SparseArray mBackupParticipants;
    private final com.android.server.backup.BackupPasswordManager mBackupPasswordManager;
    private final com.android.server.backup.UserBackupPreferences mBackupPreferences;
    private volatile boolean mBackupRunning;
    private final java.io.File mBaseStateDir;
    private final java.lang.Object mClearDataLock;
    private volatile boolean mClearingData;
    private android.app.IBackupAgent mConnectedAgent;
    private volatile boolean mConnecting;
    private final com.android.server.backup.BackupManagerConstants mConstants;
    private final android.content.Context mContext;
    private final java.lang.Object mCurrentOpLock;
    private final android.util.SparseArray mCurrentOperations;
    private long mCurrentToken;
    private final java.io.File mDataDir;
    private boolean mEnabled;
    private java.util.ArrayList mFullBackupQueue;
    private final java.io.File mFullBackupScheduleFile;
    private java.lang.Runnable mFullBackupScheduleWriter;
    private boolean mIsRestoreInProgress;
    private com.android.server.backup.DataChangedJournal mJournal;
    private final java.io.File mJournalDir;
    private volatile long mLastBackupPass;
    private final java.util.concurrent.atomic.AtomicInteger mNextToken;
    private final android.content.pm.PackageManager mPackageManager;
    private final android.content.pm.IPackageManager mPackageManagerBinder;
    private android.content.BroadcastReceiver mPackageTrackingReceiver;
    private final java.util.HashMap mPendingBackups;
    private final android.util.ArraySet mPendingInits;
    private final java.util.Queue mPendingRestores;
    private android.os.PowerManager mPowerManager;
    private com.android.server.backup.ProcessedPackagesJournal mProcessedPackagesJournal;
    private final java.lang.Object mQueueLock;
    private final long mRegisterTransportsRequestedTime;
    private final java.security.SecureRandom mRng;
    private final android.app.PendingIntent mRunInitIntent;
    private final android.content.BroadcastReceiver mRunInitReceiver;
    private com.android.server.backup.fullbackup.PerformFullTransportBackupTask mRunningFullBackupTask;
    private boolean mSetupComplete;
    private final android.database.ContentObserver mSetupObserver;
    private final android.os.storage.IStorageManager mStorageManager;
    private java.io.File mTokenFile;
    private final java.util.Random mTokenGenerator;
    private final com.android.server.backup.TransportManager mTransportManager;
    private final int mUserId;
    private final com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock;

    private void <init>(int, android.content.Context, com.android.server.backup.BackupManagerService, android.os.HandlerThread, java.io.File, java.io.File, com.android.server.backup.TransportManager)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i1, $i2, $i5;
        android.os.HandlerThread r1;
        java.io.File r2, r3, $r56, $r59, r68, $r70, $r73, $r84, $r85, $r102, $r109, $r110;
        com.android.server.backup.TransportManager r4, r93, r96;
        android.util.ArraySet $r5;
        android.util.SparseArray $r6, $r11, $r14, r92;
        java.util.HashMap $r7;
        java.lang.Object $r8, $r9, $r10, $r15, $r25, $r27, $r29;
        java.security.SecureRandom $r12, $r74;
        java.util.ArrayDeque $r13;
        java.util.Random $r16;
        java.util.concurrent.atomic.AtomicInteger $r17;
        com.android.server.backup.UserBackupManagerService$1 $r18;
        com.android.server.backup.UserBackupManagerService$2 $r19;
        android.content.Context $r21, $r38, r64, $r72, $r89, $r101;
        android.content.pm.PackageManager $r22;
        android.content.pm.IPackageManager $r23;
        android.app.IActivityManager $r24;
        android.app.ActivityManagerInternal $r26;
        android.app.AlarmManager $r28;
        android.os.PowerManager $r30, r103;
        android.os.IBinder $r31, $r34;
        android.os.storage.IStorageManager $r32;
        android.app.backup.IBackupManager $r35;
        com.android.server.backup.BackupAgentTimeoutParameters $r36;
        android.os.Handler $r37;
        android.content.ContentResolver $r39, r67, $r90;
        com.android.server.backup.internal.BackupHandler $r41, $r43, $r88, r95, $r98;
        boolean $z0, $z5, z6;
        com.android.server.backup.internal.SetupObserver $r42;
        android.net.Uri $r44;
        android.database.ContentObserver $r45;
        java.lang.StringBuilder $r57, $r104;
        java.lang.String $r61, $r62, $r107;
        java.lang.Throwable $r63;
        com.android.server.backup.BackupManagerService r65;
        com.android.server.backup.BackupPasswordManager $r71;
        com.android.server.backup.internal.RunInitializeReceiver $r75;
        android.content.IntentFilter $r76;
        android.content.BroadcastReceiver $r78;
        android.os.UserHandle $r79, $r82;
        android.content.Intent $r80;
        android.app.PendingIntent $r83;
        com.android.server.backup.BackupManagerConstants $r87;
        com.android.server.backup._$$Lambda$UserBackupManagerService$9cuIH_XloqtNByp_6hXeGaVars8 $r94;
        long $l4;
        com.android.server.backup._$$Lambda$pM_c5tVAGDtxjxLF_ONtACWWq6Q $r97;
        com.android.server.backup._$$Lambda$UserBackupManagerService$_gNqJq9Ygtc0ZVwYhCSDKCUKrKY $r99;
        com.android.server.backup.UserBackupPreferences $r100;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r106;
        android.os.PowerManager$WakeLock $r108;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        r64 := @parameter1: android.content.Context;

        r65 := @parameter2: com.android.server.backup.BackupManagerService;

        r1 := @parameter3: android.os.HandlerThread;

        r2 := @parameter4: java.io.File;

        r3 := @parameter5: java.io.File;

        r4 := @parameter6: com.android.server.backup.TransportManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits> = $r5;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.util.HashMap mPendingBackups> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock> = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mAgentConnectLock> = $r9;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mClearDataLock> = $r10;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations> = $r11;

        $r12 = new java.security.SecureRandom;

        specialinvoke $r12.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.security.SecureRandom mRng> = $r12;

        $r13 = new java.util.ArrayDeque;

        specialinvoke $r13.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.util.Queue mPendingRestores> = $r13;

        $r14 = new android.util.SparseArray;

        specialinvoke $r14.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock> = $r15;

        $r16 = new java.util.Random;

        specialinvoke $r16.<java.util.Random: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.util.Random mTokenGenerator> = $r16;

        $r17 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r17.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.util.concurrent.atomic.AtomicInteger mNextToken> = $r17;

        r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages> = null;

        r0.<com.android.server.backup.UserBackupManagerService: long mAncestralToken> = 0L;

        r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken> = 0L;

        $r18 = new com.android.server.backup.UserBackupManagerService$1;

        specialinvoke $r18.<com.android.server.backup.UserBackupManagerService$1: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        r0.<com.android.server.backup.UserBackupManagerService: java.lang.Runnable mFullBackupScheduleWriter> = $r18;

        $r19 = new com.android.server.backup.UserBackupManagerService$2;

        specialinvoke $r19.<com.android.server.backup.UserBackupManagerService$2: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mPackageTrackingReceiver> = $r19;

        r0.<com.android.server.backup.UserBackupManagerService: int mUserId> = i0;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r64, "context cannot be null");

        $r21 = (android.content.Context) r64;

        r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext> = $r21;

        $r22 = virtualinvoke r64.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager> = $r22;

        $r23 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.IPackageManager mPackageManagerBinder> = $r23;

        $r24 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r0.<com.android.server.backup.UserBackupManagerService: android.app.IActivityManager mActivityManager> = $r24;

        $r25 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r26 = (android.app.ActivityManagerInternal) $r25;

        r0.<com.android.server.backup.UserBackupManagerService: android.app.ActivityManagerInternal mActivityManagerInternal> = $r26;

        $r27 = virtualinvoke r64.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r28 = (android.app.AlarmManager) $r27;

        r0.<com.android.server.backup.UserBackupManagerService: android.app.AlarmManager mAlarmManager> = $r28;

        $r29 = virtualinvoke r64.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r30 = (android.os.PowerManager) $r29;

        r0.<com.android.server.backup.UserBackupManagerService: android.os.PowerManager mPowerManager> = $r30;

        $r31 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        $r32 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r31);

        r0.<com.android.server.backup.UserBackupManagerService: android.os.storage.IStorageManager mStorageManager> = $r32;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r65, "parent cannot be null");

        $r34 = virtualinvoke r65.<com.android.server.backup.BackupManagerService: android.os.IBinder asBinder()>();

        $r35 = staticinvoke <com.android.server.backup.BackupManagerService: android.app.backup.IBackupManager asInterface(android.os.IBinder)>($r34);

        r0.<com.android.server.backup.UserBackupManagerService: android.app.backup.IBackupManager mBackupManagerBinder> = $r35;

        $r36 = new com.android.server.backup.BackupAgentTimeoutParameters;

        $r37 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r38 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r39 = virtualinvoke $r38.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        specialinvoke $r36.<com.android.server.backup.BackupAgentTimeoutParameters: void <init>(android.os.Handler,android.content.ContentResolver)>($r37, $r39);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupAgentTimeoutParameters mAgentTimeoutParameters> = $r36;

        virtualinvoke $r36.<com.android.server.backup.BackupAgentTimeoutParameters: void start()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "userBackupThread cannot be null");

        $r41 = new com.android.server.backup.internal.BackupHandler;

        specialinvoke $r41.<com.android.server.backup.internal.BackupHandler: void <init>(com.android.server.backup.UserBackupManagerService,android.os.HandlerThread)>(r0, r1);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler> = $r41;

        r67 = virtualinvoke r64.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z0 = staticinvoke <com.android.server.backup.UserBackupManagerService: boolean getSetupCompleteSettingForUser(android.content.Context,int)>(r64, i0);

        r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete> = $z0;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r67, "backup_auto_restore", 1, i0);

        if $i1 == 0 goto label1;

        z6 = 1;

        goto label2;

     label1:
        z6 = 0;

     label2:
        r0.<com.android.server.backup.UserBackupManagerService: boolean mAutoRestore> = z6;

        $r42 = new com.android.server.backup.internal.SetupObserver;

        $r43 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        specialinvoke $r42.<com.android.server.backup.internal.SetupObserver: void <init>(com.android.server.backup.UserBackupManagerService,android.os.Handler)>(r0, $r43);

        r0.<com.android.server.backup.UserBackupManagerService: android.database.ContentObserver mSetupObserver> = $r42;

        $r44 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("user_setup_complete");

        $r45 = r0.<com.android.server.backup.UserBackupManagerService: android.database.ContentObserver mSetupObserver>;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        virtualinvoke r67.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r44, 0, $r45, $i2);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "baseStateDir cannot be null");

        r68 = (java.io.File) r2;

        r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir> = r68;

        if i0 != 0 goto label3;

        virtualinvoke r68.<java.io.File: boolean mkdirs()>();

        $r56 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        $z5 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>($r56);

        if $z5 != 0 goto label3;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELinux restorecon failed on ");

        $r59 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $r62 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r61);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r62);

     label3:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "dataDir cannot be null");

        $r70 = (java.io.File) r3;

        r0.<com.android.server.backup.UserBackupManagerService: java.io.File mDataDir> = $r70;

        $r71 = new com.android.server.backup.BackupPasswordManager;

        $r72 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r73 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        $r74 = r0.<com.android.server.backup.UserBackupManagerService: java.security.SecureRandom mRng>;

        specialinvoke $r71.<com.android.server.backup.BackupPasswordManager: void <init>(android.content.Context,java.io.File,java.security.SecureRandom)>($r72, $r73, $r74);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupPasswordManager mBackupPasswordManager> = $r71;

        $r75 = new com.android.server.backup.internal.RunInitializeReceiver;

        specialinvoke $r75.<com.android.server.backup.internal.RunInitializeReceiver: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mRunInitReceiver> = $r75;

        $r76 = new android.content.IntentFilter;

        specialinvoke $r76.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r76.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.backup.intent.INIT");

        $r78 = r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mRunInitReceiver>;

        $r79 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke r64.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r78, $r79, $r76, "android.permission.BACKUP", null);

        $r80 = new android.content.Intent;

        specialinvoke $r80.<android.content.Intent: void <init>(java.lang.String)>("android.app.backup.intent.INIT");

        virtualinvoke $r80.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r82 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r83 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)>(r64, 0, $r80, 0, $r82);

        r0.<com.android.server.backup.UserBackupManagerService: android.app.PendingIntent mRunInitIntent> = $r83;

        $r84 = new java.io.File;

        $r85 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r84.<java.io.File: void <init>(java.io.File,java.lang.String)>($r85, "pending");

        r0.<com.android.server.backup.UserBackupManagerService: java.io.File mJournalDir> = $r84;

        virtualinvoke $r84.<java.io.File: boolean mkdirs()>();

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal> = null;

        $r87 = new com.android.server.backup.BackupManagerConstants;

        $r88 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $r89 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r90 = virtualinvoke $r89.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        specialinvoke $r87.<com.android.server.backup.BackupManagerConstants: void <init>(android.os.Handler,android.content.ContentResolver)>($r88, $r90);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants> = $r87;

        virtualinvoke $r87.<com.android.server.backup.BackupManagerConstants: void start()>();

        r92 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r92;

     label4:
        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void addPackageParticipantsLocked(java.lang.String[])>(null);

        exitmonitor r92;

     label5:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "transportManager cannot be null");

        r93 = (com.android.server.backup.TransportManager) r4;

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager> = r93;

        $r94 = new com.android.server.backup._$$Lambda$UserBackupManagerService$9cuIH_XloqtNByp_6hXeGaVars8;

        specialinvoke $r94.<com.android.server.backup._$$Lambda$UserBackupManagerService$9cuIH_XloqtNByp_6hXeGaVars8: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        virtualinvoke r93.<com.android.server.backup.TransportManager: void setOnTransportRegisteredListener(com.android.server.backup.transport.OnTransportRegisteredListener)>($r94);

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.backup.UserBackupManagerService: long mRegisterTransportsRequestedTime> = $l4;

        r95 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r96 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r96);

        $r97 = new com.android.server.backup._$$Lambda$pM_c5tVAGDtxjxLF_ONtACWWq6Q;

        specialinvoke $r97.<com.android.server.backup._$$Lambda$pM_c5tVAGDtxjxLF_ONtACWWq6Q: void <init>(com.android.server.backup.TransportManager)>(r96);

        virtualinvoke r95.<com.android.server.backup.internal.BackupHandler: boolean postDelayed(java.lang.Runnable,long)>($r97, 3000L);

        $r98 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $r99 = new com.android.server.backup._$$Lambda$UserBackupManagerService$_gNqJq9Ygtc0ZVwYhCSDKCUKrKY;

        specialinvoke $r99.<com.android.server.backup._$$Lambda$UserBackupManagerService$_gNqJq9Ygtc0ZVwYhCSDKCUKrKY: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        virtualinvoke $r98.<com.android.server.backup.internal.BackupHandler: boolean postDelayed(java.lang.Runnable,long)>($r99, 3000L);

        $r100 = new com.android.server.backup.UserBackupPreferences;

        $r101 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r102 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r100.<com.android.server.backup.UserBackupPreferences: void <init>(android.content.Context,java.io.File)>($r101, $r102);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupPreferences mBackupPreferences> = $r100;

        r103 = r0.<com.android.server.backup.UserBackupManagerService: android.os.PowerManager mPowerManager>;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*backup*-");

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i5 = virtualinvoke r1.<android.os.HandlerThread: int getThreadId()>();

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r106 = new com.android.server.backup.UserBackupManagerService$BackupWakeLock;

        $r107 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        $r108 = virtualinvoke r103.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, $r107);

        specialinvoke $r106.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void <init>(android.os.PowerManager$WakeLock,int)>($r108, i0);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock> = $r106;

        $r109 = new java.io.File;

        $r110 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r109.<java.io.File: void <init>(java.io.File,java.lang.String)>($r110, "fb-schedule");

        r0.<com.android.server.backup.UserBackupManagerService: java.io.File mFullBackupScheduleFile> = $r109;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void initPackageTracking()>();

        return;

     label6:
        $r63 := @caughtexception;

     label7:
        exitmonitor r92;

     label8:
        throw $r63;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static java.lang.String access$000(int, java.lang.String)
    {
        int i0;
        java.lang.String r0, $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, r0);

        return $r1;
    }

    static android.content.pm.PackageManager access$1000(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.pm.PackageManager $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        return $r1;
    }

    static void access$1100(com.android.server.backup.UserBackupManagerService, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void dequeueFullBackupLocked(java.lang.String)>(r1);

        return;
    }

    static void access$1200(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void writeFullBackupScheduleAsync()>();

        return;
    }

    static com.android.server.backup.TransportManager access$1300(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.TransportManager $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        return $r1;
    }

    static com.android.server.backup.fullbackup.PerformFullTransportBackupTask access$1400(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.fullbackup.PerformFullTransportBackupTask $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.fullbackup.PerformFullTransportBackupTask mRunningFullBackupTask>;

        return $r1;
    }

    static void access$1500(com.android.server.backup.UserBackupManagerService, java.lang.String, java.util.HashSet)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;
        java.util.HashSet r2;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.HashSet;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void dataChangedImpl(java.lang.String,java.util.HashSet)>(r1, r2);

        return;
    }

    static java.lang.Object access$200(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        return $r1;
    }

    static java.util.ArrayList access$300(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        return $r1;
    }

    static java.io.File access$400(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mFullBackupScheduleFile>;

        return $r1;
    }

    static int access$500(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        return $i0;
    }

    static com.android.server.backup.internal.BackupHandler access$600(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.internal.BackupHandler $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        return $r1;
    }

    static android.util.SparseArray access$700(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        return $r1;
    }

    static void access$800(com.android.server.backup.UserBackupManagerService, java.lang.String[], int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String[] r1;
        int i0;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter1: java.lang.String[];

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void removePackageParticipantsLocked(java.lang.String[],int)>(r1, i0);

        return;
    }

    static void access$900(com.android.server.backup.UserBackupManagerService, java.lang.String[])
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String[] r1;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter1: java.lang.String[];

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void addPackageParticipantsLocked(java.lang.String[])>(r1);

        return;
    }

    private void addPackageParticipantsLocked(java.lang.String[])
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String[] r1;
        java.util.List r2;
        int i0, i1;
        java.lang.String $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String[];

        r2 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: java.util.List allAgentPackages()>();

        if r1 == null goto label2;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r1[i1];

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void addPackageParticipantsLockedInner(java.lang.String,java.util.List)>($r3, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void addPackageParticipantsLockedInner(java.lang.String,java.util.List)>(null, r2);

     label3:
        return;
    }

    private void addPackageParticipantsLockedInner(java.lang.String, java.util.List)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, $r9, $r10, $r15;
        java.util.Iterator r2;
        android.content.pm.PackageInfo r3;
        int i0;
        java.util.HashSet r4, $r13, r17;
        boolean $z0, $z3;
        java.lang.Object $r5, $r8;
        android.content.pm.ApplicationInfo $r6;
        android.util.SparseArray $r7, $r14;
        com.android.server.backup.internal.BackupHandler $r11, $r12;
        java.util.List r16;
        android.os.Message r18;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        r16 := @parameter1: java.util.List;

        r2 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.PackageInfo) $r5;

        if r1 == null goto label2;

        $r15 = r3.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

     label2:
        $r6 = r3.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r6.<android.content.pm.ApplicationInfo: int uid>;

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (java.util.HashSet) $r8;

        r17 = r4;

        if r4 != null goto label3;

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        r17 = $r13;

        $r14 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r13);

     label3:
        $r9 = r3.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r17.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        $r11 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $r10 = r3.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r18 = virtualinvoke $r11.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(16, $r10);

        $r12 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r12.<com.android.server.backup.internal.BackupHandler: boolean sendMessage(android.os.Message)>(r18);

     label4:
        goto label1;

     label5:
        return;
    }

    private static java.lang.String addUserIdToLogMessage(int, java.lang.String)
    {
        int i0;
        java.lang.String r0, $r7;
        java.lang.StringBuilder $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[UserID:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private java.util.List allAgentPackages()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.List r1, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.content.pm.PackageManager $r2, $r7;
        java.lang.Object $r3;
        java.lang.String $r5, $r6;
        java.lang.String[] $r8;
        android.content.pm.ApplicationInfo $r9, $r11, r15, r16;
        android.content.pm.PackageManager$NameNotFoundException $r12;
        android.content.pm.PackageInfo r14;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r1 = virtualinvoke $r2.<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(134217728, $i0);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i7 = $i1 - 1;

     label01:
        if i7 < 0 goto label10;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        r14 = (android.content.pm.PackageInfo) $r3;

     label02:
        r15 = r14.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = r15.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = $i2 & 32768;

        if $i3 == 0 goto label06;

        $r5 = r15.<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>;

        if $r5 == null goto label06;

        $i4 = r15.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i4 & 67108864;

        if $i5 == 0 goto label04;

     label03:
        goto label06;

     label04:
        $r7 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $r6 = r14.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r16 = virtualinvoke $r7.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>($r6, 1024, $i6);

        $r9 = r14.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r8 = r16.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r9.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles> = $r8;

        $r11 = r14.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = r16.<android.content.pm.ApplicationInfo: java.util.List sharedLibraryInfos>;

        $r11.<android.content.pm.ApplicationInfo: java.util.List sharedLibraryInfos> = $r10;

     label05:
        goto label07;

     label06:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i7);

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i7);

     label09:
        i7 = i7 + -1;

        goto label01;

     label10:
        return r1;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label08;
    }

    private void clearApplicationDataSynchronous(java.lang.String, boolean, boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0, z1, $z3, z4, $z5;
        long l0, l1, $l6;
        java.lang.StringBuilder r1, $r14, r33;
        int $i2, $i3, $i4, $i8, $i9, $i10, i13, i14, i15, i16;
        android.content.pm.PackageManager $r2;
        android.content.pm.PackageInfo $r3;
        com.android.server.backup.internal.ClearDataObserver $r4;
        android.app.IActivityManager $r5;
        java.lang.String $r9, $r10, $r18, $r19, $r24, $r25, r27;
        byte $b7;
        java.lang.Object $r11, r30;
        java.lang.Throwable $r12, $r20;
        android.content.pm.PackageManager$NameNotFoundException $r13;
        android.os.RemoteException $r26;
        android.content.pm.ApplicationInfo r28;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r27 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label01:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r27, 0, $i2);

        r28 = $r3.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

     label02:
        if z0 == 0 goto label07;

     label03:
        $i8 = r28.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i8 < 29 goto label07;

        $i9 = r28.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i10 = $i9 & 67108864;

        if $i10 == 0 goto label05;

     label04:
        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        goto label10;

     label07:
        i13 = r28.<android.content.pm.ApplicationInfo: int flags>;

     label08:
        $i3 = i13 & 64;

        if $i3 == 0 goto label09;

        z4 = 1;

        goto label10;

     label09:
        z4 = 0;

     label10:
        if z4 != 0 goto label11;

        return;

     label11:
        $r4 = new com.android.server.backup.internal.ClearDataObserver;

        specialinvoke $r4.<com.android.server.backup.internal.ClearDataObserver: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        r30 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mClearDataLock>;

        entermonitor r30;

     label12:
        r0.<com.android.server.backup.UserBackupManagerService: boolean mClearingData> = 1;

     label13:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IActivityManager mActivityManager>;

        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        interfaceinvoke $r5.<android.app.IActivityManager: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>(r27, z1, $r4, $i4);

     label14:
        goto label16;

     label15:
        $r26 := @caughtexception;

     label16:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label17:
        $z5 = r0.<com.android.server.backup.UserBackupManagerService: boolean mClearingData>;

        if $z5 == 0 goto label24;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label18:
        $l6 = l0 + 30000L;

        $b7 = l1 cmp $l6;

        if $b7 >= 0 goto label24;

     label19:
        $r11 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mClearDataLock>;

        virtualinvoke $r11.<java.lang.Object: void wait(long)>(5000L);

     label20:
        goto label17;

     label21:
        $r20 := @caughtexception;

     label22:
        r0.<com.android.server.backup.UserBackupManagerService: boolean mClearingData> = 0;

        i14 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted while waiting for ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data to be cleared");

        $r24 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i14, $r24);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r25, $r20);

     label23:
        goto label17;

     label24:
        $z3 = r0.<com.android.server.backup.UserBackupManagerService: boolean mClearingData>;

        if $z3 == 0 goto label25;

        i15 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Clearing app data for ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r9 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i15, $r9);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

     label25:
        exitmonitor r30;

     label26:
        return;

     label27:
        $r12 := @caughtexception;

     label28:
        exitmonitor r30;

     label29:
        throw $r12;

     label30:
        $r13 := @caughtexception;

        i16 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to clear data for ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but not found");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i16, $r18);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label30;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label30;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label30;
        catch java.lang.Throwable from label12 to label13 with label27;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.InterruptedException from label19 to label20 with label21;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
    }

    public static com.android.server.backup.UserBackupManagerService createAndInitializeService(int, android.content.Context, com.android.server.backup.BackupManagerService, android.os.HandlerThread, java.io.File, java.io.File, com.android.server.backup.TransportManager)
    {
        int i0;
        android.content.Context r0;
        com.android.server.backup.BackupManagerService r1;
        android.os.HandlerThread r2;
        java.io.File r3, r4;
        com.android.server.backup.TransportManager r5;
        com.android.server.backup.UserBackupManagerService $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: android.content.Context;

        r1 := @parameter2: com.android.server.backup.BackupManagerService;

        r2 := @parameter3: android.os.HandlerThread;

        r3 := @parameter4: java.io.File;

        r4 := @parameter5: java.io.File;

        r5 := @parameter6: com.android.server.backup.TransportManager;

        $r6 = new com.android.server.backup.UserBackupManagerService;

        specialinvoke $r6.<com.android.server.backup.UserBackupManagerService: void <init>(int,android.content.Context,com.android.server.backup.BackupManagerService,android.os.HandlerThread,java.io.File,java.io.File,com.android.server.backup.TransportManager)>(i0, r0, r1, r2, r3, r4, r5);

        return $r6;
    }

    static com.android.server.backup.UserBackupManagerService createAndInitializeService(int, android.content.Context, com.android.server.backup.BackupManagerService, java.util.Set)
    {
        int i0;
        android.content.Context r0;
        com.android.server.backup.BackupManagerService r1;
        android.content.ContentResolver $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r10, $r15;
        java.lang.String $r7, $r8, $r14, $r17, $r19, $r20, r23, r24;
        com.android.server.backup.TransportManager $r9;
        android.os.HandlerThread $r13;
        com.android.server.backup.UserBackupManagerService $r21;
        java.util.Set r22;
        java.io.File r27, r28;

        i0 := @parameter0: int;

        r0 := @parameter1: android.content.Context;

        r1 := @parameter2: com.android.server.backup.BackupManagerService;

        r22 := @parameter3: java.util.Set;

        $r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r23 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r3, "backup_transport", i0);

        r24 = r23;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r23);

        if $z0 == 0 goto label1;

        r24 = null;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting with transport ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r7);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

        $r9 = new com.android.server.backup.TransportManager;

        specialinvoke $r9.<com.android.server.backup.TransportManager: void <init>(int,android.content.Context,java.util.Set,java.lang.String)>(i0, r0, r22, r24);

        r27 = staticinvoke <com.android.server.backup.UserBackupManagerFiles: java.io.File getBaseStateDir(int)>(i0);

        r28 = staticinvoke <com.android.server.backup.UserBackupManagerFiles: java.io.File getDataDir(int)>(i0);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("backup-");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = new android.os.HandlerThread;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<android.os.HandlerThread: void <init>(java.lang.String,int)>($r14, 10);

        virtualinvoke $r13.<android.os.HandlerThread: void start()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Started thread ");

        $r17 = virtualinvoke $r13.<android.os.HandlerThread: java.lang.String getName()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r19);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r20);

        $r21 = staticinvoke <com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService createAndInitializeService(int,android.content.Context,com.android.server.backup.BackupManagerService,android.os.HandlerThread,java.io.File,java.io.File,com.android.server.backup.TransportManager)>(i0, r0, r1, $r13, r27, r28, $r9);

        return $r21;
    }

    private void dataChangedImpl(java.lang.String, java.util.HashSet)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i1, $i3;
        java.lang.Object r1, $r3;
        boolean $z0;
        java.util.HashMap $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r9, $r10, r12;
        java.lang.Throwable $r11;
        java.util.HashSet r13;
        com.android.server.backup.keyvalue.BackupRequest r15;
        android.content.Context $r16;
        com.android.server.backup.BackupManagerConstants $r17;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.util.HashSet;

        if r13 != null goto label1;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataChanged but no participant pkg=\'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        return;

     label1:
        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r1;

     label2:
        $z0 = virtualinvoke r13.<java.util.HashSet: boolean contains(java.lang.Object)>(r12);

        if $z0 == 0 goto label3;

        r15 = new com.android.server.backup.keyvalue.BackupRequest;

        specialinvoke r15.<com.android.server.backup.keyvalue.BackupRequest: void <init>(java.lang.String)>(r12);

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: java.util.HashMap mPendingBackups>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r15);

        if $r3 != null goto label3;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void writeToJournalLocked(java.lang.String)>(r12);

     label3:
        exitmonitor r1;

     label4:
        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r16 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r17 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.KeyValueBackupJob: void schedule(int,android.content.Context,com.android.server.backup.BackupManagerConstants)>($i3, $r16, $r17);

        return;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private java.util.HashSet dataChangedTargets(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.Context $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, r10;
        boolean $z0;
        android.util.SparseArray $r3, $r6, r11, r14;
        java.lang.String[] $r4;
        java.util.HashSet $r5, r12, r15;
        java.lang.Object $r7;
        java.lang.Throwable $r8, $r9;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r10 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.BACKUP", $i0, $i1);

        if $i2 != -1 goto label06;

        r11 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r11;

     label01:
        $r6 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>($i3);

        r12 = (java.util.HashSet) $r7;

        exitmonitor r11;

     label02:
        return r12;

     label03:
        $r9 := @caughtexception;

     label04:
        exitmonitor r11;

     label05:
        throw $r9;

     label06:
        $r2 = "@pm@";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z0 == 0 goto label07;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "@pm@";

        $r5 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r4);

        return $r5;

     label07:
        r14 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r14;

     label08:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        r15 = staticinvoke <com.android.server.backup.utils.SparseArrayUtils: java.util.HashSet union(android.util.SparseArray)>($r3);

        exitmonitor r14;

     label09:
        return r15;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r14;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void dequeueFullBackupLocked(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, $r6;
        java.util.ArrayList $r2, $r3, $r7;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.backup.fullbackup.FullBackupEntry $r5;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.backup.fullbackup.FullBackupEntry) $r4;

        $r6 = $r5.<com.android.server.backup.fullbackup.FullBackupEntry: java.lang.String packageName>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    private void dumpAgents(java.io.PrintWriter)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.PrintWriter r1;
        android.content.pm.PackageInfo r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4, $r6;
        android.content.pm.ApplicationInfo $r5;
        java.util.List r7;
        java.util.Iterator r8;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r7 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: java.util.List allAgentPackages()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Defined backup agents:");

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.PackageInfo) $r3;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r4 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("      ");

        $r5 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r6 = $r5.<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label1;

     label2:
        return;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object r1, $r80, $r82, $r86, $r91, $r97, $r99, $r103, $r132;
        int i0, i1, $i2, $i3, $i4, $i7, $i9, $i12, $i13, $i14, $i15, $i18, i20, i21, i22, i23, i24, i25;
        java.lang.StringBuilder $r2, r144, r148, r151, r152, r153, r156, r159, r162, r163, r166, r168, r169, r172, r173, r174, r175, r178, r179, r183, r185, r188, r189, r192, r193;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        android.util.ArraySet $r12, $r39, $r42;
        java.lang.String $r15, $r18, $r24, $r27, $r30, $r35, $r41, $r45, $r46, $r49, $r50, $r54, $r60, $r66, $r71, $r78, $r81, $r85, $r89, $r94, $r102, $r106, $r108, $r111, $r114, $r117, $r119, $r124, $r126, $r131, $r133, $r135, $r138, r142, r145, r146, r147, r149, r150, r158, r160, r171, r177, r182, r187;
        long $l5, $l6, $l8, $l10, $l11, $l16, $l17;
        com.android.server.backup.TransportManager $r31, $r36, $r107, $r112, $r116, $r121;
        java.util.Set $r32, $r57, $r58, $r61, $r90, r184;
        android.util.SparseArray $r51, $r95, $r96;
        com.android.server.backup.ProcessedPackagesJournal $r62;
        java.util.HashMap $r69, $r72;
        java.util.Collection $r73;
        java.util.ArrayList $r76, $r79;
        java.util.HashSet $r98;
        java.io.File $r113, r161, r165;
        android.content.Intent $r122;
        java.lang.Exception $r134, $r140, r167;
        java.lang.Throwable $r139;
        java.io.PrintWriter r141;
        java.util.Iterator r154, r170, r176, r181, r186, r190, r194;
        android.content.ComponentName r155;
        java.lang.String[] r157;
        java.io.File[] r164;
        java.io.Serializable r180;
        com.android.server.backup.keyvalue.BackupRequest r191;
        com.android.server.backup.fullbackup.FullBackupEntry r195;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r141 := @parameter0: java.io.PrintWriter;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        if $i2 != 0 goto label001;

        r142 = "";

        goto label002;

     label001:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r142 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label002:
        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r1;

     label003:
        r144 = new java.lang.StringBuilder;

        specialinvoke r144.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup Manager is ");

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled>;

        if $z0 == 0 goto label005;

     label004:
        r145 = "enabled";

        goto label006;

     label005:
        r145 = "disabled";

     label006:
        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r145);

        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $z1 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z1 != 0 goto label008;

     label007:
        r146 = "not ";

        goto label009;

     label008:
        r146 = "";

     label009:
        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r146);

        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setup complete / ");

        $r12 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        $i4 = virtualinvoke $r12.<android.util.ArraySet: int size()>();

        if $i4 != 0 goto label011;

     label010:
        r147 = "not ";

        goto label012;

     label011:
        r147 = "";

     label012:
        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r147);

        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pending init");

        $r15 = virtualinvoke r144.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        r148 = new java.lang.StringBuilder;

        specialinvoke r148.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-restore is ");

        $z2 = r0.<com.android.server.backup.UserBackupManagerService: boolean mAutoRestore>;

        if $z2 == 0 goto label014;

     label013:
        r149 = "enabled";

        goto label015;

     label014:
        r149 = "disabled";

     label015:
        virtualinvoke r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r149);

        $r18 = virtualinvoke r148.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $z3 = r0.<com.android.server.backup.UserBackupManagerService: boolean mBackupRunning>;

        if $z3 == 0 goto label016;

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>("Backup currently running");

     label016:
        $z4 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean isBackupOperationInProgress()>();

        if $z4 == 0 goto label018;

     label017:
        r150 = "Backup in progress";

        goto label019;

     label018:
        r150 = "No backups running";

     label019:
        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>(r150);

        r151 = new java.lang.StringBuilder;

        specialinvoke r151.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Last backup pass started: ");

        $l5 = r0.<com.android.server.backup.UserBackupManagerService: long mLastBackupPass>;

        virtualinvoke r151.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        virtualinvoke r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (now = ");

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r151.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        virtualinvoke r151.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r24 = virtualinvoke r151.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        r152 = new java.lang.StringBuilder;

        specialinvoke r152.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  next scheduled: ");

        $i7 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $l8 = staticinvoke <com.android.server.backup.KeyValueBackupJob: long nextScheduled(int)>($i7);

        virtualinvoke r152.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r27 = virtualinvoke r152.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        r153 = new java.lang.StringBuilder;

        specialinvoke r153.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport whitelist:");

        $r30 = virtualinvoke r153.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        $r31 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r32 = virtualinvoke $r31.<com.android.server.backup.TransportManager: java.util.Set getTransportWhitelist()>();

        r154 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label020:
        $z10 = interfaceinvoke r154.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label022;

        $r132 = interfaceinvoke r154.<java.util.Iterator: java.lang.Object next()>();

        r155 = (android.content.ComponentName) $r132;

        virtualinvoke r141.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r133 = virtualinvoke r155.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r133);

     label021:
        goto label020;

     label022:
        r156 = new java.lang.StringBuilder;

        specialinvoke r156.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Available transports:");

        $r35 = virtualinvoke r156.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r35);

        r157 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: java.lang.String[] listAllTransports()>();

     label023:
        if r157 == null goto label077;

     label024:
        i0 = lengthof r157;

     label025:
        i20 = 0;

     label026:
        if i20 >= i0 goto label077;

        r158 = r157[i20];

     label027:
        r159 = new java.lang.StringBuilder;

        specialinvoke r159.<java.lang.StringBuilder: void <init>()>();

        $r107 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r108 = virtualinvoke $r107.<com.android.server.backup.TransportManager: java.lang.String getCurrentTransportName()>();

        $z9 = virtualinvoke r158.<java.lang.String: boolean equals(java.lang.Object)>($r108);

        if $z9 == 0 goto label029;

     label028:
        r160 = "  * ";

        goto label030;

     label029:
        r160 = "    ";

     label030:
        virtualinvoke r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r160);

        virtualinvoke r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r158);

        $r111 = virtualinvoke r159.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r111);

     label031:
        i21 = i20;

     label032:
        r161 = new java.io.File;

     label033:
        i21 = i20;

     label034:
        $r113 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        $r112 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r114 = virtualinvoke $r112.<com.android.server.backup.TransportManager: java.lang.String getTransportDirName(java.lang.String)>(r158);

        specialinvoke r161.<java.io.File: void <init>(java.io.File,java.lang.String)>($r113, $r114);

     label035:
        i21 = i20;

     label036:
        r162 = new java.lang.StringBuilder;

     label037:
        i21 = i20;

     label038:
        specialinvoke r162.<java.lang.StringBuilder: void <init>()>();

     label039:
        i21 = i20;

     label040:
        virtualinvoke r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       destination: ");

     label041:
        i21 = i20;

     label042:
        $r116 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r117 = virtualinvoke $r116.<com.android.server.backup.TransportManager: java.lang.String getTransportCurrentDestinationString(java.lang.String)>(r158);

        virtualinvoke r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r117);

     label043:
        i21 = i20;

     label044:
        $r119 = virtualinvoke r162.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r119);

     label045:
        i21 = i20;

     label046:
        r163 = new java.lang.StringBuilder;

     label047:
        i21 = i20;

     label048:
        specialinvoke r163.<java.lang.StringBuilder: void <init>()>();

     label049:
        i21 = i20;

     label050:
        virtualinvoke r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       intent: ");

     label051:
        i21 = i20;

     label052:
        $r121 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r122 = virtualinvoke $r121.<com.android.server.backup.TransportManager: android.content.Intent getTransportConfigurationIntent(java.lang.String)>(r158);

        virtualinvoke r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r122);

     label053:
        i21 = i20;

     label054:
        $r124 = virtualinvoke r163.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r124);

     label055:
        i21 = i20;

     label056:
        r164 = virtualinvoke r161.<java.io.File: java.io.File[] listFiles()>();

     label057:
        i21 = i20;

     label058:
        i1 = lengthof r164;

     label059:
        i22 = 0;

     label060:
        if i22 >= i1 goto label073;

        r165 = r164[i22];

        i21 = i20;

     label061:
        r166 = new java.lang.StringBuilder;

     label062:
        i21 = i20;

     label063:
        specialinvoke r166.<java.lang.StringBuilder: void <init>()>();

     label064:
        i21 = i20;

     label065:
        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       ");

     label066:
        i21 = i20;

     label067:
        $r126 = virtualinvoke r165.<java.io.File: java.lang.String getName()>();

        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r126);

     label068:
        i21 = i20;

     label069:
        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

     label070:
        $l17 = virtualinvoke r165.<java.io.File: long length()>();

        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l17);

        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state bytes");

        $r131 = virtualinvoke r166.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r131);

     label071:
        i22 = i22 + 1;

        goto label060;

     label072:
        $r140 := @caughtexception;

        r167 = $r140;

        goto label075;

     label073:
        goto label076;

     label074:
        $r134 := @caughtexception;

        r167 = $r134;

        i20 = i21;

     label075:
        $i18 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r135 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i18, "Error in transport");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r135, r167);

        r168 = new java.lang.StringBuilder;

        specialinvoke r168.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        Error: ");

        virtualinvoke r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r167);

        $r138 = virtualinvoke r168.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r138);

     label076:
        i20 = i20 + 1;

        goto label026;

     label077:
        $r36 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r36.<com.android.server.backup.TransportManager: void dumpTransportClients(java.io.PrintWriter)>(r141);

        r169 = new java.lang.StringBuilder;

        specialinvoke r169.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r169.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r169.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending init: ");

        $r39 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        $i9 = virtualinvoke $r39.<android.util.ArraySet: int size()>();

        virtualinvoke r169.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r41 = virtualinvoke r169.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r41);

        $r42 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        r170 = virtualinvoke $r42.<android.util.ArraySet: java.util.Iterator iterator()>();

     label078:
        $z11 = interfaceinvoke r170.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label080;

        $r103 = interfaceinvoke r170.<java.util.Iterator: java.lang.Object next()>();

        r171 = (java.lang.String) $r103;

        r172 = new java.lang.StringBuilder;

        specialinvoke r172.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r171);

        $r106 = virtualinvoke r172.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r106);

     label079:
        goto label078;

     label080:
        r173 = new java.lang.StringBuilder;

        specialinvoke r173.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ancestral: ");

        $r45 = virtualinvoke r173.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void print(java.lang.String)>($r45);

        $l10 = r0.<com.android.server.backup.UserBackupManagerService: long mAncestralToken>;

        $r46 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l10);

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        r174 = new java.lang.StringBuilder;

        specialinvoke r174.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current:   ");

        $r49 = virtualinvoke r174.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void print(java.lang.String)>($r49);

        $l11 = r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken>;

        $r50 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l11);

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r50);

        $r51 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        i23 = virtualinvoke $r51.<android.util.SparseArray: int size()>();

        r175 = new java.lang.StringBuilder;

        specialinvoke r175.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Participants:");

        $r54 = virtualinvoke r175.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r54);

     label081:
        i24 = 0;

     label082:
        if i24 >= i23 goto label087;

     label083:
        $r95 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        i25 = virtualinvoke $r95.<android.util.SparseArray: int keyAt(int)>(i24);

        virtualinvoke r141.<java.io.PrintWriter: void print(java.lang.String)>("  uid: ");

        virtualinvoke r141.<java.io.PrintWriter: void println(int)>(i25);

        $r96 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r97 = virtualinvoke $r96.<android.util.SparseArray: java.lang.Object valueAt(int)>(i24);

        $r98 = (java.util.HashSet) $r97;

        r176 = virtualinvoke $r98.<java.util.HashSet: java.util.Iterator iterator()>();

     label084:
        $z8 = interfaceinvoke r176.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label086;

        $r99 = interfaceinvoke r176.<java.util.Iterator: java.lang.Object next()>();

        r177 = (java.lang.String) $r99;

        r178 = new java.lang.StringBuilder;

        specialinvoke r178.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r178.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r178.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r177);

        $r102 = virtualinvoke r178.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r102);

     label085:
        goto label084;

     label086:
        i24 = i24 + 1;

        goto label082;

     label087:
        r179 = new java.lang.StringBuilder;

        specialinvoke r179.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ancestral packages: ");

        $r57 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        if $r57 != null goto label089;

     label088:
        r180 = "none";

        goto label090;

     label089:
        $r58 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        $i12 = interfaceinvoke $r58.<java.util.Set: int size()>();

        r180 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

     label090:
        virtualinvoke r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r180);

        $r60 = virtualinvoke r179.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r60);

        $r61 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        if $r61 == null goto label093;

        $r90 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        r181 = interfaceinvoke $r90.<java.util.Set: java.util.Iterator iterator()>();

     label091:
        $z7 = interfaceinvoke r181.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label093;

        $r91 = interfaceinvoke r181.<java.util.Iterator: java.lang.Object next()>();

        r182 = (java.lang.String) $r91;

        r183 = new java.lang.StringBuilder;

        specialinvoke r183.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r183.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r183.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r182);

        $r94 = virtualinvoke r183.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r94);

     label092:
        goto label091;

     label093:
        $r62 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.ProcessedPackagesJournal mProcessedPackagesJournal>;

        r184 = virtualinvoke $r62.<com.android.server.backup.ProcessedPackagesJournal: java.util.Set getPackagesCopy()>();

        r185 = new java.lang.StringBuilder;

        specialinvoke r185.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ever backed up: ");

        $i13 = interfaceinvoke r184.<java.util.Set: int size()>();

        virtualinvoke r185.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r66 = virtualinvoke r185.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r66);

        r186 = interfaceinvoke r184.<java.util.Set: java.util.Iterator iterator()>();

     label094:
        $z12 = interfaceinvoke r186.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label096;

        $r86 = interfaceinvoke r186.<java.util.Iterator: java.lang.Object next()>();

        r187 = (java.lang.String) $r86;

        r188 = new java.lang.StringBuilder;

        specialinvoke r188.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r187);

        $r89 = virtualinvoke r188.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r89);

     label095:
        goto label094;

     label096:
        r189 = new java.lang.StringBuilder;

        specialinvoke r189.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending key/value backup: ");

        $r69 = r0.<com.android.server.backup.UserBackupManagerService: java.util.HashMap mPendingBackups>;

        $i14 = virtualinvoke $r69.<java.util.HashMap: int size()>();

        virtualinvoke r189.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r71 = virtualinvoke r189.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r71);

        $r72 = r0.<com.android.server.backup.UserBackupManagerService: java.util.HashMap mPendingBackups>;

        $r73 = virtualinvoke $r72.<java.util.HashMap: java.util.Collection values()>();

        r190 = interfaceinvoke $r73.<java.util.Collection: java.util.Iterator iterator()>();

     label097:
        $z5 = interfaceinvoke r190.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label099;

        $r82 = interfaceinvoke r190.<java.util.Iterator: java.lang.Object next()>();

        r191 = (com.android.server.backup.keyvalue.BackupRequest) $r82;

        r192 = new java.lang.StringBuilder;

        specialinvoke r192.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r192.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke r192.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r191);

        $r85 = virtualinvoke r192.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r85);

     label098:
        goto label097;

     label099:
        r193 = new java.lang.StringBuilder;

        specialinvoke r193.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r142);

        virtualinvoke r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Full backup queue:");

        $r76 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i15 = virtualinvoke $r76.<java.util.ArrayList: int size()>();

        virtualinvoke r193.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r78 = virtualinvoke r193.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r78);

        $r79 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        r194 = virtualinvoke $r79.<java.util.ArrayList: java.util.Iterator iterator()>();

     label100:
        $z6 = interfaceinvoke r194.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label102;

        $r80 = interfaceinvoke r194.<java.util.Iterator: java.lang.Object next()>();

        r195 = (com.android.server.backup.fullbackup.FullBackupEntry) $r80;

        virtualinvoke r141.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $l16 = r195.<com.android.server.backup.fullbackup.FullBackupEntry: long lastBackup>;

        virtualinvoke r141.<java.io.PrintWriter: void print(long)>($l16);

        virtualinvoke r141.<java.io.PrintWriter: void print(java.lang.String)>(" : ");

        $r81 = r195.<com.android.server.backup.fullbackup.FullBackupEntry: java.lang.String packageName>;

        virtualinvoke r141.<java.io.PrintWriter: void println(java.lang.String)>($r81);

     label101:
        goto label100;

     label102:
        exitmonitor r1;

     label103:
        return;

     label104:
        $r139 := @caughtexception;

     label105:
        exitmonitor r1;

     label106:
        throw $r139;

        catch java.lang.Throwable from label003 to label004 with label104;
        catch java.lang.Throwable from label006 to label007 with label104;
        catch java.lang.Throwable from label009 to label010 with label104;
        catch java.lang.Throwable from label012 to label013 with label104;
        catch java.lang.Throwable from label015 to label016 with label104;
        catch java.lang.Throwable from label016 to label017 with label104;
        catch java.lang.Throwable from label019 to label020 with label104;
        catch java.lang.Throwable from label020 to label021 with label104;
        catch java.lang.Throwable from label022 to label023 with label104;
        catch java.lang.Throwable from label024 to label025 with label104;
        catch java.lang.Throwable from label027 to label028 with label104;
        catch java.lang.Throwable from label030 to label031 with label104;
        catch java.lang.Exception from label032 to label033 with label074;
        catch java.lang.Throwable from label032 to label033 with label104;
        catch java.lang.Exception from label034 to label035 with label074;
        catch java.lang.Throwable from label034 to label035 with label104;
        catch java.lang.Exception from label036 to label037 with label074;
        catch java.lang.Throwable from label036 to label037 with label104;
        catch java.lang.Exception from label038 to label039 with label074;
        catch java.lang.Throwable from label038 to label039 with label104;
        catch java.lang.Exception from label040 to label041 with label074;
        catch java.lang.Throwable from label040 to label041 with label104;
        catch java.lang.Exception from label042 to label043 with label074;
        catch java.lang.Throwable from label042 to label043 with label104;
        catch java.lang.Exception from label044 to label045 with label074;
        catch java.lang.Throwable from label044 to label045 with label104;
        catch java.lang.Exception from label046 to label047 with label074;
        catch java.lang.Throwable from label046 to label047 with label104;
        catch java.lang.Exception from label048 to label049 with label074;
        catch java.lang.Throwable from label048 to label049 with label104;
        catch java.lang.Exception from label050 to label051 with label074;
        catch java.lang.Throwable from label050 to label051 with label104;
        catch java.lang.Exception from label052 to label053 with label074;
        catch java.lang.Throwable from label052 to label053 with label104;
        catch java.lang.Exception from label054 to label055 with label074;
        catch java.lang.Throwable from label054 to label055 with label104;
        catch java.lang.Exception from label056 to label057 with label074;
        catch java.lang.Throwable from label056 to label057 with label104;
        catch java.lang.Exception from label058 to label059 with label074;
        catch java.lang.Throwable from label058 to label059 with label104;
        catch java.lang.Exception from label061 to label062 with label074;
        catch java.lang.Throwable from label061 to label062 with label104;
        catch java.lang.Exception from label063 to label064 with label074;
        catch java.lang.Throwable from label063 to label064 with label104;
        catch java.lang.Exception from label065 to label066 with label074;
        catch java.lang.Throwable from label065 to label066 with label104;
        catch java.lang.Exception from label067 to label068 with label074;
        catch java.lang.Throwable from label067 to label068 with label104;
        catch java.lang.Exception from label069 to label070 with label074;
        catch java.lang.Throwable from label069 to label070 with label104;
        catch java.lang.Exception from label070 to label071 with label072;
        catch java.lang.Throwable from label070 to label071 with label104;
        catch java.lang.Throwable from label075 to label076 with label104;
        catch java.lang.Throwable from label077 to label078 with label104;
        catch java.lang.Throwable from label078 to label079 with label104;
        catch java.lang.Throwable from label080 to label081 with label104;
        catch java.lang.Throwable from label083 to label084 with label104;
        catch java.lang.Throwable from label084 to label085 with label104;
        catch java.lang.Throwable from label087 to label088 with label104;
        catch java.lang.Throwable from label089 to label090 with label104;
        catch java.lang.Throwable from label090 to label091 with label104;
        catch java.lang.Throwable from label091 to label092 with label104;
        catch java.lang.Throwable from label093 to label094 with label104;
        catch java.lang.Throwable from label094 to label095 with label104;
        catch java.lang.Throwable from label096 to label097 with label104;
        catch java.lang.Throwable from label097 to label098 with label104;
        catch java.lang.Throwable from label099 to label100 with label104;
        catch java.lang.Throwable from label100 to label101 with label104;
        catch java.lang.Throwable from label102 to label103 with label104;
        catch java.lang.Throwable from label105 to label106 with label104;
    }

    private boolean fullBackupAllowable(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i3, $i5;
        com.android.server.backup.TransportManager $r1, $r2;
        boolean $z0;
        java.io.File $r3, r15, r16;
        long $l1;
        byte $b2;
        java.lang.String $r4, $r5, $r9, $r11, $r12, r13, r14;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r13 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $z0 = virtualinvoke $r1.<com.android.server.backup.TransportManager: boolean isTransportRegistered(java.lang.String)>(r13);

        if $z0 != 0 goto label1;

        $i5 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i5, "Transport not registered; full data backup not performed");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r5);

        return 0;

     label1:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r14 = virtualinvoke $r2.<com.android.server.backup.TransportManager: java.lang.String getTransportDirName(java.lang.String)>(r13);

        r15 = new java.io.File;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r14);

        r16 = new java.io.File;

        specialinvoke r16.<java.io.File: void <init>(java.io.File,java.lang.String)>(r15, "@pm@");

        $l1 = virtualinvoke r16.<java.io.File: long length()>();

        $b2 = $l1 cmp 0L;

        if $b2 > 0 goto label3;

        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i3, "Full backup requested but dataset not yet initialized");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r4);

     label2:
        return 0;

     label3:
        return 1;

     label4:
        $r6 := @caughtexception;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get transport name: ");

        $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r11);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

        return 0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private java.io.RandomAccessFile getAncestralSerialNumberFile() throws java.io.FileNotFoundException
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.File $r2, $r4, $r5, $r6;
        java.io.RandomAccessFile $r3;
        int $i0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mAncestralSerialNumberFile>;

        if $r2 != null goto label1;

        $r5 = new java.io.File;

        $i0 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: int getUserId()>();

        $r6 = staticinvoke <com.android.server.backup.UserBackupManagerFiles: java.io.File getBaseStateDir(int)>($i0);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "serial_id");

        r0.<com.android.server.backup.UserBackupManagerService: java.io.File mAncestralSerialNumberFile> = $r5;

        staticinvoke <com.android.server.backup.utils.FileUtils: java.io.File createNewFile(java.io.File)>($r5);

     label1:
        $r3 = new java.io.RandomAccessFile;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mAncestralSerialNumberFile>;

        specialinvoke $r3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r4, "rwd");

        return $r3;
    }

    private int getMessageIdForOperationType(int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r6;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMessageIdForOperationType called on invalid operation type: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i1, $r5);

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

        return -1;

     label1:
        return 18;

     label2:
        return 17;
    }

    public static boolean getSetupCompleteSettingForUser(android.content.Context, int)
    {
        int i0, $i1;
        android.content.Context r0;
        android.content.ContentResolver r1;
        boolean z0;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_setup_complete", 0, i0);

        if $i1 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    private void initPackageTracking()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.FileInputStream r1;
        int i0, $i1, $i4, $i6, i8, $i9, $i10;
        java.io.File $r2, $r3, $r4, $r24;
        long $l2, $l3;
        java.util.Set $r7;
        java.lang.Throwable $r8, $r10, $r11, $r12, $r13;
        java.lang.String $r9, $r14, r18;
        java.io.DataInputStream r15;
        java.io.BufferedInputStream r16;
        java.util.HashSet r17;
        com.android.server.backup.ProcessedPackagesJournal $r23;
        java.lang.Object r26;
        java.util.ArrayList $r27;
        android.content.IntentFilter $r28, $r33;
        android.content.Context $r30, $r35;
        android.content.BroadcastReceiver $r31, $r36;
        android.os.UserHandle $r32, $r37;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r2 = new java.io.File;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "ancestral");

        r0.<com.android.server.backup.UserBackupManagerService: java.io.File mTokenFile> = $r2;

     label01:
        r15 = new java.io.DataInputStream;

        r16 = new java.io.BufferedInputStream;

        r1 = new java.io.FileInputStream;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mTokenFile>;

        specialinvoke r1.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        specialinvoke r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);

        specialinvoke r15.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r16);

     label02:
        $i1 = virtualinvoke r15.<java.io.DataInputStream: int readInt()>();

        if $i1 != 1 goto label09;

        $l2 = virtualinvoke r15.<java.io.DataInputStream: long readLong()>();

        r0.<com.android.server.backup.UserBackupManagerService: long mAncestralToken> = $l2;

        $l3 = virtualinvoke r15.<java.io.DataInputStream: long readLong()>();

        r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken> = $l3;

        i0 = virtualinvoke r15.<java.io.DataInputStream: int readInt()>();

     label03:
        if i0 < 0 goto label09;

     label04:
        r17 = new java.util.HashSet;

        specialinvoke r17.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages> = r17;

     label05:
        i8 = 0;

     label06:
        if i8 >= i0 goto label09;

     label07:
        r18 = virtualinvoke r15.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r18);

     label08:
        i8 = i8 + 1;

        goto label06;

     label09:
        virtualinvoke r15.<java.io.DataInputStream: void close()>();

     label10:
        goto label19;

     label11:
        $r11 := @caughtexception;

     label12:
        virtualinvoke r15.<java.io.DataInputStream: void close()>();

     label13:
        goto label16;

     label14:
        $r12 := @caughtexception;

     label15:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label16:
        throw $r11;

     label17:
        $r8 := @caughtexception;

        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r9 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i4, "Unable to read token file");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r9, $r8);

        goto label19;

     label18:
        $r13 := @caughtexception;

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i6, "No ancestral data");

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

     label19:
        $r23 = new com.android.server.backup.ProcessedPackagesJournal;

        $r24 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r23.<com.android.server.backup.ProcessedPackagesJournal: void <init>(java.io.File)>($r24);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.ProcessedPackagesJournal mProcessedPackagesJournal> = $r23;

        virtualinvoke $r23.<com.android.server.backup.ProcessedPackagesJournal: void init()>();

        r26 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r26;

     label20:
        $r27 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList readFullBackupSchedule()>();

        r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue> = $r27;

        exitmonitor r26;

     label21:
        $r28 = new android.content.IntentFilter;

        specialinvoke $r28.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r28.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke $r28.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r28.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke $r28.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r30 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r31 = r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mPackageTrackingReceiver>;

        $i9 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r32 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i9);

        virtualinvoke $r30.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r31, $r32, $r28, null, null);

        $r33 = new android.content.IntentFilter;

        specialinvoke $r33.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r33.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE");

        virtualinvoke $r33.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE");

        $r35 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r36 = r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mPackageTrackingReceiver>;

        $i10 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r37 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i10);

        virtualinvoke $r35.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r36, $r37, $r33, null, null);

        return;

     label22:
        $r10 := @caughtexception;

     label23:
        exitmonitor r26;

     label24:
        throw $r10;

        catch java.io.FileNotFoundException from label01 to label02 with label18;
        catch java.io.IOException from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.io.FileNotFoundException from label09 to label10 with label18;
        catch java.io.IOException from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.io.FileNotFoundException from label15 to label16 with label18;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.FileNotFoundException from label16 to label17 with label18;
        catch java.io.IOException from label16 to label17 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public static void lambda$9cuIH_XloqtNByp_6hXeGaVars8(com.android.server.backup.UserBackupManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void onTransportRegistered(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public static void lambda$_gNqJq9Ygtc0ZVwYhCSDKCUKrKY(com.android.server.backup.UserBackupManagerService)
    {
        com.android.server.backup.UserBackupManagerService r0;

        r0 := @parameter0: com.android.server.backup.UserBackupManagerService;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void parseLeftoverJournals()>();

        return;
    }

    private void onTransportRegistered(java.lang.String, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0, l1, $l3, $l5, $l6;
        int i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r10, $r11, r19, r20;
        java.io.File $r12, $r13, $r14;
        boolean $z1;
        android.util.ArraySet $r15;
        android.app.AlarmManager $r16;
        android.app.PendingIntent $r17;
        java.lang.Throwable $r18;
        java.lang.Object r22;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r19 := @parameter0: java.lang.String;

        r20 := @parameter1: java.lang.String;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l1 = r0.<com.android.server.backup.UserBackupManagerService: long mRegisterTransportsRequestedTime>;

        i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" registered ");

        $l3 = l0 - l1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms after first request (delay = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(3000L);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms)");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i2, $r10);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        $r12 = new java.io.File;

        $r13 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, r20);

        virtualinvoke $r12.<java.io.File: boolean mkdirs()>();

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "_need_init_");

        $z1 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label6;

        r22 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r22;

     label1:
        $r15 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        virtualinvoke $r15.<android.util.ArraySet: boolean add(java.lang.Object)>(r19);

        $r16 = r0.<com.android.server.backup.UserBackupManagerService: android.app.AlarmManager mAlarmManager>;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l5 + 60000L;

        $r17 = r0.<com.android.server.backup.UserBackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r16.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(0, $l6, $r17);

        exitmonitor r22;

     label2:
        goto label6;

     label3:
        $r18 := @caughtexception;

     label4:
        exitmonitor r22;

     label5:
        throw $r18;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void parseLeftoverJournals()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.Iterator r1;
        com.android.server.backup.DataChangedJournal r2, $r7;
        int i0;
        java.io.File $r4;
        java.util.ArrayList $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.lang.Throwable $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r12, $r13;
        com.android.server.backup._$$Lambda$UserBackupManagerService$W51Aw9Pu9AOsFVYQgIZy31INmwI r14;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mJournalDir>;

        $r5 = staticinvoke <com.android.server.backup.DataChangedJournal: java.util.ArrayList listJournals(java.io.File)>($r4);

        r1 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.backup.DataChangedJournal) $r6;

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal>;

        $z1 = virtualinvoke r2.<com.android.server.backup.DataChangedJournal: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label5;

     label2:
        r14 = new com.android.server.backup._$$Lambda$UserBackupManagerService$W51Aw9Pu9AOsFVYQgIZy31INmwI;

        specialinvoke r14.<com.android.server.backup._$$Lambda$UserBackupManagerService$W51Aw9Pu9AOsFVYQgIZy31INmwI: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        virtualinvoke r2.<com.android.server.backup.DataChangedJournal: void forEach(java.util.function.Consumer)>(r14);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r12);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r13, $r8);

     label5:
        goto label1;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private java.util.ArrayList readFullBackupSchedule()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.FileInputStream r1;
        java.io.BufferedInputStream r2;
        java.io.DataInputStream r3;
        java.util.HashSet r4;
        long l0;
        boolean z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z16, z20, z26, z27, z28, z29, z30, z31, z32, z33;
        android.content.pm.PackageInfo r5, r58, r81;
        int $i1, $i2, $i3, $i4, $i6, $i9, i11, i12, i13, i14, i15, i16, i17;
        android.content.pm.PackageManager $r6, r57;
        java.io.File $r7, $r13, $r36;
        java.util.ArrayList $r8, r51, r55, r78;
        java.lang.Object $r9, $r14;
        android.content.pm.ApplicationInfo $r10, $r15, $r23;
        com.android.server.backup.fullbackup.FullBackupEntry $r11, r59, r71;
        java.lang.String $r12, $r16, $r17, $r21, $r22, $r26, $r27, $r35, r56, $r68, $r69;
        android.content.pm.PackageManager$NameNotFoundException $r28, $r33, $r40, $r44, $r46, $r47;
        java.lang.Throwable $r32, $r37, $r38, $r39, $r41, $r43, $r45, $r48, $r49, $r50, r54, r73, r75;
        java.lang.Exception $r34, $r42, r77;
        java.util.List r52;
        java.lang.StringBuilder r53, r62, r67;
        java.util.Iterator r70, r80;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z20 = 0;

        r51 = null;

        $r6 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r52 = staticinvoke <com.android.server.backup.PackageManagerBackupAgent: java.util.List getStorableApplications(android.content.pm.PackageManager,int)>($r6, $i1);

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mFullBackupScheduleFile>;

        $z5 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label110;

     label001:
        r1 = new java.io.FileInputStream;

        $r13 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mFullBackupScheduleFile>;

        specialinvoke r1.<java.io.FileInputStream: void <init>(java.io.File)>($r13);

     label002:
        r2 = new java.io.BufferedInputStream;

        specialinvoke r2.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);

     label003:
        r3 = new java.io.DataInputStream;

        specialinvoke r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

     label004:
        i11 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();

     label005:
        if i11 == 1 goto label025;

        z26 = 0;

     label006:
        i12 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

     label007:
        z26 = 0;

     label008:
        r53 = new java.lang.StringBuilder;

     label009:
        z26 = 0;

     label010:
        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

     label011:
        z26 = 0;

     label012:
        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown backup schedule version ");

     label013:
        z26 = 0;

     label014:
        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

     label015:
        z26 = 0;

     label016:
        $r26 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i12, $r26);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r27);

     label017:
        z27 = 0;

     label018:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label019:
        z28 = 0;

     label020:
        virtualinvoke r2.<java.io.BufferedInputStream: void close()>();

     label021:
        z29 = 0;

     label022:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label023:
        return null;

     label024:
        $r32 := @caughtexception;

        r54 = $r32;

        z30 = z26;

        goto label085;

     label025:
        i13 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();

     label026:
        r55 = new java.util.ArrayList;

     label027:
        specialinvoke r55.<java.util.ArrayList: void <init>(int)>(i13);

     label028:
        r4 = new java.util.HashSet;

     label029:
        specialinvoke r4.<java.util.HashSet: void <init>(int)>(i13);

     label030:
        i14 = 0;

     label031:
        if i14 >= i13 goto label054;

     label032:
        r56 = virtualinvoke r3.<java.io.DataInputStream: java.lang.String readUTF()>();

     label033:
        l0 = virtualinvoke r3.<java.io.DataInputStream: long readLong()>();

     label034:
        virtualinvoke r4.<java.util.HashSet: boolean add(java.lang.Object)>(r56);

     label035:
        r57 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

     label036:
        i15 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

     label037:
        r58 = virtualinvoke r57.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r56, 0, i15);

        z4 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appGetsFullBackup(android.content.pm.PackageInfo)>(r58);

     label038:
        if z4 == 0 goto label045;

     label039:
        $r23 = r58.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $z16 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo,int)>($r23, $i6);

        if $z16 == 0 goto label043;

        r59 = new com.android.server.backup.fullbackup.FullBackupEntry;

     label040:
        specialinvoke r59.<com.android.server.backup.fullbackup.FullBackupEntry: void <init>(java.lang.String,long)>(r56, l0);

        virtualinvoke r55.<java.util.ArrayList: boolean add(java.lang.Object)>(r59);

     label041:
        goto label047;

     label042:
        $r44 := @caughtexception;

        goto label052;

     label043:
        goto label045;

     label044:
        $r28 := @caughtexception;

        goto label052;

     label045:
        i16 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

     label046:
        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer eligible for full backup");

        $r21 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i16, $r21);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r22);

     label047:
        goto label053;

     label048:
        $r40 := @caughtexception;

        goto label052;

     label049:
        $r46 := @caughtexception;

        goto label052;

     label050:
        $r47 := @caughtexception;

        goto label052;

     label051:
        $r33 := @caughtexception;

     label052:
        i17 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not installed; dropping from full backup");

        $r68 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        $r69 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i17, $r68);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r69);

     label053:
        i14 = i14 + 1;

        goto label031;

     label054:
        r70 = interfaceinvoke r52.<java.util.List: java.util.Iterator iterator()>();

     label055:
        z31 = 0;

     label056:
        z26 = z31;

     label057:
        $z10 = interfaceinvoke r70.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label074;

     label058:
        z26 = z31;

     label059:
        $r14 = interfaceinvoke r70.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.PackageInfo) $r14;

     label060:
        z26 = z31;

        z32 = z31;

     label061:
        $z11 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appGetsFullBackup(android.content.pm.PackageInfo)>(r5);

        if $z11 == 0 goto label073;

     label062:
        z26 = z31;

        z32 = z31;

     label063:
        $r15 = r5.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $z12 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo,int)>($r15, $i4);

        if $z12 == 0 goto label073;

     label064:
        z26 = z31;

        z32 = z31;

     label065:
        $r16 = r5.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z13 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>($r16);

        if $z13 != 0 goto label073;

     label066:
        z26 = z31;

     label067:
        r71 = new com.android.server.backup.fullbackup.FullBackupEntry;

     label068:
        z26 = z31;

     label069:
        $r17 = r5.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke r71.<com.android.server.backup.fullbackup.FullBackupEntry: void <init>(java.lang.String,long)>($r17, 0L);

     label070:
        z26 = z31;

     label071:
        virtualinvoke r55.<java.util.ArrayList: boolean add(java.lang.Object)>(r71);

     label072:
        z32 = 1;

     label073:
        z31 = z32;

        goto label056;

     label074:
        z26 = z31;

     label075:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r55);

     label076:
        z27 = z31;

     label077:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label078:
        z28 = z31;

     label079:
        virtualinvoke r2.<java.io.BufferedInputStream: void close()>();

     label080:
        z29 = z31;

     label081:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label082:
        r51 = r55;

        goto label111;

     label083:
        $r41 := @caughtexception;

        r54 = $r41;

        z30 = 0;

        goto label085;

     label084:
        $r39 := @caughtexception;

        r54 = $r39;

        z30 = 0;

     label085:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label086:
        goto label089;

     label087:
        $r38 := @caughtexception;

        z27 = z30;

     label088:
        virtualinvoke r54.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r38);

     label089:
        z27 = z30;

     label090:
        throw r54;

     label091:
        $r45 := @caughtexception;

        r73 = $r45;

        z20 = z27;

        goto label093;

     label092:
        $r48 := @caughtexception;

        r73 = $r48;

     label093:
        virtualinvoke r2.<java.io.BufferedInputStream: void close()>();

     label094:
        goto label097;

     label095:
        $r43 := @caughtexception;

        z28 = z20;

     label096:
        virtualinvoke r73.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r43);

     label097:
        z28 = z20;

     label098:
        throw r73;

     label099:
        $r37 := @caughtexception;

        r75 = $r37;

        z33 = z28;

        goto label101;

     label100:
        $r50 := @caughtexception;

        r75 = $r50;

        z33 = 0;

     label101:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label102:
        goto label105;

     label103:
        $r49 := @caughtexception;

        z29 = z33;

     label104:
        virtualinvoke r75.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r49);

     label105:
        z29 = z33;

     label106:
        throw r75;

     label107:
        $r34 := @caughtexception;

        r77 = $r34;

        z31 = z29;

        goto label109;

     label108:
        $r42 := @caughtexception;

        r77 = $r42;

        z31 = 0;

     label109:
        $i9 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r35 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i9, "Unable to read backup schedule");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r35, r77);

        $r36 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mFullBackupScheduleFile>;

        virtualinvoke $r36.<java.io.File: boolean delete()>();

        r51 = null;

        goto label111;

     label110:
        z31 = 0;

     label111:
        r78 = r51;

        if r51 != null goto label114;

        $r8 = new java.util.ArrayList;

        $i2 = interfaceinvoke r52.<java.util.List: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        r80 = interfaceinvoke r52.<java.util.List: java.util.Iterator iterator()>();

     label112:
        z31 = 1;

        r78 = $r8;

        $z6 = interfaceinvoke r80.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label114;

        $r9 = interfaceinvoke r80.<java.util.Iterator: java.lang.Object next()>();

        r81 = (android.content.pm.PackageInfo) $r9;

        $z7 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appGetsFullBackup(android.content.pm.PackageInfo)>(r81);

        if $z7 == 0 goto label113;

        $r10 = r81.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $z8 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo,int)>($r10, $i3);

        if $z8 == 0 goto label113;

        $r11 = new com.android.server.backup.fullbackup.FullBackupEntry;

        $r12 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke $r11.<com.android.server.backup.fullbackup.FullBackupEntry: void <init>(java.lang.String,long)>($r12, 0L);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label113;

     label113:
        goto label112;

     label114:
        if z31 == 0 goto label115;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void writeFullBackupScheduleAsync()>();

     label115:
        return r78;

        catch java.lang.Exception from label001 to label002 with label108;
        catch java.lang.Throwable from label002 to label003 with label100;
        catch java.lang.Throwable from label003 to label004 with label092;
        catch java.lang.Throwable from label004 to label005 with label084;
        catch java.lang.Throwable from label006 to label007 with label024;
        catch java.lang.Throwable from label008 to label009 with label024;
        catch java.lang.Throwable from label010 to label011 with label024;
        catch java.lang.Throwable from label012 to label013 with label024;
        catch java.lang.Throwable from label014 to label015 with label024;
        catch java.lang.Throwable from label016 to label017 with label024;
        catch java.lang.Throwable from label018 to label019 with label091;
        catch java.lang.Throwable from label020 to label021 with label099;
        catch java.lang.Exception from label022 to label023 with label107;
        catch java.lang.Throwable from label025 to label026 with label084;
        catch java.lang.Throwable from label026 to label027 with label084;
        catch java.lang.Throwable from label027 to label028 with label084;
        catch java.lang.Throwable from label028 to label029 with label084;
        catch java.lang.Throwable from label029 to label030 with label084;
        catch java.lang.Throwable from label032 to label033 with label084;
        catch java.lang.Throwable from label033 to label034 with label084;
        catch java.lang.Throwable from label034 to label035 with label084;
        catch android.content.pm.PackageManager$NameNotFoundException from label035 to label036 with label051;
        catch java.lang.Throwable from label035 to label036 with label084;
        catch android.content.pm.PackageManager$NameNotFoundException from label036 to label037 with label051;
        catch java.lang.Throwable from label036 to label037 with label084;
        catch android.content.pm.PackageManager$NameNotFoundException from label037 to label038 with label050;
        catch java.lang.Throwable from label037 to label038 with label083;
        catch android.content.pm.PackageManager$NameNotFoundException from label039 to label040 with label044;
        catch java.lang.Throwable from label039 to label040 with label083;
        catch android.content.pm.PackageManager$NameNotFoundException from label040 to label041 with label042;
        catch java.lang.Throwable from label040 to label041 with label083;
        catch android.content.pm.PackageManager$NameNotFoundException from label045 to label046 with label049;
        catch java.lang.Throwable from label045 to label046 with label083;
        catch android.content.pm.PackageManager$NameNotFoundException from label046 to label047 with label048;
        catch java.lang.Throwable from label046 to label047 with label083;
        catch java.lang.Throwable from label052 to label053 with label083;
        catch java.lang.Throwable from label054 to label055 with label083;
        catch java.lang.Throwable from label057 to label058 with label024;
        catch java.lang.Throwable from label059 to label060 with label024;
        catch java.lang.Throwable from label061 to label062 with label024;
        catch java.lang.Throwable from label063 to label064 with label024;
        catch java.lang.Throwable from label065 to label066 with label024;
        catch java.lang.Throwable from label067 to label068 with label024;
        catch java.lang.Throwable from label069 to label070 with label024;
        catch java.lang.Throwable from label071 to label072 with label024;
        catch java.lang.Throwable from label075 to label076 with label024;
        catch java.lang.Throwable from label077 to label078 with label091;
        catch java.lang.Throwable from label079 to label080 with label099;
        catch java.lang.Exception from label081 to label082 with label107;
        catch java.lang.Throwable from label085 to label086 with label087;
        catch java.lang.Throwable from label088 to label089 with label091;
        catch java.lang.Throwable from label090 to label091 with label091;
        catch java.lang.Throwable from label093 to label094 with label095;
        catch java.lang.Throwable from label096 to label097 with label099;
        catch java.lang.Throwable from label098 to label099 with label099;
        catch java.lang.Throwable from label101 to label102 with label103;
        catch java.lang.Exception from label104 to label105 with label107;
        catch java.lang.Exception from label106 to label107 with label107;
    }

    private void removePackageFromSetLocked(java.util.HashSet, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.HashSet r1;
        java.lang.String r2;
        boolean $z0;
        java.util.HashMap $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.util.HashSet;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.util.HashSet: boolean remove(java.lang.Object)>(r2);

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: java.util.HashMap mPendingBackups>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    private void removePackageParticipantsLocked(java.lang.String[], int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String[] r1;
        int i0, i1, $i2, i4;
        java.lang.String r2, $r7;
        java.util.HashSet r3;
        android.util.SparseArray $r4, $r6;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r7 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i2, "removePackageParticipants with null list");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r7);

        return;

     label1:
        i1 = lengthof r1;

        i4 = 0;

     label2:
        if i4 >= i1 goto label4;

        r2 = r1[i4];

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (java.util.HashSet) $r5;

        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void removePackageFromSetLocked(java.util.HashSet,java.lang.String)>(r3, r2);

        $z1 = virtualinvoke r3.<java.util.HashSet: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        virtualinvoke $r6.<android.util.SparseArray: void remove(int)>(i0);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return;
    }

    private void startConfirmationTimeout(int, com.android.server.backup.params.AdbParams)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0;
        com.android.server.backup.internal.BackupHandler $r1, $r2;
        com.android.server.backup.params.AdbParams r3;
        android.os.Message r4;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: com.android.server.backup.params.AdbParams;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r4 = virtualinvoke $r1.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(9, i0, 0, r3);

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r2.<com.android.server.backup.internal.BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r4, 60000L);

        return;
    }

    private boolean startConfirmationUi(int, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0;
        android.content.Intent r1;
        android.os.UserHandle $r5;
        android.content.Context $r6;
        android.content.ActivityNotFoundException $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

     label1:
        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(java.lang.String)>(r8);

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.backupconfirm", "com.android.backupconfirm.BackupRestoreConfirmation");

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("conftoken", i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(536870912);

        $r6 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r6.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label2:
        return 1;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private void updateStateForTransport(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, $r9, $r10, $r18, $r19;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, i4, i5;
        com.android.server.backup.TransportManager $r4, $r12;
        java.lang.StringBuilder $r5, $r14;
        com.android.internal.backup.IBackupTransport $r11;
        long $l2;
        java.lang.Exception $r13;
        com.android.server.backup.transport.TransportClient r20;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r3, "backup_transport", r1, $i0);

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r20 = virtualinvoke $r4.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getTransportClient(java.lang.String,java.lang.String)>(r1, "BMS.updateStateForTransport()");

        if r20 == null goto label5;

     label1:
        $r11 = virtualinvoke r20.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport connectOrThrow(java.lang.String)>("BMS.updateStateForTransport()");

        $l2 = interfaceinvoke $r11.<com.android.internal.backup.IBackupTransport: long getCurrentRestoreSet()>();

        r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken> = $l2;

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken> = 0L;

        i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not available: current token = 0");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i4, $r18);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

     label4:
        $r12 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r12.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r20, "BMS.updateStateForTransport()");

        goto label6;

     label5:
        i5 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered: current token = 0");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i5, $r9);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken> = 0L;

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void waitForCompletion(com.android.server.backup.params.AdbParams)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r3, $r4;
        boolean z0;
        java.lang.Throwable $r5, $r6;
        com.android.server.backup.params.AdbParams r7;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r7 := @parameter0: com.android.server.backup.params.AdbParams;

        r1 = r7.<com.android.server.backup.params.AdbParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        entermonitor r1;

     label01:
        $r3 = r7.<com.android.server.backup.params.AdbParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label02:
        if z0 != 0 goto label07;

     label03:
        $r4 = r7.<com.android.server.backup.params.AdbParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r4.<java.lang.Object: void wait()>();

     label04:
        goto label06;

     label05:
        $r6 := @caughtexception;

     label06:
        goto label01;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void writeFullBackupScheduleAsync()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Runnable $r1, $r3;
        com.android.server.backup.internal.BackupHandler $r2, $r4;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Runnable mFullBackupScheduleWriter>;

        virtualinvoke $r2.<com.android.server.backup.internal.BackupHandler: void removeCallbacks(java.lang.Runnable)>($r1);

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Runnable mFullBackupScheduleWriter>;

        virtualinvoke $r4.<com.android.server.backup.internal.BackupHandler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    private void writeToJournalLocked(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, $r13, $r14;
        int i0;
        com.android.server.backup.DataChangedJournal $r4, $r5, $r7;
        java.io.File $r6;
        java.lang.Throwable $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal>;

        if $r4 != null goto label2;

        $r6 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mJournalDir>;

        $r7 = staticinvoke <com.android.server.backup.DataChangedJournal: com.android.server.backup.DataChangedJournal newJournal(java.io.File)>($r6);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal> = $r7;

     label2:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal>;

        virtualinvoke $r5.<com.android.server.backup.DataChangedJournal: void addPackage(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t write ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup journal");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r13);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r14, $r8);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal> = null;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public void acknowledgeAdbBackupOrRestore(int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0, $z1;
        java.lang.String r1, $r9, $r10, $r14, $r17, r23;
        android.app.backup.IFullBackupRestoreObserver r2;
        int i0, $i3, $i5, i7;
        long l1;
        com.android.server.backup.params.AdbParams r3;
        java.lang.StringBuilder $r4;
        android.content.Context $r11;
        android.util.SparseArray $r12, $r16, r25;
        java.lang.Object $r13;
        com.android.server.backup.internal.BackupHandler $r15, $r19, $r20;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r18;
        java.lang.Throwable $r21, $r22;
        byte b8;
        android.os.Message r26;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i7 := @parameter0: int;

        z0 := @parameter1: boolean;

        r23 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: android.app.backup.IFullBackupRestoreObserver;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acknowledgeAdbBackupOrRestore : token=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allow=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        $r11 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "acknowledgeAdbBackupOrRestore");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r25 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        entermonitor r25;

     label02:
        $r12 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object get(int)>(i7);

        r3 = (com.android.server.backup.params.AdbParams) $r13;

     label03:
        if r3 == null goto label13;

     label04:
        $r15 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r15.<com.android.server.backup.internal.BackupHandler: void removeMessages(int,java.lang.Object)>(9, r3);

        $r16 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        virtualinvoke $r16.<android.util.SparseArray: void delete(int)>(i7);

     label05:
        if z0 == 0 goto label11;

     label06:
        $z1 = r3 instanceof com.android.server.backup.params.AdbBackupParams;

        if $z1 == 0 goto label08;

     label07:
        b8 = 2;

        goto label09;

     label08:
        b8 = 10;

     label09:
        r3.<com.android.server.backup.params.AdbParams: android.app.backup.IFullBackupRestoreObserver observer> = r2;

        r3.<com.android.server.backup.params.AdbParams: java.lang.String curPassword> = r23;

        r3.<com.android.server.backup.params.AdbParams: java.lang.String encryptPassword> = r1;

        $r18 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r18.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        $r19 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r26 = virtualinvoke $r19.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(b8, r3);

        $r20 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r20.<com.android.server.backup.internal.BackupHandler: boolean sendMessage(android.os.Message)>(r26);

     label10:
        goto label14;

     label11:
        $i5 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r17 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i5, "User rejected full backup/restore operation");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void signalAdbBackupRestoreCompletion(com.android.server.backup.params.AdbParams)>(r3);

     label12:
        goto label14;

     label13:
        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i3, "Attempted to ack full backup/restore with invalid token");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

     label14:
        exitmonitor r25;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label16:
        $r21 := @caughtexception;

     label17:
        exitmonitor r25;

     label18:
        throw $r21;

     label19:
        $r22 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
    }

    public void adbBackup(android.os.ParcelFileDescriptor, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, java.lang.String[])
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8, $z9;
        long l0, $l7;
        int i1, $i2, $i4, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i24, i27, i28, i29, i30, i31, i32;
        android.content.Context $r1;
        java.lang.String $r17, $r18, $r19, $r23, $r24, $r26, $r27, $r28, $r30, $r31, $r32, $r37, $r39, $r40, $r44, $r46, $r47, $r51, $r53, $r54, $r55, $r61, $r63, $r64;
        android.util.SparseArray $r20, $r29, r71;
        android.os.PowerManager $r25;
        java.lang.Throwable $r34, $r41, $r48, $r56, $r57, $r58;
        android.os.ParcelFileDescriptor r65;
        java.lang.String[] r66;
        java.lang.IllegalArgumentException r81;
        java.lang.StringBuilder r82, r83, r85, r86, r87, r88;
        com.android.server.backup.params.AdbBackupParams r84;
        java.lang.IllegalStateException r89;
        java.io.IOException r90, r91, r92, r93;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r65 := @parameter0: android.os.ParcelFileDescriptor;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        z4 := @parameter5: boolean;

        z5 := @parameter6: boolean;

        z6 := @parameter7: boolean;

        z7 := @parameter8: boolean;

        r66 := @parameter9: java.lang.String[];

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "adbBackup");

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 != 0 goto label28;

        if z4 != 0 goto label02;

        if z2 != 0 goto label02;

        if r66 == null goto label01;

        $i20 = lengthof r66;

        if $i20 == 0 goto label01;

        goto label02;

     label01:
        r81 = new java.lang.IllegalArgumentException;

        specialinvoke r81.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Backup requested but neither shared nor any apps named");

        throw r81;

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $z9 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z9 != 0 goto label08;

        $i16 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r31 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i16, "Backup not supported before setup");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r31);

     label04:
        virtualinvoke r65.<android.os.ParcelFileDescriptor: void close()>();

     label05:
        goto label07;

     label06:
        $r41 := @caughtexception;

        i27 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r82 = new java.lang.StringBuilder;

        specialinvoke r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO error closing output for adb backup: ");

        r90 = (java.io.IOException) $r41;

        $r44 = virtualinvoke r90.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke r82.<java.lang.StringBuilder: java.lang.String toString()>();

        $r47 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i27, $r46);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r47);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i18 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r32 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i18, "Adb backup processing complete.");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r32);

        return;

     label08:
        i28 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r83 = new java.lang.StringBuilder;

        specialinvoke r83.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requesting backup: apks=");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obb=");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shared=");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" all=");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" system=");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z5);

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" includekeyvalue=");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z7);

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pkgs=");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r66);

        $r17 = virtualinvoke r83.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i28, $r17);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r18);

        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r19 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i4, "Beginning adb backup...");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

        r84 = new com.android.server.backup.params.AdbBackupParams;

        specialinvoke r84.<com.android.server.backup.params.AdbBackupParams: void <init>(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>(r65, z0, z1, z2, z3, z4, z5, z6, z7, r66);

        i29 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: int generateRandomIntegerToken()>();

        r71 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        entermonitor r71;

     label09:
        $r20 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(i29, r84);

        exitmonitor r71;

     label10:
        i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting backup confirmation UI, token=");

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r23 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i1, $r23);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r24);

        $z8 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean startConfirmationUi(int,java.lang.String)>(i29, "fullback");

        if $z8 != 0 goto label15;

        $i12 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r28 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i12, "Unable to launch backup confirmation UI");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r28);

        $r29 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        virtualinvoke $r29.<android.util.SparseArray: void delete(int)>(i29);

     label11:
        virtualinvoke r65.<android.os.ParcelFileDescriptor: void close()>();

     label12:
        goto label14;

     label13:
        $r34 := @caughtexception;

        i30 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO error closing output for adb backup: ");

        r91 = (java.io.IOException) $r34;

        $r37 = virtualinvoke r91.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i30, $r39);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r40);

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i14 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r30 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i14, "Adb backup processing complete.");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r30);

        return;

     label15:
        $r25 = r0.<com.android.server.backup.UserBackupManagerService: android.os.PowerManager mPowerManager>;

        $l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r25.<android.os.PowerManager: void userActivity(long,int,int)>($l7, 0, 0);

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void startConfirmationTimeout(int,com.android.server.backup.params.AdbParams)>(i29, r84);

        $i8 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r26 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i8, "Waiting for backup completion...");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r26);

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void waitForCompletion(com.android.server.backup.params.AdbParams)>(r84);

     label16:
        virtualinvoke r65.<android.os.ParcelFileDescriptor: void close()>();

     label17:
        goto label19;

     label18:
        $r58 := @caughtexception;

        i31 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r87 = new java.lang.StringBuilder;

        specialinvoke r87.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO error closing output for adb backup: ");

        r92 = (java.io.IOException) $r58;

        $r61 = virtualinvoke r92.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke r87.<java.lang.StringBuilder: java.lang.String toString()>();

        $r64 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i31, $r63);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r64);

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i10 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r27 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i10, "Adb backup processing complete.");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r27);

        return;

     label20:
        $r56 := @caughtexception;

     label21:
        exitmonitor r71;

     label22:
        throw $r56;

     label23:
        $r57 := @caughtexception;

     label24:
        virtualinvoke r65.<android.os.ParcelFileDescriptor: void close()>();

     label25:
        goto label27;

     label26:
        $r48 := @caughtexception;

        i32 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r88 = new java.lang.StringBuilder;

        specialinvoke r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO error closing output for adb backup: ");

        r93 = (java.io.IOException) $r48;

        $r51 = virtualinvoke r93.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke r88.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i32, $r53);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r54);

     label27:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i24 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r55 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i24, "Adb backup processing complete.");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r55);

        throw $r57;

     label28:
        r89 = new java.lang.IllegalStateException;

        specialinvoke r89.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Backup supported only for the device owner");

        throw r89;

        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label10 to label11 with label23;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.io.IOException from label24 to label25 with label26;
    }

    public void adbRestore(android.os.ParcelFileDescriptor)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0, $l6;
        int i1, $i2, $i3, $i7, $i9, $i11, $i13, $i15, $i17, $i20, i25, i26, i27, i28, i29;
        android.content.Context $r1;
        java.lang.IllegalStateException $r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r22, $r23, $r25, $r30, $r31, $r36, $r37, $r42, $r43;
        android.util.SparseArray $r4, $r13, r48;
        android.os.PowerManager $r9;
        java.lang.Throwable $r17, $r18, $r24, $r26, $r32, $r38;
        java.lang.StringBuilder $r19, $r27, $r33, $r39, r49;
        android.os.ParcelFileDescriptor r44;
        com.android.server.backup.params.AdbRestoreParams r47;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r44 := @parameter0: android.os.ParcelFileDescriptor;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "adbRestore");

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 != 0 goto label26;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z0 != 0 goto label06;

        $i15 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r15 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i15, "Full restore not permitted before setup");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

     label02:
        virtualinvoke r44.<android.os.ParcelFileDescriptor: void close()>();

     label03:
        goto label05;

     label04:
        $r26 := @caughtexception;

        i25 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after adb restore: ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i25, $r30);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r31);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i17 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r16 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i17, "adb restore processing complete.");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r16);

        return;

     label06:
        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r3 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i3, "Beginning restore...");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r3);

        r47 = new com.android.server.backup.params.AdbRestoreParams;

        specialinvoke r47.<com.android.server.backup.params.AdbRestoreParams: void <init>(android.os.ParcelFileDescriptor)>(r44);

        i1 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: int generateRandomIntegerToken()>();

        r48 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        entermonitor r48;

     label07:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r47);

        exitmonitor r48;

     label08:
        i26 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting restore confirmation UI, token=");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i26, $r7);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

        $z1 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean startConfirmationUi(int,java.lang.String)>(i1, "fullrest");

        if $z1 != 0 goto label13;

        $i11 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r12 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i11, "Unable to launch restore confirmation");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

        $r13 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        virtualinvoke $r13.<android.util.SparseArray: void delete(int)>(i1);

     label09:
        virtualinvoke r44.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        goto label12;

     label11:
        $r18 := @caughtexception;

        i27 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after adb restore: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i27, $r22);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r23);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i13 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i13, "adb restore processing complete.");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

        return;

     label13:
        $r9 = r0.<com.android.server.backup.UserBackupManagerService: android.os.PowerManager mPowerManager>;

        $l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r9.<android.os.PowerManager: void userActivity(long,int,int)>($l6, 0, 0);

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void startConfirmationTimeout(int,com.android.server.backup.params.AdbParams)>(i1, r47);

        $i7 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i7, "Waiting for restore completion...");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void waitForCompletion(com.android.server.backup.params.AdbParams)>(r47);

     label14:
        virtualinvoke r44.<android.os.ParcelFileDescriptor: void close()>();

     label15:
        goto label17;

     label16:
        $r38 := @caughtexception;

        i28 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after adb restore: ");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i28, $r42);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r43);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i9 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r11 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i9, "adb restore processing complete.");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        return;

     label18:
        $r17 := @caughtexception;

     label19:
        exitmonitor r48;

     label20:
        throw $r17;

     label21:
        $r24 := @caughtexception;

     label22:
        virtualinvoke r44.<android.os.ParcelFileDescriptor: void close()>();

     label23:
        goto label25;

     label24:
        $r32 := @caughtexception;

        i29 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after adb restore: ");

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i29, $r36);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r37);

     label25:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i20 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r25 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i20, "adb restore processing complete.");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r25);

        throw $r24;

     label26:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore supported only for the device owner");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.io.IOException from label22 to label23 with label24;
    }

    public void agentConnected(java.lang.String, android.os.IBinder)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.os.IBinder r1;
        java.lang.Object r2, $r9;
        java.lang.StringBuilder r3, r19;
        int $i0, $i1, i4, i5;
        java.lang.String $r7, $r8, $r14, $r15, r18;
        android.app.IBackupAgent $r16;
        java.lang.Throwable $r17;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r18 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.IBinder;

        r2 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mAgentConnectLock>;

        entermonitor r2;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label3;

        i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("agentConnected pkg=");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" agent=");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i4, $r14);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

        $r16 = staticinvoke <android.app.IBackupAgent$Stub: android.app.IBackupAgent asInterface(android.os.IBinder)>(r1);

        r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent> = $r16;

        r0.<com.android.server.backup.UserBackupManagerService: boolean mConnecting> = 0;

     label2:
        goto label4;

     label3:
        i5 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" claiming agent connected");

        $r7 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i5, $r7);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

     label4:
        $r9 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r9.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label5:
        return;

     label6:
        $r17 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r17;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void agentDisconnected(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i1, $i2;
        java.lang.String $r4, $r5, r8;
        java.lang.Object $r6, r9;
        java.lang.Throwable $r7;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r8 := @parameter0: java.lang.String;

        r9 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mAgentConnectLock>;

        entermonitor r9;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label3;

        r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

        r0.<com.android.server.backup.UserBackupManagerService: boolean mConnecting> = 0;

     label2:
        goto label4;

     label3:
        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" claiming agent disconnected");

        $r4 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r4);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r5);

     label4:
        $r6 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        exitmonitor r9;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r9;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void backupNow()
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        android.content.Context $r1, $r14, $r20;
        android.os.PowerManager $r2;
        android.os.PowerSaveState $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i1, $i4, $i5, $i7, $i8, i10, i11;
        java.lang.String $r4, $r10, $r11, $r18, $r22;
        android.util.ArraySet $r5;
        com.android.server.backup.internal.BackupHandler $r12, $r13;
        android.app.AlarmManager $r15;
        android.app.PendingIntent $r16, $r17;
        com.android.server.backup.BackupManagerConstants $r19;
        android.app.PendingIntent$CanceledException $r21;
        java.lang.Throwable $r23, $r24;
        java.lang.Object r25;
        android.os.Message r27;
        java.lang.StringBuilder r28;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "backupNow");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.os.PowerManager mPowerManager>;

        $r3 = virtualinvoke $r2.<android.os.PowerManager: android.os.PowerSaveState getPowerSaveState(int)>(5);

        $z0 = $r3.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        if $z0 == 0 goto label03;

        $i5 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r18 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i5, "Not running backup while in battery save mode");

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r18);

        $i7 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r20 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r19 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.KeyValueBackupJob: void schedule(int,android.content.Context,com.android.server.backup.BackupManagerConstants)>($i7, $r20, $r19);

     label02:
        goto label16;

     label03:
        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i1, "Scheduling immediate backup pass");

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r4);

        r25 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object getQueueLock()>();

        entermonitor r25;

     label04:
        $r5 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet getPendingInits()>();

        i10 = virtualinvoke $r5.<android.util.ArraySet: int size()>();

     label05:
        if i10 <= 0 goto label12;

     label06:
        $r15 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: android.app.AlarmManager getAlarmManager()>();

        $r16 = r0.<com.android.server.backup.UserBackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r15.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r16);

        $r17 = r0.<com.android.server.backup.UserBackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r17.<android.app.PendingIntent: void send()>();

     label07:
        goto label10;

     label08:
        $r21 := @caughtexception;

     label09:
        $i8 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r22 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i8, "Run init intent cancelled");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r22);

     label10:
        exitmonitor r25;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label12:
        exitmonitor r25;

     label13:
        $z1 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean isEnabled()>();

        if $z1 == 0 goto label17;

        $z4 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean isSetupComplete()>();

        if $z4 != 0 goto label15;

     label14:
        goto label17;

     label15:
        $r12 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r27 = virtualinvoke $r12.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int)>(1);

        $r13 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r13.<com.android.server.backup.internal.BackupHandler: boolean sendMessage(android.os.Message)>(r27);

        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.backup.KeyValueBackupJob: void cancel(int,android.content.Context)>($i4, $r14);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label17:
        i11 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup pass but enabled=");

        $z2 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean isEnabled()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setupComplete=");

        $z3 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean isSetupComplete()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r10 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i11, $r10);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label19:
        $r23 := @caughtexception;

     label20:
        exitmonitor r25;

     label21:
        throw $r23;

     label22:
        $r24 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r24;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch android.app.PendingIntent$CanceledException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    public boolean backupPasswordMatches(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;
        com.android.server.backup.BackupPasswordManager $r2;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupPasswordManager mBackupPasswordManager>;

        $z0 = virtualinvoke $r2.<com.android.server.backup.BackupPasswordManager: boolean backupPasswordMatches(java.lang.String)>(r1);

        return $z0;
    }

    public boolean beginFullBackup(com.android.server.backup.FullBackupJob)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0, l1, l2, $l9, $l10, $l12, $l14, l23, l25, l26, l29;
        java.lang.Object r1, $r22;
        java.lang.StringBuilder r2, r87;
        com.android.server.backup.BackupManagerConstants $r3, $r4, $r20, $r41, r64;
        boolean $z0, $z1, $z2, z3, z5, z7, z8, z9, z11, z12, z14, z15, z17;
        android.os.PowerManager $r5;
        int $i3, $i6, $i8, $i11, $i15, $i16, $i18, $i20, $i22, i24, i27, i28, i30, i31, i32;
        java.lang.String $r6, $r9, $r18, $r19, $r26, $r29, $r31, $r32, $r33, $r38, $r39, $r40, r75, r89;
        java.util.ArrayList $r7, $r10, $r36, r73, $r86;
        com.android.server.backup.TransportManager $r8;
        java.lang.String[] $r12;
        com.android.server.backup.fullbackup.PerformFullTransportBackupTask $r13, $r15, r67;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r14;
        android.content.Context $r21, $r42;
        byte $b7;
        android.content.pm.ApplicationInfo $r23, $r34;
        java.util.Random $r24;
        android.app.ActivityManagerInternal $r35;
        android.content.pm.PackageManager$NameNotFoundException $r43, $r49, $r51, $r52, $r56, $r59, $r60;
        java.lang.Throwable $r44, $r45, $r46, $r47, $r48, $r50, $r53, $r54, $r55, $r57, $r58, $r61, $r62, r70;
        com.android.server.backup.FullBackupJob r63;
        com.android.server.backup.fullbackup.FullBackupEntry r65, r72;
        android.os.PowerSaveState r66;
        android.content.pm.PackageManager r74;
        android.content.pm.PackageInfo r76;
        java.text.SimpleDateFormat r78;
        java.util.Date r79;
        java.util.concurrent.CountDownLatch r88;
        java.lang.Thread r90;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r63 := @parameter0: com.android.server.backup.FullBackupJob;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r64 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        entermonitor r64;

     label01:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        l1 = virtualinvoke $r3.<com.android.server.backup.BackupManagerConstants: long getFullBackupIntervalMilliseconds()>();

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        l2 = virtualinvoke $r4.<com.android.server.backup.BackupManagerConstants: long getKeyValueBackupIntervalMilliseconds()>();

        exitmonitor r64;

     label02:
        r65 = null;

        l23 = l1;

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled>;

        if $z0 == 0 goto label88;

        $z1 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z1 != 0 goto label03;

        goto label88;

     label03:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: android.os.PowerManager mPowerManager>;

        r66 = virtualinvoke $r5.<android.os.PowerManager: android.os.PowerSaveState getPowerSaveState(int)>(4);

        $z2 = r66.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        if $z2 == 0 goto label04;

        $i20 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r40 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i20, "Deferring scheduled full backups in battery saver mode");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r40);

        $i22 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r42 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r41 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.FullBackupJob: void schedule(int,android.content.Context,long,com.android.server.backup.BackupManagerConstants)>($i22, $r42, l2, $r41);

        return 0;

     label04:
        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r6 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i3, "Beginning scheduled full backup operation");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r1;

     label05:
        r67 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.fullbackup.PerformFullTransportBackupTask mRunningFullBackupTask>;

     label06:
        if r67 == null goto label11;

     label07:
        $i18 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r39 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i18, "Backup triggered but one already/still running!");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r39);

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r54 := @caughtexception;

        r70 = $r54;

        goto label85;

     label11:
        z3 = 1;

     label12:
        $r7 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        i24 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label13:
        if i24 != 0 goto label16;

     label14:
        $i16 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r38 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i16, "Backup queue empty; doing nothing");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r38);

     label15:
        z3 = 0;

        r72 = r65;

        goto label73;

     label16:
        z5 = 0;

     label17:
        $r8 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r9 = virtualinvoke $r8.<com.android.server.backup.TransportManager: java.lang.String getCurrentTransportName()>();

        z7 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean fullBackupAllowable(java.lang.String)>($r9);

     label18:
        if z7 != 0 goto label19;

        z3 = 0;

        l23 = l2;

     label19:
        if z3 == 0 goto label72;

     label20:
        r73 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

     label21:
        $r22 = virtualinvoke r73.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r65 = (com.android.server.backup.fullbackup.FullBackupEntry) $r22;

     label22:
        l25 = r65.<com.android.server.backup.fullbackup.FullBackupEntry: long lastBackup>;

     label23:
        l26 = l0 - l25;

        $b7 = l26 cmp l1;

        if $b7 < 0 goto label24;

        z8 = 1;

        goto label25;

     label24:
        z8 = 0;

     label25:
        if z8 != 0 goto label26;

        l23 = l1 - l26;

        r72 = r65;

        z3 = z8;

        goto label73;

     label26:
        r74 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

     label27:
        z9 = 0;

     label28:
        r75 = r65.<com.android.server.backup.fullbackup.FullBackupEntry: java.lang.String packageName>;

     label29:
        z9 = 0;

     label30:
        i27 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

     label31:
        z11 = 0;

     label32:
        r76 = virtualinvoke r74.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r75, 0, i27);

     label33:
        z11 = 0;

     label34:
        z12 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appGetsFullBackup(android.content.pm.PackageInfo)>(r76);

     label35:
        if z12 != 0 goto label40;

     label36:
        $r36 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        virtualinvoke $r36.<java.util.ArrayList: java.lang.Object remove(int)>(0);

     label37:
        z3 = z8;

        z5 = 1;

        goto label72;

     label38:
        $r61 := @caughtexception;

        r70 = $r61;

        goto label85;

     label39:
        $r51 := @caughtexception;

        z5 = 0;

        goto label64;

     label40:
        z11 = 0;

     label41:
        $r23 = r76.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i28 = $r23.<android.content.pm.ApplicationInfo: int privateFlags>;

     label42:
        $i8 = i28 & 8192;

        if $i8 != 0 goto label45;

     label43:
        $r35 = r0.<com.android.server.backup.UserBackupManagerService: android.app.ActivityManagerInternal mActivityManagerInternal>;

        $r34 = r76.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i15 = $r34.<android.content.pm.ApplicationInfo: int uid>;

        z14 = virtualinvoke $r35.<android.app.ActivityManagerInternal: boolean isAppForeground(int)>($i15);

     label44:
        if z14 == 0 goto label45;

        z15 = 1;

        goto label46;

     label45:
        z15 = 0;

     label46:
        if z15 == 0 goto label60;

        z9 = z15;

     label47:
        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l10 = $l9 + 3600000L;

        $r24 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Random mTokenGenerator>;

        $i11 = virtualinvoke $r24.<java.util.Random: int nextInt(int)>(7200000);

        $l12 = (long) $i11;

        l29 = $l10 + $l12;

     label48:
        z9 = z15;

     label49:
        r78 = new java.text.SimpleDateFormat;

     label50:
        z17 = z15;

        z11 = z15;

     label51:
        specialinvoke r78.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

     label52:
        i30 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

     label53:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

     label54:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Full backup time but ");

        $r26 = r65.<com.android.server.backup.fullbackup.FullBackupEntry: java.lang.String packageName>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is busy; deferring to ");

        r79 = new java.util.Date;

        specialinvoke r79.<java.util.Date: void <init>(long)>(l29);

        $r29 = virtualinvoke r78.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r79);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i30, $r31);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r32);

     label55:
        $r33 = r65.<com.android.server.backup.fullbackup.FullBackupEntry: java.lang.String packageName>;

        $l14 = l29 - l1;

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void enqueueFullBackup(java.lang.String,long)>($r33, $l14);

     label56:
        goto label60;

     label57:
        $r59 := @caughtexception;

        z5 = z17;

        goto label64;

     label58:
        $r60 := @caughtexception;

        z5 = z17;

        goto label64;

     label59:
        $r49 := @caughtexception;

        z5 = z17;

        goto label64;

     label60:
        z3 = z8;

        z5 = z15;

        goto label72;

     label61:
        $r43 := @caughtexception;

        z5 = z11;

        goto label64;

     label62:
        $r52 := @caughtexception;

        z5 = z9;

        goto label64;

     label63:
        $r56 := @caughtexception;

        z5 = 0;

     label64:
        $r86 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        i31 = virtualinvoke $r86.<java.util.ArrayList: int size()>();

     label65:
        if i31 <= 1 goto label66;

        z3 = 1;

        goto label67;

     label66:
        z3 = 0;

     label67:
        goto label72;

     label68:
        $r58 := @caughtexception;

        r70 = $r58;

        goto label85;

     label69:
        $r62 := @caughtexception;

        r70 = $r62;

        goto label85;

     label70:
        $r44 := @caughtexception;

        r70 = $r44;

        goto label85;

     label71:
        $r55 := @caughtexception;

        r70 = $r55;

        goto label85;

     label72:
        if z5 != 0 goto label82;

        r72 = r65;

     label73:
        if z3 != 0 goto label77;

     label74:
        i32 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r87 = new java.lang.StringBuilder;

        specialinvoke r87.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nothing pending full backup; rescheduling +");

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l23);

        $r18 = virtualinvoke r87.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i32, $r18);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r21 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r20 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.FullBackupJob: void schedule(int,android.content.Context,long,com.android.server.backup.BackupManagerConstants)>($i6, $r21, l23, $r20);

        exitmonitor r1;

     label75:
        return 0;

     label76:
        $r57 := @caughtexception;

        r70 = $r57;

        goto label85;

     label77:
        $r10 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        r88 = new java.util.concurrent.CountDownLatch;

        specialinvoke r88.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r89 = r72.<com.android.server.backup.fullbackup.FullBackupEntry: java.lang.String packageName>;

     label78:
        $r12 = newarray (java.lang.String)[1];

        $r12[0] = r89;

        $r13 = staticinvoke <com.android.server.backup.fullbackup.PerformFullTransportBackupTask: com.android.server.backup.fullbackup.PerformFullTransportBackupTask newWithCurrentTransport(com.android.server.backup.UserBackupManagerService,android.app.backup.IFullBackupRestoreObserver,java.lang.String[],boolean,com.android.server.backup.FullBackupJob,java.util.concurrent.CountDownLatch,android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,boolean,java.lang.String)>(r0, null, $r12, 1, r63, r88, null, null, 0, "BMS.beginFullBackup()");

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.fullbackup.PerformFullTransportBackupTask mRunningFullBackupTask> = $r13;

        $r14 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r14.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        r90 = new java.lang.Thread;

        $r15 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.fullbackup.PerformFullTransportBackupTask mRunningFullBackupTask>;

        specialinvoke r90.<java.lang.Thread: void <init>(java.lang.Runnable)>($r15);

        virtualinvoke r90.<java.lang.Thread: void start()>();

        exitmonitor r1;

     label79:
        return 1;

     label80:
        $r45 := @caughtexception;

        r70 = $r45;

        goto label85;

     label81:
        $r47 := @caughtexception;

        r70 = $r47;

        goto label85;

     label82:
        goto label12;

     label83:
        $r46 := @caughtexception;

        r70 = $r46;

        goto label85;

     label84:
        $r50 := @caughtexception;

        r70 = $r50;

     label85:
        exitmonitor r1;

     label86:
        throw r70;

     label87:
        $r48 := @caughtexception;

        r70 = $r48;

        goto label85;

     label88:
        return 0;

     label89:
        $r53 := @caughtexception;

     label90:
        exitmonitor r64;

     label91:
        throw $r53;

        catch java.lang.Throwable from label01 to label02 with label89;
        catch java.lang.Throwable from label05 to label06 with label84;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label83;
        catch java.lang.Throwable from label14 to label15 with label10;
        catch java.lang.Throwable from label17 to label18 with label83;
        catch java.lang.Throwable from label20 to label21 with label71;
        catch java.lang.Throwable from label21 to label22 with label70;
        catch java.lang.Throwable from label22 to label23 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label26 to label27 with label63;
        catch java.lang.Throwable from label26 to label27 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label28 to label29 with label62;
        catch java.lang.Throwable from label28 to label29 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label30 to label31 with label62;
        catch java.lang.Throwable from label30 to label31 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label32 to label33 with label61;
        catch java.lang.Throwable from label32 to label33 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label34 to label35 with label61;
        catch java.lang.Throwable from label34 to label35 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label36 to label37 with label39;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch android.content.pm.PackageManager$NameNotFoundException from label41 to label42 with label61;
        catch java.lang.Throwable from label41 to label42 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label43 to label44 with label39;
        catch java.lang.Throwable from label43 to label44 with label38;
        catch android.content.pm.PackageManager$NameNotFoundException from label47 to label48 with label62;
        catch java.lang.Throwable from label47 to label48 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label49 to label50 with label62;
        catch java.lang.Throwable from label49 to label50 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label51 to label52 with label61;
        catch java.lang.Throwable from label51 to label52 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label52 to label53 with label59;
        catch java.lang.Throwable from label52 to label53 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label53 to label54 with label58;
        catch java.lang.Throwable from label53 to label54 with label69;
        catch android.content.pm.PackageManager$NameNotFoundException from label54 to label55 with label57;
        catch java.lang.Throwable from label54 to label55 with label68;
        catch android.content.pm.PackageManager$NameNotFoundException from label55 to label56 with label57;
        catch java.lang.Throwable from label55 to label56 with label68;
        catch java.lang.Throwable from label64 to label65 with label68;
        catch java.lang.Throwable from label74 to label75 with label76;
        catch java.lang.Throwable from label77 to label78 with label81;
        catch java.lang.Throwable from label78 to label79 with label80;
        catch java.lang.Throwable from label85 to label86 with label87;
        catch java.lang.Throwable from label90 to label91 with label89;
    }

    public android.app.backup.IRestoreSession beginRestoreSession(java.lang.String, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.pm.PackageInfo r1;
        java.lang.StringBuilder $r2, $r22, $r27;
        java.lang.String $r7, $r8, $r9, $r14, $r15, $r25, $r26, $r32, r33, r34, r36, r37;
        int $i1, $i4, $i6, $i8, $i9, $i10, i12, i13;
        com.android.server.backup.restore.ActiveRestoreSession $r10, $r13, r41;
        boolean $z1, z3;
        com.android.server.backup.BackupAgentTimeoutParameters $r11;
        com.android.server.backup.internal.BackupHandler $r12;
        long $l3;
        android.content.Context $r16;
        com.android.server.backup.TransportManager $r17;
        android.content.pm.PackageManager $r18;
        android.content.pm.ApplicationInfo $r19;
        java.lang.Throwable $r20;
        android.content.pm.PackageManager$NameNotFoundException $r21;
        java.lang.IllegalArgumentException $r31;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r33 := @parameter0: java.lang.String;

        r34 := @parameter1: java.lang.String;

        i12 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("beginRestoreSession: pkg=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transport=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i12, $r7);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

        z3 = 1;

        r36 = r34;

        if r34 != null goto label04;

        $r17 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r37 = virtualinvoke $r17.<com.android.server.backup.TransportManager: java.lang.String getCurrentTransportName()>();

        z3 = 1;

        r36 = r37;

        if r33 == null goto label04;

     label01:
        $r18 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i8 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r1 = virtualinvoke $r18.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r33, 0, $i8);

     label02:
        z3 = 1;

        r36 = r37;

        $r19 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i9 = $r19.<android.content.pm.ApplicationInfo: int uid>;

        $i10 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i9 != $i10 goto label04;

        z3 = 0;

        r36 = r37;

        goto label04;

     label03:
        $r21 := @caughtexception;

        i13 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asked to restore nonexistent pkg ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i13, $r25);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r26);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r31 = new java.lang.IllegalArgumentException;

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label04:
        if z3 == 0 goto label05;

        $r16 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r16.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "beginRestoreSession");

        goto label06;

     label05:
        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r9 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i1, "restoring self on current transport; no permission needed");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

     label06:
        entermonitor r0;

     label07:
        $r10 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.restore.ActiveRestoreSession mActiveRestoreSession>;

        if $r10 == null goto label09;

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r15 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i6, "Restore session requested but one already active");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

        exitmonitor r0;

     label08:
        return null;

     label09:
        $z1 = r0.<com.android.server.backup.UserBackupManagerService: boolean mBackupRunning>;

        if $z1 == 0 goto label11;

        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i4, "Restore session requested but currently running backups");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

        exitmonitor r0;

     label10:
        return null;

     label11:
        r41 = new com.android.server.backup.restore.ActiveRestoreSession;

        specialinvoke r41.<com.android.server.backup.restore.ActiveRestoreSession: void <init>(com.android.server.backup.UserBackupManagerService,java.lang.String,java.lang.String)>(r0, r33, r36);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.restore.ActiveRestoreSession mActiveRestoreSession> = r41;

        $r12 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $r11 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupAgentTimeoutParameters mAgentTimeoutParameters>;

        $l3 = virtualinvoke $r11.<com.android.server.backup.BackupAgentTimeoutParameters: long getRestoreAgentTimeoutMillis()>();

        virtualinvoke $r12.<com.android.server.backup.internal.BackupHandler: boolean sendEmptyMessageDelayed(int,long)>(8, $l3);

        exitmonitor r0;

     label12:
        $r13 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.restore.ActiveRestoreSession mActiveRestoreSession>;

        return $r13;

     label13:
        $r20 := @caughtexception;

     label14:
        exitmonitor r0;

     label15:
        throw $r20;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo, int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object r1, $r14;
        long l0, l1, $l4;
        java.lang.StringBuilder r2, r22, r24, r25;
        int $i2, $i3, i6, i7, i8, i9, i10;
        java.lang.String $r3, $r6, $r7, $r9, $r10, $r11, $r12, $r17, $r18;
        android.app.IActivityManager $r4;
        boolean $z0, $z1, $z2;
        android.app.ActivityManagerInternal $r5;
        android.app.IBackupAgent $r8, $r13, r21;
        byte $b5;
        android.os.RemoteException $r15;
        java.lang.Throwable $r16, $r19;
        android.content.pm.ApplicationInfo r20;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r20 := @parameter0: android.content.pm.ApplicationInfo;

        i6 := @parameter1: int;

        r21 = null;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mAgentConnectLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.backup.UserBackupManagerService: boolean mConnecting> = 1;

        r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

     label02:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IActivityManager mActivityManager>;

        $r3 = r20.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $z0 = interfaceinvoke $r4.<android.app.IActivityManager: boolean bindBackupAgent(java.lang.String,int,int)>($r3, i6, $i2);

        if $z0 == 0 goto label12;

        i7 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("awaiting agent for ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        $r6 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i7, $r6);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r7);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label03:
        $z1 = r0.<com.android.server.backup.UserBackupManagerService: boolean mConnecting>;

        if $z1 == 0 goto label10;

        $r13 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent>;

        if $r13 != null goto label10;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label04:
        $l4 = l0 + 10000L;

        $b5 = l1 cmp $l4;

        if $b5 >= 0 goto label10;

     label05:
        $r14 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r14.<java.lang.Object: void wait(long)>(5000L);

     label06:
        goto label03;

     label07:
        $r16 := @caughtexception;

     label08:
        i8 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r17 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i8, $r17);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r18);

        r0.<com.android.server.backup.UserBackupManagerService: boolean mConnecting> = 0;

        r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

     label09:
        goto label06;

     label10:
        $z2 = r0.<com.android.server.backup.UserBackupManagerService: boolean mConnecting>;

        if $z2 == 0 goto label11;

        i9 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for agent ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        $r11 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i9, $r11);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

        r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

     label11:
        i10 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got agent ");

        $r8 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent>;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r9 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i10, $r9);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        r21 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IBackupAgent mConnectedAgent>;

     label12:
        goto label14;

     label13:
        $r15 := @caughtexception;

        r21 = null;

     label14:
        exitmonitor r1;

     label15:
        if r21 != null goto label16;

        $r5 = r0.<com.android.server.backup.UserBackupManagerService: android.app.ActivityManagerInternal mActivityManagerInternal>;

        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        virtualinvoke $r5.<android.app.ActivityManagerInternal: void clearPendingBackup(int)>($i3);

     label16:
        return r21;

     label17:
        $r19 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch android.os.RemoteException from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch android.os.RemoteException from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void cancelBackups()
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        com.android.server.backup.internal.Operation r1;
        int i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.content.Context $r2, $r5, $r7;
        android.util.SparseArray $r3, $r10, $r12;
        boolean $z0;
        com.android.server.backup.BackupManagerConstants $r4, $r6;
        java.lang.Object $r8, $r11, r17;
        java.lang.Integer $r9, $r13;
        java.lang.Throwable $r14, $r15;
        java.util.ArrayList r16;
        java.util.Iterator r18;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "cancelBackups");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>()>();

        r17 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r17;

     label02:
        i7 = 0;

     label03:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $i2 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i7 >= $i2 goto label05;

        $r10 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i7);

        r1 = (com.android.server.backup.internal.Operation) $r11;

        $r12 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        i1 = virtualinvoke $r12.<android.util.SparseArray: int keyAt(int)>(i7);

        $i6 = r1.<com.android.server.backup.internal.Operation: int type>;

        if $i6 != 2 goto label04;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r13);

     label04:
        i7 = i7 + 1;

        goto label03;

     label05:
        exitmonitor r17;

     label06:
        r18 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r8 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Integer) $r8;

        $i5 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void handleCancel(int,boolean)>($i5, 1);

     label08:
        goto label07;

     label09:
        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.KeyValueBackupJob: void schedule(int,android.content.Context,long,com.android.server.backup.BackupManagerConstants)>($i3, $r5, 3600000L, $r4);

        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r6 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.FullBackupJob: void schedule(int,android.content.Context,long,com.android.server.backup.BackupManagerConstants)>($i4, $r7, 7200000L, $r6);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label11:
        $r15 := @caughtexception;

     label12:
        exitmonitor r17;

     label13:
        throw $r15;

     label14:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public void clearApplicationDataAfterRestoreFailure(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void clearApplicationDataSynchronous(java.lang.String,boolean,boolean)>(r1, 1, 0);

        return;
    }

    public void clearApplicationDataBeforeRestore(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void clearApplicationDataSynchronous(java.lang.String,boolean,boolean)>(r1, 0, 1);

        return;
    }

    public void clearBackupData(java.lang.String, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        com.android.server.backup._$$Lambda$UserBackupManagerService$TD_nE027xyQbZ7zQ3L8rJfQM2V4 r1;
        java.lang.StringBuilder $r2, $r21;
        java.lang.String $r7, $r8, $r25, $r26, r27, r28;
        int $i2, $i3, $i4, $i5, $i6, i8, i9;
        android.content.pm.PackageManager $r9;
        android.content.Context $r10;
        com.android.server.backup.ProcessedPackagesJournal $r11;
        boolean $z0;
        com.android.server.backup.internal.BackupHandler $r12, $r15, $r16, r34, r37;
        com.android.server.backup.TransportManager $r13;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r14;
        android.util.SparseArray $r17;
        java.lang.Object $r18, r32;
        java.lang.Throwable $r19;
        android.content.pm.PackageManager$NameNotFoundException $r20;
        android.content.pm.PackageInfo r30;
        java.util.Set r31;
        com.android.server.backup.transport.TransportClient r33;
        com.android.server.backup.params.ClearRetryParams r35;
        android.os.Message r36, r39;
        com.android.server.backup.params.ClearParams r38;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r27 := @parameter0: java.lang.String;

        r28 := @parameter1: java.lang.String;

        i8 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clearBackupData() of ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i8, $r7);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

     label01:
        $r9 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r30 = virtualinvoke $r9.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r28, 134217728, $i2);

     label02:
        $r10 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i5 = virtualinvoke $r10.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.BACKUP", $i3, $i4);

        if $i5 != -1 goto label03;

        $r17 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r18 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>($i6);

        r31 = (java.util.Set) $r18;

        goto label04;

     label03:
        $r11 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.ProcessedPackagesJournal mProcessedPackagesJournal>;

        r31 = virtualinvoke $r11.<com.android.server.backup.ProcessedPackagesJournal: java.util.Set getPackagesCopy()>();

     label04:
        $z0 = interfaceinvoke r31.<java.util.Set: boolean contains(java.lang.Object)>(r28);

        if $z0 == 0 goto label14;

        $r12 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r12.<com.android.server.backup.internal.BackupHandler: void removeMessages(int)>(12);

        r32 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r32;

     label05:
        $r13 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r33 = virtualinvoke $r13.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getTransportClient(java.lang.String,java.lang.String)>(r27, "BMS.clearBackupData()");

     label06:
        if r33 != null goto label09;

     label07:
        r34 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r35 = new com.android.server.backup.params.ClearRetryParams;

        specialinvoke r35.<com.android.server.backup.params.ClearRetryParams: void <init>(java.lang.String,java.lang.String)>(r27, r28);

        r36 = virtualinvoke r34.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(12, r35);

        $r16 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r16.<com.android.server.backup.internal.BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r36, 3600000L);

        exitmonitor r32;

     label08:
        return;

     label09:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r1 = new com.android.server.backup._$$Lambda$UserBackupManagerService$TD_nE027xyQbZ7zQ3L8rJfQM2V4;

        specialinvoke r1.<com.android.server.backup._$$Lambda$UserBackupManagerService$TD_nE027xyQbZ7zQ3L8rJfQM2V4: void <init>(com.android.server.backup.UserBackupManagerService,com.android.server.backup.transport.TransportClient)>(r0, r33);

        $r14 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r14.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        r37 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r38 = new com.android.server.backup.params.ClearParams;

        specialinvoke r38.<com.android.server.backup.params.ClearParams: void <init>(com.android.server.backup.transport.TransportClient,android.content.pm.PackageInfo,com.android.server.backup.internal.OnTaskFinishedListener)>(r33, r30, r1);

        r39 = virtualinvoke r37.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r38);

        $r15 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r15.<com.android.server.backup.internal.BackupHandler: boolean sendMessage(android.os.Message)>(r39);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r32;

     label10:
        goto label14;

     label11:
        $r19 := @caughtexception;

     label12:
        exitmonitor r32;

     label13:
        throw $r19;

     label14:
        return;

     label15:
        $r20 := @caughtexception;

        i9 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such package \'");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' - not clearing backup data");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i9, $r25);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r26);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label15;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void clearPendingInits()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.util.ArraySet $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        virtualinvoke $r1.<android.util.ArraySet: void clear()>();

        return;
    }

    public void clearRestoreSession(com.android.server.backup.restore.ActiveRestoreSession)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.restore.ActiveRestoreSession $r1, r6;
        int $i0, $i2;
        java.lang.String $r2, $r4;
        com.android.server.backup.internal.BackupHandler $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r6 := @parameter0: com.android.server.backup.restore.ActiveRestoreSession;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.restore.ActiveRestoreSession mActiveRestoreSession>;

        if r6 == $r1 goto label3;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i2, "ending non-current restore session");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r4);

     label2:
        goto label4;

     label3:
        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i0, "Clearing restore session and halting timeout");

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r2);

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.restore.ActiveRestoreSession mActiveRestoreSession> = null;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r3.<com.android.server.backup.internal.BackupHandler: void removeMessages(int)>(8);

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void dataChanged(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, $r9, $r10;
        int i0, $i1;
        com.android.server.backup.UserBackupManagerService$4 $r2;
        com.android.server.backup.internal.BackupHandler $r3;
        java.lang.StringBuilder $r4;
        java.util.HashSet r11;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        r11 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: java.util.HashSet dataChangedTargets(java.lang.String)>(r1);

        if r11 != null goto label1;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataChanged but no participant pkg=\'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        return;

     label1:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $r2 = new com.android.server.backup.UserBackupManagerService$4;

        specialinvoke $r2.<com.android.server.backup.UserBackupManagerService$4: void <init>(com.android.server.backup.UserBackupManagerService,java.lang.String,java.util.HashSet)>(r0, r1, r11);

        virtualinvoke $r3.<com.android.server.backup.internal.BackupHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void dataChangedImpl(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;
        java.util.HashSet $r2;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: java.util.HashSet dataChangedTargets(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void dataChangedImpl(java.lang.String,java.util.HashSet)>(r1, $r2);

        return;
    }

    public boolean deviceIsEncrypted()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.os.storage.IStorageManager $r3, $r4;
        int $i0, i2, i3;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r10, $r11;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 = 1;

     label1:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.os.storage.IStorageManager mStorageManager>;

        $i0 = interfaceinvoke $r3.<android.os.storage.IStorageManager: int getEncryptionState()>();

        if $i0 == 1 goto label3;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.os.storage.IStorageManager mStorageManager>;

        i2 = interfaceinvoke $r4.<android.os.storage.IStorageManager: int getPasswordType()>();

     label2:
        if i2 == 1 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        $r5 := @caughtexception;

        i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to communicate with storagemanager service: ");

        $r8 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i3, $r10);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        return 1;

        catch java.lang.Exception from label1 to label2 with label5;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        long l0;
        int i1, i2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, r12;
        boolean $z0, $z1, $z2;
        com.android.server.backup.TransportManager $r8, $r9;
        java.lang.Throwable $r10;
        java.io.FileDescriptor r11;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if r2 == null goto label11;

     label01:
        i1 = lengthof r2;

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label11;

        r12 = r2[i2];

     label04:
        $r3 = "agents";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(r12);

        if $z0 == 0 goto label06;

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void dumpAgents(java.io.PrintWriter)>(r1);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label06:
        $r4 = "transportclients";

        $r5 = virtualinvoke r12.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label08;

        $r9 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r9.<com.android.server.backup.TransportManager: void dumpTransportClients(java.io.PrintWriter)>(r1);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label08:
        $r6 = "transportstats";

        $r7 = virtualinvoke r12.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label10;

        $r8 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r8.<com.android.server.backup.TransportManager: void dumpTransportStats(java.io.PrintWriter)>(r1);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label10:
        i2 = i2 + 1;

        goto label03;

     label11:
        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void dumpInternal(java.io.PrintWriter)>(r1);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label13:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public void endFullBackup()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Thread $r1;
        com.android.server.backup.UserBackupManagerService$3 $r2;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = new java.lang.Thread;

        $r2 = new com.android.server.backup.UserBackupManagerService$3;

        specialinvoke $r2.<com.android.server.backup.UserBackupManagerService$3: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r2, "end-full-backup");

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;
    }

    public void enqueueFullBackup(java.lang.String, long)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0, $l3;
        java.lang.Object r2, $r7;
        com.android.server.backup.fullbackup.FullBackupEntry $r3, $r8;
        byte $b1, $b4;
        java.util.ArrayList $r4, $r5, $r6, $r9;
        int $i2, $i5, i6, i7;
        java.lang.Throwable $r10;
        java.lang.String r11;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = new com.android.server.backup.fullbackup.FullBackupEntry;

        specialinvoke $r3.<com.android.server.backup.fullbackup.FullBackupEntry: void <init>(java.lang.String,long)>(r11, l0);

        r2 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r2;

     label01:
        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void dequeueFullBackupLocked(java.lang.String)>(r11);

     label02:
        i6 = -1;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label08;

     label03:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i7 = $i2 - 1;

     label04:
        i6 = i7;

        if i7 < 0 goto label08;

     label05:
        $r6 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r8 = (com.android.server.backup.fullbackup.FullBackupEntry) $r7;

        $l3 = $r8.<com.android.server.backup.fullbackup.FullBackupEntry: long lastBackup>;

        $b4 = $l3 cmp l0;

        if $b4 > 0 goto label07;

        $r9 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i5 = i7 + 1;

        virtualinvoke $r9.<java.util.ArrayList: void add(int,java.lang.Object)>($i5, $r3);

     label06:
        i6 = i7;

        goto label08;

     label07:
        i7 = i7 + -1;

        goto label04;

     label08:
        if i6 >= 0 goto label10;

     label09:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r3);

     label10:
        exitmonitor r2;

     label11:
        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void writeFullBackupScheduleAsync()>();

        return;

     label12:
        $r10 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void excludeKeysFromRestore(java.lang.String, java.util.List)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;
        java.util.List r2;
        android.content.Context $r3;
        com.android.server.backup.UserBackupPreferences $r4;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "excludeKeysFromRestore");

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupPreferences mBackupPreferences>;

        virtualinvoke $r4.<com.android.server.backup.UserBackupPreferences: void addExcludedKeys(java.lang.String,java.util.List)>(r1, r2);

        return;
    }

    public java.lang.String[] filterAppsEligibleForBackup(java.lang.String[])
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        com.android.server.backup.transport.TransportClient r1;
        java.util.LinkedList r2;
        int i1, $i2, $i3, i4;
        java.lang.String r3;
        android.content.Context $r4;
        com.android.server.backup.TransportManager $r5, $r8;
        java.lang.String[] $r6, r11, r12;
        java.lang.Object[] $r7;
        android.content.pm.PackageManager $r9;
        boolean $z0;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.lang.String[];

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "filterAppsEligibleForBackup");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r1 = virtualinvoke $r5.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getCurrentTransportClient(java.lang.String)>("BMS.filterAppsEligibleForBackup");

        r2 = new java.util.LinkedList;

        specialinvoke r2.<java.util.LinkedList: void <init>()>();

        i1 = lengthof r11;

     label02:
        i4 = 0;

     label03:
        if i4 >= i1 goto label06;

        r3 = r11[i4];

     label04:
        $r9 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $z0 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appIsRunningAndEligibleForBackupWithTransport(com.android.server.backup.transport.TransportClient,java.lang.String,android.content.pm.PackageManager,int)>(r1, r3, $r9, $i3);

        if $z0 == 0 goto label05;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label05:
        i4 = i4 + 1;

        goto label03;

     label06:
        if r1 == null goto label08;

     label07:
        $r8 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r8.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, "BMS.filterAppsEligibleForBackup");

     label08:
        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i2];

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r12 = (java.lang.String[]) $r7;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r12;

     label10:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public java.util.List filterUserFacingPackages(java.util.List)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.pm.PackageInfo r2;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r4;
        int $i0;
        java.lang.Object $r5;
        java.lang.String $r6, $r9, $r11;
        java.lang.StringBuilder $r7;
        java.util.List r12;
        java.util.Iterator r13;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r12 := @parameter0: java.util.List;

        $z0 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean shouldSkipUserFacingData()>();

        if $z0 != 0 goto label1;

        return r12;

     label1:
        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r12.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.PackageInfo) $r5;

        $r6 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z2 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean shouldSkipPackage(java.lang.String)>($r6);

        if $z2 != 0 goto label3;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label4;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Will skip backup/restore for ");

        $r9 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label4:
        goto label2;

     label5:
        return $r4;
    }

    public void fullTransportBackup(java.lang.String[])
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0, l1;
        java.util.concurrent.CountDownLatch r1;
        java.lang.Thread r2;
        int i2, $i3, $i4, $i6, $i8, i10;
        android.content.Context $r3;
        java.lang.IllegalStateException $r4;
        com.android.server.backup.TransportManager $r5;
        java.lang.String $r6, $r7, $r9, $r10, $r11;
        boolean $z0;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r8;
        java.lang.Throwable $r12, $r13;
        java.lang.String[] r14;
        com.android.server.backup.fullbackup.PerformFullTransportBackupTask r15;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r14 := @parameter0: java.lang.String[];

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "fullTransportBackup");

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i3 != 0 goto label13;

        $r5 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r6 = virtualinvoke $r5.<com.android.server.backup.TransportManager: java.lang.String getCurrentTransportName()>();

        $z0 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: boolean fullBackupAllowable(java.lang.String)>($r6);

        if $z0 != 0 goto label01;

        $i8 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r11 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i8, "Full backup not currently possible -- key/value backup not yet run?");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        goto label10;

     label01:
        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r7 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i4, "fullTransportBackup()");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r7);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r15 = staticinvoke <com.android.server.backup.fullbackup.PerformFullTransportBackupTask: com.android.server.backup.fullbackup.PerformFullTransportBackupTask newWithCurrentTransport(com.android.server.backup.UserBackupManagerService,android.app.backup.IFullBackupRestoreObserver,java.lang.String[],boolean,com.android.server.backup.FullBackupJob,java.util.concurrent.CountDownLatch,android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,boolean,java.lang.String)>(r0, null, r14, 0, null, r1, null, null, 0, "BMS.fullTransportBackup()");

        $r8 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r8.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        r2 = new java.lang.Thread;

        specialinvoke r2.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r15, "full-transport-master");

        virtualinvoke r2.<java.lang.Thread: void start()>();

     label03:
        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void await()>();

     label04:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i2 = lengthof r14;

     label05:
        i10 = 0;

     label06:
        if i10 >= i2 goto label09;

     label07:
        $r10 = r14[i10];

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void enqueueFullBackup(java.lang.String,long)>($r10, l1);

     label08:
        i10 = i10 + 1;

        goto label06;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r9 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i6, "Done with full transport backup.");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

        return;

     label11:
        $r13 := @caughtexception;

        goto label03;

     label12:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r12;

     label13:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore supported only for the device owner");

        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.InterruptedException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
    }

    public int generateRandomIntegerToken()
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.util.Random $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Random mTokenGenerator>;

        i0 = virtualinvoke $r1.<java.util.Random: int nextInt()>();

        i5 = i0;

        if i0 >= 0 goto label1;

        i5 = neg i0;

     label1:
        $i1 = i5 & -256;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: java.util.concurrent.atomic.AtomicInteger mNextToken>;

        $i2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $i3 = $i2 & 255;

        $i4 = $i1 | $i3;

        return $i4;
    }

    public com.android.server.backup.restore.ActiveRestoreSession getActiveRestoreSession()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.restore.ActiveRestoreSession $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.restore.ActiveRestoreSession mActiveRestoreSession>;

        return $r1;
    }

    public android.app.IActivityManager getActivityManager()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.IActivityManager $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IActivityManager mActivityManager>;

        return $r1;
    }

    public android.util.SparseArray getAdbBackupRestoreConfirmations()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mAdbBackupRestoreConfirmations>;

        return $r1;
    }

    public com.android.server.backup.BackupAgentTimeoutParameters getAgentTimeoutParameters()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.BackupAgentTimeoutParameters $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupAgentTimeoutParameters mAgentTimeoutParameters>;

        return $r1;
    }

    public android.app.AlarmManager getAlarmManager()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.AlarmManager $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.app.AlarmManager mAlarmManager>;

        return $r1;
    }

    public long getAncestralSerialNumber()
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        java.lang.Throwable $r1, $r2, $r3;
        int $i1;
        java.lang.String $r4;
        java.io.RandomAccessFile r5;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

     label01:
        r5 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: java.io.RandomAccessFile getAncestralSerialNumberFile()>();

     label02:
        l0 = virtualinvoke r5.<java.io.RandomAccessFile: long readLong()>();

     label03:
        if r5 == null goto label05;

     label04:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label05:
        return l0;

     label06:
        $r2 := @caughtexception;

        if r5 == null goto label11;

     label07:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label08:
        goto label11;

     label09:
        $r1 := @caughtexception;

     label10:
        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label11:
        throw $r2;

     label12:
        $r3 := @caughtexception;

        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i1, "Unable to write to work profile serial number file:");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r4, $r3);

        return -1L;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    public long getAvailableRestoreToken(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0, $l1, l3;
        java.lang.Object r1;
        android.content.Context $r2;
        byte $b2;
        com.android.server.backup.ProcessedPackagesJournal $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r5 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getAvailableRestoreToken");

        l0 = r0.<com.android.server.backup.UserBackupManagerService: long mAncestralToken>;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r1;

        l3 = l0;

     label1:
        $l1 = r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

     label2:
        l3 = l0;

     label3:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.ProcessedPackagesJournal mProcessedPackagesJournal>;

        $z0 = virtualinvoke $r3.<com.android.server.backup.ProcessedPackagesJournal: boolean hasBeenProcessed(java.lang.String)>(r5);

        if $z0 == 0 goto label4;

        l3 = r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken>;

     label4:
        exitmonitor r1;

     label5:
        return l3;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.os.Handler getBackupHandler()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.internal.BackupHandler $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        return $r1;
    }

    public android.app.backup.IBackupManager getBackupManagerBinder()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.backup.IBackupManager $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.app.backup.IBackupManager mBackupManagerBinder>;

        return $r1;
    }

    public java.io.File getBaseStateDir()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.File $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        return $r1;
    }

    public java.lang.Object getClearDataLock()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mClearDataLock>;

        return $r1;
    }

    public android.content.Intent getConfigurationIntent(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0;
        android.content.Context $r2;
        com.android.server.backup.TransportManager $r3;
        com.android.server.backup.transport.TransportNotRegisteredException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9, $r10, r11;
        android.content.Intent r12;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getConfigurationIntent");

     label1:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r12 = virtualinvoke $r3.<com.android.server.backup.TransportManager: android.content.Intent getTransportConfigurationIntent(java.lang.String)>(r11);

     label2:
        return r12;

     label3:
        $r4 := @caughtexception;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get configuration intent from transport: ");

        $r7 = virtualinvoke $r4.<com.android.server.backup.transport.TransportNotRegisteredException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        return null;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label1 to label2 with label3;
    }

    public com.android.server.backup.BackupManagerConstants getConstants()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.BackupManagerConstants $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        return $r1;
    }

    public android.content.Context getContext()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        return $r1;
    }

    public java.lang.Object getCurrentOpLock()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        return $r1;
    }

    public android.util.SparseArray getCurrentOperations()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        return $r1;
    }

    public long getCurrentToken()
    {
        com.android.server.backup.UserBackupManagerService r0;
        long $l0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $l0 = r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken>;

        return $l0;
    }

    public java.lang.String getCurrentTransport()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.Context $r1;
        com.android.server.backup.TransportManager $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getCurrentTransport");

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r3 = virtualinvoke $r2.<com.android.server.backup.TransportManager: java.lang.String getCurrentTransportName()>();

        return $r3;
    }

    public android.content.ComponentName getCurrentTransportComponent()
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        android.content.Context $r1;
        com.android.server.backup.TransportManager $r2;
        java.lang.Throwable $r3;
        com.android.server.backup.transport.TransportNotRegisteredException $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getCurrentTransportComponent");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r5 = virtualinvoke $r2.<com.android.server.backup.TransportManager: android.content.ComponentName getCurrentTransportComponent()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.io.File getDataDir()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.File $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mDataDir>;

        return $r1;
    }

    public android.content.Intent getDataManagementIntent(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0;
        android.content.Context $r2;
        com.android.server.backup.TransportManager $r3;
        com.android.server.backup.transport.TransportNotRegisteredException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9, $r10, r11;
        android.content.Intent r12;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getDataManagementIntent");

     label1:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r12 = virtualinvoke $r3.<com.android.server.backup.TransportManager: android.content.Intent getTransportDataManagementIntent(java.lang.String)>(r11);

     label2:
        return r12;

     label3:
        $r4 := @caughtexception;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get management intent from transport: ");

        $r7 = virtualinvoke $r4.<com.android.server.backup.transport.TransportNotRegisteredException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        return null;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getDataManagementLabel(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0;
        android.content.Context $r2;
        com.android.server.backup.TransportManager $r3;
        com.android.server.backup.transport.TransportNotRegisteredException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9, $r10, r11;
        java.lang.CharSequence r12;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getDataManagementLabel");

     label1:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r12 = virtualinvoke $r3.<com.android.server.backup.TransportManager: java.lang.CharSequence getTransportDataManagementLabel(java.lang.String)>(r11);

     label2:
        return r12;

     label3:
        $r4 := @caughtexception;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get management label from transport: ");

        $r7 = virtualinvoke $r4.<com.android.server.backup.transport.TransportNotRegisteredException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        return null;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label1 to label2 with label3;
    }

    public java.lang.String getDestinationString(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0;
        android.content.Context $r2;
        com.android.server.backup.TransportManager $r3;
        com.android.server.backup.transport.TransportNotRegisteredException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9, $r10, r11, r12;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getDestinationString");

     label1:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r12 = virtualinvoke $r3.<com.android.server.backup.TransportManager: java.lang.String getTransportCurrentDestinationString(java.lang.String)>(r11);

     label2:
        return r12;

     label3:
        $r4 := @caughtexception;

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get destination string from transport: ");

        $r7 = virtualinvoke $r4.<com.android.server.backup.transport.TransportNotRegisteredException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        return null;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label1 to label2 with label3;
    }

    public java.util.Set getExcludedRestoreKeys(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;
        com.android.server.backup.UserBackupPreferences $r2;
        java.util.Set $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupPreferences mBackupPreferences>;

        $r3 = virtualinvoke $r2.<com.android.server.backup.UserBackupPreferences: java.util.Set getExcludedRestoreKeysForPackage(java.lang.String)>(r1);

        return $r3;
    }

    public com.android.server.backup.DataChangedJournal getJournal()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.DataChangedJournal $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal>;

        return $r1;
    }

    public android.content.pm.PackageManager getPackageManager()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.pm.PackageManager $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        return $r1;
    }

    public android.content.pm.IPackageManager getPackageManagerBinder()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.pm.IPackageManager $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.IPackageManager mPackageManagerBinder>;

        return $r1;
    }

    android.content.BroadcastReceiver getPackageTrackingReceiver()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.BroadcastReceiver $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mPackageTrackingReceiver>;

        return $r1;
    }

    public java.util.HashMap getPendingBackups()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.util.HashMap mPendingBackups>;

        return $r1;
    }

    public android.util.ArraySet getPendingInits()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.util.ArraySet $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        return $r1;
    }

    public java.util.Queue getPendingRestores()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.Queue $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Queue mPendingRestores>;

        return $r1;
    }

    public java.lang.Object getQueueLock()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        return $r1;
    }

    public java.security.SecureRandom getRng()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.security.SecureRandom $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.security.SecureRandom mRng>;

        return $r1;
    }

    public android.app.PendingIntent getRunInitIntent()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.PendingIntent $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.app.PendingIntent mRunInitIntent>;

        return $r1;
    }

    public com.android.server.backup.TransportManager getTransportManager()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.TransportManager $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        return $r1;
    }

    public int getUserId()
    {
        com.android.server.backup.UserBackupManagerService r0;
        int $i0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        return $i0;
    }

    public com.android.server.backup.UserBackupManagerService$BackupWakeLock getWakelock()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        return $r1;
    }

    public void handleCancel(int, boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i2, $i3, $i4, $i5, $i6, i8, i9;
        boolean z0;
        java.lang.Object r1, $r4, $r18;
        com.android.server.backup.internal.Operation r2, r16;
        android.util.SparseArray $r3, $r14;
        com.android.server.backup.BackupRestoreTask $r5, $r6;
        java.lang.String $r8, $r10, $r11, $r13;
        com.android.server.backup.internal.BackupHandler $r12;
        java.lang.Throwable $r15;
        java.lang.StringBuilder r17;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.backup.internal.Operation) $r4;

     label02:
        if r2 == null goto label05;

     label03:
        i8 = r2.<com.android.server.backup.internal.Operation: int state>;

     label04:
        goto label06;

     label05:
        i8 = -1;

     label06:
        if i8 != 1 goto label11;

     label07:
        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r13 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i6, "Operation already got an ack.Should have been removed from mCurrentOperations.");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

     label08:
        r16 = null;

     label09:
        $r14 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r14.<android.util.SparseArray: void delete(int)>(i0);

     label10:
        goto label17;

     label11:
        r16 = r2;

        if i8 != 0 goto label17;

     label12:
        i9 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancel: token=");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i9, $r10);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        r2.<com.android.server.backup.internal.Operation: int state> = -1;

        $i2 = r2.<com.android.server.backup.internal.Operation: int type>;

        if $i2 == 0 goto label15;

     label13:
        r16 = r2;

     label14:
        $i5 = r2.<com.android.server.backup.internal.Operation: int type>;

        if $i5 != 1 goto label17;

     label15:
        $r12 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $i3 = r2.<com.android.server.backup.internal.Operation: int type>;

        $i4 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: int getMessageIdForOperationType(int)>($i3);

        virtualinvoke $r12.<com.android.server.backup.internal.BackupHandler: void removeMessages(int)>($i4);

     label16:
        r16 = r2;

     label17:
        $r18 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r18.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label18:
        if r16 == null goto label19;

        $r5 = r16.<com.android.server.backup.internal.Operation: com.android.server.backup.BackupRestoreTask callback>;

        if $r5 == null goto label19;

        $r6 = r16.<com.android.server.backup.internal.Operation: com.android.server.backup.BackupRestoreTask callback>;

        interfaceinvoke $r6.<com.android.server.backup.BackupRestoreTask: void handleCancel(boolean)>(z0);

     label19:
        return;

     label20:
        $r15 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public boolean hasBackupPassword()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.BackupPasswordManager $r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupPasswordManager mBackupPasswordManager>;

        $z0 = virtualinvoke $r1.<com.android.server.backup.BackupPasswordManager: boolean hasBackupPassword()>();

        return $z0;
    }

    void initializeBackupEnableState()
    {
        com.android.server.backup.UserBackupManagerService r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $z0 = staticinvoke <com.android.server.backup.UserBackupManagerFilePersistedSettings: boolean readBackupEnableState(int)>($i0);

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void setBackupEnabled(boolean)>($z0);

        return;
    }

    public void initializeTransports(java.lang.String[], android.app.backup.IBackupObserver)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.backup.IBackupObserver r1;
        int i0;
        long l1;
        com.android.server.backup._$$Lambda$UserBackupManagerService$pLslHGi1wuuGrjS32QbMlDjlGbM r2;
        com.android.server.backup.internal.PerformInitializeTask r3;
        android.content.Context $r4;
        java.lang.StringBuilder $r5;
        java.util.List $r7;
        java.lang.String $r9, $r10;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r11;
        java.lang.Throwable $r12;
        java.lang.String[] r13;
        com.android.server.backup.internal.BackupHandler r15;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r13 := @parameter0: java.lang.String[];

        r1 := @parameter1: android.app.backup.IBackupObserver;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "initializeTransport");

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initializeTransport(): ");

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r13);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r9);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r11 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r11.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        r2 = new com.android.server.backup._$$Lambda$UserBackupManagerService$pLslHGi1wuuGrjS32QbMlDjlGbM;

        specialinvoke r2.<com.android.server.backup._$$Lambda$UserBackupManagerService$pLslHGi1wuuGrjS32QbMlDjlGbM: void <init>(com.android.server.backup.UserBackupManagerService)>(r0);

        r15 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r3 = new com.android.server.backup.internal.PerformInitializeTask;

        specialinvoke r3.<com.android.server.backup.internal.PerformInitializeTask: void <init>(com.android.server.backup.UserBackupManagerService,java.lang.String[],android.app.backup.IBackupObserver,com.android.server.backup.internal.OnTaskFinishedListener)>(r0, r13, r1, r2);

        virtualinvoke r15.<com.android.server.backup.internal.BackupHandler: boolean post(java.lang.Runnable)>(r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isAppEligibleForBackup(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        com.android.server.backup.transport.TransportClient r1;
        boolean z0;
        android.content.Context $r2;
        com.android.server.backup.TransportManager $r3, $r5;
        int $i1;
        android.content.pm.PackageManager $r4;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "isAppEligibleForBackup");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r1 = virtualinvoke $r3.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getCurrentTransportClient(java.lang.String)>("BMS.isAppEligibleForBackup");

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        z0 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appIsRunningAndEligibleForBackupWithTransport(com.android.server.backup.transport.TransportClient,java.lang.String,android.content.pm.PackageManager,int)>(r1, r7, $r4, $i1);

     label2:
        if r1 == null goto label4;

     label3:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r5.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, "BMS.isAppEligibleForBackup");

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean isBackupEnabled()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "isBackupEnabled");

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled>;

        return $z0;
    }

    public boolean isBackupOperationInProgress()
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object r1, $r4;
        android.util.SparseArray $r2, $r3;
        int $i0, $i1, $i2, i3;
        java.lang.Throwable $r5;
        com.android.server.backup.internal.Operation r6;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

        i3 = 0;

     label1:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i3 >= $i0 goto label4;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r6 = (com.android.server.backup.internal.Operation) $r4;

        $i1 = r6.<com.android.server.backup.internal.Operation: int type>;

        if $i1 != 2 goto label3;

        $i2 = r6.<com.android.server.backup.internal.Operation: int state>;

        if $i2 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        return 0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isBackupRunning()
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mBackupRunning>;

        return $z0;
    }

    public boolean isEnabled()
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled>;

        return $z0;
    }

    public boolean isRestoreInProgress()
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mIsRestoreInProgress>;

        return $z0;
    }

    public boolean isSetupComplete()
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        return $z0;
    }

    public void lambda$clearBackupData$3$UserBackupManagerService(com.android.server.backup.transport.TransportClient, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.transport.TransportClient r1;
        java.lang.String r2;
        com.android.server.backup.TransportManager $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: com.android.server.backup.transport.TransportClient;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r3.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, r2);

        return;
    }

    public void lambda$initializeTransports$2$UserBackupManagerService(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r2;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r2.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        return;
    }

    public void lambda$parseLeftoverJournals$0$UserBackupManagerService(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i0, "Found stale backup journal, scheduling");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r2);

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void dataChangedImpl(java.lang.String)>(r1);

        return;
    }

    public void lambda$requestBackup$1$UserBackupManagerService(com.android.server.backup.transport.TransportClient, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.transport.TransportClient r1;
        java.lang.String r2;
        com.android.server.backup.TransportManager $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: com.android.server.backup.transport.TransportClient;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r3.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, r2);

        return;
    }

    public void lambda$restoreAtInstall$6$UserBackupManagerService(com.android.server.backup.transport.TransportClient, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.transport.TransportClient r1;
        java.lang.String r2;
        com.android.server.backup.TransportManager $r3;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r4;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: com.android.server.backup.transport.TransportClient;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r3.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, r2);

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r4.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        return;
    }

    public void lambda$selectBackupTransportAsync$5$UserBackupManagerService(android.content.ComponentName, android.app.backup.ISelectBackupTransportCallback)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.backup.ISelectBackupTransportCallback r1;
        int i0, $i1, $i2, i3;
        com.android.server.backup.TransportManager $r2, $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5, $r7, r9, r10;
        com.android.server.backup.transport.TransportNotRegisteredException $r6;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.app.backup.ISelectBackupTransportCallback;

        r9 = null;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        i0 = virtualinvoke $r2.<com.android.server.backup.TransportManager: int registerAndSelectTransport(android.content.ComponentName)>(r8);

        i3 = i0;

        if i0 != 0 goto label06;

        r9 = null;

     label01:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r10 = virtualinvoke $r3.<com.android.server.backup.TransportManager: java.lang.String getTransportName(android.content.ComponentName)>(r8);

     label02:
        r9 = r10;

     label03:
        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void updateStateForTransport(java.lang.String)>(r10);

     label04:
        r9 = r10;

        i3 = i0;

        goto label06;

     label05:
        $r6 := @caughtexception;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r7 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i2, "Transport got unregistered");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r7);

        i3 = -1;

     label06:
        if r9 == null goto label09;

     label07:
        interfaceinvoke r1.<android.app.backup.ISelectBackupTransportCallback: void onSuccess(java.lang.String)>(r9);

     label08:
        goto label10;

     label09:
        interfaceinvoke r1.<android.app.backup.ISelectBackupTransportCallback: void onFailure(int)>(i3);

     label10:
        goto label12;

     label11:
        $r4 := @caughtexception;

        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i1, "ISelectBackupTransportCallback listener not available");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r5);

     label12:
        return;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label01 to label02 with label05;
        catch com.android.server.backup.transport.TransportNotRegisteredException from label03 to label04 with label05;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    public void lambda$setBackupEnabled$4$UserBackupManagerService(java.util.List, java.util.List, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.List r1, r7;
        java.lang.String r2, r3, $r6;
        com.android.server.backup.TransportManager $r4;
        com.android.server.backup.transport.TransportNotRegisteredException $r5;
        int $i0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r7 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

     label1:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r3 = virtualinvoke $r4.<com.android.server.backup.TransportManager: java.lang.String getTransportDirName(java.lang.String)>(r2);

     label2:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;

     label3:
        $r5 := @caughtexception;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r6 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i0, "Unexpected unregistered transport");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r6, $r5);

        return;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label1 to label2 with label3;
    }

    public android.content.ComponentName[] listAllTransportComponents()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.Context $r1;
        com.android.server.backup.TransportManager $r2;
        android.content.ComponentName[] $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "listAllTransportComponents");

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r3 = virtualinvoke $r2.<com.android.server.backup.TransportManager: android.content.ComponentName[] getRegisteredTransportComponents()>();

        return $r3;
    }

    public java.lang.String[] listAllTransports()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.Context $r1;
        com.android.server.backup.TransportManager $r2;
        java.lang.String[] $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "listAllTransports");

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r3 = virtualinvoke $r2.<com.android.server.backup.TransportManager: java.lang.String[] getRegisteredTransportNames()>();

        return $r3;
    }

    public void logBackupComplete(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, $i1, i2;
        boolean $z0;
        com.android.server.backup.BackupManagerConstants $r5;
        com.android.server.backup.ProcessedPackagesJournal $r6;
        android.content.Intent $r7;
        android.content.Context $r12;
        android.os.UserHandle $r13;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("@pm@");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        r2 = virtualinvoke $r5.<com.android.server.backup.BackupManagerConstants: java.lang.String[] getBackupFinishedNotificationReceivers()>();

        i0 = lengthof r2;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        r3 = r2[i2];

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>()>();

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.BACKUP_FINISHED");

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r3);

        virtualinvoke $r7.<android.content.Intent: android.content.Intent addFlags(int)>(268435488);

        virtualinvoke $r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("packageName", r1);

        $r12 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r13 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        virtualinvoke $r12.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r7, $r13);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.ProcessedPackagesJournal mProcessedPackagesJournal>;

        virtualinvoke $r6.<com.android.server.backup.ProcessedPackagesJournal: void addPackage(java.lang.String)>(r1);

        return;
    }

    public android.app.backup.BackupAgent makeMetadataAgent()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.PackageManagerBackupAgent $r2;
        int $i0, $i1;
        android.content.pm.PackageManager $r3;
        android.content.Context $r4;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r2 = new com.android.server.backup.PackageManagerBackupAgent;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        specialinvoke $r2.<com.android.server.backup.PackageManagerBackupAgent: void <init>(android.content.pm.PackageManager,int)>($r3, $i0);

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<com.android.server.backup.PackageManagerBackupAgent: void attach(android.content.Context)>($r4);

        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        virtualinvoke $r2.<com.android.server.backup.PackageManagerBackupAgent: void onCreate(android.os.UserHandle)>($r5);

        return $r2;
    }

    public com.android.server.backup.PackageManagerBackupAgent makeMetadataAgent(java.util.List)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.PackageManagerBackupAgent $r1;
        int $i0, $i1;
        android.content.pm.PackageManager $r2;
        android.content.Context $r3;
        android.os.UserHandle $r4;
        java.util.List r5;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r5 := @parameter0: java.util.List;

        $r1 = new com.android.server.backup.PackageManagerBackupAgent;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        specialinvoke $r1.<com.android.server.backup.PackageManagerBackupAgent: void <init>(android.content.pm.PackageManager,java.util.List,int)>($r2, r5, $i0);

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<com.android.server.backup.PackageManagerBackupAgent: void attach(android.content.Context)>($r3);

        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        virtualinvoke $r1.<com.android.server.backup.PackageManagerBackupAgent: void onCreate(android.os.UserHandle)>($r4);

        return $r1;
    }

    public void opComplete(int, long)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, i2, $i3, $i4, $i5;
        long l1;
        java.lang.Object r1, $r4, $r20;
        com.android.server.backup.internal.Operation r2, r18;
        android.util.SparseArray $r3, $r15, $r16;
        com.android.server.backup.BackupRestoreTask $r5, $r6;
        java.lang.Long $r7;
        com.android.server.backup.internal.BackupHandler $r8, $r9;
        java.lang.String $r11, $r13, $r14;
        java.lang.Throwable $r17;
        java.lang.StringBuilder r19;
        android.util.Pair r21;
        android.os.Message r22;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.backup.internal.Operation) $r4;

     label02:
        r18 = r2;

        if r2 == null goto label14;

     label03:
        $i3 = r2.<com.android.server.backup.internal.Operation: int state>;

        if $i3 != -1 goto label07;

     label04:
        r18 = null;

     label05:
        $r16 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r16.<android.util.SparseArray: void delete(int)>(i0);

     label06:
        goto label14;

     label07:
        $i4 = r2.<com.android.server.backup.internal.Operation: int state>;

        if $i4 != 1 goto label11;

        i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received duplicate ack for token=");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i2, $r13);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

     label08:
        r18 = null;

     label09:
        $r15 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r15.<android.util.SparseArray: void remove(int)>(i0);

     label10:
        goto label14;

     label11:
        r18 = r2;

     label12:
        $i5 = r2.<com.android.server.backup.internal.Operation: int state>;

        if $i5 != 0 goto label14;

        r2.<com.android.server.backup.internal.Operation: int state> = 1;

     label13:
        r18 = r2;

     label14:
        $r20 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r20.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label15:
        if r18 == null goto label16;

        $r5 = r18.<com.android.server.backup.internal.Operation: com.android.server.backup.BackupRestoreTask callback>;

        if $r5 == null goto label16;

        $r6 = r18.<com.android.server.backup.internal.Operation: com.android.server.backup.BackupRestoreTask callback>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        r21 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r22 = virtualinvoke $r8.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(21, r21);

        $r9 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r9.<com.android.server.backup.internal.BackupHandler: boolean sendMessage(android.os.Message)>(r22);

     label16:
        return;

     label17:
        $r17 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void prepareOperationTimeout(int, long, com.android.server.backup.BackupRestoreTask, int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, i2, i3, $i4;
        long l1;
        java.lang.Object r1;
        android.util.SparseArray r2;
        com.android.server.backup.internal.Operation r3;
        com.android.server.backup.internal.BackupHandler $r4, $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r12, $r13;
        java.lang.Throwable $r14;
        com.android.server.backup.BackupRestoreTask r15;
        android.os.Message r17;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r15 := @parameter2: com.android.server.backup.BackupRestoreTask;

        i2 := @parameter3: int;

        if i2 == 0 goto label1;

        if i2 == 1 goto label1;

        i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareOperationTimeout() doesn\'t support operation ");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of type ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i3, $r12);

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        return;

     label1:
        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label2:
        r2 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        r3 = new com.android.server.backup.internal.Operation;

        specialinvoke r3.<com.android.server.backup.internal.Operation: void <init>(int,com.android.server.backup.BackupRestoreTask,int)>(0, r15, i2);

        virtualinvoke r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $i4 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: int getMessageIdForOperationType(int)>(i2);

        r17 = virtualinvoke $r4.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>($i4, i0, 0, r15);

        $r5 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r5.<com.android.server.backup.internal.BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r17, l1);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r14 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r14;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void putOperation(int, com.android.server.backup.internal.Operation)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray $r2;
        java.lang.Throwable $r3;
        com.android.server.backup.internal.Operation r4;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        r4 := @parameter1: com.android.server.backup.internal.Operation;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public byte[] randomBytes(int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i1;
        byte[] r1;
        java.security.SecureRandom $r2;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        $i1 = i0 / 8;

        r1 = newarray (byte)[$i1];

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: java.security.SecureRandom mRng>;

        virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        return r1;
    }

    public void recordInitPending(boolean, java.lang.String, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0;
        java.lang.Object r1;
        java.io.File r2, $r3, r10;
        android.util.ArraySet $r4, $r5;
        java.lang.Throwable $r6, $r7;
        java.lang.String r8, r9;
        java.io.FileOutputStream r11;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r1;

     label01:
        r2 = new java.io.File;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r9);

        r10 = new java.io.File;

        specialinvoke r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "_need_init_");

     label02:
        if z0 == 0 goto label08;

     label03:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>(r8);

     label04:
        r11 = new java.io.FileOutputStream;

        specialinvoke r11.<java.io.FileOutputStream: void <init>(java.io.File)>(r10);

        virtualinvoke r11.<java.io.FileOutputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

     label07:
        goto label09;

     label08:
        virtualinvoke r10.<java.io.File: boolean delete()>();

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.util.ArraySet mPendingInits>;

        virtualinvoke $r4.<android.util.ArraySet: boolean remove(java.lang.Object)>(r8);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void removeOperation(int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r3;
        android.util.SparseArray $r2, $r4;
        java.lang.String $r6, $r8, $r9;
        java.lang.Throwable $r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r3 != null goto label2;

        i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate remove for operation. token=");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i1, $r8);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

     label2:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int requestBackup(java.lang.String[], android.app.backup.IBackupObserver, int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String[] r1;
        android.app.backup.IBackupObserver r2;
        int i0, $i1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: android.app.backup.IBackupObserver;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>(r1, r2, null, i0);

        return $i1;
    }

    public int requestBackup(java.lang.String[], android.app.backup.IBackupObserver, android.app.backup.IBackupManagerMonitor, int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.backup.IBackupObserver r1;
        android.app.backup.IBackupManagerMonitor r2;
        java.lang.String r3, r8, $r10, $r18, $r19, $r23, $r35, $r38, $r39;
        com.android.server.backup.transport.TransportClient r4;
        int i0, $i1, $i3, $i5, $i6, $i7, $i9, $i10, $i11, i12, i13, i14;
        android.content.Context $r9;
        java.lang.IllegalArgumentException $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, z12;
        java.lang.StringBuilder $r13;
        com.android.server.backup.TransportManager $r21, $r22, $r24;
        com.android.server.backup._$$Lambda$UserBackupManagerService$sAYsrY5C5zAl7EgKgwo188kx6JE $r25;
        java.util.ArrayList $r26, $r27;
        java.lang.Object[] $r28;
        java.lang.Integer $r29, $r30, $r31;
        com.android.server.backup.internal.BackupHandler $r32, $r34;
        com.android.server.backup.params.BackupParams $r33;
        android.content.pm.PackageManager $r36;
        android.content.pm.ApplicationInfo $r37;
        com.android.server.backup.transport.TransportNotRegisteredException $r40;
        android.content.pm.PackageManager$NameNotFoundException $r42;
        java.lang.String[] r43;
        android.content.pm.PackageInfo r44;
        android.os.Message r46;
        byte b15;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r43 := @parameter0: java.lang.String[];

        r1 := @parameter1: android.app.backup.IBackupObserver;

        r2 := @parameter2: android.app.backup.IBackupManagerMonitor;

        i12 := @parameter3: int;

        $r9 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "requestBackup");

        if r43 == null goto label19;

        $i3 = lengthof r43;

        if $i3 < 1 goto label19;

        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled>;

        if $z0 == 0 goto label16;

        $z4 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z4 != 0 goto label01;

        goto label16;

     label01:
        $r22 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r21 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        $r23 = virtualinvoke $r21.<com.android.server.backup.TransportManager: java.lang.String getCurrentTransportName()>();

        r3 = virtualinvoke $r22.<com.android.server.backup.TransportManager: java.lang.String getTransportDirName(java.lang.String)>($r23);

        $r24 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r4 = virtualinvoke $r24.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getCurrentTransportClientOrThrow(java.lang.String)>("BMS.requestBackup()");

     label02:
        $r25 = new com.android.server.backup._$$Lambda$UserBackupManagerService$sAYsrY5C5zAl7EgKgwo188kx6JE;

        specialinvoke $r25.<com.android.server.backup._$$Lambda$UserBackupManagerService$sAYsrY5C5zAl7EgKgwo188kx6JE: void <init>(com.android.server.backup.UserBackupManagerService,com.android.server.backup.transport.TransportClient)>(r0, r4);

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r43;

        i13 = 0;

     label03:
        if i13 >= i0 goto label12;

        r8 = r43[i13];

        $r35 = "@pm@";

        $z6 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z6 == 0 goto label04;

        virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        goto label11;

     label04:
        $r36 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $i10 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r44 = virtualinvoke $r36.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r8, 134217728, $i10);

        $r37 = r44.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i11 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $z7 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo,int)>($r37, $i11);

        if $z7 != 0 goto label06;

        staticinvoke <com.android.server.backup.utils.BackupObserverUtils: void sendBackupOnPackageResult(android.app.backup.IBackupObserver,java.lang.String,int)>(r1, r8, -2001);

     label05:
        goto label11;

     label06:
        $z8 = staticinvoke <com.android.server.backup.utils.AppBackupUtils: boolean appGetsFullBackup(android.content.pm.PackageInfo)>(r44);

        if $z8 == 0 goto label08;

        $r39 = r44.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r26.<java.util.ArrayList: boolean add(java.lang.Object)>($r39);

     label07:
        goto label09;

     label08:
        $r38 = r44.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>($r38);

     label09:
        goto label11;

     label10:
        $r42 := @caughtexception;

        staticinvoke <com.android.server.backup.utils.BackupObserverUtils: void sendBackupOnPackageResult(android.app.backup.IBackupObserver,java.lang.String,int)>(r1, r8, -2002);

     label11:
        i13 = i13 + 1;

        goto label03;

     label12:
        $r28 = newarray (java.lang.Object)[3];

        $i5 = lengthof r43;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r28[0] = $r29;

        $i6 = virtualinvoke $r27.<java.util.ArrayList: int size()>();

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r28[1] = $r30;

        $i7 = virtualinvoke $r26.<java.util.ArrayList: int size()>();

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r28[2] = $r31;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(2828, $r28);

        $i9 = i12 & 1;

        if $i9 == 0 goto label13;

        z12 = 1;

        goto label14;

     label13:
        z12 = 0;

     label14:
        $r32 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r46 = virtualinvoke $r32.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int)>(15);

        $r33 = new com.android.server.backup.params.BackupParams;

        specialinvoke $r33.<com.android.server.backup.params.BackupParams: void <init>(com.android.server.backup.transport.TransportClient,java.lang.String,java.util.ArrayList,java.util.ArrayList,android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,com.android.server.backup.internal.OnTaskFinishedListener,boolean,boolean)>(r4, r3, $r27, $r26, r1, r2, $r25, 1, z12);

        r46.<android.os.Message: java.lang.Object obj> = $r33;

        $r34 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r34.<com.android.server.backup.internal.BackupHandler: boolean sendMessage(android.os.Message)>(r46);

        return 0;

     label15:
        $r40 := @caughtexception;

        staticinvoke <com.android.server.backup.utils.BackupObserverUtils: void sendBackupFinished(android.app.backup.IBackupObserver,int)>(r1, -1000);

        staticinvoke <com.android.server.backup.utils.BackupManagerMonitorUtils: android.app.backup.IBackupManagerMonitor monitorEvent(android.app.backup.IBackupManagerMonitor,int,android.content.pm.PackageInfo,int,android.os.Bundle)>(r2, 50, null, 1, null);

        return -1000;

     label16:
        i14 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup requested but enabled=");

        $z1 = r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setupComplete=");

        $z2 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i14, $r18);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

        staticinvoke <com.android.server.backup.utils.BackupObserverUtils: void sendBackupFinished(android.app.backup.IBackupObserver,int)>(r1, -2001);

        $z3 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z3 == 0 goto label17;

        b15 = 13;

        goto label18;

     label17:
        b15 = 14;

     label18:
        staticinvoke <com.android.server.backup.utils.BackupManagerMonitorUtils: android.app.backup.IBackupManagerMonitor monitorEvent(android.app.backup.IBackupManagerMonitor,int,android.content.pm.PackageInfo,int,android.os.Bundle)>(r2, b15, null, 3, null);

        return -2001;

     label19:
        $i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i1, "No packages named for backup request");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        staticinvoke <com.android.server.backup.utils.BackupObserverUtils: void sendBackupFinished(android.app.backup.IBackupObserver,int)>(r1, -1000);

        staticinvoke <com.android.server.backup.utils.BackupManagerMonitorUtils: android.app.backup.IBackupManagerMonitor monitorEvent(android.app.backup.IBackupManagerMonitor,int,android.content.pm.PackageInfo,int,android.os.Bundle)>(r2, 49, null, 1, null);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No packages are provided for backup");

        throw $r12;

        catch com.android.server.backup.transport.TransportNotRegisteredException from label01 to label02 with label15;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label10;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label10;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label10;
    }

    public void resetBackupState(java.io.File)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.File[] r1;
        com.android.server.backup.ProcessedPackagesJournal $r2;
        android.util.SparseArray $r3, $r4, r14;
        java.lang.Object $r5, $r6, r12;
        boolean $z0, $z1;
        java.lang.String $r7, $r8;
        java.lang.Throwable $r9, $r10;
        java.io.File r11, r13;
        int i0, i1, i2, i3;
        java.util.HashSet r15;
        java.util.Iterator r16;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r11 := @parameter0: java.io.File;

        r12 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r12;

     label01:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.ProcessedPackagesJournal mProcessedPackagesJournal>;

        virtualinvoke $r2.<com.android.server.backup.ProcessedPackagesJournal: void reset()>();

        r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken> = 0L;

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void writeRestoreTokens()>();

        r1 = virtualinvoke r11.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r1;

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

        r13 = r1[i1];

     label04:
        $r8 = virtualinvoke r13.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("_need_init_");

        if $z1 != 0 goto label05;

        virtualinvoke r13.<java.io.File: boolean delete()>();

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r12;

     label07:
        r14 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r14;

     label08:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        i2 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

     label09:
        i3 = 0;

     label10:
        if i3 >= i2 goto label17;

     label11:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r15 = (java.util.HashSet) $r5;

     label12:
        if r15 == null goto label16;

     label13:
        r16 = virtualinvoke r15.<java.util.HashSet: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r6 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void dataChangedImpl(java.lang.String)>($r7);

     label15:
        goto label14;

     label16:
        i3 = i3 + 1;

        goto label10;

     label17:
        exitmonitor r14;

     label18:
        return;

     label19:
        $r10 := @caughtexception;

     label20:
        exitmonitor r14;

     label21:
        throw $r10;

     label22:
        $r9 := @caughtexception;

     label23:
        exitmonitor r12;

     label24:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public void restoreAtInstall(java.lang.String, int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        android.os.Message r1;
        int $i1, $i4, $i7, $i9, i12, i13, i14, i15, i16;
        java.lang.StringBuilder $r2, $r20, $r26, $r33;
        java.lang.String $r6, $r9, $r11, $r12, $r14, $r23, $r24, $r25, $r30, $r31, $r35, $r37, $r38, r41;
        byte $b3;
        com.android.server.backup.TransportManager $r13, $r15;
        boolean $z0, $z2, z3, z4;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r16;
        com.android.server.backup.internal.BackupHandler $r17, $r19;
        com.android.server.backup.params.RestoreParams $r18;
        java.lang.Exception $r32;
        android.os.RemoteException $r39, $r40;
        com.android.server.backup.transport.TransportClient r44;
        com.android.server.backup._$$Lambda$UserBackupManagerService$TB8LUl0TwUK9CmmdepXioEU4Qxg r46;
        android.content.pm.IPackageManager r49;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r41 := @parameter0: java.lang.String;

        i12 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label01;

        i13 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attemping install-time restore");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i13, $r30);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r31);

        return;

     label01:
        z3 = 0;

        l0 = virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: long getAvailableRestoreToken(java.lang.String)>(r41);

        i14 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreAtInstall pkg=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restoreSet=");

        $r9 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i14, $r11);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label02;

        z3 = 1;

     label02:
        $r13 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r44 = virtualinvoke $r13.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getCurrentTransportClient(java.lang.String)>("BMS.restoreAtInstall()");

        if r44 != null goto label03;

        $i7 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r25 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i7, "No transport client");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r25);

        z3 = 1;

     label03:
        $z0 = r0.<com.android.server.backup.UserBackupManagerService: boolean mAutoRestore>;

        if $z0 != 0 goto label04;

        i15 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-restorable state: auto=");

        $z2 = r0.<com.android.server.backup.UserBackupManagerService: boolean mAutoRestore>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i15, $r23);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r24);

        z3 = 1;

        goto label04;

     label04:
        z4 = z3;

        if z3 != 0 goto label08;

     label05:
        $r16 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        virtualinvoke $r16.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        r46 = new com.android.server.backup._$$Lambda$UserBackupManagerService$TB8LUl0TwUK9CmmdepXioEU4Qxg;

        specialinvoke r46.<com.android.server.backup._$$Lambda$UserBackupManagerService$TB8LUl0TwUK9CmmdepXioEU4Qxg: void <init>(com.android.server.backup.UserBackupManagerService,com.android.server.backup.transport.TransportClient)>(r0, r44);

        $r17 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r1 = virtualinvoke $r17.<com.android.server.backup.internal.BackupHandler: android.os.Message obtainMessage(int)>(3);

        $r18 = staticinvoke <com.android.server.backup.params.RestoreParams: com.android.server.backup.params.RestoreParams createForRestoreAtInstall(com.android.server.backup.transport.TransportClient,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,java.lang.String,int,com.android.server.backup.internal.OnTaskFinishedListener)>(r44, null, null, l0, r41, i12, r46);

        r1.<android.os.Message: java.lang.Object obj> = $r18;

        $r19 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r19.<com.android.server.backup.internal.BackupHandler: boolean sendMessage(android.os.Message)>(r1);

     label06:
        z4 = z3;

        goto label08;

     label07:
        $r32 := @caughtexception;

        i16 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to contact transport: ");

        $r35 = virtualinvoke $r32.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i16, $r37);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r38);

        z4 = 1;

     label08:
        if z4 == 0 goto label16;

        if r44 == null goto label09;

        $r15 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r15.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r44, "BMS.restoreAtInstall()");

     label09:
        $i4 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r14 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i4, "Finishing install immediately");

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

     label10:
        r49 = r0.<com.android.server.backup.UserBackupManagerService: android.content.pm.IPackageManager mPackageManagerBinder>;

     label11:
        interfaceinvoke r49.<android.content.pm.IPackageManager: void finishPackageInstall(int,boolean)>(i12, 0);

     label12:
        goto label15;

     label13:
        $r39 := @caughtexception;

        goto label15;

     label14:
        $r40 := @caughtexception;

     label15:
        goto label16;

     label16:
        return;

        catch java.lang.Exception from label05 to label06 with label07;
        catch android.os.RemoteException from label10 to label11 with label14;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    public void restoreWidgetData(java.lang.String, byte[])
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1;
        byte[] r2;
        int $i0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        staticinvoke <com.android.server.AppWidgetBackupBridge: void restoreWidgetState(java.lang.String,byte[],int)>(r1, r2, $i0);

        return;
    }

    public void scheduleNextFullBackupJob(long)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.Object r1, $r5;
        long l0, $l4, l7, l8, l9, l10, l11;
        java.util.ArrayList $r2, $r4;
        int $i1, $i2, $i6;
        java.lang.String $r3;
        com.android.server.backup.fullbackup.FullBackupEntry $r6;
        com.android.server.backup.BackupManagerConstants $r7, $r8;
        byte $b5;
        android.content.Context $r9;
        java.lang.Throwable $r10, $r11, r12;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        l7 := @parameter0: long;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label06;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r6 = (com.android.server.backup.fullbackup.FullBackupEntry) $r5;

        l8 = $r6.<com.android.server.backup.fullbackup.FullBackupEntry: long lastBackup>;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l9 = $l4 - l8;

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        l0 = virtualinvoke $r7.<com.android.server.backup.BackupManagerConstants: long getFullBackupIntervalMilliseconds()>();

     label02:
        $b5 = l9 cmp l0;

        if $b5 >= 0 goto label03;

        l10 = l0 - l9;

        goto label04;

     label03:
        l10 = 0L;

     label04:
        l11 = staticinvoke <java.lang.Math: long max(long,long)>(l7, l10);

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r9 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.FullBackupJob: void schedule(int,android.content.Context,long,com.android.server.backup.BackupManagerConstants)>($i6, $r9, l11, $r8);

     label05:
        goto label07;

     label06:
        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r3 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i2, "Full backup queue empty; not scheduling");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r3);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r11 := @caughtexception;

        r12 = $r11;

     label10:
        exitmonitor r1;

     label11:
        throw r12;

     label12:
        $r10 := @caughtexception;

        r12 = $r10;

        goto label10;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public java.lang.String selectBackupTransport(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        java.lang.String r1, $r9, $r10, r12;
        int i1;
        java.lang.StringBuilder r2;
        android.content.Context $r3;
        com.android.server.backup.TransportManager $r4;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r12 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "selectBackupTransport");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r1 = virtualinvoke $r4.<com.android.server.backup.TransportManager: java.lang.String selectTransport(java.lang.String)>(r12);

        specialinvoke r0.<com.android.server.backup.UserBackupManagerService: void updateStateForTransport(java.lang.String)>(r12);

        i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("selectBackupTransport(transport = ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): previous transport = ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i1, $r9);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r1;

     label3:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void selectBackupTransportAsync(android.content.ComponentName, android.app.backup.ISelectBackupTransportCallback)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.backup.ISelectBackupTransportCallback r1;
        long l0;
        int i1;
        android.content.Context $r2;
        java.lang.String $r6, $r7, r10;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        java.lang.StringBuilder r11;
        com.android.server.backup.internal.BackupHandler r12;
        com.android.server.backup._$$Lambda$UserBackupManagerService$076XriH8_AsUaXKFvRearB4ERls r13;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.app.backup.ISelectBackupTransportCallback;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "selectBackupTransportAsync");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r10 = virtualinvoke r9.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("selectBackupTransportAsync(transport = ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i1, $r6);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r7);

        r12 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        r13 = new com.android.server.backup._$$Lambda$UserBackupManagerService$076XriH8_AsUaXKFvRearB4ERls;

        specialinvoke r13.<com.android.server.backup._$$Lambda$UserBackupManagerService$076XriH8_AsUaXKFvRearB4ERls: void <init>(com.android.server.backup.UserBackupManagerService,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>(r0, r9, r1);

        virtualinvoke r12.<com.android.server.backup.internal.BackupHandler: boolean post(java.lang.Runnable)>(r13);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setAncestralPackages(java.util.Set)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.Set r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.util.Set;

        r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages> = r1;

        return;
    }

    public void setAncestralSerialNumber(long)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;
        int i1, $i3;
        android.content.Context $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r6, $r10;
        java.lang.Throwable $r7, $r8, $r9;
        java.io.RandomAccessFile r12;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setAncestralSerialNumber");

        i1 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting ancestral work profile id to ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i1, $r5);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

     label01:
        r12 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: java.io.RandomAccessFile getAncestralSerialNumberFile()>();

     label02:
        virtualinvoke r12.<java.io.RandomAccessFile: void writeLong(long)>(l0);

     label03:
        if r12 == null goto label05;

     label04:
        virtualinvoke r12.<java.io.RandomAccessFile: void close()>();

     label05:
        goto label13;

     label06:
        $r8 := @caughtexception;

        if r12 == null goto label11;

     label07:
        virtualinvoke r12.<java.io.RandomAccessFile: void close()>();

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

     label10:
        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

     label11:
        throw $r8;

     label12:
        $r9 := @caughtexception;

        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r10 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i3, "Unable to write to work profile serial mapping file:");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r10, $r9);

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    void setAncestralSerialNumberFile(java.io.File)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.io.File r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.io.File;

        r0.<com.android.server.backup.UserBackupManagerService: java.io.File mAncestralSerialNumberFile> = r1;

        return;
    }

    public void setAncestralToken(long)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        l0 := @parameter0: long;

        r0.<com.android.server.backup.UserBackupManagerService: long mAncestralToken> = l0;

        return;
    }

    public void setAutoRestore(boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0;
        long l0;
        android.content.Context $r1, $r7;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r6;
        int $i2, i3;
        java.lang.Throwable $r8, $r9;
        android.content.ContentResolver r11;
        byte b4;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setAutoRestore");

        i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto restore => ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i3, $r5);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        entermonitor r0;

     label02:
        $r7 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        r11 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label03:
        if z0 == 0 goto label04;

        b4 = 1;

        goto label05;

     label04:
        b4 = 0;

     label05:
        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "backup_auto_restore", b4, $i2);

        r0.<com.android.server.backup.UserBackupManagerService: boolean mAutoRestore> = z0;

        exitmonitor r0;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label07:
        $r9 := @caughtexception;

     label08:
        exitmonitor r0;

     label09:
        throw $r9;

     label10:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public void setBackupEnabled(boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0, z1, $z2, $z3;
        long l0, $l5;
        java.util.ArrayList r1, r2;
        com.android.server.backup._$$Lambda$UserBackupManagerService$C404OP5_rQYG326aUSsvijaNzdg r3;
        android.content.Context $r4, $r10, $r18;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, $r9, $r14, $r16;
        int $i2, $i3, $i4, $i6, i7, i8;
        android.app.AlarmManager $r11;
        android.app.PendingIntent $r12;
        java.lang.Object $r13, $r15, r23;
        com.android.server.backup.BackupManagerConstants $r17;
        java.lang.Throwable $r19, $r20, $r21;
        com.android.server.backup.TransportManager r24;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupEnabled");

        i7 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup enabled => ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i7, $r8);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        z1 = r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled>;

        entermonitor r0;

     label02:
        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        staticinvoke <com.android.server.backup.UserBackupManagerFilePersistedSettings: void writeBackupEnableState(int,boolean)>($i2, z0);

        r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled> = z0;

        exitmonitor r0;

     label03:
        r23 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r23;

     label04:
        if z0 == 0 goto label07;

        if z1 != 0 goto label07;

     label05:
        $z3 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z3 == 0 goto label07;

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r18 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r17 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        staticinvoke <com.android.server.backup.KeyValueBackupJob: void schedule(int,android.content.Context,com.android.server.backup.BackupManagerConstants)>($i6, $r18, $r17);

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void scheduleNextFullBackupJob(long)>(0L);

     label06:
        goto label16;

     label07:
        if z0 != 0 goto label16;

     label08:
        $i3 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r10 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.backup.KeyValueBackupJob: void cancel(int,android.content.Context)>($i3, $r10);

     label09:
        if z1 == 0 goto label16;

     label10:
        $z2 = r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete>;

        if $z2 == 0 goto label16;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r24 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        r3 = new com.android.server.backup._$$Lambda$UserBackupManagerService$C404OP5_rQYG326aUSsvijaNzdg;

        specialinvoke r3.<com.android.server.backup._$$Lambda$UserBackupManagerService$C404OP5_rQYG326aUSsvijaNzdg: void <init>(com.android.server.backup.UserBackupManagerService,java.util.List,java.util.List)>(r0, r1, r2);

        virtualinvoke r24.<com.android.server.backup.TransportManager: void forEachRegisteredTransport(java.util.function.Consumer)>(r3);

     label11:
        i8 = 0;

     label12:
        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        if i8 >= $i4 goto label15;

     label13:
        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        $r14 = (java.lang.String) $r13;

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i8);

        $r16 = (java.lang.String) $r15;

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void recordInitPending(boolean,java.lang.String,java.lang.String)>(1, $r14, $r16);

     label14:
        i8 = i8 + 1;

        goto label12;

     label15:
        $r11 = r0.<com.android.server.backup.UserBackupManagerService: android.app.AlarmManager mAlarmManager>;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r12 = r0.<com.android.server.backup.UserBackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r11.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(0, $l5, $r12);

     label16:
        exitmonitor r23;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label18:
        $r19 := @caughtexception;

     label19:
        exitmonitor r23;

     label20:
        throw $r19;

     label21:
        $r21 := @caughtexception;

     label22:
        exitmonitor r0;

     label23:
        throw $r21;

     label24:
        $r20 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label23 to label24 with label24;
    }

    public boolean setBackupPassword(java.lang.String, java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, r2;
        com.android.server.backup.BackupPasswordManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupPasswordManager mBackupPasswordManager>;

        $z0 = virtualinvoke $r3.<com.android.server.backup.BackupPasswordManager: boolean setBackupPassword(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    public void setBackupRunning(boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.backup.UserBackupManagerService: boolean mBackupRunning> = z0;

        return;
    }

    public void setClearingData(boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.backup.UserBackupManagerService: boolean mClearingData> = z0;

        return;
    }

    public void setCurrentToken(long)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        l0 := @parameter0: long;

        r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken> = l0;

        return;
    }

    public void setEnabled(boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.backup.UserBackupManagerService: boolean mEnabled> = z0;

        return;
    }

    public void setJournal(com.android.server.backup.DataChangedJournal)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.DataChangedJournal r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: com.android.server.backup.DataChangedJournal;

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.DataChangedJournal mJournal> = r1;

        return;
    }

    public void setLastBackupPass(long)
    {
        com.android.server.backup.UserBackupManagerService r0;
        long l0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        l0 := @parameter0: long;

        r0.<com.android.server.backup.UserBackupManagerService: long mLastBackupPass> = l0;

        return;
    }

    void setPowerManager(android.os.PowerManager)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.os.PowerManager r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: android.os.PowerManager;

        r0.<com.android.server.backup.UserBackupManagerService: android.os.PowerManager mPowerManager> = r1;

        return;
    }

    public void setRestoreInProgress(boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.backup.UserBackupManagerService: boolean mIsRestoreInProgress> = z0;

        return;
    }

    public void setRunningFullBackupTask(com.android.server.backup.fullbackup.PerformFullTransportBackupTask)
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.fullbackup.PerformFullTransportBackupTask r1;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: com.android.server.backup.fullbackup.PerformFullTransportBackupTask;

        r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.fullbackup.PerformFullTransportBackupTask mRunningFullBackupTask> = r1;

        return;
    }

    public void setSetupComplete(boolean)
    {
        com.android.server.backup.UserBackupManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.backup.UserBackupManagerService: boolean mSetupComplete> = z0;

        return;
    }

    public void setWorkSource(android.os.WorkSource)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.os.WorkSource r1;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r2;
        android.os.PowerManager$WakeLock $r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: android.os.WorkSource;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock mWakelock>;

        $r3 = staticinvoke <com.android.server.backup.UserBackupManagerService$BackupWakeLock: android.os.PowerManager$WakeLock access$100(com.android.server.backup.UserBackupManagerService$BackupWakeLock)>($r2);

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>(r1);

        return;
    }

    public boolean shouldSkipPackage(java.lang.String)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = "com.android.wallpaperbackup";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean shouldSkipUserFacingData()
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "backup_skip_user_facing_packages", 0);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public void signalAdbBackupRestoreCompletion(com.android.server.backup.params.AdbParams)
    {
        com.android.server.backup.UserBackupManagerService r0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r2, $r3;
        java.lang.Throwable $r4;
        com.android.server.backup.params.AdbParams r5;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r5 := @parameter0: com.android.server.backup.params.AdbParams;

        r1 = r5.<com.android.server.backup.params.AdbParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        entermonitor r1;

     label1:
        $r2 = r5.<com.android.server.backup.params.AdbParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r3 = r5.<com.android.server.backup.params.AdbParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void tearDownAgentAndKill(android.content.pm.ApplicationInfo)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.IActivityManager $r1, $r4;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.String $r2, $r3, $r6;
        android.os.RemoteException $r5;
        android.content.pm.ApplicationInfo r7;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r7 := @parameter0: android.content.pm.ApplicationInfo;

        if r7 != null goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r1.<android.app.IActivityManager: void unbindBackupAgent(android.content.pm.ApplicationInfo)>(r7);

        $i0 = r7.<android.content.pm.ApplicationInfo: int uid>;

        $z0 = staticinvoke <android.os.UserHandle: boolean isCore(int)>($i0);

        if $z0 != 0 goto label2;

        $r2 = r7.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("com.android.backupconfirm");

        if $z1 != 0 goto label2;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IActivityManager mActivityManager>;

        $r3 = r7.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $i1 = r7.<android.content.pm.ApplicationInfo: int uid>;

        interfaceinvoke $r4.<android.app.IActivityManager: void killApplicationProcess(java.lang.String,int)>($r3, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r6 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i2, "Lost app trying to shut down");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected void tearDownService()
    {
        com.android.server.backup.UserBackupManagerService r0;
        com.android.server.backup.BackupAgentTimeoutParameters $r1;
        com.android.server.backup.BackupManagerConstants $r2;
        android.content.Context $r3, $r7, $r9;
        android.content.ContentResolver $r4;
        android.database.ContentObserver $r5;
        android.content.BroadcastReceiver $r6, $r8;
        com.android.server.backup.internal.BackupHandler $r10;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupAgentTimeoutParameters mAgentTimeoutParameters>;

        virtualinvoke $r1.<com.android.server.backup.BackupAgentTimeoutParameters: void stop()>();

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.BackupManagerConstants mConstants>;

        virtualinvoke $r2.<com.android.server.backup.BackupManagerConstants: void stop()>();

        $r3 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = r0.<com.android.server.backup.UserBackupManagerService: android.database.ContentObserver mSetupObserver>;

        virtualinvoke $r4.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r5);

        $r7 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r6 = r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mRunInitReceiver>;

        virtualinvoke $r7.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r6);

        $r9 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.backup.UserBackupManagerService: android.content.BroadcastReceiver mPackageTrackingReceiver>;

        virtualinvoke $r9.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r8);

        $r10 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        virtualinvoke $r10.<com.android.server.backup.internal.BackupHandler: void stop()>();

        return;
    }

    public void unbindAgent(android.content.pm.ApplicationInfo)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        android.content.pm.ApplicationInfo r3;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r3 := @parameter0: android.content.pm.ApplicationInfo;

     label1:
        $r1 = r0.<com.android.server.backup.UserBackupManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r1.<android.app.IActivityManager: void unbindBackupAgent(android.content.pm.ApplicationInfo)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void updateTransportAttributes(int, android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.CharSequence)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i2, i3;
        java.lang.String r1, r3, $r12;
        android.content.Intent r2, r4;
        java.lang.CharSequence r5;
        long l1;
        android.content.Context $r6, $r10;
        android.content.pm.PackageManager $r11;
        com.android.server.backup.TransportManager $r13;
        java.lang.Throwable $r14;
        android.content.pm.PackageManager$NameNotFoundException $r15, $r17, r21;
        java.lang.SecurityException $r16, r20;
        android.content.ComponentName r18;
        boolean z0, z1, z2;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        r18 := @parameter1: android.content.ComponentName;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.content.Intent;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.content.Intent;

        r5 := @parameter6: java.lang.CharSequence;

        $r6 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "updateTransportAttributes");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r18, "transportComponent can\'t be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "name can\'t be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "currentDestinationString can\'t be null");

        z0 = 1;

        if r4 != null goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        if r5 != null goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        if z1 != z2 goto label05;

        goto label06;

     label05:
        z0 = 0;

     label06:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "dataManagementLabel should be null iff dataManagementIntent is null");

     label07:
        $r10 = r0.<com.android.server.backup.UserBackupManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r12 = virtualinvoke r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i2 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        i3 = virtualinvoke $r11.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int,int)>($r12, 0, $i2);

     label08:
        if i0 != i3 goto label12;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r13 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager mTransportManager>;

        virtualinvoke $r13.<com.android.server.backup.TransportManager: void updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>(r18, r1, r2, r3, r4, r5);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label11:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r14;

     label12:
        r20 = new java.lang.SecurityException;

        specialinvoke r20.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the transport can change its description");

        throw r20;

     label13:
        $r17 := @caughtexception;

        r21 = $r17;

        goto label15;

     label14:
        $r15 := @caughtexception;

        r21 = $r15;

     label15:
        $r16 = new java.lang.SecurityException;

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Transport package not found", r21);

        throw $r16;

        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch android.content.pm.PackageManager$NameNotFoundException from label12 to label13 with label13;
    }

    public void updateTransportAttributes(android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.CharSequence)
    {
        com.android.server.backup.UserBackupManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2, r4;
        android.content.Intent r3, r5;
        java.lang.CharSequence r6;
        int $i0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Intent;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.content.Intent;

        r6 := @parameter5: java.lang.CharSequence;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void updateTransportAttributes(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>($i0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public boolean waitUntilOperationComplete(int)
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object r1, $r3, $r5;
        android.util.SparseArray $r2;
        com.android.server.backup.internal.BackupHandler $r4;
        java.lang.Throwable $r6, $r7;
        com.android.server.backup.internal.Operation r8;
        boolean z0;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

        i0 := @parameter0: int;

        i4 = 0;

        r1 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.backup.UserBackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r8 = (com.android.server.backup.internal.Operation) $r3;

     label02:
        if r8 != null goto label03;

        goto label10;

     label03:
        i1 = r8.<com.android.server.backup.internal.Operation: int state>;

     label04:
        if i1 != 0 goto label09;

     label05:
        $r5 = r0.<com.android.server.backup.UserBackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r5.<java.lang.Object: void wait()>();

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

     label08:
        goto label01;

     label09:
        i4 = r8.<com.android.server.backup.internal.Operation: int state>;

     label10:
        exitmonitor r1;

     label11:
        virtualinvoke r0.<com.android.server.backup.UserBackupManagerService: void removeOperation(int)>(i0);

        if r8 == null goto label12;

        $r4 = r0.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.internal.BackupHandler mBackupHandler>;

        $i2 = r8.<com.android.server.backup.internal.Operation: int type>;

        $i3 = specialinvoke r0.<com.android.server.backup.UserBackupManagerService: int getMessageIdForOperationType(int)>($i2);

        virtualinvoke $r4.<com.android.server.backup.internal.BackupHandler: void removeMessages(int)>($i3);

     label12:
        z0 = 1;

        if i4 != 1 goto label13;

        goto label14;

     label13:
        z0 = 0;

     label14:
        return z0;

     label15:
        $r6 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void writeRestoreTokens()
    {
        com.android.server.backup.UserBackupManagerService r0;
        int i0, $i3, $i4, $i6;
        java.io.File $r1;
        long $l1, $l2;
        java.util.Set $r2, $r3, $r5, $r9;
        java.lang.String $r7, $r8, $r11, $r15;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.Throwable $r12, $r13, $r14;
        java.io.RandomAccessFile r16;
        java.lang.StringBuilder r17;
        java.util.Iterator r18;

        r0 := @this: com.android.server.backup.UserBackupManagerService;

     label01:
        r16 = new java.io.RandomAccessFile;

        $r1 = r0.<com.android.server.backup.UserBackupManagerService: java.io.File mTokenFile>;

        specialinvoke r16.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r1, "rwd");

     label02:
        virtualinvoke r16.<java.io.RandomAccessFile: void writeInt(int)>(1);

        $l1 = r0.<com.android.server.backup.UserBackupManagerService: long mAncestralToken>;

        virtualinvoke r16.<java.io.RandomAccessFile: void writeLong(long)>($l1);

        $l2 = r0.<com.android.server.backup.UserBackupManagerService: long mCurrentToken>;

        virtualinvoke r16.<java.io.RandomAccessFile: void writeLong(long)>($l2);

        $r2 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        if $r2 != null goto label04;

        virtualinvoke r16.<java.io.RandomAccessFile: void writeInt(int)>(-1);

     label03:
        goto label07;

     label04:
        $r3 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        $i3 = interfaceinvoke $r3.<java.util.Set: int size()>();

        virtualinvoke r16.<java.io.RandomAccessFile: void writeInt(int)>($i3);

        i0 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ancestral packages:  ");

        $r5 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        $i4 = interfaceinvoke $r5.<java.util.Set: int size()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>(i0, $r7);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

        $r9 = r0.<com.android.server.backup.UserBackupManagerService: java.util.Set mAncestralPackages>;

        r18 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r10 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.String) $r10;

        virtualinvoke r16.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>($r11);

     label06:
        goto label05;

     label07:
        virtualinvoke r16.<java.io.RandomAccessFile: void close()>();

     label08:
        goto label16;

     label09:
        $r13 := @caughtexception;

     label10:
        virtualinvoke r16.<java.io.RandomAccessFile: void close()>();

     label11:
        goto label14;

     label12:
        $r12 := @caughtexception;

     label13:
        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label14:
        throw $r13;

     label15:
        $r14 := @caughtexception;

        $i6 = r0.<com.android.server.backup.UserBackupManagerService: int mUserId>;

        $r15 = staticinvoke <com.android.server.backup.UserBackupManagerService: java.lang.String addUserIdToLogMessage(int,java.lang.String)>($i6, "Unable to write token file:");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r15, $r14);

     label16:
        return;

        catch java.io.IOException from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label14 to label15 with label15;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.UserBackupManagerService: java.lang.String WALLPAPER_PACKAGE> = "com.android.wallpaperbackup";

        <com.android.server.backup.UserBackupManagerService: long TRANSPORT_RETRY_INTERVAL> = 3600000L;

        <com.android.server.backup.UserBackupManagerService: long TIMEOUT_FULL_CONFIRMATION> = 60000L;

        <com.android.server.backup.UserBackupManagerService: java.lang.String SKIP_USER_FACING_PACKAGES> = "backup_skip_user_facing_packages";

        <com.android.server.backup.UserBackupManagerService: java.lang.String SHARED_BACKUP_AGENT_PACKAGE> = "com.android.sharedstoragebackup";

        <com.android.server.backup.UserBackupManagerService: java.lang.String SETTINGS_PACKAGE> = "com.android.providers.settings";

        <com.android.server.backup.UserBackupManagerService: java.lang.String SERIAL_ID_FILE> = "serial_id";

        <com.android.server.backup.UserBackupManagerService: int SCHEDULE_FILE_VERSION> = 1;

        <com.android.server.backup.UserBackupManagerService: java.lang.String RUN_INITIALIZE_ACTION> = "android.app.backup.intent.INIT";

        <com.android.server.backup.UserBackupManagerService: java.lang.String PACKAGE_MANAGER_SENTINEL> = "@pm@";

        <com.android.server.backup.UserBackupManagerService: int OP_TYPE_RESTORE_WAIT> = 1;

        <com.android.server.backup.UserBackupManagerService: int OP_TYPE_BACKUP_WAIT> = 0;

        <com.android.server.backup.UserBackupManagerService: int OP_TYPE_BACKUP> = 2;

        <com.android.server.backup.UserBackupManagerService: int OP_TIMEOUT> = -1;

        <com.android.server.backup.UserBackupManagerService: int OP_PENDING> = 0;

        <com.android.server.backup.UserBackupManagerService: int OP_ACKNOWLEDGED> = 1;

        <com.android.server.backup.UserBackupManagerService: java.lang.String KEY_WIDGET_STATE> = "\uffed\uffedwidget";

        <com.android.server.backup.UserBackupManagerService: java.lang.String INIT_SENTINEL_FILE_NAME> = "_need_init_";

        <com.android.server.backup.UserBackupManagerService: long INITIALIZATION_DELAY_MILLIS> = 3000L;

        <com.android.server.backup.UserBackupManagerService: int CURRENT_ANCESTRAL_RECORD_VERSION> = 1;

        <com.android.server.backup.UserBackupManagerService: long CLEAR_DATA_TIMEOUT_INTERVAL> = 30000L;

        <com.android.server.backup.UserBackupManagerService: long BUSY_BACKOFF_MIN_MILLIS> = 3600000L;

        <com.android.server.backup.UserBackupManagerService: int BUSY_BACKOFF_FUZZ> = 7200000;

        <com.android.server.backup.UserBackupManagerService: long BIND_TIMEOUT_INTERVAL> = 10000L;

        <com.android.server.backup.UserBackupManagerService: int BACKUP_WIDGET_METADATA_TOKEN> = 33549569;

        <com.android.server.backup.UserBackupManagerService: int BACKUP_METADATA_VERSION> = 1;

        <com.android.server.backup.UserBackupManagerService: java.lang.String BACKUP_METADATA_FILENAME> = "_meta";

        <com.android.server.backup.UserBackupManagerService: int BACKUP_MANIFEST_VERSION> = 1;

        <com.android.server.backup.UserBackupManagerService: java.lang.String BACKUP_MANIFEST_FILENAME> = "_manifest";

        <com.android.server.backup.UserBackupManagerService: java.lang.String BACKUP_FINISHED_PACKAGE_EXTRA> = "packageName";

        <com.android.server.backup.UserBackupManagerService: java.lang.String BACKUP_FINISHED_ACTION> = "android.intent.action.BACKUP_FINISHED";

        <com.android.server.backup.UserBackupManagerService: int BACKUP_FILE_VERSION> = 5;

        <com.android.server.backup.UserBackupManagerService: java.lang.String BACKUP_FILE_HEADER_MAGIC> = "ANDROID BACKUP\n";

        return;
    }
}
