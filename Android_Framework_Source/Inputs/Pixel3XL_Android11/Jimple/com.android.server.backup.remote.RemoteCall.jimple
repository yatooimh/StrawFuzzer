public class com.android.server.backup.remote.RemoteCall extends java.lang.Object
{
    private final com.android.server.backup.remote.RemoteCallable mCallable;
    private final java.util.concurrent.CompletableFuture mFuture;
    private final long mTimeoutMs;

    public void <init>(com.android.server.backup.remote.RemoteCallable, long)
    {
        com.android.server.backup.remote.RemoteCall r0;
        com.android.server.backup.remote.RemoteCallable r1;
        long l0;

        r0 := @this: com.android.server.backup.remote.RemoteCall;

        r1 := @parameter0: com.android.server.backup.remote.RemoteCallable;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.server.backup.remote.RemoteCall: void <init>(boolean,com.android.server.backup.remote.RemoteCallable,long)>(0, r1, l0);

        return;
    }

    public void <init>(boolean, com.android.server.backup.remote.RemoteCallable, long)
    {
        com.android.server.backup.remote.RemoteCall r0;
        boolean z0;
        com.android.server.backup.remote.RemoteCallable r1;
        long l0;
        java.util.concurrent.CompletableFuture $r2;

        r0 := @this: com.android.server.backup.remote.RemoteCall;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.backup.remote.RemoteCallable;

        l0 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.remote.RemoteCall: com.android.server.backup.remote.RemoteCallable mCallable> = r1;

        r0.<com.android.server.backup.remote.RemoteCall: long mTimeoutMs> = l0;

        $r2 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r2.<java.util.concurrent.CompletableFuture: void <init>()>();

        r0.<com.android.server.backup.remote.RemoteCall: java.util.concurrent.CompletableFuture mFuture> = $r2;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.backup.remote.RemoteCall: void cancel()>();

     label1:
        return;
    }

    public static com.android.server.backup.remote.RemoteResult execute(com.android.server.backup.remote.RemoteCallable, long) throws android.os.RemoteException
    {
        com.android.server.backup.remote.RemoteCallable r0;
        long l0;
        com.android.server.backup.remote.RemoteCall $r1;
        com.android.server.backup.remote.RemoteResult $r2;

        r0 := @parameter0: com.android.server.backup.remote.RemoteCallable;

        l0 := @parameter1: long;

        $r1 = new com.android.server.backup.remote.RemoteCall;

        specialinvoke $r1.<com.android.server.backup.remote.RemoteCall: void <init>(com.android.server.backup.remote.RemoteCallable,long)>(r0, l0);

        $r2 = virtualinvoke $r1.<com.android.server.backup.remote.RemoteCall: com.android.server.backup.remote.RemoteResult call()>();

        return $r2;
    }

    public static void lambda$UZaEiTGjS9e2j04YYkGl3Y2ltU4(com.android.server.backup.remote.RemoteCall)
    {
        com.android.server.backup.remote.RemoteCall r0;

        r0 := @parameter0: com.android.server.backup.remote.RemoteCall;

        specialinvoke r0.<com.android.server.backup.remote.RemoteCall: void timeOut()>();

        return;
    }

    private void timeOut()
    {
        com.android.server.backup.remote.RemoteCall r0;
        com.android.server.backup.remote.RemoteResult $r1;
        java.util.concurrent.CompletableFuture $r2;

        r0 := @this: com.android.server.backup.remote.RemoteCall;

        $r2 = r0.<com.android.server.backup.remote.RemoteCall: java.util.concurrent.CompletableFuture mFuture>;

        $r1 = <com.android.server.backup.remote.RemoteResult: com.android.server.backup.remote.RemoteResult FAILED_TIMED_OUT>;

        virtualinvoke $r2.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>($r1);

        return;
    }

    public com.android.server.backup.remote.RemoteResult call() throws android.os.RemoteException
    {
        com.android.server.backup.remote.RemoteCall r0;
        android.os.Looper $r1;
        boolean $z0, $z1, $z2;
        java.util.concurrent.CompletableFuture $r2, $r6, $r12;
        long $l0, $l2;
        byte $b1;
        android.os.Handler $r3;
        com.android.server.backup.remote._$$Lambda$RemoteCall$UZaEiTGjS9e2j04YYkGl3Y2ltU4 $r4;
        com.android.server.backup.remote.FutureBackupCallback $r5;
        com.android.server.backup.remote.RemoteCallable $r7;
        java.lang.Throwable $r8, $r10;
        java.lang.IllegalStateException $r9;
        com.android.server.backup.remote.RemoteResult $r11, r14;
        java.lang.Object $r13;

        r0 := @this: com.android.server.backup.remote.RemoteCall;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $z0 = virtualinvoke $r1.<android.os.Looper: boolean isCurrentThread()>();

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Can\'t call call() on main thread");

        $r2 = r0.<com.android.server.backup.remote.RemoteCall: java.util.concurrent.CompletableFuture mFuture>;

        $z2 = virtualinvoke $r2.<java.util.concurrent.CompletableFuture: boolean isDone()>();

        if $z2 != 0 goto label2;

        $l0 = r0.<com.android.server.backup.remote.RemoteCall: long mTimeoutMs>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        specialinvoke r0.<com.android.server.backup.remote.RemoteCall: void timeOut()>();

        goto label2;

     label1:
        $r3 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r4 = new com.android.server.backup.remote._$$Lambda$RemoteCall$UZaEiTGjS9e2j04YYkGl3Y2ltU4;

        specialinvoke $r4.<com.android.server.backup.remote._$$Lambda$RemoteCall$UZaEiTGjS9e2j04YYkGl3Y2ltU4: void <init>(com.android.server.backup.remote.RemoteCall)>(r0);

        $l2 = r0.<com.android.server.backup.remote.RemoteCall: long mTimeoutMs>;

        virtualinvoke $r3.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r4, $l2);

        $r7 = r0.<com.android.server.backup.remote.RemoteCall: com.android.server.backup.remote.RemoteCallable mCallable>;

        $r5 = new com.android.server.backup.remote.FutureBackupCallback;

        $r6 = r0.<com.android.server.backup.remote.RemoteCall: java.util.concurrent.CompletableFuture mFuture>;

        specialinvoke $r5.<com.android.server.backup.remote.FutureBackupCallback: void <init>(java.util.concurrent.CompletableFuture)>($r6);

        interfaceinvoke $r7.<com.android.server.backup.remote.RemoteCallable: void call(java.lang.Object)>($r5);

     label2:
        $r12 = r0.<com.android.server.backup.remote.RemoteCall: java.util.concurrent.CompletableFuture mFuture>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        r14 = (com.android.server.backup.remote.RemoteResult) $r13;

     label3:
        return r14;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Future unexpectedly completed with an exception");

        throw $r9;

     label5:
        $r10 := @caughtexception;

        $r11 = <com.android.server.backup.remote.RemoteResult: com.android.server.backup.remote.RemoteResult FAILED_THREAD_INTERRUPTED>;

        return $r11;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.util.concurrent.ExecutionException from label2 to label3 with label4;
    }

    public void cancel()
    {
        com.android.server.backup.remote.RemoteCall r0;
        com.android.server.backup.remote.RemoteResult $r1;
        java.util.concurrent.CompletableFuture $r2;

        r0 := @this: com.android.server.backup.remote.RemoteCall;

        $r2 = r0.<com.android.server.backup.remote.RemoteCall: java.util.concurrent.CompletableFuture mFuture>;

        $r1 = <com.android.server.backup.remote.RemoteResult: com.android.server.backup.remote.RemoteResult FAILED_CANCELLED>;

        virtualinvoke $r2.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>($r1);

        return;
    }
}
