public class com.android.server.backup.restore.ActiveRestoreSession extends android.app.backup.IRestoreSession$Stub
{
    private static final java.lang.String TAG;
    private final com.android.server.backup.UserBackupManagerService mBackupManagerService;
    boolean mEnded;
    private final java.lang.String mPackageName;
    public android.app.backup.RestoreSet[] mRestoreSets;
    boolean mTimedOut;
    private final com.android.server.backup.TransportManager mTransportManager;
    private final java.lang.String mTransportName;
    private final int mUserId;

    public void <init>(com.android.server.backup.UserBackupManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        com.android.server.backup.UserBackupManagerService r1;
        java.lang.String r2, r3;
        com.android.server.backup.TransportManager $r4;
        int $i0;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        r1 := @parameter0: com.android.server.backup.UserBackupManagerService;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.app.backup.IRestoreSession$Stub: void <init>()>();

        r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets> = null;

        r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mEnded> = 0;

        r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mTimedOut> = 0;

        r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService> = r1;

        r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mPackageName> = r2;

        $r4 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.TransportManager getTransportManager()>();

        r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager> = $r4;

        r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName> = r3;

        $i0 = virtualinvoke r1.<com.android.server.backup.UserBackupManagerService: int getUserId()>();

        r0.<com.android.server.backup.restore.ActiveRestoreSession: int mUserId> = $i0;

        return;
    }

    static void lambda$getAvailableRestoreSets$0(com.android.server.backup.TransportManager, com.android.server.backup.transport.TransportClient, com.android.server.backup.UserBackupManagerService$BackupWakeLock, java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        com.android.server.backup.transport.TransportClient r1;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock r2;
        java.lang.String r3;

        r0 := @parameter0: com.android.server.backup.TransportManager;

        r1 := @parameter1: com.android.server.backup.transport.TransportClient;

        r2 := @parameter2: com.android.server.backup.UserBackupManagerService$BackupWakeLock;

        r3 := @parameter3: java.lang.String;

        virtualinvoke r0.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, r3);

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        return;
    }

    static com.android.server.backup.params.RestoreParams lambda$restoreAll$1(android.app.backup.IRestoreObserver, android.app.backup.IBackupManagerMonitor, long, com.android.server.backup.transport.TransportClient, com.android.server.backup.internal.OnTaskFinishedListener)
    {
        android.app.backup.IRestoreObserver r0;
        android.app.backup.IBackupManagerMonitor r1;
        long l0;
        com.android.server.backup.transport.TransportClient r2;
        com.android.server.backup.internal.OnTaskFinishedListener r3;
        com.android.server.backup.params.RestoreParams $r4;

        r0 := @parameter0: android.app.backup.IRestoreObserver;

        r1 := @parameter1: android.app.backup.IBackupManagerMonitor;

        l0 := @parameter2: long;

        r2 := @parameter3: com.android.server.backup.transport.TransportClient;

        r3 := @parameter4: com.android.server.backup.internal.OnTaskFinishedListener;

        $r4 = staticinvoke <com.android.server.backup.params.RestoreParams: com.android.server.backup.params.RestoreParams createForRestoreAll(com.android.server.backup.transport.TransportClient,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,com.android.server.backup.internal.OnTaskFinishedListener)>(r2, r0, r1, l0, r3);

        return $r4;
    }

    static com.android.server.backup.params.RestoreParams lambda$restorePackage$3(android.app.backup.IRestoreObserver, android.app.backup.IBackupManagerMonitor, long, android.content.pm.PackageInfo, com.android.server.backup.transport.TransportClient, com.android.server.backup.internal.OnTaskFinishedListener)
    {
        android.app.backup.IRestoreObserver r0;
        android.app.backup.IBackupManagerMonitor r1;
        long l0;
        android.content.pm.PackageInfo r2;
        com.android.server.backup.transport.TransportClient r3;
        com.android.server.backup.internal.OnTaskFinishedListener r4;
        com.android.server.backup.params.RestoreParams $r5;

        r0 := @parameter0: android.app.backup.IRestoreObserver;

        r1 := @parameter1: android.app.backup.IBackupManagerMonitor;

        l0 := @parameter2: long;

        r2 := @parameter3: android.content.pm.PackageInfo;

        r3 := @parameter4: com.android.server.backup.transport.TransportClient;

        r4 := @parameter5: com.android.server.backup.internal.OnTaskFinishedListener;

        $r5 = staticinvoke <com.android.server.backup.params.RestoreParams: com.android.server.backup.params.RestoreParams createForSinglePackage(com.android.server.backup.transport.TransportClient,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,android.content.pm.PackageInfo,com.android.server.backup.internal.OnTaskFinishedListener)>(r3, r0, r1, l0, r2, r4);

        return $r5;
    }

    static com.android.server.backup.params.RestoreParams lambda$restorePackages$2(android.app.backup.IRestoreObserver, android.app.backup.IBackupManagerMonitor, long, java.lang.String[], com.android.server.backup.transport.TransportClient, com.android.server.backup.internal.OnTaskFinishedListener)
    {
        android.app.backup.IRestoreObserver r0;
        android.app.backup.IBackupManagerMonitor r1;
        long l0;
        java.lang.String[] r2;
        com.android.server.backup.transport.TransportClient r3;
        com.android.server.backup.internal.OnTaskFinishedListener r4;
        int $i1;
        com.android.server.backup.params.RestoreParams $r5;
        boolean z0;

        r0 := @parameter0: android.app.backup.IRestoreObserver;

        r1 := @parameter1: android.app.backup.IBackupManagerMonitor;

        l0 := @parameter2: long;

        r2 := @parameter3: java.lang.String[];

        r3 := @parameter4: com.android.server.backup.transport.TransportClient;

        r4 := @parameter5: com.android.server.backup.internal.OnTaskFinishedListener;

        $i1 = lengthof r2;

        if $i1 <= 1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r5 = staticinvoke <com.android.server.backup.params.RestoreParams: com.android.server.backup.params.RestoreParams createForRestorePackages(com.android.server.backup.transport.TransportClient,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,java.lang.String[],boolean,com.android.server.backup.internal.OnTaskFinishedListener)>(r3, r0, r1, l0, r2, z0, r4);

        return $r5;
    }

    static void lambda$sendRestoreToHandlerLocked$4(com.android.server.backup.TransportManager, com.android.server.backup.transport.TransportClient, com.android.server.backup.UserBackupManagerService$BackupWakeLock, java.lang.String)
    {
        com.android.server.backup.TransportManager r0;
        com.android.server.backup.transport.TransportClient r1;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock r2;
        java.lang.String r3;

        r0 := @parameter0: com.android.server.backup.TransportManager;

        r1 := @parameter1: com.android.server.backup.transport.TransportClient;

        r2 := @parameter2: com.android.server.backup.UserBackupManagerService$BackupWakeLock;

        r3 := @parameter3: java.lang.String;

        virtualinvoke r0.<com.android.server.backup.TransportManager: void disposeOfTransportClient(com.android.server.backup.transport.TransportClient,java.lang.String)>(r1, r3);

        virtualinvoke r2.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        return;
    }

    private int sendRestoreToHandlerLocked(java.util.function.BiFunction, java.lang.String)
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        android.os.Handler r1;
        java.lang.String $r3, $r12, $r15, r17;
        com.android.server.backup.TransportManager $r4, $r8;
        com.android.server.backup.UserBackupManagerService $r5, $r6;
        com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$71PrH3wEYYMIUjX_IpwtAdchLA8 $r7;
        java.lang.Object $r9;
        java.lang.StringBuilder $r10;
        java.util.function.BiFunction r16;
        com.android.server.backup.transport.TransportClient r18;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock r20;
        android.os.Message r21;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        r16 := @parameter0: java.util.function.BiFunction;

        r17 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager>;

        $r3 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        r18 = virtualinvoke $r4.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getTransportClient(java.lang.String,java.lang.String)>($r3, r17);

        if r18 != null goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        $r12 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" got unregistered");

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", $r15);

        return -1;

     label1:
        $r5 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        r1 = virtualinvoke $r5.<com.android.server.backup.UserBackupManagerService: android.os.Handler getBackupHandler()>();

        virtualinvoke r1.<android.os.Handler: void removeMessages(int)>(8);

        $r6 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        r20 = virtualinvoke $r6.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock getWakelock()>();

        virtualinvoke r20.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        $r7 = new com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$71PrH3wEYYMIUjX_IpwtAdchLA8;

        $r8 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager>;

        specialinvoke $r7.<com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$71PrH3wEYYMIUjX_IpwtAdchLA8: void <init>(com.android.server.backup.TransportManager,com.android.server.backup.transport.TransportClient,com.android.server.backup.UserBackupManagerService$BackupWakeLock)>($r8, r18, r20);

        r21 = virtualinvoke r1.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        $r9 = interfaceinvoke r16.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(r18, $r7);

        r21.<android.os.Message: java.lang.Object obj> = $r9;

        virtualinvoke r1.<android.os.Handler: boolean sendMessage(android.os.Message)>(r21);

        return 0;
    }

    public void endRestoreSession()
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        android.os.Handler r1;
        boolean $z0, $z1;
        com.android.server.backup.UserBackupManagerService $r2, $r3;
        java.lang.Throwable $r4;
        com.android.server.backup.restore.ActiveRestoreSession$EndRestoreRunnable r5;
        java.lang.IllegalStateException r6;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        entermonitor r0;

     label1:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("RestoreSession", "endRestoreSession");

        $z0 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mTimedOut>;

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RestoreSession", "Session already timed out");

     label2:
        exitmonitor r0;

        return;

     label3:
        $z1 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mEnded>;

        if $z1 != 0 goto label5;

        $r2 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        r1 = virtualinvoke $r2.<com.android.server.backup.UserBackupManagerService: android.os.Handler getBackupHandler()>();

        r5 = new com.android.server.backup.restore.ActiveRestoreSession$EndRestoreRunnable;

        $r3 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        specialinvoke r5.<com.android.server.backup.restore.ActiveRestoreSession$EndRestoreRunnable: void <init>(com.android.server.backup.restore.ActiveRestoreSession,com.android.server.backup.UserBackupManagerService,com.android.server.backup.restore.ActiveRestoreSession)>(r0, $r3, r0);

        virtualinvoke r1.<android.os.Handler: boolean post(java.lang.Runnable)>(r5);

     label4:
        exitmonitor r0;

        return;

     label5:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore session already ended");

        throw r6;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public int getAvailableRestoreSets(android.app.backup.IRestoreObserver, android.app.backup.IBackupManagerMonitor)
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        android.app.backup.IBackupManagerMonitor r1;
        long l0;
        com.android.server.backup.transport.TransportClient r2;
        com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$sCvtVwpXah9lCpJqxZ9YbNMLXas r3;
        com.android.server.backup.UserBackupManagerService $r4, $r8, $r10, $r11, $r12;
        android.content.Context $r5;
        boolean $z0, $z1;
        java.lang.String $r6;
        com.android.server.backup.TransportManager $r7, r19;
        android.os.Handler $r9, $r13, r20;
        java.lang.Exception $r14;
        java.lang.Throwable $r15, $r16;
        android.app.backup.IRestoreObserver r17;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock r18;
        com.android.server.backup.params.RestoreGetSetsParams r21;
        android.os.Message r22;
        java.lang.IllegalStateException r25;
        java.lang.IllegalArgumentException r26;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        r17 := @parameter0: android.app.backup.IRestoreObserver;

        r1 := @parameter1: android.app.backup.IBackupManagerMonitor;

        entermonitor r0;

     label01:
        $r4 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r5 = virtualinvoke $r4.<com.android.server.backup.UserBackupManagerService: android.content.Context getContext()>();

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getAvailableRestoreSets");

     label02:
        if r17 == null goto label21;

     label03:
        $z0 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mEnded>;

        if $z0 != 0 goto label20;

        $z1 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mTimedOut>;

        if $z1 == 0 goto label05;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RestoreSession", "Session already timed out");

     label04:
        exitmonitor r0;

        return -1;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r7 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager>;

        $r6 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        r2 = virtualinvoke $r7.<com.android.server.backup.TransportManager: com.android.server.backup.transport.TransportClient getTransportClient(java.lang.String,java.lang.String)>($r6, "RestoreSession.getAvailableRestoreSets()");

     label07:
        if r2 != null goto label11;

     label08:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("RestoreSession", "Null transport client getting restore sets");

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        exitmonitor r0;

        return -1;

     label11:
        $r8 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r9 = virtualinvoke $r8.<com.android.server.backup.UserBackupManagerService: android.os.Handler getBackupHandler()>();

        virtualinvoke $r9.<android.os.Handler: void removeMessages(int)>(8);

        $r10 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        r18 = virtualinvoke $r10.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock getWakelock()>();

        virtualinvoke r18.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void acquire()>();

        r19 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager>;

        r3 = new com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$sCvtVwpXah9lCpJqxZ9YbNMLXas;

        specialinvoke r3.<com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$sCvtVwpXah9lCpJqxZ9YbNMLXas: void <init>(com.android.server.backup.TransportManager,com.android.server.backup.transport.TransportClient,com.android.server.backup.UserBackupManagerService$BackupWakeLock)>(r19, r2, r18);

        $r11 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        r20 = virtualinvoke $r11.<com.android.server.backup.UserBackupManagerService: android.os.Handler getBackupHandler()>();

        r21 = new com.android.server.backup.params.RestoreGetSetsParams;

        specialinvoke r21.<com.android.server.backup.params.RestoreGetSetsParams: void <init>(com.android.server.backup.transport.TransportClient,com.android.server.backup.restore.ActiveRestoreSession,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,com.android.server.backup.internal.OnTaskFinishedListener)>(r2, r0, r17, r1, r3);

        r22 = virtualinvoke r20.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(6, r21);

        $r12 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r13 = virtualinvoke $r12.<com.android.server.backup.UserBackupManagerService: android.os.Handler getBackupHandler()>();

        virtualinvoke $r13.<android.os.Handler: boolean sendMessage(android.os.Message)>(r22);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label13:
        exitmonitor r0;

        return 0;

     label14:
        $r16 := @caughtexception;

        goto label19;

     label15:
        $r14 := @caughtexception;

     label16:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RestoreSession", "Error in getAvailableRestoreSets", $r14);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label18:
        exitmonitor r0;

        return -1;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r16;

     label20:
        r25 = new java.lang.IllegalStateException;

        specialinvoke r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore session already ended");

        throw r25;

     label21:
        r26 = new java.lang.IllegalArgumentException;

        specialinvoke r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Observer must not be null");

        throw r26;

     label22:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Exception from label06 to label07 with label15;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Exception from label08 to label09 with label15;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    public void markTimedOut()
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mTimedOut> = 1;

        return;
    }

    public int restoreAll(long, android.app.backup.IRestoreObserver, android.app.backup.IBackupManagerMonitor)
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        long l0, l2, $l5;
        android.app.backup.IBackupManagerMonitor r1;
        int i1, i11, i12;
        com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$iPMdVI7x_J8xmayWzH6Euhd5674 r2;
        com.android.server.backup.UserBackupManagerService $r3, $r15;
        android.content.Context $r4;
        java.lang.String $r6, $r10, $r12, $r13, $r18, $r21, $r25, $r28;
        boolean $z0, $z1, $z2;
        android.app.backup.RestoreSet[] $r11, $r16, $r22;
        com.android.server.backup.TransportManager $r14;
        android.app.backup.RestoreSet $r23;
        byte $b6;
        java.lang.Throwable $r29, $r30, $r31, $r32, r38;
        android.app.backup.IRestoreObserver r33;
        java.lang.StringBuilder r34, r35, r39;
        java.lang.Object r36;
        java.lang.IllegalStateException r40;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        l0 := @parameter0: long;

        r33 := @parameter1: android.app.backup.IRestoreObserver;

        r1 := @parameter2: android.app.backup.IBackupManagerMonitor;

        entermonitor r0;

     label01:
        $r3 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r4 = virtualinvoke $r3.<com.android.server.backup.UserBackupManagerService: android.content.Context getContext()>();

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "performRestore");

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreAll token=");

        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" observer=");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r10 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("RestoreSession", $r10);

        $z0 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mEnded>;

        if $z0 != 0 goto label28;

        $z1 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mTimedOut>;

        if $z1 == 0 goto label03;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RestoreSession", "Session already timed out");

     label02:
        exitmonitor r0;

        return -1;

     label03:
        $r11 = r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets>;

        if $r11 != null goto label05;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", "Ignoring restoreAll() with no restore set");

     label04:
        exitmonitor r0;

        return -1;

     label05:
        $r12 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mPackageName>;

        if $r12 == null goto label07;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", "Ignoring restoreAll() on single-package session");

     label06:
        exitmonitor r0;

        return -1;

     label07:
        $r14 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager>;

        $r13 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        $z2 = virtualinvoke $r14.<com.android.server.backup.TransportManager: boolean isTransportRegistered(java.lang.String)>($r13);

        if $z2 != 0 goto label09;

        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        $r25 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered");

        $r28 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", $r28);

     label08:
        exitmonitor r0;

        return -1;

     label09:
        $r15 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        r36 = virtualinvoke $r15.<com.android.server.backup.UserBackupManagerService: java.lang.Object getQueueLock()>();

        entermonitor r36;

     label10:
        i11 = 0;

     label11:
        $r16 = r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets>;

        i1 = lengthof $r16;

     label12:
        if i11 >= i1 goto label22;

     label13:
        $r22 = r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets>;

        $r23 = $r22[i11];

        $l5 = $r23.<android.app.backup.RestoreSet: long token>;

        $b6 = l0 cmp $l5;

        if $b6 != 0 goto label20;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        r2 = new com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$iPMdVI7x_J8xmayWzH6Euhd5674;

        specialinvoke r2.<com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$iPMdVI7x_J8xmayWzH6Euhd5674: void <init>(android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long)>(r33, r1, l0);

        i12 = specialinvoke r0.<com.android.server.backup.restore.ActiveRestoreSession: int sendRestoreToHandlerLocked(java.util.function.BiFunction,java.lang.String)>(r2, "RestoreSession.restoreAll()");

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r36;

     label16:
        exitmonitor r0;

        return i12;

     label17:
        $r29 := @caughtexception;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label19:
        throw $r29;

     label20:
        i11 = i11 + 1;

        goto label11;

     label21:
        $r32 := @caughtexception;

        r38 = $r32;

        goto label26;

     label22:
        exitmonitor r36;

     label23:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restore token ");

        $r18 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r21 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("RestoreSession", $r21);

     label24:
        exitmonitor r0;

        return -1;

     label25:
        $r31 := @caughtexception;

        r38 = $r31;

     label26:
        exitmonitor r36;

     label27:
        throw r38;

     label28:
        r40 = new java.lang.IllegalStateException;

        specialinvoke r40.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore session already ended");

        throw r40;

     label29:
        $r30 := @caughtexception;

        exitmonitor r0;

        throw $r30;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label28 to label29 with label29;
    }

    public int restorePackage(java.lang.String, android.app.backup.IRestoreObserver, android.app.backup.IBackupManagerMonitor)
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        android.app.backup.IBackupManagerMonitor r1;
        android.content.pm.PackageInfo r2;
        long l0, l1;
        int i2, $i4, $i5, $i6, $i7, $i12, $i13, $i14;
        java.lang.String $r9, $r10, $r15, $r21, $r23, $r27, $r29, $r32, $r38, $r39, $r43, $r45, $r49, r52;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.backup.UserBackupManagerService $r11, $r13, $r17;
        android.content.pm.PackageManager $r12;
        android.content.Context $r14;
        com.android.server.backup.TransportManager $r16;
        byte $b9;
        android.content.pm.ApplicationInfo $r33;
        android.content.pm.PackageManager$NameNotFoundException $r46;
        java.lang.Throwable $r50, $r51;
        android.app.backup.IRestoreObserver r53;
        java.lang.StringBuilder r54, r55, r56, r58, r59, r61, r64;
        java.lang.SecurityException r57;
        com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$tb1mCMujBEuhHsxQ6tX_mYJVCII r60;
        java.lang.IllegalStateException r65;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        r52 := @parameter0: java.lang.String;

        r53 := @parameter1: android.app.backup.IRestoreObserver;

        r1 := @parameter2: android.app.backup.IBackupManagerMonitor;

        entermonitor r0;

     label01:
        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restorePackage pkg=");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obs=");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r53);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("monitor=");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RestoreSession", $r9);

        $z0 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mEnded>;

        if $z0 != 0 goto label25;

        $z1 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mTimedOut>;

        if $z1 == 0 goto label03;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RestoreSession", "Session already timed out");

     label02:
        exitmonitor r0;

        return -1;

     label03:
        $r10 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mPackageName>;

        if $r10 == null goto label05;

        $r39 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mPackageName>;

        $z3 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r52);

        if $z3 != 0 goto label05;

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring attempt to restore pkg=");

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on session for package ");

        $r43 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mPackageName>;

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", $r45);

     label04:
        exitmonitor r0;

        return -1;

     label05:
        $r11 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r12 = virtualinvoke $r11.<com.android.server.backup.UserBackupManagerService: android.content.pm.PackageManager getPackageManager()>();

        $i4 = r0.<com.android.server.backup.restore.ActiveRestoreSession: int mUserId>;

        r2 = virtualinvoke $r12.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r52, 0, $i4);

     label06:
        $r13 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r14 = virtualinvoke $r13.<com.android.server.backup.UserBackupManagerService: android.content.Context getContext()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i7 = virtualinvoke $r14.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.BACKUP", $i5, $i6);

        if $i7 != -1 goto label09;

        $r33 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i12 = $r33.<android.content.pm.ApplicationInfo: int uid>;

        $i13 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i12 != $i13 goto label08;

     label07:
        goto label09;

     label08:
        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restorePackage: bad packageName=");

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or calling uid=");

        $i14 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r38 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("RestoreSession", $r38);

        r57 = new java.lang.SecurityException;

        specialinvoke r57.<java.lang.SecurityException: void <init>(java.lang.String)>("No permission to restore other packages");

        throw r57;

     label09:
        $r16 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager>;

        $r15 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        $z2 = virtualinvoke $r16.<com.android.server.backup.TransportManager: boolean isTransportRegistered(java.lang.String)>($r15);

        if $z2 != 0 goto label11;

        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        $r29 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered");

        $r32 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", $r32);

     label10:
        exitmonitor r0;

        return -1;

     label11:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label12:
        $r17 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        l1 = virtualinvoke $r17.<com.android.server.backup.UserBackupManagerService: long getAvailableRestoreToken(java.lang.String)>(r52);

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restorePackage pkg=");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r21 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l1);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RestoreSession", $r23);

     label13:
        $b9 = l1 cmp 0L;

        if $b9 != 0 goto label17;

     label14:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("RestoreSession", "No data available for this package; not restoring");

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label16:
        exitmonitor r0;

        return -1;

     label17:
        r60 = new com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$tb1mCMujBEuhHsxQ6tX_mYJVCII;

        specialinvoke r60.<com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$tb1mCMujBEuhHsxQ6tX_mYJVCII: void <init>(android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,android.content.pm.PackageInfo)>(r53, r1, l1, r2);

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RestoreSession.restorePackage(");

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r27 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        i2 = specialinvoke r0.<com.android.server.backup.restore.ActiveRestoreSession: int sendRestoreToHandlerLocked(java.util.function.BiFunction,java.lang.String)>(r60, $r27);

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label19:
        exitmonitor r0;

        return i2;

     label20:
        $r50 := @caughtexception;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r50;

     label22:
        $r46 := @caughtexception;

     label23:
        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asked to restore nonexistent pkg ");

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        $r49 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("RestoreSession", $r49);

     label24:
        exitmonitor r0;

        return -1;

     label25:
        r65 = new java.lang.IllegalStateException;

        specialinvoke r65.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore session already ended");

        throw r65;

     label26:
        $r51 := @caughtexception;

        exitmonitor r0;

        throw $r51;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label22;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
    }

    public int restorePackages(long, android.app.backup.IRestoreObserver, java.lang.String[], android.app.backup.IBackupManagerMonitor)
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        long l0, l2, $l5;
        java.lang.String[] r1;
        android.app.backup.IBackupManagerMonitor r2;
        int i1, $i7, i12, i13, i14, i15;
        com.android.server.backup.UserBackupManagerService $r3, $r22;
        android.content.Context $r4;
        java.lang.String $r6, $r9, $r12, $r17, $r19, $r20, $r25, $r28, $r34, $r36, $r39, r51;
        boolean $z0, $z1, $z2, z3;
        android.app.backup.RestoreSet[] $r18, $r23, $r29;
        com.android.server.backup.TransportManager $r21;
        android.app.backup.RestoreSet $r30;
        byte $b6;
        java.lang.Throwable $r45, $r46, $r47, $r48, r57;
        android.app.backup.IRestoreObserver r49;
        java.lang.StringBuilder r50, r52, r55, r58;
        java.lang.Object r53;
        com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$gXVTdFUn9LSjuKEXaGOyKBxki6Q r54;
        java.lang.IllegalStateException r59;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        l0 := @parameter0: long;

        r49 := @parameter1: android.app.backup.IRestoreObserver;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: android.app.backup.IBackupManagerMonitor;

        entermonitor r0;

     label01:
        $r3 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r4 = virtualinvoke $r3.<com.android.server.backup.UserBackupManagerService: android.content.Context getContext()>();

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "performRestore");

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restorePackages token=");

        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" observer=");

     label02:
        if r49 != null goto label05;

     label03:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label04:
        goto label06;

     label05:
        $r9 = virtualinvoke r49.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label06:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" monitor=");

     label07:
        if r2 != null goto label10;

     label08:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label09:
        goto label11;

     label10:
        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

     label11:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" packages=");

     label12:
        if r1 != null goto label15;

     label13:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label14:
        goto label26;

     label15:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

     label16:
        z3 = 1;

     label17:
        i1 = lengthof r1;

     label18:
        i12 = 0;

     label19:
        if i12 >= i1 goto label25;

        r51 = r1[i12];

        if z3 != 0 goto label22;

     label20:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label21:
        goto label23;

     label22:
        z3 = 0;

     label23:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

     label24:
        i12 = i12 + 1;

        goto label19;

     label25:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

     label26:
        $r17 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("RestoreSession", $r17);

     label27:
        $z0 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mEnded>;

        if $z0 != 0 goto label54;

        $z1 = r0.<com.android.server.backup.restore.ActiveRestoreSession: boolean mTimedOut>;

        if $z1 == 0 goto label29;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RestoreSession", "Session already timed out");

     label28:
        exitmonitor r0;

        return -1;

     label29:
        $r18 = r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets>;

        if $r18 != null goto label31;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", "Ignoring restoreAll() with no restore set");

     label30:
        exitmonitor r0;

        return -1;

     label31:
        $r19 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mPackageName>;

        if $r19 == null goto label33;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", "Ignoring restoreAll() on single-package session");

     label32:
        exitmonitor r0;

        return -1;

     label33:
        $r21 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.TransportManager mTransportManager>;

        $r20 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        $z2 = virtualinvoke $r21.<com.android.server.backup.TransportManager: boolean isTransportRegistered(java.lang.String)>($r20);

        if $z2 != 0 goto label35;

        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        $r36 = r0.<com.android.server.backup.restore.ActiveRestoreSession: java.lang.String mTransportName>;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered");

        $r39 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RestoreSession", $r39);

     label34:
        exitmonitor r0;

        return -1;

     label35:
        $r22 = r0.<com.android.server.backup.restore.ActiveRestoreSession: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        r53 = virtualinvoke $r22.<com.android.server.backup.UserBackupManagerService: java.lang.Object getQueueLock()>();

        entermonitor r53;

     label36:
        i13 = 0;

     label37:
        $r23 = r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets>;

        i14 = lengthof $r23;

     label38:
        if i13 >= i14 goto label48;

     label39:
        $r29 = r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets>;

        $r30 = $r29[i13];

        $l5 = $r30.<android.app.backup.RestoreSet: long token>;

        $b6 = l0 cmp $l5;

        if $b6 != 0 goto label46;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label40:
        r54 = new com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$gXVTdFUn9LSjuKEXaGOyKBxki6Q;

        specialinvoke r54.<com.android.server.backup.restore._$$Lambda$ActiveRestoreSession$gXVTdFUn9LSjuKEXaGOyKBxki6Q: void <init>(android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,java.lang.String[])>(r49, r2, l0, r1);

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RestoreSession.restorePackages(");

        $i7 = lengthof r1;

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" packages)");

        $r34 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        i15 = specialinvoke r0.<com.android.server.backup.restore.ActiveRestoreSession: int sendRestoreToHandlerLocked(java.util.function.BiFunction,java.lang.String)>(r54, $r34);

     label41:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r53;

     label42:
        exitmonitor r0;

        return i15;

     label43:
        $r47 := @caughtexception;

     label44:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label45:
        throw $r47;

     label46:
        i13 = i13 + 1;

        goto label37;

     label47:
        $r48 := @caughtexception;

        r57 = $r48;

        goto label52;

     label48:
        exitmonitor r53;

     label49:
        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restore token ");

        $r25 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r28 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("RestoreSession", $r28);

     label50:
        exitmonitor r0;

        return -1;

     label51:
        $r45 := @caughtexception;

        r57 = $r45;

     label52:
        exitmonitor r53;

     label53:
        throw r57;

     label54:
        r59 = new java.lang.IllegalStateException;

        specialinvoke r59.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore session already ended");

        throw r59;

     label55:
        $r46 := @caughtexception;

        exitmonitor r0;

        throw $r46;

        catch java.lang.Throwable from label01 to label02 with label55;
        catch java.lang.Throwable from label03 to label04 with label55;
        catch java.lang.Throwable from label05 to label06 with label55;
        catch java.lang.Throwable from label06 to label07 with label55;
        catch java.lang.Throwable from label08 to label09 with label55;
        catch java.lang.Throwable from label10 to label11 with label55;
        catch java.lang.Throwable from label11 to label12 with label55;
        catch java.lang.Throwable from label13 to label14 with label55;
        catch java.lang.Throwable from label15 to label16 with label55;
        catch java.lang.Throwable from label17 to label18 with label55;
        catch java.lang.Throwable from label20 to label21 with label55;
        catch java.lang.Throwable from label23 to label24 with label55;
        catch java.lang.Throwable from label25 to label26 with label55;
        catch java.lang.Throwable from label26 to label27 with label55;
        catch java.lang.Throwable from label27 to label28 with label55;
        catch java.lang.Throwable from label29 to label30 with label55;
        catch java.lang.Throwable from label31 to label32 with label55;
        catch java.lang.Throwable from label33 to label34 with label55;
        catch java.lang.Throwable from label35 to label36 with label55;
        catch java.lang.Throwable from label37 to label38 with label51;
        catch java.lang.Throwable from label39 to label40 with label47;
        catch java.lang.Throwable from label40 to label41 with label43;
        catch java.lang.Throwable from label41 to label42 with label47;
        catch java.lang.Throwable from label44 to label45 with label47;
        catch java.lang.Throwable from label45 to label46 with label47;
        catch java.lang.Throwable from label48 to label49 with label51;
        catch java.lang.Throwable from label49 to label50 with label55;
        catch java.lang.Throwable from label52 to label53 with label51;
        catch java.lang.Throwable from label53 to label54 with label55;
        catch java.lang.Throwable from label54 to label55 with label55;
    }

    public void setRestoreSets(android.app.backup.RestoreSet[])
    {
        com.android.server.backup.restore.ActiveRestoreSession r0;
        android.app.backup.RestoreSet[] r1;

        r0 := @this: com.android.server.backup.restore.ActiveRestoreSession;

        r1 := @parameter0: android.app.backup.RestoreSet[];

        r0.<com.android.server.backup.restore.ActiveRestoreSession: android.app.backup.RestoreSet[] mRestoreSets> = r1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.restore.ActiveRestoreSession: java.lang.String TAG> = "RestoreSession";

        return;
    }
}
