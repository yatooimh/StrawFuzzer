public class com.android.server.backup.restore.PerformAdbRestoreTask extends java.lang.Object implements java.lang.Runnable
{
    private final com.android.server.backup.UserBackupManagerService mBackupManagerService;
    private final java.lang.String mCurrentPassword;
    private final java.lang.String mDecryptPassword;
    private final android.os.ParcelFileDescriptor mInputFile;
    private final java.util.concurrent.atomic.AtomicBoolean mLatchObject;
    private final com.android.server.backup.fullbackup.FullBackupObbConnection mObbConnection;
    private android.app.backup.IFullBackupRestoreObserver mObserver;

    public void <init>(com.android.server.backup.UserBackupManagerService, android.os.ParcelFileDescriptor, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver, java.util.concurrent.atomic.AtomicBoolean)
    {
        com.android.server.backup.restore.PerformAdbRestoreTask r0;
        com.android.server.backup.UserBackupManagerService r1;
        android.os.ParcelFileDescriptor r2;
        java.lang.String r3, r4;
        android.app.backup.IFullBackupRestoreObserver r5;
        java.util.concurrent.atomic.AtomicBoolean r6;
        com.android.server.backup.fullbackup.FullBackupObbConnection $r7;

        r0 := @this: com.android.server.backup.restore.PerformAdbRestoreTask;

        r1 := @parameter0: com.android.server.backup.UserBackupManagerService;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.app.backup.IFullBackupRestoreObserver;

        r6 := @parameter5: java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.UserBackupManagerService mBackupManagerService> = r1;

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.os.ParcelFileDescriptor mInputFile> = r2;

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String mCurrentPassword> = r3;

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String mDecryptPassword> = r4;

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver> = r5;

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject> = r6;

        $r7 = new com.android.server.backup.fullbackup.FullBackupObbConnection;

        specialinvoke $r7.<com.android.server.backup.fullbackup.FullBackupObbConnection: void <init>(com.android.server.backup.UserBackupManagerService)>(r1);

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.fullbackup.FullBackupObbConnection mObbConnection> = $r7;

        return;
    }

    private static java.io.InputStream attemptMasterKeyDecryption(java.lang.String, java.lang.String, byte[], byte[], int, java.lang.String, java.lang.String, java.io.InputStream, boolean)
    {
        byte[] r0, $r4, $r5, $r6, r39, r42, r45, r46, r47, r48;
        int i0, $i1, $i2, $i4, i12, i14, i15, i17, i18;
        java.lang.String r1, r37, r38, r40;
        java.io.InputStream r2;
        boolean z0, z1;
        javax.crypto.Cipher r3;
        byte $b3, b13, b16;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, r57;
        javax.crypto.SecretKey r41;
        javax.crypto.spec.IvParameterSpec r43, r49;
        javax.crypto.spec.SecretKeySpec r44, r50;
        javax.crypto.CipherInputStream r51;

        r37 := @parameter0: java.lang.String;

        r38 := @parameter1: java.lang.String;

        r39 := @parameter2: byte[];

        r0 := @parameter3: byte[];

        i0 := @parameter4: int;

        r40 := @parameter5: java.lang.String;

        r1 := @parameter6: java.lang.String;

        r2 := @parameter7: java.io.InputStream;

        z0 := @parameter8: boolean;

     label01:
        r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label02:
        r41 = staticinvoke <com.android.server.backup.utils.PasswordUtils: javax.crypto.SecretKey buildPasswordKey(java.lang.String,java.lang.String,byte[],int)>(r38, r37, r39, i0);

        r42 = staticinvoke <com.android.server.backup.utils.PasswordUtils: byte[] hexToByteArray(java.lang.String)>(r40);

        r43 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke r43.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r42);

        r44 = new javax.crypto.spec.SecretKeySpec;

        $r4 = interfaceinvoke r41.<javax.crypto.SecretKey: byte[] getEncoded()>();

        specialinvoke r44.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "AES");

        virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r44, r43);

        $r5 = staticinvoke <com.android.server.backup.utils.PasswordUtils: byte[] hexToByteArray(java.lang.String)>(r1);

        r45 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label03:
        i12 = 0 + 1;

        b13 = r45[0];

     label04:
        $i1 = i12 + b13;

        r46 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r45, i12, $i1);

     label05:
        i14 = i12 + b13;

        i15 = i14 + 1;

        b16 = r45[i14];

     label06:
        $i2 = i15 + b16;

        r47 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r45, i15, $i2);

     label07:
        i17 = i15 + b16;

        i18 = i17 + 1;

     label08:
        $b3 = r45[i17];

        $i4 = i18 + $b3;

        r48 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r45, i18, $i4);

     label09:
        $r6 = staticinvoke <com.android.server.backup.utils.PasswordUtils: byte[] makeKeyChecksum(java.lang.String,byte[],byte[],int)>(r38, r47, r0, i0);

        z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, r48);

     label10:
        if z1 == 0 goto label20;

     label11:
        r49 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke r49.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r46);

        r50 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r50.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r47, "AES");

        virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r50, r49);

        r51 = new javax.crypto.CipherInputStream;

     label12:
        specialinvoke r51.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>(r2, r3);

     label13:
        goto label23;

     label14:
        $r16 := @caughtexception;

        goto label43;

     label15:
        $r19 := @caughtexception;

        goto label45;

     label16:
        $r23 := @caughtexception;

        goto label47;

     label17:
        $r18 := @caughtexception;

        goto label49;

     label18:
        $r35 := @caughtexception;

        goto label51;

     label19:
        $r28 := @caughtexception;

        r57 = $r28;

        goto label53;

     label20:
        if z0 == 0 goto label22;

     label21:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Incorrect password");

     label22:
        r51 = null;

     label23:
        goto label55;

     label24:
        $r25 := @caughtexception;

        goto label43;

     label25:
        $r11 := @caughtexception;

        goto label45;

     label26:
        $r7 := @caughtexception;

        goto label47;

     label27:
        $r31 := @caughtexception;

        goto label49;

     label28:
        $r33 := @caughtexception;

        goto label51;

     label29:
        $r30 := @caughtexception;

        r57 = $r30;

        goto label53;

     label30:
        $r20 := @caughtexception;

        goto label43;

     label31:
        $r29 := @caughtexception;

        goto label45;

     label32:
        $r17 := @caughtexception;

        goto label47;

     label33:
        $r32 := @caughtexception;

        goto label49;

     label34:
        $r34 := @caughtexception;

        goto label51;

     label35:
        $r27 := @caughtexception;

        r57 = $r27;

        goto label53;

     label36:
        $r13 := @caughtexception;

        goto label43;

     label37:
        $r15 := @caughtexception;

        goto label45;

     label38:
        $r9 := @caughtexception;

        goto label47;

     label39:
        $r36 := @caughtexception;

        goto label49;

     label40:
        $r26 := @caughtexception;

        goto label51;

     label41:
        $r24 := @caughtexception;

        r57 = $r24;

        goto label53;

     label42:
        $r12 := @caughtexception;

     label43:
        if z0 == 0 goto label54;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Illegal password; aborting");

        goto label54;

     label44:
        $r8 := @caughtexception;

     label45:
        if z0 == 0 goto label54;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Needed padding mechanism unavailable!");

        goto label54;

     label46:
        $r10 := @caughtexception;

     label47:
        if z0 == 0 goto label54;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Needed decryption algorithm unavailable!");

        goto label54;

     label48:
        $r14 := @caughtexception;

     label49:
        if z0 == 0 goto label54;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Invalid block size in master key");

        goto label54;

     label50:
        $r22 := @caughtexception;

     label51:
        if z0 == 0 goto label54;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Incorrect password");

        goto label54;

     label52:
        $r21 := @caughtexception;

        r57 = $r21;

     label53:
        if z0 == 0 goto label54;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Needed parameter spec unavailable!", r57);

     label54:
        r51 = null;

     label55:
        return r51;

        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label52;
        catch javax.crypto.BadPaddingException from label01 to label02 with label50;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label48;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label46;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label44;
        catch java.security.InvalidKeyException from label01 to label02 with label42;
        catch java.security.InvalidAlgorithmParameterException from label02 to label03 with label41;
        catch javax.crypto.BadPaddingException from label02 to label03 with label40;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label39;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label38;
        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label37;
        catch java.security.InvalidKeyException from label02 to label03 with label36;
        catch java.security.InvalidAlgorithmParameterException from label04 to label05 with label35;
        catch javax.crypto.BadPaddingException from label04 to label05 with label34;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label33;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label32;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label31;
        catch java.security.InvalidKeyException from label04 to label05 with label30;
        catch java.security.InvalidAlgorithmParameterException from label06 to label07 with label35;
        catch javax.crypto.BadPaddingException from label06 to label07 with label34;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label33;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label32;
        catch javax.crypto.NoSuchPaddingException from label06 to label07 with label31;
        catch java.security.InvalidKeyException from label06 to label07 with label30;
        catch java.security.InvalidAlgorithmParameterException from label08 to label09 with label35;
        catch javax.crypto.BadPaddingException from label08 to label09 with label34;
        catch javax.crypto.IllegalBlockSizeException from label08 to label09 with label33;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label32;
        catch javax.crypto.NoSuchPaddingException from label08 to label09 with label31;
        catch java.security.InvalidKeyException from label08 to label09 with label30;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label29;
        catch javax.crypto.BadPaddingException from label09 to label10 with label28;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label27;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label26;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label25;
        catch java.security.InvalidKeyException from label09 to label10 with label24;
        catch java.security.InvalidAlgorithmParameterException from label11 to label12 with label19;
        catch javax.crypto.BadPaddingException from label11 to label12 with label18;
        catch javax.crypto.IllegalBlockSizeException from label11 to label12 with label17;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label16;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label15;
        catch java.security.InvalidKeyException from label11 to label12 with label14;
        catch java.security.InvalidAlgorithmParameterException from label12 to label13 with label29;
        catch javax.crypto.BadPaddingException from label12 to label13 with label28;
        catch javax.crypto.IllegalBlockSizeException from label12 to label13 with label27;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label26;
        catch javax.crypto.NoSuchPaddingException from label12 to label13 with label25;
        catch java.security.InvalidKeyException from label12 to label13 with label24;
        catch java.security.InvalidAlgorithmParameterException from label21 to label22 with label29;
        catch javax.crypto.BadPaddingException from label21 to label22 with label28;
        catch javax.crypto.IllegalBlockSizeException from label21 to label22 with label27;
        catch java.security.NoSuchAlgorithmException from label21 to label22 with label26;
        catch javax.crypto.NoSuchPaddingException from label21 to label22 with label25;
        catch java.security.InvalidKeyException from label21 to label22 with label24;
    }

    private static java.io.InputStream decodeAesHeaderAndInitialize(java.lang.String, java.lang.String, boolean, java.io.InputStream)
    {
        boolean z0, $z1;
        java.io.InputStream r0, r12, r13, r15, r16, r17, r18;
        byte[] r1, r2;
        int i0;
        java.lang.String r3, $r4, $r5, $r6, $r7, r10, r11, r14;
        java.lang.Throwable $r8, $r9;
        java.lang.StringBuilder r19;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r0 := @parameter3: java.io.InputStream;

        r12 = null;

        r13 = null;

     label01:
        $z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("AES-256");

        if $z1 == 0 goto label18;

     label02:
        r12 = null;

        r13 = null;

     label03:
        $r5 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r0);

        r1 = staticinvoke <com.android.server.backup.utils.PasswordUtils: byte[] hexToByteArray(java.lang.String)>($r5);

     label04:
        r12 = null;

        r13 = null;

     label05:
        $r6 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r0);

        r2 = staticinvoke <com.android.server.backup.utils.PasswordUtils: byte[] hexToByteArray(java.lang.String)>($r6);

     label06:
        r12 = null;

        r13 = null;

     label07:
        $r7 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label08:
        r12 = null;

        r13 = null;

     label09:
        r14 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r0);

     label10:
        r12 = null;

        r13 = null;

     label11:
        r3 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r0);

     label12:
        r12 = null;

        r13 = null;

     label13:
        r15 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.io.InputStream attemptMasterKeyDecryption(java.lang.String,java.lang.String,byte[],byte[],int,java.lang.String,java.lang.String,java.io.InputStream,boolean)>(r10, "PBKDF2WithHmacSHA1", r1, r2, i0, r14, r3, r0, 0);

     label14:
        r16 = r15;

        if r15 != null goto label17;

        r16 = r15;

        if z0 == 0 goto label17;

        r12 = r15;

        r13 = r15;

     label15:
        r17 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.io.InputStream attemptMasterKeyDecryption(java.lang.String,java.lang.String,byte[],byte[],int,java.lang.String,java.lang.String,java.io.InputStream,boolean)>(r10, "PBKDF2WithHmacSHA1And8bit", r1, r2, i0, r14, r3, r0, 1);

     label16:
        r16 = r17;

     label17:
        r18 = r16;

        goto label31;

     label18:
        r12 = null;

        r13 = null;

     label19:
        r19 = new java.lang.StringBuilder;

     label20:
        r12 = null;

        r13 = null;

     label21:
        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

     label22:
        r12 = null;

        r13 = null;

     label23:
        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encryption method: ");

     label24:
        r12 = null;

        r13 = null;

     label25:
        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

     label26:
        r12 = null;

        r13 = null;

     label27:
        $r4 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r4);

     label28:
        r18 = null;

        goto label31;

     label29:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Can\'t read input header");

        r18 = r12;

        goto label31;

     label30:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Can\'t parse restore data header");

        r18 = r13;

     label31:
        return r18;

        catch java.lang.NumberFormatException from label01 to label02 with label30;
        catch java.io.IOException from label01 to label02 with label29;
        catch java.lang.NumberFormatException from label03 to label04 with label30;
        catch java.io.IOException from label03 to label04 with label29;
        catch java.lang.NumberFormatException from label05 to label06 with label30;
        catch java.io.IOException from label05 to label06 with label29;
        catch java.lang.NumberFormatException from label07 to label08 with label30;
        catch java.io.IOException from label07 to label08 with label29;
        catch java.lang.NumberFormatException from label09 to label10 with label30;
        catch java.io.IOException from label09 to label10 with label29;
        catch java.lang.NumberFormatException from label11 to label12 with label30;
        catch java.io.IOException from label11 to label12 with label29;
        catch java.lang.NumberFormatException from label13 to label14 with label30;
        catch java.io.IOException from label13 to label14 with label29;
        catch java.lang.NumberFormatException from label15 to label16 with label30;
        catch java.io.IOException from label15 to label16 with label29;
        catch java.lang.NumberFormatException from label19 to label20 with label30;
        catch java.io.IOException from label19 to label20 with label29;
        catch java.lang.NumberFormatException from label21 to label22 with label30;
        catch java.io.IOException from label21 to label22 with label29;
        catch java.lang.NumberFormatException from label23 to label24 with label30;
        catch java.io.IOException from label23 to label24 with label29;
        catch java.lang.NumberFormatException from label25 to label26 with label30;
        catch java.io.IOException from label25 to label26 with label29;
        catch java.lang.NumberFormatException from label27 to label28 with label30;
        catch java.io.IOException from label27 to label28 with label29;
    }

    public static java.io.InputStream parseBackupFileHeaderAndReturnTarStream(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r1, $r2, $r8, $r9, r13, r14;
        int $i0, $i4, $i6, i7;
        byte[] $r3, r12;
        boolean $z2, $z3, z5, z6, z7, z8;
        java.io.InputStream r10, r11, r15, r20;
        java.lang.Object r17;
        java.lang.StringBuilder r18;
        java.util.zip.InflaterInputStream r19;

        r10 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        z5 = 0;

        r11 = r10;

        z6 = 0;

        $r1 = "ANDROID BACKUP\n";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        r12 = newarray (byte)[$i0];

        staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: void readFullyOrThrow(java.io.InputStream,byte[])>(r10, r12);

        $r2 = "ANDROID BACKUP\n";

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, r12);

        if $z2 == 0 goto label09;

        r13 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r10);

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r13);

        if i7 > 5 goto label07;

        z7 = 0;

        if i7 != 1 goto label01;

        z8 = 1;

        goto label02;

     label01:
        z8 = 0;

     label02:
        $r9 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r10);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        if $i4 == 0 goto label03;

        z7 = 1;

     label03:
        z5 = z7;

        r14 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String readHeaderLine(java.io.InputStream)>(r10);

        $z3 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z3 == 0 goto label04;

        z6 = 1;

        goto label06;

     label04:
        if r0 == null goto label05;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i6 <= 0 goto label05;

        r15 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.io.InputStream decodeAesHeaderAndInitialize(java.lang.String,java.lang.String,boolean,java.io.InputStream)>(r0, r14, z8, r10);

        r11 = r15;

        z6 = 0;

        if r15 == null goto label06;

        z6 = 1;

        r11 = r15;

        goto label06;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Archive is encrypted but no password given");

        z6 = 0;

     label06:
        goto label08;

     label07:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong header version: ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r8 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

     label08:
        goto label10;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Didn\'t read the right header magic");

        z6 = 0;

        z5 = 0;

     label10:
        if z6 != 0 goto label11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Invalid restore data; aborting.");

        return null;

     label11:
        if z5 == 0 goto label12;

        r19 = new java.util.zip.InflaterInputStream;

        specialinvoke r19.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>(r11);

        r17 = r19;

        goto label13;

     label12:
        r17 = r11;

     label13:
        r20 = (java.io.InputStream) r17;

        return r20;
    }

    private static void readFullyOrThrow(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, i4;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label3;

        $i2 = lengthof r1;

        $i3 = $i2 - i4;

        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i4, $i3);

        if i0 <= 0 goto label2;

        i4 = i4 + i0;

        goto label1;

     label2:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Couldn\'t fully read data");

        throw $r2;

     label3:
        return;
    }

    private static java.lang.String readHeaderLine(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        char $c1;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(80);

     label1:
        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i0 < 0 goto label3;

        if i0 != 10 goto label2;

        goto label3;

     label2:
        $c1 = (char) i0;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label1;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void run()
    {
        com.android.server.backup.restore.PerformAdbRestoreTask r0;
        com.android.server.backup.restore.FullRestoreEngine r1;
        com.android.server.backup.fullbackup.FullBackupObbConnection $r2, $r18, $r26, $r46, $r73;
        android.app.backup.IFullBackupRestoreObserver $r3, $r4, $r10, $r19, $r20, $r27, $r28, $r47, $r48, $r74, $r75;
        java.lang.String $r5, $r9;
        com.android.server.backup.UserBackupManagerService $r6, $r11, $r21, $r29, $r49, $r76;
        boolean $z0;
        android.os.ParcelFileDescriptor $r7, $r12, $r15, $r23, $r38, $r54;
        java.io.FileDescriptor $r8;
        java.util.concurrent.atomic.AtomicBoolean $r13, $r14, $r16, $r17, $r24, $r25, $r33, $r34, $r44, $r45, r58, r64, r68, r72, r80;
        com.android.server.backup.UserBackupManagerService$BackupWakeLock $r22, $r30, $r50, $r77;
        java.lang.Throwable $r32, $r35, $r36, $r39, $r40, $r41, $r42, $r43, $r51, $r52, $r53;
        java.lang.Exception $r37;
        java.io.FileInputStream r55, r56, r60;
        java.io.InputStream r62;
        com.android.server.backup.restore.FullRestoreEngineThread r66;

        r0 := @this: com.android.server.backup.restore.PerformAdbRestoreTask;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "--- Performing full-dataset restore ---");

        $r2 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.fullbackup.FullBackupObbConnection mObbConnection>;

        virtualinvoke $r2.<com.android.server.backup.fullbackup.FullBackupObbConnection: void establish()>();

        $r3 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver>;

        $r4 = staticinvoke <com.android.server.backup.utils.FullBackupRestoreObserverUtils: android.app.backup.IFullBackupRestoreObserver sendStartRestore(android.app.backup.IFullBackupRestoreObserver)>($r3);

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver> = $r4;

        r55 = null;

        r56 = null;

     label01:
        $r6 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r5 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String mCurrentPassword>;

        $z0 = virtualinvoke $r6.<com.android.server.backup.UserBackupManagerService: boolean backupPasswordMatches(java.lang.String)>($r5);

        if $z0 != 0 goto label14;

     label02:
        r55 = null;

        r56 = null;

     label03:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Backup password mismatch; aborting");

     label04:
        goto label05;

     label05:
        $r23 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.os.ParcelFileDescriptor mInputFile>;

        virtualinvoke $r23.<android.os.ParcelFileDescriptor: void close()>();

     label06:
        goto label08;

     label07:
        $r42 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Close of restore data pipe threw", $r42);

     label08:
        r58 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        entermonitor r58;

     label09:
        $r24 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r24.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r25 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r25.<java.lang.Object: void notifyAll()>();

        exitmonitor r58;

     label10:
        $r26 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.fullbackup.FullBackupObbConnection mObbConnection>;

        virtualinvoke $r26.<com.android.server.backup.fullbackup.FullBackupObbConnection: void tearDown()>();

        $r27 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver>;

        $r28 = staticinvoke <com.android.server.backup.utils.FullBackupRestoreObserverUtils: android.app.backup.IFullBackupRestoreObserver sendEndRestore(android.app.backup.IFullBackupRestoreObserver)>($r27);

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver> = $r28;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore pass complete.");

        $r29 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r30 = virtualinvoke $r29.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock getWakelock()>();

        virtualinvoke $r30.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        return;

     label11:
        $r52 := @caughtexception;

     label12:
        exitmonitor r58;

     label13:
        throw $r52;

     label14:
        r55 = null;

        r56 = null;

     label15:
        r60 = new java.io.FileInputStream;

     label16:
        r55 = null;

        r56 = null;

     label17:
        $r7 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.os.ParcelFileDescriptor mInputFile>;

        $r8 = virtualinvoke $r7.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r60.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r8);

     label18:
        r55 = r60;

        r56 = r60;

     label19:
        $r9 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.lang.String mDecryptPassword>;

        r62 = staticinvoke <com.android.server.backup.restore.PerformAdbRestoreTask: java.io.InputStream parseBackupFileHeaderAndReturnTarStream(java.io.InputStream,java.lang.String)>(r60, $r9);

     label20:
        if r62 != null goto label30;

     label21:
        virtualinvoke r60.<java.io.FileInputStream: void close()>();

        $r15 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.os.ParcelFileDescriptor mInputFile>;

        virtualinvoke $r15.<android.os.ParcelFileDescriptor: void close()>();

     label22:
        goto label24;

     label23:
        $r35 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Close of restore data pipe threw", $r35);

     label24:
        r64 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        entermonitor r64;

     label25:
        $r16 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r17 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r17.<java.lang.Object: void notifyAll()>();

        exitmonitor r64;

     label26:
        $r18 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.fullbackup.FullBackupObbConnection mObbConnection>;

        virtualinvoke $r18.<com.android.server.backup.fullbackup.FullBackupObbConnection: void tearDown()>();

        $r19 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver>;

        $r20 = staticinvoke <com.android.server.backup.utils.FullBackupRestoreObserverUtils: android.app.backup.IFullBackupRestoreObserver sendEndRestore(android.app.backup.IFullBackupRestoreObserver)>($r19);

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver> = $r20;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore pass complete.");

        $r21 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r22 = virtualinvoke $r21.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock getWakelock()>();

        virtualinvoke $r22.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        return;

     label27:
        $r40 := @caughtexception;

     label28:
        exitmonitor r64;

     label29:
        throw $r40;

     label30:
        r55 = r60;

        r56 = r60;

     label31:
        r1 = new com.android.server.backup.restore.FullRestoreEngine;

     label32:
        r55 = r60;

        r56 = r60;

     label33:
        $r11 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r10 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver>;

        specialinvoke r1.<com.android.server.backup.restore.FullRestoreEngine: void <init>(com.android.server.backup.UserBackupManagerService,com.android.server.backup.BackupRestoreTask,android.app.backup.IFullBackupRestoreObserver,android.app.backup.IBackupManagerMonitor,android.content.pm.PackageInfo,boolean,int,boolean)>($r11, null, $r10, null, null, 1, 0, 1);

     label34:
        r55 = r60;

        r56 = r60;

     label35:
        r66 = new com.android.server.backup.restore.FullRestoreEngineThread;

     label36:
        r55 = r60;

        r56 = r60;

     label37:
        specialinvoke r66.<com.android.server.backup.restore.FullRestoreEngineThread: void <init>(com.android.server.backup.restore.FullRestoreEngine,java.io.InputStream)>(r1, r62);

     label38:
        r55 = r60;

        r56 = r60;

     label39:
        virtualinvoke r66.<com.android.server.backup.restore.FullRestoreEngineThread: void run()>();

     label40:
        virtualinvoke r60.<java.io.FileInputStream: void close()>();

        $r12 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.os.ParcelFileDescriptor mInputFile>;

        virtualinvoke $r12.<android.os.ParcelFileDescriptor: void close()>();

     label41:
        goto label43;

     label42:
        $r51 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Close of restore data pipe threw", $r51);

     label43:
        r68 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        entermonitor r68;

     label44:
        $r13 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r14 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r14.<java.lang.Object: void notifyAll()>();

        exitmonitor r68;

     label45:
        goto label59;

     label46:
        $r41 := @caughtexception;

     label47:
        exitmonitor r68;

     label48:
        throw $r41;

     label49:
        $r53 := @caughtexception;

        goto label63;

     label50:
        $r37 := @caughtexception;

        r55 = r56;

     label51:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to read restore input");

     label52:
        if r56 == null goto label54;

     label53:
        virtualinvoke r56.<java.io.FileInputStream: void close()>();

     label54:
        $r38 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.os.ParcelFileDescriptor mInputFile>;

        virtualinvoke $r38.<android.os.ParcelFileDescriptor: void close()>();

     label55:
        goto label57;

     label56:
        $r32 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Close of restore data pipe threw", $r32);

     label57:
        r72 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        entermonitor r72;

     label58:
        $r33 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r33.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r34 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r34.<java.lang.Object: void notifyAll()>();

        exitmonitor r72;

     label59:
        $r73 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.fullbackup.FullBackupObbConnection mObbConnection>;

        virtualinvoke $r73.<com.android.server.backup.fullbackup.FullBackupObbConnection: void tearDown()>();

        $r74 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver>;

        $r75 = staticinvoke <com.android.server.backup.utils.FullBackupRestoreObserverUtils: android.app.backup.IFullBackupRestoreObserver sendEndRestore(android.app.backup.IFullBackupRestoreObserver)>($r74);

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver> = $r75;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore pass complete.");

        $r76 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r77 = virtualinvoke $r76.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock getWakelock()>();

        virtualinvoke $r77.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        return;

     label60:
        $r36 := @caughtexception;

     label61:
        exitmonitor r72;

     label62:
        throw $r36;

     label63:
        if r55 == null goto label65;

     label64:
        virtualinvoke r55.<java.io.FileInputStream: void close()>();

     label65:
        $r54 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.os.ParcelFileDescriptor mInputFile>;

        virtualinvoke $r54.<android.os.ParcelFileDescriptor: void close()>();

     label66:
        goto label68;

     label67:
        $r43 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Close of restore data pipe threw", $r43);

     label68:
        r80 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        entermonitor r80;

     label69:
        $r44 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r44.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r45 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: java.util.concurrent.atomic.AtomicBoolean mLatchObject>;

        virtualinvoke $r45.<java.lang.Object: void notifyAll()>();

        exitmonitor r80;

     label70:
        $r46 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.fullbackup.FullBackupObbConnection mObbConnection>;

        virtualinvoke $r46.<com.android.server.backup.fullbackup.FullBackupObbConnection: void tearDown()>();

        $r47 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver>;

        $r48 = staticinvoke <com.android.server.backup.utils.FullBackupRestoreObserverUtils: android.app.backup.IFullBackupRestoreObserver sendEndRestore(android.app.backup.IFullBackupRestoreObserver)>($r47);

        r0.<com.android.server.backup.restore.PerformAdbRestoreTask: android.app.backup.IFullBackupRestoreObserver mObserver> = $r48;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore pass complete.");

        $r49 = r0.<com.android.server.backup.restore.PerformAdbRestoreTask: com.android.server.backup.UserBackupManagerService mBackupManagerService>;

        $r50 = virtualinvoke $r49.<com.android.server.backup.UserBackupManagerService: com.android.server.backup.UserBackupManagerService$BackupWakeLock getWakelock()>();

        virtualinvoke $r50.<com.android.server.backup.UserBackupManagerService$BackupWakeLock: void release()>();

        throw $r53;

     label71:
        $r39 := @caughtexception;

     label72:
        exitmonitor r80;

     label73:
        throw $r39;

        catch java.lang.Exception from label01 to label02 with label50;
        catch java.lang.Throwable from label01 to label02 with label49;
        catch java.lang.Exception from label03 to label04 with label50;
        catch java.lang.Throwable from label03 to label04 with label49;
        catch java.io.IOException from label05 to label05 with label07;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Exception from label15 to label16 with label50;
        catch java.lang.Throwable from label15 to label16 with label49;
        catch java.lang.Exception from label17 to label18 with label50;
        catch java.lang.Throwable from label17 to label18 with label49;
        catch java.lang.Exception from label19 to label20 with label50;
        catch java.lang.Throwable from label19 to label20 with label49;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Exception from label31 to label32 with label50;
        catch java.lang.Throwable from label31 to label32 with label49;
        catch java.lang.Exception from label33 to label34 with label50;
        catch java.lang.Throwable from label33 to label34 with label49;
        catch java.lang.Exception from label35 to label36 with label50;
        catch java.lang.Throwable from label35 to label36 with label49;
        catch java.lang.Exception from label37 to label38 with label50;
        catch java.lang.Throwable from label37 to label38 with label49;
        catch java.lang.Exception from label39 to label40 with label50;
        catch java.lang.Throwable from label39 to label40 with label49;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.lang.Throwable from label44 to label45 with label46;
        catch java.lang.Throwable from label47 to label48 with label46;
        catch java.lang.Throwable from label51 to label52 with label49;
        catch java.io.IOException from label53 to label54 with label56;
        catch java.io.IOException from label54 to label55 with label56;
        catch java.lang.Throwable from label58 to label59 with label60;
        catch java.lang.Throwable from label61 to label62 with label60;
        catch java.io.IOException from label64 to label65 with label67;
        catch java.io.IOException from label65 to label66 with label67;
        catch java.lang.Throwable from label69 to label70 with label71;
        catch java.lang.Throwable from label72 to label73 with label71;
    }
}
