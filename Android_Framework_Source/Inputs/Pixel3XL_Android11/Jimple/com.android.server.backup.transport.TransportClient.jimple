public class com.android.server.backup.transport.TransportClient extends java.lang.Object
{
    private static final int LOG_BUFFER_SIZE;
    static final java.lang.String TAG;
    private final android.content.Intent mBindIntent;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final android.content.ServiceConnection mConnection;
    private final android.content.Context mContext;
    private final java.lang.String mCreatorLogString;
    private final java.lang.String mIdentifier;
    private final android.os.Handler mListenerHandler;
    private final java.util.Map mListeners;
    private final java.util.List mLogBuffer;
    private final java.lang.Object mLogBufferLock;
    private final java.lang.String mPrefixForLog;
    private int mState;
    private final java.lang.Object mStateLock;
    private volatile com.android.internal.backup.IBackupTransport mTransport;
    private final android.content.ComponentName mTransportComponent;
    private final com.android.server.backup.transport.TransportStats mTransportStats;
    private final int mUserId;

    void <init>(int, android.content.Context, com.android.server.backup.transport.TransportStats, android.content.Intent, android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0;
        android.content.Context r1;
        com.android.server.backup.transport.TransportStats r2;
        android.content.Intent r3;
        android.content.ComponentName r4;
        java.lang.String r5, r6;
        android.os.Handler $r7;
        android.os.Looper $r8;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: com.android.server.backup.transport.TransportStats;

        r3 := @parameter3: android.content.Intent;

        r4 := @parameter4: android.content.ComponentName;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        $r7 = new android.os.Handler;

        $r8 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r7.<android.os.Handler: void <init>(android.os.Looper)>($r8);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void <init>(int,android.content.Context,com.android.server.backup.transport.TransportStats,android.content.Intent,android.content.ComponentName,java.lang.String,java.lang.String,android.os.Handler)>(i0, r1, r2, r3, r4, r5, r6, $r7);

        return;
    }

    void <init>(int, android.content.Context, com.android.server.backup.transport.TransportStats, android.content.Intent, android.content.ComponentName, java.lang.String, java.lang.String, android.os.Handler)
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0;
        android.content.Intent r1;
        android.content.ComponentName r2, $r12;
        java.lang.String r3, r4, $r13, $r17, $r20, r24;
        android.os.Handler r5;
        java.lang.Object $r6, $r7;
        dalvik.system.CloseGuard $r8, $r21;
        java.util.LinkedList $r9;
        android.util.ArrayMap $r10;
        com.android.server.backup.transport.TransportClient$TransportConnection $r11;
        java.lang.StringBuilder $r14;
        android.content.Context r22;
        com.android.server.backup.transport.TransportStats r23;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 := @parameter0: int;

        r22 := @parameter1: android.content.Context;

        r23 := @parameter2: com.android.server.backup.transport.TransportStats;

        r1 := @parameter3: android.content.Intent;

        r2 := @parameter4: android.content.ComponentName;

        r3 := @parameter5: java.lang.String;

        r4 := @parameter6: java.lang.String;

        r5 := @parameter7: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mLogBufferLock> = $r7;

        $r8 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.server.backup.transport.TransportClient: dalvik.system.CloseGuard mCloseGuard> = $r8;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.backup.transport.TransportClient: java.util.List mLogBuffer> = $r9;

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners> = $r10;

        r0.<com.android.server.backup.transport.TransportClient: int mState> = 1;

        r0.<com.android.server.backup.transport.TransportClient: int mUserId> = i0;

        r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext> = r22;

        r0.<com.android.server.backup.transport.TransportClient: com.android.server.backup.transport.TransportStats mTransportStats> = r23;

        r0.<com.android.server.backup.transport.TransportClient: android.content.ComponentName mTransportComponent> = r2;

        r0.<com.android.server.backup.transport.TransportClient: android.content.Intent mBindIntent> = r1;

        r0.<com.android.server.backup.transport.TransportClient: java.lang.String mIdentifier> = r3;

        r0.<com.android.server.backup.transport.TransportClient: java.lang.String mCreatorLogString> = r4;

        r0.<com.android.server.backup.transport.TransportClient: android.os.Handler mListenerHandler> = r5;

        $r11 = new com.android.server.backup.transport.TransportClient$TransportConnection;

        specialinvoke $r11.<com.android.server.backup.transport.TransportClient$TransportConnection: void <init>(android.content.Context,com.android.server.backup.transport.TransportClient,com.android.server.backup.transport.TransportClient$1)>(r22, r0, null);

        r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection> = $r11;

        $r12 = r0.<com.android.server.backup.transport.TransportClient: android.content.ComponentName mTransportComponent>;

        $r13 = virtualinvoke $r12.<android.content.ComponentName: java.lang.String getShortClassName()>();

        r24 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>(".*\\.", "");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r17 = r0.<com.android.server.backup.transport.TransportClient: java.lang.String mIdentifier>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.backup.transport.TransportClient: java.lang.String mPrefixForLog> = $r20;

        $r21 = r0.<com.android.server.backup.transport.TransportClient: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r21.<dalvik.system.CloseGuard: void open(java.lang.String)>("markAsDisposed");

        return;
    }

    static void access$100(com.android.server.backup.transport.TransportClient, android.os.IBinder)
    {
        com.android.server.backup.transport.TransportClient r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.backup.transport.TransportClient;

        r1 := @parameter1: android.os.IBinder;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void onServiceConnected(android.os.IBinder)>(r1);

        return;
    }

    static void access$200(com.android.server.backup.transport.TransportClient)
    {
        com.android.server.backup.transport.TransportClient r0;

        r0 := @parameter0: com.android.server.backup.transport.TransportClient;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void onServiceDisconnected()>();

        return;
    }

    static void access$300(com.android.server.backup.transport.TransportClient)
    {
        com.android.server.backup.transport.TransportClient r0;

        r0 := @parameter0: com.android.server.backup.transport.TransportClient;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void onBindingDied()>();

        return;
    }

    private void checkState(boolean, java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        boolean z0;
        java.lang.String r1;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(6, r1);

     label1:
        return;
    }

    private void checkStateIntegrityLocked()
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0, $i1;
        java.util.Map $r2, $r5, $r12;
        boolean $z2, $z3, z4, z5, z6, $z7, z8;
        com.android.internal.backup.IBackupTransport $r3, $r4, $r6, $r13;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r11;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        z4 = 0;

        if i0 == 0 goto label05;

        if i0 == 1 goto label08;

        if i0 == 2 goto label03;

        if i0 == 3 goto label01;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state = ");

        $i1 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        $r9 = specialinvoke r0.<com.android.server.backup.transport.TransportClient: java.lang.String stateToString(int)>($i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>(0, $r11);

        goto label10;

     label01:
        $r5 = r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners>;

        $z3 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>($z3, "Unexpected listeners when state = CONNECTED");

        $r6 = r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport>;

        if $r6 == null goto label02;

        z4 = 1;

     label02:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>(z4, "Transport expected to be non-null when state = CONNECTED");

        goto label10;

     label03:
        z5 = 0;

        $r4 = r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport>;

        if $r4 != null goto label04;

        z5 = 1;

     label04:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>(z5, "Transport expected to be null when state = BOUND_AND_CONNECTING");

        goto label10;

     label05:
        $r2 = r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners>;

        $z2 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>($z2, "Unexpected listeners when state = UNUSABLE");

        $r3 = r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport>;

        if $r3 != null goto label06;

        z6 = 1;

        goto label07;

     label06:
        z6 = 0;

     label07:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>(z6, "Transport expected to be null when state = UNUSABLE");

     label08:
        $r12 = r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners>;

        $z7 = interfaceinvoke $r12.<java.util.Map: boolean isEmpty()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>($z7, "Unexpected listeners when state = IDLE");

        z8 = 0;

        $r13 = r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport>;

        if $r13 != null goto label09;

        z8 = 1;

     label09:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkState(boolean,java.lang.String)>(z8, "Transport expected to be null when state = IDLE");

     label10:
        return;
    }

    static void lambda$connect$0(java.util.concurrent.CompletableFuture, com.android.internal.backup.IBackupTransport, com.android.server.backup.transport.TransportClient)
    {
        java.util.concurrent.CompletableFuture r0;
        com.android.internal.backup.IBackupTransport r1;
        com.android.server.backup.transport.TransportClient r2;

        r0 := @parameter0: java.util.concurrent.CompletableFuture;

        r1 := @parameter1: com.android.internal.backup.IBackupTransport;

        r2 := @parameter2: com.android.server.backup.transport.TransportClient;

        virtualinvoke r0.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(r1);

        return;
    }

    private void log(int, java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0;
        java.lang.String r1, $r2, $r3, $r4;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.backup.transport.TransportClient: java.lang.String mPrefixForLog>;

        $r3 = staticinvoke <com.android.server.backup.transport.TransportUtils: java.lang.String formatMessage(java.lang.String,java.lang.String,java.lang.String)>($r2, null, r1);

        staticinvoke <com.android.server.backup.transport.TransportUtils: void log(int,java.lang.String,java.lang.String)>(i0, "TransportClient", $r3);

        $r4 = staticinvoke <com.android.server.backup.transport.TransportUtils: java.lang.String formatMessage(java.lang.String,java.lang.String,java.lang.String)>(null, null, r1);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void saveLogEntry(java.lang.String)>($r4);

        return;
    }

    private void log(int, java.lang.String, java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0;
        java.lang.String r1, r2, $r3, $r4, $r5;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.backup.transport.TransportClient: java.lang.String mPrefixForLog>;

        $r4 = staticinvoke <com.android.server.backup.transport.TransportUtils: java.lang.String formatMessage(java.lang.String,java.lang.String,java.lang.String)>($r3, r1, r2);

        staticinvoke <com.android.server.backup.transport.TransportUtils: void log(int,java.lang.String,java.lang.String)>(i0, "TransportClient", $r4);

        $r5 = staticinvoke <com.android.server.backup.transport.TransportUtils: java.lang.String formatMessage(java.lang.String,java.lang.String,java.lang.String)>(null, r1, r2);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void saveLogEntry(java.lang.String)>($r5);

        return;
    }

    private void notifyListener(com.android.server.backup.transport.TransportConnectionListener, com.android.internal.backup.IBackupTransport, java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        com.android.server.backup.transport.TransportConnectionListener r1;
        com.android.internal.backup.IBackupTransport r2;
        java.lang.String r3, $r10, r13;
        java.lang.StringBuilder $r5;
        com.android.server.backup.transport._$$Lambda$TransportClient$ciIUj0x0CRg93UETUpy2FB5aqCQ $r11;
        android.os.Handler $r12;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 := @parameter0: com.android.server.backup.transport.TransportConnectionListener;

        r2 := @parameter1: com.android.internal.backup.IBackupTransport;

        r3 := @parameter2: java.lang.String;

        if r2 == null goto label1;

        r13 = "IBackupTransport";

        goto label2;

     label1:
        r13 = "null";

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notifying [");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] transport = ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(4, $r10);

        $r12 = r0.<com.android.server.backup.transport.TransportClient: android.os.Handler mListenerHandler>;

        $r11 = new com.android.server.backup.transport._$$Lambda$TransportClient$ciIUj0x0CRg93UETUpy2FB5aqCQ;

        specialinvoke $r11.<com.android.server.backup.transport._$$Lambda$TransportClient$ciIUj0x0CRg93UETUpy2FB5aqCQ: void <init>(com.android.server.backup.transport.TransportClient,com.android.server.backup.transport.TransportConnectionListener,com.android.internal.backup.IBackupTransport)>(r0, r1, r2);

        virtualinvoke $r12.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        return;
    }

    private void notifyListenersAndClearLocked(com.android.internal.backup.IBackupTransport)
    {
        com.android.server.backup.transport.TransportClient r0;
        com.android.internal.backup.IBackupTransport r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r4, $r6;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r7, $r8, $r10;
        com.android.server.backup.transport.TransportConnectionListener $r9;
        java.lang.String $r11;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 := @parameter0: com.android.internal.backup.IBackupTransport;

        $r4 = r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (com.android.server.backup.transport.TransportConnectionListener) $r8;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void notifyListener(com.android.server.backup.transport.TransportConnectionListener,com.android.internal.backup.IBackupTransport,java.lang.String)>($r9, r1, $r11);

        goto label1;

     label2:
        $r6 = r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        return;
    }

    private void onBindingDied()
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.Object r1;
        int i0;
        android.content.ServiceConnection $r3, $r5;
        android.content.Context $r4, $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkStateIntegrityLocked()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(6, "Binding died: client UNUSABLE");

        i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

     label02:
        if i0 == 1 goto label07;

        if i0 == 2 goto label05;

        if i0 == 3 goto label03;

        goto label08;

     label03:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(0, null);

        $r6 = r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext>;

        $r5 = r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection>;

        virtualinvoke $r6.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r5);

     label04:
        goto label08;

     label05:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(0, null);

        $r4 = r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext>;

        $r3 = r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection>;

        virtualinvoke $r4.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r3);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void notifyListenersAndClearLocked(com.android.internal.backup.IBackupTransport)>(null);

     label06:
        goto label08;

     label07:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(6, "Unexpected state transition IDLE => UNUSABLE");

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(0, null);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void onServiceConnected(android.os.IBinder)
    {
        com.android.server.backup.transport.TransportClient r0;
        int $i0;
        java.lang.Throwable $r1;
        android.os.IBinder r2;
        com.android.internal.backup.IBackupTransport r3;
        java.lang.Object r4;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r2 := @parameter0: android.os.IBinder;

        r3 = staticinvoke <com.android.internal.backup.IBackupTransport$Stub: com.android.internal.backup.IBackupTransport asInterface(android.os.IBinder)>(r2);

        r4 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r4;

     label1:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkStateIntegrityLocked()>();

        $i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        if $i0 == 0 goto label2;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(3, "Transport connected");

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(3, r3);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void notifyListenersAndClearLocked(com.android.internal.backup.IBackupTransport)>(r3);

     label2:
        exitmonitor r4;

     label3:
        return;

     label4:
        $r1 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void onServiceDisconnected()
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.Object r1;
        android.content.ServiceConnection $r3;
        android.content.Context $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.String $r8, $r10;
        java.lang.StringBuilder r13;
        java.lang.IllegalArgumentException r14;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(6, "Service disconnected: client UNUSABLE");

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(0, null);

     label02:
        $r4 = r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext>;

        $r3 = r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection>;

        virtualinvoke $r4.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r3);

     label03:
        goto label06;

     label04:
        $r6 := @caughtexception;

     label05:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception trying to unbind onServiceDisconnected(): ");

        r14 = (java.lang.IllegalArgumentException) $r6;

        $r8 = virtualinvoke r14.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(5, $r10);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void onStateTransition(int, int)
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.String r1;
        int i0, i3, i4, i5;
        android.content.ComponentName $r2;
        java.lang.Object[] $r3, $r5;
        java.lang.Integer $r4, $r6;
        byte b6, b7;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        $r2 = r0.<com.android.server.backup.transport.TransportClient: android.content.ComponentName mTransportComponent>;

        r1 = virtualinvoke $r2.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        i0 = specialinvoke r0.<com.android.server.backup.transport.TransportClient: int transitionThroughState(int,int,int)>(i3, i4, 2);

        i5 = specialinvoke r0.<com.android.server.backup.transport.TransportClient: int transitionThroughState(int,int,int)>(i3, i4, 3);

        if i0 == 0 goto label3;

        if i0 != 1 goto label1;

        b6 = 1;

        goto label2;

     label1:
        b6 = 0;

     label2:
        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b6);

        $r5[1] = $r6;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(2850, $r5);

     label3:
        if i5 == 0 goto label6;

        if i5 != 1 goto label4;

        b7 = 1;

        goto label5;

     label4:
        b7 = 0;

     label5:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b7);

        $r3[1] = $r4;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(2851, $r3);

     label6:
        return;
    }

    private void saveLogEntry(java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.CharSequence r1;
        long $l0;
        java.lang.StringBuilder $r2;
        java.util.List $r6, $r7, $r8, $r9;
        int $i1, $i2, $i3;
        java.lang.Throwable $r11;
        java.lang.String r12, r14;
        java.lang.Object r15;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r12 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1 = staticinvoke <android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)>("yyyy-MM-dd HH:mm:ss", $l0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mLogBufferLock>;

        entermonitor r15;

     label1:
        $r6 = r0.<com.android.server.backup.transport.TransportClient: java.util.List mLogBuffer>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 != 5 goto label2;

        $r9 = r0.<com.android.server.backup.transport.TransportClient: java.util.List mLogBuffer>;

        $r8 = r0.<com.android.server.backup.transport.TransportClient: java.util.List mLogBuffer>;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>($i3);

     label2:
        $r7 = r0.<com.android.server.backup.transport.TransportClient: java.util.List mLogBuffer>;

        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, r14);

        exitmonitor r15;

     label3:
        return;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r15;

     label6:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setStateLocked(int, com.android.internal.backup.IBackupTransport)
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0, $i1, $i2;
        com.android.internal.backup.IBackupTransport r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8, $r10;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.backup.IBackupTransport;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State: ");

        $i1 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        $r5 = specialinvoke r0.<com.android.server.backup.transport.TransportClient: java.lang.String stateToString(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r8 = specialinvoke r0.<com.android.server.backup.transport.TransportClient: java.lang.String stateToString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(2, $r10);

        $i2 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void onStateTransition(int,int)>($i2, i0);

        r0.<com.android.server.backup.transport.TransportClient: int mState> = i0;

        r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport> = r1;

        return;
    }

    private java.lang.String stateToString(int)
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<UNKNOWN = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label1:
        return "CONNECTED";

     label2:
        return "BOUND_AND_CONNECTING";

     label3:
        return "IDLE";

     label4:
        return "UNUSABLE";
    }

    private int transitionThroughState(int, int, int)
    {
        com.android.server.backup.transport.TransportClient r0;
        int i0, i1, i2;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 >= i2 goto label1;

        if i2 > i1 goto label1;

        return 1;

     label1:
        if i0 < i2 goto label2;

        if i2 <= i1 goto label2;

        return -1;

     label2:
        return 0;
    }

    public com.android.internal.backup.IBackupTransport connect(java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.String r1, $r11, $r17, $r19, r21;
        android.os.Looper $r2;
        boolean $z0, $z1;
        int $i0;
        java.lang.Object $r5, r23;
        long $l1, l2, l3;
        android.content.ComponentName $r6;
        com.android.server.backup.transport.TransportStats $r7;
        java.lang.Object[] $r8;
        java.util.Locale $r9;
        java.lang.Long $r10;
        java.lang.Throwable $r12, $r20;
        java.lang.Class $r13;
        com.android.internal.backup.IBackupTransport r22, r26;
        java.util.concurrent.CompletableFuture r30;
        com.android.server.backup.transport._$$Lambda$TransportClient$uc3fygwQjQIS_JT7mlt_yMBfJcE r31;
        java.lang.StringBuilder r32;
        java.lang.Exception r33;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r21 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $z0 = virtualinvoke $r2.<android.os.Looper: boolean isCurrentThread()>();

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Can\'t call connect() on main thread");

        r22 = r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport>;

        if r22 == null goto label01;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(3, r21, "Sync connect: reusing transport");

        return r22;

     label01:
        r23 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r23;

     label02:
        $i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        if $i0 != 0 goto label04;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(5, r21, "Sync connect: UNUSABLE client");

        exitmonitor r23;

     label03:
        return null;

     label04:
        exitmonitor r23;

     label05:
        r30 = new java.util.concurrent.CompletableFuture;

        specialinvoke r30.<java.util.concurrent.CompletableFuture: void <init>()>();

        r31 = new com.android.server.backup.transport._$$Lambda$TransportClient$uc3fygwQjQIS_JT7mlt_yMBfJcE;

        specialinvoke r31.<com.android.server.backup.transport._$$Lambda$TransportClient$uc3fygwQjQIS_JT7mlt_yMBfJcE: void <init>(java.util.concurrent.CompletableFuture)>(r30);

        l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(3, r21, "Sync connect: calling async");

        virtualinvoke r0.<com.android.server.backup.transport.TransportClient: void connectAsync(com.android.server.backup.transport.TransportConnectionListener,java.lang.String)>(r31, r21);

     label06:
        $r5 = virtualinvoke r30.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        r26 = (com.android.internal.backup.IBackupTransport) $r5;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l3 = $l1 - l2;

        $r7 = r0.<com.android.server.backup.transport.TransportClient: com.android.server.backup.transport.TransportStats mTransportStats>;

        $r6 = r0.<com.android.server.backup.transport.TransportClient: android.content.ComponentName mTransportComponent>;

        virtualinvoke $r7.<com.android.server.backup.transport.TransportStats: void registerConnectionTime(android.content.ComponentName,long)>($r6, l3);

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r8 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r9, "Connect took %d ms", $r8);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(3, r21, $r11);

     label07:
        return r26;

     label08:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getSimpleName()>();

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while waiting for transport: ");

        r33 = (java.lang.Exception) $r12;

        $r17 = virtualinvoke r33.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(6, r21, $r19);

        return null;

     label09:
        $r20 := @caughtexception;

     label10:
        exitmonitor r23;

     label11:
        throw $r20;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.util.concurrent.ExecutionException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void connectAsync(com.android.server.backup.transport.TransportConnectionListener, java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.String r1;
        java.lang.Object r2;
        int i0, $i1;
        android.content.Context $r3, $r8;
        android.content.Intent $r4;
        android.content.ServiceConnection $r5, $r7;
        android.os.UserHandle $r6;
        boolean $z0;
        java.util.Map $r9, $r11;
        com.android.internal.backup.IBackupTransport $r13;
        java.lang.Throwable $r14;
        com.android.server.backup.transport.TransportConnectionListener r15;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r15 := @parameter0: com.android.server.backup.transport.TransportConnectionListener;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r2;

     label01:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkStateIntegrityLocked()>();

        i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

     label02:
        if i0 == 0 goto label11;

        if i0 == 1 goto label07;

        if i0 == 2 goto label05;

        if i0 == 3 goto label03;

        goto label12;

     label03:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(3, r1, "Async connect: reusing transport");

        $r13 = r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport>;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void notifyListener(com.android.server.backup.transport.TransportConnectionListener,com.android.internal.backup.IBackupTransport,java.lang.String)>(r15, $r13, r1);

     label04:
        goto label12;

     label05:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(3, r1, "Async connect: already connecting, adding listener");

        $r11 = r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r1);

     label06:
        goto label12;

     label07:
        $r3 = r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext>;

        $r4 = r0.<com.android.server.backup.transport.TransportClient: android.content.Intent mBindIntent>;

        $r5 = r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection>;

        $i1 = r0.<com.android.server.backup.transport.TransportClient: int mUserId>;

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        $z0 = virtualinvoke $r3.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>($r4, $r5, 1, $r6);

        if $z0 == 0 goto label09;

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(3, r1, "Async connect: service bound, connecting");

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(2, null);

        $r9 = r0.<com.android.server.backup.transport.TransportClient: java.util.Map mListeners>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r1);

     label08:
        goto label12;

     label09:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String)>(6, "Async connect: bindService returned false");

        $r8 = r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext>;

        $r7 = r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection>;

        virtualinvoke $r8.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r7);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void notifyListener(com.android.server.backup.transport.TransportConnectionListener,com.android.internal.backup.IBackupTransport,java.lang.String)>(r15, null, r1);

     label10:
        goto label12;

     label11:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(5, r1, "Async connect: UNUSABLE client");

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void notifyListener(com.android.server.backup.transport.TransportConnectionListener,com.android.internal.backup.IBackupTransport,java.lang.String)>(r15, null, r1);

     label12:
        exitmonitor r2;

     label13:
        return;

     label14:
        $r14 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public com.android.internal.backup.IBackupTransport connectOrThrow(java.lang.String) throws com.android.server.backup.transport.TransportNotAvailableException
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.String r1;
        com.android.internal.backup.IBackupTransport r2;
        com.android.server.backup.transport.TransportNotAvailableException $r3;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport connect(java.lang.String)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(6, r1, "Transport connection failed");

        $r3 = new com.android.server.backup.transport.TransportNotAvailableException;

        specialinvoke $r3.<com.android.server.backup.transport.TransportNotAvailableException: void <init>()>();

        throw $r3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.Object r1;
        dalvik.system.CloseGuard $r2;
        int $i0;
        java.lang.String $r4, $r7;
        java.lang.Throwable $r8, $r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.backup.transport.TransportClient: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void warnIfOpen()>();

        $i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        if $i0 < 2 goto label5;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dangling TransportClient created in [");

        $r4 = r0.<com.android.server.backup.transport.TransportClient: java.lang.String mCreatorLogString>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] being GC\'ed. Left bound, unbinding...");

        $r7 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(6, "TransportClient.finalize()", $r7);

     label2:
        virtualinvoke r0.<com.android.server.backup.transport.TransportClient: void unbind(java.lang.String)>("TransportClient.finalize()");

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public com.android.internal.backup.IBackupTransport getConnectedTransport(java.lang.String) throws com.android.server.backup.transport.TransportNotAvailableException
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.String r1;
        com.android.internal.backup.IBackupTransport r2;
        com.android.server.backup.transport.TransportNotAvailableException $r3;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.backup.transport.TransportClient: com.android.internal.backup.IBackupTransport mTransport>;

        if r2 == null goto label1;

        return r2;

     label1:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(6, r1, "Transport not connected");

        $r3 = new com.android.server.backup.transport.TransportNotAvailableException;

        specialinvoke $r3.<com.android.server.backup.transport.TransportNotAvailableException: void <init>()>();

        throw $r3;
    }

    java.util.List getLogBuffer()
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.Object r1;
        java.util.List $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mLogBufferLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.backup.transport.TransportClient: java.util.List mLogBuffer>;

        r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        exitmonitor r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.ComponentName getTransportComponent()
    {
        com.android.server.backup.transport.TransportClient r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        $r1 = r0.<com.android.server.backup.transport.TransportClient: android.content.ComponentName mTransportComponent>;

        return $r1;
    }

    public void lambda$notifyListener$1$TransportClient(com.android.server.backup.transport.TransportConnectionListener, com.android.internal.backup.IBackupTransport)
    {
        com.android.server.backup.transport.TransportClient r0;
        com.android.server.backup.transport.TransportConnectionListener r1;
        com.android.internal.backup.IBackupTransport r2;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 := @parameter0: com.android.server.backup.transport.TransportConnectionListener;

        r2 := @parameter1: com.android.internal.backup.IBackupTransport;

        interfaceinvoke r1.<com.android.server.backup.transport.TransportConnectionListener: void onTransportConnectionResult(com.android.internal.backup.IBackupTransport,com.android.server.backup.transport.TransportClient)>(r2, r0);

        return;
    }

    public void markAsDisposed()
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.Object r1;
        int $i0;
        dalvik.system.CloseGuard $r3;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r1 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        if $i0 >= 2 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Can\'t mark as disposed if still bound");

        $r3 = r0.<com.android.server.backup.transport.TransportClient: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void close()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String toString()
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.StringBuilder $r2;
        android.content.ComponentName $r4;
        java.lang.String $r5, $r8, $r11;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TransportClient{");

        $r4 = r0.<com.android.server.backup.transport.TransportClient: android.content.ComponentName mTransportComponent>;

        $r5 = virtualinvoke $r4.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r8 = r0.<com.android.server.backup.transport.TransportClient: java.lang.String mIdentifier>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public void unbind(java.lang.String)
    {
        com.android.server.backup.transport.TransportClient r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        int i0, $i1;
        java.lang.String $r4, $r7, r13;
        android.content.ServiceConnection $r8, $r10;
        android.content.Context $r9, $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.backup.transport.TransportClient;

        r13 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.backup.transport.TransportClient: java.lang.Object mStateLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void checkStateIntegrityLocked()>();

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unbind requested (was ");

        $i1 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

        $r4 = specialinvoke r0.<com.android.server.backup.transport.TransportClient: java.lang.String stateToString(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void log(int,java.lang.String,java.lang.String)>(3, r13, $r7);

        i0 = r0.<com.android.server.backup.transport.TransportClient: int mState>;

     label02:
        if i0 == 2 goto label05;

        if i0 == 3 goto label03;

        goto label06;

     label03:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(1, null);

        $r11 = r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext>;

        $r10 = r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection>;

        virtualinvoke $r11.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r10);

     label04:
        goto label06;

     label05:
        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void setStateLocked(int,com.android.internal.backup.IBackupTransport)>(1, null);

        $r9 = r0.<com.android.server.backup.transport.TransportClient: android.content.Context mContext>;

        $r8 = r0.<com.android.server.backup.transport.TransportClient: android.content.ServiceConnection mConnection>;

        virtualinvoke $r9.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r8);

        specialinvoke r0.<com.android.server.backup.transport.TransportClient: void notifyListenersAndClearLocked(com.android.internal.backup.IBackupTransport)>(null);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.transport.TransportClient: java.lang.String TAG> = "TransportClient";

        <com.android.server.backup.transport.TransportClient: int LOG_BUFFER_SIZE> = 5;

        return;
    }
}
