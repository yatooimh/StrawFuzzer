public class com.android.server.backup.utils.PasswordUtils extends java.lang.Object
{
    public static final java.lang.String ENCRYPTION_ALGORITHM_NAME;
    public static final int PBKDF2_HASH_ROUNDS;
    private static final int PBKDF2_KEY_SIZE;
    public static final int PBKDF2_SALT_SIZE;

    public void <init>()
    {
        com.android.server.backup.utils.PasswordUtils r0;

        r0 := @this: com.android.server.backup.utils.PasswordUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static javax.crypto.SecretKey buildCharArrayKey(java.lang.String, char[], byte[], int)
    {
        char[] r0;
        byte[] r1;
        int i0;
        javax.crypto.spec.PBEKeySpec r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5;
        javax.crypto.SecretKeyFactory r6;
        javax.crypto.SecretKey r7;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: char[];

        r1 := @parameter2: byte[];

        i0 := @parameter3: int;

     label1:
        r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r5);

        r2 = new javax.crypto.spec.PBEKeySpec;

        specialinvoke r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r0, r1, i0, 256);

        r7 = virtualinvoke r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r2);

     label2:
        return r7;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "PBKDF2 unavailable!");

        goto label5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Invalid key spec for PBKDF2!");

     label5:
        return null;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label4;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static java.lang.String buildPasswordHash(java.lang.String, java.lang.String, byte[], int)
    {
        java.lang.String r0, $r3, r4;
        byte[] r1, $r2;
        int i0;
        javax.crypto.SecretKey r5;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: byte[];

        i0 := @parameter3: int;

        r5 = staticinvoke <com.android.server.backup.utils.PasswordUtils: javax.crypto.SecretKey buildPasswordKey(java.lang.String,java.lang.String,byte[],int)>(r4, r0, r1, i0);

        if r5 == null goto label1;

        $r2 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r3 = staticinvoke <com.android.server.backup.utils.PasswordUtils: java.lang.String byteArrayToHex(byte[])>($r2);

        return $r3;

     label1:
        return null;
    }

    public static javax.crypto.SecretKey buildPasswordKey(java.lang.String, java.lang.String, byte[], int)
    {
        java.lang.String r0, r1;
        byte[] r2;
        int i0;
        char[] $r3;
        javax.crypto.SecretKey $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r4 = staticinvoke <com.android.server.backup.utils.PasswordUtils: javax.crypto.SecretKey buildCharArrayKey(java.lang.String,char[],byte[],int)>(r0, $r3, r2, i0);

        return $r4;
    }

    public static java.lang.String byteArrayToHex(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <libcore.util.HexEncoding: java.lang.String encodeToString(byte[],boolean)>(r0, 1);

        return $r1;
    }

    public static byte[] hexToByteArray(java.lang.String)
    {
        java.lang.String r0, $r3;
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i9, i10;
        java.lang.IllegalArgumentException $r2;
        byte $b7, $b8;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i9 = $i0 / 2;

        $i1 = i9 * 2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != $i2 goto label3;

        r1 = newarray (byte)[i9];

        i10 = 0;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i10 >= $i3 goto label2;

        $i5 = i10 / 2;

        $i4 = i10 + 2;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i10, $i4);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $b7 = (byte) $i6;

        $b8 = (byte) $b7;

        r1[$i5] = $b8;

        i10 = i10 + 2;

        goto label1;

     label2:
        return r1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hex string must have an even number of digits");

        throw $r2;
    }

    public static byte[] makeKeyChecksum(java.lang.String, byte[], byte[], int)
    {
        java.lang.String r0;
        byte[] r1, r2, $r5;
        int i0, $i1, $i2, i6;
        char[] r3;
        javax.crypto.SecretKey $r4;
        byte $b3;
        char $c4, $c5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        $i1 = lengthof r1;

        r3 = newarray (char)[$i1];

        i6 = 0;

     label1:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label2;

        $b3 = r1[i6];

        $c4 = (char) $b3;

        $c5 = (char) $c4;

        r3[i6] = $c5;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <com.android.server.backup.utils.PasswordUtils: javax.crypto.SecretKey buildCharArrayKey(java.lang.String,char[],byte[],int)>(r0, r3, r2, i0);

        $r5 = interfaceinvoke $r4.<java.security.Key: byte[] getEncoded()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.utils.PasswordUtils: int PBKDF2_SALT_SIZE> = 512;

        <com.android.server.backup.utils.PasswordUtils: int PBKDF2_KEY_SIZE> = 256;

        <com.android.server.backup.utils.PasswordUtils: int PBKDF2_HASH_ROUNDS> = 10000;

        <com.android.server.backup.utils.PasswordUtils: java.lang.String ENCRYPTION_ALGORITHM_NAME> = "AES-256";

        return;
    }
}
