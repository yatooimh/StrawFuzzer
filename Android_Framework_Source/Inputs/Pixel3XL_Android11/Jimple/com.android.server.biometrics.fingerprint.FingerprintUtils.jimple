public class com.android.server.biometrics.fingerprint.FingerprintUtils extends java.lang.Object implements com.android.server.biometrics.BiometricUtils
{
    private static com.android.server.biometrics.fingerprint.FingerprintUtils sInstance;
    private static final java.lang.Object sInstanceLock;
    private final android.util.SparseArray mUsers;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.android.server.biometrics.fingerprint.FingerprintUtils: java.lang.Object sInstanceLock> = $r0;

        return;
    }

    private void <init>()
    {
        com.android.server.biometrics.fingerprint.FingerprintUtils r0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.biometrics.fingerprint.FingerprintUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: android.util.SparseArray mUsers> = $r1;

        return;
    }

    public static com.android.server.biometrics.fingerprint.FingerprintUtils getInstance()
    {
        java.lang.Object r0;
        com.android.server.biometrics.fingerprint.FingerprintUtils $r1, $r2, r4;
        java.lang.Throwable $r3;

        r0 = <com.android.server.biometrics.fingerprint.FingerprintUtils: java.lang.Object sInstanceLock>;

        entermonitor r0;

     label1:
        $r1 = <com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUtils sInstance>;

        if $r1 != null goto label2;

        r4 = new com.android.server.biometrics.fingerprint.FingerprintUtils;

        specialinvoke r4.<com.android.server.biometrics.fingerprint.FingerprintUtils: void <init>()>();

        <com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUtils sInstance> = r4;

     label2:
        exitmonitor r0;

     label3:
        $r2 = <com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUtils sInstance>;

        return $r2;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private com.android.server.biometrics.fingerprint.FingerprintUserState getStateForUser(android.content.Context, int)
    {
        com.android.server.biometrics.fingerprint.FingerprintUtils r0;
        int i0;
        com.android.server.biometrics.fingerprint.FingerprintUserState r1, r7;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3;
        java.lang.Throwable $r5;
        android.content.Context r6;

        r0 := @this: com.android.server.biometrics.fingerprint.FingerprintUtils;

        r6 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: android.util.SparseArray mUsers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.biometrics.fingerprint.FingerprintUserState) $r3;

     label2:
        r7 = r1;

        if r1 != null goto label5;

     label3:
        r7 = new com.android.server.biometrics.fingerprint.FingerprintUserState;

        specialinvoke r7.<com.android.server.biometrics.fingerprint.FingerprintUserState: void <init>(android.content.Context,int)>(r6, i0);

     label4:
        $r4 = r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: android.util.SparseArray mUsers>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7);

     label5:
        exitmonitor r0;

     label6:
        return r7;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void addBiometricForUser(android.content.Context, int, android.hardware.biometrics.BiometricAuthenticator$Identifier)
    {
        com.android.server.biometrics.fingerprint.FingerprintUtils r0;
        android.content.Context r1;
        int i0;
        android.hardware.biometrics.BiometricAuthenticator$Identifier r2;
        com.android.server.biometrics.fingerprint.FingerprintUserState $r3;

        r0 := @this: com.android.server.biometrics.fingerprint.FingerprintUtils;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: android.hardware.biometrics.BiometricAuthenticator$Identifier;

        $r3 = specialinvoke r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUserState getStateForUser(android.content.Context,int)>(r1, i0);

        virtualinvoke $r3.<com.android.server.biometrics.fingerprint.FingerprintUserState: void addBiometric(android.hardware.biometrics.BiometricAuthenticator$Identifier)>(r2);

        return;
    }

    public java.util.List getBiometricsForUser(android.content.Context, int)
    {
        com.android.server.biometrics.fingerprint.FingerprintUtils r0;
        android.content.Context r1;
        int i0;
        com.android.server.biometrics.fingerprint.FingerprintUserState $r2;
        java.util.List $r3;

        r0 := @this: com.android.server.biometrics.fingerprint.FingerprintUtils;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUserState getStateForUser(android.content.Context,int)>(r1, i0);

        $r3 = virtualinvoke $r2.<com.android.server.biometrics.fingerprint.FingerprintUserState: java.util.List getBiometrics()>();

        return $r3;
    }

    public java.lang.CharSequence getUniqueName(android.content.Context, int)
    {
        com.android.server.biometrics.fingerprint.FingerprintUtils r0;
        android.content.Context r1;
        int i0;
        com.android.server.biometrics.fingerprint.FingerprintUserState $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.biometrics.fingerprint.FingerprintUtils;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUserState getStateForUser(android.content.Context,int)>(r1, i0);

        $r3 = virtualinvoke $r2.<com.android.server.biometrics.fingerprint.FingerprintUserState: java.lang.String getUniqueName()>();

        return $r3;
    }

    public void removeBiometricForUser(android.content.Context, int, int)
    {
        com.android.server.biometrics.fingerprint.FingerprintUtils r0;
        android.content.Context r1;
        int i0, i1;
        com.android.server.biometrics.fingerprint.FingerprintUserState $r2;

        r0 := @this: com.android.server.biometrics.fingerprint.FingerprintUtils;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUserState getStateForUser(android.content.Context,int)>(r1, i0);

        virtualinvoke $r2.<com.android.server.biometrics.fingerprint.FingerprintUserState: void removeBiometric(int)>(i1);

        return;
    }

    public void renameBiometricForUser(android.content.Context, int, int, java.lang.CharSequence)
    {
        com.android.server.biometrics.fingerprint.FingerprintUtils r0;
        android.content.Context r1;
        int i0, i1;
        java.lang.CharSequence r2;
        boolean $z0;
        com.android.server.biometrics.fingerprint.FingerprintUserState $r3;

        r0 := @this: com.android.server.biometrics.fingerprint.FingerprintUtils;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.CharSequence;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = specialinvoke r0.<com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUserState getStateForUser(android.content.Context,int)>(r1, i0);

        virtualinvoke $r3.<com.android.server.biometrics.fingerprint.FingerprintUserState: void renameBiometric(int,java.lang.CharSequence)>(i1, r2);

        return;
    }
}
