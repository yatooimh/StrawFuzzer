class com.android.server.blob.BlobAccessMode extends java.lang.Object
{
    public static final int ACCESS_TYPE_PRIVATE;
    public static final int ACCESS_TYPE_PUBLIC;
    public static final int ACCESS_TYPE_SAME_SIGNATURE;
    public static final int ACCESS_TYPE_WHITELIST;
    private int mAccessType;
    private final android.util.ArraySet mWhitelistedPackages;

    void <init>()
    {
        com.android.server.blob.BlobAccessMode r0;
        android.util.ArraySet $r1;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.blob.BlobAccessMode: int mAccessType> = 1;

        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages> = $r1;

        return;
    }

    static com.android.server.blob.BlobAccessMode createFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        int i0, $i1;
        com.android.server.blob.BlobAccessMode $r2;
        java.lang.String $r3, $r4, $r5;
        boolean $z0, $z1;
        byte[] $r6;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r2 = new com.android.server.blob.BlobAccessMode;

        specialinvoke $r2.<com.android.server.blob.BlobAccessMode: void <init>()>();

        $i1 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "t");

        $r2.<com.android.server.blob.BlobAccessMode: int mAccessType> = $i1;

        i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r0, i0);

        if $z1 == 0 goto label2;

        $r3 = "wl";

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "p");

        $r6 = staticinvoke <com.android.internal.util.XmlUtils: byte[] readByteArrayAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "ct");

        virtualinvoke $r2.<com.android.server.blob.BlobAccessMode: void allowPackageAccess(java.lang.String,byte[])>($r5, $r6);

        goto label1;

     label2:
        return $r2;
    }

    void allow(com.android.server.blob.BlobAccessMode)
    {
        com.android.server.blob.BlobAccessMode r0, r1;
        int $i0, $i1, $i2, $i3, $i4;
        android.util.ArraySet $r2, $r3;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        r1 := @parameter0: com.android.server.blob.BlobAccessMode;

        $i0 = r1.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $r3 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $r2 = r1.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        virtualinvoke $r3.<android.util.ArraySet: void addAll(android.util.ArraySet)>($r2);

     label1:
        $i3 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i2 = r1.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i4 = $i3 | $i2;

        r0.<com.android.server.blob.BlobAccessMode: int mAccessType> = $i4;

        return;
    }

    void allowPackageAccess(java.lang.String, byte[])
    {
        com.android.server.blob.BlobAccessMode r0;
        java.lang.String r1;
        byte[] r2;
        int $i0, $i1;
        android.util.ArraySet $r3;
        com.android.server.blob.BlobAccessMode$PackageIdentifier $r4;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 | 8;

        r0.<com.android.server.blob.BlobAccessMode: int mAccessType> = $i1;

        $r3 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $r4 = staticinvoke <com.android.server.blob.BlobAccessMode$PackageIdentifier: com.android.server.blob.BlobAccessMode$PackageIdentifier create(java.lang.String,byte[])>(r1, r2);

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r4);

        return;
    }

    void allowPublicAccess()
    {
        com.android.server.blob.BlobAccessMode r0;
        int $i0, $i1;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 | 2;

        r0.<com.android.server.blob.BlobAccessMode: int mAccessType> = $i1;

        return;
    }

    void allowSameSignatureAccess()
    {
        com.android.server.blob.BlobAccessMode r0;
        int $i0, $i1;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 | 4;

        r0.<com.android.server.blob.BlobAccessMode: int mAccessType> = $i1;

        return;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.blob.BlobAccessMode r0;
        com.android.internal.util.IndentingPrintWriter r1;
        int i0, $i1, i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7, $r15;
        android.util.ArraySet $r8, $r10, $r12;
        boolean $z0;
        java.lang.Object $r13;
        com.android.server.blob.BlobAccessMode$PackageIdentifier $r14;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accessType: ");

        $i1 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $r5 = staticinvoke <android.util.DebugUtils: java.lang.String flagsToString(java.lang.Class,java.lang.String,int)>(class "Lcom/android/server/blob/BlobAccessMode;", "ACCESS_TYPE_", $i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Whitelisted pkgs:");

        $r8 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $z0 = virtualinvoke $r8.<android.util.ArraySet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(" (Empty)");

        goto label4;

     label1:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i2 = 0;

        $r10 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        i0 = virtualinvoke $r10.<android.util.ArraySet: int size()>();

     label2:
        if i2 >= i0 goto label3;

        $r12 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $r13 = virtualinvoke $r12.<android.util.ArraySet: java.lang.Object valueAt(int)>(i2);

        $r14 = (com.android.server.blob.BlobAccessMode$PackageIdentifier) $r13;

        $r15 = virtualinvoke $r14.<com.android.server.blob.BlobAccessMode$PackageIdentifier: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        i2 = i2 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label4:
        return;
    }

    int getAccessType()
    {
        com.android.server.blob.BlobAccessMode r0;
        int $i0;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        return $i0;
    }

    int getNumWhitelistedPackages()
    {
        com.android.server.blob.BlobAccessMode r0;
        android.util.ArraySet $r1;
        int $i0;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        $r1 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $i0 = virtualinvoke $r1.<android.util.ArraySet: int size()>();

        return $i0;
    }

    boolean isAccessAllowedForCaller(android.content.Context, java.lang.String, java.lang.String)
    {
        com.android.server.blob.BlobAccessMode r0;
        java.lang.String r1, $r5, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        android.util.ArraySet $r2, $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;
        byte[] $r6;
        android.content.Context r7;
        android.content.pm.PackageManager r9;
        com.android.server.blob.BlobAccessMode$PackageIdentifier r10;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        r7 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        r9 = virtualinvoke r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $i7 = virtualinvoke r9.<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>(r8, r1);

        if $i7 != 0 goto label2;

        return 1;

     label2:
        $i4 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i5 = $i4 & 8;

        if $i5 == 0 goto label5;

        i8 = 0;

     label3:
        $r2 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $i6 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if i8 >= $i6 goto label5;

        $r3 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArraySet: java.lang.Object valueAt(int)>(i8);

        r10 = (com.android.server.blob.BlobAccessMode$PackageIdentifier) $r4;

        $r5 = r10.<com.android.server.blob.BlobAccessMode$PackageIdentifier: java.lang.String packageName>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        $r6 = r10.<com.android.server.blob.BlobAccessMode$PackageIdentifier: byte[] certificate>;

        $z1 = virtualinvoke r9.<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>(r1, $r6, 1);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        return 0;
    }

    boolean isPackageAccessAllowed(java.lang.String, byte[])
    {
        com.android.server.blob.BlobAccessMode r0;
        java.lang.String r1;
        byte[] r2;
        int $i0, $i1;
        android.util.ArraySet $r3;
        com.android.server.blob.BlobAccessMode$PackageIdentifier $r4;
        boolean $z0;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $r4 = staticinvoke <com.android.server.blob.BlobAccessMode$PackageIdentifier: com.android.server.blob.BlobAccessMode$PackageIdentifier create(java.lang.String,byte[])>(r1, r2);

        $z0 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>($r4);

        return $z0;
    }

    boolean isPublicAccessAllowed()
    {
        com.android.server.blob.BlobAccessMode r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isSameSignatureAccessAllowed()
    {
        com.android.server.blob.BlobAccessMode r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        $i0 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void writeToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.blob.BlobAccessMode r0;
        org.xmlpull.v1.XmlSerializer r1;
        int i0, $i1, i2;
        com.android.server.blob.BlobAccessMode$PackageIdentifier r2;
        android.util.ArraySet $r3, $r5;
        java.lang.Object $r6;
        java.lang.String $r7;
        byte[] $r8;

        r0 := @this: com.android.server.blob.BlobAccessMode;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $i1 = r0.<com.android.server.blob.BlobAccessMode: int mAccessType>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "t", $i1);

        i2 = 0;

        $r3 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        i0 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

     label1:
        if i2 >= i0 goto label2;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "wl");

        $r5 = r0.<com.android.server.blob.BlobAccessMode: android.util.ArraySet mWhitelistedPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArraySet: java.lang.Object valueAt(int)>(i2);

        r2 = (com.android.server.blob.BlobAccessMode$PackageIdentifier) $r6;

        $r7 = r2.<com.android.server.blob.BlobAccessMode$PackageIdentifier: java.lang.String packageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r1, "p", $r7);

        $r8 = r2.<com.android.server.blob.BlobAccessMode$PackageIdentifier: byte[] certificate>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeByteArrayAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,byte[])>(r1, "ct", $r8);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "wl");

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.blob.BlobAccessMode: int ACCESS_TYPE_WHITELIST> = 8;

        <com.android.server.blob.BlobAccessMode: int ACCESS_TYPE_SAME_SIGNATURE> = 4;

        <com.android.server.blob.BlobAccessMode: int ACCESS_TYPE_PUBLIC> = 2;

        <com.android.server.blob.BlobAccessMode: int ACCESS_TYPE_PRIVATE> = 1;

        return;
    }
}
