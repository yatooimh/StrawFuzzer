class com.android.server.blob.BlobStoreConfig extends java.lang.Object
{
    private static final java.lang.String BLOBS_DIR_NAME;
    private static final java.lang.String BLOBS_INDEX_FILE_NAME;
    public static final int IDLE_JOB_ID;
    public static final long INVALID_BLOB_ID;
    public static final long INVALID_BLOB_SIZE;
    public static final boolean LOGV;
    private static final java.lang.String ROOT_DIR_NAME;
    private static final java.lang.String SESSIONS_INDEX_FILE_NAME;
    public static final java.lang.String TAG;
    public static final int XML_VERSION_ADD_COMMIT_TIME;
    public static final int XML_VERSION_ADD_DESC_RES_NAME;
    public static final int XML_VERSION_ADD_SESSION_CREATION_TIME;
    public static final int XML_VERSION_ADD_STRING_DESC;
    public static final int XML_VERSION_CURRENT;
    public static final int XML_VERSION_INIT;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.blob.BlobStoreConfig: int XML_VERSION_INIT> = 1;

        <com.android.server.blob.BlobStoreConfig: int XML_VERSION_CURRENT> = 5;

        <com.android.server.blob.BlobStoreConfig: int XML_VERSION_ADD_STRING_DESC> = 2;

        <com.android.server.blob.BlobStoreConfig: int XML_VERSION_ADD_SESSION_CREATION_TIME> = 5;

        <com.android.server.blob.BlobStoreConfig: int XML_VERSION_ADD_DESC_RES_NAME> = 3;

        <com.android.server.blob.BlobStoreConfig: int XML_VERSION_ADD_COMMIT_TIME> = 4;

        <com.android.server.blob.BlobStoreConfig: java.lang.String TAG> = "BlobStore";

        <com.android.server.blob.BlobStoreConfig: java.lang.String SESSIONS_INDEX_FILE_NAME> = "sessions_index.xml";

        <com.android.server.blob.BlobStoreConfig: java.lang.String ROOT_DIR_NAME> = "blobstore";

        <com.android.server.blob.BlobStoreConfig: long INVALID_BLOB_SIZE> = 0L;

        <com.android.server.blob.BlobStoreConfig: long INVALID_BLOB_ID> = 0L;

        <com.android.server.blob.BlobStoreConfig: int IDLE_JOB_ID> = 191934935;

        <com.android.server.blob.BlobStoreConfig: java.lang.String BLOBS_INDEX_FILE_NAME> = "blobs_index.xml";

        <com.android.server.blob.BlobStoreConfig: java.lang.String BLOBS_DIR_NAME> = "blobs";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BlobStore", 2);

        <com.android.server.blob.BlobStoreConfig: boolean LOGV> = $z0;

        return;
    }

    void <init>()
    {
        com.android.server.blob.BlobStoreConfig r0;

        r0 := @this: com.android.server.blob.BlobStoreConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dump(com.android.internal.util.IndentingPrintWriter, android.content.Context)
    {
        com.android.internal.util.IndentingPrintWriter r0;
        android.content.Context r1;
        java.lang.StringBuilder $r3;
        long $l0;
        java.lang.String $r5, $r7;

        r0 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r1 := @parameter1: android.content.Context;

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("XML current version: 5");

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Idle job ID: 191934935");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total bytes per app limit: ");

        $l0 = staticinvoke <com.android.server.blob.BlobStoreConfig: long getAppDataBytesLimit()>();

        $r5 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long,int)>(r1, $l0, 8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Device config properties:");

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        staticinvoke <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: void dump(com.android.internal.util.IndentingPrintWriter,android.content.Context)>(r0, r1);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    public static long getAdjustedCommitTimeMs(long, long)
    {
        long l0, l1;
        byte $b2;
        boolean $z0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label2;

        $z0 = staticinvoke <com.android.server.blob.BlobStoreConfig: boolean hasCommitCoolOffPeriodElapsed(long)>(l0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return l0;

     label2:
        return l1;
    }

    public static long getAppDataBytesLimit()
    {
        long l0, $l1, $l2, $l3;
        java.io.File $r0;
        float $f0, $f1, $f2;

        $r0 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        $l1 = virtualinvoke $r0.<java.io.File: long getTotalSpace()>();

        $f1 = (float) $l1;

        $f0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: float TOTAL_BYTES_PER_APP_LIMIT_FRACTION>;

        $f2 = $f1 * $f0;

        l0 = (long) $f2;

        $l2 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: long TOTAL_BYTES_PER_APP_LIMIT_FLOOR>;

        $l3 = staticinvoke <java.lang.Math: long max(long,long)>($l2, l0);

        return $l3;
    }

    public static java.io.File getBlobFile(long)
    {
        long l0;
        java.io.File $r0, $r1;

        l0 := @parameter0: long;

        $r0 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File getBlobsDir()>();

        $r1 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File getBlobFile(java.io.File,long)>($r0, l0);

        return $r1;
    }

    private static java.io.File getBlobFile(java.io.File, long)
    {
        java.io.File r0, $r1;
        long l0;
        java.lang.String $r2;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        $r1 = new java.io.File;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r2);

        return $r1;
    }

    public static java.io.File getBlobStoreRootDir()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "blobstore");

        return $r0;
    }

    public static java.io.File getBlobsDir()
    {
        java.io.File $r0, $r1;

        $r0 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File getBlobStoreRootDir()>();

        $r1 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File getBlobsDir(java.io.File)>($r0);

        return $r1;
    }

    private static java.io.File getBlobsDir(java.io.File)
    {
        java.io.File r0, $r1;

        r0 := @parameter0: java.io.File;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "blobs");

        return $r1;
    }

    public static long getDeletionOnLastLeaseDelayMs()
    {
        long $l0;

        $l0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: long DELETE_ON_LAST_LEASE_DELAY_MS>;

        return $l0;
    }

    public static long getIdleJobPeriodMs()
    {
        long $l0;

        $l0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: long IDLE_JOB_PERIOD_MS>;

        return $l0;
    }

    public static int getMaxActiveSessions()
    {
        int $i0;

        $i0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: int MAX_ACTIVE_SESSIONS>;

        return $i0;
    }

    public static int getMaxCommittedBlobs()
    {
        int $i0;

        $i0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: int MAX_COMMITTED_BLOBS>;

        return $i0;
    }

    public static int getMaxLeasedBlobs()
    {
        int $i0;

        $i0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: int MAX_LEASED_BLOBS>;

        return $i0;
    }

    public static int getMaxPermittedPackages()
    {
        int $i0;

        $i0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: int MAX_BLOB_ACCESS_PERMITTED_PACKAGES>;

        return $i0;
    }

    public static java.lang.CharSequence getTruncatedLeaseDescription(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $i0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: int LEASE_DESC_CHAR_LIMIT>;

        $r1 = staticinvoke <android.text.TextUtils: java.lang.CharSequence trimToLengthWithEllipsis(java.lang.CharSequence,int)>(r0, $i0);

        return $r1;
    }

    private static boolean hasCommitCoolOffPeriodElapsed(long)
    {
        long l0, $l1, $l2, $l3;
        byte $b4;
        boolean z0;

        l0 := @parameter0: long;

        $l1 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: long COMMIT_COOL_OFF_DURATION_MS>;

        $l2 = $l1 + l0;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean hasLeaseWaitTimeElapsed(long)
    {
        long l0, $l1, $l2, $l3;
        byte $b4;
        boolean z0;

        l0 := @parameter0: long;

        $l1 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: long LEASE_ACQUISITION_WAIT_DURATION_MS>;

        $l2 = $l1 + l0;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean hasSessionExpired(long)
    {
        long l0, $l1, $l2, $l3;
        byte $b4;
        boolean z0;

        l0 := @parameter0: long;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: long SESSION_EXPIRY_TIMEOUT_MS>;

        $l3 = $l1 - $l2;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void initialize(android.content.Context)
    {
        android.content.Context r0;
        java.util.concurrent.Executor $r1;
        com.android.server.blob.'-$$Lambda$BlobStoreConfig$puwdUOAux6q8DMSxBpGh5jGtgZA' $r2;
        java.lang.String[] $r3;
        android.provider.DeviceConfig$Properties $r4;
        android.provider.DeviceConfig$OnPropertiesChangedListener r5;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        $r2 = <com.android.server.blob._$$Lambda$BlobStoreConfig$puwdUOAux6q8DMSxBpGh5jGtgZA: com.android.server.blob.'-$$Lambda$BlobStoreConfig$puwdUOAux6q8DMSxBpGh5jGtgZA' INSTANCE>;

        r5 = (android.provider.DeviceConfig$OnPropertiesChangedListener) $r2;

        staticinvoke <android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)>("blobstore", $r1, r5);

        $r3 = newarray (java.lang.String)[0];

        $r4 = staticinvoke <android.provider.DeviceConfig: android.provider.DeviceConfig$Properties getProperties(java.lang.String,java.lang.String[])>("blobstore", $r3);

        staticinvoke <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: void refresh(android.provider.DeviceConfig$Properties)>($r4);

        return;
    }

    static void lambda$initialize$0(android.provider.DeviceConfig$Properties)
    {
        android.provider.DeviceConfig$Properties r0;

        r0 := @parameter0: android.provider.DeviceConfig$Properties;

        staticinvoke <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: void refresh(android.provider.DeviceConfig$Properties)>(r0);

        return;
    }

    public static java.io.File prepareBlobFile(long)
    {
        long l0;
        java.io.File r0, r1;

        l0 := @parameter0: long;

        r0 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File prepareBlobsDir()>();

        if r0 != null goto label1;

        r1 = null;

        goto label2;

     label1:
        r1 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File getBlobFile(java.io.File,long)>(r0, l0);

     label2:
        return r1;
    }

    public static java.io.File prepareBlobStoreRootDir()
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File getBlobStoreRootDir()>();

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.io.File: boolean mkdir()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mkdir(): ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BlobStore", $r5);

        return null;

     label1:
        return r0;
    }

    public static java.io.File prepareBlobsDir()
    {
        java.io.File r0, $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        $r2 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File prepareBlobStoreRootDir()>();

        r0 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File getBlobsDir(java.io.File)>($r2);

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.io.File: boolean mkdir()>();

        if $z1 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mkdir(): ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BlobStore", $r6);

        return null;

     label1:
        return r0;
    }

    public static java.io.File prepareBlobsIndexFile()
    {
        java.io.File r0, $r1;

        r0 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File prepareBlobStoreRootDir()>();

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "blobs_index.xml");

        return $r1;
    }

    public static java.io.File prepareSessionIndexFile()
    {
        java.io.File r0, $r1;

        r0 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File prepareBlobStoreRootDir()>();

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "sessions_index.xml");

        return $r1;
    }

    public static boolean shouldUseRevocableFdForReads()
    {
        boolean $z0;

        $z0 = <com.android.server.blob.BlobStoreConfig$DeviceConfigProperties: boolean USE_REVOCABLE_FD_FOR_READS>;

        return $z0;
    }
}
