class com.android.server.blob.BlobStoreManagerService$Stub extends android.app.blob.IBlobStoreManager$Stub
{
    final com.android.server.blob.BlobStoreManagerService this$0;

    private void <init>(com.android.server.blob.BlobStoreManagerService)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        com.android.server.blob.BlobStoreManagerService r1;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: com.android.server.blob.BlobStoreManagerService;

        r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0> = r1;

        specialinvoke r0.<android.app.blob.IBlobStoreManager$Stub: void <init>()>();

        return;
    }

    void <init>(com.android.server.blob.BlobStoreManagerService, com.android.server.blob.BlobStoreManagerService$1)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        com.android.server.blob.BlobStoreManagerService r1;
        com.android.server.blob.BlobStoreManagerService$1 r2;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: com.android.server.blob.BlobStoreManagerService;

        r2 := @parameter1: com.android.server.blob.BlobStoreManagerService$1;

        specialinvoke r0.<com.android.server.blob.BlobStoreManagerService$Stub: void <init>(com.android.server.blob.BlobStoreManagerService)>(r1);

        return;
    }

    public void abandonSession(long, java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        long l0;
        java.lang.String r1, $r6;
        float f0;
        int i1;
        java.lang.StringBuilder $r3;
        com.android.server.blob.BlobStoreManagerService $r8, $r9;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        f0 = (float) l0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sessionId must be positive: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: float checkArgumentPositive(float,java.lang.String)>(f0, $r6);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r8, i1, r1);

        $r9 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1500(com.android.server.blob.BlobStoreManagerService,long,int,java.lang.String)>($r9, l0, i1, r1);

        return;
    }

    public void acquireLease(android.app.blob.BlobHandle, int, java.lang.CharSequence, long, java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        int i0, i2, $i4;
        long l1;
        java.lang.String r1, $r15, $r26;
        boolean $z0, $z1, z2, $z3;
        java.lang.StringBuilder $r9, $r25;
        java.lang.SecurityException $r14;
        com.android.server.blob.BlobStoreManagerService $r16, $r18, $r28;
        android.content.pm.PackageManagerInternal $r17;
        android.os.LimitExceededException $r19;
        android.os.ParcelableException $r20;
        android.content.res.Resources$NotFoundException $r21;
        java.lang.IllegalArgumentException $r22;
        android.app.blob.BlobHandle r23;
        java.lang.CharSequence r24, r27;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r23 := @parameter0: android.app.blob.BlobHandle;

        i0 := @parameter1: int;

        r24 := @parameter2: java.lang.CharSequence;

        l1 := @parameter3: long;

        r1 := @parameter4: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r23, "blobHandle must not be null");

        virtualinvoke r23.<android.app.blob.BlobHandle: void assertIsValid()>();

        $z0 = staticinvoke <android.content.res.ResourceId: boolean isValid(int)>(i0);

        if $z0 != 0 goto label2;

        if r24 == null goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Description must be valid; descriptionId=");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", description=");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, $r26);

        staticinvoke <com.android.internal.util.Preconditions: long checkArgumentNonnegative(long,java.lang.String)>(l1, "leaseExpiryTimeMillis must not be negative");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        r27 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.lang.CharSequence getTruncatedLeaseDescription(java.lang.CharSequence)>(r24);

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r28 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r28, i2, r1);

        $z3 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i2);

        if $z3 != 0 goto label8;

        $r16 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r17 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.pm.PackageManagerInternal access$1200(com.android.server.blob.BlobStoreManagerService)>($r16);

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        $z1 = virtualinvoke $r17.<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>(r1, $i4);

        if $z1 != 0 goto label8;

     label4:
        $r18 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1700(com.android.server.blob.BlobStoreManagerService,android.app.blob.BlobHandle,int,java.lang.CharSequence,long,int,java.lang.String)>($r18, r23, i0, r27, l1, i2, r1);

     label5:
        return;

     label6:
        $r19 := @caughtexception;

        $r20 = new android.os.ParcelableException;

        specialinvoke $r20.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label7:
        $r21 := @caughtexception;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

     label8:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller not allowed to open blob; callingUid=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callingPackage=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = new java.lang.SecurityException;

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r14;

        catch android.content.res.Resources$NotFoundException from label4 to label5 with label7;
        catch android.os.LimitExceededException from label4 to label5 with label6;
    }

    public long createSession(android.app.blob.BlobHandle, java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        java.lang.String r1, $r11;
        int i0, $i2;
        long l1;
        com.android.server.blob.BlobStoreManagerService $r4, $r12, $r14;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r10;
        android.content.pm.PackageManagerInternal $r13;
        android.os.LimitExceededException $r15;
        android.os.ParcelableException $r16;
        android.app.blob.BlobHandle r17;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r17 := @parameter0: android.app.blob.BlobHandle;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r17, "blobHandle must not be null");

        virtualinvoke r17.<android.app.blob.BlobHandle: void assertIsValid()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r4, i0, r1);

        $z0 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i0);

        if $z0 != 0 goto label4;

        $r12 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r13 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.pm.PackageManagerInternal access$1200(com.android.server.blob.BlobStoreManagerService)>($r12);

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = virtualinvoke $r13.<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>(r1, $i2);

        if $z1 != 0 goto label4;

     label1:
        $r14 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        l1 = staticinvoke <com.android.server.blob.BlobStoreManagerService: long access$1300(com.android.server.blob.BlobStoreManagerService,android.app.blob.BlobHandle,int,java.lang.String)>($r14, r17, i0, r1);

     label2:
        return l1;

     label3:
        $r15 := @caughtexception;

        $r16 = new android.os.ParcelableException;

        specialinvoke $r16.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller not allowed to create session; callingUid=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callingPackage=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = new java.lang.SecurityException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch android.os.LimitExceededException from label1 to label2 with label3;
    }

    public void deleteBlob(long)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        long l0;
        int i1;
        java.lang.SecurityException $r1;
        com.android.server.blob.BlobStoreManagerService $r2;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        l0 := @parameter0: long;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i1 != 1000 goto label1;

        $r2 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$2200(com.android.server.blob.BlobStoreManagerService,long,int)>($r2, l0, i1);

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Only system uid is allowed to call deleteBlob()");

        throw $r1;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        java.lang.StringBuilder r1;
        com.android.server.blob.BlobStoreManagerService $r2, $r5, $r7, $r10, $r11, $r13;
        android.content.Context $r3, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.internal.util.IndentingPrintWriter $r4;
        long $l0;
        java.lang.String $r15;
        java.lang.Throwable $r18;
        java.io.FileDescriptor r19;
        java.io.PrintWriter r20;
        java.lang.String[] r21;
        com.android.server.blob.BlobStoreManagerService$DumpArgs r22;
        java.lang.Object r24;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r19 := @parameter0: java.io.FileDescriptor;

        r20 := @parameter1: java.io.PrintWriter;

        r21 := @parameter2: java.lang.String[];

        $r2 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r3 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.Context access$2000(com.android.server.blob.BlobStoreManagerService)>($r2);

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r3, "BlobStore", r20);

        if $z0 != 0 goto label01;

        return;

     label01:
        r22 = staticinvoke <com.android.server.blob.BlobStoreManagerService$DumpArgs: com.android.server.blob.BlobStoreManagerService$DumpArgs parse(java.lang.String[])>(r21);

        $r4 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r20, "    ");

        $z1 = virtualinvoke r22.<com.android.server.blob.BlobStoreManagerService$DumpArgs: boolean shouldDumpHelp()>();

        if $z1 == 0 goto label02;

        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>("dumpsys blob_store [options]:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        staticinvoke <com.android.server.blob.BlobStoreManagerService$DumpArgs: void access$2500(com.android.server.blob.BlobStoreManagerService$DumpArgs,com.android.internal.util.IndentingPrintWriter)>(r22, $r4);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;

     label02:
        $r5 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        r24 = staticinvoke <com.android.server.blob.BlobStoreManagerService: java.lang.Object access$2600(com.android.server.blob.BlobStoreManagerService)>($r5);

        entermonitor r24;

     label03:
        $z2 = virtualinvoke r22.<com.android.server.blob.BlobStoreManagerService$DumpArgs: boolean shouldDumpAllSections()>();

        if $z2 == 0 goto label04;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentMaxSessionId: ");

        $r13 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $l0 = staticinvoke <com.android.server.blob.BlobStoreManagerService: long access$2700(com.android.server.blob.BlobStoreManagerService)>($r13);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label04:
        $z3 = virtualinvoke r22.<com.android.server.blob.BlobStoreManagerService$DumpArgs: boolean shouldDumpSessions()>();

        if $z3 == 0 goto label05;

        $r11 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$2800(com.android.server.blob.BlobStoreManagerService,com.android.internal.util.IndentingPrintWriter,com.android.server.blob.BlobStoreManagerService$DumpArgs)>($r11, $r4, r22);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label05:
        $z4 = virtualinvoke r22.<com.android.server.blob.BlobStoreManagerService$DumpArgs: boolean shouldDumpBlobs()>();

        if $z4 == 0 goto label06;

        $r10 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$2900(com.android.server.blob.BlobStoreManagerService,com.android.internal.util.IndentingPrintWriter,com.android.server.blob.BlobStoreManagerService$DumpArgs)>($r10, $r4, r22);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label06:
        exitmonitor r24;

     label07:
        $z5 = virtualinvoke r22.<com.android.server.blob.BlobStoreManagerService$DumpArgs: boolean shouldDumpConfig()>();

        if $z5 == 0 goto label08;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("BlobStore config:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r7 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r8 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.Context access$2000(com.android.server.blob.BlobStoreManagerService)>($r7);

        staticinvoke <com.android.server.blob.BlobStoreConfig: void dump(com.android.internal.util.IndentingPrintWriter,android.content.Context)>($r4, $r8);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label08:
        return;

     label09:
        $r18 := @caughtexception;

     label10:
        exitmonitor r24;

     label11:
        throw $r18;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle, java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        java.lang.String r1, $r11;
        int i0, $i1;
        com.android.server.blob.BlobStoreManagerService $r4, $r12, $r14;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r10;
        android.content.pm.PackageManagerInternal $r13;
        android.app.blob.LeaseInfo $r15;
        android.app.blob.BlobHandle r16;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r16 := @parameter0: android.app.blob.BlobHandle;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "blobHandle must not be null");

        virtualinvoke r16.<android.app.blob.BlobHandle: void assertIsValid()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r4, i0, r1);

        $z0 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i0);

        if $z0 != 0 goto label1;

        $r12 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r13 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.pm.PackageManagerInternal access$1200(com.android.server.blob.BlobStoreManagerService)>($r12);

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = virtualinvoke $r13.<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>(r1, $i1);

        if $z1 != 0 goto label1;

        $r14 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r15 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.app.blob.LeaseInfo access$2400(com.android.server.blob.BlobStoreManagerService,android.app.blob.BlobHandle,int,java.lang.String)>($r14, r16, i0, r1);

        return $r15;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller not allowed to open blob; callingUid=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callingPackage=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = new java.lang.SecurityException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public java.util.List getLeasedBlobs(java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        java.lang.String r1;
        int i0;
        com.android.server.blob.BlobStoreManagerService $r3, $r4;
        java.util.List $r5;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r3, i0, r1);

        $r4 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r5 = staticinvoke <com.android.server.blob.BlobStoreManagerService: java.util.List access$2300(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r4, i0, r1);

        return $r5;
    }

    public long getRemainingLeaseQuotaBytes(java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        java.lang.String r1;
        int i0;
        com.android.server.blob.BlobStoreManagerService $r2, $r3;
        long $l1;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r2, i0, r1);

        $r3 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $l1 = staticinvoke <com.android.server.blob.BlobStoreManagerService: long access$1900(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r3, i0, r1);

        return $l1;
    }

    public int handleShellCommand(android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, java.lang.String[])
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        android.os.ParcelFileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        com.android.server.blob.BlobStoreManagerShellCommand $r5;
        com.android.server.blob.BlobStoreManagerService $r6;
        java.io.FileDescriptor $r7, $r8, $r9;
        int $i0;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.os.ParcelFileDescriptor;

        r4 := @parameter3: java.lang.String[];

        $r5 = new com.android.server.blob.BlobStoreManagerShellCommand;

        $r6 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        specialinvoke $r5.<com.android.server.blob.BlobStoreManagerShellCommand: void <init>(com.android.server.blob.BlobStoreManagerService)>($r6);

        $r7 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r8 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r9 = virtualinvoke r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = virtualinvoke $r5.<com.android.server.blob.BlobStoreManagerShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[])>(r0, $r7, $r8, $r9, r4);

        return $i0;
    }

    public void lambda$waitForIdle$0$BlobStoreManagerService$Stub(android.os.RemoteCallback)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        android.os.RemoteCallback r1;
        android.os.Handler r2;
        com.android.server.blob.BlobStoreManagerService $r3;
        com.android.server.blob._$$Lambda$ZsFzoG2loyqNOR2cNbo_thrNK5c $r5;
        com.android.internal.util.function.pooled.PooledRunnable $r6, $r7;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: android.os.RemoteCallback;

        $r3 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        r2 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.os.Handler access$600(com.android.server.blob.BlobStoreManagerService)>($r3);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = new com.android.server.blob._$$Lambda$ZsFzoG2loyqNOR2cNbo_thrNK5c;

        specialinvoke $r5.<com.android.server.blob._$$Lambda$ZsFzoG2loyqNOR2cNbo_thrNK5c: void <init>(android.os.RemoteCallback)>(r1);

        $r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(java.util.function.Consumer,java.lang.Object)>($r5, null);

        $r7 = interfaceinvoke $r6.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        return;
    }

    public void lambda$waitForIdle$1$BlobStoreManagerService$Stub(android.os.RemoteCallback)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        android.os.RemoteCallback r1;
        com.android.server.blob.BlobStoreManagerService $r2;
        android.os.Handler $r3;
        com.android.server.blob._$$Lambda$BlobStoreManagerService$Stub$mVXWAa695LfE4TlN6SGB9gG_po0 $r4;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: android.os.RemoteCallback;

        $r2 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r3 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.os.Handler access$3000(com.android.server.blob.BlobStoreManagerService)>($r2);

        $r4 = new com.android.server.blob._$$Lambda$BlobStoreManagerService$Stub$mVXWAa695LfE4TlN6SGB9gG_po0;

        specialinvoke $r4.<com.android.server.blob._$$Lambda$BlobStoreManagerService$Stub$mVXWAa695LfE4TlN6SGB9gG_po0: void <init>(com.android.server.blob.BlobStoreManagerService$Stub,android.os.RemoteCallback)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    public android.os.ParcelFileDescriptor openBlob(android.app.blob.BlobHandle, java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        java.lang.String r1, $r11;
        int i0, $i1;
        com.android.server.blob.BlobStoreManagerService $r4, $r12, $r14;
        boolean $z0, $z1;
        android.content.pm.PackageManagerInternal $r13;
        java.lang.Throwable $r15;
        java.lang.RuntimeException $r16;
        android.app.blob.BlobHandle r17;
        android.os.ParcelFileDescriptor r18;
        java.lang.StringBuilder r21;
        java.lang.SecurityException r22;
        java.io.IOException r23;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r17 := @parameter0: android.app.blob.BlobHandle;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r17, "blobHandle must not be null");

        virtualinvoke r17.<android.app.blob.BlobHandle: void assertIsValid()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r4, i0, r1);

        $z0 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i0);

        if $z0 != 0 goto label4;

        $r12 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r13 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.pm.PackageManagerInternal access$1200(com.android.server.blob.BlobStoreManagerService)>($r12);

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = virtualinvoke $r13.<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>(r1, $i1);

        if $z1 != 0 goto label4;

     label1:
        $r14 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        r18 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.os.ParcelFileDescriptor access$1600(com.android.server.blob.BlobStoreManagerService,android.app.blob.BlobHandle,int,java.lang.String)>($r14, r17, i0, r1);

     label2:
        return r18;

     label3:
        $r15 := @caughtexception;

        r23 = (java.io.IOException) $r15;

        $r16 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r23);

        throw $r16;

     label4:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller not allowed to open blob; callingUid=");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callingPackage=");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r22 = new java.lang.SecurityException;

        $r11 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw r22;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.app.blob.IBlobStoreSession openSession(long, java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        long l0;
        java.lang.String r1, $r6;
        float f0;
        int i1;
        java.lang.StringBuilder $r3;
        com.android.server.blob.BlobStoreManagerService $r8, $r9;
        com.android.server.blob.BlobStoreSession $r10;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        f0 = (float) l0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sessionId must be positive: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: float checkArgumentPositive(float,java.lang.String)>(f0, $r6);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r8, i1, r1);

        $r9 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r10 = staticinvoke <com.android.server.blob.BlobStoreManagerService: com.android.server.blob.BlobStoreSession access$1400(com.android.server.blob.BlobStoreManagerService,long,int,java.lang.String)>($r9, l0, i1, r1);

        return $r10;
    }

    public java.util.List queryBlobsForUser(int)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        int $i0, i1;
        java.lang.SecurityException $r1;
        java.lang.Object $r2;
        android.app.ActivityManagerInternal $r3;
        com.android.server.blob.BlobStoreManagerService $r4;
        java.util.List $r5;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        i1 := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label2;

        if i1 != -2 goto label1;

        i1 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        goto label1;

     label1:
        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r3 = (android.app.ActivityManagerInternal) $r2;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void ensureNotSpecialUser(int)>(i1);

        $r4 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r5 = staticinvoke <com.android.server.blob.BlobStoreManagerService: java.util.List access$2100(com.android.server.blob.BlobStoreManagerService,int)>($r4, i1);

        return $r5;

     label2:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Only system uid is allowed to call queryBlobsForUser()");

        throw $r1;
    }

    public void releaseLease(android.app.blob.BlobHandle, java.lang.String)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        java.lang.String r1, $r11;
        int i0, $i1;
        com.android.server.blob.BlobStoreManagerService $r4, $r12, $r14;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r10;
        android.content.pm.PackageManagerInternal $r13;
        android.app.blob.BlobHandle r15;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r15 := @parameter0: android.app.blob.BlobHandle;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "blobHandle must not be null");

        virtualinvoke r15.<android.app.blob.BlobHandle: void assertIsValid()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1100(com.android.server.blob.BlobStoreManagerService,int,java.lang.String)>($r4, i0, r1);

        $z0 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i0);

        if $z0 != 0 goto label1;

        $r12 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r13 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.pm.PackageManagerInternal access$1200(com.android.server.blob.BlobStoreManagerService)>($r12);

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = virtualinvoke $r13.<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>(r1, $i1);

        if $z1 != 0 goto label1;

        $r14 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        staticinvoke <com.android.server.blob.BlobStoreManagerService: void access$1800(com.android.server.blob.BlobStoreManagerService,android.app.blob.BlobHandle,int,java.lang.String)>($r14, r15, i0, r1);

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller not allowed to open blob; callingUid=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callingPackage=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = new java.lang.SecurityException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public void waitForIdle(android.os.RemoteCallback)
    {
        com.android.server.blob.BlobStoreManagerService$Stub r0;
        android.os.RemoteCallback r1;
        android.content.Context r2;
        com.android.server.blob.BlobStoreManagerService $r5, $r10;
        java.lang.StringBuilder $r6;
        int $i0;
        java.lang.String $r9;
        android.os.Handler $r11;
        com.android.server.blob._$$Lambda$BlobStoreManagerService$Stub$JZxuUmbjRd3Yb5IYUT6J1m14zis $r12;

        r0 := @this: com.android.server.blob.BlobStoreManagerService$Stub;

        r1 := @parameter0: android.os.RemoteCallback;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "remoteCallback must not be null");

        $r5 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        r2 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.content.Context access$2000(com.android.server.blob.BlobStoreManagerService)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller is not allowed to call this; caller=");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", $r9);

        $r10 = r0.<com.android.server.blob.BlobStoreManagerService$Stub: com.android.server.blob.BlobStoreManagerService this$0>;

        $r11 = staticinvoke <com.android.server.blob.BlobStoreManagerService: android.os.Handler access$600(com.android.server.blob.BlobStoreManagerService)>($r10);

        $r12 = new com.android.server.blob._$$Lambda$BlobStoreManagerService$Stub$JZxuUmbjRd3Yb5IYUT6J1m14zis;

        specialinvoke $r12.<com.android.server.blob._$$Lambda$BlobStoreManagerService$Stub$JZxuUmbjRd3Yb5IYUT6J1m14zis: void <init>(com.android.server.blob.BlobStoreManagerService$Stub,android.os.RemoteCallback)>(r0, r1);

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

        return;
    }
}
