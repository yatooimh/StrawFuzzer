class com.android.server.blob.BlobStoreSession extends android.app.blob.IBlobStoreSession$Stub
{
    static final int STATE_ABANDONED;
    static final int STATE_CLOSED;
    static final int STATE_COMMITTED;
    static final int STATE_OPENED;
    static final int STATE_VERIFIED_INVALID;
    static final int STATE_VERIFIED_VALID;
    private final com.android.server.blob.BlobAccessMode mBlobAccessMode;
    private android.app.blob.IBlobCommitCallback mBlobCommitCallback;
    private final android.app.blob.BlobHandle mBlobHandle;
    private final android.content.Context mContext;
    private final long mCreationTimeMs;
    private byte[] mDataDigest;
    private final com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener mListener;
    private final java.lang.String mOwnerPackageName;
    private final int mOwnerUid;
    private final java.util.ArrayList mRevocableFds;
    private java.io.File mSessionFile;
    private final long mSessionId;
    private final java.lang.Object mSessionLock;
    private int mState;

    private void <init>(android.content.Context, long, android.app.blob.BlobHandle, int, java.lang.String, long, com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener)
    {
        com.android.server.blob.BlobStoreSession r0;
        android.content.Context r1;
        long l0, l2;
        android.app.blob.BlobHandle r2;
        int i1;
        java.lang.String r3;
        com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener r4;
        java.lang.Object $r5;
        java.util.ArrayList $r6;
        com.android.server.blob.BlobAccessMode $r7;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        r2 := @parameter2: android.app.blob.BlobHandle;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        l2 := @parameter5: long;

        r4 := @parameter6: com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener;

        specialinvoke r0.<android.app.blob.IBlobStoreSession$Stub: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds> = $r6;

        r0.<com.android.server.blob.BlobStoreSession: int mState> = 0;

        $r7 = new com.android.server.blob.BlobAccessMode;

        specialinvoke $r7.<com.android.server.blob.BlobAccessMode: void <init>()>();

        r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode> = $r7;

        r0.<com.android.server.blob.BlobStoreSession: android.content.Context mContext> = r1;

        r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle> = r2;

        r0.<com.android.server.blob.BlobStoreSession: long mSessionId> = l0;

        r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid> = i1;

        r0.<com.android.server.blob.BlobStoreSession: java.lang.String mOwnerPackageName> = r3;

        r0.<com.android.server.blob.BlobStoreSession: long mCreationTimeMs> = l2;

        r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener mListener> = r4;

        return;
    }

    void <init>(android.content.Context, long, android.app.blob.BlobHandle, int, java.lang.String, com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener)
    {
        com.android.server.blob.BlobStoreSession r0;
        android.content.Context r1;
        long l0, $l2;
        android.app.blob.BlobHandle r2;
        int i1;
        java.lang.String r3;
        com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener r4;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        r2 := @parameter2: android.app.blob.BlobHandle;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void <init>(android.content.Context,long,android.app.blob.BlobHandle,int,java.lang.String,long,com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener)>(r1, l0, r2, i1, r3, $l2, r4);

        return;
    }

    private void assertCallerIsOwner()
    {
        com.android.server.blob.BlobStoreSession r0;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i2 = r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not the session owner");

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void closeSession(int, boolean)
    {
        com.android.server.blob.BlobStoreSession r0;
        int i0, $i1, $i2;
        boolean z0;
        java.lang.Object r1;
        java.lang.IllegalStateException r2;
        com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener $r3;
        java.lang.String $r5, $r7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i1 == 1 goto label06;

     label02:
        if i0 != 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        r2 = new java.lang.IllegalStateException;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to delete or abandon a session with state: ");

        $i2 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r5 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i2);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r2;

     label06:
        r0.<com.android.server.blob.BlobStoreSession: int mState> = i0;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void revokeAllFds()>();

     label07:
        if z0 == 0 goto label09;

     label08:
        $r3 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener mListener>;

        virtualinvoke $r3.<com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener: void onStateChanged(com.android.server.blob.BlobStoreSession)>(r0);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    static com.android.server.blob.BlobStoreSession createFromXml(org.xmlpull.v1.XmlPullParser, int, android.content.Context, com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.content.Context r0;
        com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener r1;
        long l0, l5;
        java.lang.String r2, $r5, $r6, $r7, $r8;
        int i1, i4, i6;
        com.android.server.blob.BlobStoreSession $r3;
        com.android.server.blob.BlobAccessMode $r4, r11;
        boolean $z0, $z1, $z2;
        org.xmlpull.v1.XmlPullParser r9;
        android.app.blob.BlobHandle r10;

        r9 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i4 := @parameter1: int;

        r0 := @parameter2: android.content.Context;

        r1 := @parameter3: com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener;

        l0 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r9, "id");

        r2 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r9, "p");

        i1 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r9, "u");

        if i4 < 5 goto label1;

        l5 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r9, "crt");

        goto label2;

     label1:
        l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        i6 = interfaceinvoke r9.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r10 = null;

        r11 = null;

     label3:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r9, i6);

        if $z2 == 0 goto label5;

        $r5 = "bh";

        $r6 = interfaceinvoke r9.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        r10 = staticinvoke <android.app.blob.BlobHandle: android.app.blob.BlobHandle createFromXml(org.xmlpull.v1.XmlPullParser)>(r9);

        goto label3;

     label4:
        $r7 = "am";

        $r8 = interfaceinvoke r9.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        r11 = staticinvoke <com.android.server.blob.BlobAccessMode: com.android.server.blob.BlobAccessMode createFromXml(org.xmlpull.v1.XmlPullParser)>(r9);

        goto label3;

     label5:
        if r10 != null goto label6;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BlobStore", "blobHandle should be available");

        return null;

     label6:
        if r11 != null goto label7;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BlobStore", "blobAccessMode should be available");

        return null;

     label7:
        $r3 = new com.android.server.blob.BlobStoreSession;

        specialinvoke $r3.<com.android.server.blob.BlobStoreSession: void <init>(android.content.Context,long,android.app.blob.BlobHandle,int,java.lang.String,long,com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener)>(r0, l0, r10, i1, r2, l5, r1);

        $r4 = $r3.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        virtualinvoke $r4.<com.android.server.blob.BlobAccessMode: void allow(com.android.server.blob.BlobAccessMode)>(r11);

        return $r3;
    }

    private java.io.FileDescriptor openReadInternal() throws java.io.IOException
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.String $r1;
        int $i0;
        java.io.FileDescriptor $r2;
        java.lang.Throwable $r3;
        java.io.IOException $r4;
        java.io.File r5;
        java.lang.IllegalStateException r8;
        android.system.ErrnoException r9;

        r0 := @this: com.android.server.blob.BlobStoreSession;

     label1:
        r5 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.File getSessionFile()>();

     label2:
        if r5 == null goto label4;

     label3:
        $r1 = virtualinvoke r5.<java.io.File: java.lang.String getPath()>();

        $i0 = <android.system.OsConstants: int O_RDONLY>;

        $r2 = staticinvoke <android.system.Os: java.io.FileDescriptor open(java.lang.String,int,int)>($r1, $i0, 0);

        return $r2;

     label4:
        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get the file for this session");

        throw r8;

     label5:
        $r3 := @caughtexception;

        r9 = (android.system.ErrnoException) $r3;

        $r4 = virtualinvoke r9.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r4;

        catch android.system.ErrnoException from label1 to label2 with label5;
        catch android.system.ErrnoException from label3 to label4 with label5;
        catch android.system.ErrnoException from label4 to label5 with label5;
    }

    private java.io.FileDescriptor openWriteInternal(long, long) throws java.io.IOException
    {
        com.android.server.blob.BlobStoreSession r0;
        long l0, l1, $l8;
        java.lang.String $r2, $r10;
        int $i2, $i3, $i4, $i7;
        byte $b5, $b6, $b9;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.os.storage.StorageManager $r5;
        java.lang.Throwable $r11;
        java.io.IOException $r12;
        java.io.File r13;
        java.io.FileDescriptor r14;
        java.lang.StringBuilder r18;
        java.lang.IllegalStateException r19, r20;
        android.system.ErrnoException r21;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

     label01:
        r13 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.File getSessionFile()>();

     label02:
        if r13 == null goto label11;

     label03:
        $r2 = virtualinvoke r13.<java.io.File: java.lang.String getPath()>();

        $i3 = <android.system.OsConstants: int O_CREAT>;

        $i2 = <android.system.OsConstants: int O_RDWR>;

        $i4 = $i3 | $i2;

        r14 = staticinvoke <android.system.Os: java.io.FileDescriptor open(java.lang.String,int,int)>($r2, $i4, 384);

     label04:
        $b5 = l0 cmp 0L;

        if $b5 <= 0 goto label08;

     label05:
        $i7 = <android.system.OsConstants: int SEEK_SET>;

        $l8 = staticinvoke <android.system.Os: long lseek(java.io.FileDescriptor,long,int)>(r14, l0, $i7);

        $b9 = $l8 cmp l0;

        if $b9 != 0 goto label07;

     label06:
        goto label08;

     label07:
        r19 = new java.lang.IllegalStateException;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to seek ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; curOffset=");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r10 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw r19;

     label08:
        $b6 = l1 cmp 0L;

        if $b6 <= 0 goto label10;

     label09:
        $r3 = r0.<com.android.server.blob.BlobStoreSession: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r5 = (android.os.storage.StorageManager) $r4;

        virtualinvoke $r5.<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long)>(r14, l1);

     label10:
        return r14;

     label11:
        r20 = new java.lang.IllegalStateException;

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get the file for this session");

        throw r20;

     label12:
        $r11 := @caughtexception;

        r21 = (android.system.ErrnoException) $r11;

        $r12 = virtualinvoke r21.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r12;

        catch android.system.ErrnoException from label01 to label02 with label12;
        catch android.system.ErrnoException from label03 to label04 with label12;
        catch android.system.ErrnoException from label05 to label06 with label12;
        catch android.system.ErrnoException from label07 to label08 with label12;
        catch android.system.ErrnoException from label09 to label10 with label12;
        catch android.system.ErrnoException from label11 to label12 with label12;
    }

    private void revokeAllFds()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.util.ArrayList r1, $r3, $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        android.os.RevocableFileDescriptor $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label5;

     label3:
        $r5 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r7 = (android.os.RevocableFileDescriptor) $r6;

        virtualinvoke $r7.<android.os.RevocableFileDescriptor: void revoke()>();

     label4:
        i1 = i1 + -1;

        goto label2;

     label5:
        $r4 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

        exitmonitor r1;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    static java.lang.String stateToString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BlobStore", $r4);

        return "<unknown>";

     label1:
        return "<verified_invalid>";

     label2:
        return "<verified_valid>";

     label3:
        return "<committed>";

     label4:
        return "<abandoned>";

     label5:
        return "<opened>";

     label6:
        return "<closed>";
    }

    private void trackRevocableFdLocked(android.os.RevocableFileDescriptor)
    {
        com.android.server.blob.BlobStoreSession r0;
        java.util.ArrayList r1, $r2;
        com.android.server.blob._$$Lambda$BlobStoreSession$_dlP6mlWFgsO_muhvAWbTEy4QcM $r3;
        java.lang.Throwable $r4;
        android.os.RevocableFileDescriptor r5;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r5 := @parameter0: android.os.RevocableFileDescriptor;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        $r3 = new com.android.server.blob._$$Lambda$BlobStoreSession$_dlP6mlWFgsO_muhvAWbTEy4QcM;

        specialinvoke $r3.<com.android.server.blob._$$Lambda$BlobStoreSession$_dlP6mlWFgsO_muhvAWbTEy4QcM: void <init>(com.android.server.blob.BlobStoreSession,android.os.RevocableFileDescriptor)>(r0, r5);

        virtualinvoke r5.<android.os.RevocableFileDescriptor: void addOnCloseListener(android.os.ParcelFileDescriptor$OnCloseListener)>($r3);

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void abandon()
    {
        com.android.server.blob.BlobStoreSession r0;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void closeSession(int,boolean)>(2, 1);

        return;
    }

    public void allowPackageAccess(java.lang.String, byte[])
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        android.os.ParcelableException r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r5, $r7, $r12, r15;
        com.android.server.blob.BlobAccessMode $r8, $r10, $r13;
        java.lang.Throwable $r14;
        byte[] r16;
        android.os.LimitExceededException r17;
        java.lang.StringBuilder r18, r20;
        java.lang.IllegalStateException r19;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: byte[];

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "packageName must not be null");

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 != 1 goto label4;

        $r8 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        $i2 = virtualinvoke $r8.<com.android.server.blob.BlobAccessMode: int getNumWhitelistedPackages()>();

        $i3 = staticinvoke <com.android.server.blob.BlobStoreConfig: int getMaxPermittedPackages()>();

        if $i2 >= $i3 goto label3;

        $r13 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        virtualinvoke $r13.<com.android.server.blob.BlobAccessMode: void allowPackageAccess(java.lang.String,byte[])>(r15, r16);

        exitmonitor r1;

     label2:
        return;

     label3:
        r2 = new android.os.ParcelableException;

        r17 = new android.os.LimitExceededException;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many packages permitted to access the blob: ");

        $r10 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        $i4 = virtualinvoke $r10.<com.android.server.blob.BlobAccessMode: int getNumWhitelistedPackages()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<android.os.LimitExceededException: void <init>(java.lang.String)>($r12);

        specialinvoke r2.<android.os.ParcelableException: void <init>(java.lang.Throwable)>(r17);

        throw r2;

     label4:
        r19 = new java.lang.IllegalStateException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to change access type in state: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r5 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i1);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r19;

     label5:
        $r14 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void allowPublicAccess()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        java.lang.IllegalStateException r2;
        int $i0, $i1;
        java.lang.String $r4, $r6;
        com.android.server.blob.BlobAccessMode $r7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 != 1 goto label3;

        $r7 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        virtualinvoke $r7.<com.android.server.blob.BlobAccessMode: void allowPublicAccess()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        r2 = new java.lang.IllegalStateException;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to change access type in state: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r4 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i1);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r2;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void allowSameSignatureAccess()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        java.lang.IllegalStateException r2;
        int $i0, $i1;
        java.lang.String $r4, $r6;
        com.android.server.blob.BlobAccessMode $r7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 != 1 goto label3;

        $r7 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        virtualinvoke $r7.<com.android.server.blob.BlobAccessMode: void allowSameSignatureAccess()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        r2 = new java.lang.IllegalStateException;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to change access type in state: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r4 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i1);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r2;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void close()
    {
        com.android.server.blob.BlobStoreSession r0;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void closeSession(int,boolean)>(0, 0);

        return;
    }

    public void commit(android.app.blob.IBlobCommitCallback)
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.app.blob.IBlobCommitCallback r3;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r3 := @parameter0: android.app.blob.IBlobCommitCallback;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.blob.BlobStoreSession: android.app.blob.IBlobCommitCallback mBlobCommitCallback> = r3;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void closeSession(int,boolean)>(3, 1);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void computeDigest()
    {
        com.android.server.blob.BlobStoreSession r0;
        long $l0, $l1;
        java.io.File $r4, $r7;
        java.lang.String $r6, $r9;
        android.app.blob.BlobHandle $r8;
        byte[] $r10;
        java.lang.Throwable $r11, $r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.blob.BlobStoreSession;

     label1:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("computeBlobDigest-i");

        $l0 = r0.<com.android.server.blob.BlobStoreSession: long mSessionId>;

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-l");

        $r4 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.File getSessionFile()>();

        $l1 = virtualinvoke $r4.<java.io.File: long length()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(524288L, $r6);

        $r7 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.File getSessionFile()>();

        $r8 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle>;

        $r9 = $r8.<android.app.blob.BlobHandle: java.lang.String algorithm>;

        $r10 = staticinvoke <android.os.FileUtils: byte[] digest(java.io.File,java.lang.String)>($r7, $r9);

        r0.<com.android.server.blob.BlobStoreSession: byte[] mDataDigest> = $r10;

     label2:
        goto label6;

     label3:
        $r11 := @caughtexception;

        goto label7;

     label4:
        $r12 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BlobStore", "Error computing the digest", $r12);

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(524288L);

        return;

     label7:
        staticinvoke <android.os.Trace: void traceEnd(long)>(524288L);

        throw $r11;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    void destroy()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.io.File $r1;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void revokeAllFds()>();

        $r1 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.File getSessionFile()>();

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return;
    }

    void dump(com.android.internal.util.IndentingPrintWriter, com.android.server.blob.BlobStoreManagerService$DumpArgs)
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        int $i0, $i1, $i4;
        java.lang.String $r3, $r5, $r8, $r10, $r12, $r14, $r16, $r19, $r21, $r31;
        long $l2, $l3;
        android.content.Context $r18;
        android.app.blob.BlobHandle $r23;
        boolean $z0;
        com.android.server.blob.BlobAccessMode $r26;
        java.util.ArrayList $r29;
        java.lang.Throwable $r32;
        com.android.internal.util.IndentingPrintWriter r33;
        com.android.server.blob.BlobStoreManagerService$DumpArgs r34;
        java.lang.StringBuilder r35, r36, r37, r38, r39, r40;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r33 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r34 := @parameter1: com.android.server.blob.BlobStoreManagerService$DumpArgs;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r3 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i0);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ownerUid: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid>;

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r8);

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ownerPkg: ");

        $r10 = r0.<com.android.server.blob.BlobStoreSession: java.lang.String mOwnerPackageName>;

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r12);

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("creation time: ");

        $l2 = r0.<com.android.server.blob.BlobStoreSession: long mCreationTimeMs>;

        $r14 = staticinvoke <com.android.server.blob.BlobStoreUtils: java.lang.String formatTime(long)>($l2);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r16);

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size: ");

        $r18 = r0.<com.android.server.blob.BlobStoreSession: android.content.Context mContext>;

        $l3 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: long getSize()>();

        $r19 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long,int)>($r18, $l3, 8);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r21);

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("blobHandle:");

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r23 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle>;

        $z0 = virtualinvoke r34.<com.android.server.blob.BlobStoreManagerService$DumpArgs: boolean shouldDumpFull()>();

        virtualinvoke $r23.<android.app.blob.BlobHandle: void dump(com.android.internal.util.IndentingPrintWriter,boolean)>(r33, $z0);

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("accessMode:");

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r26 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        virtualinvoke $r26.<com.android.server.blob.BlobAccessMode: void dump(com.android.internal.util.IndentingPrintWriter)>(r33);

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Open fds: #");

        $r29 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        $i4 = virtualinvoke $r29.<java.util.ArrayList: int size()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r31 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r31);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r32 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r32;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    com.android.server.blob.BlobAccessMode getBlobAccessMode()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.blob.BlobAccessMode r3;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.app.blob.BlobHandle getBlobHandle()
    {
        com.android.server.blob.BlobStoreSession r0;
        android.app.blob.BlobHandle $r1;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $r1 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle>;

        return $r1;
    }

    public java.lang.String getOwnerPackageName()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.String mOwnerPackageName>;

        return $r1;
    }

    public int getOwnerUid()
    {
        com.android.server.blob.BlobStoreSession r0;
        int $i0;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid>;

        return $i0;
    }

    java.io.File getSessionFile()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.io.File $r1, $r2, $r3;
        long $l0;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $r1 = r0.<com.android.server.blob.BlobStoreSession: java.io.File mSessionFile>;

        if $r1 != null goto label1;

        $l0 = r0.<com.android.server.blob.BlobStoreSession: long mSessionId>;

        $r3 = staticinvoke <com.android.server.blob.BlobStoreConfig: java.io.File prepareBlobFile(long)>($l0);

        r0.<com.android.server.blob.BlobStoreSession: java.io.File mSessionFile> = $r3;

     label1:
        $r2 = r0.<com.android.server.blob.BlobStoreSession: java.io.File mSessionFile>;

        return $r2;
    }

    public long getSessionId()
    {
        com.android.server.blob.BlobStoreSession r0;
        long $l0;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $l0 = r0.<com.android.server.blob.BlobStoreSession: long mSessionId>;

        return $l0;
    }

    public long getSize()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.io.File $r1;
        long $l0;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $r1 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.File getSessionFile()>();

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }

    int getState()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean hasAccess(int, java.lang.String)
    {
        com.android.server.blob.BlobStoreSession r0;
        int i0, $i1;
        java.lang.String r1, $r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid>;

        if $i1 != i0 goto label1;

        $r2 = r0.<com.android.server.blob.BlobStoreSession: java.lang.String mOwnerPackageName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isExpired()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.io.File $r1;
        byte $b0;
        boolean $z0;
        long l1;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $r1 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.File getSessionFile()>();

        l1 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $b0 = l1 cmp 0L;

        if $b0 != 0 goto label1;

        l1 = r0.<com.android.server.blob.BlobStoreSession: long mCreationTimeMs>;

        goto label1;

     label1:
        $z0 = staticinvoke <com.android.server.blob.BlobStoreConfig: boolean hasSessionExpired(long)>(l1);

        return $z0;
    }

    boolean isFinalized()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r3;
        boolean z0;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 == 3 goto label4;

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i1 != 2 goto label3;

     label2:
        goto label4;

     label3:
        z0 = 0;

        goto label5;

     label4:
        z0 = 1;

     label5:
        exitmonitor r1;

     label6:
        return z0;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isPackageAccessAllowed(java.lang.String, byte[])
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        boolean z0;
        int $i0, $i1;
        java.lang.String $r5, $r7, r10;
        com.android.server.blob.BlobAccessMode $r8;
        java.lang.Throwable $r9;
        byte[] r11;
        java.lang.IllegalStateException r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: byte[];

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "packageName must not be null");

        staticinvoke <com.android.internal.util.Preconditions: byte[] checkByteArrayNotEmpty(byte[],java.lang.String)>(r11, "certificate");

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 != 1 goto label3;

        $r8 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        z0 = virtualinvoke $r8.<com.android.server.blob.BlobAccessMode: boolean isPackageAccessAllowed(java.lang.String,byte[])>(r10, r11);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        r12 = new java.lang.IllegalStateException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to get access type in state: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r5 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i1);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r12;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isPublicAccessAllowed()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.StringBuilder r2;
        int $i0, $i1;
        java.lang.String $r4, $r6;
        com.android.server.blob.BlobAccessMode $r7;
        java.lang.Throwable $r8;
        java.lang.IllegalStateException r9;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 != 1 goto label3;

        $r7 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        z0 = virtualinvoke $r7.<com.android.server.blob.BlobAccessMode: boolean isPublicAccessAllowed()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        r9 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to get access type in state: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r4 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r9;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isSameSignatureAccessAllowed()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.StringBuilder r2;
        int $i0, $i1;
        java.lang.String $r4, $r6;
        com.android.server.blob.BlobAccessMode $r7;
        java.lang.Throwable $r8;
        java.lang.IllegalStateException r9;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 != 1 goto label3;

        $r7 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        z0 = virtualinvoke $r7.<com.android.server.blob.BlobAccessMode: boolean isSameSignatureAccessAllowed()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        r9 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to get access type in state: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r4 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r9;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void lambda$trackRevocableFdLocked$0$BlobStoreSession(android.os.RevocableFileDescriptor, java.io.IOException)
    {
        com.android.server.blob.BlobStoreSession r0;
        java.util.ArrayList $r1, r5;
        java.lang.Throwable $r2;
        android.os.RevocableFileDescriptor r3;
        java.io.IOException r4;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r3 := @parameter0: android.os.RevocableFileDescriptor;

        r4 := @parameter1: java.io.IOException;

        r5 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        entermonitor r5;

     label1:
        $r1 = r0.<com.android.server.blob.BlobStoreSession: java.util.ArrayList mRevocableFds>;

        virtualinvoke $r1.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

        exitmonitor r5;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r5;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void open()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        boolean $z0;
        int $i0;
        java.lang.String $r4, $r6;
        java.lang.Throwable $r7;
        java.lang.IllegalStateException r8;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: boolean isFinalized()>();

        if $z0 != 0 goto label3;

        r0.<com.android.server.blob.BlobStoreSession: int mState> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        r8 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to open session with state: ");

        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r4 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r8;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.os.ParcelFileDescriptor openRead()
    {
        com.android.server.blob.BlobStoreSession r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r4, $r7, $r9;
        android.content.Context $r5;
        java.io.FileDescriptor $r10, r20, r21;
        java.lang.Throwable $r11, $r13, $r14, $r15;
        java.lang.RuntimeException $r12, $r16;
        java.lang.Object r17, r23;
        android.os.ParcelFileDescriptor r24, r32;
        android.os.RevocableFileDescriptor r33;
        java.lang.StringBuilder r34, r36;
        java.lang.IllegalStateException r35, r37;
        java.io.IOException r38, r39;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        r17 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r17;

     label01:
        $i0 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i0 != 1 goto label27;

        z0 = staticinvoke <com.android.server.blob.BlobStoreConfig: boolean shouldUseRevocableFdForReads()>();

     label02:
        if z0 != 0 goto label08;

     label03:
        r32 = new android.os.ParcelFileDescriptor;

        $r10 = specialinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.FileDescriptor openReadInternal()>();

        specialinvoke r32.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>($r10);

     label04:
        exitmonitor r17;

     label05:
        return r32;

     label06:
        $r11 := @caughtexception;

     label07:
        r38 = (java.io.IOException) $r11;

        $r12 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r38);

        throw $r12;

     label08:
        exitmonitor r17;

     label09:
        r20 = null;

     label10:
        r21 = specialinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.FileDescriptor openReadInternal()>();

     label11:
        r20 = r21;

     label12:
        r33 = new android.os.RevocableFileDescriptor;

     label13:
        r20 = r21;

     label14:
        $r5 = r0.<com.android.server.blob.BlobStoreSession: android.content.Context mContext>;

        specialinvoke r33.<android.os.RevocableFileDescriptor: void <init>(android.content.Context,java.io.FileDescriptor)>($r5, r21);

     label15:
        r20 = r21;

     label16:
        r23 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

     label17:
        r20 = r21;

     label18:
        entermonitor r23;

     label19:
        $i2 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i2 != 1 goto label21;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void trackRevocableFdLocked(android.os.RevocableFileDescriptor)>(r33);

        r24 = virtualinvoke r33.<android.os.RevocableFileDescriptor: android.os.ParcelFileDescriptor getRevocableFileDescriptor()>();

        exitmonitor r23;

     label20:
        return r24;

     label21:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r21);

        r35 = new java.lang.IllegalStateException;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to read in state: ");

        $i3 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r7 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i3);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw r35;

     label22:
        $r14 := @caughtexception;

     label23:
        exitmonitor r23;

     label24:
        r20 = r21;

     label25:
        throw $r14;

     label26:
        $r15 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r20);

        r39 = (java.io.IOException) $r15;

        $r16 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r39);

        throw $r16;

     label27:
        r37 = new java.lang.IllegalStateException;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to read in state: ");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r2 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i1);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r37.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw r37;

     label28:
        $r13 := @caughtexception;

     label29:
        exitmonitor r17;

     label30:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.io.IOException from label10 to label11 with label26;
        catch java.io.IOException from label12 to label13 with label26;
        catch java.io.IOException from label14 to label15 with label26;
        catch java.io.IOException from label16 to label17 with label26;
        catch java.io.IOException from label18 to label19 with label26;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.io.IOException from label25 to label26 with label26;
        catch java.lang.Throwable from label27 to label28 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public android.os.ParcelFileDescriptor openWrite(long, long)
    {
        com.android.server.blob.BlobStoreSession r0;
        long l0, l1;
        int $i3, $i4, $i5, $i6;
        java.lang.String $r2, $r4, $r7, $r9;
        android.content.Context $r5;
        java.lang.Throwable $r10, $r12, $r13;
        java.lang.RuntimeException $r11;
        java.lang.Object r14, r18;
        java.io.FileDescriptor r15, r16;
        android.os.ParcelFileDescriptor r19;
        android.os.RevocableFileDescriptor r27;
        java.lang.StringBuilder r28, r30;
        java.lang.IllegalStateException r29, r31;
        java.io.IOException r32;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <com.android.internal.util.Preconditions: long checkArgumentNonnegative(long,java.lang.String)>(l0, "offsetBytes must not be negative");

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void assertCallerIsOwner()>();

        r14 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r14;

     label01:
        $i3 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i3 != 1 goto label20;

        exitmonitor r14;

     label02:
        r15 = null;

     label03:
        r16 = specialinvoke r0.<com.android.server.blob.BlobStoreSession: java.io.FileDescriptor openWriteInternal(long,long)>(l0, l1);

     label04:
        r15 = r16;

     label05:
        r27 = new android.os.RevocableFileDescriptor;

     label06:
        r15 = r16;

     label07:
        $r5 = r0.<com.android.server.blob.BlobStoreSession: android.content.Context mContext>;

        specialinvoke r27.<android.os.RevocableFileDescriptor: void <init>(android.content.Context,java.io.FileDescriptor)>($r5, r16);

     label08:
        r15 = r16;

     label09:
        r18 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

     label10:
        r15 = r16;

     label11:
        entermonitor r18;

     label12:
        $i5 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        if $i5 != 1 goto label14;

        specialinvoke r0.<com.android.server.blob.BlobStoreSession: void trackRevocableFdLocked(android.os.RevocableFileDescriptor)>(r27);

        r19 = virtualinvoke r27.<android.os.RevocableFileDescriptor: android.os.ParcelFileDescriptor getRevocableFileDescriptor()>();

        exitmonitor r18;

     label13:
        return r19;

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r16);

        r29 = new java.lang.IllegalStateException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to write in state: ");

        $i6 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r7 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i6);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw r29;

     label15:
        $r12 := @caughtexception;

     label16:
        exitmonitor r18;

     label17:
        r15 = r16;

     label18:
        throw $r12;

     label19:
        $r10 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r15);

        r32 = (java.io.IOException) $r10;

        $r11 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r32);

        throw $r11;

     label20:
        r31 = new java.lang.IllegalStateException;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to write in state: ");

        $i4 = r0.<com.android.server.blob.BlobStoreSession: int mState>;

        $r2 = staticinvoke <com.android.server.blob.BlobStoreSession: java.lang.String stateToString(int)>($i4);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw r31;

     label21:
        $r13 := @caughtexception;

     label22:
        exitmonitor r14;

     label23:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label19;
        catch java.io.IOException from label05 to label06 with label19;
        catch java.io.IOException from label07 to label08 with label19;
        catch java.io.IOException from label09 to label10 with label19;
        catch java.io.IOException from label11 to label12 with label19;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.io.IOException from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    void sendCommitCallbackResult(int)
    {
        com.android.server.blob.BlobStoreSession r0;
        int i0;
        java.lang.Object r1;
        android.app.blob.IBlobCommitCallback $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.IBlobCommitCallback mBlobCommitCallback>;

        interfaceinvoke $r2.<android.app.blob.IBlobCommitCallback: void onResult(int)>(i0);

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

        goto label8;

     label4:
        $r3 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("BlobStore", "Error sending the callback result", $r3);

     label6:
        r0.<com.android.server.blob.BlobStoreSession: android.app.blob.IBlobCommitCallback mBlobCommitCallback> = null;

        exitmonitor r1;

     label7:
        return;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label8 to label9 with label3;
    }

    public java.lang.String toString()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.StringBuilder $r2;
        long $l0;
        android.app.blob.BlobHandle $r6;
        int $i1;
        java.lang.String $r11, $r14;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BlobStoreSession {id:");

        $l0 = r0.<com.android.server.blob.BlobStoreSession: long mSessionId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",handle:");

        $r6 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",uid:");

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",pkg:");

        $r11 = r0.<com.android.server.blob.BlobStoreSession: java.lang.String mOwnerPackageName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    void verifyBlobData()
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        byte[] $r3, $r5, $r6, $r10, $r16, $r17;
        android.app.blob.BlobHandle $r9, $r15;
        java.lang.String $r11, $r14, r19;
        int $i1;
        long $l2, $l3;
        boolean $z0;
        java.lang.Throwable $r18;
        com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener $r20;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.blob.BlobStoreSession: byte[] mDataDigest>;

        if $r3 == null goto label03;

        $r17 = r0.<com.android.server.blob.BlobStoreSession: byte[] mDataDigest>;

        $r15 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle>;

        $r16 = $r15.<android.app.blob.BlobHandle: byte[] digest>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r17, $r16);

        if $z0 == 0 goto label03;

        r0.<com.android.server.blob.BlobStoreSession: int mState> = 4;

     label02:
        goto label07;

     label03:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Digest of the data (");

        $r5 = r0.<com.android.server.blob.BlobStoreSession: byte[] mDataDigest>;

        if $r5 != null goto label05;

     label04:
        r19 = "null";

        goto label06;

     label05:
        $r6 = r0.<com.android.server.blob.BlobStoreSession: byte[] mDataDigest>;

        r19 = staticinvoke <android.app.blob.BlobHandle: java.lang.String safeDigest(byte[])>($r6);

     label06:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") didn\'t match the given BlobHandle.digest (");

        $r9 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle>;

        $r10 = $r9.<android.app.blob.BlobHandle: byte[] digest>;

        $r11 = staticinvoke <android.app.blob.BlobHandle: java.lang.String safeDigest(byte[])>($r10);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BlobStore", $r14);

        r0.<com.android.server.blob.BlobStoreSession: int mState> = 5;

        $i1 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: int getOwnerUid()>();

        $l2 = r0.<com.android.server.blob.BlobStoreSession: long mSessionId>;

        $l3 = virtualinvoke r0.<com.android.server.blob.BlobStoreSession: long getSize()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long,long,int)>(298, $i1, $l2, $l3, 3);

        virtualinvoke r0.<com.android.server.blob.BlobStoreSession: void sendCommitCallbackResult(int)>(1);

     label07:
        $r20 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener mListener>;

        virtualinvoke $r20.<com.android.server.blob.BlobStoreManagerService$SessionStateChangeListener: void onStateChanged(com.android.server.blob.BlobStoreSession)>(r0);

        exitmonitor r1;

     label08:
        return;

     label09:
        $r18 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void writeToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.blob.BlobStoreSession r0;
        java.lang.Object r1;
        long $l0, $l2;
        java.lang.String $r2;
        int $i1;
        android.app.blob.BlobHandle $r4;
        com.android.server.blob.BlobAccessMode $r7;
        java.lang.Throwable $r9;
        org.xmlpull.v1.XmlSerializer r10;

        r0 := @this: com.android.server.blob.BlobStoreSession;

        r10 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r1 = r0.<com.android.server.blob.BlobStoreSession: java.lang.Object mSessionLock>;

        entermonitor r1;

     label1:
        $l0 = r0.<com.android.server.blob.BlobStoreSession: long mSessionId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r10, "id", $l0);

        $r2 = r0.<com.android.server.blob.BlobStoreSession: java.lang.String mOwnerPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r10, "p", $r2);

        $i1 = r0.<com.android.server.blob.BlobStoreSession: int mOwnerUid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r10, "u", $i1);

        $l2 = r0.<com.android.server.blob.BlobStoreSession: long mCreationTimeMs>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r10, "crt", $l2);

        interfaceinvoke r10.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "bh");

        $r4 = r0.<com.android.server.blob.BlobStoreSession: android.app.blob.BlobHandle mBlobHandle>;

        virtualinvoke $r4.<android.app.blob.BlobHandle: void writeToXml(org.xmlpull.v1.XmlSerializer)>(r10);

        interfaceinvoke r10.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "bh");

        interfaceinvoke r10.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "am");

        $r7 = r0.<com.android.server.blob.BlobStoreSession: com.android.server.blob.BlobAccessMode mBlobAccessMode>;

        virtualinvoke $r7.<com.android.server.blob.BlobAccessMode: void writeToXml(org.xmlpull.v1.XmlSerializer)>(r10);

        interfaceinvoke r10.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "am");

        exitmonitor r1;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.blob.BlobStoreSession: int STATE_VERIFIED_VALID> = 4;

        <com.android.server.blob.BlobStoreSession: int STATE_VERIFIED_INVALID> = 5;

        <com.android.server.blob.BlobStoreSession: int STATE_OPENED> = 1;

        <com.android.server.blob.BlobStoreSession: int STATE_COMMITTED> = 3;

        <com.android.server.blob.BlobStoreSession: int STATE_CLOSED> = 0;

        <com.android.server.blob.BlobStoreSession: int STATE_ABANDONED> = 2;

        return;
    }
}
