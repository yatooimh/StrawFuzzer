class com.android.server.broadcastradio.hal1.Tuner extends android.hardware.radio.ITuner$Stub
{
    private static final java.lang.String TAG;
    private final android.hardware.radio.ITunerCallback mClientCallback;
    private final android.os.IBinder$DeathRecipient mDeathRecipient;
    private boolean mIsClosed;
    private boolean mIsMuted;
    private final java.lang.Object mLock;
    private final long mNativeContext;
    private int mRegion;
    private final com.android.server.broadcastradio.hal1.TunerCallback mTunerCallback;
    private final boolean mWithAudio;

    void <init>(android.hardware.radio.ITunerCallback, int, int, boolean, int)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        int i0, i1, i2;
        boolean z0;
        java.lang.Object $r1;
        com.android.server.broadcastradio.hal1.TunerCallback $r2;
        long $l3;
        com.android.server.broadcastradio.hal1._$$Lambda$_XcW_oxw3YwSco8d8bZQoqwUTnM $r3;
        android.hardware.radio.ITunerCallback $r4, r8;
        android.os.IBinder $r5;
        android.os.IBinder$DeathRecipient $r6;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r8 := @parameter0: android.hardware.radio.ITunerCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        specialinvoke r0.<android.hardware.radio.ITuner$Stub: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock> = $r1;

        r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsClosed> = 0;

        r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsMuted> = 0;

        r0.<com.android.server.broadcastradio.hal1.Tuner: android.hardware.radio.ITunerCallback mClientCallback> = r8;

        $r2 = new com.android.server.broadcastradio.hal1.TunerCallback;

        specialinvoke $r2.<com.android.server.broadcastradio.hal1.TunerCallback: void <init>(com.android.server.broadcastradio.hal1.Tuner,android.hardware.radio.ITunerCallback,int)>(r0, r8, i0);

        r0.<com.android.server.broadcastradio.hal1.Tuner: com.android.server.broadcastradio.hal1.TunerCallback mTunerCallback> = $r2;

        r0.<com.android.server.broadcastradio.hal1.Tuner: int mRegion> = i1;

        r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mWithAudio> = z0;

        $l3 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: long nativeInit(int,boolean,int)>(i0, z0, i2);

        r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext> = $l3;

        $r3 = new com.android.server.broadcastradio.hal1._$$Lambda$_XcW_oxw3YwSco8d8bZQoqwUTnM;

        specialinvoke $r3.<com.android.server.broadcastradio.hal1._$$Lambda$_XcW_oxw3YwSco8d8bZQoqwUTnM: void <init>(com.android.server.broadcastradio.hal1.Tuner)>(r0);

        r0.<com.android.server.broadcastradio.hal1.Tuner: android.os.IBinder$DeathRecipient mDeathRecipient> = $r3;

     label1:
        $r4 = r0.<com.android.server.broadcastradio.hal1.Tuner: android.hardware.radio.ITunerCallback mClientCallback>;

        $r5 = interfaceinvoke $r4.<android.hardware.radio.ITunerCallback: android.os.IBinder asBinder()>();

        $r6 = r0.<com.android.server.broadcastradio.hal1.Tuner: android.os.IBinder$DeathRecipient mDeathRecipient>;

        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r6, 0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void close()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean checkConfiguredLocked()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        com.android.server.broadcastradio.hal1.TunerCallback $r1;
        boolean $z0;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        $r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: com.android.server.broadcastradio.hal1.TunerCallback mTunerCallback>;

        $z0 = virtualinvoke $r1.<com.android.server.broadcastradio.hal1.TunerCallback: boolean isInitialConfigurationDone()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BroadcastRadioService.Tuner", "Initial configuration is still pending, skipping the operation");

        return 0;
    }

    private void checkNotClosedLocked()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        $z0 = r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsClosed>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Tuner is closed, no further operations are allowed");

        throw $r1;
    }

    private native void nativeCancel(long);

    private native void nativeCancelAnnouncement(long);

    private native void nativeClose(long);

    private native void nativeFinalize(long);

    private native android.hardware.radio.RadioManager$BandConfig nativeGetConfiguration(long, int);

    private native byte[] nativeGetImage(long, int);

    private native java.util.List nativeGetProgramList(long, java.util.Map);

    private native long nativeInit(int, boolean, int);

    private native boolean nativeIsAnalogForced(long);

    private native void nativeScan(long, boolean, boolean);

    private native void nativeSetAnalogForced(long, boolean);

    private native void nativeSetConfiguration(long, android.hardware.radio.RadioManager$BandConfig);

    private native boolean nativeStartBackgroundScan(long);

    private native void nativeStep(long, boolean, boolean);

    private native void nativeTune(long, android.hardware.radio.ProgramSelector);

    public void cancel()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeCancel(long)>($l0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void cancelAnnouncement()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeCancelAnnouncement(long)>($l0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void close()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.broadcastradio.hal1.TunerCallback $r3;
        android.hardware.radio.ITunerCallback $r4;
        android.os.IBinder $r5;
        android.os.IBinder$DeathRecipient $r6;
        long $l0;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsClosed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsClosed> = 1;

        $r3 = r0.<com.android.server.broadcastradio.hal1.Tuner: com.android.server.broadcastradio.hal1.TunerCallback mTunerCallback>;

        virtualinvoke $r3.<com.android.server.broadcastradio.hal1.TunerCallback: void detach()>();

        $r4 = r0.<com.android.server.broadcastradio.hal1.Tuner: android.hardware.radio.ITunerCallback mClientCallback>;

        $r5 = interfaceinvoke $r4.<android.hardware.radio.ITunerCallback: android.os.IBinder asBinder()>();

        $r6 = r0.<com.android.server.broadcastradio.hal1.Tuner: android.os.IBinder$DeathRecipient mDeathRecipient>;

        interfaceinvoke $r5.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r6, 0);

        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeClose(long)>($l0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        long $l0;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeFinalize(long)>($l0);

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    public android.hardware.radio.RadioManager$BandConfig getConfiguration()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        int $i0;
        long $l1;
        java.lang.Throwable $r2;
        android.hardware.radio.RadioManager$BandConfig r3;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l1 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        $i0 = r0.<com.android.server.broadcastradio.hal1.Tuner: int mRegion>;

        r3 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: android.hardware.radio.RadioManager$BandConfig nativeGetConfiguration(long,int)>($l1, $i0);

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.graphics.Bitmap getImage(int)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        int i0, $i2, $i3;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        long $l1;
        android.graphics.Bitmap $r3;
        java.lang.Throwable $r4;
        byte[] r5;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        i0 := @parameter0: int;

        if i0 == 0 goto label8;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        r5 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: byte[] nativeGetImage(long,int)>($l1, i0);

        exitmonitor r1;

     label2:
        if r5 == null goto label4;

        $i2 = lengthof r5;

        if $i2 != 0 goto label3;

        goto label4;

     label3:
        $i3 = lengthof r5;

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>(r5, 0, $i3);

        return $r3;

     label4:
        return null;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

     label8:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image ID is missing");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.Map getParameters(java.util.List)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.util.List r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 := @parameter0: java.util.List;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported by HAL 1.x");

        throw $r2;
    }

    java.util.List getProgramList(java.util.Map)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        long $l0;
        java.lang.Throwable $r2;
        java.util.Map r3;
        java.util.List r4;
        java.lang.IllegalStateException r5;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r3 := @parameter0: java.util.Map;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        r4 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: java.util.List nativeGetProgramList(long,java.util.Map)>($l0, r3);

     label2:
        if r4 == null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return r4;

     label5:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Program list is not ready");

        throw r5;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isClosed()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        boolean $z0;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        $z0 = r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsClosed>;

        return $z0;
    }

    public boolean isConfigFlagSet(int)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        java.lang.UnsupportedOperationException $r3;
        long $l1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        i0 := @parameter0: int;

        if i0 != 2 goto label6;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l1 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        z0 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: boolean nativeIsAnalogForced(long)>($l1);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported by HAL 1.x");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isConfigFlagSupported(int)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        i0 := @parameter0: int;

        if i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isMuted()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        $z1 = r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mWithAudio>;

        if $z1 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BroadcastRadioService.Tuner", "Tuner did not request audio, pretending it was muted");

        return 1;

     label1:
        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        z0 = r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsMuted>;

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void scan(boolean, boolean)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $z2 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: boolean checkConfiguredLocked()>();

        if $z2 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeScan(long,boolean,boolean)>($l0, z0, z1);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setConfigFlag(int, boolean)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        int i0;
        boolean z0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r3;
        long $l1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 != 2 goto label6;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l1 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeSetAnalogForced(long,boolean)>($l1, z0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported by HAL 1.x");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setConfiguration(android.hardware.radio.RadioManager$BandConfig)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        long $l0;
        int $i1;
        java.lang.Throwable $r3;
        android.hardware.radio.RadioManager$BandConfig r4;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r4 := @parameter0: android.hardware.radio.RadioManager$BandConfig;

        if r4 == null goto label6;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeSetConfiguration(long,android.hardware.radio.RadioManager$BandConfig)>($l0, r4);

        $i1 = virtualinvoke r4.<android.hardware.radio.RadioManager$BandConfig: int getRegion()>();

        r0.<com.android.server.broadcastradio.hal1.Tuner: int mRegion> = $i1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The argument must not be a null pointer");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setMuted(boolean)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mWithAudio>;

        if $z1 == 0 goto label8;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $z2 = r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsMuted>;

        if $z2 != z0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.broadcastradio.hal1.Tuner: boolean mIsMuted> = z0;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BroadcastRadioService.Tuner", "Mute via RadioService is not implemented - please handle it via app");

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

     label8:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t operate on mute - no audio requested");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.Map setParameters(java.util.Map)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.util.Map r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported by HAL 1.x");

        throw $r2;
    }

    public boolean startBackgroundScan()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.Object r1;
        boolean z0;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        z0 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: boolean nativeStartBackgroundScan(long)>($l0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void startProgramListUpdates(android.hardware.radio.ProgramList$Filter)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        android.hardware.radio.ProgramList$Filter r1;
        com.android.server.broadcastradio.hal1.TunerCallback $r2;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r1 := @parameter0: android.hardware.radio.ProgramList$Filter;

        $r2 = r0.<com.android.server.broadcastradio.hal1.Tuner: com.android.server.broadcastradio.hal1.TunerCallback mTunerCallback>;

        virtualinvoke $r2.<com.android.server.broadcastradio.hal1.TunerCallback: void startProgramListUpdates(android.hardware.radio.ProgramList$Filter)>(r1);

        return;
    }

    public void step(boolean, boolean)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $z2 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: boolean checkConfiguredLocked()>();

        if $z2 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $l0 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeStep(long,boolean,boolean)>($l0, z0, z1);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void stopProgramListUpdates()
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        com.android.server.broadcastradio.hal1.TunerCallback $r1;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        $r1 = r0.<com.android.server.broadcastradio.hal1.Tuner: com.android.server.broadcastradio.hal1.TunerCallback mTunerCallback>;

        virtualinvoke $r1.<com.android.server.broadcastradio.hal1.TunerCallback: void stopProgramListUpdates()>();

        return;
    }

    public void tune(android.hardware.radio.ProgramSelector)
    {
        com.android.server.broadcastradio.hal1.Tuner r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        boolean $z0;
        long $l1;
        java.lang.Throwable $r6;
        android.hardware.radio.ProgramSelector r7;
        java.lang.Object r9;

        r0 := @this: com.android.server.broadcastradio.hal1.Tuner;

        r7 := @parameter0: android.hardware.radio.ProgramSelector;

        if r7 == null goto label8;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuning to ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BroadcastRadioService.Tuner", $r5);

        r9 = r0.<com.android.server.broadcastradio.hal1.Tuner: java.lang.Object mLock>;

        entermonitor r9;

     label1:
        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void checkNotClosedLocked()>();

        $z0 = specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: boolean checkConfiguredLocked()>();

        if $z0 != 0 goto label3;

        exitmonitor r9;

     label2:
        return;

     label3:
        $l1 = r0.<com.android.server.broadcastradio.hal1.Tuner: long mNativeContext>;

        specialinvoke r0.<com.android.server.broadcastradio.hal1.Tuner: void nativeTune(long,android.hardware.radio.ProgramSelector)>($l1, r7);

        exitmonitor r9;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r9;

     label7:
        throw $r6;

     label8:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The argument must not be a null pointer");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.broadcastradio.hal1.Tuner: java.lang.String TAG> = "BroadcastRadioService.Tuner";

        return;
    }
}
