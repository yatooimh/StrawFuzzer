public class com.android.server.camera.CameraServiceProxy extends com.android.server.SystemService implements android.os.Handler$Callback, android.os.IBinder$DeathRecipient
{
    private static final java.lang.String CAMERA_SERVICE_BINDER_NAME;
    public static final java.lang.String CAMERA_SERVICE_PROXY_BINDER_NAME;
    private static final boolean DEBUG;
    public static final int DISABLE_POLLING_FLAGS;
    public static final int ENABLE_POLLING_FLAGS;
    private static final int MAX_USAGE_HISTORY;
    private static final int MSG_SWITCH_USER;
    private static final java.lang.String NFC_NOTIFICATION_PROP;
    private static final java.lang.String NFC_SERVICE_BINDER_NAME;
    private static final int RETRY_DELAY_TIME;
    private static final int RETRY_TIMES;
    private static final java.lang.String TAG;
    private static final android.os.IBinder nfcInterfaceToken;
    private final android.util.ArrayMap mActiveCameraUsage;
    private final android.hardware.ICameraServiceProxy$Stub mCameraServiceProxy;
    private android.hardware.ICameraService mCameraServiceRaw;
    private final java.util.List mCameraUsageHistory;
    private final android.content.Context mContext;
    private java.util.Set mEnabledCameraUsers;
    private final android.os.Handler mHandler;
    private final com.android.server.ServiceThread mHandlerThread;
    private final android.content.BroadcastReceiver mIntentReceiver;
    private int mLastUser;
    private final java.lang.Object mLock;
    private java.util.concurrent.ScheduledThreadPoolExecutor mLogWriterService;
    private final com.android.internal.logging.MetricsLogger mLogger;
    private final boolean mNotifyNfc;
    private android.os.UserManager mUserManager;

    static void <clinit>()
    {
        android.os.Binder $r0;

        <com.android.server.camera.CameraServiceProxy: java.lang.String TAG> = "CameraService_proxy";

        <com.android.server.camera.CameraServiceProxy: int RETRY_TIMES> = 60;

        <com.android.server.camera.CameraServiceProxy: int RETRY_DELAY_TIME> = 20;

        <com.android.server.camera.CameraServiceProxy: java.lang.String NFC_SERVICE_BINDER_NAME> = "nfc";

        <com.android.server.camera.CameraServiceProxy: java.lang.String NFC_NOTIFICATION_PROP> = "ro.camera.notify_nfc";

        <com.android.server.camera.CameraServiceProxy: int MSG_SWITCH_USER> = 1;

        <com.android.server.camera.CameraServiceProxy: int MAX_USAGE_HISTORY> = 100;

        <com.android.server.camera.CameraServiceProxy: int ENABLE_POLLING_FLAGS> = 0;

        <com.android.server.camera.CameraServiceProxy: int DISABLE_POLLING_FLAGS> = 4096;

        <com.android.server.camera.CameraServiceProxy: boolean DEBUG> = 0;

        <com.android.server.camera.CameraServiceProxy: java.lang.String CAMERA_SERVICE_PROXY_BINDER_NAME> = "media.camera.proxy";

        <com.android.server.camera.CameraServiceProxy: java.lang.String CAMERA_SERVICE_BINDER_NAME> = "media.camera";

        $r0 = new android.os.Binder;

        specialinvoke $r0.<android.os.Binder: void <init>()>();

        <com.android.server.camera.CameraServiceProxy: android.os.IBinder nfcInterfaceToken> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.camera.CameraServiceProxy r0;
        java.lang.Object $r1;
        android.util.ArrayMap $r2;
        java.util.ArrayList $r3;
        com.android.internal.logging.MetricsLogger $r4;
        java.util.concurrent.ScheduledThreadPoolExecutor $r5, $r13, $r14;
        com.android.server.camera.CameraServiceProxy$1 $r6;
        com.android.server.camera.CameraServiceProxy$2 $r7;
        com.android.server.ServiceThread $r8, $r10;
        android.os.Handler $r9;
        android.os.Looper $r11;
        int $i0;
        java.util.concurrent.TimeUnit $r12;
        android.content.Context r15;
        boolean z0;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        r15 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r15);

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory> = $r3;

        $r4 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r4.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.server.camera.CameraServiceProxy: com.android.internal.logging.MetricsLogger mLogger> = $r4;

        $r5 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r5.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(1);

        r0.<com.android.server.camera.CameraServiceProxy: java.util.concurrent.ScheduledThreadPoolExecutor mLogWriterService> = $r5;

        $r6 = new com.android.server.camera.CameraServiceProxy$1;

        specialinvoke $r6.<com.android.server.camera.CameraServiceProxy$1: void <init>(com.android.server.camera.CameraServiceProxy)>(r0);

        r0.<com.android.server.camera.CameraServiceProxy: android.content.BroadcastReceiver mIntentReceiver> = $r6;

        $r7 = new com.android.server.camera.CameraServiceProxy$2;

        specialinvoke $r7.<com.android.server.camera.CameraServiceProxy$2: void <init>(com.android.server.camera.CameraServiceProxy)>(r0);

        r0.<com.android.server.camera.CameraServiceProxy: android.hardware.ICameraServiceProxy$Stub mCameraServiceProxy> = $r7;

        r0.<com.android.server.camera.CameraServiceProxy: android.content.Context mContext> = r15;

        z0 = 0;

        $r8 = new com.android.server.ServiceThread;

        specialinvoke $r8.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("CameraService_proxy", -4, 0);

        r0.<com.android.server.camera.CameraServiceProxy: com.android.server.ServiceThread mHandlerThread> = $r8;

        virtualinvoke $r8.<com.android.server.ServiceThread: void start()>();

        $r9 = new android.os.Handler;

        $r10 = r0.<com.android.server.camera.CameraServiceProxy: com.android.server.ServiceThread mHandlerThread>;

        $r11 = virtualinvoke $r10.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        specialinvoke $r9.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r11, r0);

        r0.<com.android.server.camera.CameraServiceProxy: android.os.Handler mHandler> = $r9;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.camera.notify_nfc", 0);

        if $i0 <= 0 goto label1;

        z0 = 1;

     label1:
        r0.<com.android.server.camera.CameraServiceProxy: boolean mNotifyNfc> = z0;

        $r13 = r0.<com.android.server.camera.CameraServiceProxy: java.util.concurrent.ScheduledThreadPoolExecutor mLogWriterService>;

        $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r13.<java.util.concurrent.ScheduledThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>(1L, $r12);

        $r14 = r0.<com.android.server.camera.CameraServiceProxy: java.util.concurrent.ScheduledThreadPoolExecutor mLogWriterService>;

        virtualinvoke $r14.<java.util.concurrent.ScheduledThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);

        return;
    }

    static java.lang.Object access$000(com.android.server.camera.CameraServiceProxy)
    {
        com.android.server.camera.CameraServiceProxy r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.camera.CameraServiceProxy;

        $r1 = r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock>;

        return $r1;
    }

    static java.util.Set access$100(com.android.server.camera.CameraServiceProxy)
    {
        com.android.server.camera.CameraServiceProxy r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.server.camera.CameraServiceProxy;

        $r1 = r0.<com.android.server.camera.CameraServiceProxy: java.util.Set mEnabledCameraUsers>;

        return $r1;
    }

    static int access$200(com.android.server.camera.CameraServiceProxy)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int $i0;

        r0 := @parameter0: com.android.server.camera.CameraServiceProxy;

        $i0 = r0.<com.android.server.camera.CameraServiceProxy: int mLastUser>;

        return $i0;
    }

    static void access$300(com.android.server.camera.CameraServiceProxy, int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int i0;

        r0 := @parameter0: com.android.server.camera.CameraServiceProxy;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void switchUserLocked(int)>(i0);

        return;
    }

    static void access$400(com.android.server.camera.CameraServiceProxy, int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int i0;

        r0 := @parameter0: com.android.server.camera.CameraServiceProxy;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void notifySwitchWithRetries(int)>(i0);

        return;
    }

    static java.lang.String access$500(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.camera.CameraServiceProxy: java.lang.String cameraStateToString(int)>(i0);

        return $r0;
    }

    static java.lang.String access$600(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.camera.CameraServiceProxy: java.lang.String cameraFacingToString(int)>(i0);

        return $r0;
    }

    static void access$700(com.android.server.camera.CameraServiceProxy, java.lang.String, int, int, java.lang.String, int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        java.lang.String r1, r2;
        int i0, i1, i2;

        r0 := @parameter0: com.android.server.camera.CameraServiceProxy;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        i2 := @parameter5: int;

        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void updateActivityCount(java.lang.String,int,int,java.lang.String,int)>(r1, i0, i1, r2, i2);

        return;
    }

    private static java.lang.String cameraFacingToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return "CAMERA_FACING_UNKNOWN";

     label1:
        return "CAMERA_FACING_EXTERNAL";

     label2:
        return "CAMERA_FACING_FRONT";

     label3:
        return "CAMERA_FACING_BACK";
    }

    private static java.lang.String cameraStateToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        return "CAMERA_STATE_UNKNOWN";

     label1:
        return "CAMERA_STATE_CLOSED";

     label2:
        return "CAMERA_STATE_IDLE";

     label3:
        return "CAMERA_STATE_ACTIVE";

     label4:
        return "CAMERA_STATE_OPEN";
    }

    private java.util.Set getEnabledUserHandles(int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int[] r1;
        int i0, $i1, $i2, i3, i4;
        android.os.UserManager $r3;
        android.util.ArraySet $r4;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        i3 := @parameter0: int;

        $r3 = r0.<com.android.server.camera.CameraServiceProxy: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r3.<android.os.UserManager: int[] getEnabledProfileIds(int)>(i3);

        $r4 = new android.util.ArraySet;

        $i1 = lengthof r1;

        specialinvoke $r4.<android.util.ArraySet: void <init>(int)>($i1);

        i0 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i2 = r1[i4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r4;
    }

    private boolean notifyCameraserverLocked(int, java.util.Set)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int i0;
        android.hardware.ICameraService $r1, $r2, $r4;
        int[] $r3;
        android.os.RemoteException $r5, $r10;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        java.util.Set r11;
        android.os.IBinder r12;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        i0 := @parameter0: int;

        r11 := @parameter1: java.util.Set;

        $r1 = r0.<com.android.server.camera.CameraServiceProxy: android.hardware.ICameraService mCameraServiceRaw>;

        if $r1 != null goto label4;

        r12 = virtualinvoke r0.<com.android.server.camera.CameraServiceProxy: android.os.IBinder getBinderService(java.lang.String)>("media.camera");

        if r12 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("CameraService_proxy", "Could not notify cameraserver, camera service not available.");

        return 0;

     label1:
        interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label2:
        $r4 = staticinvoke <android.hardware.ICameraService$Stub: android.hardware.ICameraService asInterface(android.os.IBinder)>(r12);

        r0.<com.android.server.camera.CameraServiceProxy: android.hardware.ICameraService mCameraServiceRaw> = $r4;

        goto label4;

     label3:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("CameraService_proxy", "Could not link to death of native camera service");

        return 0;

     label4:
        $r2 = r0.<com.android.server.camera.CameraServiceProxy: android.hardware.ICameraService mCameraServiceRaw>;

        $r3 = staticinvoke <com.android.server.camera.CameraServiceProxy: int[] toArray(java.util.Collection)>(r11);

        interfaceinvoke $r2.<android.hardware.ICameraService: void notifySystemEvent(int,int[])>(i0, $r3);

     label5:
        return 1;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not notify cameraserver, remote exception: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("CameraService_proxy", $r9);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void notifyNfcService(boolean)
    {
        com.android.server.camera.CameraServiceProxy r0;
        boolean z0;
        android.os.IBinder $r2, r8;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        android.nfc.INfcAdapter r9;
        short s2;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        z0 := @parameter0: boolean;

        r8 = virtualinvoke r0.<com.android.server.camera.CameraServiceProxy: android.os.IBinder getBinderService(java.lang.String)>("nfc");

        if r8 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("CameraService_proxy", "Could not connect to NFC service to notify it of camera state");

        return;

     label1:
        r9 = staticinvoke <android.nfc.INfcAdapter$Stub: android.nfc.INfcAdapter asInterface(android.os.IBinder)>(r8);

        if z0 == 0 goto label2;

        s2 = 0;

        goto label3;

     label2:
        s2 = 4096;

     label3:
        $r2 = <com.android.server.camera.CameraServiceProxy: android.os.IBinder nfcInterfaceToken>;

        interfaceinvoke r9.<android.nfc.INfcAdapter: void setReaderMode(android.os.IBinder,android.nfc.IAppCallback,int,android.os.Bundle)>($r2, null, s2, null);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not notify NFC service, remote exception: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("CameraService_proxy", $r7);

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void notifySwitchWithRetries(int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void notifySwitchWithRetriesLocked(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void notifySwitchWithRetriesLocked(int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        boolean $z0;
        int $i1, i2;
        android.os.Message $r1;
        java.util.Set r2;
        android.os.Handler r3;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        i2 := @parameter0: int;

        r2 = r0.<com.android.server.camera.CameraServiceProxy: java.util.Set mEnabledCameraUsers>;

        if r2 != null goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<com.android.server.camera.CameraServiceProxy: boolean notifyCameraserverLocked(int,java.util.Set)>(1, r2);

        if $z0 == 0 goto label2;

        i2 = 0;

     label2:
        if i2 > 0 goto label3;

        return;

     label3:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("CameraService_proxy", "Could not notify camera service of user switch, retrying...");

        r3 = r0.<com.android.server.camera.CameraServiceProxy: android.os.Handler mHandler>;

        $i1 = i2 - 1;

        $r1 = virtualinvoke r3.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(1, $i1, 0, null);

        virtualinvoke r3.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r1, 20L);

        return;
    }

    private void switchUserLocked(int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int i0;
        java.util.Set r1, r2;
        boolean $z0;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.camera.CameraServiceProxy: java.util.Set getEnabledUserHandles(int)>(i0);

        r0.<com.android.server.camera.CameraServiceProxy: int mLastUser> = i0;

        r2 = r0.<com.android.server.camera.CameraServiceProxy: java.util.Set mEnabledCameraUsers>;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<java.util.Set: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        r0.<com.android.server.camera.CameraServiceProxy: java.util.Set mEnabledCameraUsers> = r1;

        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void notifySwitchWithRetriesLocked(int)>(60);

     label2:
        return;
    }

    private static int[] toArray(java.util.Collection)
    {
        int[] r0;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Integer $r2;
        java.util.Collection r3;
        java.util.Iterator r4;

        r3 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        r0 = newarray (int)[$i0];

        i2 = 0;

        r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Integer) $r1;

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        r0[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    private void updateActivityCount(java.lang.String, int, int, java.lang.String, int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        java.lang.Object r1, $r4, $r10, $r16, $r19, $r23, $r26, $r29;
        boolean z0, z2, $z4, $z6, z8, z9, $z10;
        android.util.ArrayMap $r2, $r8, $r9, $r18, $r22, $r28, $r36, $r43;
        android.content.Context $r3;
        java.lang.String $r7, $r14, $r21, $r31, r33, r34, r41;
        int $i0, $i2, i3, i4, i5, i6, $i7, i8;
        java.util.List $r15, $r24, $r25;
        com.android.server.wm.WindowManagerInternal $r17, $r27;
        com.android.server.camera.CameraServiceProxy$CameraUsageEvent $r20, $r30, r35, r37, r38;
        java.lang.Throwable $r32;
        java.lang.StringBuilder r39, r42;
        android.media.AudioManager r40;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        r33 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        r34 := @parameter3: java.lang.String;

        i5 := @parameter4: int;

        r1 = r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean isEmpty()>();

     label02:
        if i3 == 0 goto label25;

        if i3 == 1 goto label14;

        if i3 == 2 goto label03;

        if i3 == 3 goto label03;

        goto label29;

     label03:
        $r22 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        $r23 = virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r33);

        r35 = (com.android.server.camera.CameraServiceProxy$CameraUsageEvent) $r23;

     label04:
        if r35 != null goto label05;

        goto label29;

     label05:
        virtualinvoke r35.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: void markCompleted()>();

        $r24 = r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory>;

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r35);

        $r25 = r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory>;

        $i2 = interfaceinvoke $r25.<java.util.List: int size()>();

        if $i2 <= 100 goto label06;

        virtualinvoke r0.<com.android.server.camera.CameraServiceProxy: void dumpUsageEvents()>();

     label06:
        i6 = 0;

     label07:
        z8 = 0;

     label08:
        $r36 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        $i7 = virtualinvoke $r36.<android.util.ArrayMap: int size()>();

        if i6 >= $i7 goto label11;

        $r28 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        $r29 = virtualinvoke $r28.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        $r30 = (com.android.server.camera.CameraServiceProxy$CameraUsageEvent) $r29;

        $r31 = $r30.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: java.lang.String mClientName>;

        $z6 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        if $z6 == 0 goto label10;

     label09:
        z8 = 1;

        goto label11;

     label10:
        i6 = i6 + 1;

        goto label07;

     label11:
        if z8 != 0 goto label29;

     label12:
        $r26 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r27 = (com.android.server.wm.WindowManagerInternal) $r26;

        virtualinvoke $r27.<com.android.server.wm.WindowManagerInternal: void removeNonHighRefreshRatePackage(java.lang.String)>(r34);

     label13:
        goto label29;

     label14:
        i8 = 0;

     label15:
        z9 = 0;

     label16:
        $r8 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        $i0 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

        if i8 >= $i0 goto label19;

        $r18 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i8);

        $r20 = (com.android.server.camera.CameraServiceProxy$CameraUsageEvent) $r19;

        $r21 = $r20.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: java.lang.String mClientName>;

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        if $z4 == 0 goto label18;

     label17:
        z9 = 1;

        goto label19;

     label18:
        i8 = i8 + 1;

        goto label15;

     label19:
        if z9 != 0 goto label21;

     label20:
        $r16 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r17 = (com.android.server.wm.WindowManagerInternal) $r16;

        virtualinvoke $r17.<com.android.server.wm.WindowManagerInternal: void addNonHighRefreshRatePackage(java.lang.String)>(r34);

     label21:
        r37 = new com.android.server.camera.CameraServiceProxy$CameraUsageEvent;

        specialinvoke r37.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: void <init>(int,java.lang.String,int)>(i4, r34, i5);

        $r9 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r37);

        r38 = (com.android.server.camera.CameraServiceProxy$CameraUsageEvent) $r10;

     label22:
        if r38 == null goto label29;

     label23:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was already marked as active");

        $r14 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("CameraService_proxy", $r14);

        virtualinvoke r38.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: void markCompleted()>();

        $r15 = r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory>;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(r38);

     label24:
        goto label29;

     label25:
        $r3 = virtualinvoke r0.<com.android.server.camera.CameraServiceProxy: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/media/AudioManager;");

        r40 = (android.media.AudioManager) $r4;

     label26:
        if r40 == null goto label29;

        if i4 != 0 goto label27;

        r41 = "back";

        goto label28;

     label27:
        r41 = "front";

     label28:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cameraFacing=");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r7 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r40.<android.media.AudioManager: void setParameters(java.lang.String)>($r7);

     label29:
        $r43 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        z2 = virtualinvoke $r43.<android.util.ArrayMap: boolean isEmpty()>();

        $z10 = r0.<com.android.server.camera.CameraServiceProxy: boolean mNotifyNfc>;

        if $z10 == 0 goto label32;

     label30:
        if z0 == z2 goto label32;

     label31:
        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void notifyNfcService(boolean)>(z2);

     label32:
        exitmonitor r1;

     label33:
        return;

     label34:
        $r32 := @caughtexception;

     label35:
        exitmonitor r1;

     label36:
        throw $r32;

        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label03 to label04 with label34;
        catch java.lang.Throwable from label05 to label06 with label34;
        catch java.lang.Throwable from label08 to label09 with label34;
        catch java.lang.Throwable from label12 to label13 with label34;
        catch java.lang.Throwable from label16 to label17 with label34;
        catch java.lang.Throwable from label20 to label21 with label34;
        catch java.lang.Throwable from label21 to label22 with label34;
        catch java.lang.Throwable from label23 to label24 with label34;
        catch java.lang.Throwable from label25 to label26 with label34;
        catch java.lang.Throwable from label28 to label29 with label34;
        catch java.lang.Throwable from label29 to label30 with label34;
        catch java.lang.Throwable from label31 to label32 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.lang.Throwable from label35 to label36 with label34;
    }

    public void binderDied()
    {
        com.android.server.camera.CameraServiceProxy r0;
        java.lang.Object r1;
        boolean z0, $z1;
        android.util.ArrayMap $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        r1 = r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.camera.CameraServiceProxy: android.hardware.ICameraService mCameraServiceRaw> = null;

        $r3 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean isEmpty()>();

        $r4 = r0.<com.android.server.camera.CameraServiceProxy: android.util.ArrayMap mActiveCameraUsage>;

        virtualinvoke $r4.<android.util.ArrayMap: void clear()>();

        $z1 = r0.<com.android.server.camera.CameraServiceProxy: boolean mNotifyNfc>;

        if $z1 == 0 goto label4;

     label2:
        if z0 != 0 goto label4;

     label3:
        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void notifyNfcService(boolean)>(1);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void dumpUsageEvents()
    {
        com.android.server.camera.CameraServiceProxy r0;
        long l0, $l3;
        java.util.List $r1, $r2, $r3, $r4;
        android.content.Context $r5;
        java.lang.Object $r6, r9;
        java.lang.Throwable $r7, $r8;
        java.util.Iterator r10;
        boolean $z0;
        com.android.server.camera.CameraServiceProxy$CameraUsageEvent r11;
        int i1, $i4;
        byte b2;
        android.metrics.LogMaker r12, $r13, $r14, $r15, $r17, r19;
        java.lang.Integer $r16;
        java.lang.String $r18;
        com.android.internal.logging.MetricsLogger $r20;
        java.util.concurrent.ScheduledThreadPoolExecutor r21;
        com.android.server.camera.CameraServiceProxy$EventWriterTask r22;
        java.util.ArrayList r23;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        r9 = r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock>;

        entermonitor r9;

     label01:
        $r1 = r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory>;

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r1);

        $r2 = r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory>;

        r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.android.server.camera.CameraServiceProxy$CameraUsageEvent) $r6;

        i1 = r11.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: int mCameraFacing>;

     label03:
        if i1 == 0 goto label06;

        if i1 == 1 goto label05;

        if i1 == 2 goto label04;

        goto label02;

     label04:
        b2 = 2;

        goto label07;

     label05:
        b2 = 1;

        goto label07;

     label06:
        b2 = 0;

     label07:
        r12 = new android.metrics.LogMaker;

        specialinvoke r12.<android.metrics.LogMaker: void <init>(int)>(1032);

        $r13 = virtualinvoke r12.<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>(4);

        $r14 = virtualinvoke $r13.<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>(b2);

        $l3 = virtualinvoke r11.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: long getDuration()>();

        $r15 = virtualinvoke $r14.<android.metrics.LogMaker: android.metrics.LogMaker setLatency(long)>($l3);

        $i4 = r11.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: int mAPILevel>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r17 = virtualinvoke $r15.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1322, $r16);

        $r18 = r11.<com.android.server.camera.CameraServiceProxy$CameraUsageEvent: java.lang.String mClientName>;

        r19 = virtualinvoke $r17.<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>($r18);

        $r20 = r0.<com.android.server.camera.CameraServiceProxy: com.android.internal.logging.MetricsLogger mLogger>;

        virtualinvoke $r20.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>(r19);

     label08:
        goto label02;

     label09:
        r21 = r0.<com.android.server.camera.CameraServiceProxy: java.util.concurrent.ScheduledThreadPoolExecutor mLogWriterService>;

        r22 = new com.android.server.camera.CameraServiceProxy$EventWriterTask;

        r23 = new java.util.ArrayList;

        $r3 = r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory>;

        specialinvoke r23.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        specialinvoke r22.<com.android.server.camera.CameraServiceProxy$EventWriterTask: void <init>(com.android.server.camera.CameraServiceProxy,java.util.ArrayList)>(r0, r23);

        virtualinvoke r21.<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>(r22);

        $r4 = r0.<com.android.server.camera.CameraServiceProxy: java.util.List mCameraUsageHistory>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        exitmonitor r9;

     label10:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label11:
        $r5 = r0.<com.android.server.camera.CameraServiceProxy: android.content.Context mContext>;

        staticinvoke <com.android.server.camera.CameraStatsJobService: void schedule(android.content.Context)>($r5);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label13:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

     label14:
        $r8 := @caughtexception;

     label15:
        exitmonitor r9;

     label16:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean handleMessage(android.os.Message)
    {
        com.android.server.camera.CameraServiceProxy r0;
        android.os.Message r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        r1 := @parameter0: android.os.Message;

        $i0 = r1.<android.os.Message: int what>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraServiceProxy error, invalid message: ");

        $i2 = r1.<android.os.Message: int what>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("CameraService_proxy", $r6);

        goto label2;

     label1:
        $i1 = r1.<android.os.Message: int arg1>;

        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void notifySwitchWithRetries(int)>($i1);

     label2:
        return 1;
    }

    public void onStart()
    {
        com.android.server.camera.CameraServiceProxy r0;
        android.content.Context $r1, $r5, $r8;
        java.lang.IllegalStateException $r2;
        android.content.IntentFilter $r3;
        android.content.BroadcastReceiver $r4;
        android.hardware.ICameraServiceProxy$Stub $r7;
        android.os.UserManager r9;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        $r1 = r0.<com.android.server.camera.CameraServiceProxy: android.content.Context mContext>;

        r9 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        r0.<com.android.server.camera.CameraServiceProxy: android.os.UserManager mUserManager> = r9;

        if r9 == null goto label1;

        $r3 = new android.content.IntentFilter;

        specialinvoke $r3.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke $r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke $r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_INFO_CHANGED");

        virtualinvoke $r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_ADDED");

        virtualinvoke $r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_REMOVED");

        $r5 = r0.<com.android.server.camera.CameraServiceProxy: android.content.Context mContext>;

        $r4 = r0.<com.android.server.camera.CameraServiceProxy: android.content.BroadcastReceiver mIntentReceiver>;

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, $r3);

        $r7 = r0.<com.android.server.camera.CameraServiceProxy: android.hardware.ICameraServiceProxy$Stub mCameraServiceProxy>;

        virtualinvoke r0.<com.android.server.camera.CameraServiceProxy: void publishBinderService(java.lang.String,android.os.IBinder)>("media.camera.proxy", $r7);

        virtualinvoke r0.<com.android.server.camera.CameraServiceProxy: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/camera/CameraServiceProxy;", r0);

        $r8 = r0.<com.android.server.camera.CameraServiceProxy: android.content.Context mContext>;

        staticinvoke <com.android.server.camera.CameraStatsJobService: void schedule(android.content.Context)>($r8);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("UserManagerService must start before CameraServiceProxy!");

        throw $r2;
    }

    public void onStartUser(int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int i0;
        java.lang.Object r1;
        java.util.Set $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.camera.CameraServiceProxy: java.util.Set mEnabledCameraUsers>;

        if $r3 != null goto label2;

        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void switchUserLocked(int)>(i0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void onSwitchUser(int)
    {
        com.android.server.camera.CameraServiceProxy r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.camera.CameraServiceProxy;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.camera.CameraServiceProxy: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.camera.CameraServiceProxy: void switchUserLocked(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
