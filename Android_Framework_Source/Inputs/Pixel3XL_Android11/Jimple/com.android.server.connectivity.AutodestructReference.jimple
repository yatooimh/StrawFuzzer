public class com.android.server.connectivity.AutodestructReference extends java.lang.Object
{
    private final java.util.concurrent.atomic.AtomicReference mHeld;

    public void <init>(java.lang.Object)
    {
        com.android.server.connectivity.AutodestructReference r0;
        java.lang.Object r1;
        java.lang.NullPointerException $r2;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: com.android.server.connectivity.AutodestructReference;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r1);

        r0.<com.android.server.connectivity.AutodestructReference: java.util.concurrent.atomic.AtomicReference mHeld> = $r3;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Autodestruct reference to null");

        throw $r2;
    }

    public java.lang.Object getAndDestroy()
    {
        com.android.server.connectivity.AutodestructReference r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: com.android.server.connectivity.AutodestructReference;

        $r2 = r0.<com.android.server.connectivity.AutodestructReference: java.util.concurrent.atomic.AtomicReference mHeld>;

        r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Already autodestructed");

        throw $r3;
    }
}
