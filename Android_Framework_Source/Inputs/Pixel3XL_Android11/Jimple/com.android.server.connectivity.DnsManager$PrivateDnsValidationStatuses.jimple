class com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses extends java.lang.Object
{
    private java.util.Map mValidationMap;

    private void <init>()
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap> = $r1;

        return;
    }

    void <init>(com.android.server.connectivity.DnsManager$1)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        com.android.server.connectivity.DnsManager$1 r1;

        r0 := @this: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        r1 := @parameter0: com.android.server.connectivity.DnsManager$1;

        specialinvoke r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: void <init>()>();

        return;
    }

    static boolean access$000(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        $z0 = specialinvoke r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: boolean hasValidatedServer()>();

        return $z0;
    }

    static android.net.LinkProperties access$100(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses, android.net.LinkProperties)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        android.net.LinkProperties r1, $r2;

        r0 := @parameter0: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        r1 := @parameter1: android.net.LinkProperties;

        $r2 = specialinvoke r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: android.net.LinkProperties fillInValidatedPrivateDns(android.net.LinkProperties)>(r1);

        return $r2;
    }

    static void access$200(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses, com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate r1;

        r0 := @parameter0: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        r1 := @parameter1: com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate;

        specialinvoke r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: void updateStatus(com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)>(r1);

        return;
    }

    static void access$400(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses, java.lang.String[], java.lang.String)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        java.lang.String[] r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: void updateTrackedDnses(java.lang.String[],java.lang.String)>(r1, r2);

        return;
    }

    private android.net.LinkProperties fillInValidatedPrivateDns(android.net.LinkProperties)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        android.net.LinkProperties r1;
        java.util.List $r2;
        com.android.server.connectivity._$$Lambda$DnsManager$PrivateDnsValidationStatuses$_X4_M08nKysv_L4hDpqAsa4SBxI $r3;
        java.util.Map $r4;

        r0 := @this: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        virtualinvoke r1.<android.net.LinkProperties: void setValidatedPrivateDnsServers(java.util.Collection)>($r2);

        $r4 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $r3 = new com.android.server.connectivity._$$Lambda$DnsManager$PrivateDnsValidationStatuses$_X4_M08nKysv_L4hDpqAsa4SBxI;

        specialinvoke $r3.<com.android.server.connectivity._$$Lambda$DnsManager$PrivateDnsValidationStatuses$_X4_M08nKysv_L4hDpqAsa4SBxI: void <init>(android.net.LinkProperties)>(r1);

        interfaceinvoke $r4.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r3);

        return r1;
    }

    private boolean hasValidatedServer()
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        java.util.Iterator r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus $r5, $r6;

        r0 := @this: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        $r2 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus) $r4;

        $r5 = <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus SUCCEEDED>;

        if $r6 != $r5 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    static void lambda$fillInValidatedPrivateDns$0(android.net.LinkProperties, android.util.Pair, com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus)
    {
        android.net.LinkProperties r0;
        android.util.Pair r1;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus r2, $r3;
        java.lang.Object $r4;
        java.net.InetAddress $r5;

        r0 := @parameter0: android.net.LinkProperties;

        r1 := @parameter1: android.util.Pair;

        r2 := @parameter2: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus;

        $r3 = <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus SUCCEEDED>;

        if r2 != $r3 goto label1;

        $r4 = r1.<android.util.Pair: java.lang.Object second>;

        $r5 = (java.net.InetAddress) $r4;

        virtualinvoke r0.<android.net.LinkProperties: boolean addValidatedPrivateDnsServer(java.net.InetAddress)>($r5);

     label1:
        return;
    }

    private void updateStatus(com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate r1;
        android.util.Pair $r3;
        java.net.InetAddress $r4;
        java.lang.String $r5;
        java.util.Map $r6, $r8, $r11;
        boolean $z0, $z1;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus $r7, $r10;

        r0 := @this: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        r1 := @parameter0: com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate;

        $r3 = new android.util.Pair;

        $r5 = r1.<com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate: java.lang.String hostname>;

        $r4 = r1.<com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate: java.net.InetAddress ipAddress>;

        specialinvoke $r3.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r6 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = r1.<com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate: boolean validated>;

        if $z1 == 0 goto label2;

        $r11 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $r10 = <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus SUCCEEDED>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r10);

        goto label3;

     label2:
        $r8 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $r7 = <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus FAILED>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r7);

     label3:
        return;
    }

    private void updateTrackedDnses(java.lang.String[], java.lang.String)
    {
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r0;
        int i0, i1;
        java.lang.String r2, r17;
        java.util.HashSet $r3;
        java.util.Map $r4, $r7, $r9;
        java.util.Set $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r6, $r11, $r13;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus $r8;
        java.util.Map$Entry $r12;
        java.net.InetAddress $r14;
        java.lang.Throwable $r15;
        java.lang.String[] r16;
        android.util.Pair r18, r22;
        java.util.Iterator r20, r21;

        r0 := @this: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        r16 := @parameter0: java.lang.String[];

        r17 := @parameter1: java.lang.String;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        i0 = lengthof r16;

        i1 = 0;

     label01:
        if i1 >= i0 goto label06;

        r2 = r16[i1];

     label02:
        r18 = new android.util.Pair;

        $r14 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r2);

        specialinvoke r18.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r17, $r14);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r18);

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

     label05:
        i1 = i1 + 1;

        goto label01;

     label06:
        $r4 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r20 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r11 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke $r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z3 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z3 != 0 goto label08;

        interfaceinvoke r20.<java.util.Iterator: void remove()>();

     label08:
        goto label07;

     label09:
        r21 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (android.util.Pair) $r6;

        $r7 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r22);

        if $z2 != 0 goto label11;

        $r9 = r0.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: java.util.Map mValidationMap>;

        $r8 = <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus: com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses$ValidationStatus IN_PROGRESS>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, $r8);

     label11:
        goto label10;

     label12:
        return;

        catch java.lang.IllegalArgumentException from label02 to label03 with label04;
    }
}
