public class com.android.server.connectivity.DnsManager extends java.lang.Object
{
    private static final int DNS_RESOLVER_DEFAULT_MAX_SAMPLES;
    private static final int DNS_RESOLVER_DEFAULT_MIN_SAMPLES;
    private static final int DNS_RESOLVER_DEFAULT_SAMPLE_VALIDITY_SECONDS;
    private static final int DNS_RESOLVER_DEFAULT_SUCCESS_THRESHOLD_PERCENT;
    private static final android.net.shared.PrivateDnsConfig PRIVATE_DNS_OFF;
    private static final java.lang.String TAG;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private final android.net.IDnsResolver mDnsResolver;
    private final java.util.Map mLinkPropertiesMap;
    private int mMaxSamples;
    private int mMinSamples;
    private int mNumDnsEntries;
    private final java.util.concurrent.ConcurrentHashMap mPrivateDnsMap;
    private final java.util.Map mPrivateDnsValidationMap;
    private int mSampleValidity;
    private int mSuccessThreshold;
    private final com.android.server.connectivity.MockableSystemProperties mSystemProperties;
    private final java.util.Map mTransportsMap;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        android.net.shared.PrivateDnsConfig $r2;

        <com.android.server.connectivity.DnsManager: int DNS_RESOLVER_DEFAULT_SUCCESS_THRESHOLD_PERCENT> = 25;

        <com.android.server.connectivity.DnsManager: int DNS_RESOLVER_DEFAULT_SAMPLE_VALIDITY_SECONDS> = 1800;

        <com.android.server.connectivity.DnsManager: int DNS_RESOLVER_DEFAULT_MIN_SAMPLES> = 8;

        <com.android.server.connectivity.DnsManager: int DNS_RESOLVER_DEFAULT_MAX_SAMPLES> = 64;

        $r0 = class "Lcom/android/server/connectivity/DnsManager;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.connectivity.DnsManager: java.lang.String TAG> = $r1;

        $r2 = new android.net.shared.PrivateDnsConfig;

        specialinvoke $r2.<android.net.shared.PrivateDnsConfig: void <init>()>();

        <com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig PRIVATE_DNS_OFF> = $r2;

        return;
    }

    public void <init>(android.content.Context, android.net.IDnsResolver, com.android.server.connectivity.MockableSystemProperties)
    {
        com.android.server.connectivity.DnsManager r0;
        android.content.Context r1;
        android.net.IDnsResolver r2;
        com.android.server.connectivity.MockableSystemProperties r3;
        android.content.ContentResolver $r4;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.util.HashMap $r6, $r7, $r8;

        r0 := @this: com.android.server.connectivity.DnsManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IDnsResolver;

        r3 := @parameter2: com.android.server.connectivity.MockableSystemProperties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.connectivity.DnsManager: android.content.Context mContext> = r1;

        $r4 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.connectivity.DnsManager: android.content.ContentResolver mContentResolver> = $r4;

        r0.<com.android.server.connectivity.DnsManager: android.net.IDnsResolver mDnsResolver> = r2;

        r0.<com.android.server.connectivity.DnsManager: com.android.server.connectivity.MockableSystemProperties mSystemProperties> = r3;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.server.connectivity.DnsManager: java.util.concurrent.ConcurrentHashMap mPrivateDnsMap> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.DnsManager: java.util.Map mLinkPropertiesMap> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.DnsManager: java.util.Map mTransportsMap> = $r8;

        return;
    }

    private static java.lang.String[] getDomainStrings(java.lang.String)
    {
        boolean $z0;
        java.lang.String r0;
        java.lang.String[] r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        r1 = newarray (java.lang.String)[0];

        goto label2;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

     label2:
        return r1;
    }

    private int getIntSetting(java.lang.String, int)
    {
        com.android.server.connectivity.DnsManager r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.connectivity.DnsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.connectivity.DnsManager: android.content.ContentResolver mContentResolver>;

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, r1, i0);

        return $i1;
    }

    public static android.net.shared.PrivateDnsConfig getPrivateDnsConfig(android.content.ContentResolver)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r4, $r5, $r6;
        boolean $z0, $z1, z2, $z3;
        android.net.shared.PrivateDnsConfig $r2, $r3;

        r0 := @parameter0: android.content.ContentResolver;

        r1 = staticinvoke <com.android.server.connectivity.DnsManager: java.lang.String getPrivateDnsMode(android.content.ContentResolver)>(r0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $r5 = "off";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r6 = "hostname";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label3;

        $r3 = new android.net.shared.PrivateDnsConfig;

        $r4 = staticinvoke <com.android.server.connectivity.DnsManager: java.lang.String getStringSetting(android.content.ContentResolver,java.lang.String)>(r0, "private_dns_specifier");

        specialinvoke $r3.<android.net.shared.PrivateDnsConfig: void <init>(java.lang.String,java.net.InetAddress[])>($r4, null);

        return $r3;

     label3:
        $r2 = new android.net.shared.PrivateDnsConfig;

        specialinvoke $r2.<android.net.shared.PrivateDnsConfig: void <init>(boolean)>(z2);

        return $r2;
    }

    private static java.lang.String getPrivateDnsMode(android.content.ContentResolver)
    {
        java.lang.String r0, r2, r3;
        boolean $z0, $z1;
        android.content.ContentResolver r1;

        r1 := @parameter0: android.content.ContentResolver;

        r0 = staticinvoke <com.android.server.connectivity.DnsManager: java.lang.String getStringSetting(android.content.ContentResolver,java.lang.String)>(r1, "private_dns_mode");

        r2 = r0;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        r2 = staticinvoke <com.android.server.connectivity.DnsManager: java.lang.String getStringSetting(android.content.ContentResolver,java.lang.String)>(r1, "private_dns_default_mode");

     label1:
        r3 = r2;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label2;

        r3 = "opportunistic";

     label2:
        return r3;
    }

    public static android.net.Uri[] getPrivateDnsSettingsUris()
    {
        android.net.Uri[] $r0;
        android.net.Uri $r1, $r2, $r3;

        $r0 = newarray (android.net.Uri)[3];

        $r1 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("private_dns_default_mode");

        $r0[0] = $r1;

        $r2 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("private_dns_mode");

        $r0[1] = $r2;

        $r3 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("private_dns_specifier");

        $r0[2] = $r3;

        return $r0;
    }

    private static java.lang.String getStringSetting(android.content.ContentResolver, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r0, r1);

        return $r2;
    }

    static boolean lambda$sendDnsConfigurationForNetwork$0(android.net.LinkProperties, java.net.InetAddress)
    {
        android.net.LinkProperties r0;
        java.net.InetAddress r1;
        boolean $z0;

        r0 := @parameter0: android.net.LinkProperties;

        r1 := @parameter1: java.net.InetAddress;

        $z0 = virtualinvoke r0.<android.net.LinkProperties: boolean isReachable(java.net.InetAddress)>(r1);

        return $z0;
    }

    private void setNetDnsProperty(int, java.lang.String)
    {
        com.android.server.connectivity.DnsManager r0;
        int i0;
        java.lang.StringBuilder $r1;
        com.android.server.connectivity.MockableSystemProperties $r4;
        java.lang.Exception $r5;
        java.lang.String $r6, r7, r9;

        r0 := @this: com.android.server.connectivity.DnsManager;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("net.dns");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = r0.<com.android.server.connectivity.DnsManager: com.android.server.connectivity.MockableSystemProperties mSystemProperties>;

        virtualinvoke $r4.<com.android.server.connectivity.MockableSystemProperties: void set(java.lang.String,java.lang.String)>(r9, r7);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = <com.android.server.connectivity.DnsManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Error setting unsupported net.dns property: ", $r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void updateParametersSettings()
    {
        com.android.server.connectivity.DnsManager r0;
        int i0, $i1, $i3, i6, i7, $i8, i9, $i10, $i11;
        java.lang.StringBuilder $r1, $r7, $r27;
        java.lang.String $r6, $r12, r22, r24, r26, $r29;

        r0 := @this: com.android.server.connectivity.DnsManager;

        i6 = specialinvoke r0.<com.android.server.connectivity.DnsManager: int getIntSetting(java.lang.String,int)>("dns_resolver_sample_validity_seconds", 1800);

        r0.<com.android.server.connectivity.DnsManager: int mSampleValidity> = i6;

        if i6 < 0 goto label1;

        if i6 <= 65535 goto label2;

     label1:
        r22 = <com.android.server.connectivity.DnsManager: java.lang.String TAG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid sampleValidity=");

        $i1 = r0.<com.android.server.connectivity.DnsManager: int mSampleValidity>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", using default=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1800);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r22, $r6);

        r0.<com.android.server.connectivity.DnsManager: int mSampleValidity> = 1800;

     label2:
        i7 = specialinvoke r0.<com.android.server.connectivity.DnsManager: int getIntSetting(java.lang.String,int)>("dns_resolver_success_threshold_percent", 25);

        r0.<com.android.server.connectivity.DnsManager: int mSuccessThreshold> = i7;

        if i7 < 0 goto label3;

        if i7 <= 100 goto label4;

     label3:
        r24 = <com.android.server.connectivity.DnsManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid successThreshold=");

        $i3 = r0.<com.android.server.connectivity.DnsManager: int mSuccessThreshold>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", using default=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(25);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r24, $r12);

        r0.<com.android.server.connectivity.DnsManager: int mSuccessThreshold> = 25;

     label4:
        $i8 = specialinvoke r0.<com.android.server.connectivity.DnsManager: int getIntSetting(java.lang.String,int)>("dns_resolver_min_samples", 8);

        r0.<com.android.server.connectivity.DnsManager: int mMinSamples> = $i8;

        i9 = specialinvoke r0.<com.android.server.connectivity.DnsManager: int getIntSetting(java.lang.String,int)>("dns_resolver_max_samples", 64);

        r0.<com.android.server.connectivity.DnsManager: int mMaxSamples> = i9;

        i0 = r0.<com.android.server.connectivity.DnsManager: int mMinSamples>;

        if i0 < 0 goto label5;

        if i0 > i9 goto label5;

        if i9 <= 64 goto label6;

     label5:
        r26 = <com.android.server.connectivity.DnsManager: java.lang.String TAG>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid sample count (min, max)=(");

        $i10 = r0.<com.android.server.connectivity.DnsManager: int mMinSamples>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i11 = r0.<com.android.server.connectivity.DnsManager: int mMaxSamples>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), using default=(");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(8);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(64);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r26, $r29);

        r0.<com.android.server.connectivity.DnsManager: int mMinSamples> = 8;

        r0.<com.android.server.connectivity.DnsManager: int mMaxSamples> = 64;

     label6:
        return;
    }

    public void flushVmDnsCache()
    {
        com.android.server.connectivity.DnsManager r0;
        long l0;
        android.content.Intent $r1;
        android.os.UserHandle $r4;
        android.content.Context $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.connectivity.DnsManager;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CLEAR_DNS_CACHE");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent addFlags(int)>(536870912);

        virtualinvoke $r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.connectivity.DnsManager: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r1, $r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.net.shared.PrivateDnsConfig getPrivateDnsConfig()
    {
        com.android.server.connectivity.DnsManager r0;
        android.content.ContentResolver $r1;
        android.net.shared.PrivateDnsConfig $r2;

        r0 := @this: com.android.server.connectivity.DnsManager;

        $r1 = r0.<com.android.server.connectivity.DnsManager: android.content.ContentResolver mContentResolver>;

        $r2 = staticinvoke <com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig getPrivateDnsConfig(android.content.ContentResolver)>($r1);

        return $r2;
    }

    public android.net.shared.PrivateDnsConfig getPrivateDnsConfig(android.net.Network)
    {
        com.android.server.connectivity.DnsManager r0;
        android.net.Network r1;
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Integer $r3;
        android.net.shared.PrivateDnsConfig $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: com.android.server.connectivity.DnsManager;

        r1 := @parameter0: android.net.Network;

        $r2 = r0.<com.android.server.connectivity.DnsManager: java.util.concurrent.ConcurrentHashMap mPrivateDnsMap>;

        $i0 = r1.<android.net.Network: int netId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = <com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig PRIVATE_DNS_OFF>;

        $r5 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (android.net.shared.PrivateDnsConfig) $r5;

        return $r6;
    }

    public void noteDnsServersForNetwork(int, android.net.LinkProperties)
    {
        com.android.server.connectivity.DnsManager r0;
        int i0;
        android.net.LinkProperties r1;
        java.util.Map $r2;
        java.lang.Integer $r3;

        r0 := @this: com.android.server.connectivity.DnsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.LinkProperties;

        $r2 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mLinkPropertiesMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        virtualinvoke r0.<com.android.server.connectivity.DnsManager: void sendDnsConfigurationForNetwork(int)>(i0);

        return;
    }

    public void removeNetwork(android.net.Network)
    {
        com.android.server.connectivity.DnsManager r0;
        android.net.Network r1;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Integer $r3, $r6, $r9, $r12;
        java.util.Map $r5, $r8, $r11;

        r0 := @this: com.android.server.connectivity.DnsManager;

        r1 := @parameter0: android.net.Network;

        $r2 = r0.<com.android.server.connectivity.DnsManager: java.util.concurrent.ConcurrentHashMap mPrivateDnsMap>;

        $i0 = r1.<android.net.Network: int netId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        $r5 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap>;

        $i1 = r1.<android.net.Network: int netId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        $r8 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mTransportsMap>;

        $i2 = r1.<android.net.Network: int netId>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

        $r11 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mLinkPropertiesMap>;

        $i3 = r1.<android.net.Network: int netId>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r12);

        return;
    }

    public void sendDnsConfigurationForNetwork(int)
    {
        com.android.server.connectivity.DnsManager r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.net.LinkProperties r1;
        android.net.shared.PrivateDnsConfig r2, $r12;
        boolean z0, z1, $z2;
        java.util.Map $r3, $r6, $r18, $r39, $r41, $r47;
        java.lang.Integer $r4, $r7, $r11, $r19, $r23, $r28, $r29, $r30, $r31, $r32, $r33, $r40, $r42, $r48;
        java.lang.Object $r5, $r8, $r13, $r43, $r56;
        android.net.ResolverParamsParcel $r9;
        java.util.concurrent.ConcurrentHashMap $r10;
        java.util.List $r14;
        java.lang.String[] $r15, $r17, $r24, $r26, $r35, $r45, r66;
        java.lang.String $r16, $r22, $r25, $r27, $r34, $r36, $r37, $r44, $r62, r65, r69;
        java.lang.Object[] $r21;
        android.net.IDnsResolver $r38;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses $r46, $r49;
        java.net.InetAddress[] $r51;
        java.util.stream.Stream $r52, $r54;
        com.android.server.connectivity._$$Lambda$DnsManager$jYmx1cOqMCeciv0YLC5U_520CaU $r53;
        java.util.stream.Collector $r55;
        java.util.Collection $r57;
        java.lang.Exception $r58;
        java.lang.StringBuilder $r59;
        int[] r63;
        android.net.ResolverOptionsParcel $r67;

        r0 := @this: com.android.server.connectivity.DnsManager;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mLinkPropertiesMap>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r1 = (android.net.LinkProperties) $r5;

        $r6 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mTransportsMap>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r63 = (int[]) $r8;

        if r1 == null goto label13;

        if r63 != null goto label01;

        goto label13;

     label01:
        specialinvoke r0.<com.android.server.connectivity.DnsManager: void updateParametersSettings()>();

        $r9 = new android.net.ResolverParamsParcel;

        specialinvoke $r9.<android.net.ResolverParamsParcel: void <init>()>();

        $r10 = r0.<com.android.server.connectivity.DnsManager: java.util.concurrent.ConcurrentHashMap mPrivateDnsMap>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = <com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig PRIVATE_DNS_OFF>;

        $r13 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r11, $r12);

        r2 = (android.net.shared.PrivateDnsConfig) $r13;

        z0 = r2.<android.net.shared.PrivateDnsConfig: boolean useTls>;

        z1 = virtualinvoke r2.<android.net.shared.PrivateDnsConfig: boolean inStrictMode()>();

        $r9.<android.net.ResolverParamsParcel: int netId> = i0;

        $i1 = r0.<com.android.server.connectivity.DnsManager: int mSampleValidity>;

        $r9.<android.net.ResolverParamsParcel: int sampleValiditySeconds> = $i1;

        $i2 = r0.<com.android.server.connectivity.DnsManager: int mSuccessThreshold>;

        $r9.<android.net.ResolverParamsParcel: int successThreshold> = $i2;

        $i3 = r0.<com.android.server.connectivity.DnsManager: int mMinSamples>;

        $r9.<android.net.ResolverParamsParcel: int minSamples> = $i3;

        $i4 = r0.<com.android.server.connectivity.DnsManager: int mMaxSamples>;

        $r9.<android.net.ResolverParamsParcel: int maxSamples> = $i4;

        $r14 = virtualinvoke r1.<android.net.LinkProperties: java.util.List getDnsServers()>();

        $r15 = staticinvoke <android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)>($r14);

        $r9.<android.net.ResolverParamsParcel: java.lang.String[] servers> = $r15;

        $r16 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getDomains()>();

        $r17 = staticinvoke <com.android.server.connectivity.DnsManager: java.lang.String[] getDomainStrings(java.lang.String)>($r16);

        $r9.<android.net.ResolverParamsParcel: java.lang.String[] domains> = $r17;

        if z1 == 0 goto label02;

        r65 = r2.<android.net.shared.PrivateDnsConfig: java.lang.String hostname>;

        goto label03;

     label02:
        r65 = "";

     label03:
        $r9.<android.net.ResolverParamsParcel: java.lang.String tlsName> = r65;

        if z1 == 0 goto label04;

        $r51 = r2.<android.net.shared.PrivateDnsConfig: java.net.InetAddress[] ips>;

        $r52 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r51);

        $r53 = new com.android.server.connectivity._$$Lambda$DnsManager$jYmx1cOqMCeciv0YLC5U_520CaU;

        specialinvoke $r53.<com.android.server.connectivity._$$Lambda$DnsManager$jYmx1cOqMCeciv0YLC5U_520CaU: void <init>(android.net.LinkProperties)>(r1);

        $r54 = interfaceinvoke $r52.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r53);

        $r55 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r56 = interfaceinvoke $r54.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r55);

        $r57 = (java.util.Collection) $r56;

        r66 = staticinvoke <android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)>($r57);

        goto label06;

     label04:
        if z0 == 0 goto label05;

        r66 = $r9.<android.net.ResolverParamsParcel: java.lang.String[] servers>;

        goto label06;

     label05:
        r66 = newarray (java.lang.String)[0];

     label06:
        $r9.<android.net.ResolverParamsParcel: java.lang.String[] tlsServers> = r66;

        $r67 = new android.net.ResolverOptionsParcel;

        specialinvoke $r67.<android.net.ResolverOptionsParcel: void <init>()>();

        $r9.<android.net.ResolverParamsParcel: android.net.ResolverOptionsParcel resolverOptions> = $r67;

        $r9.<android.net.ResolverParamsParcel: int[] transportTypes> = r63;

        if z0 == 0 goto label08;

        $r39 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap>;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r39.<java.util.Map: boolean containsKey(java.lang.Object)>($r40);

        if $z2 != 0 goto label07;

        $r47 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap>;

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r49 = new com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses;

        specialinvoke $r49.<com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: void <init>(com.android.server.connectivity.DnsManager$1)>(null);

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r49);

     label07:
        $r41 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r43 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>($r42);

        $r46 = (com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses) $r43;

        $r45 = $r9.<android.net.ResolverParamsParcel: java.lang.String[] tlsServers>;

        $r44 = $r9.<android.net.ResolverParamsParcel: java.lang.String tlsName>;

        staticinvoke <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: void access$400(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses,java.lang.String[],java.lang.String)>($r46, $r45, $r44);

        goto label09;

     label08:
        $r18 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r19);

     label09:
        $r22 = <com.android.server.connectivity.DnsManager: java.lang.String TAG>;

        $r21 = newarray (java.lang.Object)[11];

        $i5 = $r9.<android.net.ResolverParamsParcel: int netId>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r21[0] = $r23;

        $r24 = $r9.<android.net.ResolverParamsParcel: java.lang.String[] servers>;

        $r25 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r24);

        $r21[1] = $r25;

        $r26 = $r9.<android.net.ResolverParamsParcel: java.lang.String[] domains>;

        $r27 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r26);

        $r21[2] = $r27;

        $i6 = $r9.<android.net.ResolverParamsParcel: int sampleValiditySeconds>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r21[3] = $r28;

        $i7 = $r9.<android.net.ResolverParamsParcel: int successThreshold>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r21[4] = $r29;

        $i8 = $r9.<android.net.ResolverParamsParcel: int minSamples>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r21[5] = $r30;

        $i9 = $r9.<android.net.ResolverParamsParcel: int maxSamples>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r21[6] = $r31;

        $i10 = $r9.<android.net.ResolverParamsParcel: int baseTimeoutMsec>;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r21[7] = $r32;

        $i11 = $r9.<android.net.ResolverParamsParcel: int retryCount>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r21[8] = $r33;

        $r34 = $r9.<android.net.ResolverParamsParcel: java.lang.String tlsName>;

        $r21[9] = $r34;

        $r35 = $r9.<android.net.ResolverParamsParcel: java.lang.String[] tlsServers>;

        $r36 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r35);

        $r21[10] = $r36;

        $r37 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("sendDnsConfigurationForNetwork(%d, %s, %s, %d, %d, %d, %d, %d, %d, %s, %s)", $r21);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r22, $r37);

     label10:
        $r38 = r0.<com.android.server.connectivity.DnsManager: android.net.IDnsResolver mDnsResolver>;

        interfaceinvoke $r38.<android.net.IDnsResolver: void setResolverConfiguration(android.net.ResolverParamsParcel)>($r9);

     label11:
        return;

     label12:
        $r58 := @caughtexception;

        r69 = <com.android.server.connectivity.DnsManager: java.lang.String TAG>;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error setting DNS configuration: ");

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r58);

        $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r69, $r62);

        return;

     label13:
        return;

        catch android.os.RemoteException from label10 to label11 with label12;
        catch android.os.ServiceSpecificException from label10 to label11 with label12;
    }

    public void setDefaultDnsSystemProperties(java.util.Collection)
    {
        com.android.server.connectivity.DnsManager r0;
        java.util.Iterator r1;
        boolean $z0;
        int $i0, i1, i2;
        java.lang.Object $r2;
        java.lang.String $r3;
        java.util.Collection r4;
        java.net.InetAddress r5;

        r0 := @this: com.android.server.connectivity.DnsManager;

        r4 := @parameter0: java.util.Collection;

        i1 = 0;

        r1 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.net.InetAddress) $r2;

        i1 = i1 + 1;

        $r3 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostAddress()>();

        specialinvoke r0.<com.android.server.connectivity.DnsManager: void setNetDnsProperty(int,java.lang.String)>(i1, $r3);

        goto label1;

     label2:
        i2 = i1 + 1;

     label3:
        $i0 = r0.<com.android.server.connectivity.DnsManager: int mNumDnsEntries>;

        if i2 > $i0 goto label4;

        specialinvoke r0.<com.android.server.connectivity.DnsManager: void setNetDnsProperty(int,java.lang.String)>(i2, "");

        i2 = i2 + 1;

        goto label3;

     label4:
        r0.<com.android.server.connectivity.DnsManager: int mNumDnsEntries> = i1;

        return;
    }

    public android.net.shared.PrivateDnsConfig updatePrivateDns(android.net.Network, android.net.shared.PrivateDnsConfig)
    {
        com.android.server.connectivity.DnsManager r0;
        android.net.shared.PrivateDnsConfig r1, r18;
        java.lang.String r2, $r10;
        java.lang.StringBuilder $r4;
        int $i1, $i2;
        java.util.concurrent.ConcurrentHashMap $r11, $r14;
        java.lang.Integer $r12, $r15;
        java.lang.Object $r13, $r16;
        android.net.Network r17;

        r0 := @this: com.android.server.connectivity.DnsManager;

        r17 := @parameter0: android.net.Network;

        r1 := @parameter1: android.net.shared.PrivateDnsConfig;

        r2 = <com.android.server.connectivity.DnsManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updatePrivateDns(");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r2, $r10);

        if r1 == null goto label1;

        $r14 = r0.<com.android.server.connectivity.DnsManager: java.util.concurrent.ConcurrentHashMap mPrivateDnsMap>;

        $i2 = r17.<android.net.Network: int netId>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r16 = virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r1);

        r18 = (android.net.shared.PrivateDnsConfig) $r16;

        goto label2;

     label1:
        $r11 = r0.<com.android.server.connectivity.DnsManager: java.util.concurrent.ConcurrentHashMap mPrivateDnsMap>;

        $i1 = r17.<android.net.Network: int netId>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r13 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r12);

        r18 = (android.net.shared.PrivateDnsConfig) $r13;

     label2:
        return r18;
    }

    public void updatePrivateDnsStatus(int, android.net.LinkProperties)
    {
        com.android.server.connectivity.DnsManager r0;
        android.net.LinkProperties r1;
        android.net.shared.PrivateDnsConfig r2, $r5;
        boolean z1, $z2, z3, z4, z5;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Integer $r4, $r10;
        java.lang.Object $r6, $r11;
        java.util.List $r7;
        java.util.Map $r9;
        int i0;
        java.lang.String r12;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r13;

        r0 := @this: com.android.server.connectivity.DnsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.LinkProperties;

        $r3 = r0.<com.android.server.connectivity.DnsManager: java.util.concurrent.ConcurrentHashMap mPrivateDnsMap>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = <com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig PRIVATE_DNS_OFF>;

        $r6 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r4, $r5);

        r2 = (android.net.shared.PrivateDnsConfig) $r6;

        z3 = r2.<android.net.shared.PrivateDnsConfig: boolean useTls>;

        r12 = null;

        if z3 == 0 goto label1;

        $r9 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r13 = (com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses) $r11;

        goto label2;

     label1:
        r13 = null;

     label2:
        if r13 == null goto label3;

        $z2 = staticinvoke <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: boolean access$000(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses)>(r13);

        if $z2 == 0 goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        z1 = virtualinvoke r2.<android.net.shared.PrivateDnsConfig: boolean inStrictMode()>();

        if z1 == 0 goto label5;

        r12 = r2.<android.net.shared.PrivateDnsConfig: java.lang.String hostname>;

     label5:
        z5 = 1;

        if z1 != 0 goto label7;

        if z4 == 0 goto label6;

        z5 = 1;

        goto label7;

     label6:
        z5 = 0;

     label7:
        virtualinvoke r1.<android.net.LinkProperties: void setUsePrivateDns(boolean)>(z5);

        virtualinvoke r1.<android.net.LinkProperties: void setPrivateDnsServerName(java.lang.String)>(r12);

        if z5 == 0 goto label8;

        if r13 == null goto label8;

        staticinvoke <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: android.net.LinkProperties access$100(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses,android.net.LinkProperties)>(r13, r1);

        goto label9;

     label8:
        $r7 = <java.util.Collections: java.util.List EMPTY_LIST>;

        virtualinvoke r1.<android.net.LinkProperties: void setValidatedPrivateDnsServers(java.util.Collection)>($r7);

     label9:
        return;
    }

    public void updatePrivateDnsValidation(com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)
    {
        com.android.server.connectivity.DnsManager r0;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate r1;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses r2;
        int $i0;
        java.util.Map $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.connectivity.DnsManager;

        r1 := @parameter0: com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate;

        $r3 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mPrivateDnsValidationMap>;

        $i0 = r1.<com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate: int netId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses) $r5;

        if r2 != null goto label1;

        return;

     label1:
        staticinvoke <com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses: void access$200(com.android.server.connectivity.DnsManager$PrivateDnsValidationStatuses,com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)>(r2, r1);

        return;
    }

    public void updateTransportsForNetwork(int, int[])
    {
        com.android.server.connectivity.DnsManager r0;
        int i0;
        int[] r1;
        java.util.Map $r2;
        java.lang.Integer $r3;

        r0 := @this: com.android.server.connectivity.DnsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        $r2 = r0.<com.android.server.connectivity.DnsManager: java.util.Map mTransportsMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        virtualinvoke r0.<com.android.server.connectivity.DnsManager: void sendDnsConfigurationForNetwork(int)>(i0);

        return;
    }
}
