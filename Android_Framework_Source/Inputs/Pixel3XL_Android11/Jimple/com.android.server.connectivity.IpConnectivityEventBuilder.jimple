public final class com.android.server.connectivity.IpConnectivityEventBuilder extends java.lang.Object
{
    private static final int[] IFNAME_LINKLAYERS;
    private static final java.lang.String[] IFNAME_PREFIXES;
    private static final int KNOWN_PREFIX;
    private static final int[] TRANSPORT_LINKLAYER_MAP;

    static void <clinit>()
    {
        java.lang.String[] r0;
        int[] r1, r2;

        <com.android.server.connectivity.IpConnectivityEventBuilder: int KNOWN_PREFIX> = 7;

        r1 = newarray (int)[8];

        <com.android.server.connectivity.IpConnectivityEventBuilder: int[] TRANSPORT_LINKLAYER_MAP> = r1;

        r1[0] = 2;

        r1[1] = 4;

        r1[2] = 1;

        r1[3] = 3;

        r1[4] = 0;

        r1[5] = 8;

        r1[6] = 9;

        r0 = newarray (java.lang.String)[7];

        <com.android.server.connectivity.IpConnectivityEventBuilder: java.lang.String[] IFNAME_PREFIXES> = r0;

        r2 = newarray (int)[7];

        <com.android.server.connectivity.IpConnectivityEventBuilder: int[] IFNAME_LINKLAYERS> = r2;

        r0[0] = "rmnet";

        r2[0] = 2;

        r0[1] = "wlan";

        r2[1] = 4;

        r0[2] = "bt-pan";

        r2[2] = 1;

        r0[3] = "p2p";

        r2[3] = 7;

        r0[4] = "aware";

        r2[4] = 8;

        r0[5] = "eth";

        r2[5] = 3;

        r0[6] = "wpan";

        r2[6] = 9;

        return;
    }

    private void <init>()
    {
        com.android.server.connectivity.IpConnectivityEventBuilder r0;

        r0 := @this: com.android.server.connectivity.IpConnectivityEventBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent buildEvent(int, long, java.lang.String)
    {
        int i0;
        long l1;
        java.lang.String r0;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent $r2;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r0 := @parameter2: java.lang.String;

        $r2 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        specialinvoke $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: void <init>()>();

        $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: int networkId> = i0;

        $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: long transports> = l1;

        if r0 == null goto label1;

        $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: java.lang.String ifName> = r0;

     label1:
        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void inferLinkLayer(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent)>($r2);

        return $r2;
    }

    private static int[] bytesToInts(byte[])
    {
        byte[] r0;
        int[] r1;
        int $i0, $i1, i4;
        byte $b2;
        short $s3;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $b2 = r0[i4];

        $s3 = $b2 & 255;

        r1[i4] = $s3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static int ifnameToLinkLayer(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.String[] $r1;
        boolean $z0;
        int[] $r3;
        int $i0, i1;

        r0 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        if i1 >= 7 goto label3;

        $r1 = <com.android.server.connectivity.IpConnectivityEventBuilder: java.lang.String[] IFNAME_PREFIXES>;

        $r2 = $r1[i1];

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $r3 = <com.android.server.connectivity.IpConnectivityEventBuilder: int[] IFNAME_LINKLAYERS>;

        $i0 = $r3[i1];

        return $i0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static void inferLinkLayer(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        long $l0, $l2;
        byte $b1;
        java.lang.String $r1, $r2;
        int i3;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        i3 = 0;

        $l0 = r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: long transports>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: long transports>;

        i3 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: int transportsToLinkLayer(long)>($l2);

        goto label2;

     label1:
        $r1 = r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: java.lang.String ifName>;

        if $r1 == null goto label2;

        $r2 = r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: java.lang.String ifName>;

        i3 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: int ifnameToLinkLayer(java.lang.String)>($r2);

     label2:
        if i3 != 0 goto label3;

        return;

     label3:
        r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: int linkLayer> = i3;

        r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: java.lang.String ifName> = "";

        return;
    }

    private static int ipSupportOf(android.net.metrics.DefaultNetworkEvent)
    {
        android.net.metrics.DefaultNetworkEvent r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: android.net.metrics.DefaultNetworkEvent;

        $z0 = r0.<android.net.metrics.DefaultNetworkEvent: boolean ipv4>;

        if $z0 == 0 goto label1;

        $z3 = r0.<android.net.metrics.DefaultNetworkEvent: boolean ipv6>;

        if $z3 == 0 goto label1;

        return 3;

     label1:
        $z1 = r0.<android.net.metrics.DefaultNetworkEvent: boolean ipv6>;

        if $z1 == 0 goto label2;

        return 2;

     label2:
        $z2 = r0.<android.net.metrics.DefaultNetworkEvent: boolean ipv4>;

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private static boolean isBitSet(int, int)
    {
        int i0, i1, $i2, $i3;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = 1;

        $i2 = 1 << i1;

        $i3 = $i2 & i0;

        if $i3 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static byte[] serialize(int, java.util.List) throws java.io.IOException
    {
        int i0, $i1, $i2;
        java.util.List r0;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog $r2;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent[] $r3, $r5, $r6;
        java.lang.Object[] $r4;
        byte[] $r7;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        $r2 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog;

        specialinvoke $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog: void <init>()>();

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $r3 = newarray (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent)[$i1];

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent[]) $r4;

        $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent[] events> = $r5;

        $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog: int droppedEvents> = i0;

        $r6 = $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent[] events>;

        $i2 = lengthof $r6;

        if $i2 > 0 goto label1;

        if i0 <= 0 goto label2;

     label1:
        $r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog: int version> = 2;

     label2:
        $r7 = staticinvoke <com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog: byte[] toByteArray(com.android.framework.protobuf.nano.MessageNano)>($r2);

        return $r7;
    }

    private static void setApfProgramEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.ApfProgramEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.ApfProgramEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent $r3;
        long $l0, $l1;
        int $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.ApfProgramEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: void <init>()>();

        $l0 = r1.<android.net.metrics.ApfProgramEvent: long lifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: long lifetime> = $l0;

        $l1 = r1.<android.net.metrics.ApfProgramEvent: long actualLifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: long effectiveLifetime> = $l1;

        $i2 = r1.<android.net.metrics.ApfProgramEvent: int filteredRas>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: int filteredRas> = $i2;

        $i3 = r1.<android.net.metrics.ApfProgramEvent: int currentRas>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: int currentRas> = $i3;

        $i4 = r1.<android.net.metrics.ApfProgramEvent: int programLength>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: int programLength> = $i4;

        $i5 = r1.<android.net.metrics.ApfProgramEvent: int flags>;

        $z0 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: boolean isBitSet(int,int)>($i5, 0);

        if $z0 == 0 goto label1;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: boolean dropMulticast> = 1;

     label1:
        $i6 = r1.<android.net.metrics.ApfProgramEvent: int flags>;

        $z1 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: boolean isBitSet(int,int)>($i6, 1);

        if $z1 == 0 goto label2;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent: boolean hasIpv4Addr> = 1;

     label2:
        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setApfProgramEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfProgramEvent)>($r3);

        return;
    }

    private static void setApfStats(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.ApfStats)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.ApfStats r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics $r3;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.ApfStats;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: void <init>()>();

        $l0 = r1.<android.net.metrics.ApfStats: long durationMs>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: long durationMs> = $l0;

        $i1 = r1.<android.net.metrics.ApfStats: int receivedRas>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int receivedRas> = $i1;

        $i2 = r1.<android.net.metrics.ApfStats: int matchingRas>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int matchingRas> = $i2;

        $i3 = r1.<android.net.metrics.ApfStats: int droppedRas>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int droppedRas> = $i3;

        $i4 = r1.<android.net.metrics.ApfStats: int zeroLifetimeRas>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int zeroLifetimeRas> = $i4;

        $i5 = r1.<android.net.metrics.ApfStats: int parseErrors>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int parseErrors> = $i5;

        $i6 = r1.<android.net.metrics.ApfStats: int programUpdates>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int programUpdates> = $i6;

        $i7 = r1.<android.net.metrics.ApfStats: int programUpdatesAll>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int programUpdatesAll> = $i7;

        $i8 = r1.<android.net.metrics.ApfStats: int programUpdatesAllowingMulticast>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int programUpdatesAllowingMulticast> = $i8;

        $i9 = r1.<android.net.metrics.ApfStats: int maxProgramSize>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: int maxProgramSize> = $i9;

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setApfStatistics(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics)>($r3);

        return;
    }

    private static void setDhcpClientEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.DhcpClientEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.DhcpClientEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.DhcpClientEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent: void <init>()>();

        $r4 = r1.<android.net.metrics.DhcpClientEvent: java.lang.String msg>;

        virtualinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent setStateTransition(java.lang.String)>($r4);

        $i0 = r1.<android.net.metrics.DhcpClientEvent: int durationMs>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent: int durationMs> = $i0;

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setDhcpEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent)>($r3);

        return;
    }

    private static void setDhcpErrorEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.DhcpErrorEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.DhcpErrorEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent $r3;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.DhcpErrorEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent: void <init>()>();

        $i0 = r1.<android.net.metrics.DhcpErrorEvent: int errorCode>;

        virtualinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent setErrorCode(int)>($i0);

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setDhcpEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DHCPEvent)>($r3);

        return;
    }

    private static boolean setEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.os.Parcelable)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.os.Parcelable r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.net.metrics.RaEvent $r2;
        android.net.metrics.ApfStats $r3;
        android.net.metrics.ApfProgramEvent $r4;
        android.net.metrics.ValidationProbeEvent $r5;
        android.net.metrics.NetworkEvent $r6;
        android.net.metrics.IpReachabilityEvent $r7;
        android.net.metrics.IpManagerEvent $r8;
        android.net.metrics.DhcpClientEvent $r9;
        android.net.metrics.DhcpErrorEvent $r10;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.os.Parcelable;

        $z0 = r1 instanceof android.net.metrics.DhcpErrorEvent;

        if $z0 == 0 goto label1;

        $r10 = (android.net.metrics.DhcpErrorEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setDhcpErrorEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.DhcpErrorEvent)>(r0, $r10);

        return 1;

     label1:
        $z1 = r1 instanceof android.net.metrics.DhcpClientEvent;

        if $z1 == 0 goto label2;

        $r9 = (android.net.metrics.DhcpClientEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setDhcpClientEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.DhcpClientEvent)>(r0, $r9);

        return 1;

     label2:
        $z2 = r1 instanceof android.net.metrics.IpManagerEvent;

        if $z2 == 0 goto label3;

        $r8 = (android.net.metrics.IpManagerEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setIpManagerEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.IpManagerEvent)>(r0, $r8);

        return 1;

     label3:
        $z3 = r1 instanceof android.net.metrics.IpReachabilityEvent;

        if $z3 == 0 goto label4;

        $r7 = (android.net.metrics.IpReachabilityEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setIpReachabilityEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.IpReachabilityEvent)>(r0, $r7);

        return 1;

     label4:
        $z4 = r1 instanceof android.net.metrics.NetworkEvent;

        if $z4 == 0 goto label5;

        $r6 = (android.net.metrics.NetworkEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.NetworkEvent)>(r0, $r6);

        return 1;

     label5:
        $z5 = r1 instanceof android.net.metrics.ValidationProbeEvent;

        if $z5 == 0 goto label6;

        $r5 = (android.net.metrics.ValidationProbeEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setValidationProbeEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.ValidationProbeEvent)>(r0, $r5);

        return 1;

     label6:
        $z6 = r1 instanceof android.net.metrics.ApfProgramEvent;

        if $z6 == 0 goto label7;

        $r4 = (android.net.metrics.ApfProgramEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setApfProgramEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.ApfProgramEvent)>(r0, $r4);

        return 1;

     label7:
        $z7 = r1 instanceof android.net.metrics.ApfStats;

        if $z7 == 0 goto label8;

        $r3 = (android.net.metrics.ApfStats) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setApfStats(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.ApfStats)>(r0, $r3);

        return 1;

     label8:
        $z8 = r1 instanceof android.net.metrics.RaEvent;

        if $z8 == 0 goto label9;

        $r2 = (android.net.metrics.RaEvent) r1;

        staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: void setRaEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.net.metrics.RaEvent)>(r0, $r2);

        return 1;

     label9:
        return 0;
    }

    private static void setIpManagerEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.IpManagerEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.IpManagerEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpProvisioningEvent $r3;
        int $i0, $i2;
        long $l1;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.IpManagerEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpProvisioningEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpProvisioningEvent: void <init>()>();

        $i0 = r1.<android.net.metrics.IpManagerEvent: int eventType>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpProvisioningEvent: int eventType> = $i0;

        $l1 = r1.<android.net.metrics.IpManagerEvent: long durationMs>;

        $i2 = (int) $l1;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpProvisioningEvent: int latencyMs> = $i2;

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setIpProvisioningEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpProvisioningEvent)>($r3);

        return;
    }

    private static void setIpReachabilityEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.IpReachabilityEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.IpReachabilityEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpReachabilityEvent $r3;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.IpReachabilityEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpReachabilityEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpReachabilityEvent: void <init>()>();

        $i0 = r1.<android.net.metrics.IpReachabilityEvent: int eventType>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpReachabilityEvent: int eventType> = $i0;

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setIpReachabilityEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpReachabilityEvent)>($r3);

        return;
    }

    private static void setNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.NetworkEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.NetworkEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkEvent $r3;
        int $i0, $i2;
        long $l1;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.NetworkEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkEvent: void <init>()>();

        $i0 = r1.<android.net.metrics.NetworkEvent: int eventType>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkEvent: int eventType> = $i0;

        $l1 = r1.<android.net.metrics.NetworkEvent: long durationMs>;

        $i2 = (int) $l1;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkEvent: int latencyMs> = $i2;

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkEvent)>($r3);

        return;
    }

    private static void setRaEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.RaEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.RaEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent $r3;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.RaEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent: void <init>()>();

        $l0 = r1.<android.net.metrics.RaEvent: long routerLifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent: long routerLifetime> = $l0;

        $l1 = r1.<android.net.metrics.RaEvent: long prefixValidLifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent: long prefixValidLifetime> = $l1;

        $l2 = r1.<android.net.metrics.RaEvent: long prefixPreferredLifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent: long prefixPreferredLifetime> = $l2;

        $l3 = r1.<android.net.metrics.RaEvent: long routeInfoLifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent: long routeInfoLifetime> = $l3;

        $l4 = r1.<android.net.metrics.RaEvent: long rdnssLifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent: long rdnssLifetime> = $l4;

        $l5 = r1.<android.net.metrics.RaEvent: long dnsslLifetime>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent: long dnsslLifetime> = $l5;

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setRaEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$RaEvent)>($r3);

        return;
    }

    private static void setValidationProbeEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent, android.net.metrics.ValidationProbeEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r0;
        android.net.metrics.ValidationProbeEvent r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ValidationProbeEvent $r3;
        long $l0;
        int $i1, $i2, $i3;

        r0 := @parameter0: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        r1 := @parameter1: android.net.metrics.ValidationProbeEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ValidationProbeEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ValidationProbeEvent: void <init>()>();

        $l0 = r1.<android.net.metrics.ValidationProbeEvent: long durationMs>;

        $i1 = (int) $l0;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ValidationProbeEvent: int latencyMs> = $i1;

        $i2 = r1.<android.net.metrics.ValidationProbeEvent: int probeType>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ValidationProbeEvent: int probeType> = $i2;

        $i3 = r1.<android.net.metrics.ValidationProbeEvent: int returnCode>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ValidationProbeEvent: int probeResult> = $i3;

        virtualinvoke r0.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setValidationProbeEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ValidationProbeEvent)>($r3);

        return;
    }

    private static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] toPairArray(android.util.SparseIntArray)
    {
        android.util.SparseIntArray r0;
        int i0, $i1, $i2, i3;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] r1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair $r3;

        r0 := @parameter0: android.util.SparseIntArray;

        i0 = virtualinvoke r0.<android.util.SparseIntArray: int size()>();

        r1 = newarray (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair)[i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair: void <init>()>();

        $i1 = virtualinvoke r0.<android.util.SparseIntArray: int keyAt(int)>(i3);

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair: int key> = $i1;

        $i2 = virtualinvoke r0.<android.util.SparseIntArray: int valueAt(int)>(i3);

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair: int value> = $i2;

        r1[i3] = $r3;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent toProto(android.net.ConnectivityMetricsEvent)
    {
        android.net.ConnectivityMetricsEvent r0;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r1;
        java.lang.String $r2;
        long $l0, $l2;
        int $i1;
        android.os.Parcelable $r3;
        boolean $z0;

        r0 := @parameter0: android.net.ConnectivityMetricsEvent;

        $i1 = r0.<android.net.ConnectivityMetricsEvent: int netId>;

        $l0 = r0.<android.net.ConnectivityMetricsEvent: long transports>;

        $r2 = r0.<android.net.ConnectivityMetricsEvent: java.lang.String ifname>;

        r1 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent buildEvent(int,long,java.lang.String)>($i1, $l0, $r2);

        $l2 = r0.<android.net.ConnectivityMetricsEvent: long timestamp>;

        r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: long timeMs> = $l2;

        $r3 = r0.<android.net.ConnectivityMetricsEvent: android.os.Parcelable data>;

        $z0 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: boolean setEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent,android.os.Parcelable)>(r1, $r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        return r1;
    }

    public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent toProto(android.net.metrics.ConnectStats)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics $r1;
        int $i0, $i1, $i2, $i4;
        android.util.IntArray $r2;
        int[] $r3;
        android.util.SparseIntArray $r4;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] $r5;
        long $l3;
        android.net.metrics.ConnectStats r7;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r8;

        r7 := @parameter0: android.net.metrics.ConnectStats;

        $r1 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics;

        specialinvoke $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics: void <init>()>();

        $i0 = r7.<android.net.metrics.ConnectStats: int connectCount>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics: int connectCount> = $i0;

        $i1 = r7.<android.net.metrics.ConnectStats: int connectBlockingCount>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics: int connectBlockingCount> = $i1;

        $i2 = r7.<android.net.metrics.ConnectStats: int ipv6ConnectCount>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics: int ipv6AddrCount> = $i2;

        $r2 = r7.<android.net.metrics.ConnectStats: android.util.IntArray latencies>;

        $r3 = virtualinvoke $r2.<android.util.IntArray: int[] toArray()>();

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics: int[] latenciesMs> = $r3;

        $r4 = r7.<android.net.metrics.ConnectStats: android.util.SparseIntArray errnos>;

        $r5 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] toPairArray(android.util.SparseIntArray)>($r4);

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] errnosCounters> = $r5;

        $i4 = r7.<android.net.metrics.ConnectStats: int netId>;

        $l3 = r7.<android.net.metrics.ConnectStats: long transports>;

        r8 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent buildEvent(int,long,java.lang.String)>($i4, $l3, null);

        virtualinvoke r8.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setConnectStatistics(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics)>($r1);

        return r8;
    }

    public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent toProto(android.net.metrics.DefaultNetworkEvent)
    {
        android.net.metrics.DefaultNetworkEvent r0;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r2;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent $r3;
        int $i0, $i2, $i4, $i7, $i9, $i10, $i12, $i13;
        long $l1, $l3, $l5, $l6, $l8, $l11;

        r0 := @parameter0: android.net.metrics.DefaultNetworkEvent;

        $r3 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent;

        specialinvoke $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: void <init>()>();

        $i0 = r0.<android.net.metrics.DefaultNetworkEvent: int finalScore>;

        $l1 = (long) $i0;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: long finalScore> = $l1;

        $i2 = r0.<android.net.metrics.DefaultNetworkEvent: int initialScore>;

        $l3 = (long) $i2;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: long initialScore> = $l3;

        $i4 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: int ipSupportOf(android.net.metrics.DefaultNetworkEvent)>(r0);

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: int ipSupport> = $i4;

        $l5 = r0.<android.net.metrics.DefaultNetworkEvent: long durationMs>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: long defaultNetworkDurationMs> = $l5;

        $l6 = r0.<android.net.metrics.DefaultNetworkEvent: long validatedMs>;

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: long validationDurationMs> = $l6;

        $i7 = r0.<android.net.metrics.DefaultNetworkEvent: int previousTransports>;

        $l8 = (long) $i7;

        $i9 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: int transportsToLinkLayer(long)>($l8);

        $r3.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: int previousDefaultNetworkLinkLayer> = $i9;

        $i12 = r0.<android.net.metrics.DefaultNetworkEvent: int netId>;

        $i10 = r0.<android.net.metrics.DefaultNetworkEvent: int transports>;

        $l11 = (long) $i10;

        r2 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent buildEvent(int,long,java.lang.String)>($i12, $l11, null);

        $i13 = r0.<android.net.metrics.DefaultNetworkEvent: int transports>;

        if $i13 != 0 goto label1;

        r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: int linkLayer> = 5;

     label1:
        virtualinvoke r2.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setDefaultNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent)>($r3);

        return r2;
    }

    public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent toProto(android.net.metrics.DnsEvent)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch $r1;
        int $i0, $i2;
        byte[] $r2, $r4;
        int[] $r3, $r5, $r6;
        long $l1;
        android.net.metrics.DnsEvent r8;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r9;

        r8 := @parameter0: android.net.metrics.DnsEvent;

        $r1 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch;

        specialinvoke $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch: void <init>()>();

        $i0 = r8.<android.net.metrics.DnsEvent: int eventCount>;

        virtualinvoke r8.<android.net.metrics.DnsEvent: void resize(int)>($i0);

        $r2 = r8.<android.net.metrics.DnsEvent: byte[] eventTypes>;

        $r3 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: int[] bytesToInts(byte[])>($r2);

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch: int[] eventTypes> = $r3;

        $r4 = r8.<android.net.metrics.DnsEvent: byte[] returnCodes>;

        $r5 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: int[] bytesToInts(byte[])>($r4);

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch: int[] returnCodes> = $r5;

        $r6 = r8.<android.net.metrics.DnsEvent: int[] latenciesMs>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch: int[] latenciesMs> = $r6;

        $i2 = r8.<android.net.metrics.DnsEvent: int netId>;

        $l1 = r8.<android.net.metrics.DnsEvent: long transports>;

        r9 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent buildEvent(int,long,java.lang.String)>($i2, $l1, null);

        virtualinvoke r9.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setDnsLookupBatch(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch)>($r1);

        return r9;
    }

    public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent toProto(android.net.metrics.WakeupStats)
    {
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats $r1;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        android.util.SparseIntArray $r2, $r4;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] $r3, $r5;
        java.lang.String $r6;
        android.net.metrics.WakeupStats r8;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r9;

        r8 := @parameter0: android.net.metrics.WakeupStats;

        $r1 = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats;

        specialinvoke $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: void <init>()>();

        virtualinvoke r8.<android.net.metrics.WakeupStats: void updateDuration()>();

        $l0 = r8.<android.net.metrics.WakeupStats: long durationSec>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long durationSec> = $l0;

        $l1 = r8.<android.net.metrics.WakeupStats: long totalWakeups>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long totalWakeups> = $l1;

        $l2 = r8.<android.net.metrics.WakeupStats: long rootWakeups>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long rootWakeups> = $l2;

        $l3 = r8.<android.net.metrics.WakeupStats: long systemWakeups>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long systemWakeups> = $l3;

        $l4 = r8.<android.net.metrics.WakeupStats: long nonApplicationWakeups>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long nonApplicationWakeups> = $l4;

        $l5 = r8.<android.net.metrics.WakeupStats: long applicationWakeups>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long applicationWakeups> = $l5;

        $l6 = r8.<android.net.metrics.WakeupStats: long noUidWakeups>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long noUidWakeups> = $l6;

        $l7 = r8.<android.net.metrics.WakeupStats: long l2UnicastCount>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long l2UnicastCount> = $l7;

        $l8 = r8.<android.net.metrics.WakeupStats: long l2MulticastCount>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long l2MulticastCount> = $l8;

        $l9 = r8.<android.net.metrics.WakeupStats: long l2BroadcastCount>;

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: long l2BroadcastCount> = $l9;

        $r2 = r8.<android.net.metrics.WakeupStats: android.util.SparseIntArray ethertypes>;

        $r3 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] toPairArray(android.util.SparseIntArray)>($r2);

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] ethertypeCounts> = $r3;

        $r4 = r8.<android.net.metrics.WakeupStats: android.util.SparseIntArray ipNextHeaders>;

        $r5 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] toPairArray(android.util.SparseIntArray)>($r4);

        $r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] ipNextHeaderCounts> = $r5;

        $r6 = r8.<android.net.metrics.WakeupStats: java.lang.String iface>;

        r9 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent buildEvent(int,long,java.lang.String)>(0, 0L, $r6);

        virtualinvoke r9.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent setWakeupStats(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats)>($r1);

        return r9;
    }

    public static java.util.List toProto(java.util.List)
    {
        java.util.Iterator r1;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        android.net.ConnectivityMetricsEvent $r4;
        java.util.List r5;
        boolean $z1;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r6;

        r5 := @parameter0: java.util.List;

        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r1 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.net.ConnectivityMetricsEvent) $r3;

        r6 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent toProto(android.net.ConnectivityMetricsEvent)>($r4);

        if r6 != null goto label2;

        goto label1;

     label2:
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label1;

     label3:
        return $r2;
    }

    private static int transportToLinkLayer(int)
    {
        int i0, $i1, $i2;
        int[] r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        r0 = <com.android.server.connectivity.IpConnectivityEventBuilder: int[] TRANSPORT_LINKLAYER_MAP>;

        $i1 = lengthof r0;

        if i0 >= $i1 goto label1;

        $i2 = r0[i0];

        return $i2;

     label1:
        return 0;
    }

    private static int transportsToLinkLayer(long)
    {
        long l0;
        int i1, $i2, $i3;

        l0 := @parameter0: long;

        i1 = staticinvoke <java.lang.Long: int bitCount(long)>(l0);

        if i1 == 0 goto label2;

        if i1 == 1 goto label1;

        return 6;

     label1:
        $i2 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l0);

        $i3 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: int transportToLinkLayer(int)>($i2);

        return $i3;

     label2:
        return 0;
    }
}
