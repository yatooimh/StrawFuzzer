public final class com.android.server.connectivity.IpConnectivityMetrics extends com.android.server.SystemService
{
    private static final boolean DBG;
    private static final int DEFAULT_BUFFER_SIZE;
    private static final int DEFAULT_LOG_SIZE;
    private static final int ERROR_RATE_LIMITED;
    private static final int MAXIMUM_BUFFER_SIZE;
    private static final int MAXIMUM_CONNECT_LATENCY_RECORDS;
    private static final int NYC;
    private static final int NYC_MR1;
    private static final int NYC_MR2;
    private static final java.util.function.ToIntFunction READ_BUFFER_SIZE;
    private static final java.lang.String SERVICE_NAME;
    private static final java.lang.String TAG;
    public static final int VERSION;
    public final com.android.server.connectivity.IpConnectivityMetrics$Impl impl;
    private final android.util.ArrayMap mBuckets;
    private java.util.ArrayList mBuffer;
    private int mCapacity;
    private final java.util.function.ToIntFunction mCapacityGetter;
    final com.android.server.connectivity.DefaultNetworkMetrics mDefaultNetworkMetrics;
    private int mDropped;
    private final com.android.internal.util.RingBuffer mEventLog;
    private final java.lang.Object mLock;
    com.android.server.connectivity.NetdEventListenerService mNetdListener;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        com.android.server.connectivity.'-$$Lambda$IpConnectivityMetrics$S6t43cbsv7uQTbniMoTEFVB8Tfw' $r2;
        java.util.function.ToIntFunction r3;

        <com.android.server.connectivity.IpConnectivityMetrics: int VERSION> = 2;

        <com.android.server.connectivity.IpConnectivityMetrics: java.lang.String SERVICE_NAME> = "connmetrics";

        <com.android.server.connectivity.IpConnectivityMetrics: int NYC_MR2> = 2;

        <com.android.server.connectivity.IpConnectivityMetrics: int NYC_MR1> = 1;

        <com.android.server.connectivity.IpConnectivityMetrics: int NYC> = 0;

        <com.android.server.connectivity.IpConnectivityMetrics: int MAXIMUM_CONNECT_LATENCY_RECORDS> = 20000;

        <com.android.server.connectivity.IpConnectivityMetrics: int MAXIMUM_BUFFER_SIZE> = 20000;

        <com.android.server.connectivity.IpConnectivityMetrics: int ERROR_RATE_LIMITED> = -1;

        <com.android.server.connectivity.IpConnectivityMetrics: int DEFAULT_LOG_SIZE> = 500;

        <com.android.server.connectivity.IpConnectivityMetrics: int DEFAULT_BUFFER_SIZE> = 2000;

        <com.android.server.connectivity.IpConnectivityMetrics: boolean DBG> = 0;

        $r0 = class "Lcom/android/server/connectivity/IpConnectivityMetrics;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.connectivity.IpConnectivityMetrics: java.lang.String TAG> = $r1;

        $r2 = <com.android.server.connectivity._$$Lambda$IpConnectivityMetrics$S6t43cbsv7uQTbniMoTEFVB8Tfw: com.android.server.connectivity.'-$$Lambda$IpConnectivityMetrics$S6t43cbsv7uQTbniMoTEFVB8Tfw' INSTANCE>;

        r3 = (java.util.function.ToIntFunction) $r2;

        <com.android.server.connectivity.IpConnectivityMetrics: java.util.function.ToIntFunction READ_BUFFER_SIZE> = r3;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        android.content.Context r1;
        java.util.function.ToIntFunction $r2;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter0: android.content.Context;

        $r2 = <com.android.server.connectivity.IpConnectivityMetrics: java.util.function.ToIntFunction READ_BUFFER_SIZE>;

        specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void <init>(android.content.Context,java.util.function.ToIntFunction)>(r1, $r2);

        return;
    }

    public void <init>(android.content.Context, java.util.function.ToIntFunction)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        android.content.Context r1;
        java.util.function.ToIntFunction r2;
        java.lang.Object $r3;
        com.android.server.connectivity.IpConnectivityMetrics$Impl $r4;
        com.android.internal.util.RingBuffer $r5;
        android.util.ArrayMap $r6;
        com.android.server.connectivity.DefaultNetworkMetrics $r7;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.function.ToIntFunction;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.connectivity.IpConnectivityMetrics: java.lang.Object mLock> = $r3;

        $r4 = new com.android.server.connectivity.IpConnectivityMetrics$Impl;

        specialinvoke $r4.<com.android.server.connectivity.IpConnectivityMetrics$Impl: void <init>(com.android.server.connectivity.IpConnectivityMetrics)>(r0);

        r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.IpConnectivityMetrics$Impl impl> = $r4;

        $r5 = new com.android.internal.util.RingBuffer;

        specialinvoke $r5.<com.android.internal.util.RingBuffer: void <init>(java.lang.Class,int)>(class "Landroid/net/ConnectivityMetricsEvent;", 500);

        r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.internal.util.RingBuffer mEventLog> = $r5;

        $r6 = staticinvoke <com.android.server.connectivity.IpConnectivityMetrics: android.util.ArrayMap makeRateLimitingBuckets()>();

        r0.<com.android.server.connectivity.IpConnectivityMetrics: android.util.ArrayMap mBuckets> = $r6;

        $r7 = new com.android.server.connectivity.DefaultNetworkMetrics;

        specialinvoke $r7.<com.android.server.connectivity.DefaultNetworkMetrics: void <init>()>();

        r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.DefaultNetworkMetrics mDefaultNetworkMetrics> = $r7;

        r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.function.ToIntFunction mCapacityGetter> = r2;

        specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void initBuffer()>();

        return;
    }

    static int access$100(com.android.server.connectivity.IpConnectivityMetrics, android.net.ConnectivityMetricsEvent)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        android.net.ConnectivityMetricsEvent r1;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter1: android.net.ConnectivityMetricsEvent;

        $i0 = specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: int append(android.net.ConnectivityMetricsEvent)>(r1);

        return $i0;
    }

    static void access$200(com.android.server.connectivity.IpConnectivityMetrics, java.io.PrintWriter)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void cmdFlush(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$300(com.android.server.connectivity.IpConnectivityMetrics, java.io.PrintWriter)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void cmdListAsTextProto(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$400(com.android.server.connectivity.IpConnectivityMetrics, java.io.OutputStream)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.io.OutputStream r1;

        r0 := @parameter0: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void cmdListAsBinaryProto(java.io.OutputStream)>(r1);

        return;
    }

    static void access$500(com.android.server.connectivity.IpConnectivityMetrics, java.io.PrintWriter)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void cmdList(java.io.PrintWriter)>(r1);

        return;
    }

    private int append(android.net.ConnectivityMetricsEvent)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.util.RingBuffer $r2;
        java.util.ArrayList $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        android.net.ConnectivityMetricsEvent r6;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r6 := @parameter0: android.net.ConnectivityMetricsEvent;

        r1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.internal.util.RingBuffer mEventLog>;

        virtualinvoke $r2.<com.android.internal.util.RingBuffer: void append(java.lang.Object)>(r6);

        $i1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: int mCapacity>;

        $r3 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.ArrayList mBuffer>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i0 = $i1 - $i2;

     label02:
        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return i0;

     label05:
        $z0 = specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: boolean isRateLimited(android.net.ConnectivityMetricsEvent)>(r6);

        if $z0 == 0 goto label07;

        exitmonitor r1;

     label06:
        return -1;

     label07:
        if i0 != 0 goto label10;

     label08:
        $i4 = r0.<com.android.server.connectivity.IpConnectivityMetrics: int mDropped>;

        $i5 = $i4 + 1;

        r0.<com.android.server.connectivity.IpConnectivityMetrics: int mDropped> = $i5;

        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r4 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.ArrayList mBuffer>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        exitmonitor r1;

     label11:
        $i3 = i0 - 1;

        return $i3;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void cmdFlush(java.io.PrintWriter)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.io.PrintWriter r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: java.lang.String flushEncodedOutput()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r2);

        return;
    }

    private void cmdList(java.io.PrintWriter)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.io.PrintWriter r1;
        java.util.List $r2;
        boolean $z0;
        com.android.server.connectivity.DefaultNetworkMetrics $r3;
        java.lang.Object $r4;
        android.net.ConnectivityMetricsEvent $r5;
        java.lang.String $r6;
        java.util.Iterator r7;
        com.android.server.connectivity.NetdEventListenerService r8;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("metrics events:");

        $r2 = specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.List getEvents()>();

        r7 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.net.ConnectivityMetricsEvent) $r4;

        $r6 = virtualinvoke $r5.<android.net.ConnectivityMetricsEvent: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        r8 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.NetdEventListenerService mNetdListener>;

        if r8 == null goto label3;

        virtualinvoke r8.<com.android.server.connectivity.NetdEventListenerService: void list(java.io.PrintWriter)>(r1);

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        $r3 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.DefaultNetworkMetrics mDefaultNetworkMetrics>;

        virtualinvoke $r3.<com.android.server.connectivity.DefaultNetworkMetrics: void listEvents(java.io.PrintWriter)>(r1);

        return;
    }

    private void cmdListAsBinaryProto(java.io.OutputStream)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.lang.Object r1;
        int i0;
        java.util.List $r2;
        byte[] $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.String $r6;
        java.io.OutputStream r7;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r7 := @parameter0: java.io.OutputStream;

        r1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.connectivity.IpConnectivityMetrics: int mDropped>;

        exitmonitor r1;

     label2:
        $r2 = specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.List listEventsAsProtos()>();

        $r3 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: byte[] serialize(int,java.util.List)>(i0, $r2);

        virtualinvoke r7.<java.io.OutputStream: void write(byte[])>($r3);

        virtualinvoke r7.<java.io.OutputStream: void flush()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = <com.android.server.connectivity.IpConnectivityMetrics: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "could not serialize events", $r5);

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void cmdListAsTextProto(java.io.PrintWriter)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.io.PrintWriter r1;
        java.util.List $r2;
        com.android.server.connectivity._$$Lambda$IpConnectivityMetrics$VClycNGAy74aP_7CTaYoRpoYsy4 $r3;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.List listEventsAsProtos()>();

        $r3 = new com.android.server.connectivity._$$Lambda$IpConnectivityMetrics$VClycNGAy74aP_7CTaYoRpoYsy4;

        specialinvoke $r3.<com.android.server.connectivity._$$Lambda$IpConnectivityMetrics$VClycNGAy74aP_7CTaYoRpoYsy4: void <init>(java.io.PrintWriter)>(r1);

        interfaceinvoke $r2.<java.util.List: void forEach(java.util.function.Consumer)>($r3);

        return;
    }

    private java.lang.String flushEncodedOutput()
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        int i0;
        com.android.server.connectivity.DefaultNetworkMetrics $r1;
        java.lang.String $r2, $r4;
        java.lang.Throwable $r3, $r5;
        java.lang.Object r6;
        java.util.ArrayList r7;
        java.util.List r8;
        com.android.server.connectivity.NetdEventListenerService r9;
        byte[] r10;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r6 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.lang.Object mLock>;

        entermonitor r6;

     label1:
        r7 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.ArrayList mBuffer>;

        i0 = r0.<com.android.server.connectivity.IpConnectivityMetrics: int mDropped>;

        specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void initBuffer()>();

        exitmonitor r6;

     label2:
        r8 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: java.util.List toProto(java.util.List)>(r7);

        $r1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.DefaultNetworkMetrics mDefaultNetworkMetrics>;

        virtualinvoke $r1.<com.android.server.connectivity.DefaultNetworkMetrics: void flushEvents(java.util.List)>(r8);

        r9 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.NetdEventListenerService mNetdListener>;

        if r9 == null goto label3;

        virtualinvoke r9.<com.android.server.connectivity.NetdEventListenerService: void flushStatistics(java.util.List)>(r8);

     label3:
        r10 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: byte[] serialize(int,java.util.List)>(i0, r8);

     label4:
        $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>(r10, 0);

        return $r2;

     label5:
        $r3 := @caughtexception;

        $r4 = <com.android.server.connectivity.IpConnectivityMetrics: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "could not serialize events", $r3);

        return "";

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r6;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private java.util.List getEvents()
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.lang.Object r1;
        com.android.internal.util.RingBuffer $r2;
        java.lang.Object[] $r3;
        android.net.ConnectivityMetricsEvent[] $r4;
        java.lang.Throwable $r5;
        java.util.List r6;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.internal.util.RingBuffer mEventLog>;

        $r3 = virtualinvoke $r2.<com.android.internal.util.RingBuffer: java.lang.Object[] toArray()>();

        $r4 = (android.net.ConnectivityMetricsEvent[]) $r3;

        r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        exitmonitor r1;

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void initBuffer()
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r2;
        java.util.ArrayList r3;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.connectivity.IpConnectivityMetrics: int mDropped> = 0;

        $i0 = virtualinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: int bufferCapacity()>();

        r0.<com.android.server.connectivity.IpConnectivityMetrics: int mCapacity> = $i0;

        r3 = new java.util.ArrayList;

        $i1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: int mCapacity>;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.ArrayList mBuffer> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isRateLimited(android.net.ConnectivityMetricsEvent)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        android.os.Parcelable $r1;
        android.util.ArrayMap $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        boolean $z0, z1;
        android.net.ConnectivityMetricsEvent r5;
        com.android.internal.util.TokenBucket r6;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        r5 := @parameter0: android.net.ConnectivityMetricsEvent;

        $r2 = r0.<com.android.server.connectivity.IpConnectivityMetrics: android.util.ArrayMap mBuckets>;

        $r1 = r5.<android.net.ConnectivityMetricsEvent: android.os.Parcelable data>;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.internal.util.TokenBucket) $r4;

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<com.android.internal.util.TokenBucket: boolean get()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static void lambda$cmdListAsTextProto$0(java.io.PrintWriter, com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent)
    {
        java.io.PrintWriter r0;
        com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent r1;
        java.lang.String $r2;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent;

        $r2 = virtualinvoke r1.<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityEvent: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r2);

        return;
    }

    static int lambda$static$1(android.content.Context)
    {
        android.content.Context r0;
        int i0, $i1;
        android.content.ContentResolver $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "connectivity_metrics_buffer_size", 2000);

        if i0 > 0 goto label1;

        return 2000;

     label1:
        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 20000);

        return $i1;
    }

    private java.util.List listEventsAsProtos()
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.util.List r1, $r3, $r5, $r6;
        com.android.server.connectivity.NetdEventListenerService r2;
        com.android.server.connectivity.DefaultNetworkMetrics $r4;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        $r3 = specialinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.List getEvents()>();

        r1 = staticinvoke <com.android.server.connectivity.IpConnectivityEventBuilder: java.util.List toProto(java.util.List)>($r3);

        r2 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.NetdEventListenerService mNetdListener>;

        if r2 == null goto label1;

        $r6 = virtualinvoke r2.<com.android.server.connectivity.NetdEventListenerService: java.util.List listAsProtos()>();

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r6);

     label1:
        $r4 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.DefaultNetworkMetrics mDefaultNetworkMetrics>;

        $r5 = virtualinvoke $r4.<com.android.server.connectivity.DefaultNetworkMetrics: java.util.List listEventsAsProto()>();

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return r1;
    }

    private static android.util.ArrayMap makeRateLimitingBuckets()
    {
        android.util.ArrayMap $r1;
        com.android.internal.util.TokenBucket $r2;

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        $r2 = new com.android.internal.util.TokenBucket;

        specialinvoke $r2.<com.android.internal.util.TokenBucket: void <init>(int,int)>(60000, 50);

        virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Landroid/net/metrics/ApfProgramEvent;", $r2);

        return $r1;
    }

    public int bufferCapacity()
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        java.util.function.ToIntFunction $r1;
        android.content.Context $r2;
        int $i0;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        $r1 = r0.<com.android.server.connectivity.IpConnectivityMetrics: java.util.function.ToIntFunction mCapacityGetter>;

        $r2 = virtualinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: android.content.Context getContext()>();

        $i0 = interfaceinvoke $r1.<java.util.function.ToIntFunction: int applyAsInt(java.lang.Object)>($r2);

        return $i0;
    }

    public void onBootPhase(int)
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;
        int i0;
        com.android.server.connectivity.NetdEventListenerService $r1, $r4;
        android.content.Context $r2;
        com.android.server.connectivity.IpConnectivityMetrics$Impl $r3;
        com.android.server.connectivity.IpConnectivityMetrics$LoggerImpl $r5;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        i0 := @parameter0: int;

        if i0 != 500 goto label1;

        $r1 = new com.android.server.connectivity.NetdEventListenerService;

        $r2 = virtualinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: android.content.Context getContext()>();

        specialinvoke $r1.<com.android.server.connectivity.NetdEventListenerService: void <init>(android.content.Context)>($r2);

        r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.NetdEventListenerService mNetdListener> = $r1;

        $r3 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.IpConnectivityMetrics$Impl impl>;

        virtualinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void publishBinderService(java.lang.String,android.os.IBinder)>("connmetrics", $r3);

        $r4 = r0.<com.android.server.connectivity.IpConnectivityMetrics: com.android.server.connectivity.NetdEventListenerService mNetdListener>;

        virtualinvoke r0.<com.android.server.connectivity.IpConnectivityMetrics: void publishBinderService(java.lang.String,android.os.IBinder)>("netd_listener", $r4);

        $r5 = new com.android.server.connectivity.IpConnectivityMetrics$LoggerImpl;

        specialinvoke $r5.<com.android.server.connectivity.IpConnectivityMetrics$LoggerImpl: void <init>(com.android.server.connectivity.IpConnectivityMetrics,com.android.server.connectivity.IpConnectivityMetrics$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/connectivity/IpConnectivityMetrics$Logger;", $r5);

     label1:
        return;
    }

    public void onStart()
    {
        com.android.server.connectivity.IpConnectivityMetrics r0;

        r0 := @this: com.android.server.connectivity.IpConnectivityMetrics;

        return;
    }
}
