class com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker extends java.lang.Object
{
    private long mMultipathBudget;
    private android.net.NetworkCapabilities mNetworkCapabilities;
    private final android.net.NetworkTemplate mNetworkTemplate;
    private long mQuota;
    private final android.app.usage.NetworkStatsManager$UsageCallback mUsageCallback;
    final android.net.Network network;
    final java.lang.String subscriberId;
    final com.android.server.connectivity.MultipathPolicyTracker this$0;

    public void <init>(com.android.server.connectivity.MultipathPolicyTracker, android.net.Network, android.net.NetworkCapabilities)
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        com.android.server.connectivity.MultipathPolicyTracker r1;
        android.net.Network r2;
        android.net.NetworkSpecifier r3;
        int i0;
        android.net.NetworkCapabilities $r4, r22;
        boolean $z0;
        java.lang.IllegalStateException $r5, $r11, $r14;
        java.lang.Object[] $r6, $r12, $r15;
        java.lang.String $r7, $r13, $r17, $r18, r25;
        android.net.TelephonyNetworkSpecifier $r8;
        android.content.Context $r9;
        java.lang.Object $r10;
        java.lang.Integer $r16;
        android.net.NetworkTemplate $r19;
        java.lang.String[] $r20;
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker$1 $r21;
        android.telephony.TelephonyManager r23, r24;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        r1 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        r2 := @parameter1: android.net.Network;

        r22 := @parameter2: android.net.NetworkCapabilities;

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.Network network> = r2;

        $r4 = new android.net.NetworkCapabilities;

        specialinvoke $r4.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r22);

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.NetworkCapabilities mNetworkCapabilities> = $r4;

        r3 = virtualinvoke r22.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        $z0 = r3 instanceof android.net.TelephonyNetworkSpecifier;

        if $z0 == 0 goto label3;

        $r8 = (android.net.TelephonyNetworkSpecifier) r3;

        i0 = virtualinvoke $r8.<android.net.TelephonyNetworkSpecifier: int getSubscriptionId()>();

        $r9 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: android.content.Context access$100(com.android.server.connectivity.MultipathPolicyTracker)>(r1);

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r23 = (android.telephony.TelephonyManager) $r10;

        if r23 == null goto label2;

        r24 = virtualinvoke r23.<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>(i0);

        if r24 == null goto label1;

        $r18 = virtualinvoke r24.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: java.lang.String subscriberId> = $r18;

        r25 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: java.lang.String subscriberId>;

        $r19 = new android.net.NetworkTemplate;

        $r20 = newarray (java.lang.String)[1];

        $r20[0] = r25;

        specialinvoke $r19.<android.net.NetworkTemplate: void <init>(int,java.lang.String,java.lang.String[],java.lang.String,int,int,int,int)>(1, r25, $r20, null, -1, -1, 0, -1);

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.NetworkTemplate mNetworkTemplate> = $r19;

        $r21 = new com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker$1;

        specialinvoke $r21.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker$1: void <init>(com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker,com.android.server.connectivity.MultipathPolicyTracker,android.net.Network)>(r0, r1, r2);

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.app.usage.NetworkStatsManager$UsageCallback mUsageCallback> = $r21;

        virtualinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: void updateMultipathBudget()>();

        return;

     label1:
        $r14 = new java.lang.IllegalStateException;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t get TelephonyManager for subId %d", $r15);

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r14;

     label2:
        $r11 = new java.lang.IllegalStateException;

        $r12 = newarray (java.lang.Object)[0];

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Missing TelephonyManager", $r12);

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label3:
        $r5 = new java.lang.IllegalStateException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r2;

        $r6[1] = r22;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t get subId from mobile network %s (%s)", $r6);

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;
    }

    static long access$202(com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker, long)
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        long l0;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        l0 := @parameter1: long;

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mMultipathBudget> = l0;

        return l0;
    }

    private long getDailyNonDefaultDataUsage()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        java.time.ZonedDateTime r1, r2;
        com.android.server.connectivity.MultipathPolicyTracker $r3;
        java.time.Clock $r4;
        java.time.Instant $r5, $r8, $r9;
        java.time.ZoneId $r6;
        java.time.temporal.ChronoUnit $r7;
        long $l0, $l1, $l2;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        $r3 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: java.time.Clock access$300(com.android.server.connectivity.MultipathPolicyTracker)>($r3);

        $r5 = virtualinvoke $r4.<java.time.Clock: java.time.Instant instant()>();

        $r6 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();

        r1 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>($r5, $r6);

        $r7 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;

        r2 = virtualinvoke r1.<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>($r7);

        $r8 = virtualinvoke r2.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l0 = virtualinvoke $r8.<java.time.Instant: long toEpochMilli()>();

        $r9 = virtualinvoke r1.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l1 = virtualinvoke $r9.<java.time.Instant: long toEpochMilli()>();

        $l2 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long getNetworkTotalBytes(long,long)>($l0, $l1);

        return $l2;
    }

    private long getNetworkTotalBytes(long, long)
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        long l0, l2, l3;
        java.lang.String r2, $r11;
        java.lang.Object $r4;
        android.net.NetworkTemplate $r5;
        com.android.server.net.NetworkStatsManagerInternal $r6;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        l2 := @parameter0: long;

        l0 := @parameter1: long;

     label1:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/net/NetworkStatsManagerInternal;");

        $r6 = (com.android.server.net.NetworkStatsManagerInternal) $r4;

        $r5 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.NetworkTemplate mNetworkTemplate>;

        l3 = virtualinvoke $r6.<com.android.server.net.NetworkStatsManagerInternal: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>($r5, l2, l0);

     label2:
        return l3;

     label3:
        $r7 := @caughtexception;

        r2 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: java.lang.String access$400()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get data usage: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r2, $r11);

        return -1L;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private long getRemainingDailyBudget(long, android.util.Range)
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        android.util.Range r1;
        long l0, l1, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, l12, l13, l15;
        java.lang.Comparable $r2, $r5;
        java.time.ZonedDateTime $r3, $r6;
        java.time.Instant $r4, $r7;
        byte $b2;
        com.android.server.connectivity.MultipathPolicyTracker $r8;
        java.time.Clock $r9;
        java.util.concurrent.TimeUnit $r10;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        l12 := @parameter0: long;

        r1 := @parameter1: android.util.Range;

        $r2 = virtualinvoke r1.<android.util.Range: java.lang.Comparable getLower()>();

        $r3 = (java.time.ZonedDateTime) $r2;

        $r4 = virtualinvoke $r3.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l13 = virtualinvoke $r4.<java.time.Instant: long toEpochMilli()>();

        $r5 = virtualinvoke r1.<android.util.Range: java.lang.Comparable getUpper()>();

        $r6 = (java.time.ZonedDateTime) $r5;

        $r7 = virtualinvoke $r6.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l0 = virtualinvoke $r7.<java.time.Instant: long toEpochMilli()>();

        l1 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long getNetworkTotalBytes(long,long)>(l13, l0);

        $b2 = l1 cmp -1L;

        if $b2 != 0 goto label1;

        l15 = 0L;

        goto label2;

     label1:
        $l3 = l12 - l1;

        l15 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l3);

     label2:
        $r8 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0>;

        $r9 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: java.time.Clock access$300(com.android.server.connectivity.MultipathPolicyTracker)>($r8);

        $l4 = virtualinvoke $r9.<java.time.Clock: long millis()>();

        $l5 = l0 - $l4;

        $l6 = $l5 - 1L;

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l7 = virtualinvoke $r10.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        $l8 = $l6 / $l7;

        $l9 = $l8 + 1L;

        $l10 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l9);

        $l11 = l15 / $l10;

        return $l11;
    }

    private android.net.NetworkIdentity getTemplateMatchingNetworkIdentity(android.net.NetworkCapabilities)
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        android.net.NetworkCapabilities r1;
        android.net.NetworkIdentity $r2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r2 = new android.net.NetworkIdentity;

        $r3 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: java.lang.String subscriberId>;

        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        $z1 = $z0 ^ 1;

        $z2 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        $z3 = $z2 ^ 1;

        specialinvoke $r2.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean,boolean,boolean)>(0, 0, $r3, null, $z1, $z3, 0);

        return $r2;
    }

    private long getUserPolicyOpportunisticQuotaBytes()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        android.net.NetworkIdentity r1;
        android.net.NetworkPolicy[] r2;
        int i0, i8;
        android.net.NetworkPolicy r3;
        android.net.NetworkCapabilities $r4;
        com.android.server.connectivity.MultipathPolicyTracker $r5;
        android.net.NetworkPolicyManager $r6;
        byte $b1, $b3, $b4, $b5;
        long $l2, $l6, l7, l9, l10, l11;
        boolean $z0, $z1;
        android.net.NetworkTemplate $r7;
        java.util.Iterator $r8, $r14;
        java.lang.Object $r9, $r15;
        android.util.Range $r10, $r16;
        java.lang.Comparable $r11;
        java.time.ZonedDateTime $r12;
        java.time.Instant $r13;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        l7 = 9223372036854775807L;

        $r4 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.NetworkCapabilities mNetworkCapabilities>;

        r1 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.NetworkIdentity getTemplateMatchingNetworkIdentity(android.net.NetworkCapabilities)>($r4);

        $r5 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0>;

        $r6 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: android.net.NetworkPolicyManager access$500(com.android.server.connectivity.MultipathPolicyTracker)>($r5);

        r2 = virtualinvoke $r6.<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()>();

        i0 = lengthof r2;

        i8 = 0;

     label1:
        if i8 >= i0 goto label4;

        r3 = r2[i8];

        l9 = l7;

        $z0 = virtualinvoke r3.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z0 == 0 goto label3;

        l9 = l7;

        $r7 = r3.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z1 = virtualinvoke $r7.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>(r1);

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r3.<android.net.NetworkPolicy: java.util.Iterator cycleIterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.util.Range) $r9;

        $r11 = virtualinvoke $r10.<android.util.Range: java.lang.Comparable getLower()>();

        $r12 = (java.time.ZonedDateTime) $r11;

        $r13 = virtualinvoke $r12.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l10 = virtualinvoke $r13.<java.time.Instant: long toEpochMilli()>();

        l11 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: long access$600(android.net.NetworkPolicy,long)>(r3, l10);

        $b3 = l11 cmp -1L;

        if $b3 != 0 goto label2;

        l11 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: long access$700(android.net.NetworkPolicy,long)>(r3, l10);

        goto label2;

     label2:
        l9 = l7;

        $b4 = l11 cmp -1L;

        if $b4 == 0 goto label3;

        l9 = l7;

        $b5 = l11 cmp -1L;

        if $b5 == 0 goto label3;

        $r14 = virtualinvoke r3.<android.net.NetworkPolicy: java.util.Iterator cycleIterator()>();

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (android.util.Range) $r15;

        $l6 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long getRemainingDailyBudget(long,android.util.Range)>(l11, $r16);

        l9 = staticinvoke <java.lang.Math: long min(long,long)>(l7, $l6);

     label3:
        i8 = i8 + 1;

        l7 = l9;

        goto label1;

     label4:
        $b1 = l7 cmp 9223372036854775807L;

        if $b1 != 0 goto label5;

        return -1L;

     label5:
        $l2 = l7 / 20L;

        return $l2;
    }

    private boolean haveMultipathBudget()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        $l0 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mMultipathBudget>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void maybeUnregisterUsageCallback()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        boolean $z0;
        com.android.server.connectivity.MultipathPolicyTracker $r1;
        android.app.usage.NetworkStatsManager $r2;
        android.app.usage.NetworkStatsManager$UsageCallback $r3;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        $z0 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: boolean haveMultipathBudget()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0>;

        $r2 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: android.app.usage.NetworkStatsManager access$1000(com.android.server.connectivity.MultipathPolicyTracker)>($r1);

        $r3 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.app.usage.NetworkStatsManager$UsageCallback mUsageCallback>;

        virtualinvoke $r2.<android.app.usage.NetworkStatsManager: void unregisterUsageCallback(android.app.usage.NetworkStatsManager$UsageCallback)>($r3);

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mMultipathBudget> = 0L;

     label1:
        return;
    }

    private void registerUsageCallback(long)
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        long l0;
        com.android.server.connectivity.MultipathPolicyTracker $r1, $r3;
        android.app.usage.NetworkStatsManager $r2;
        android.net.NetworkTemplate $r4;
        android.app.usage.NetworkStatsManager$UsageCallback $r5;
        android.os.Handler $r6;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        l0 := @parameter0: long;

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: void maybeUnregisterUsageCallback()>();

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0>;

        $r2 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: android.app.usage.NetworkStatsManager access$1000(com.android.server.connectivity.MultipathPolicyTracker)>($r1);

        $r4 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.NetworkTemplate mNetworkTemplate>;

        $r5 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.app.usage.NetworkStatsManager$UsageCallback mUsageCallback>;

        $r3 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0>;

        $r6 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: android.os.Handler access$900(com.android.server.connectivity.MultipathPolicyTracker)>($r3);

        virtualinvoke $r2.<android.app.usage.NetworkStatsManager: void registerUsageCallback(android.net.NetworkTemplate,int,long,android.app.usage.NetworkStatsManager$UsageCallback,android.os.Handler)>($r4, 0, l0, $r5, $r6);

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mMultipathBudget> = l0;

        return;
    }

    public long getMultipathBudget()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        long $l0;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        $l0 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mMultipathBudget>;

        return $l0;
    }

    public int getMultipathPreference()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        $z0 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: boolean haveMultipathBudget()>();

        if $z0 == 0 goto label1;

        return 3;

     label1:
        return 0;
    }

    public long getQuota()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        long $l0;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        $l0 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mQuota>;

        return $l0;
    }

    public void setNetworkCapabilities(android.net.NetworkCapabilities)
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        android.net.NetworkCapabilities r1, $r2;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r2 = new android.net.NetworkCapabilities;

        specialinvoke $r2.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r1);

        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.NetworkCapabilities mNetworkCapabilities> = $r2;

        return;
    }

    void shutdown()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: void maybeUnregisterUsageCallback()>();

        return;
    }

    void updateMultipathBudget()
    {
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r0;
        long l0, $l4, $l5, $l7, l9, l10, l11, l12;
        java.lang.Object $r1;
        android.net.Network $r2;
        com.android.server.net.NetworkPolicyManagerInternal $r3;
        byte $b1, $b2, $b3, $b6, $b8;
        boolean $z0;
        com.android.server.connectivity.MultipathPolicyTracker $r4;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;");

        $r3 = (com.android.server.net.NetworkPolicyManagerInternal) $r1;

        $r2 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.Network network>;

        l9 = virtualinvoke $r3.<com.android.server.net.NetworkPolicyManagerInternal: long getSubscriptionOpportunisticQuota(android.net.Network,int)>($r2, 2);

        l10 = l9;

        $b1 = l9 cmp -1L;

        if $b1 != 0 goto label1;

        l10 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long getUserPolicyOpportunisticQuotaBytes()>();

     label1:
        l11 = l10;

        $b2 = l10 cmp -1L;

        if $b2 != 0 goto label2;

        $r4 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: com.android.server.connectivity.MultipathPolicyTracker this$0>;

        l11 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: long access$800(com.android.server.connectivity.MultipathPolicyTracker)>($r4);

     label2:
        $z0 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: boolean haveMultipathBudget()>();

        if $z0 == 0 goto label3;

        $l7 = r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mQuota>;

        $b8 = l11 cmp $l7;

        if $b8 != 0 goto label3;

        return;

     label3:
        r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long mQuota> = l11;

        l0 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long getDailyNonDefaultDataUsage()>();

        l12 = 0L;

        $b3 = l0 cmp -1L;

        if $b3 != 0 goto label4;

        goto label5;

     label4:
        $l4 = l11 - l0;

        l12 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l4);

     label5:
        $l5 = <android.app.usage.NetworkStatsManager: long MIN_THRESHOLD_BYTES>;

        $b6 = l12 cmp $l5;

        if $b6 <= 0 goto label6;

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: void registerUsageCallback(long)>(l12);

        goto label7;

     label6:
        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: void maybeUnregisterUsageCallback()>();

     label7:
        return;
    }
}
