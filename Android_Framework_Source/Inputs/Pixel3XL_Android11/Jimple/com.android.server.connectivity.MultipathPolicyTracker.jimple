public class com.android.server.connectivity.MultipathPolicyTracker extends java.lang.Object
{
    private static final boolean DBG;
    private static final int OPQUOTA_USER_SETTING_DIVIDER;
    private static java.lang.String TAG;
    private android.net.ConnectivityManager mCM;
    private final java.time.Clock mClock;
    private final com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver mConfigChangeReceiver;
    private final android.content.Context mContext;
    private final com.android.server.connectivity.MultipathPolicyTracker$Dependencies mDeps;
    private final android.os.Handler mHandler;
    private android.net.ConnectivityManager$NetworkCallback mMobileNetworkCallback;
    private final java.util.concurrent.ConcurrentHashMap mMultipathTrackers;
    private android.net.NetworkPolicyManager mNPM;
    private android.net.NetworkPolicyManager$Listener mPolicyListener;
    private final android.content.ContentResolver mResolver;
    final android.database.ContentObserver mSettingsObserver;
    private android.app.usage.NetworkStatsManager mStatsManager;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.connectivity.MultipathPolicyTracker: int OPQUOTA_USER_SETTING_DIVIDER> = 20;

        <com.android.server.connectivity.MultipathPolicyTracker: boolean DBG> = 0;

        $r0 = class "Lcom/android/server/connectivity/MultipathPolicyTracker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.connectivity.MultipathPolicyTracker: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.content.Context r1;
        android.os.Handler r2;
        com.android.server.connectivity.MultipathPolicyTracker$Dependencies $r3;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        $r3 = new com.android.server.connectivity.MultipathPolicyTracker$Dependencies;

        specialinvoke $r3.<com.android.server.connectivity.MultipathPolicyTracker$Dependencies: void <init>()>();

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker: void <init>(android.content.Context,android.os.Handler,com.android.server.connectivity.MultipathPolicyTracker$Dependencies)>(r1, r2, $r3);

        return;
    }

    public void <init>(android.content.Context, android.os.Handler, com.android.server.connectivity.MultipathPolicyTracker$Dependencies)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.content.Context r1, $r6;
        android.os.Handler r2, $r9;
        com.android.server.connectivity.MultipathPolicyTracker$Dependencies r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.time.Clock $r5;
        android.content.ContentResolver $r7;
        com.android.server.connectivity.MultipathPolicyTracker$SettingsObserver $r8;
        com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver $r10;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: com.android.server.connectivity.MultipathPolicyTracker$Dependencies;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.server.connectivity.MultipathPolicyTracker: java.util.concurrent.ConcurrentHashMap mMultipathTrackers> = $r4;

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext> = r1;

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.os.Handler mHandler> = r2;

        $r5 = virtualinvoke r3.<com.android.server.connectivity.MultipathPolicyTracker$Dependencies: java.time.Clock getClock()>();

        r0.<com.android.server.connectivity.MultipathPolicyTracker: java.time.Clock mClock> = $r5;

        r0.<com.android.server.connectivity.MultipathPolicyTracker: com.android.server.connectivity.MultipathPolicyTracker$Dependencies mDeps> = r3;

        $r6 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.ContentResolver mResolver> = $r7;

        $r8 = new com.android.server.connectivity.MultipathPolicyTracker$SettingsObserver;

        $r9 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.os.Handler mHandler>;

        specialinvoke $r8.<com.android.server.connectivity.MultipathPolicyTracker$SettingsObserver: void <init>(com.android.server.connectivity.MultipathPolicyTracker,android.os.Handler)>(r0, $r9);

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.database.ContentObserver mSettingsObserver> = $r8;

        $r10 = new com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver;

        specialinvoke $r10.<com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver: void <init>(com.android.server.connectivity.MultipathPolicyTracker,com.android.server.connectivity.MultipathPolicyTracker$1)>(r0, null);

        r0.<com.android.server.connectivity.MultipathPolicyTracker: com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver mConfigChangeReceiver> = $r10;

        return;
    }

    static android.content.Context access$100(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        return $r1;
    }

    static android.app.usage.NetworkStatsManager access$1000(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.app.usage.NetworkStatsManager $r1;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.app.usage.NetworkStatsManager mStatsManager>;

        return $r1;
    }

    static java.util.concurrent.ConcurrentHashMap access$1100(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: java.util.concurrent.ConcurrentHashMap mMultipathTrackers>;

        return $r1;
    }

    static void access$1200(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker: void updateAllMultipathBudgets()>();

        return;
    }

    static java.time.Clock access$300(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        java.time.Clock $r1;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: java.time.Clock mClock>;

        return $r1;
    }

    static java.lang.String access$400()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.connectivity.MultipathPolicyTracker: java.lang.String TAG>;

        return $r0;
    }

    static android.net.NetworkPolicyManager access$500(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.net.NetworkPolicyManager $r1;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.NetworkPolicyManager mNPM>;

        return $r1;
    }

    static long access$600(android.net.NetworkPolicy, long)
    {
        android.net.NetworkPolicy r0;
        long l0, $l1;

        r0 := @parameter0: android.net.NetworkPolicy;

        l0 := @parameter1: long;

        $l1 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: long getActiveWarning(android.net.NetworkPolicy,long)>(r0, l0);

        return $l1;
    }

    static long access$700(android.net.NetworkPolicy, long)
    {
        android.net.NetworkPolicy r0;
        long l0, $l1;

        r0 := @parameter0: android.net.NetworkPolicy;

        l0 := @parameter1: long;

        $l1 = staticinvoke <com.android.server.connectivity.MultipathPolicyTracker: long getActiveLimit(android.net.NetworkPolicy,long)>(r0, l0);

        return $l1;
    }

    static long access$800(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        long $l0;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        $l0 = specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker: long getDefaultDailyMultipathQuotaBytes()>();

        return $l0;
    }

    static android.os.Handler access$900(com.android.server.connectivity.MultipathPolicyTracker)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.os.Handler mHandler>;

        return $r1;
    }

    private static long getActiveLimit(android.net.NetworkPolicy, long)
    {
        android.net.NetworkPolicy r0;
        long $l0, l2, l3;
        byte $b1;

        r0 := @parameter0: android.net.NetworkPolicy;

        l2 := @parameter1: long;

        $l0 = r0.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b1 = $l0 cmp l2;

        if $b1 >= 0 goto label1;

        l3 = r0.<android.net.NetworkPolicy: long limitBytes>;

        goto label2;

     label1:
        l3 = -1L;

     label2:
        return l3;
    }

    private static long getActiveWarning(android.net.NetworkPolicy, long)
    {
        android.net.NetworkPolicy r0;
        long $l0, l2, l3;
        byte $b1;

        r0 := @parameter0: android.net.NetworkPolicy;

        l2 := @parameter1: long;

        $l0 = r0.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $b1 = $l0 cmp l2;

        if $b1 >= 0 goto label1;

        l3 = r0.<android.net.NetworkPolicy: long warningBytes>;

        goto label2;

     label1:
        l3 = -1L;

     label2:
        return l3;
    }

    private long getDefaultDailyMultipathQuotaBytes()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        long l0, $l2;
        android.content.Context $r1, $r3;
        android.content.ContentResolver $r2;
        android.content.res.Resources $r4;
        int $i1;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r6 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "network_default_daily_multipath_quota_bytes");

        if r6 == null goto label4;

     label1:
        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

     label2:
        return l0;

     label3:
        $r5 := @caughtexception;

     label4:
        $r3 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r4.<android.content.res.Resources: int getInteger(int)>(17694853);

        $l2 = (long) $i1;

        return $l2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private void maybeUnregisterTrackMobileCallback()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.net.ConnectivityManager$NetworkCallback r1;
        android.net.ConnectivityManager $r2;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.ConnectivityManager$NetworkCallback mMobileNetworkCallback>;

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.ConnectivityManager mCM>;

        virtualinvoke $r2.<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>(r1);

     label1:
        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.ConnectivityManager$NetworkCallback mMobileNetworkCallback> = null;

        return;
    }

    private void registerNetworkPolicyListener()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        com.android.server.connectivity.MultipathPolicyTracker$2 $r2;
        android.net.NetworkPolicyManager $r3;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        $r2 = new com.android.server.connectivity.MultipathPolicyTracker$2;

        specialinvoke $r2.<com.android.server.connectivity.MultipathPolicyTracker$2: void <init>(com.android.server.connectivity.MultipathPolicyTracker)>(r0);

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.NetworkPolicyManager$Listener mPolicyListener> = $r2;

        $r3 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.NetworkPolicyManager mNPM>;

        virtualinvoke $r3.<android.net.NetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>($r2);

        return;
    }

    private void registerTrackMobileCallback()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.net.NetworkRequest r1;
        android.net.NetworkRequest$Builder $r3, $r4, $r5;
        com.android.server.connectivity.MultipathPolicyTracker$1 $r6;
        android.os.Handler $r7;
        android.net.ConnectivityManager $r8;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        $r3 = new android.net.NetworkRequest$Builder;

        specialinvoke $r3.<android.net.NetworkRequest$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addCapability(int)>(12);

        $r5 = virtualinvoke $r4.<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addTransportType(int)>(0);

        r1 = virtualinvoke $r5.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        $r6 = new com.android.server.connectivity.MultipathPolicyTracker$1;

        specialinvoke $r6.<com.android.server.connectivity.MultipathPolicyTracker$1: void <init>(com.android.server.connectivity.MultipathPolicyTracker)>(r0);

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.ConnectivityManager$NetworkCallback mMobileNetworkCallback> = $r6;

        $r8 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.ConnectivityManager mCM>;

        $r7 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.os.Handler mHandler>;

        virtualinvoke $r8.<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>(r1, $r6, $r7);

        return;
    }

    private void unregisterNetworkPolicyListener()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.net.NetworkPolicyManager$Listener $r1;
        android.net.NetworkPolicyManager $r2;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        $r2 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.NetworkPolicyManager mNPM>;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.NetworkPolicyManager$Listener mPolicyListener>;

        virtualinvoke $r2.<android.net.NetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>($r1);

        return;
    }

    private void updateAllMultipathBudgets()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        java.util.Iterator r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker $r5;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        $r2 = r0.<com.android.server.connectivity.MultipathPolicyTracker: java.util.concurrent.ConcurrentHashMap mMultipathTrackers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker) $r4;

        virtualinvoke $r5.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: void updateMultipathBudget()>();

        goto label1;

     label2:
        return;
    }

    public void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.Iterator r2;
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r3;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.util.Collection $r6;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.Object[] $r9;
        android.net.Network $r10;
        long $l0, $l1;
        java.lang.Long $r11, $r12;
        int $i2;
        java.lang.String $r13, $r14;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("MultipathPolicyTracker:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r5 = r0.<com.android.server.connectivity.MultipathPolicyTracker: java.util.concurrent.ConcurrentHashMap mMultipathTrackers>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker) $r8;

        $r9 = newarray (java.lang.Object)[4];

        $r10 = r3.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: android.net.Network network>;

        $r9[0] = $r10;

        $l0 = virtualinvoke r3.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long getQuota()>();

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r9[1] = $r11;

        $l1 = virtualinvoke r3.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: long getMultipathBudget()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r9[2] = $r12;

        $i2 = virtualinvoke r3.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: int getMultipathPreference()>();

        $r13 = staticinvoke <android.util.DebugUtils: java.lang.String flagsToString(java.lang.Class,java.lang.String,int)>(class "Landroid/net/ConnectivityManager;", "MULTIPATH_PREFERENCE_", $i2);

        $r9[3] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Network %s: quota %d, budget %d. Preference: %s", $r9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r14);

        goto label1;

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    public java.lang.Integer getMultipathPreference(android.net.Network)
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.Integer $r3;
        android.net.Network r4;
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker r5;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        r4 := @parameter0: android.net.Network;

        if r4 != null goto label1;

        return null;

     label1:
        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: java.util.concurrent.ConcurrentHashMap mMultipathTrackers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker) $r2;

        if r5 == null goto label2;

        $i0 = virtualinvoke r5.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: int getMultipathPreference()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r3;

     label2:
        return null;
    }

    public void shutdown()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        java.util.Iterator r1;
        java.util.concurrent.ConcurrentHashMap $r2, $r4;
        java.util.Collection $r3;
        boolean $z0;
        android.database.ContentObserver $r5;
        android.content.ContentResolver $r6;
        com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver $r7;
        android.content.Context $r8;
        java.lang.Object $r9;
        com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker $r10;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker: void maybeUnregisterTrackMobileCallback()>();

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker: void unregisterNetworkPolicyListener()>();

        $r2 = r0.<com.android.server.connectivity.MultipathPolicyTracker: java.util.concurrent.ConcurrentHashMap mMultipathTrackers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker) $r9;

        virtualinvoke $r10.<com.android.server.connectivity.MultipathPolicyTracker$MultipathTracker: void shutdown()>();

        goto label1;

     label2:
        $r4 = r0.<com.android.server.connectivity.MultipathPolicyTracker: java.util.concurrent.ConcurrentHashMap mMultipathTrackers>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r6 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.ContentResolver mResolver>;

        $r5 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.database.ContentObserver mSettingsObserver>;

        virtualinvoke $r6.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r5);

        $r8 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r7 = r0.<com.android.server.connectivity.MultipathPolicyTracker: com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver mConfigChangeReceiver>;

        virtualinvoke $r8.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r7);

        return;
    }

    public void start()
    {
        com.android.server.connectivity.MultipathPolicyTracker r0;
        android.content.Context $r1, $r4, $r7, $r16;
        java.lang.Object $r2, $r5, $r8;
        android.net.ConnectivityManager $r3;
        android.net.NetworkPolicyManager $r6;
        android.app.usage.NetworkStatsManager $r9;
        android.database.ContentObserver $r10;
        android.content.ContentResolver $r11;
        android.content.IntentFilter $r12;
        android.os.Handler $r13;
        android.os.UserHandle $r14;
        com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver $r15;
        android.net.Uri r18;

        r0 := @this: com.android.server.connectivity.MultipathPolicyTracker;

        $r1 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/ConnectivityManager;");

        $r3 = (android.net.ConnectivityManager) $r2;

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.ConnectivityManager mCM> = $r3;

        $r4 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/NetworkPolicyManager;");

        $r6 = (android.net.NetworkPolicyManager) $r5;

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.net.NetworkPolicyManager mNPM> = $r6;

        $r7 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/usage/NetworkStatsManager;");

        $r9 = (android.app.usage.NetworkStatsManager) $r8;

        r0.<com.android.server.connectivity.MultipathPolicyTracker: android.app.usage.NetworkStatsManager mStatsManager> = $r9;

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker: void registerTrackMobileCallback()>();

        specialinvoke r0.<com.android.server.connectivity.MultipathPolicyTracker: void registerNetworkPolicyListener()>();

        r18 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("network_default_daily_multipath_quota_bytes");

        $r11 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.ContentResolver mResolver>;

        $r10 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.database.ContentObserver mSettingsObserver>;

        virtualinvoke $r11.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r18, 0, $r10);

        $r12 = new android.content.IntentFilter;

        specialinvoke $r12.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r12.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.CONFIGURATION_CHANGED");

        $r16 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.content.Context mContext>;

        $r15 = r0.<com.android.server.connectivity.MultipathPolicyTracker: com.android.server.connectivity.MultipathPolicyTracker$ConfigChangeReceiver mConfigChangeReceiver>;

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r13 = r0.<com.android.server.connectivity.MultipathPolicyTracker: android.os.Handler mHandler>;

        virtualinvoke $r16.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r15, $r14, $r12, null, $r13);

        return;
    }
}
