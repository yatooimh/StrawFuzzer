class com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck extends com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck
{
    private static final int DNS_HEADER_SIZE;
    private static final int DNS_TLS_PORT;
    private static final int TCP_CONNECT_TIMEOUT_MS;
    private static final int TCP_TIMEOUT_MS;
    private final java.lang.String mHostname;
    final com.android.server.connectivity.NetworkDiagnostics this$0;

    public void <init>(com.android.server.connectivity.NetworkDiagnostics, java.lang.String, java.net.InetAddress, com.android.server.connectivity.NetworkDiagnostics$Measurement)
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck r0;
        java.net.InetAddress r1, $r5;
        com.android.server.connectivity.NetworkDiagnostics$Measurement r2, r16;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r9, $r10, $r13, r15;
        com.android.server.connectivity.NetworkDiagnostics r14;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck;

        r14 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        r15 := @parameter1: java.lang.String;

        r1 := @parameter2: java.net.InetAddress;

        r2 := @parameter3: com.android.server.connectivity.NetworkDiagnostics$Measurement;

        r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: com.android.server.connectivity.NetworkDiagnostics this$0> = r14;

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: void <init>(com.android.server.connectivity.NetworkDiagnostics,java.net.InetAddress,com.android.server.connectivity.NetworkDiagnostics$Measurement)>(r14, r1, r2);

        r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.lang.String mHostname> = r15;

        r16 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DNS TLS dst{");

        $r5 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.net.InetAddress mTarget>;

        $r6 = virtualinvoke $r5.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} hostname{");

        $r9 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.lang.String mHostname>;

        $r10 = staticinvoke <android.text.TextUtils: java.lang.String emptyIfNull(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r16.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.String description> = $r13;

        return;
    }

    private void sendDoTProbe(javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck r0;
        int i0, $i1, $i2, $i4, $i5, $i9, $i10, i11;
        java.util.Random $r1;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r2, r28, r30;
        long $l3;
        java.net.InetSocketAddress $r3;
        java.net.InetAddress $r4;
        java.net.SocketAddress $r5;
        java.io.DataOutputStream $r6;
        java.io.OutputStream $r7;
        java.io.DataInputStream $r8;
        java.io.InputStream $r9;
        short $s6;
        java.lang.StringBuilder $r10, $r17;
        java.lang.String $r16, $r19, $r21, r23;
        byte $b7, $b8;
        javax.net.ssl.SSLSocket r22;
        byte[] r24, r27;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck;

        r22 := @parameter0: javax.net.ssl.SSLSocket;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.util.Random mRandom>;

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(900000);

        $i2 = $i1 + 100000;

        r23 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        r24 = virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: byte[] getDnsQueryPacket(java.lang.String)>(r23);

        $r2 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $l3 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: long access$100()>();

        $r2.<com.android.server.connectivity.NetworkDiagnostics$Measurement: long startTime> = $l3;

        $r3 = new java.net.InetSocketAddress;

        $r4 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.net.InetAddress mTarget>;

        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, 853);

        virtualinvoke r22.<javax.net.ssl.SSLSocket: void connect(java.net.SocketAddress,int)>($r3, 2500);

        virtualinvoke r22.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r5 = virtualinvoke r22.<javax.net.ssl.SSLSocket: java.net.SocketAddress getLocalSocketAddress()>();

        virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: void appendDnsToMeasurementDescription(java.lang.String,java.net.SocketAddress)>(r23, $r5);

        $r6 = new java.io.DataOutputStream;

        $r7 = virtualinvoke r22.<javax.net.ssl.SSLSocket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r6.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r7);

        $i4 = lengthof r24;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeShort(int)>($i4);

        $i5 = lengthof r24;

        virtualinvoke $r6.<java.io.DataOutputStream: void write(byte[],int,int)>(r24, 0, $i5);

        $r8 = new java.io.DataInputStream;

        $r9 = virtualinvoke r22.<javax.net.ssl.SSLSocket: java.io.InputStream getInputStream()>();

        specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r9);

        $s6 = virtualinvoke $r8.<java.io.DataInputStream: short readShort()>();

        i0 = staticinvoke <java.lang.Short: int toUnsignedInt(short)>($s6);

        r27 = newarray (byte)[i0];

        i11 = 0;

     label1:
        if i11 >= i0 goto label2;

        $i9 = i0 - i11;

        $i10 = virtualinvoke $r8.<java.io.DataInputStream: int read(byte[],int,int)>(r27, i11, $i9);

        i11 = i11 + $i10;

        goto label1;

     label2:
        if i11 <= 12 goto label3;

        if i11 != i0 goto label3;

        r28 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1/1 ");

        $b7 = r27[3];

        $b8 = $b7 & 15;

        $r19 = virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.lang.String responseCodeStr(int)>($b8);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r28.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordSuccess(java.lang.String)>($r21);

        goto label4;

     label3:
        r30 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1/1 Read ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes while expected to be ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordFailure(java.lang.String)>($r16);

     label4:
        return;
    }

    private javax.net.ssl.SSLSocket setupSSLSocket() throws java.io.IOException
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck r0;
        javax.net.ssl.SSLSocket r1;
        java.util.List r2;
        javax.net.ssl.SSLParameters r3;
        javax.net.SocketFactory $r4;
        java.net.Socket $r5;
        java.lang.String $r6, $r10;
        boolean $z0;
        com.android.server.connectivity.NetworkDiagnostics $r7;
        android.net.Network $r8;
        javax.net.ssl.SNIHostName $r9;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck;

        $r4 = staticinvoke <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>();

        $r5 = virtualinvoke $r4.<javax.net.SocketFactory: java.net.Socket createSocket()>();

        r1 = (javax.net.ssl.SSLSocket) $r5;

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(2000);

        $r6 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.lang.String mHostname>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

        if $z0 != 0 goto label1;

        $r9 = new javax.net.ssl.SNIHostName;

        $r10 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: java.lang.String mHostname>;

        specialinvoke $r9.<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>($r10);

        r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r9);

        r3 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>();

        virtualinvoke r3.<javax.net.ssl.SSLParameters: void setServerNames(java.util.List)>(r2);

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>(r3);

     label1:
        $r7 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: com.android.server.connectivity.NetworkDiagnostics this$0>;

        $r8 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: android.net.Network access$300(com.android.server.connectivity.NetworkDiagnostics)>($r7);

        virtualinvoke $r8.<android.net.Network: void bindSocket(java.net.Socket)>(r1);

        return r1;
    }

    public void run()
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck r0;
        boolean $z0;
        java.lang.Throwable $r1, $r2, $r3;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r4;
        java.lang.String $r5;
        javax.net.ssl.SSLSocket r6;
        java.io.IOException r10;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck;

        $z0 = virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: boolean ensureMeasurementNecessary()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        staticinvoke <android.net.TrafficStats: int getAndSetThreadStatsTag(int)>(-127);

     label02:
        r6 = specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: javax.net.ssl.SSLSocket setupSSLSocket()>();

     label03:
        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: void sendDoTProbe(javax.net.ssl.SSLSocket)>(r6);

     label04:
        if r6 == null goto label06;

     label05:
        virtualinvoke r6.<javax.net.ssl.SSLSocket: void close()>();

     label06:
        goto label14;

     label07:
        $r2 := @caughtexception;

        if r6 == null goto label12;

     label08:
        virtualinvoke r6.<javax.net.ssl.SSLSocket: void close()>();

     label09:
        goto label12;

     label10:
        $r1 := @caughtexception;

     label11:
        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label12:
        throw $r2;

     label13:
        $r3 := @caughtexception;

        $r4 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        r10 = (java.io.IOException) $r3;

        $r5 = virtualinvoke r10.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordFailure(java.lang.String)>($r5);

     label14:
        return;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label12 to label13 with label13;
    }

    public static void <clinit>()
    {
        <com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: int TCP_TIMEOUT_MS> = 2000;

        <com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: int TCP_CONNECT_TIMEOUT_MS> = 2500;

        <com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: int DNS_TLS_PORT> = 853;

        <com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: int DNS_HEADER_SIZE> = 12;

        return;
    }
}
