class com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck extends com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck implements java.lang.Runnable
{
    private static final int PACKET_BUFSIZE;
    private static final int RR_TYPE_A;
    private static final int RR_TYPE_AAAA;
    private static final int TIMEOUT_RECV;
    private static final int TIMEOUT_SEND;
    protected final int mQueryType;
    protected final java.util.Random mRandom;
    final com.android.server.connectivity.NetworkDiagnostics this$0;

    public void <init>(com.android.server.connectivity.NetworkDiagnostics, java.net.InetAddress, com.android.server.connectivity.NetworkDiagnostics$Measurement)
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck r0;
        com.android.server.connectivity.NetworkDiagnostics$Measurement r1, r12;
        java.util.Random $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.net.InetAddress $r5, r11;
        java.lang.String $r6, $r9;
        com.android.server.connectivity.NetworkDiagnostics r10;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck;

        r10 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        r11 := @parameter1: java.net.InetAddress;

        r1 := @parameter2: com.android.server.connectivity.NetworkDiagnostics$Measurement;

        r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics this$0> = r10;

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: void <init>(com.android.server.connectivity.NetworkDiagnostics,java.net.InetAddress,com.android.server.connectivity.NetworkDiagnostics$Measurement)>(r10, r11, r1);

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.util.Random mRandom> = $r2;

        $i1 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int mAddressFamily>;

        $i0 = <android.system.OsConstants: int AF_INET6>;

        if $i1 != $i0 goto label1;

        r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int mQueryType> = 28;

        goto label2;

     label1:
        r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int mQueryType> = 1;

     label2:
        r12 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DNS UDP dst{");

        $r5 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.net.InetAddress mTarget>;

        $r6 = virtualinvoke $r5.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r12.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.String description> = $r9;

        return;
    }

    protected void appendDnsToMeasurementDescription(java.lang.String, java.net.SocketAddress)
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck r0;
        java.lang.String r1, $r6, $r9, $r16;
        java.net.SocketAddress r2;
        com.android.server.connectivity.NetworkDiagnostics$Measurement r4;
        java.lang.StringBuilder $r5;
        int $i0;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.SocketAddress;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r4 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $r6 = r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.String description>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" src{");

        $r9 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: java.lang.String access$400(java.net.SocketAddress)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} qtype{");

        $i0 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int mQueryType>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} qname{");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-android-ds.metric.gstatic.com}");

        $r16 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.String description> = $r16;

        return;
    }

    protected byte[] getDnsQueryPacket(java.lang.String)
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck r0;
        java.nio.charset.Charset $r1;
        byte[] $r2, r6;
        java.util.Random $r3, $r4;
        int $i0, $i2, $i10;
        byte $b1, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b11;
        java.lang.String r5;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck;

        r5 := @parameter0: java.lang.String;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        r6 = virtualinvoke r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r2 = newarray (byte)[54];

        $r3 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.util.Random mRandom>;

        $i0 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        $b1 = (byte) $i0;

        $r2[0] = $b1;

        $r4 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.util.Random mRandom>;

        $i2 = virtualinvoke $r4.<java.util.Random: int nextInt()>();

        $b3 = (byte) $i2;

        $r2[1] = $b3;

        $r2[2] = 1;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 1;

        $r2[6] = 0;

        $r2[7] = 0;

        $r2[8] = 0;

        $r2[9] = 0;

        $r2[10] = 0;

        $r2[11] = 0;

        $r2[12] = 17;

        $b4 = r6[0];

        $r2[13] = $b4;

        $b5 = r6[1];

        $r2[14] = $b5;

        $b6 = r6[2];

        $r2[15] = $b6;

        $b7 = r6[3];

        $r2[16] = $b7;

        $b8 = r6[4];

        $r2[17] = $b8;

        $b9 = r6[5];

        $r2[18] = $b9;

        $r2[19] = 45;

        $r2[20] = 97;

        $r2[21] = 110;

        $r2[22] = 100;

        $r2[23] = 114;

        $r2[24] = 111;

        $r2[25] = 105;

        $r2[26] = 100;

        $r2[27] = 45;

        $r2[28] = 100;

        $r2[29] = 115;

        $r2[30] = 6;

        $r2[31] = 109;

        $r2[32] = 101;

        $r2[33] = 116;

        $r2[34] = 114;

        $r2[35] = 105;

        $r2[36] = 99;

        $r2[37] = 7;

        $r2[38] = 103;

        $r2[39] = 115;

        $r2[40] = 116;

        $r2[41] = 97;

        $r2[42] = 116;

        $r2[43] = 105;

        $r2[44] = 99;

        $r2[45] = 3;

        $r2[46] = 99;

        $r2[47] = 111;

        $r2[48] = 109;

        $r2[49] = 0;

        $r2[50] = 0;

        $i10 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int mQueryType>;

        $b11 = (byte) $i10;

        $r2[51] = $b11;

        $r2[52] = 0;

        $r2[53] = 1;

        return $r2;
    }

    protected java.lang.String responseCodeStr(int)
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck r0;
        int i0;
        com.android.server.connectivity.NetworkDiagnostics$DnsResponseCode[] $r1;
        com.android.server.connectivity.NetworkDiagnostics$DnsResponseCode $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String $r4, r5;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics$DnsResponseCode: com.android.server.connectivity.NetworkDiagnostics$DnsResponseCode[] values()>();

        $r2 = $r1[i0];

        r5 = virtualinvoke $r2.<com.android.server.connectivity.NetworkDiagnostics$DnsResponseCode: java.lang.String toString()>();

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r4;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void run()
    {
        com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck r0;
        com.android.server.connectivity.NetworkDiagnostics$Measurement r1, $r4, $r21, $r24, $r34, r35;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i9, $i12, i15, i16;
        java.util.Random $r2;
        java.net.SocketAddress $r3;
        long $l4, $l5, $l6, $l7, $l17;
        com.android.server.connectivity.NetworkDiagnostics $r5;
        byte $b8, $b13, $b14, $b18;
        java.lang.String $r9, $r15, $r17, $r22, $r25, r26, r30;
        java.io.FileDescriptor $r10, $r11;
        java.lang.Throwable $r19, $r20, $r23;
        byte[] r27;
        java.nio.ByteBuffer r28;
        java.lang.StringBuilder r38, r39, r40;
        java.lang.Exception r41, r42;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck;

        $z0 = virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: boolean ensureMeasurementNecessary()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $i1 = <android.system.OsConstants: int SOCK_DGRAM>;

        $i0 = <android.system.OsConstants: int IPPROTO_UDP>;

        virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: void setupSocket(int,int,long,long,int)>($i1, $i0, 100L, 500L, 53);

     label02:
        $r2 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.util.Random mRandom>;

        $i2 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>(900000);

        $i3 = $i2 + 100000;

        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        $r3 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.net.SocketAddress mSocketAddress>;

        virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: void appendDnsToMeasurementDescription(java.lang.String,java.net.SocketAddress)>(r26, $r3);

        r27 = virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: byte[] getDnsQueryPacket(java.lang.String)>(r26);

        i15 = 0;

        $r4 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $l4 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: long access$100()>();

        $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: long startTime> = $l4;

     label03:
        i16 = i15;

        $l5 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: long access$100()>();

        $r5 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics this$0>;

        $l6 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: long access$500(com.android.server.connectivity.NetworkDiagnostics)>($r5);

        $l7 = $l6 - 1000L;

        $b8 = $l5 cmp $l7;

        if $b8 >= 0 goto label12;

        i15 = i15 + 1;

     label04:
        $r10 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.io.FileDescriptor mFileDescriptor>;

        $i9 = lengthof r27;

        staticinvoke <android.system.Os: int write(java.io.FileDescriptor,byte[],int,int)>($r10, r27, 0, $i9);

     label05:
        r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(512);

        $r11 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.io.FileDescriptor mFileDescriptor>;

        staticinvoke <android.system.Os: int read(java.io.FileDescriptor,java.nio.ByteBuffer)>($r11, r28);

        $i12 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();

        if $i12 <= 3 goto label07;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $b13 = virtualinvoke r28.<java.nio.ByteBuffer: byte get(int)>(3);

        $b14 = $b13 & 15;

        $r17 = virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: java.lang.String responseCodeStr(int)>($b14);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r30 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        goto label08;

     label07:
        r30 = "";

     label08:
        r1 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1/");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r15 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordSuccess(java.lang.String)>($r15);

     label09:
        i16 = i15;

        goto label12;

     label10:
        $r19 := @caughtexception;

        goto label03;

     label11:
        $r23 := @caughtexception;

        $r24 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        r41 = (java.lang.Exception) $r23;

        $r25 = virtualinvoke r41.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r24.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordFailure(java.lang.String)>($r25);

        i16 = i15;

     label12:
        $r34 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $l17 = $r34.<com.android.server.connectivity.NetworkDiagnostics$Measurement: long finishTime>;

        $b18 = $l17 cmp 0L;

        if $b18 != 0 goto label13;

        r35 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0/");

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r9 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r35.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordFailure(java.lang.String)>($r9);

     label13:
        virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: void close()>();

        return;

     label14:
        $r20 := @caughtexception;

        $r21 = r0.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        r42 = (java.lang.Exception) $r20;

        $r22 = virtualinvoke r42.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r21.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordFailure(java.lang.String)>($r22);

        return;

        catch android.system.ErrnoException from label01 to label02 with label14;
        catch java.io.IOException from label01 to label02 with label14;
        catch android.system.ErrnoException from label04 to label05 with label11;
        catch java.io.InterruptedIOException from label04 to label05 with label11;
        catch android.system.ErrnoException from label05 to label06 with label10;
        catch java.io.InterruptedIOException from label05 to label06 with label10;
        catch android.system.ErrnoException from label08 to label09 with label10;
        catch java.io.InterruptedIOException from label08 to label09 with label10;
    }

    public static void <clinit>()
    {
        <com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int TIMEOUT_SEND> = 100;

        <com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int TIMEOUT_RECV> = 500;

        <com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int RR_TYPE_AAAA> = 28;

        <com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int RR_TYPE_A> = 1;

        <com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: int PACKET_BUFSIZE> = 512;

        return;
    }
}
