class com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck extends java.lang.Object implements java.io.Closeable
{
    protected final int mAddressFamily;
    protected java.io.FileDescriptor mFileDescriptor;
    protected final com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement;
    protected java.net.SocketAddress mSocketAddress;
    protected final java.net.InetAddress mSource;
    protected final java.net.InetAddress mTarget;
    final com.android.server.connectivity.NetworkDiagnostics this$0;

    protected void <init>(com.android.server.connectivity.NetworkDiagnostics, java.net.InetAddress, com.android.server.connectivity.NetworkDiagnostics$Measurement)
    {
        com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck r0;
        com.android.server.connectivity.NetworkDiagnostics r1;
        java.net.InetAddress r2;
        com.android.server.connectivity.NetworkDiagnostics$Measurement r3;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck;

        r1 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        r2 := @parameter1: java.net.InetAddress;

        r3 := @parameter2: com.android.server.connectivity.NetworkDiagnostics$Measurement;

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: void <init>(com.android.server.connectivity.NetworkDiagnostics,java.net.InetAddress,java.net.InetAddress,com.android.server.connectivity.NetworkDiagnostics$Measurement)>(r1, null, r2, r3);

        return;
    }

    protected void <init>(com.android.server.connectivity.NetworkDiagnostics, java.net.InetAddress, java.net.InetAddress, com.android.server.connectivity.NetworkDiagnostics$Measurement)
    {
        com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck r0;
        java.net.InetAddress r1, r13, r14, r16, r17;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        java.lang.Integer $r2, $r4;
        byte[] $r3;
        java.lang.Throwable $r5;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r6, r10;
        java.lang.String $r7;
        com.android.server.connectivity.NetworkDiagnostics r8;
        java.lang.Object r9;
        java.net.Inet6Address r11;
        java.net.UnknownHostException r15;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck;

        r8 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        r1 := @parameter1: java.net.InetAddress;

        r9 := @parameter2: java.net.InetAddress;

        r10 := @parameter3: com.android.server.connectivity.NetworkDiagnostics$Measurement;

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: com.android.server.connectivity.NetworkDiagnostics this$0> = r8;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement> = r10;

        $z0 = r9 instanceof java.net.Inet6Address;

        if $z0 == 0 goto label6;

        r11 = null;

        r13 = (java.net.InetAddress) r9;

        $z1 = virtualinvoke r13.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        if $z1 == 0 goto label4;

        r11 = null;

        $r2 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: java.lang.Integer access$200(com.android.server.connectivity.NetworkDiagnostics)>(r8);

        if $r2 == null goto label4;

     label1:
        r14 = (java.net.InetAddress) r9;

        $r3 = virtualinvoke r14.<java.net.InetAddress: byte[] getAddress()>();

        $r4 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: java.lang.Integer access$200(com.android.server.connectivity.NetworkDiagnostics)>(r8);

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r11 = staticinvoke <java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>(null, $r3, $i2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        r15 = (java.net.UnknownHostException) $r5;

        $r7 = virtualinvoke r15.<java.net.UnknownHostException: java.lang.String toString()>();

        virtualinvoke $r6.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void recordFailure(java.lang.String)>($r7);

        r11 = null;

     label4:
        if r11 == null goto label5;

        r9 = r11;

        goto label5;

     label5:
        r16 = (java.net.InetAddress) r9;

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.net.InetAddress mTarget> = r16;

        $i1 = <android.system.OsConstants: int AF_INET6>;

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: int mAddressFamily> = $i1;

        goto label7;

     label6:
        r17 = (java.net.InetAddress) r9;

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.net.InetAddress mTarget> = r17;

        $i0 = <android.system.OsConstants: int AF_INET>;

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: int mAddressFamily> = $i0;

     label7:
        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.net.InetAddress mSource> = r1;

        return;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public void close()
    {
        com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck r0;
        java.io.FileDescriptor $r1;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>($r1);

        return;
    }

    protected boolean ensureMeasurementNecessary()
    {
        com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck r0;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r1;
        long $l0;
        byte $b1;
        com.android.server.connectivity.NetworkDiagnostics $r2;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: com.android.server.connectivity.NetworkDiagnostics$Measurement mMeasurement>;

        $l0 = $r1.<com.android.server.connectivity.NetworkDiagnostics$Measurement: long finishTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: com.android.server.connectivity.NetworkDiagnostics this$0>;

        $r3 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: java.util.concurrent.CountDownLatch access$000(com.android.server.connectivity.NetworkDiagnostics)>($r2);

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void countDown()>();

        return 1;
    }

    protected void setupSocket(int, int, long, long, int) throws android.system.ErrnoException, java.io.IOException
    {
        com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck r0;
        int i0, i1, i4, i5, $i6, $i7, $i8, $i9, $i10;
        long l2, l3;
        java.io.FileDescriptor $r1, $r2, $r4, $r8, $r10, $r11, $r13;
        android.system.StructTimeval $r3, $r5;
        com.android.server.connectivity.NetworkDiagnostics $r6;
        android.net.Network $r7;
        java.net.InetAddress $r9, r15;
        java.net.SocketAddress $r12;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        i4 := @parameter4: int;

        i5 = staticinvoke <android.net.TrafficStats: int getAndSetThreadStatsTag(int)>(-127);

     label1:
        $i6 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: int mAddressFamily>;

        $r1 = staticinvoke <android.system.Os: java.io.FileDescriptor socket(int,int,int)>($i6, i0, i1);

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor> = $r1;

     label2:
        staticinvoke <android.net.TrafficStats: void setThreadStatsTag(int)>(i5);

        $r2 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor>;

        $i7 = <android.system.OsConstants: int SOL_SOCKET>;

        $i8 = <android.system.OsConstants: int SO_SNDTIMEO>;

        $r3 = staticinvoke <android.system.StructTimeval: android.system.StructTimeval fromMillis(long)>(l2);

        staticinvoke <android.system.Os: void setsockoptTimeval(java.io.FileDescriptor,int,int,android.system.StructTimeval)>($r2, $i7, $i8, $r3);

        $r4 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor>;

        $i9 = <android.system.OsConstants: int SOL_SOCKET>;

        $i10 = <android.system.OsConstants: int SO_RCVTIMEO>;

        $r5 = staticinvoke <android.system.StructTimeval: android.system.StructTimeval fromMillis(long)>(l3);

        staticinvoke <android.system.Os: void setsockoptTimeval(java.io.FileDescriptor,int,int,android.system.StructTimeval)>($r4, $i9, $i10, $r5);

        $r6 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: com.android.server.connectivity.NetworkDiagnostics this$0>;

        $r7 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: android.net.Network access$300(com.android.server.connectivity.NetworkDiagnostics)>($r6);

        $r8 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor>;

        virtualinvoke $r7.<android.net.Network: void bindSocket(java.io.FileDescriptor)>($r8);

        r15 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.net.InetAddress mSource>;

        if r15 == null goto label3;

        $r13 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor>;

        staticinvoke <android.system.Os: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>($r13, r15, 0);

     label3:
        $r10 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor>;

        $r9 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.net.InetAddress mTarget>;

        staticinvoke <android.system.Os: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r10, $r9, i4);

        $r11 = r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.io.FileDescriptor mFileDescriptor>;

        $r12 = staticinvoke <android.system.Os: java.net.SocketAddress getsockname(java.io.FileDescriptor)>($r11);

        r0.<com.android.server.connectivity.NetworkDiagnostics$SimpleSocketCheck: java.net.SocketAddress mSocketAddress> = $r12;

        return;

     label4:
        $r14 := @caughtexception;

        staticinvoke <android.net.TrafficStats: void setThreadStatsTag(int)>(i5);

        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
