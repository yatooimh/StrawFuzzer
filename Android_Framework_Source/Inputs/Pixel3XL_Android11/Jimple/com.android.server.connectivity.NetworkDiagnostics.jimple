public class com.android.server.connectivity.NetworkDiagnostics extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.net.InetAddress TEST_DNS4;
    private static final java.net.InetAddress TEST_DNS6;
    private final java.util.concurrent.CountDownLatch mCountDownLatch;
    private final long mDeadlineTime;
    private final java.lang.String mDescription;
    private final java.util.Map mDnsTlsChecks;
    private final java.util.Map mDnsUdpChecks;
    private final java.util.Map mExplicitSourceIcmpChecks;
    private final java.util.Map mIcmpChecks;
    private final java.lang.Integer mInterfaceIndex;
    private final android.net.LinkProperties mLinkProperties;
    private final android.net.Network mNetwork;
    private final android.net.shared.PrivateDnsConfig mPrivateDnsCfg;
    private final long mStartTime;
    private final long mTimeoutMs;

    static void <clinit>()
    {
        java.net.InetAddress $r0, $r1;

        <com.android.server.connectivity.NetworkDiagnostics: java.lang.String TAG> = "NetworkDiagnostics";

        $r0 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>("8.8.8.8");

        <com.android.server.connectivity.NetworkDiagnostics: java.net.InetAddress TEST_DNS4> = $r0;

        $r1 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>("2001:4860:4860::8888");

        <com.android.server.connectivity.NetworkDiagnostics: java.net.InetAddress TEST_DNS6> = $r1;

        return;
    }

    public void <init>(android.net.Network, android.net.LinkProperties, android.net.shared.PrivateDnsConfig, long)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        int i0, $i3, i7;
        java.util.HashMap $r1, $r2, $r3, $r4;
        java.lang.String $r5, $r20, $r32, $r35;
        java.lang.Integer $r6, $r23;
        long $l1, $l2, $l4, l5, l6;
        java.net.InetAddress $r7, $r10, $r39, r48, r50, r52;
        android.net.LinkProperties $r8, $r9, $r11, $r12, $r18, $r33, $r38, $r40, r42, $r44;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z9;
        java.util.List $r13, $r19, $r45;
        android.net.shared.PrivateDnsConfig $r14, $r34, r43;
        java.util.concurrent.CountDownLatch $r15;
        java.lang.StringBuilder $r16;
        android.net.Network $r26, $r29, r41;
        java.lang.Object $r36, $r37;
        java.util.Iterator r46, r49;
        android.net.RouteInfo r47;
        java.net.InetAddress[] r51;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        r41 := @parameter0: android.net.Network;

        r42 := @parameter1: android.net.LinkProperties;

        r43 := @parameter2: android.net.shared.PrivateDnsConfig;

        l5 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mIcmpChecks> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mExplicitSourceIcmpChecks> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsUdpChecks> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsTlsChecks> = $r4;

        r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.Network mNetwork> = r41;

        r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties> = r42;

        r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.shared.PrivateDnsConfig mPrivateDnsCfg> = r43;

        $r5 = virtualinvoke r42.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r6 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: java.lang.Integer getInterfaceIndex(java.lang.String)>($r5);

        r0.<com.android.server.connectivity.NetworkDiagnostics: java.lang.Integer mInterfaceIndex> = $r6;

        r0.<com.android.server.connectivity.NetworkDiagnostics: long mTimeoutMs> = l5;

        l6 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: long now()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics: long mStartTime> = l6;

        $l1 = r0.<com.android.server.connectivity.NetworkDiagnostics: long mTimeoutMs>;

        $l2 = l6 + $l1;

        r0.<com.android.server.connectivity.NetworkDiagnostics: long mDeadlineTime> = $l2;

        $r8 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $r7 = <com.android.server.connectivity.NetworkDiagnostics: java.net.InetAddress TEST_DNS4>;

        $z0 = virtualinvoke $r8.<android.net.LinkProperties: boolean isReachable(java.net.InetAddress)>($r7);

        if $z0 == 0 goto label01;

        $r40 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $r39 = <com.android.server.connectivity.NetworkDiagnostics: java.net.InetAddress TEST_DNS4>;

        virtualinvoke $r40.<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>($r39);

     label01:
        $r9 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $z1 = virtualinvoke $r9.<android.net.LinkProperties: boolean hasGlobalIpv6Address()>();

        if $z1 != 0 goto label02;

        $r38 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $z7 = virtualinvoke $r38.<android.net.LinkProperties: boolean hasIpv6DefaultRoute()>();

        if $z7 == 0 goto label03;

     label02:
        $r11 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $r10 = <com.android.server.connectivity.NetworkDiagnostics: java.net.InetAddress TEST_DNS6>;

        virtualinvoke $r11.<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>($r10);

     label03:
        $r44 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $r45 = virtualinvoke $r44.<android.net.LinkProperties: java.util.List getRoutes()>();

        r46 = interfaceinvoke $r45.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z9 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label06;

        $r37 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (android.net.RouteInfo) $r37;

        $z5 = virtualinvoke r47.<android.net.RouteInfo: boolean hasGateway()>();

        if $z5 == 0 goto label05;

        r48 = virtualinvoke r47.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: void prepareIcmpMeasurement(java.net.InetAddress)>(r48);

        $z6 = virtualinvoke r47.<android.net.RouteInfo: boolean isIPv6Default()>();

        if $z6 == 0 goto label05;

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: void prepareExplicitSourceIcmpMeasurements(java.net.InetAddress)>(r48);

     label05:
        goto label04;

     label06:
        $r12 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $r13 = virtualinvoke $r12.<android.net.LinkProperties: java.util.List getDnsServers()>();

        r49 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r36 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.net.InetAddress) $r36;

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: void prepareIcmpMeasurement(java.net.InetAddress)>(r50);

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: void prepareDnsMeasurement(java.net.InetAddress)>(r50);

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: void prepareDnsTlsMeasurement(java.lang.String,java.net.InetAddress)>(null, r50);

        goto label07;

     label08:
        $r14 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.shared.PrivateDnsConfig mPrivateDnsCfg>;

        r51 = $r14.<android.net.shared.PrivateDnsConfig: java.net.InetAddress[] ips>;

        i0 = lengthof r51;

        i7 = 0;

     label09:
        if i7 >= i0 goto label11;

        r52 = r51[i7];

        $r33 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $z4 = virtualinvoke $r33.<android.net.LinkProperties: boolean isReachable(java.net.InetAddress)>(r52);

        if $z4 == 0 goto label10;

        $r34 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.shared.PrivateDnsConfig mPrivateDnsCfg>;

        $r35 = $r34.<android.net.shared.PrivateDnsConfig: java.lang.String hostname>;

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: void prepareDnsTlsMeasurement(java.lang.String,java.net.InetAddress)>($r35, r52);

     label10:
        i7 = i7 + 1;

        goto label09;

     label11:
        $r15 = new java.util.concurrent.CountDownLatch;

        $i3 = specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: int totalMeasurementCount()>();

        specialinvoke $r15.<java.util.concurrent.CountDownLatch: void <init>(int)>($i3);

        r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.concurrent.CountDownLatch mCountDownLatch> = $r15;

        specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: void startMeasurements()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ifaces{");

        $r18 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $r19 = virtualinvoke $r18.<android.net.LinkProperties: java.util.List getAllInterfaceNames()>();

        $r20 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", $r19);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} index{");

        $r23 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.lang.Integer mInterfaceIndex>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} network{");

        $r26 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.Network mNetwork>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} nethandle{");

        $r29 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.Network mNetwork>;

        $l4 = virtualinvoke $r29.<android.net.Network: long getNetworkHandle()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r32 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.connectivity.NetworkDiagnostics: java.lang.String mDescription> = $r32;

        return;
    }

    static java.util.concurrent.CountDownLatch access$000(com.android.server.connectivity.NetworkDiagnostics)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.concurrent.CountDownLatch mCountDownLatch>;

        return $r1;
    }

    static long access$100()
    {
        long $l0;

        $l0 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: long now()>();

        return $l0;
    }

    static java.lang.Integer access$200(com.android.server.connectivity.NetworkDiagnostics)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.lang.Integer $r1;

        r0 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.lang.Integer mInterfaceIndex>;

        return $r1;
    }

    static android.net.Network access$300(com.android.server.connectivity.NetworkDiagnostics)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        android.net.Network $r1;

        r0 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.Network mNetwork>;

        return $r1;
    }

    static java.lang.String access$400(java.net.SocketAddress)
    {
        java.net.SocketAddress r0;
        java.lang.String $r1;

        r0 := @parameter0: java.net.SocketAddress;

        $r1 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: java.lang.String socketAddressToString(java.net.SocketAddress)>(r0);

        return $r1;
    }

    static long access$500(com.android.server.connectivity.NetworkDiagnostics)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        long $l0;

        r0 := @parameter0: com.android.server.connectivity.NetworkDiagnostics;

        $l0 = r0.<com.android.server.connectivity.NetworkDiagnostics: long mDeadlineTime>;

        return $l0;
    }

    private static java.lang.Integer getInterfaceIndex(java.lang.String)
    {
        int i0;
        java.net.NetworkInterface $r0;
        java.lang.Integer $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>(r3);

        i0 = virtualinvoke $r0.<java.net.NetworkInterface: int getIndex()>();

     label2:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.net.SocketException from label1 to label2 with label3;
    }

    private static final long now()
    {
        long $l0;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        return $l0;
    }

    private void prepareDnsMeasurement(java.net.InetAddress)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.net.InetAddress r1;
        java.util.Map $r3, $r7;
        boolean $z0;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r4;
        java.lang.Thread $r5;
        com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck $r6;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        r1 := @parameter0: java.net.InetAddress;

        $r3 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsUdpChecks>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new com.android.server.connectivity.NetworkDiagnostics$Measurement;

        specialinvoke $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void <init>(com.android.server.connectivity.NetworkDiagnostics)>(r0);

        $r5 = new java.lang.Thread;

        $r6 = new com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck;

        specialinvoke $r6.<com.android.server.connectivity.NetworkDiagnostics$DnsUdpCheck: void <init>(com.android.server.connectivity.NetworkDiagnostics,java.net.InetAddress,com.android.server.connectivity.NetworkDiagnostics$Measurement)>(r0, r1, $r4);

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);

        $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread> = $r5;

        $r7 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsUdpChecks>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return;
    }

    private void prepareDnsTlsMeasurement(java.lang.String, java.net.InetAddress)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.lang.String r1;
        java.net.InetAddress r2;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r4;
        java.lang.Thread $r5;
        com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck $r6;
        java.util.Map $r7;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.InetAddress;

        $r4 = new com.android.server.connectivity.NetworkDiagnostics$Measurement;

        specialinvoke $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void <init>(com.android.server.connectivity.NetworkDiagnostics)>(r0);

        $r5 = new java.lang.Thread;

        $r6 = new com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck;

        specialinvoke $r6.<com.android.server.connectivity.NetworkDiagnostics$DnsTlsCheck: void <init>(com.android.server.connectivity.NetworkDiagnostics,java.lang.String,java.net.InetAddress,com.android.server.connectivity.NetworkDiagnostics$Measurement)>(r0, r1, r2, $r4);

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);

        $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread> = $r5;

        $r7 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsTlsChecks>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        return;
    }

    private void prepareExplicitSourceIcmpMeasurements(java.net.InetAddress)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.net.InetAddress r1, r3;
        java.util.Iterator r2;
        android.net.LinkProperties $r5;
        java.util.List $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r7;
        android.util.Pair $r8;
        java.util.Map $r9, $r13;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r10;
        java.lang.Thread $r11;
        com.android.server.connectivity.NetworkDiagnostics$IcmpCheck $r12;
        android.net.LinkAddress r15;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        r1 := @parameter0: java.net.InetAddress;

        $r5 = r0.<com.android.server.connectivity.NetworkDiagnostics: android.net.LinkProperties mLinkProperties>;

        $r6 = virtualinvoke $r5.<android.net.LinkProperties: java.util.List getLinkAddresses()>();

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (android.net.LinkAddress) $r7;

        r3 = virtualinvoke r15.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z1 = r3 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r15.<android.net.LinkAddress: boolean isGlobalPreferred()>();

        if $z2 == 0 goto label2;

        $r8 = new android.util.Pair;

        specialinvoke $r8.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r3, r1);

        $r9 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mExplicitSourceIcmpChecks>;

        $z3 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z3 != 0 goto label2;

        $r10 = new com.android.server.connectivity.NetworkDiagnostics$Measurement;

        specialinvoke $r10.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void <init>(com.android.server.connectivity.NetworkDiagnostics)>(r0);

        $r11 = new java.lang.Thread;

        $r12 = new com.android.server.connectivity.NetworkDiagnostics$IcmpCheck;

        specialinvoke $r12.<com.android.server.connectivity.NetworkDiagnostics$IcmpCheck: void <init>(com.android.server.connectivity.NetworkDiagnostics,java.net.InetAddress,java.net.InetAddress,com.android.server.connectivity.NetworkDiagnostics$Measurement)>(r0, r3, r1, $r10);

        specialinvoke $r11.<java.lang.Thread: void <init>(java.lang.Runnable)>($r12);

        $r10.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread> = $r11;

        $r13 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mExplicitSourceIcmpChecks>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

     label2:
        goto label1;

     label3:
        return;
    }

    private void prepareIcmpMeasurement(java.net.InetAddress)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.net.InetAddress r1;
        java.util.Map $r3, $r7;
        boolean $z0;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r4;
        java.lang.Thread $r5;
        com.android.server.connectivity.NetworkDiagnostics$IcmpCheck $r6;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        r1 := @parameter0: java.net.InetAddress;

        $r3 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mIcmpChecks>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new com.android.server.connectivity.NetworkDiagnostics$Measurement;

        specialinvoke $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: void <init>(com.android.server.connectivity.NetworkDiagnostics)>(r0);

        $r5 = new java.lang.Thread;

        $r6 = new com.android.server.connectivity.NetworkDiagnostics$IcmpCheck;

        specialinvoke $r6.<com.android.server.connectivity.NetworkDiagnostics$IcmpCheck: void <init>(com.android.server.connectivity.NetworkDiagnostics,java.net.InetAddress,com.android.server.connectivity.NetworkDiagnostics$Measurement)>(r0, r1, $r4);

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);

        $r4.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread> = $r5;

        $r7 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mIcmpChecks>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return;
    }

    private static java.lang.String socketAddressToString(java.net.SocketAddress)
    {
        java.net.InetSocketAddress r0;
        java.net.InetAddress r1;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r5, r7;
        int $i0;
        java.lang.Integer $r4;
        java.net.SocketAddress r6;

        r6 := @parameter0: java.net.SocketAddress;

        r0 = (java.net.InetSocketAddress) r6;

        r1 = virtualinvoke r0.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $z0 = r1 instanceof java.net.Inet6Address;

        if $z0 == 0 goto label1;

        r7 = "[%s]:%d";

        goto label2;

     label1:
        r7 = "%s:%d";

     label2:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r2[0] = $r3;

        $i0 = virtualinvoke r0.<java.net.InetSocketAddress: int getPort()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r7, $r2);

        return $r5;
    }

    private void startMeasurements()
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.util.Map $r1, $r3, $r5, $r7;
        java.util.Collection $r2, $r4, $r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r9, $r12, $r15, $r18;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r10, $r13, $r16, $r19;
        java.lang.Thread $r11, $r14, $r17, $r20;
        java.util.Iterator r21, r22, r23, r24;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mIcmpChecks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r21 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r18 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r18;

        $r20 = $r19.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread>;

        virtualinvoke $r20.<java.lang.Thread: void start()>();

        goto label1;

     label2:
        $r3 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mExplicitSourceIcmpChecks>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r15;

        $r17 = $r16.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread>;

        virtualinvoke $r17.<java.lang.Thread: void start()>();

        goto label3;

     label4:
        $r5 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsUdpChecks>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r23 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r12 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r12;

        $r14 = $r13.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread>;

        virtualinvoke $r14.<java.lang.Thread: void start()>();

        goto label5;

     label6:
        $r7 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsTlsChecks>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        r24 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r9 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r9;

        $r11 = $r10.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.Thread thread>;

        virtualinvoke $r11.<java.lang.Thread: void start()>();

        goto label7;

     label8:
        return;
    }

    private int totalMeasurementCount()
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.util.Map $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        $r1 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mIcmpChecks>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mExplicitSourceIcmpChecks>;

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i2 = $i0 + $i1;

        $r3 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsUdpChecks>;

        $i3 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $i4 = $i2 + $i3;

        $r4 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsTlsChecks>;

        $i5 = interfaceinvoke $r4.<java.util.Map: int size()>();

        $i6 = $i4 + $i5;

        return $i6;
    }

    public void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        com.android.internal.util.IndentingPrintWriter r1;
        long l0;
        java.util.Iterator r2;
        com.android.server.connectivity.NetworkDiagnostics$Measurement r3;
        java.lang.StringBuilder $r5, $r15, $r21;
        java.lang.String $r7, $r9, $r18, $r20, $r25, r28;
        java.util.concurrent.CountDownLatch $r10;
        byte $b1;
        java.util.List $r12;
        java.lang.Object $r14;
        boolean $z0, $z1;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetworkDiagnostics:");

        $r7 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.lang.String mDescription>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r9);

        $r10 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.concurrent.CountDownLatch mCountDownLatch>;

        l0 = virtualinvoke $r10.<java.util.concurrent.CountDownLatch: long getCount()>();

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: countdown wait incomplete: ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unfinished measurements");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r25);

     label1:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r12 = virtualinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.List getMeasurements()>();

        r2 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r14;

        $z0 = virtualinvoke r3.<com.android.server.connectivity.NetworkDiagnostics$Measurement: boolean checkSucceeded()>();

        if $z0 == 0 goto label3;

        r28 = ".";

        goto label4;

     label3:
        r28 = "F";

     label4:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r18 = virtualinvoke r3.<com.android.server.connectivity.NetworkDiagnostics$Measurement: java.lang.String toString()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r20);

        goto label2;

     label5:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    public java.util.List getMeasurements()
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.util.ArrayList $r2;
        int $i0;
        java.util.Map $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        java.util.Set $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z12, $z14, $z16, $z18, $z20, $z22;
        java.lang.Object $r19, $r20, $r21, $r23, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r39, $r41, $r42, $r43, $r45, $r46, $r48, $r49, $r51, $r52, $r53;
        com.android.server.connectivity.NetworkDiagnostics$Measurement $r22, $r26, $r32, $r36, $r40, $r44, $r50, $r54;
        android.util.Pair $r29, $r47;
        java.util.Iterator r55, r57, r59, r61, r63, r65, r67, r69;
        java.util.Map$Entry r56, r58, r60, r62, r64, r66, r68, r70;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

        $r2 = new java.util.ArrayList;

        $i0 = specialinvoke r0.<com.android.server.connectivity.NetworkDiagnostics: int totalMeasurementCount()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mIcmpChecks>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r55 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r51 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r56 = (java.util.Map$Entry) $r51;

        $r52 = interfaceinvoke r56.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z22 = $r52 instanceof java.net.Inet4Address;

        if $z22 == 0 goto label02;

        $r53 = interfaceinvoke r56.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r54 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r53;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r54);

     label02:
        goto label01;

     label03:
        $r5 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mExplicitSourceIcmpChecks>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r57 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r45 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r58 = (java.util.Map$Entry) $r45;

        $r46 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r47 = (android.util.Pair) $r46;

        $r48 = $r47.<android.util.Pair: java.lang.Object first>;

        $z20 = $r48 instanceof java.net.Inet4Address;

        if $z20 == 0 goto label05;

        $r49 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r50 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r49;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r50);

     label05:
        goto label04;

     label06:
        $r7 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsUdpChecks>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r59 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r41 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.util.Map$Entry) $r41;

        $r42 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z18 = $r42 instanceof java.net.Inet4Address;

        if $z18 == 0 goto label08;

        $r43 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r44 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r43;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r44);

     label08:
        goto label07;

     label09:
        $r9 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsTlsChecks>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        r61 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r37 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>();

        r62 = (java.util.Map$Entry) $r37;

        $r38 = interfaceinvoke r62.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z16 = $r38 instanceof java.net.Inet4Address;

        if $z16 == 0 goto label11;

        $r39 = interfaceinvoke r62.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r40 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r39;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r40);

     label11:
        goto label10;

     label12:
        $r11 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mIcmpChecks>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>();

        r63 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z4 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label15;

        $r33 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        r64 = (java.util.Map$Entry) $r33;

        $r34 = interfaceinvoke r64.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z14 = $r34 instanceof java.net.Inet6Address;

        if $z14 == 0 goto label14;

        $r35 = interfaceinvoke r64.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r35;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r36);

     label14:
        goto label13;

     label15:
        $r13 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mExplicitSourceIcmpChecks>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set entrySet()>();

        r65 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z5 = interfaceinvoke r65.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label18;

        $r27 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        r66 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke r66.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r29 = (android.util.Pair) $r28;

        $r30 = $r29.<android.util.Pair: java.lang.Object first>;

        $z12 = $r30 instanceof java.net.Inet6Address;

        if $z12 == 0 goto label17;

        $r31 = interfaceinvoke r66.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r32 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r31;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r32);

     label17:
        goto label16;

     label18:
        $r15 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsUdpChecks>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Set entrySet()>();

        r67 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z6 = interfaceinvoke r67.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label21;

        $r23 = interfaceinvoke r67.<java.util.Iterator: java.lang.Object next()>();

        r68 = (java.util.Map$Entry) $r23;

        $r24 = interfaceinvoke r68.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z10 = $r24 instanceof java.net.Inet6Address;

        if $z10 == 0 goto label20;

        $r25 = interfaceinvoke r68.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r25;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

     label20:
        goto label19;

     label21:
        $r17 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.Map mDnsTlsChecks>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set entrySet()>();

        r69 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z7 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label24;

        $r19 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        r70 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r70.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z8 = $r20 instanceof java.net.Inet6Address;

        if $z8 == 0 goto label23;

        $r21 = interfaceinvoke r70.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (com.android.server.connectivity.NetworkDiagnostics$Measurement) $r21;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

     label23:
        goto label22;

     label24:
        return $r2;
    }

    public void waitForMeasurements()
    {
        com.android.server.connectivity.NetworkDiagnostics r0;
        java.util.concurrent.CountDownLatch $r2;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.connectivity.NetworkDiagnostics;

     label1:
        $r2 = r0.<com.android.server.connectivity.NetworkDiagnostics: java.util.concurrent.CountDownLatch mCountDownLatch>;

        $l0 = r0.<com.android.server.connectivity.NetworkDiagnostics: long mDeadlineTime>;

        $l1 = staticinvoke <com.android.server.connectivity.NetworkDiagnostics: long now()>();

        $l2 = $l0 - $l1;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l2, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
