public class com.android.server.connectivity.Vpn extends java.lang.Object
{
    private static final boolean LOGD;
    private static final int MAX_ROUTES_TO_EVALUATE;
    static final int MAX_VPN_PROFILE_SIZE_BYTES;
    private static final long MOST_IPV4_ADDRESSES_COUNT;
    private static final java.math.BigInteger MOST_IPV6_ADDRESSES_COUNT;
    private static final java.lang.String NETWORKTYPE;
    private static final java.lang.String TAG;
    private static final long VPN_LAUNCH_IDLE_WHITELIST_DURATION_MS;
    protected boolean mAlwaysOn;
    private final java.util.Set mBlockedUidsAsToldToNetd;
    protected com.android.internal.net.VpnConfig mConfig;
    private com.android.server.connectivity.Vpn$Connection mConnection;
    private final android.content.Context mContext;
    private volatile boolean mEnableTeardown;
    private final com.android.server.connectivity.Vpn$Ikev2SessionCreator mIkev2SessionCreator;
    private java.lang.String mInterface;
    private boolean mIsPackageTargetingAtLeastQ;
    protected boolean mLockdown;
    private java.util.List mLockdownWhitelist;
    private final android.os.Looper mLooper;
    private final android.os.INetworkManagementService mNetd;
    protected android.net.NetworkAgent mNetworkAgent;
    protected final android.net.NetworkCapabilities mNetworkCapabilities;
    private final android.net.NetworkInfo mNetworkInfo;
    private android.net.INetworkManagementEventObserver mObserver;
    private int mOwnerUID;
    protected java.lang.String mPackage;
    private android.app.PendingIntent mStatusIntent;
    private final com.android.server.connectivity.Vpn$SystemServices mSystemServices;
    private final int mUserHandle;
    protected com.android.server.connectivity.Vpn$VpnRunner mVpnRunner;

    static void <clinit>()
    {
        java.math.BigInteger r0, $r1, $r2, $r3, $r4, $r5;

        <com.android.server.connectivity.Vpn: long VPN_LAUNCH_IDLE_WHITELIST_DURATION_MS> = 60000L;

        <com.android.server.connectivity.Vpn: java.lang.String TAG> = "Vpn";

        <com.android.server.connectivity.Vpn: java.lang.String NETWORKTYPE> = "VPN";

        <com.android.server.connectivity.Vpn: int MAX_VPN_PROFILE_SIZE_BYTES> = 131072;

        <com.android.server.connectivity.Vpn: int MAX_ROUTES_TO_EVALUATE> = 150;

        <com.android.server.connectivity.Vpn: boolean LOGD> = 1;

        <com.android.server.connectivity.Vpn: long MOST_IPV4_ADDRESSES_COUNT> = 3650722201L;

        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(128);

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(85L);

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(100L);

        $r5 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r4);

        <com.android.server.connectivity.Vpn: java.math.BigInteger MOST_IPV6_ADDRESSES_COUNT> = $r5;

        return;
    }

    public void <init>(android.os.Looper, android.content.Context, android.os.INetworkManagementService, int, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        android.os.Looper r1;
        android.content.Context r2;
        android.os.INetworkManagementService r3;
        int i0;
        android.security.KeyStore r4;
        com.android.server.connectivity.Vpn$SystemServices $r5;
        com.android.server.connectivity.Vpn$Ikev2SessionCreator $r6;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.INetworkManagementService;

        i0 := @parameter3: int;

        r4 := @parameter4: android.security.KeyStore;

        $r5 = new com.android.server.connectivity.Vpn$SystemServices;

        specialinvoke $r5.<com.android.server.connectivity.Vpn$SystemServices: void <init>(android.content.Context)>(r2);

        $r6 = new com.android.server.connectivity.Vpn$Ikev2SessionCreator;

        specialinvoke $r6.<com.android.server.connectivity.Vpn$Ikev2SessionCreator: void <init>()>();

        specialinvoke r0.<com.android.server.connectivity.Vpn: void <init>(android.os.Looper,android.content.Context,android.os.INetworkManagementService,int,android.security.KeyStore,com.android.server.connectivity.Vpn$SystemServices,com.android.server.connectivity.Vpn$Ikev2SessionCreator)>(r1, r2, r3, i0, r4, $r5, $r6);

        return;
    }

    protected void <init>(android.os.Looper, android.content.Context, android.os.INetworkManagementService, int, android.security.KeyStore, com.android.server.connectivity.Vpn$SystemServices, com.android.server.connectivity.Vpn$Ikev2SessionCreator)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context r1;
        android.os.INetworkManagementService r2;
        int i0, $i1;
        android.security.KeyStore r3;
        com.android.server.connectivity.Vpn$SystemServices r4;
        com.android.server.connectivity.Vpn$Ikev2SessionCreator r5;
        java.util.List $r6;
        android.util.ArraySet $r7;
        com.android.server.connectivity.Vpn$2 $r8;
        java.lang.String $r9;
        boolean $z0;
        android.net.INetworkManagementEventObserver $r10;
        android.net.NetworkInfo $r11;
        android.net.NetworkCapabilities $r12, $r14;
        android.os.RemoteException $r17;
        android.os.Looper r18;

        r0 := @this: com.android.server.connectivity.Vpn;

        r18 := @parameter0: android.os.Looper;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: android.os.INetworkManagementService;

        i0 := @parameter3: int;

        r3 := @parameter4: android.security.KeyStore;

        r4 := @parameter5: com.android.server.connectivity.Vpn$SystemServices;

        r5 := @parameter6: com.android.server.connectivity.Vpn$Ikev2SessionCreator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown> = 1;

        r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn> = 0;

        r0.<com.android.server.connectivity.Vpn: boolean mLockdown> = 0;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.android.server.connectivity.Vpn: java.util.List mLockdownWhitelist> = $r6;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: java.util.Set mBlockedUidsAsToldToNetd> = $r7;

        $r8 = new com.android.server.connectivity.Vpn$2;

        specialinvoke $r8.<com.android.server.connectivity.Vpn$2: void <init>(com.android.server.connectivity.Vpn)>(r0);

        r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver> = $r8;

        r0.<com.android.server.connectivity.Vpn: android.content.Context mContext> = r1;

        r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd> = r2;

        r0.<com.android.server.connectivity.Vpn: int mUserHandle> = i0;

        r0.<com.android.server.connectivity.Vpn: android.os.Looper mLooper> = r18;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices> = r4;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Ikev2SessionCreator mIkev2SessionCreator> = r5;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage> = "[Legacy VPN]";

        $i1 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>("[Legacy VPN]", i0);

        r0.<com.android.server.connectivity.Vpn: int mOwnerUID> = $i1;

        $r9 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean doesPackageTargetAtLeastQ(java.lang.String)>($r9);

        r0.<com.android.server.connectivity.Vpn: boolean mIsPackageTargetingAtLeastQ> = $z0;

     label1:
        $r10 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        interfaceinvoke r2.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r10);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Problem registering observer", $r17);

     label4:
        $r11 = new android.net.NetworkInfo;

        specialinvoke $r11.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(17, 0, "VPN", "");

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo> = $r11;

        $r12 = new android.net.NetworkCapabilities;

        specialinvoke $r12.<android.net.NetworkCapabilities: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities> = $r12;

        virtualinvoke $r12.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(4);

        $r14 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r14.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(15);

        virtualinvoke r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities updateCapabilities(android.net.Network)>(null);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void loadAlwaysOnPackage(android.security.KeyStore)>(r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static android.net.LinkProperties access$1000(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.LinkProperties $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        return $r1;
    }

    static android.os.INetworkManagementService access$1100(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.os.INetworkManagementService $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd>;

        return $r1;
    }

    static com.android.server.connectivity.Vpn$Ikev2SessionCreator access$1200(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$Ikev2SessionCreator $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Ikev2SessionCreator mIkev2SessionCreator>;

        return $r1;
    }

    static boolean access$1300(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown>;

        return $z0;
    }

    static android.net.INetworkManagementEventObserver access$1600(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.INetworkManagementEventObserver $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        return $r1;
    }

    static void access$1700(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

        return;
    }

    static android.net.NetworkInfo access$1800(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static java.lang.String access$200(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        return $r1;
    }

    static java.lang.String access$202(com.android.server.connectivity.Vpn, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r1;

        return r1;
    }

    static int access$300(com.android.server.connectivity.Vpn, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniCheck(java.lang.String)>(r1);

        return $i0;
    }

    static com.android.server.connectivity.Vpn$Connection access$400(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$Connection $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        return $r1;
    }

    static android.content.Context access$500(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        return $r1;
    }

    static void access$600(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void cleanupVpnStateLocked()>();

        return;
    }

    static boolean access$700(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isSettingsVpnLocked()>();

        return $z0;
    }

    static void access$800(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareStatusIntent()>();

        return;
    }

    static void access$900(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentConnect()>();

        return;
    }

    private void agentConnect()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.LinkProperties r1;
        long l0;
        android.net.NetworkCapabilities $r3, $r13, $r14, $r16, $r26;
        android.net.NetworkInfo$DetailedState $r5, $r28;
        android.net.NetworkInfo $r6, $r25, $r27;
        android.net.NetworkAgentConfig $r7;
        com.android.internal.net.VpnConfig $r8, $r17, $r19;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r12;
        int $i1, $i2, $i3;
        int[] $r15;
        java.util.List $r18, $r20;
        java.util.Set $r21;
        com.android.server.connectivity.Vpn$1 r22;
        android.os.Looper $r23;
        android.content.Context $r24;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r3.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(12);

        $r6 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $r5 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        virtualinvoke $r6.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r5, null, null);

        $r7 = new android.net.NetworkAgentConfig;

        specialinvoke $r7.<android.net.NetworkAgentConfig: void <init>()>();

        $r8 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $z0 = $r8.<com.android.internal.net.VpnConfig: boolean allowBypass>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r7.<android.net.NetworkAgentConfig: boolean allowBypass> = z2;

        $r13 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        $i1 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        virtualinvoke $r13.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setOwnerUid(int)>($i1);

        $r14 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        $r15 = newarray (int)[1];

        $i2 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        $r15[0] = $i2;

        virtualinvoke $r14.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setAdministratorUids(int[])>($r15);

        $r16 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        $i3 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $r17 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r18 = $r17.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        $r19 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r20 = $r19.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        $r21 = virtualinvoke r0.<com.android.server.connectivity.Vpn: java.util.Set createUserAndRestrictedProfilesRanges(int,java.util.List,java.util.List)>($i3, $r18, $r20);

        virtualinvoke $r16.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>($r21);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        r22 = new com.android.server.connectivity.Vpn$1;

        $r23 = r0.<com.android.server.connectivity.Vpn: android.os.Looper mLooper>;

        $r24 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r25 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $r26 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        specialinvoke r22.<com.android.server.connectivity.Vpn$1: void <init>(com.android.server.connectivity.Vpn,android.os.Looper,android.content.Context,java.lang.String,android.net.NetworkInfo,android.net.NetworkCapabilities,android.net.LinkProperties,int,android.net.NetworkAgentConfig,int)>(r0, $r23, $r24, "VPN", $r25, $r26, r1, 101, $r7, -2);

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = r22;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r27 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r27.<android.net.NetworkInfo: void setIsAvailable(boolean)>(1);

        $r28 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r28, "agentConnect");

        return;

     label5:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r12;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void agentDisconnect()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1, $r2;
        boolean $z0;
        android.net.NetworkInfo$DetailedState $r3;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r1.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r2.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        $r3 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r3, "agentDisconnect");

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = null;

     label1:
        return;
    }

    private void agentDisconnect(android.net.NetworkAgent)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkAgent r1;
        android.net.NetworkInfo $r3, $r4;
        android.net.NetworkInfo$DetailedState $r5;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.net.NetworkAgent;

        if r1 == null goto label1;

        $r3 = new android.net.NetworkInfo;

        $r4 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r3.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r4);

        virtualinvoke $r3.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        $r5 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke $r3.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r5, null, null);

        virtualinvoke r1.<android.net.NetworkAgent: void sendNetworkInfo(android.net.NetworkInfo)>($r3);

     label1:
        return;
    }

    public static void applyUnderlyingCapabilities(android.net.ConnectivityManager, android.net.Network[], android.net.NetworkCapabilities, boolean)
    {
        android.net.ConnectivityManager r0;
        android.net.Network[] r1;
        android.net.NetworkCapabilities r2, r3;
        boolean $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z16, z18, z19, z20;
        android.net.Network $r10;
        int $i0, $i1, $i2, i4, i6, i7, i8, i9, i10;
        int[] r12, r13;

        r0 := @parameter0: android.net.ConnectivityManager;

        r1 := @parameter1: android.net.Network[];

        r2 := @parameter2: android.net.NetworkCapabilities;

        z13 := @parameter3: boolean;

        z14 = 1;

        r12 = newarray (int)[1];

        r12[0] = 4;

        i4 = 0;

        i6 = 0;

        z16 = 0;

        z18 = 0;

        z19 = 1;

        z20 = 0;

        if r1 == null goto label07;

        i7 = lengthof r1;

        i8 = 0;

     label01:
        if i8 >= i7 goto label06;

        $r10 = r1[i8];

        r3 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>($r10);

        if r3 != null goto label02;

        goto label05;

     label02:
        r13 = virtualinvoke r3.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        i9 = lengthof r13;

        i10 = 0;

     label03:
        if i10 >= i9 goto label04;

        $i2 = r13[i10];

        r12 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r12, $i2);

        i10 = i10 + 1;

        goto label03;

     label04:
        $i0 = virtualinvoke r3.<android.net.NetworkCapabilities: int getLinkDownstreamBandwidthKbps()>();

        i4 = staticinvoke <android.net.NetworkCapabilities: int minBandwidth(int,int)>(i4, $i0);

        $i1 = virtualinvoke r3.<android.net.NetworkCapabilities: int getLinkUpstreamBandwidthKbps()>();

        i6 = staticinvoke <android.net.NetworkCapabilities: int minBandwidth(int,int)>(i6, $i1);

        $z5 = virtualinvoke r3.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        $z6 = $z5 ^ 1;

        z13 = z13 | $z6;

        $z7 = virtualinvoke r3.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        $z8 = $z7 ^ 1;

        z16 = z16 | $z8;

        $z9 = virtualinvoke r3.<android.net.NetworkCapabilities: boolean hasCapability(int)>(20);

        $z10 = $z9 ^ 1;

        z18 = z18 | $z10;

        $z11 = virtualinvoke r3.<android.net.NetworkCapabilities: boolean hasCapability(int)>(21);

        $z12 = $z11 ^ 1;

        z19 = z19 & $z12;

        z20 = 1;

     label05:
        i8 = i8 + 1;

        z14 = 1;

        goto label01;

     label06:
        goto label08;

     label07:
        z14 = 1;

        z20 = 0;

        z19 = 1;

        z18 = 0;

        z16 = 0;

        i6 = 0;

        i4 = 0;

     label08:
        if z20 != 0 goto label09;

        z13 = 1;

        z16 = 0;

        z18 = 0;

        z19 = 0;

     label09:
        virtualinvoke r2.<android.net.NetworkCapabilities: void setTransportTypes(int[])>(r12);

        virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setLinkDownstreamBandwidthKbps(int)>(i4);

        virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setLinkUpstreamBandwidthKbps(int)>(i6);

        if z13 != 0 goto label10;

        goto label11;

     label10:
        z14 = 0;

     label11:
        virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setCapability(int,boolean)>(11, z14);

        $z2 = z16 ^ 1;

        virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setCapability(int,boolean)>(18, $z2);

        $z3 = z18 ^ 1;

        virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setCapability(int,boolean)>(20, $z3);

        $z4 = z19 ^ 1;

        virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setCapability(int,boolean)>(21, $z4);

        return;
    }

    private boolean canHaveRestrictedProfile(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        long l1;
        boolean z0;
        android.content.Context $r2;
        android.os.UserManager $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r2);

        z0 = virtualinvoke $r3.<android.os.UserManager: boolean canHaveRestrictedProfile(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void cleanupVpnStateLocked()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkCapabilities $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = null;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>(null);

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = null;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = null;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner> = null;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = null;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

        return;
    }

    private static boolean doesPackageHaveAppop(android.content.Context, java.lang.String, int)
    {
        android.content.Context r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        java.lang.Object $r2;
        android.app.AppOpsManager $r3;
        boolean z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r3 = (android.app.AppOpsManager) $r2;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke $r3.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(i0, $i1, r1);

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean doesPackageTargetAtLeastQ(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r2, $r10;
        boolean z0, z1;
        int i0, $i1;
        android.content.Context $r3;
        android.content.pm.ApplicationInfo $r4;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.StringBuilder $r6;
        android.content.pm.PackageManager r11;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        $r2 = "[Legacy VPN]";

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r11 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label2:
        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $r4 = virtualinvoke r11.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r1, 0, $i1);

        i0 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label3:
        if i0 < 29 goto label4;

        goto label5;

     label4:
        z1 = 0;

     label5:
        return z1;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find \"");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vpn", $r10);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label6;
    }

    private void enforceControlPermission()
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_VPN", "Unauthorized Caller");

        return;
    }

    private void enforceControlPermissionOrInternalCaller()
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_VPN", "Unauthorized Caller");

        return;
    }

    private void enforceNotRestrictedUser()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity._$$Lambda$Vpn$S2EK4wFrspvxxxzu8J3SwhT7oVM $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = new com.android.server.connectivity._$$Lambda$Vpn$S2EK4wFrspvxxxzu8J3SwhT7oVM;

        specialinvoke $r1.<com.android.server.connectivity._$$Lambda$Vpn$S2EK4wFrspvxxxzu8J3SwhT7oVM: void <init>(com.android.server.connectivity.Vpn)>(r0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r1);

        return;
    }

    private void enforceSettingsPermission()
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.NETWORK_SETTINGS", "Unauthorized Caller");

        return;
    }

    private static android.net.RouteInfo findIPv4DefaultRoute(android.net.LinkProperties)
    {
        java.util.Iterator r0;
        java.util.List $r1;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r2;
        java.lang.Object $r3;
        java.net.InetAddress $r4;
        android.net.LinkProperties r5;
        android.net.RouteInfo r6;

        r5 := @parameter0: android.net.LinkProperties;

        $r1 = virtualinvoke r5.<android.net.LinkProperties: java.util.List getAllRoutes()>();

        r0 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.net.RouteInfo) $r3;

        $z1 = virtualinvoke r6.<android.net.RouteInfo: boolean isDefaultRoute()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r6.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z2 = $r4 instanceof java.net.Inet4Address;

        if $z2 == 0 goto label2;

        return r6;

     label2:
        goto label1;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to find IPv4 default gateway");

        throw $r2;
    }

    private int getAppUid(java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r2;
        int i0, $i1, $i2;
        boolean $z0;
        com.android.server.connectivity._$$Lambda$Vpn$01GHnWeBsEVRYvEsZRkJXx1CEVs $r3;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        java.lang.Object $r6;
        java.lang.Integer $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = "[Legacy VPN]";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        return $i2;

     label1:
        $r3 = new com.android.server.connectivity._$$Lambda$Vpn$01GHnWeBsEVRYvEsZRkJXx1CEVs;

        $r4 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        specialinvoke $r3.<com.android.server.connectivity._$$Lambda$Vpn$01GHnWeBsEVRYvEsZRkJXx1CEVs: void <init>(android.content.pm.PackageManager,java.lang.String,int)>($r5, r1, i0);

        $r6 = staticinvoke <android.os.Binder: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    private java.util.SortedSet getAppsUids(java.util.List, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, i1;
        java.util.TreeSet $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Integer $r5;
        java.util.List r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r6 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        i1 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>($r4, i0);

        if i1 == -1 goto label2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r2.<java.util.SortedSet: boolean add(java.lang.Object)>($r5);

     label2:
        goto label1;

     label3:
        return $r2;
    }

    private com.android.internal.net.LegacyVpnInfo getLegacyVpnInfoPrivileged()
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0, $z1;
        com.android.internal.net.VpnConfig $r1;
        java.lang.String $r2;
        android.net.NetworkInfo $r3, $r4;
        int $i0;
        android.app.PendingIntent $r5;
        java.lang.Throwable $r6;
        com.android.internal.net.LegacyVpnInfo r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isSettingsVpnLocked()>();

     label2:
        if z0 != 0 goto label3;

        exitmonitor r0;

        return null;

     label3:
        r7 = new com.android.internal.net.LegacyVpnInfo;

        specialinvoke r7.<com.android.internal.net.LegacyVpnInfo: void <init>()>();

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r2 = $r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        r7.<com.android.internal.net.LegacyVpnInfo: java.lang.String key> = $r2;

        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $i0 = staticinvoke <com.android.internal.net.LegacyVpnInfo: int stateFromNetworkInfo(android.net.NetworkInfo)>($r3);

        r7.<com.android.internal.net.LegacyVpnInfo: int state> = $i0;

        $r4 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $z1 = virtualinvoke $r4.<android.net.NetworkInfo: boolean isConnected()>();

        if $z1 == 0 goto label4;

        $r5 = r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent>;

        r7.<com.android.internal.net.LegacyVpnInfo: android.app.PendingIntent intent> = $r5;

     label4:
        exitmonitor r0;

        return r7;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private boolean isCurrentIkev2VpnLocked(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        boolean $z0, $z1, z2;
        com.android.server.connectivity.Vpn$VpnRunner $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentPreparedPackage(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        $z1 = $r2 instanceof com.android.server.connectivity.Vpn$IkeV2VpnRunner;

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isCurrentPreparedPackage(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r2;
        int $i0, $i1, $i2;
        boolean $z0, z1;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $i1 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>(r1, $i0);

        $i2 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        if $i1 != $i2 goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isNullOrLegacyVpn(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $r1 = "[Legacy VPN]";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private boolean isRunningLocked()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkAgent $r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isSettingsVpnLocked()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$VpnRunner $r1;
        java.lang.String $r2, $r3;
        boolean $z0, z1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        if $r1 == null goto label1;

        $r3 = "[Legacy VPN]";

        $r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isVpnPreConsented(android.content.Context, java.lang.String, int)
    {
        android.content.Context r0;
        java.lang.String r1;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <com.android.server.connectivity.Vpn: boolean isVpnProfilePreConsented(android.content.Context,java.lang.String)>(r0, r1);

        return $z1;

     label2:
        $z0 = staticinvoke <com.android.server.connectivity.Vpn: boolean isVpnServicePreConsented(android.content.Context,java.lang.String)>(r0, r1);

        return $z0;
    }

    private static boolean isVpnProfilePreConsented(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.connectivity.Vpn: boolean doesPackageHaveAppop(android.content.Context,java.lang.String,int)>(r0, r1, 94);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <com.android.server.connectivity.Vpn: boolean isVpnServicePreConsented(android.content.Context,java.lang.String)>(r0, r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private static boolean isVpnServicePreConsented(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.connectivity.Vpn: boolean doesPackageHaveAppop(android.content.Context,java.lang.String,int)>(r0, r1, 47);

        return $z0;
    }

    private native boolean jniAddAddress(java.lang.String, java.lang.String, int);

    private native int jniCheck(java.lang.String);

    private native int jniCreate(int);

    private native boolean jniDelAddress(java.lang.String, java.lang.String, int);

    private native java.lang.String jniGetName(int);

    private native void jniReset(java.lang.String);

    private native int jniSetAddresses(java.lang.String, java.lang.String);

    static java.lang.Integer lambda$getAppUid$0(android.content.pm.PackageManager, java.lang.String, int) throws java.lang.Exception
    {
        java.lang.String r0;
        java.lang.Integer $r1, $r3;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        android.content.pm.PackageManager r4;
        int i0, i1;

        r4 := @parameter0: android.content.pm.PackageManager;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        i1 = virtualinvoke r4.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r0, i0);

     label2:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        return $r3;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void loadAlwaysOnPackage(android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        java.lang.String r1, r8;
        int i1, $i2, $i3, $i4;
        com.android.server.connectivity.Vpn$SystemServices $r2, $r3, r7;
        boolean $z0, z2;
        java.lang.String[] $r4;
        java.lang.Throwable $r5;
        android.security.KeyStore r6;
        java.util.List r9;

        r0 := @this: com.android.server.connectivity.Vpn;

        r6 := @parameter0: android.security.KeyStore;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r1 = virtualinvoke $r2.<com.android.server.connectivity.Vpn$SystemServices: java.lang.String settingsSecureGetStringForUser(java.lang.String,int)>("always_on_vpn_app", $i2);

        r7 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

     label02:
        z2 = 0;

     label03:
        $i3 = virtualinvoke r7.<com.android.server.connectivity.Vpn$SystemServices: int settingsSecureGetIntForUser(java.lang.String,int,int)>("always_on_vpn_lockdown", 0, i1);

        if $i3 == 0 goto label05;

     label04:
        z2 = 1;

     label05:
        $r3 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        $i4 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r8 = virtualinvoke $r3.<com.android.server.connectivity.Vpn$SystemServices: java.lang.String settingsSecureGetStringForUser(java.lang.String,int)>("always_on_vpn_lockdown_whitelist", $i4);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r8);

        if $z0 == 0 goto label07;

        r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label06:
        goto label08;

     label07:
        $r4 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

     label08:
        specialinvoke r0.<com.android.server.connectivity.Vpn: boolean setAlwaysOnPackageInternal(java.lang.String,boolean,java.util.List,android.security.KeyStore)>(r1, z2, r9, r6);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label10:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    private android.net.LinkProperties makeLinkProperties()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig $r2, $r3, $r6, $r8, $r10, $r12, $r15, $r19, $r20, $r21, $r33, $r37, $r41;
        android.net.LinkProperties $r4;
        java.lang.String $r5, $r17, $r18, $r24, $r36;
        java.util.List $r7, $r9, $r11, $r16, $r22, $r34, $r38, $r42;
        android.net.ProxyInfo $r13;
        java.lang.StringBuilder $r14;
        int $i0, $i1;
        boolean $z0, $z3, $z5, $z6, $z7, $z9, $z10, $z11, $z13, $z14, z15, z16, z17, z18, z19, z20, z21, z22;
        java.lang.Object $r23, $r35, $r39, $r43;
        android.net.RouteInfo $r27, $r30, r49;
        android.net.IpPrefix $r28, $r31, $r40;
        java.net.InetAddress $r29, $r32, $r44, $r45, r50, r52;
        java.util.Iterator r46, r48, r51, r54;
        android.net.LinkAddress r47;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        z15 = $r2.<com.android.internal.net.VpnConfig: boolean allowIPv4>;

        $r3 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        z16 = $r3.<com.android.internal.net.VpnConfig: boolean allowIPv6>;

        $r4 = new android.net.LinkProperties;

        specialinvoke $r4.<android.net.LinkProperties: void <init>()>();

        $r5 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke $r4.<android.net.LinkProperties: void setInterfaceName(java.lang.String)>($r5);

        z17 = z15;

        z18 = z16;

        $r6 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r7 = $r6.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        if $r7 == null goto label02;

        $r41 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r42 = $r41.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        r46 = interfaceinvoke $r42.<java.util.List: java.util.Iterator iterator()>();

     label01:
        z17 = z15;

        z18 = z16;

        $z11 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label02;

        $r43 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (android.net.LinkAddress) $r43;

        virtualinvoke $r4.<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>(r47);

        $r44 = virtualinvoke r47.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z13 = $r44 instanceof java.net.Inet4Address;

        z15 = z15 | $z13;

        $r45 = virtualinvoke r47.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z14 = $r45 instanceof java.net.Inet6Address;

        z16 = z16 | $z14;

        goto label01;

     label02:
        z19 = z17;

        z20 = z18;

        $r8 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r9 = $r8.<com.android.internal.net.VpnConfig: java.util.List routes>;

        if $r9 == null goto label04;

        $r37 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r38 = $r37.<com.android.internal.net.VpnConfig: java.util.List routes>;

        r48 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label03:
        z19 = z17;

        z20 = z18;

        $z7 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label04;

        $r39 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (android.net.RouteInfo) $r39;

        virtualinvoke $r4.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>(r49);

        $r40 = virtualinvoke r49.<android.net.RouteInfo: android.net.IpPrefix getDestination()>();

        r50 = virtualinvoke $r40.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        $z9 = r50 instanceof java.net.Inet4Address;

        z17 = z17 | $z9;

        $z10 = r50 instanceof java.net.Inet6Address;

        z18 = z18 | $z10;

        goto label03;

     label04:
        z21 = z19;

        z22 = z20;

        $r10 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r11 = $r10.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        if $r11 == null goto label06;

        $r33 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r34 = $r33.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        r51 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label05:
        z21 = z19;

        z22 = z20;

        $z3 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r35 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        $r36 = (java.lang.String) $r35;

        r52 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>($r36);

        virtualinvoke $r4.<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>(r52);

        $z5 = r52 instanceof java.net.Inet4Address;

        z19 = z19 | $z5;

        $z6 = r52 instanceof java.net.Inet6Address;

        z20 = z20 | $z6;

        goto label05;

     label06:
        $r12 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r13 = $r12.<com.android.internal.net.VpnConfig: android.net.ProxyInfo proxyInfo>;

        virtualinvoke $r4.<android.net.LinkProperties: void setHttpProxy(android.net.ProxyInfo)>($r13);

        if z21 != 0 goto label07;

        $r30 = new android.net.RouteInfo;

        $r31 = new android.net.IpPrefix;

        $r32 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        specialinvoke $r31.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r32, 0);

        specialinvoke $r30.<android.net.RouteInfo: void <init>(android.net.IpPrefix,int)>($r31, 7);

        virtualinvoke $r4.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>($r30);

     label07:
        if z22 != 0 goto label08;

        $r27 = new android.net.RouteInfo;

        $r28 = new android.net.IpPrefix;

        $r29 = <java.net.Inet6Address: java.net.InetAddress ANY>;

        specialinvoke $r28.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r29, 0);

        specialinvoke $r27.<android.net.RouteInfo: void <init>(android.net.IpPrefix,int)>($r28, 7);

        virtualinvoke $r4.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>($r27);

     label08:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r16 = $r15.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        if $r16 == null goto label10;

        $r21 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r22 = $r21.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        r54 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r23 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        $r24 = (java.lang.String) $r23;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label09;

     label10:
        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r4.<android.net.LinkProperties: void setDomains(java.lang.String)>($r18);

        $r19 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $i0 = $r19.<com.android.internal.net.VpnConfig: int mtu>;

        if $i0 <= 0 goto label11;

        $r20 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $i1 = $r20.<com.android.internal.net.VpnConfig: int mtu>;

        virtualinvoke $r4.<android.net.LinkProperties: void setMtu(int)>($i1);

     label11:
        return $r4;
    }

    private void prepareInternal(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        java.lang.StringBuilder r1, r40, r42;
        java.lang.String $r2, $r5, $r9, $r18, $r27, $r34, r35;
        com.android.server.connectivity.Vpn$VpnRunner $r3, $r12;
        int $i2, $i3, $i4, $i5, $i7, $i9;
        boolean $z0, $z1;
        android.os.INetworkManagementService $r10, $r38;
        android.net.NetworkInfo$DetailedState $r11;
        com.android.server.connectivity.Vpn$Connection $r13, $r16, r36;
        android.os.IBinder $r14;
        android.os.Parcel $r15;
        android.content.Context $r17;
        android.net.NetworkCapabilities $r19;
        java.lang.Exception $r21, $r22, $r29;
        java.lang.Throwable $r28;

        r0 := @this: com.android.server.connectivity.Vpn;

        r35 := @parameter0: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        if $r2 == null goto label02;

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = null;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

        $r18 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void jniReset(java.lang.String)>($r18);

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = null;

        $r19 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r19.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>(null);

     label02:
        r36 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

     label03:
        if r36 == null goto label09;

     label04:
        $r13 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        $r14 = staticinvoke <com.android.server.connectivity.Vpn$Connection: android.os.IBinder access$000(com.android.server.connectivity.Vpn$Connection)>($r13);

        $r15 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        interfaceinvoke $r14.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16777215, $r15, null, 1);

     label05:
        goto label07;

     label06:
        $r21 := @caughtexception;

     label07:
        $r17 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r16 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        virtualinvoke $r17.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r16);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void cleanupVpnStateLocked()>();

     label08:
        goto label10;

     label09:
        $r3 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        if $r3 == null goto label10;

        $r12 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        virtualinvoke $r12.<com.android.server.connectivity.Vpn$VpnRunner: void exit()>();

     label10:
        $r38 = r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd>;

        $i9 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        interfaceinvoke $r38.<android.os.INetworkManagementService: void denyProtect(int)>($i9);

     label11:
        goto label14;

     label12:
        $r29 := @caughtexception;

     label13:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to disallow UID ");

        $i7 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to call protect() ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r34 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Vpn", $r34);

     label14:
        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Switched from ");

        $r5 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r9 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", $r9);

        r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage> = r35;

        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $i3 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>(r35, $i2);

        r0.<com.android.server.connectivity.Vpn: int mOwnerUID> = $i3;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean doesPackageTargetAtLeastQ(java.lang.String)>(r35);

        r0.<com.android.server.connectivity.Vpn: boolean mIsPackageTargetingAtLeastQ> = $z0;

     label15:
        $r10 = r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd>;

        $i4 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        interfaceinvoke $r10.<android.os.INetworkManagementService: void allowProtect(int)>($i4);

     label16:
        goto label19;

     label17:
        $r22 := @caughtexception;

     label18:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to allow UID ");

        $i5 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to call protect() ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r27 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Vpn", $r27);

     label19:
        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = null;

        $r11 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState IDLE>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r11, "prepare");

        $z1 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void setVpnForcedLocked(boolean)>($z1);

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label21:
        $r28 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r28;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
    }

    private void prepareStatusIntent()
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        android.content.Context $r2;
        android.app.PendingIntent $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r3 = staticinvoke <com.android.internal.net.VpnConfig: android.app.PendingIntent getIntentForStatusPanel(android.content.Context)>($r2);

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = $r3;

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void saveAlwaysOnPackage()
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        com.android.server.connectivity.Vpn$SystemServices $r1, r4, $r5;
        java.lang.String $r2, $r7;
        int $i1, $i3, $i4;
        boolean $z0, $z1;
        java.lang.Throwable $r3;
        byte b2;
        java.util.List $r6;

        r0 := @this: com.android.server.connectivity.Vpn;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        $r2 = virtualinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String getAlwaysOnPackage()>();

        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        virtualinvoke $r1.<com.android.server.connectivity.Vpn$SystemServices: void settingsSecurePutStringForUser(java.lang.String,java.lang.String,int)>("always_on_vpn_app", $r2, $i1);

        r4 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z0 == 0 goto label3;

        $z1 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        if $z1 == 0 goto label3;

     label2:
        b2 = 1;

        goto label4;

     label3:
        b2 = 0;

     label4:
        $i3 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        virtualinvoke r4.<com.android.server.connectivity.Vpn$SystemServices: void settingsSecurePutIntForUser(java.lang.String,int,int)>("always_on_vpn_lockdown", b2, $i3);

        $r5 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        $r6 = r0.<com.android.server.connectivity.Vpn: java.util.List mLockdownWhitelist>;

        $r7 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", $r6);

        $i4 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        virtualinvoke $r5.<com.android.server.connectivity.Vpn$SystemServices: void settingsSecurePutStringForUser(java.lang.String,java.lang.String,int)>("always_on_vpn_lockdown_whitelist", $r7, $i4);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private boolean setAllowOnlyVpnForUids(boolean, java.util.Collection)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;
        java.util.Collection r1;
        int $i0, $i1;
        android.net.UidRange[] $r3, r18;
        java.lang.Object[] $r4, $r13;
        android.os.INetworkManagementService $r5;
        java.util.Set $r6, $r7;
        java.lang.Exception $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r14, $r17;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r3 = newarray (android.net.UidRange)[$i1];

        $r4 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        r18 = (android.net.UidRange[]) $r4;

     label2:
        $r5 = r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setAllowOnlyVpnForUids(boolean,android.net.UidRange[])>(z0, r18);

     label3:
        if z0 == 0 goto label4;

        $r7 = r0.<com.android.server.connectivity.Vpn: java.util.Set mBlockedUidsAsToldToNetd>;

        interfaceinvoke $r7.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        goto label5;

     label4:
        $r6 = r0.<com.android.server.connectivity.Vpn: java.util.Set mBlockedUidsAsToldToNetd>;

        interfaceinvoke $r6.<java.util.Set: boolean removeAll(java.util.Collection)>(r1);

     label5:
        return 1;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating blocked=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for UIDs ");

        $r13 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r14 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r13);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", $r17, $r8);

        return 0;

        catch android.os.RemoteException from label2 to label3 with label6;
        catch java.lang.RuntimeException from label2 to label3 with label6;
    }

    private boolean setAlwaysOnPackageInternal(java.lang.String, boolean, java.util.List, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0, $z2, $z3, $z4, $z5, $z6, z7, z8, $z9;
        java.util.Iterator r1;
        java.lang.String r2, $r3, $r11, $r16, r18;
        long l0;
        android.net.NetworkInfo $r4;
        android.net.NetworkInfo$DetailedState $r5;
        java.util.ArrayList $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r12;
        java.lang.Throwable $r17;
        java.util.List r19, r25;
        android.security.KeyStore r20;
        com.android.internal.net.VpnProfile r23;
        byte b3;

        r0 := @this: com.android.server.connectivity.Vpn;

        r18 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r19 := @parameter2: java.util.List;

        r20 := @parameter3: android.security.KeyStore;

        $r3 = "[Legacy VPN]";

        z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if z7 == 0 goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not setting legacy VPN \"");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" as always-on.");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vpn", $r16);

        return 0;

     label01:
        if r19 == null goto label04;

        r1 = interfaceinvoke r19.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label04;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r7;

        $z6 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");

        if $z6 == 0 goto label03;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not setting always-on vpn, invalid whitelisted package: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vpn", $r11);

        return 0;

     label03:
        goto label02;

     label04:
        if r18 == null goto label11;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        r23 = virtualinvoke r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnProfile getVpnProfilePrivileged(java.lang.String,android.security.KeyStore)>(r18, r20);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        if r23 != null goto label07;

        b3 = 1;

        goto label08;

     label07:
        b3 = 2;

     label08:
        $z4 = virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean setPackageAuthorization(java.lang.String,int)>(r18, b3);

        if $z4 != 0 goto label09;

        return 0;

     label09:
        r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn> = 1;

        goto label12;

     label10:
        $r17 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r17;

     label11:
        r18 = "[Legacy VPN]";

        r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn> = 0;

     label12:
        z8 = 0;

        $z2 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z2 == 0 goto label13;

        z8 = 0;

        if z0 == 0 goto label13;

        z8 = 1;

     label13:
        r0.<com.android.server.connectivity.Vpn: boolean mLockdown> = z8;

        if z8 == 0 goto label14;

        if r19 == null goto label14;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r19);

        r25 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r6);

        goto label15;

     label14:
        r25 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label15:
        r0.<com.android.server.connectivity.Vpn: java.util.List mLockdownWhitelist> = r25;

        $z9 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentPreparedPackage(java.lang.String)>(r18);

        if $z9 == 0 goto label16;

        $r4 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $r5 = virtualinvoke $r4.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateAlwaysOnNotification(android.net.NetworkInfo$DetailedState)>($r5);

        $z3 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void setVpnForcedLocked(boolean)>($z3);

        goto label17;

     label16:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>(r18);

     label17:
        return 1;

        catch java.lang.Throwable from label05 to label06 with label10;
    }

    private void setVpnForcedLocked(boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0, $z1, $z5;
        java.util.Iterator r2;
        android.net.UidRange r3, $r12;
        java.lang.String $r4, $r7;
        java.util.ArrayList $r5, r13;
        java.util.List $r6;
        android.util.ArraySet $r8;
        java.util.Set $r9, $r10, r14;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r11;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z1 = staticinvoke <com.android.server.connectivity.Vpn: boolean isNullOrLegacyVpn(java.lang.String)>($r4);

        if $z1 == 0 goto label1;

        r13 = null;

        goto label2;

     label1:
        $r5 = new java.util.ArrayList;

        $r6 = r0.<com.android.server.connectivity.Vpn: java.util.List mLockdownWhitelist>;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r13 = $r5;

        $r7 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        $r8 = new android.util.ArraySet;

        $r9 = r0.<com.android.server.connectivity.Vpn: java.util.Set mBlockedUidsAsToldToNetd>;

        specialinvoke $r8.<android.util.ArraySet: void <init>(java.util.Collection)>($r9);

        if z0 == 0 goto label6;

        $i0 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r14 = virtualinvoke r0.<com.android.server.connectivity.Vpn: java.util.Set createUserAndRestrictedProfilesRanges(int,java.util.List,java.util.List)>($i0, null, r13);

        r2 = interfaceinvoke r14.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.UidRange) $r11;

        $i1 = r3.<android.net.UidRange: int start>;

        if $i1 != 0 goto label4;

        interfaceinvoke r14.<java.util.Set: boolean remove(java.lang.Object)>(r3);

        $i2 = r3.<android.net.UidRange: int stop>;

        if $i2 == 0 goto label4;

        $r12 = new android.net.UidRange;

        $i3 = r3.<android.net.UidRange: int stop>;

        specialinvoke $r12.<android.net.UidRange: void <init>(int,int)>(1, $i3);

        interfaceinvoke r14.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label4:
        goto label3;

     label5:
        interfaceinvoke $r8.<java.util.Set: boolean removeAll(java.util.Collection)>(r14);

        $r10 = r0.<com.android.server.connectivity.Vpn: java.util.Set mBlockedUidsAsToldToNetd>;

        interfaceinvoke r14.<java.util.Set: boolean removeAll(java.util.Collection)>($r10);

        goto label7;

     label6:
        r14 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label7:
        specialinvoke r0.<com.android.server.connectivity.Vpn: boolean setAllowOnlyVpnForUids(boolean,java.util.Collection)>(0, $r8);

        specialinvoke r0.<com.android.server.connectivity.Vpn: boolean setAllowOnlyVpnForUids(boolean,java.util.Collection)>(1, r14);

        return;
    }

    private void startLegacyVpn(com.android.internal.net.VpnConfig, java.lang.String[], java.lang.String[], com.android.internal.net.VpnProfile)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String[] r1, r2;
        com.android.internal.net.VpnProfile r3;
        com.android.server.connectivity.Vpn$LegacyVpnRunner r4;
        android.net.NetworkInfo$DetailedState $r5;
        java.lang.Throwable $r6;
        com.android.internal.net.VpnConfig r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r7 := @parameter0: com.android.internal.net.VpnConfig;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: com.android.internal.net.VpnProfile;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.android.server.connectivity.Vpn: void stopVpnRunnerPrivileged()>();

        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>("[Legacy VPN]");

        $r5 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r5, "startLegacyVpn");

        r4 = new com.android.server.connectivity.Vpn$LegacyVpnRunner;

        specialinvoke r4.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void <init>(com.android.server.connectivity.Vpn,com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[],com.android.internal.net.VpnProfile)>(r0, r7, r1, r2, r3);

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner> = r4;

        virtualinvoke r4.<com.android.server.connectivity.Vpn$VpnRunner: void start()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void startVpnProfilePrivileged(com.android.internal.net.VpnProfile, java.lang.String, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        android.security.KeyStore r1;
        com.android.internal.net.VpnConfig r2, $r5, $r6, $r7, $r9, $r14, $r16, $r18, $r19;
        int i0, $i2;
        android.net.NetworkInfo$DetailedState $r3, $r10, $r22;
        java.lang.String $r4, $r13, $r15, $r17, r24;
        boolean $z0, $z1;
        long $l1;
        android.net.ProxyInfo $r8;
        java.lang.Throwable $r20, $r21;
        com.android.internal.net.VpnProfile r23;
        java.lang.StringBuilder r25;
        com.android.server.connectivity.Vpn$IkeV2VpnRunner r26;
        android.net.Ikev2VpnProfile $r27;
        java.lang.IllegalArgumentException r29;

        r0 := @this: com.android.server.connectivity.Vpn;

        r23 := @parameter0: com.android.internal.net.VpnProfile;

        r24 := @parameter1: java.lang.String;

        r1 := @parameter2: android.security.KeyStore;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>(r24);

        $r3 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r3, "startPlatformVpn");

     label02:
        r2 = new com.android.internal.net.VpnConfig;

        specialinvoke r2.<com.android.internal.net.VpnConfig: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r2;

        $r4 = "[Legacy VPN]";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r24);

        if $z0 == 0 goto label04;

        $r14 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r14.<com.android.internal.net.VpnConfig: boolean legacy> = 1;

        $r16 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r15 = r23.<com.android.internal.net.VpnProfile: java.lang.String name>;

        $r16.<com.android.internal.net.VpnConfig: java.lang.String session> = $r15;

        $r18 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r17 = r23.<com.android.internal.net.VpnProfile: java.lang.String key>;

        $r18.<com.android.internal.net.VpnConfig: java.lang.String user> = $r17;

        $r19 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r19.<com.android.internal.net.VpnConfig: boolean isMetered> = 1;

     label03:
        goto label05;

     label04:
        $r5 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r5.<com.android.internal.net.VpnConfig: java.lang.String user> = r24;

        $r6 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $z1 = r23.<com.android.internal.net.VpnProfile: boolean isMetered>;

        $r6.<com.android.internal.net.VpnConfig: boolean isMetered> = $z1;

     label05:
        $r7 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r7.<com.android.internal.net.VpnConfig: long startTime> = $l1;

        $r9 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r8 = r23.<com.android.internal.net.VpnProfile: android.net.ProxyInfo proxy>;

        $r9.<com.android.internal.net.VpnConfig: android.net.ProxyInfo proxyInfo> = $r8;

        i0 = r23.<com.android.internal.net.VpnProfile: int type>;

     label06:
        if i0 == 6 goto label09;

        if i0 == 7 goto label09;

        if i0 == 8 goto label09;

     label07:
        $r10 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState FAILED>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r10, "Invalid platform VPN type");

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown VPN profile type: ");

        $i2 = r23.<com.android.internal.net.VpnProfile: int type>;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Vpn", $r13);

     label08:
        goto label10;

     label09:
        r26 = new com.android.server.connectivity.Vpn$IkeV2VpnRunner;

        $r27 = staticinvoke <android.net.Ikev2VpnProfile: android.net.Ikev2VpnProfile fromVpnProfile(com.android.internal.net.VpnProfile,android.security.KeyStore)>(r23, r1);

        specialinvoke r26.<com.android.server.connectivity.Vpn$IkeV2VpnRunner: void <init>(com.android.server.connectivity.Vpn,android.net.Ikev2VpnProfile)>(r0, $r27);

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner> = r26;

        virtualinvoke r26.<com.android.server.connectivity.Vpn$VpnRunner: void start()>();

     label10:
        exitmonitor r0;

        return;

     label11:
        $r21 := @caughtexception;

     label12:
        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = null;

        $r22 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState FAILED>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r22, "VPN startup failed");

        r29 = new java.lang.IllegalArgumentException;

        specialinvoke r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("VPN startup failed", $r21);

        throw r29;

     label13:
        $r20 := @caughtexception;

        exitmonitor r0;

        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.io.IOException from label02 to label03 with label11;
        catch java.security.GeneralSecurityException from label02 to label03 with label11;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.security.GeneralSecurityException from label04 to label05 with label11;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.security.GeneralSecurityException from label05 to label06 with label11;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.security.GeneralSecurityException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.security.GeneralSecurityException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    private static java.util.List uidRangesForUser(int, java.util.Set)
    {
        int i0;
        android.net.UidRange r0, r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.util.Set r5;
        java.util.Iterator r6;

        i0 := @parameter0: int;

        r5 := @parameter1: java.util.Set;

        r0 = staticinvoke <android.net.UidRange: android.net.UidRange createForUser(int)>(i0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.net.UidRange) $r4;

        $z1 = virtualinvoke r0.<android.net.UidRange: boolean containsRange(android.net.UidRange)>(r2);

        if $z1 == 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label2:
        goto label1;

     label3:
        return $r3;
    }

    private void updateAlwaysOnNotification(android.net.NetworkInfo$DetailedState)
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        android.app.NotificationManager r1;
        android.app.Notification$Builder r2, $r12, $r15, $r18, $r19, $r20, $r21, $r22, r32;
        boolean $z0, $z1, z2;
        android.content.Context $r3, $r11, $r13, $r16, $r23, $r29;
        java.lang.String $r4, $r10, $r14, $r17;
        android.content.ComponentName $r5;
        com.android.server.connectivity.Vpn$SystemServices $r9;
        int $i1, $i2;
        android.app.Notification $r24;
        android.net.NetworkInfo$DetailedState $r25, r27;
        java.lang.Throwable $r26;
        android.os.UserHandle r28;
        android.content.Intent r30;
        android.app.PendingIntent r31;

        r0 := @this: com.android.server.connectivity.Vpn;

        r27 := @parameter0: android.net.NetworkInfo$DetailedState;

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z0 == 0 goto label01;

        $r25 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if r27 == $r25 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r28 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i2);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r29 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r1 = staticinvoke <android.app.NotificationManager: android.app.NotificationManager 'from'(android.content.Context)>($r29);

     label04:
        if z2 != 0 goto label07;

     label05:
        virtualinvoke r1.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>("Vpn", 17, r28);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label07:
        r30 = new android.content.Intent;

        specialinvoke r30.<android.content.Intent: void <init>()>();

        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getString(int)>(17039850);

        $r5 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r4);

        virtualinvoke r30.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r5);

        $z1 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        virtualinvoke r30.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("lockdown", $z1);

        virtualinvoke r30.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r9 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        r31 = virtualinvoke $r9.<com.android.server.connectivity.Vpn$SystemServices: android.app.PendingIntent pendingIntentGetActivityAsUser(android.content.Intent,int,android.os.UserHandle)>(r30, 201326592, r28);

        r2 = new android.app.Notification$Builder;

        $r11 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r10 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String VPN>;

        specialinvoke r2.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r11, $r10);

        $r12 = virtualinvoke r2.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17303798);

        $r13 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.String getString(int)>(17041429);

        $r15 = virtualinvoke $r12.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r14);

        $r16 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: java.lang.String getString(int)>(17041426);

        $r18 = virtualinvoke $r15.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r17);

        $r19 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r31);

        $r20 = virtualinvoke $r19.<android.app.Notification$Builder: android.app.Notification$Builder setCategory(java.lang.String)>("sys");

        $r21 = virtualinvoke $r20.<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>(1);

        $r22 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        $r23 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $i1 = virtualinvoke $r23.<android.content.Context: int getColor(int)>(17170460);

        r32 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i1);

     label08:
        $r24 = virtualinvoke r32.<android.app.Notification$Builder: android.app.Notification build()>();

        virtualinvoke r1.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>("Vpn", 17, $r24, r28);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label10:
        $r26 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r26;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    private boolean updateLinkPropertiesInPlaceIfPossible(android.net.NetworkAgent, com.android.internal.net.VpnConfig)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkAgent r1;
        com.android.internal.net.VpnConfig r2, $r3, $r4, $r7;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r5, $r6, $r8, $r9;
        android.net.LinkProperties $r10;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.net.NetworkAgent;

        r2 := @parameter1: com.android.internal.net.VpnConfig;

        $z1 = r2.<com.android.internal.net.VpnConfig: boolean allowBypass>;

        $r3 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $z0 = $r3.<com.android.internal.net.VpnConfig: boolean allowBypass>;

        if $z1 == $z0 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", "Handover not possible due to changes to allowBypass");

        return 0;

     label1:
        $r6 = r2.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r5 = $r4.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 == 0 goto label3;

        $r9 = r2.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        $r7 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r8 = $r7.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r9, $r8);

        if $z3 != 0 goto label2;

        goto label3;

     label2:
        $r10 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        virtualinvoke r1.<android.net.NetworkAgent: void sendLinkProperties(android.net.LinkProperties)>($r10);

        return 1;

     label3:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", "Handover not possible due to changes to whitelisted/blacklisted apps");

        return 0;
    }

    private void verifyCallingUidAndPackage(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        int $i0, $i1, $i2;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $i1 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>(r1, $i0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != $i2 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Mismatched package and UID");

        throw $r2;
    }

    public boolean addAddress(java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        java.lang.String $r1, r5;
        android.net.NetworkAgent $r2;
        android.net.LinkProperties $r3;
        java.lang.Throwable $r4;
        boolean z0, z1;

        r0 := @this: com.android.server.connectivity.Vpn;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        z0 = virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean isCallerEstablishedOwnerLocked()>();

     label2:
        if z0 != 0 goto label3;

        exitmonitor r0;

        return 0;

     label3:
        $r1 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        z1 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean jniAddAddress(java.lang.String,java.lang.String,int)>($r1, r5, i0);

        $r2 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $r3 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        virtualinvoke $r2.<android.net.NetworkAgent: void sendLinkProperties(android.net.LinkProperties)>($r3);

     label4:
        exitmonitor r0;

        return z1;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void addUserToRanges(java.util.Set, int, java.util.List, java.util.List)
    {
        com.android.server.connectivity.Vpn r0;
        java.util.Set r1;
        android.net.UidRange $r2, $r4, $r7, $r9, $r12, r16;
        java.util.SortedSet $r3, $r8;
        boolean $z1, $z4;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11;
        java.lang.Object $r5, $r10;
        java.lang.Integer $r6, $r11;
        java.util.List r13, r14;
        java.util.Iterator r15, r17;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.util.Set;

        i4 := @parameter1: int;

        r13 := @parameter2: java.util.List;

        r14 := @parameter3: java.util.List;

        if r13 == null goto label06;

        i5 = -1;

        i6 = -1;

        $r8 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.util.SortedSet getAppsUids(java.util.List,int)>(r13, i4);

        r15 = interfaceinvoke $r8.<java.util.SortedSet: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r10 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.Integer) $r10;

        i7 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        if i5 != -1 goto label02;

        i8 = i7;

        goto label03;

     label02:
        i8 = i5;

        $i3 = i6 + 1;

        if i7 == $i3 goto label03;

        $r12 = new android.net.UidRange;

        specialinvoke $r12.<android.net.UidRange: void <init>(int,int)>(i5, i6);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r12);

        i8 = i7;

     label03:
        i5 = i8;

        i6 = i7;

        goto label01;

     label04:
        if i5 == -1 goto label05;

        $r9 = new android.net.UidRange;

        specialinvoke $r9.<android.net.UidRange: void <init>(int,int)>(i5, i6);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label05:
        goto label13;

     label06:
        if r14 == null goto label12;

        r16 = staticinvoke <android.net.UidRange: android.net.UidRange createForUser(int)>(i4);

        i9 = r16.<android.net.UidRange: int start>;

        $r3 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.util.SortedSet getAppsUids(java.util.List,int)>(r14, i4);

        r17 = interfaceinvoke $r3.<java.util.SortedSet: java.util.Iterator iterator()>();

        i10 = i9;

     label07:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r5 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        i11 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if i11 != i10 goto label08;

        i10 = i10 + 1;

        goto label09;

     label08:
        $r7 = new android.net.UidRange;

        $i2 = i11 - 1;

        specialinvoke $r7.<android.net.UidRange: void <init>(int,int)>(i10, $i2);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r7);

        i10 = i11 + 1;

     label09:
        goto label07;

     label10:
        $i0 = r16.<android.net.UidRange: int stop>;

        if i10 > $i0 goto label11;

        $r4 = new android.net.UidRange;

        $i1 = r16.<android.net.UidRange: int stop>;

        specialinvoke $r4.<android.net.UidRange: void <init>(int,int)>(i10, $i1);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label11:
        goto label13;

     label12:
        $r2 = staticinvoke <android.net.UidRange: android.net.UidRange createForUser(int)>(i4);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

     label13:
        return;
    }

    public boolean appliesToUid(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        android.net.NetworkCapabilities $r2;
        java.lang.Throwable $r3;
        boolean z0, z1;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

     label2:
        if z0 != 0 goto label3;

        exitmonitor r0;

        return 0;

     label3:
        $r2 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        z1 = virtualinvoke $r2.<android.net.NetworkCapabilities: boolean appliesToUid(int)>(i0);

     label4:
        exitmonitor r0;

        return z1;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    java.util.Set createUserAndRestrictedProfilesRanges(int, java.util.List, java.util.List)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, $i2, $i3;
        java.util.List r1, r9, r10;
        long l1;
        android.content.pm.UserInfo r3;
        android.util.ArraySet $r4;
        boolean $z0, $z1, $z2;
        android.content.Context $r5;
        android.os.UserManager $r6;
        java.lang.Object $r7;
        java.lang.Throwable $r8;
        java.util.Iterator r11;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        r9 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.List;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void addUserToRanges(java.util.Set,int,java.util.List,java.util.List)>($r4, i0, r9, r1);

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean canHaveRestrictedProfile(int)>(i0);

        if $z0 == 0 goto label6;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r6 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r5);

        r10 = virtualinvoke $r6.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        r11 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r7;

        $z2 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z2 == 0 goto label4;

        $i2 = r3.<android.content.pm.UserInfo: int restrictedProfileParentId>;

        if $i2 != i0 goto label4;

        $i3 = r3.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void addUserToRanges(java.util.Set,int,java.util.List,java.util.List)>($r4, $i3, r9, r1);

     label4:
        goto label3;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

     label6:
        return $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public void deleteVpnProfile(java.lang.String, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        android.security.KeyStore r1;
        com.android.server.connectivity._$$Lambda$Vpn$_G7X6rI27GCNguw0gXWud8Ktkqg r2;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.connectivity.Vpn;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.security.KeyStore;

        entermonitor r0;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "No package name provided");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "KeyStore missing");

        specialinvoke r0.<com.android.server.connectivity.Vpn: void verifyCallingUidAndPackage(java.lang.String)>(r6);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceNotRestrictedUser()>();

        r2 = new com.android.server.connectivity._$$Lambda$Vpn$_G7X6rI27GCNguw0gXWud8Ktkqg;

        specialinvoke r2.<com.android.server.connectivity._$$Lambda$Vpn$_G7X6rI27GCNguw0gXWud8Ktkqg: void <init>(com.android.server.connectivity.Vpn,java.lang.String,android.security.KeyStore)>(r0, r6, r1);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8;
        long l2, $l9;
        com.android.internal.net.VpnConfig r1, r60;
        java.lang.String r2, $r5, $r7, $r8, $r12, $r14, $r16, $r17, $r18, $r22, $r25, $r27, $r29, $r30, $r31, $r44, $r46, $r55, r65, $r75, $r76, $r77;
        com.android.server.connectivity.Vpn$Connection r3, r70;
        java.util.Set r4;
        android.content.Context $r6, $r37, r71;
        android.content.pm.IPackageManager $r10;
        android.content.pm.ServiceInfo $r15;
        android.net.NetworkCapabilities $r23, $r49;
        java.util.List $r24;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, $z7;
        android.net.NetworkInfo$DetailedState $r32;
        android.net.NetworkAgent $r38, r63, $r84;
        java.lang.Object $r39;
        android.os.RemoteException $r42, $r51;
        java.lang.Throwable $r47, $r52, $r57, $r59, r90;
        java.lang.RuntimeException $r48, $r56, $r58, r69;
        android.content.Intent r61;
        android.content.pm.ResolveInfo r62;
        android.os.ParcelFileDescriptor r64;
        java.lang.StringBuilder r66, r74, r80, r82, r86, r88, r93;
        java.util.Iterator r67;
        android.net.LinkAddress r68;
        android.os.UserHandle r72;
        java.io.FileDescriptor $r73;
        java.lang.IllegalStateException r79, r81;
        java.lang.IllegalArgumentException r83;
        java.lang.SecurityException r85, r87, r92;

        r0 := @this: com.android.server.connectivity.Vpn;

        r60 := @parameter0: com.android.internal.net.VpnConfig;

        entermonitor r0;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

     label02:
        if i0 == i1 goto label03;

        exitmonitor r0;

        return null;

     label03:
        $r6 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r5 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        z3 = staticinvoke <com.android.server.connectivity.Vpn: boolean isVpnServicePreConsented(android.content.Context,java.lang.String)>($r6, $r5);

     label04:
        if z3 != 0 goto label05;

        exitmonitor r0;

        return null;

     label05:
        r61 = new android.content.Intent;

        specialinvoke r61.<android.content.Intent: void <init>(java.lang.String)>("android.net.VpnService");

        $r8 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $r7 = r60.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r61.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r8, $r7);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceNotRestrictedUser()>();

        $r10 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i3 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r62 = interfaceinvoke $r10.<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>(r61, null, 0, $i3);

     label07:
        if r62 == null goto label40;

     label08:
        $r17 = "android.permission.BIND_VPN_SERVICE";

        $r15 = r62.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r16 = $r15.<android.content.pm.ServiceInfo: java.lang.String permission>;

        z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

     label09:
        if z4 == 0 goto label39;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label11:
        r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        r3 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        r63 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $r23 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        r4 = virtualinvoke $r23.<android.net.NetworkCapabilities: java.util.Set getUids()>();

        $i4 = r60.<com.android.internal.net.VpnConfig: int mtu>;

        $i5 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniCreate(int)>($i4);

        r64 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>($i5);

     label12:
        $i6 = virtualinvoke r64.<android.os.ParcelFileDescriptor: int getFd()>();

        r65 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String jniGetName(int)>($i6);

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        $r24 = r60.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        r67 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label13:
        z5 = interfaceinvoke r67.<java.util.Iterator: boolean hasNext()>();

     label14:
        if z5 == 0 goto label18;

     label15:
        $r39 = interfaceinvoke r67.<java.util.Iterator: java.lang.Object next()>();

        r68 = (android.net.LinkAddress) $r39;

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r68);

     label16:
        goto label13;

     label17:
        $r56 := @caughtexception;

        r69 = $r56;

        goto label37;

     label18:
        $r25 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniSetAddresses(java.lang.String,java.lang.String)>(r65, $r25);

        if $i7 < 1 goto label34;

        r70 = new com.android.server.connectivity.Vpn$Connection;

        specialinvoke r70.<com.android.server.connectivity.Vpn$Connection: void <init>(com.android.server.connectivity.Vpn,com.android.server.connectivity.Vpn$1)>(r0, null);

        r71 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r72 = new android.os.UserHandle;

        $i8 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        specialinvoke r72.<android.os.UserHandle: void <init>(int)>($i8);

        $z0 = virtualinvoke r71.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r61, r70, 67108865, r72);

        if $z0 == 0 goto label33;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r70;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r65;

        $r30 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        r60.<com.android.internal.net.VpnConfig: java.lang.String user> = $r30;

        $r31 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        r60.<com.android.internal.net.VpnConfig: java.lang.String interfaze> = $r31;

        $l9 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r60.<com.android.internal.net.VpnConfig: long startTime> = $l9;

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r60;

     label19:
        if r1 == null goto label22;

     label20:
        $r38 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        z6 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean updateLinkPropertiesInPlaceIfPossible(android.net.NetworkAgent,com.android.internal.net.VpnConfig)>($r38, r1);

     label21:
        if z6 == 0 goto label22;

        goto label23;

     label22:
        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = null;

        $r32 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r32, "establish");

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentConnect()>();

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect(android.net.NetworkAgent)>(r63);

     label23:
        if r3 == null goto label25;

     label24:
        $r37 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        virtualinvoke $r37.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r3);

     label25:
        if r2 == null goto label27;

     label26:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r65);

        if $z1 != 0 goto label27;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void jniReset(java.lang.String)>(r2);

     label27:
        $r73 = virtualinvoke r64.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $z7 = r60.<com.android.internal.net.VpnConfig: boolean blocking>;

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r73, $z7);

     label28:
        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Established by ");

        $r75 = r60.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r76 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r77 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", $r77);

     label29:
        exitmonitor r0;

        return r64;

     label30:
        $r52 := @caughtexception;

     label31:
        r79 = new java.lang.IllegalStateException;

        r80 = new java.lang.StringBuilder;

        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

     label32:
        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set tunnel\'s fd as blocking=");

        $z2 = r60.<com.android.internal.net.VpnConfig: boolean blocking>;

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r55 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r79.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r55, $r52);

        throw r79;

     label33:
        r81 = new java.lang.IllegalStateException;

        r82 = new java.lang.StringBuilder;

        specialinvoke r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot bind ");

        $r27 = r60.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke r82.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r81.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw r81;

     label34:
        r83 = new java.lang.IllegalArgumentException;

        specialinvoke r83.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one address must be specified");

        throw r83;

     label35:
        $r58 := @caughtexception;

        r69 = $r58;

        goto label37;

     label36:
        $r48 := @caughtexception;

        r69 = $r48;

     label37:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r64);

        $r84 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if r63 == $r84 goto label38;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

     label38:
        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r1;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r3;

        $r49 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r49.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>(r4);

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = r63;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r2;

        throw r69;

     label39:
        r85 = new java.lang.SecurityException;

        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>()>();

        $r18 = r60.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not require ");

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.BIND_VPN_SERVICE");

        $r22 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r85.<java.lang.SecurityException: void <init>(java.lang.String)>($r22);

        throw r85;

     label40:
        r87 = new java.lang.SecurityException;

        r88 = new java.lang.StringBuilder;

        specialinvoke r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find ");

        $r12 = r60.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r88.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r87.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw r87;

     label41:
        $r51 := @caughtexception;

        goto label44;

     label42:
        $r47 := @caughtexception;

        r90 = $r47;

        goto label46;

     label43:
        $r42 := @caughtexception;

     label44:
        r92 = new java.lang.SecurityException;

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find ");

        $r44 = r60.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r92.<java.lang.SecurityException: void <init>(java.lang.String)>($r46);

        throw r92;

     label45:
        $r59 := @caughtexception;

        r90 = $r59;

     label46:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r90;

     label47:
        $r57 := @caughtexception;

        exitmonitor r0;

        throw $r57;

        catch java.lang.Throwable from label01 to label02 with label47;
        catch java.lang.Throwable from label03 to label04 with label47;
        catch java.lang.Throwable from label05 to label06 with label47;
        catch android.os.RemoteException from label06 to label07 with label43;
        catch java.lang.Throwable from label06 to label07 with label42;
        catch android.os.RemoteException from label08 to label09 with label43;
        catch java.lang.Throwable from label08 to label09 with label42;
        catch java.lang.Throwable from label10 to label11 with label47;
        catch java.lang.Throwable from label11 to label12 with label47;
        catch java.lang.RuntimeException from label12 to label13 with label36;
        catch java.lang.Throwable from label12 to label13 with label47;
        catch java.lang.RuntimeException from label13 to label14 with label36;
        catch java.lang.Throwable from label13 to label14 with label47;
        catch java.lang.RuntimeException from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label16 with label47;
        catch java.lang.RuntimeException from label18 to label19 with label36;
        catch java.lang.Throwable from label18 to label19 with label47;
        catch java.lang.RuntimeException from label20 to label21 with label17;
        catch java.lang.Throwable from label20 to label21 with label47;
        catch java.lang.RuntimeException from label22 to label23 with label36;
        catch java.lang.Throwable from label22 to label23 with label47;
        catch java.lang.RuntimeException from label24 to label25 with label17;
        catch java.lang.Throwable from label24 to label25 with label47;
        catch java.lang.RuntimeException from label26 to label27 with label17;
        catch java.lang.Throwable from label26 to label27 with label47;
        catch java.io.IOException from label27 to label28 with label30;
        catch java.lang.RuntimeException from label27 to label28 with label17;
        catch java.lang.Throwable from label27 to label28 with label47;
        catch java.lang.Throwable from label28 to label29 with label47;
        catch java.lang.RuntimeException from label31 to label32 with label36;
        catch java.lang.Throwable from label31 to label32 with label47;
        catch java.lang.RuntimeException from label32 to label33 with label35;
        catch java.lang.Throwable from label32 to label33 with label47;
        catch java.lang.RuntimeException from label33 to label34 with label35;
        catch java.lang.Throwable from label33 to label34 with label47;
        catch java.lang.RuntimeException from label34 to label35 with label35;
        catch java.lang.Throwable from label34 to label35 with label47;
        catch java.lang.Throwable from label37 to label38 with label47;
        catch java.lang.Throwable from label38 to label39 with label47;
        catch android.os.RemoteException from label39 to label40 with label41;
        catch java.lang.Throwable from label39 to label40 with label45;
        catch android.os.RemoteException from label40 to label41 with label41;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.lang.Throwable from label44 to label45 with label45;
        catch java.lang.Throwable from label46 to label47 with label47;
    }

    public int getActiveAppVpnType()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String $r2, $r3;
        com.android.server.connectivity.Vpn$VpnRunner $r4, $r5;
        java.lang.Throwable $r6;
        boolean z0, z1;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        $r3 = "[Legacy VPN]";

        $r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

     label2:
        if z0 == 0 goto label3;

        exitmonitor r0;

        return -1;

     label3:
        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        if $r4 == null goto label5;

        $r5 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        z1 = $r5 instanceof com.android.server.connectivity.Vpn$IkeV2VpnRunner;

     label4:
        if z1 == 0 goto label5;

        exitmonitor r0;

        return 2;

     label5:
        exitmonitor r0;

        return 1;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public boolean getAlwaysOn()
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getAlwaysOnPackage()
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermissionOrInternalCaller()>();

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z0 == 0 goto label3;

        r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

     label2:
        goto label4;

     label3:
        r2 = null;

     label4:
        exitmonitor r0;

        return r2;

     label5:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public com.android.internal.net.VpnConfig getLegacyVpnConfig()
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;
        java.lang.Throwable $r1;
        com.android.internal.net.VpnConfig r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isSettingsVpnLocked()>();

        if $z0 == 0 goto label3;

        r2 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        exitmonitor r0;

        return null;

     label4:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.Throwable $r1;
        com.android.internal.net.LegacyVpnInfo r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        r2 = specialinvoke r0.<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfoPrivileged()>();

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getLockdown()
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List getLockdownWhitelist()
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;
        java.lang.Throwable $r1;
        java.util.List r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        if $z0 == 0 goto label3;

        r2 = r0.<com.android.server.connectivity.Vpn: java.util.List mLockdownWhitelist>;

     label2:
        goto label4;

     label3:
        r2 = null;

     label4:
        exitmonitor r0;

        return r2;

     label5:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public int getNetId()
    {
        com.android.server.connectivity.Vpn r0;
        int $i0;
        android.net.NetworkAgent r1;
        android.net.Network r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<android.net.NetworkAgent: android.net.Network getNetwork()>();

        if r2 != null goto label2;

        return 0;

     label2:
        $i0 = r2.<android.net.Network: int netId>;

        return $i0;
    }

    public android.net.NetworkInfo getNetworkInfo()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    java.lang.String getProfileNameForPackage(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PLATFORM_VPN_");

        $i0 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public android.net.Network[] getUnderlyingNetworks()
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;
        com.android.internal.net.VpnConfig $r1;
        java.lang.Throwable $r2;
        android.net.Network[] r3;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

     label2:
        if z0 != 0 goto label3;

        exitmonitor r0;

        return null;

     label3:
        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        r3 = $r1.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks>;

     label4:
        exitmonitor r0;

        return r3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public com.android.internal.net.VpnConfig getVpnConfig()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        return $r1;
    }

    public com.android.internal.net.VpnInfo getVpnInfo()
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;
        int $i0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        com.android.internal.net.VpnInfo r3;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

     label2:
        if z0 != 0 goto label3;

        exitmonitor r0;

        return null;

     label3:
        r3 = new com.android.internal.net.VpnInfo;

        specialinvoke r3.<com.android.internal.net.VpnInfo: void <init>()>();

        $i0 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        r3.<com.android.internal.net.VpnInfo: int ownerUid> = $i0;

        $r1 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        r3.<com.android.internal.net.VpnInfo: java.lang.String vpnIface> = $r1;

     label4:
        exitmonitor r0;

        return r3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    com.android.internal.net.VpnProfile getVpnProfilePrivileged(java.lang.String, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        android.security.KeyStore r1;
        com.android.server.connectivity.Vpn$SystemServices $r2;
        boolean $z0;
        java.lang.String $r3, r5;
        com.android.internal.net.VpnProfile $r4;
        byte[] r6;

        r0 := @this: com.android.server.connectivity.Vpn;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.security.KeyStore;

        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$SystemServices mSystemServices>;

        $z0 = virtualinvoke $r2.<com.android.server.connectivity.Vpn$SystemServices: boolean isCallerSystem()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Vpn", "getVpnProfilePrivileged called as non-System UID ");

        return null;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String getProfileNameForPackage(java.lang.String)>(r5);

        r6 = virtualinvoke r1.<android.security.KeyStore: byte[] get(java.lang.String)>($r3);

        if r6 != null goto label2;

        return null;

     label2:
        $r4 = staticinvoke <com.android.internal.net.VpnProfile: com.android.internal.net.VpnProfile decode(java.lang.String,byte[])>("", r6);

        return $r4;
    }

    public void interfaceStatusChanged(java.lang.String, boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;
        android.net.INetworkManagementEventObserver r1;
        android.os.RemoteException $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.connectivity.Vpn;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label1:
        r1 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

     label2:
        interfaceinvoke r1.<android.net.INetworkManagementEventObserver: void interfaceStatusChanged(java.lang.String,boolean)>(r5, z0);

     label3:
        goto label7;

     label4:
        $r3 := @caughtexception;

        goto label7;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r0;

        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public boolean isAlwaysOnPackageSupported(java.lang.String, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        android.content.pm.PackageManager r1;
        android.content.Context $r2;
        int $i1, $i2, $i3, $i4;
        android.content.Intent $r3;
        boolean $z0, $z1;
        java.lang.Object $r5;
        android.content.pm.ResolveInfo $r6;
        android.content.pm.ServiceInfo $r7;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r13, r15;
        java.lang.Throwable $r14;
        android.security.KeyStore r16;
        com.android.internal.net.VpnProfile r17;
        android.content.pm.ApplicationInfo r18, r19;
        java.util.List r23;
        java.util.Iterator r24;
        android.os.Bundle r25;

        r0 := @this: com.android.server.connectivity.Vpn;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: android.security.KeyStore;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceSettingsPermission()>();

        if r15 != null goto label01;

        return 0;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r17 = virtualinvoke r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnProfile getVpnProfilePrivileged(java.lang.String,android.security.KeyStore)>(r15, r16);

     label03:
        if r17 == null goto label04;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r2 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r18 = null;

     label05:
        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r19 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r15, 0, $i1);

     label06:
        r18 = r19;

        goto label08;

     label07:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find \"");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" when checking always-on support");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vpn", $r13);

     label08:
        if r18 == null goto label15;

        $i2 = r18.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 >= 24 goto label09;

        goto label15;

     label09:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.net.VpnService");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r15);

        $i3 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r23 = virtualinvoke r1.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>($r3, 128, $i3);

        if r23 == null goto label14;

        $i4 = interfaceinvoke r23.<java.util.List: int size()>();

        if $i4 != 0 goto label10;

        goto label14;

     label10:
        r24 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r5 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.pm.ResolveInfo) $r5;

        $r7 = $r6.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        r25 = $r7.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        if r25 == null goto label12;

        $z1 = virtualinvoke r25.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);

        if $z1 != 0 goto label12;

        return 0;

     label12:
        goto label11;

     label13:
        return 1;

     label14:
        return 0;

     label15:
        return 0;

     label16:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label07;
    }

    public boolean isBlockingUid(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        android.net.NetworkInfo $r2;
        boolean $z0, $z1, z2, z3;
        java.util.Set $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r2.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label3;

        z2 = virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean appliesToUid(int)>(i0);

     label2:
        exitmonitor r0;

        $z1 = z2 ^ 1;

        return $z1;

     label3:
        $r3 = r0.<com.android.server.connectivity.Vpn: java.util.Set mBlockedUidsAsToldToNetd>;

        z3 = staticinvoke <android.net.UidRange: boolean containsUid(java.util.Collection,int)>($r3, i0);

     label4:
        exitmonitor r0;

        return z3;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected boolean isCallerEstablishedOwnerLocked()
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0, z1;
        int $i0, $i1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        if $i0 != $i1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void lambda$deleteVpnProfile$3$Vpn(java.lang.String, android.security.KeyStore) throws java.lang.Exception
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r3;
        android.security.KeyStore r2;
        boolean $z0, $z2;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.security.KeyStore;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentIkev2VpnLocked(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $z2 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z2 == 0 goto label1;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean setAlwaysOnPackage(java.lang.String,boolean,java.util.List,android.security.KeyStore)>(null, 0, null, r2);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>("[Legacy VPN]");

     label2:
        $r3 = virtualinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String getProfileNameForPackage(java.lang.String)>(r1);

        virtualinvoke r2.<android.security.KeyStore: boolean delete(java.lang.String,int)>($r3, 1000);

        return;
    }

    public void lambda$enforceNotRestrictedUser$1$Vpn() throws java.lang.Exception
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;
        android.os.UserManager $r2;
        int $i0;
        android.content.pm.UserInfo $r3;
        boolean $z0;
        java.lang.SecurityException $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        $i0 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $r3 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i0);

        $z0 = virtualinvoke $r3.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Restricted users cannot configure VPNs");

        throw $r4;
    }

    public void lambda$provisionVpnProfile$2$Vpn(android.security.KeyStore, java.lang.String, byte[]) throws java.lang.Exception
    {
        com.android.server.connectivity.Vpn r0;
        android.security.KeyStore r1;
        java.lang.String r2, $r4;
        byte[] r3;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        $r4 = virtualinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String getProfileNameForPackage(java.lang.String)>(r2);

        virtualinvoke r1.<android.security.KeyStore: boolean put(java.lang.String,byte[],int,int)>($r4, r3, 1000, 0);

        return;
    }

    public void lambda$startVpnProfile$4$Vpn(java.lang.String, android.security.KeyStore) throws java.lang.Exception
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        android.security.KeyStore r7;
        com.android.internal.net.VpnProfile r8;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: android.security.KeyStore;

        r8 = virtualinvoke r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnProfile getVpnProfilePrivileged(java.lang.String,android.security.KeyStore)>(r1, r7);

        if r8 == null goto label1;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void startVpnProfilePrivileged(com.android.internal.net.VpnProfile,java.lang.String,android.security.KeyStore)>(r8, r1, null);

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No profile found for ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void onUserAdded(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, $i1, $i2;
        android.content.Context $r1;
        android.os.UserManager $r2;
        boolean $z0, $z1;
        android.net.NetworkCapabilities $r3, $r8;
        com.android.internal.net.VpnConfig $r4, $r5;
        java.util.List $r6, $r7;
        java.lang.Exception $r10;
        java.lang.Throwable $r11;
        android.content.pm.UserInfo r12;
        java.util.Set r13;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        r12 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke r12.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 == 0 goto label12;

        $i2 = r12.<android.content.pm.UserInfo: int restrictedProfileParentId>;

        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        if $i2 != $i1 goto label12;

        entermonitor r0;

     label01:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        r13 = virtualinvoke $r3.<android.net.NetworkCapabilities: java.util.Set getUids()>();

     label02:
        if r13 == null goto label07;

     label03:
        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r7 = $r4.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        $r5 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r6 = $r5.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void addUserToRanges(java.util.Set,int,java.util.List,java.util.List)>(r13, i0, $r7, $r6);

        $r8 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r8.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>(r13);

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

     label06:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Failed to add restricted user to owner", $r10);

     label07:
        $z1 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void setVpnForcedLocked(boolean)>($z1);

        exitmonitor r0;

     label08:
        goto label12;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r11;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void onUserRemoved(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, $i1, $i2;
        android.content.Context $r1;
        android.os.UserManager $r2;
        boolean $z0, $z2;
        android.net.NetworkCapabilities $r3, $r5;
        java.util.List $r4;
        java.lang.Exception $r7;
        java.lang.Throwable $r8;
        android.content.pm.UserInfo r9;
        java.util.Set r10;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        r9 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke r9.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 == 0 goto label12;

        $i2 = r9.<android.content.pm.UserInfo: int restrictedProfileParentId>;

        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        if $i2 != $i1 goto label12;

        entermonitor r0;

     label01:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        r10 = virtualinvoke $r3.<android.net.NetworkCapabilities: java.util.Set getUids()>();

     label02:
        if r10 == null goto label07;

     label03:
        $r4 = staticinvoke <com.android.server.connectivity.Vpn: java.util.List uidRangesForUser(int,java.util.Set)>(i0, r10);

        interfaceinvoke r10.<java.util.Set: boolean removeAll(java.util.Collection)>($r4);

        $r5 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r5.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>(r10);

     label04:
        goto label07;

     label05:
        $r7 := @caughtexception;

     label06:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Failed to remove restricted user to owner", $r7);

     label07:
        $z2 = r0.<com.android.server.connectivity.Vpn: boolean mLockdown>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void setVpnForcedLocked(boolean)>($z2);

        exitmonitor r0;

     label08:
        goto label12;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r8;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void onUserStopped()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.android.server.connectivity.Vpn: void setLockdown(boolean)>(0);

        r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn> = 0;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean prepare(java.lang.String, java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, r5;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10;
        android.content.Context $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        entermonitor r0;

        if r5 == null goto label09;

     label01:
        $z3 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z3 == 0 goto label03;

        z9 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentPreparedPackage(java.lang.String)>(r5);

     label02:
        if z9 != 0 goto label03;

        exitmonitor r0;

        return 0;

     label03:
        $z4 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentPreparedPackage(java.lang.String)>(r5);

        if $z4 != 0 goto label06;

        $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("[Legacy VPN]");

        if $z7 != 0 goto label05;

        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $z8 = staticinvoke <com.android.server.connectivity.Vpn: boolean isVpnPreConsented(android.content.Context,java.lang.String,int)>($r3, r5, i0);

        if $z8 == 0 goto label05;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>(r5);

     label04:
        exitmonitor r0;

        return 1;

     label05:
        exitmonitor r0;

        return 0;

     label06:
        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("[Legacy VPN]");

        if $z5 != 0 goto label09;

        $r2 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $z6 = staticinvoke <com.android.server.connectivity.Vpn: boolean isVpnPreConsented(android.content.Context,java.lang.String,int)>($r2, r5, i0);

        if $z6 != 0 goto label09;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>("[Legacy VPN]");

     label07:
        exitmonitor r0;

        return 0;

     label08:
        $r4 := @caughtexception;

        goto label16;

     label09:
        if r1 == null goto label17;

     label10:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("[Legacy VPN]");

        if $z0 != 0 goto label12;

        $z2 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentPreparedPackage(java.lang.String)>(r1);

        if $z2 == 0 goto label12;

     label11:
        goto label17;

     label12:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $z1 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z1 == 0 goto label14;

        z10 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentPreparedPackage(java.lang.String)>(r1);

     label13:
        if z10 != 0 goto label14;

        exitmonitor r0;

        return 0;

     label14:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>(r1);

     label15:
        exitmonitor r0;

        return 1;

     label16:
        exitmonitor r0;

        throw $r4;

     label17:
        exitmonitor r0;

        return 1;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.Throwable from label12 to label13 with label08;
        catch java.lang.Throwable from label14 to label15 with label08;
    }

    public boolean provisionVpnProfile(java.lang.String, com.android.internal.net.VpnProfile, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        android.security.KeyStore r1;
        byte[] r2;
        boolean z0, $z1;
        int $i0;
        android.content.Context $r6, $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;
        com.android.internal.net.VpnProfile r10;
        com.android.server.connectivity._$$Lambda$Vpn$gVOF2PzN3Pb1yKv_hHDqOpguPwU r11;
        java.lang.IllegalArgumentException r12;

        r0 := @this: com.android.server.connectivity.Vpn;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: com.android.internal.net.VpnProfile;

        r1 := @parameter2: android.security.KeyStore;

        entermonitor r0;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r9, "No package name provided");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r10, "No profile provided");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "KeyStore missing");

        specialinvoke r0.<com.android.server.connectivity.Vpn: void verifyCallingUidAndPackage(java.lang.String)>(r9);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceNotRestrictedUser()>();

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void validateRequiredFeatures(com.android.internal.net.VpnProfile)>(r10);

        $z1 = r10.<com.android.internal.net.VpnProfile: boolean isRestrictedToTestNetworks>;

        if $z1 == 0 goto label2;

        $r7 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_TEST_NETWORKS", "Test-mode profiles require the MANAGE_TEST_NETWORKS permission");

     label2:
        r2 = virtualinvoke r10.<com.android.internal.net.VpnProfile: byte[] encode()>();

        $i0 = lengthof r2;

        if $i0 > 131072 goto label4;

        r11 = new com.android.server.connectivity._$$Lambda$Vpn$gVOF2PzN3Pb1yKv_hHDqOpguPwU;

        specialinvoke r11.<com.android.server.connectivity._$$Lambda$Vpn$gVOF2PzN3Pb1yKv_hHDqOpguPwU: void <init>(com.android.server.connectivity.Vpn,android.security.KeyStore,java.lang.String,byte[])>(r0, r1, r9, r2);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r11);

        $r6 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        z0 = staticinvoke <com.android.server.connectivity.Vpn: boolean isVpnProfilePreConsented(android.content.Context,java.lang.String)>($r6, r9);

     label3:
        exitmonitor r0;

        return z0;

     label4:
        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Profile too big");

        throw r12;

     label5:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public boolean removeAddress(java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        java.lang.String $r1, r5;
        android.net.NetworkAgent $r2;
        android.net.LinkProperties $r3;
        java.lang.Throwable $r4;
        boolean z0, z1;

        r0 := @this: com.android.server.connectivity.Vpn;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        z0 = virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean isCallerEstablishedOwnerLocked()>();

     label2:
        if z0 != 0 goto label3;

        exitmonitor r0;

        return 0;

     label3:
        $r1 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        z1 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean jniDelAddress(java.lang.String,java.lang.String,int)>($r1, r5, i0);

        $r2 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $r3 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        virtualinvoke $r2.<android.net.NetworkAgent: void sendLinkProperties(android.net.LinkProperties)>($r3);

     label4:
        exitmonitor r0;

        return z1;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean setAlwaysOnPackage(java.lang.String, boolean, java.util.List, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0, $z1;
        java.util.List r1;
        android.security.KeyStore r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: android.security.KeyStore;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermissionOrInternalCaller()>();

        $z1 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean setAlwaysOnPackageInternal(java.lang.String,boolean,java.util.List,android.security.KeyStore)>(r4, z0, r1, r2);

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void saveAlwaysOnPackage()>();

     label2:
        exitmonitor r0;

        return 1;

     label3:
        exitmonitor r0;

        return 0;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void setEnableTeardown(boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown> = z0;

        return;
    }

    public void setLockdown(boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0, $z1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermissionOrInternalCaller()>();

        specialinvoke r0.<com.android.server.connectivity.Vpn: void setVpnForcedLocked(boolean)>(z0);

        r0.<com.android.server.connectivity.Vpn: boolean mLockdown> = z0;

        $z1 = r0.<com.android.server.connectivity.Vpn: boolean mAlwaysOn>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void saveAlwaysOnPackage()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean setPackageAuthorization(java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, i1, i3, i4, $i5, i8;
        long l2;
        java.lang.String $r1, $r9, r11;
        boolean $z0;
        int[] $r2, $r3, r12;
        java.lang.Exception $r4;
        java.lang.Throwable $r10;
        android.content.Context $r13;
        java.lang.Object $r14;
        android.app.AppOpsManager r15;
        byte b9;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.connectivity.Vpn;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermissionOrInternalCaller()>();

        $i5 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        i1 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>(r11, $i5);

        if i1 == -1 goto label21;

        $r1 = "[Legacy VPN]";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z0 == 0 goto label01;

        goto label21;

     label01:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if i0 == -1 goto label08;

        if i0 == 1 goto label06;

        if i0 == 2 goto label04;

     label02:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Vpn", "Unrecognized VPN type while granting authorization");

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label04:
        $r3 = newarray (int)[1];

        $r3[0] = 94;

        r12 = $r3;

     label05:
        goto label09;

     label06:
        r12 = newarray (int)[1];

     label07:
        r12[0] = 47;

        goto label09;

     label08:
        $r2 = newarray (int)[2];

        $r2[0] = 47;

        $r2[1] = 94;

        r12 = $r2;

     label09:
        $r13 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        r15 = (android.app.AppOpsManager) $r14;

        i3 = lengthof r12;

     label10:
        i8 = 0;

     label11:
        if i8 >= i3 goto label15;

        i4 = r12[i8];

        if i0 != -1 goto label12;

        b9 = 1;

        goto label13;

     label12:
        b9 = 0;

     label13:
        virtualinvoke r15.<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>(i4, i1, r11, b9);

     label14:
        i8 = i8 + 1;

        goto label11;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label16:
        $r10 := @caughtexception;

        goto label20;

     label17:
        $r4 := @caughtexception;

     label18:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to set app ops for package ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", $r9, $r4);

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r10;

     label21:
        return 0;

        catch java.lang.Exception from label02 to label03 with label17;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Exception from label06 to label07 with label17;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Exception from label08 to label09 with label17;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
    }

    public boolean setUnderlyingNetworks(android.net.Network[])
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;
        int $i0, $i1, $i2, i3;
        android.net.Network[] $r1, $r7, $r9, r12;
        com.android.internal.net.VpnConfig $r2, $r4, $r8, $r10;
        android.net.Network $r3, $r5, $r6;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.connectivity.Vpn;

        r12 := @parameter0: android.net.Network[];

        entermonitor r0;

     label01:
        z0 = virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean isCallerEstablishedOwnerLocked()>();

     label02:
        if z0 != 0 goto label03;

        exitmonitor r0;

        return 0;

     label03:
        if r12 != null goto label06;

     label04:
        $r10 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r10.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks> = null;

     label05:
        goto label14;

     label06:
        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $i0 = lengthof r12;

        $r1 = newarray (android.net.Network)[$i0];

        $r2.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks> = $r1;

     label07:
        i3 = 0;

     label08:
        $i1 = lengthof r12;

        if i3 >= $i1 goto label14;

     label09:
        $r3 = r12[i3];

        if $r3 != null goto label12;

     label10:
        $r8 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r9 = $r8.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks>;

        $r9[i3] = null;

     label11:
        goto label13;

     label12:
        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r7 = $r4.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks>;

        $r5 = new android.net.Network;

        $r6 = r12[i3];

        $i2 = $r6.<android.net.Network: int netId>;

        specialinvoke $r5.<android.net.Network: void <init>(int)>($i2);

        $r7[i3] = $r5;

     label13:
        i3 = i3 + 1;

        goto label08;

     label14:
        exitmonitor r0;

        return 1;

     label15:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    public boolean startAlwaysOnVpn(android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        java.lang.StringBuilder r1;
        boolean $z0, $z1, z3;
        android.net.NetworkInfo $r2;
        java.lang.Object $r3;
        com.android.server.DeviceIdleInternal $r4;
        int $i1, $i2, $i3;
        android.content.Context $r6;
        android.os.UserHandle $r7;
        java.lang.RuntimeException $r8;
        java.lang.String $r12, r17;
        java.lang.Throwable $r13, $r15;
        java.lang.Exception $r14;
        android.security.KeyStore r16;
        com.android.internal.net.VpnProfile r18;
        android.content.Intent r19;
        android.content.ComponentName r20;

        r0 := @this: com.android.server.connectivity.Vpn;

        r16 := @parameter0: android.security.KeyStore;

        entermonitor r0;

     label01:
        r17 = virtualinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String getAlwaysOnPackage()>();

     label02:
        z3 = 1;

        if r17 != null goto label05;

     label03:
        exitmonitor r0;

     label04:
        return 1;

     label05:
        $z0 = virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean isAlwaysOnPackageSupported(java.lang.String,android.security.KeyStore)>(r17, r16);

        if $z0 != 0 goto label07;

        virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean setAlwaysOnPackage(java.lang.String,boolean,java.util.List,android.security.KeyStore)>(null, 0, null, r16);

        exitmonitor r0;

     label06:
        return 0;

     label07:
        $r2 = virtualinvoke r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo getNetworkInfo()>();

        $z1 = virtualinvoke $r2.<android.net.NetworkInfo: boolean isConnected()>();

        if $z1 == 0 goto label09;

        exitmonitor r0;

     label08:
        return 1;

     label09:
        exitmonitor r0;

     label10:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label11:
        r18 = virtualinvoke r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnProfile getVpnProfilePrivileged(java.lang.String,android.security.KeyStore)>(r17, r16);

     label12:
        if r18 == null goto label15;

     label13:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void startVpnProfilePrivileged(com.android.internal.net.VpnProfile,java.lang.String,android.security.KeyStore)>(r18, r17, null);

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label15:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/DeviceIdleInternal;");

        $r4 = (com.android.server.DeviceIdleInternal) $r3;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        interfaceinvoke $r4.<com.android.server.DeviceIdleInternal: void addPowerSaveTempWhitelistApp(int,java.lang.String,long,int,boolean,java.lang.String)>($i1, r17, 60000L, $i2, 0, "vpn");

        r19 = new android.content.Intent;

        specialinvoke r19.<android.content.Intent: void <init>(java.lang.String)>("android.net.VpnService");

        virtualinvoke r19.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r17);

     label16:
        $r6 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $i3 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $r7 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i3);

        r20 = virtualinvoke $r6.<android.content.Context: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)>(r19, $r7);

     label17:
        if r20 == null goto label18;

        goto label19;

     label18:
        z3 = 0;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z3;

     label20:
        $r8 := @caughtexception;

     label21:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VpnService ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed to start");

        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", $r12, $r8);

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label23:
        $r15 := @caughtexception;

        goto label27;

     label24:
        $r14 := @caughtexception;

     label25:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Error starting always-on VPN", $r14);

     label26:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label27:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r15;

     label28:
        $r13 := @caughtexception;

     label29:
        exitmonitor r0;

     label30:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Exception from label11 to label12 with label24;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Exception from label13 to label14 with label24;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.lang.Exception from label15 to label16 with label24;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.RuntimeException from label16 to label17 with label20;
        catch java.lang.Exception from label16 to label17 with label24;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Exception from label21 to label22 with label24;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label25 to label26 with label23;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public void startLegacyVpn(com.android.internal.net.VpnProfile, android.security.KeyStore, android.net.LinkProperties)
    {
        com.android.server.connectivity.Vpn r0;
        android.security.KeyStore r1;
        android.net.LinkProperties r2;
        long l0;
        java.lang.Throwable $r3;
        com.android.internal.net.VpnProfile r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        r4 := @parameter0: com.android.internal.net.VpnProfile;

        r1 := @parameter1: android.security.KeyStore;

        r2 := @parameter2: android.net.LinkProperties;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        virtualinvoke r0.<com.android.server.connectivity.Vpn: void startLegacyVpnPrivileged(com.android.internal.net.VpnProfile,android.security.KeyStore,android.net.LinkProperties)>(r4, r1, r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void startLegacyVpnPrivileged(com.android.internal.net.VpnProfile, android.security.KeyStore, android.net.LinkProperties)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnProfile r1;
        java.lang.String r2, r3, $r9, $r11, $r13, $r15, $r18, $r19, $r20, $r22, $r23, $r26, $r30, $r31, $r32, $r33, $r35, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r45, $r47, $r48, $r49, $r51, $r52, $r53, $r56, $r57, $r58, $r61, $r63, $r64, $r65, r71, r72, r73, r77, $r78, r81, r82, $r83, r89, r90, r91, r92, $r95, $r96, $r98, $r99;
        int i0, $i1, $i2, $i3;
        android.content.Context $r4;
        android.content.pm.UserInfo $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.SecurityException $r6;
        android.os.UserHandle $r7;
        java.net.InetAddress $r8;
        java.lang.StringBuilder $r10, $r50, $r55, $r60, $r62;
        java.util.List $r12, $r16, $r25, $r28;
        byte[] $r14, r76, r80, r85;
        java.lang.String[] $r17, $r21, $r24, $r27, $r29, $r34, $r38, $r44, $r46, r86, r88;
        java.nio.charset.Charset $r54, $r59, $r66;
        android.security.KeyStore r67;
        android.net.LinkProperties r68;
        android.os.UserManager r69;
        android.net.RouteInfo r70;
        com.android.internal.net.VpnConfig $r93;
        android.net.ProxyInfo $r97;
        java.lang.IllegalStateException $r100;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnProfile;

        r67 := @parameter1: android.security.KeyStore;

        r68 := @parameter2: android.net.LinkProperties;

        $r4 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r69 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r4);

        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $r5 = virtualinvoke r69.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i1);

        $z0 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 != 0 goto label27;

        $r7 = new android.os.UserHandle;

        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>($i2);

        $z1 = virtualinvoke r69.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_config_vpn", $r7);

        if $z1 != 0 goto label27;

        r70 = staticinvoke <com.android.server.connectivity.Vpn: android.net.RouteInfo findIPv4DefaultRoute(android.net.LinkProperties)>(r68);

        $r8 = virtualinvoke r70.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r2 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r3 = virtualinvoke r70.<android.net.RouteInfo: java.lang.String getInterface()>();

        r71 = "";

        r72 = "";

        r73 = "";

        $r9 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label03;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r61 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        r71 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r63 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        r76 = virtualinvoke r67.<android.security.KeyStore: byte[] get(java.lang.String)>($r64);

        if r76 != null goto label01;

        r77 = null;

        goto label02;

     label01:
        $r65 = new java.lang.String;

        $r66 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r65.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r76, $r66);

        r77 = $r65;

     label02:
        r72 = r77;

     label03:
        $r78 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        $z5 = virtualinvoke $r78.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label06;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r56 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        r80 = virtualinvoke r67.<android.security.KeyStore: byte[] get(java.lang.String)>($r57);

        if r80 != null goto label04;

        r81 = null;

        goto label05;

     label04:
        $r58 = new java.lang.String;

        $r59 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r58.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r80, $r59);

        r81 = $r58;

     label05:
        r73 = r81;

     label06:
        r82 = "";

        $r83 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecServerCert>;

        $z6 = virtualinvoke $r83.<java.lang.String: boolean isEmpty()>();

        if $z6 != 0 goto label08;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r51 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecServerCert>;

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        r85 = virtualinvoke r67.<android.security.KeyStore: byte[] get(java.lang.String)>($r52);

        if r85 != null goto label07;

        r82 = null;

        goto label08;

     label07:
        $r53 = new java.lang.String;

        $r54 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r53.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r85, $r54);

        r82 = $r53;

     label08:
        if r72 == null goto label26;

        if r73 == null goto label26;

        if r82 == null goto label26;

        $i3 = r1.<com.android.internal.net.VpnProfile: int type>;

        tableswitch($i3)
        {
            case 1: goto label17;
            case 2: goto label16;
            case 3: goto label15;
            case 4: goto label14;
            case 5: goto label13;
            case 6: goto label12;
            case 7: goto label11;
            case 8: goto label10;
            default: goto label09;
        };

     label09:
        r86 = null;

        goto label18;

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KEYSTORE_ALIAS:");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret> = $r11;

        r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert> = r72;

        goto label12;

     label11:
        $r13 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r14 = virtualinvoke $r13.<java.lang.String: byte[] getBytes()>();

        $r15 = staticinvoke <android.net.Ikev2VpnProfile: java.lang.String encodeForIpsecSecret(byte[])>($r14);

        r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret> = $r15;

        $r16 = <android.net.Ikev2VpnProfile: java.util.List DEFAULT_ALGORITHMS>;

        virtualinvoke r1.<com.android.internal.net.VpnProfile: void setAllowedAlgorithms(java.util.List)>($r16);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void startVpnProfilePrivileged(com.android.internal.net.VpnProfile,java.lang.String,android.security.KeyStore)>(r1, "[Legacy VPN]", r67);

        return;

     label12:
        r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert> = r73;

        $r12 = <android.net.Ikev2VpnProfile: java.util.List DEFAULT_ALGORITHMS>;

        virtualinvoke r1.<com.android.internal.net.VpnProfile: void setAllowedAlgorithms(java.util.List)>($r12);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void startVpnProfilePrivileged(com.android.internal.net.VpnProfile,java.lang.String,android.security.KeyStore)>(r1, "[Legacy VPN]", r67);

        return;

     label13:
        $r17 = newarray (java.lang.String)[9];

        $r17[0] = r3;

        $r18 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r17[1] = $r18;

        $r17[2] = "hybridrsa";

        $r17[3] = r73;

        $r17[4] = r82;

        $r19 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r17[5] = $r19;

        $r20 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r17[6] = $r20;

        $r17[7] = "";

        $r17[8] = r2;

        r86 = $r17;

        goto label18;

     label14:
        $r34 = newarray (java.lang.String)[11];

        $r34[0] = r3;

        $r35 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r34[1] = $r35;

        $r34[2] = "xauthrsa";

        $r34[3] = r71;

        $r34[4] = r72;

        $r34[5] = r73;

        $r34[6] = r82;

        $r36 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r34[7] = $r36;

        $r37 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r34[8] = $r37;

        $r34[9] = "";

        $r34[10] = r2;

        r86 = $r34;

        goto label18;

     label15:
        $r38 = newarray (java.lang.String)[9];

        $r38[0] = r3;

        $r39 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r38[1] = $r39;

        $r38[2] = "xauthpsk";

        $r40 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        $r38[3] = $r40;

        $r41 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r38[4] = $r41;

        $r42 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r38[5] = $r42;

        $r43 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r38[6] = $r43;

        $r38[7] = "";

        $r38[8] = r2;

        r86 = $r38;

        goto label18;

     label16:
        $r44 = newarray (java.lang.String)[8];

        $r44[0] = r3;

        $r45 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r44[1] = $r45;

        $r44[2] = "udprsa";

        $r44[3] = r71;

        $r44[4] = r72;

        $r44[5] = r73;

        $r44[6] = r82;

        $r44[7] = "1701";

        r86 = $r44;

        goto label18;

     label17:
        $r46 = newarray (java.lang.String)[6];

        $r46[0] = r3;

        $r47 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r46[1] = $r47;

        $r46[2] = "udppsk";

        $r48 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        $r46[3] = $r48;

        $r49 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r46[4] = $r49;

        $r46[5] = "1701";

        r86 = $r46;

     label18:
        r88 = null;

        i0 = r1.<com.android.internal.net.VpnProfile: int type>;

        if i0 == 0 goto label20;

        if i0 == 1 goto label19;

        if i0 == 2 goto label19;

        goto label23;

     label19:
        $r29 = newarray (java.lang.String)[20];

        $r29[0] = r3;

        $r29[1] = "l2tp";

        $r30 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r29[2] = $r30;

        $r29[3] = "1701";

        $r31 = r1.<com.android.internal.net.VpnProfile: java.lang.String l2tpSecret>;

        $r29[4] = $r31;

        $r29[5] = "name";

        $r32 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r29[6] = $r32;

        $r29[7] = "password";

        $r33 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r29[8] = $r33;

        $r29[9] = "linkname";

        $r29[10] = "vpn";

        $r29[11] = "refuse-eap";

        $r29[12] = "nodefaultroute";

        $r29[13] = "usepeerdns";

        $r29[14] = "idle";

        $r29[15] = "1800";

        $r29[16] = "mtu";

        $r29[17] = "1400";

        $r29[18] = "mru";

        $r29[19] = "1400";

        r88 = $r29;

        goto label23;

     label20:
        r89 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r90 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        r91 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $z3 = r1.<com.android.internal.net.VpnProfile: boolean mppe>;

        if $z3 == 0 goto label21;

        r92 = "+mppe";

        goto label22;

     label21:
        r92 = "nomppe";

     label22:
        $r21 = newarray (java.lang.String)[20];

        $r21[0] = r3;

        $r21[1] = "pptp";

        $r21[2] = r89;

        $r21[3] = "1723";

        $r21[4] = "name";

        $r21[5] = r90;

        $r21[6] = "password";

        $r21[7] = r91;

        $r21[8] = "linkname";

        $r21[9] = "vpn";

        $r21[10] = "refuse-eap";

        $r21[11] = "nodefaultroute";

        $r21[12] = "usepeerdns";

        $r21[13] = "idle";

        $r21[14] = "1800";

        $r21[15] = "mtu";

        $r21[16] = "1400";

        $r21[17] = "mru";

        $r21[18] = "1400";

        $r21[19] = r92;

        r88 = $r21;

     label23:
        $r93 = new com.android.internal.net.VpnConfig;

        specialinvoke $r93.<com.android.internal.net.VpnConfig: void <init>()>();

        $r93.<com.android.internal.net.VpnConfig: boolean legacy> = 1;

        $r95 = r1.<com.android.internal.net.VpnProfile: java.lang.String key>;

        $r93.<com.android.internal.net.VpnConfig: java.lang.String user> = $r95;

        $r93.<com.android.internal.net.VpnConfig: java.lang.String interfaze> = r3;

        $r96 = r1.<com.android.internal.net.VpnProfile: java.lang.String name>;

        $r93.<com.android.internal.net.VpnConfig: java.lang.String session> = $r96;

        $r93.<com.android.internal.net.VpnConfig: boolean isMetered> = 0;

        $r97 = r1.<com.android.internal.net.VpnProfile: android.net.ProxyInfo proxy>;

        $r93.<com.android.internal.net.VpnConfig: android.net.ProxyInfo proxyInfo> = $r97;

        $r98 = r1.<com.android.internal.net.VpnProfile: java.lang.String routes>;

        virtualinvoke $r93.<com.android.internal.net.VpnConfig: void addLegacyRoutes(java.lang.String)>($r98);

        $r99 = r1.<com.android.internal.net.VpnProfile: java.lang.String dnsServers>;

        $z7 = virtualinvoke $r99.<java.lang.String: boolean isEmpty()>();

        if $z7 != 0 goto label24;

        $r26 = r1.<com.android.internal.net.VpnProfile: java.lang.String dnsServers>;

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String[] split(java.lang.String)>(" +");

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        $r93.<com.android.internal.net.VpnConfig: java.util.List dnsServers> = $r28;

     label24:
        $r22 = r1.<com.android.internal.net.VpnProfile: java.lang.String searchDomains>;

        $z4 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label25;

        $r23 = r1.<com.android.internal.net.VpnProfile: java.lang.String searchDomains>;

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String[] split(java.lang.String)>(" +");

        $r25 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r24);

        $r93.<com.android.internal.net.VpnConfig: java.util.List searchDomains> = $r25;

     label25:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void startLegacyVpn(com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[],com.android.internal.net.VpnProfile)>($r93, r86, r88, r1);

        return;

     label26:
        $r100 = new java.lang.IllegalStateException;

        specialinvoke $r100.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot load credentials");

        throw $r100;

     label27:
        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Restricted users cannot establish VPNs");

        throw $r6;
    }

    public void startVpnProfile(java.lang.String, android.security.KeyStore)
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;
        java.lang.String $r5, r7;
        java.lang.Throwable $r6;
        android.security.KeyStore r8;
        com.android.server.connectivity._$$Lambda$Vpn$XZx2CQhtfrsWdTzM6_2aSP_XhYw r9;
        java.lang.SecurityException r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.connectivity.Vpn;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: android.security.KeyStore;

        entermonitor r0;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r7, "No package name provided");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r8, "KeyStore missing");

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceNotRestrictedUser()>();

        $z0 = virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean prepare(java.lang.String,java.lang.String,int)>(r7, null, 2);

        if $z0 == 0 goto label3;

        r9 = new com.android.server.connectivity._$$Lambda$Vpn$XZx2CQhtfrsWdTzM6_2aSP_XhYw;

        specialinvoke r9.<com.android.server.connectivity._$$Lambda$Vpn$XZx2CQhtfrsWdTzM6_2aSP_XhYw: void <init>(com.android.server.connectivity.Vpn,java.lang.String,android.security.KeyStore)>(r0, r7, r8);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r9);

     label2:
        exitmonitor r0;

        return;

     label3:
        r10 = new java.lang.SecurityException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User consent not granted for package ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r5 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw r10;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void stopVpnProfile(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.connectivity.Vpn;

        r3 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "No package name provided");

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceNotRestrictedUser()>();

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isCurrentIkev2VpnLocked(java.lang.String)>(r3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareInternal(java.lang.String)>("[Legacy VPN]");

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stopVpnRunnerPrivileged()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$VpnRunner $r1, $r2;
        java.lang.Throwable $r3, $r4, $r5, r6;
        boolean z0, z1;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label01:
        z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isSettingsVpnLocked()>();

     label02:
        if z0 != 0 goto label03;

        exitmonitor r0;

        return;

     label03:
        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        z1 = $r1 instanceof com.android.server.connectivity.Vpn$LegacyVpnRunner;

        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner>;

        virtualinvoke $r2.<com.android.server.connectivity.Vpn$VpnRunner: void exit()>();

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$VpnRunner mVpnRunner> = null;

     label04:
        if z1 == 0 goto label12;

     label05:
        entermonitor "LegacyVpnRunner";

     label06:
        exitmonitor "LegacyVpnRunner";

     label07:
        goto label12;

     label08:
        $r5 := @caughtexception;

        r6 = $r5;

     label09:
        exitmonitor "LegacyVpnRunner";

     label10:
        throw r6;

     label11:
        $r3 := @caughtexception;

        r6 = $r3;

        goto label09;

     label12:
        exitmonitor r0;

        return;

     label13:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label13;
    }

    public android.net.NetworkCapabilities updateCapabilities(android.net.Network)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.Network[] r1, $r4, r8;
        com.android.internal.net.VpnConfig $r2, $r3, r7;
        boolean $z1, z2, $z3;
        java.lang.Throwable $r5;
        android.net.Network r6;
        android.content.Context $r9;
        java.lang.Object $r10;
        android.net.ConnectivityManager $r11;
        android.net.NetworkCapabilities $r12, $r13, $r14;

        r0 := @this: com.android.server.connectivity.Vpn;

        r6 := @parameter0: android.net.Network;

        entermonitor r0;

     label01:
        r7 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

     label02:
        if r7 != null goto label03;

        exitmonitor r0;

        return null;

     label03:
        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        r1 = $r2.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks>;

     label04:
        r8 = r1;

        if r1 != null goto label06;

        r8 = r1;

        if r6 == null goto label06;

     label05:
        $r4 = newarray (android.net.Network)[1];

        $r4[0] = r6;

        r8 = $r4;

     label06:
        z2 = 0;

     label07:
        $z3 = r0.<com.android.server.connectivity.Vpn: boolean mIsPackageTargetingAtLeastQ>;

        if $z3 == 0 goto label11;

     label08:
        z2 = 0;

     label09:
        $r3 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $z1 = $r3.<com.android.internal.net.VpnConfig: boolean isMetered>;

        if $z1 == 0 goto label11;

     label10:
        z2 = 1;

     label11:
        $r9 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/ConnectivityManager;");

        $r11 = (android.net.ConnectivityManager) $r10;

        $r12 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        staticinvoke <com.android.server.connectivity.Vpn: void applyUnderlyingCapabilities(android.net.ConnectivityManager,android.net.Network[],android.net.NetworkCapabilities,boolean)>($r11, r8, $r12, z2);

        $r13 = new android.net.NetworkCapabilities;

        $r14 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        specialinvoke $r13.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r14);

     label12:
        exitmonitor r0;

        return $r13;

     label13:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    protected void updateState(android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo$DetailedState r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r8, r11;
        android.net.NetworkInfo $r9, $r10;
        android.net.NetworkAgent r12;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        r11 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setting state=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Vpn", $r8);

        $r9 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r9.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>(r1, r11, null);

        r12 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if r12 == null goto label1;

        $r10 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke r12.<android.net.NetworkAgent: void sendNetworkInfo(android.net.NetworkInfo)>($r10);

     label1:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateAlwaysOnNotification(android.net.NetworkInfo$DetailedState)>(r1);

        return;
    }

    void validateRequiredFeatures(com.android.internal.net.VpnProfile)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnProfile r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnProfile;

        i0 = r1.<com.android.internal.net.VpnProfile: int type>;

        if i0 == 6 goto label1;

        if i0 == 7 goto label1;

        if i0 == 8 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r4.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.ipsec_tunnels");

        if $z0 == 0 goto label2;

        return;

     label2:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Ikev2VpnProfile(s) requires PackageManager.FEATURE_IPSEC_TUNNELS");

        throw $r2;
    }
}
