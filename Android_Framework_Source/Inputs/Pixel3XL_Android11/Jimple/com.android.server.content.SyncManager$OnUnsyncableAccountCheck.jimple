class com.android.server.content.SyncManager$OnUnsyncableAccountCheck extends java.lang.Object implements android.content.ServiceConnection
{
    static final long SERVICE_BOUND_TIME_MILLIS;
    private final com.android.server.content.SyncManager$OnReadyCallback mOnReadyCallback;
    private final android.content.pm.RegisteredServicesCache$ServiceInfo mSyncAdapterInfo;

    void <init>(android.content.pm.RegisteredServicesCache$ServiceInfo, com.android.server.content.SyncManager$OnReadyCallback)
    {
        com.android.server.content.SyncManager$OnUnsyncableAccountCheck r0;
        android.content.pm.RegisteredServicesCache$ServiceInfo r1;
        com.android.server.content.SyncManager$OnReadyCallback r2;

        r0 := @this: com.android.server.content.SyncManager$OnUnsyncableAccountCheck;

        r1 := @parameter0: android.content.pm.RegisteredServicesCache$ServiceInfo;

        r2 := @parameter1: com.android.server.content.SyncManager$OnReadyCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.content.SyncManager$OnUnsyncableAccountCheck: android.content.pm.RegisteredServicesCache$ServiceInfo mSyncAdapterInfo> = r1;

        r0.<com.android.server.content.SyncManager$OnUnsyncableAccountCheck: com.android.server.content.SyncManager$OnReadyCallback mOnReadyCallback> = r2;

        return;
    }

    static void access$2400(com.android.server.content.SyncManager$OnUnsyncableAccountCheck)
    {
        com.android.server.content.SyncManager$OnUnsyncableAccountCheck r0;

        r0 := @parameter0: com.android.server.content.SyncManager$OnUnsyncableAccountCheck;

        specialinvoke r0.<com.android.server.content.SyncManager$OnUnsyncableAccountCheck: void onReady()>();

        return;
    }

    private void onReady()
    {
        com.android.server.content.SyncManager$OnUnsyncableAccountCheck r0;
        long l0;
        com.android.server.content.SyncManager$OnReadyCallback $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.content.SyncManager$OnUnsyncableAccountCheck;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.content.SyncManager$OnUnsyncableAccountCheck: com.android.server.content.SyncManager$OnReadyCallback mOnReadyCallback>;

        interfaceinvoke $r2.<com.android.server.content.SyncManager$OnReadyCallback: void onReady()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        com.android.server.content.SyncManager$OnUnsyncableAccountCheck r0;
        android.os.RemoteException $r1;
        java.lang.StringBuilder $r2;
        android.content.pm.RegisteredServicesCache$ServiceInfo $r4;
        java.lang.String $r6;
        android.content.ComponentName r7;
        android.os.IBinder r8;
        android.content.ISyncAdapter r9;
        com.android.server.content.SyncManager$OnUnsyncableAccountCheck$1 r10;

        r0 := @this: com.android.server.content.SyncManager$OnUnsyncableAccountCheck;

        r7 := @parameter0: android.content.ComponentName;

        r8 := @parameter1: android.os.IBinder;

        r9 = staticinvoke <android.content.ISyncAdapter$Stub: android.content.ISyncAdapter asInterface(android.os.IBinder)>(r8);

     label1:
        r10 = new com.android.server.content.SyncManager$OnUnsyncableAccountCheck$1;

        specialinvoke r10.<com.android.server.content.SyncManager$OnUnsyncableAccountCheck$1: void <init>(com.android.server.content.SyncManager$OnUnsyncableAccountCheck)>(r0);

        interfaceinvoke r9.<android.content.ISyncAdapter: void onUnsyncableAccount(android.content.ISyncAdapterUnsyncableAccountCallback)>(r10);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not call onUnsyncableAccountDone ");

        $r4 = r0.<com.android.server.content.SyncManager$OnUnsyncableAccountCheck: android.content.pm.RegisteredServicesCache$ServiceInfo mSyncAdapterInfo>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SyncManager", $r6, $r1);

        specialinvoke r0.<com.android.server.content.SyncManager$OnUnsyncableAccountCheck: void onReady()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        com.android.server.content.SyncManager$OnUnsyncableAccountCheck r0;
        android.content.ComponentName r1;

        r0 := @this: com.android.server.content.SyncManager$OnUnsyncableAccountCheck;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.content.SyncManager$OnUnsyncableAccountCheck: long SERVICE_BOUND_TIME_MILLIS> = 5000L;

        return;
    }
}
