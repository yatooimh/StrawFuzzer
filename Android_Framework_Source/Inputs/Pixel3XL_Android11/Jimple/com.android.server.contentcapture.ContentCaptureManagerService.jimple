public final class com.android.server.contentcapture.ContentCaptureManagerService extends com.android.server.infra.AbstractMasterSystemService
{
    private static final int DATA_SHARE_BYTE_BUFFER_LENGTH;
    private static final int EVENT__DATA_SHARE_ERROR_CONCURRENT_REQUEST;
    private static final int EVENT__DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED;
    private static final int EVENT__DATA_SHARE_WRITE_FINISHED;
    private static final int MAX_CONCURRENT_FILE_SHARING_REQUESTS;
    private static final int MAX_DATA_SHARE_FILE_DESCRIPTORS_TTL_MS;
    private static final int MAX_TEMP_SERVICE_DURATION_MS;
    static final java.lang.String RECEIVER_BUNDLE_EXTRA_SESSIONS;
    private static final java.lang.String TAG;
    private android.app.ActivityManagerInternal mAm;
    private final java.util.concurrent.Executor mDataShareExecutor;
    int mDevCfgIdleFlushingFrequencyMs;
    int mDevCfgIdleUnbindTimeoutMs;
    int mDevCfgLogHistorySize;
    int mDevCfgLoggingLevel;
    int mDevCfgMaxBufferSize;
    int mDevCfgTextChangeFlushingFrequencyMs;
    private boolean mDisabledByDeviceConfig;
    private android.util.SparseBooleanArray mDisabledBySettings;
    final com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions mGlobalContentCaptureOptions;
    private final android.os.Handler mHandler;
    private final com.android.server.contentcapture.ContentCaptureManagerService$LocalService mLocalService;
    private final java.util.Set mPackagesWithShareRequests;
    final android.util.LocalLog mRequestsHistory;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String RECEIVER_BUNDLE_EXTRA_SESSIONS> = "sessions";

        <com.android.server.contentcapture.ContentCaptureManagerService: int MAX_TEMP_SERVICE_DURATION_MS> = 120000;

        <com.android.server.contentcapture.ContentCaptureManagerService: int MAX_DATA_SHARE_FILE_DESCRIPTORS_TTL_MS> = 300000;

        <com.android.server.contentcapture.ContentCaptureManagerService: int MAX_CONCURRENT_FILE_SHARING_REQUESTS> = 10;

        <com.android.server.contentcapture.ContentCaptureManagerService: int EVENT__DATA_SHARE_WRITE_FINISHED> = 9;

        <com.android.server.contentcapture.ContentCaptureManagerService: int EVENT__DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED> = 15;

        <com.android.server.contentcapture.ContentCaptureManagerService: int EVENT__DATA_SHARE_ERROR_CONCURRENT_REQUEST> = 14;

        <com.android.server.contentcapture.ContentCaptureManagerService: int DATA_SHARE_BYTE_BUFFER_LENGTH> = 1024;

        $r0 = class "Lcom/android/server/contentcapture/ContentCaptureManagerService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.util.List r1;
        int i0, $i1, $i3, $i5, $i6, i8, $i9;
        com.android.server.infra.FrameworkResourcesServiceNameResolver $r2;
        com.android.server.contentcapture.ContentCaptureManagerService$LocalService $r3;
        java.util.concurrent.ExecutorService $r4;
        android.os.Handler $r5;
        android.os.Looper $r6;
        java.util.HashSet $r7;
        com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions $r8, $r38;
        android.app.Application $r9;
        java.util.concurrent.Executor $r10;
        com.android.server.contentcapture._$$Lambda$ContentCaptureManagerService$4nadnpI0ImgQseJYN0WTE4IJ4s4 $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r12;
        android.content.pm.UserInfo $r13;
        java.lang.StringBuilder $r14, $r22, $r27;
        java.lang.String $r18, $r25, $r30, r32, r34, r36, $r40;
        android.util.SparseBooleanArray $r19, $r20, $r21;
        android.util.LocalLog $r26;
        android.content.Context r31;
        com.android.server.infra.ServiceNameResolver $r39, $r41;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r31 := @parameter0: android.content.Context;

        $r2 = new com.android.server.infra.FrameworkResourcesServiceNameResolver;

        specialinvoke $r2.<com.android.server.infra.FrameworkResourcesServiceNameResolver: void <init>(android.content.Context,int)>(r31, 17039861);

        specialinvoke r0.<com.android.server.infra.AbstractMasterSystemService: void <init>(android.content.Context,com.android.server.infra.ServiceNameResolver,java.lang.String,int)>(r31, $r2, "no_content_capture", 1);

        $r3 = new com.android.server.contentcapture.ContentCaptureManagerService$LocalService;

        specialinvoke $r3.<com.android.server.contentcapture.ContentCaptureManagerService$LocalService: void <init>(com.android.server.contentcapture.ContentCaptureManagerService,com.android.server.contentcapture.ContentCaptureManagerService$1)>(r0, null);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCaptureManagerService$LocalService mLocalService> = $r3;

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.util.concurrent.Executor mDataShareExecutor> = $r4;

        $r5 = new android.os.Handler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.os.Handler mHandler> = $r5;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.util.Set mPackagesWithShareRequests> = $r7;

        $r8 = new com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions;

        specialinvoke $r8.<com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions: void <init>(com.android.server.contentcapture.ContentCaptureManagerService)>(r0);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions mGlobalContentCaptureOptions> = $r8;

        $r9 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        $r10 = virtualinvoke $r9.<android.app.Application: java.util.concurrent.Executor getMainExecutor()>();

        $r11 = new com.android.server.contentcapture._$$Lambda$ContentCaptureManagerService$4nadnpI0ImgQseJYN0WTE4IJ4s4;

        specialinvoke $r11.<com.android.server.contentcapture._$$Lambda$ContentCaptureManagerService$4nadnpI0ImgQseJYN0WTE4IJ4s4: void <init>(com.android.server.contentcapture.ContentCaptureManagerService)>(r0);

        staticinvoke <android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)>("content_capture", $r10, $r11);

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setDeviceConfigProperties()>();

        $i1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLogHistorySize>;

        if $i1 <= 0 goto label2;

        $z3 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean debug>;

        if $z3 == 0 goto label1;

        r32 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("log history size: ");

        $i6 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLogHistorySize>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r32, $r30);

     label1:
        $r26 = new android.util.LocalLog;

        $i5 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLogHistorySize>;

        specialinvoke $r26.<android.util.LocalLog: void <init>(int)>($i5);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.LocalLog mRequestsHistory> = $r26;

        goto label4;

     label2:
        $z0 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean debug>;

        if $z0 == 0 goto label3;

        r34 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("disabled log history because size is ");

        $i3 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLogHistorySize>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r34, $r25);

     label3:
        r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.LocalLog mRequestsHistory> = null;

     label4:
        r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.util.List getSupportedUsers()>();

        i8 = 0;

     label5:
        $i9 = interfaceinvoke r1.<java.util.List: int size()>();

        if i8 >= $i9 goto label8;

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        $r13 = (android.content.pm.UserInfo) $r12;

        i0 = $r13.<android.content.pm.UserInfo: int id>;

        $z1 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isEnabledBySettings(int)>(i0);

        $z2 = $z1 ^ 1;

        if $z2 == 0 goto label7;

        r36 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" disabled by settings");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r36, $r18);

        $r19 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        if $r19 != null goto label6;

        $r21 = new android.util.SparseBooleanArray;

        specialinvoke $r21.<android.util.SparseBooleanArray: void <init>(int)>(1);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings> = $r21;

     label6:
        $r20 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        virtualinvoke $r20.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

     label7:
        $r38 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions mGlobalContentCaptureOptions>;

        $r39 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        $r40 = interfaceinvoke $r39.<com.android.server.infra.ServiceNameResolver: java.lang.String getServiceName(int)>(i0);

        $r41 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        $z4 = interfaceinvoke $r41.<com.android.server.infra.ServiceNameResolver: boolean isTemporary(int)>(i0);

        staticinvoke <com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions: void access$100(com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions,int,java.lang.String,boolean)>($r38, i0, $r40, $z4);

        i8 = i8 + 1;

        goto label5;

     label8:
        return;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$1000(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.lang.String access$1100()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        return $r0;
    }

    static void access$1200(com.android.server.contentcapture.ContentCaptureManagerService, java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void assertCalledByPackageOwner(java.lang.String)>(r1);

        return;
    }

    static java.lang.Object access$1300(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$1400(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static void access$1500(com.android.server.contentcapture.ContentCaptureManagerService, java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void assertCalledByPackageOwner(java.lang.String)>(r1);

        return;
    }

    static java.lang.Object access$1600(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$1700(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.util.Set access$1800(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.util.Set mPackagesWithShareRequests>;

        return $r1;
    }

    static com.android.server.infra.ServiceNameResolver access$1900(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.server.infra.ServiceNameResolver $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        return $r1;
    }

    static android.app.ActivityManagerInternal access$200(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        android.app.ActivityManagerInternal $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.app.ActivityManagerInternal getAmInternal()>();

        return $r1;
    }

    static java.lang.Object access$2000(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$2100(com.android.server.contentcapture.ContentCaptureManagerService, com.android.internal.os.IResultReceiver, java.lang.Runnable)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.internal.os.IResultReceiver r1;
        java.lang.Runnable r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter1: com.android.internal.os.IResultReceiver;

        r2 := @parameter2: java.lang.Runnable;

        $z0 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean throwsSecurityException(com.android.internal.os.IResultReceiver,java.lang.Runnable)>(r1, r2);

        return $z0;
    }

    static boolean access$2200(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $z0 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig>;

        return $z0;
    }

    static boolean access$2300(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isDisabledBySettingsLocked(int)>(i0);

        return $z0;
    }

    static java.lang.Object access$2400(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$2500(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.lang.Object access$2600(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$2700(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.lang.Object access$2800(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static void access$2900(com.android.server.contentcapture.ContentCaptureManagerService, java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void assertCalledByPackageOwner(java.lang.String)>(r1);

        return;
    }

    static java.lang.Object access$300(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static void access$3000(com.android.server.contentcapture.ContentCaptureManagerService, java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void assertCalledByServiceLocked(java.lang.String)>(r1);

        return;
    }

    static java.lang.Object access$3100(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$3200(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService peekServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.lang.Object access$3300(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$3400(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService peekServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.lang.Object access$3500(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$3600(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService peekServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static com.android.server.infra.ServiceNameResolver access$3700(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.server.infra.ServiceNameResolver $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        return $r1;
    }

    static java.util.concurrent.Executor access$3800(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.util.concurrent.Executor mDataShareExecutor>;

        return $r1;
    }

    static android.os.Handler access$3900(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$400(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.lang.Object access$4000(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.ServiceNameResolver access$4100(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.server.infra.ServiceNameResolver $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        return $r1;
    }

    static java.lang.Object access$4200(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$500(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isDefaultServiceLocked(int)>(i0);

        return $z0;
    }

    static boolean access$600(com.android.server.contentcapture.ContentCaptureManagerService, java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isCalledByServiceLocked(java.lang.String)>(r1);

        return $z0;
    }

    static java.lang.Object access$700(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.infra.AbstractPerUserSystemService access$800(com.android.server.contentcapture.ContentCaptureManagerService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.infra.AbstractPerUserSystemService $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        return $r1;
    }

    static java.lang.Object access$900(com.android.server.contentcapture.ContentCaptureManagerService)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        return $r1;
    }

    private void assertCalledByServiceLocked(java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isCalledByServiceLocked(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("caller is not user\'s ContentCapture service");

        throw $r2;
    }

    private android.app.ActivityManagerInternal getAmInternal()
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object r1, $r5;
        android.app.ActivityManagerInternal $r3, $r4, $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.app.ActivityManagerInternal mAm>;

        if $r3 != null goto label2;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r6 = (android.app.ActivityManagerInternal) $r5;

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.app.ActivityManagerInternal mAm> = $r6;

     label2:
        exitmonitor r1;

     label3:
        $r4 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.app.ActivityManagerInternal mAm>;

        return $r4;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean isCalledByServiceLocked(java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1, $r10, $r15, $r22, $r28, r29, r30, r33, r35, r37, r40;
        int i0, $i1, i6, i7;
        com.android.server.infra.ServiceNameResolver $r2;
        android.content.Context $r3;
        java.lang.StringBuilder $r4, $r11, $r16, $r24;
        android.content.pm.PackageManager$NameNotFoundException $r23;
        android.content.ComponentName r32;
        android.content.pm.PackageManager r36;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: java.lang.String;

        i6 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        r29 = interfaceinvoke $r2.<com.android.server.infra.ServiceNameResolver: java.lang.String getServiceName(int)>(i6);

        if r29 != null goto label1;

        r30 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": called by UID ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but there\'s no service set for user ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r30, $r22);

        return 0;

     label1:
        r32 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r29);

        if r32 != null goto label2;

        r33 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invalid service name: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r33, $r15);

        return 0;

     label2:
        r35 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.content.Context getContext()>();

        r36 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label3:
        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i7 = virtualinvoke r36.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r35, $i1);

     label4:
        if i0 == i7 goto label5;

        r37 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": called by UID ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but service UID is ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r37, $r10);

        return 0;

     label5:
        return 1;

     label6:
        $r23 := @caughtexception;

        r40 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": could not verify UID for ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r40, $r28);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label6;
    }

    private boolean isDefaultServiceLocked(int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        java.lang.String r1, $r4;
        com.android.server.infra.ServiceNameResolver $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        r1 = interfaceinvoke $r2.<com.android.server.infra.ServiceNameResolver: java.lang.String getDefaultServiceName(int)>(i0);

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.ServiceNameResolver mServiceNameResolver>;

        $r4 = interfaceinvoke $r3.<com.android.server.infra.ServiceNameResolver: java.lang.String getServiceName(int)>(i0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    private boolean isDisabledBySettingsLocked(int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        android.util.SparseBooleanArray r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isEnabledBySettings(int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0, $i1;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        boolean z0;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.content.Context getContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 1;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "content_capture_enabled", 1, i0);

        if $i1 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$destroySessions$1(com.android.server.contentcapture.ContentCapturePerUserService)
    {
        com.android.server.contentcapture.ContentCapturePerUserService r0;

        r0 := @parameter0: com.android.server.contentcapture.ContentCapturePerUserService;

        virtualinvoke r0.<com.android.server.contentcapture.ContentCapturePerUserService: void destroySessionsLocked()>();

        return;
    }

    static void lambda$listSessions$2(java.util.ArrayList, com.android.server.contentcapture.ContentCapturePerUserService)
    {
        java.util.ArrayList r0;
        com.android.server.contentcapture.ContentCapturePerUserService r1;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: com.android.server.contentcapture.ContentCapturePerUserService;

        virtualinvoke r1.<com.android.server.contentcapture.ContentCapturePerUserService: void listSessionsLocked(java.util.ArrayList)>(r0);

        return;
    }

    private void onDeviceConfigChange(android.provider.DeviceConfig$Properties)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        android.provider.DeviceConfig$Properties r1;
        java.util.Iterator r2;
        java.lang.String r3, r4, $r8, $r12;
        java.util.Set $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r7;
        int $i0;
        java.lang.StringBuilder $r9;
        byte b2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: android.provider.DeviceConfig$Properties;

        $r6 = virtualinvoke r1.<android.provider.DeviceConfig$Properties: java.util.Set getKeyset()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r7;

        b2 = -1;

        $i0 = virtualinvoke r3.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1970239836: goto label09;
            case -302650995: goto label08;
            case -148969820: goto label07;
            case 227845607: goto label06;
            case 1119140421: goto label05;
            case 1568835651: goto label04;
            case 2068460406: goto label03;
            default: goto label02;
        };

     label02:
        goto label10;

     label03:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("idle_flush_frequency");

        if $z1 == 0 goto label02;

        b2 = 3;

        goto label10;

     label04:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("idle_unbind_timeout");

        if $z2 == 0 goto label02;

        b2 = 6;

        goto label10;

     label05:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("max_buffer_size");

        if $z3 == 0 goto label02;

        b2 = 2;

        goto label10;

     label06:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("log_history_size");

        if $z4 == 0 goto label02;

        b2 = 4;

        goto label10;

     label07:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("text_change_flush_frequency");

        if $z5 == 0 goto label02;

        b2 = 5;

        goto label10;

     label08:
        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("service_explicitly_enabled");

        if $z6 == 0 goto label02;

        b2 = 0;

        goto label10;

     label09:
        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("logging_level");

        if $z7 == 0 goto label02;

        b2 = 1;

     label10:
        tableswitch(b2)
        {
            case 0: goto label14;
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label12;
            case 4: goto label12;
            case 5: goto label12;
            case 6: goto label12;
            default: goto label11;
        };

     label11:
        r4 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring change on ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r4, $r12);

        goto label01;

     label12:
        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setFineTuneParamsFromDeviceConfig()>();

        return;

     label13:
        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setLoggingLevelFromDeviceConfig()>();

        return;

     label14:
        $r8 = virtualinvoke r1.<android.provider.DeviceConfig$Properties: java.lang.String getString(java.lang.String,java.lang.String)>(r3, null);

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setDisabledByDeviceConfig(java.lang.String)>($r8);

        return;

     label15:
        return;
    }

    private void setContentCaptureFeatureEnabledBySettingsForUser(int, boolean)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        boolean z0, $z2, $z3, $z4, $z5, z6, z7;
        java.lang.Object r1;
        android.util.SparseBooleanArray $r2, $r3, $r7, $r12, r17;
        java.lang.String $r6, $r11, $r15, r18, r20, r22;
        java.lang.Throwable $r16;
        java.lang.StringBuilder r19, r21, r23;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        if $r2 != null goto label02;

        r17 = new android.util.SparseBooleanArray;

        specialinvoke r17.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings> = r17;

     label02:
        $r3 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        z6 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

     label03:
        $z2 = z6 ^ 1;

        $z3 = z0 ^ $z2;

        if $z3 != 0 goto label07;

     label04:
        $z5 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean debug>;

        if $z5 == 0 goto label05;

        r18 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setContentCaptureFeatureEnabledForUser(): already ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r15 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r18, $r15);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        if z0 == 0 goto label10;

     label08:
        r20 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setContentCaptureFeatureEnabled(): enabling service for user ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r20, $r11);

        $r12 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        virtualinvoke $r12.<android.util.SparseBooleanArray: void delete(int)>(i0);

     label09:
        goto label11;

     label10:
        r22 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setContentCaptureFeatureEnabled(): disabling service for user ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r22, $r6);

        $r7 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        virtualinvoke $r7.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

     label11:
        z7 = 1;

        if z0 == 0 goto label15;

     label12:
        $z4 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig>;

        if $z4 == 0 goto label14;

     label13:
        z7 = 1;

        goto label15;

     label14:
        z7 = 0;

     label15:
        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService updateCachedServiceLocked(int,boolean)>(i0, z7);

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r16 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private void setDeviceConfigProperties()
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setLoggingLevelFromDeviceConfig()>();

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setFineTuneParamsFromDeviceConfig()>();

        $r1 = staticinvoke <android.provider.DeviceConfig: java.lang.String getProperty(java.lang.String,java.lang.String)>("content_capture", "service_explicitly_enabled");

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setDisabledByDeviceConfig(java.lang.String)>($r1);

        return;
    }

    private void setDisabledByDeviceConfig(java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0, $i2, i6;
        java.lang.String r1, $r4, $r11, $r15, $r19, r21, r22, r26, r28, r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8;
        java.lang.Object $r5, r25;
        android.content.pm.UserInfo $r6;
        java.lang.StringBuilder $r16, r27, r29, r30;
        java.lang.Throwable $r20;
        java.util.List r24;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r21 := @parameter0: java.lang.String;

        $z0 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean verbose>;

        if $z0 == 0 goto label01;

        r22 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDisabledByDeviceConfig(): explicitlyEnabled=");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>(r22, $r19);

     label01:
        r24 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.util.List getSupportedUsers()>();

        if r21 == null goto label02;

        $z5 = virtualinvoke r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z5 == 0 goto label02;

        z6 = 1;

        goto label03;

     label02:
        z6 = 0;

     label03:
        r25 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        entermonitor r25;

     label04:
        $z7 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig>;

        if $z7 != z6 goto label07;

        $z4 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean verbose>;

        if $z4 == 0 goto label05;

        r26 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDisabledByDeviceConfig(): already ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z6);

        $r15 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>(r26, $r15);

     label05:
        exitmonitor r25;

     label06:
        return;

     label07:
        r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig> = z6;

        r28 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDisabledByDeviceConfig(): set to ");

        $z1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig>;

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r4 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r28, $r4);

     label08:
        i6 = 0;

     label09:
        $i2 = interfaceinvoke r24.<java.util.List: int size()>();

        if i6 >= $i2 goto label18;

        $r5 = interfaceinvoke r24.<java.util.List: java.lang.Object get(int)>(i6);

        $r6 = (android.content.pm.UserInfo) $r5;

        i0 = $r6.<android.content.pm.UserInfo: int id>;

        $z2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig>;

        if $z2 != 0 goto label12;

        $z3 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isDisabledBySettingsLocked(int)>(i0);

        if $z3 == 0 goto label11;

     label10:
        goto label12;

     label11:
        z8 = 0;

        goto label13;

     label12:
        z8 = 1;

     label13:
        r1 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDisabledByDeviceConfig(): updating service for user ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

     label14:
        if z8 == 0 goto label15;

        r31 = "\'disabled\'";

        goto label16;

     label15:
        r31 = "\'enabled\'";

     label16:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r11 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r1, $r11);

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService updateCachedServiceLocked(int,boolean)>(i0, z8);

     label17:
        i6 = i6 + 1;

        goto label09;

     label18:
        exitmonitor r25;

     label19:
        return;

     label20:
        $r20 := @caughtexception;

     label21:
        exitmonitor r25;

     label22:
        throw $r20;

        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private void setFineTuneParamsFromDeviceConfig()
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        java.lang.String $r13, r15;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("content_capture", "max_buffer_size", 500);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgMaxBufferSize> = $i0;

        $i1 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("content_capture", "idle_flush_frequency", 5000);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgIdleFlushingFrequencyMs> = $i1;

        $i2 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("content_capture", "text_change_flush_frequency", 1000);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgTextChangeFlushingFrequencyMs> = $i2;

        $i3 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("content_capture", "log_history_size", 20);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLogHistorySize> = $i3;

        $i4 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("content_capture", "idle_unbind_timeout", 0);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgIdleUnbindTimeoutMs> = $i4;

        $z0 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean verbose>;

        if $z0 == 0 goto label2;

        r15 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setFineTuneParamsFromDeviceConfig(): bufferSize=");

        $i5 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgMaxBufferSize>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", idleFlush=");

        $i6 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgIdleFlushingFrequencyMs>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", textFluxh=");

        $i7 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgTextChangeFlushingFrequencyMs>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", logHistory=");

        $i8 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLogHistorySize>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", idleUnbindTimeoutMs=");

        $i9 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgIdleUnbindTimeoutMs>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r13 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>(r15, $r13);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r14 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setLoggingLevelFromDeviceConfig()
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        $i1 = staticinvoke <android.view.contentcapture.ContentCaptureHelper: int getDefaultLoggingLevel()>();

        i0 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("content_capture", "logging_level", $i1);

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLoggingLevel> = i0;

        staticinvoke <android.view.contentcapture.ContentCaptureHelper: void setLoggingLevel(int)>(i0);

        $z0 = <android.view.contentcapture.ContentCaptureHelper: boolean sVerbose>;

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean verbose> = $z0;

        $z1 = <android.view.contentcapture.ContentCaptureHelper: boolean sDebug>;

        r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean debug> = $z1;

        $z2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean verbose>;

        if $z2 == 0 goto label1;

        r1 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setLoggingLevelFromDeviceConfig(): level=");

        $i2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLoggingLevel>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", debug=");

        $z3 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean debug>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", verbose=");

        $z4 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean verbose>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>(r1, $r10);

     label1:
        return;
    }

    private boolean throwsSecurityException(com.android.internal.os.IResultReceiver, java.lang.Runnable)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1, $r8, $r10;
        android.os.RemoteException $r3;
        java.lang.Throwable $r9;
        android.os.Bundle $r11;
        com.android.internal.os.IResultReceiver r12;
        java.lang.Runnable r13;
        java.lang.StringBuilder r16;
        java.lang.SecurityException r17;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r12 := @parameter0: com.android.internal.os.IResultReceiver;

        r13 := @parameter1: java.lang.Runnable;

     label1:
        interfaceinvoke r13.<java.lang.Runnable: void run()>();

     label2:
        return 0;

     label3:
        $r9 := @caughtexception;

     label4:
        r17 = (java.lang.SecurityException) $r9;

        $r10 = virtualinvoke r17.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r11 = staticinvoke <com.android.internal.util.SyncResultReceiver: android.os.Bundle bundleFor(java.lang.String)>($r10);

        interfaceinvoke r12.<com.android.internal.os.IResultReceiver: void send(int,android.os.Bundle)>(-1, $r11);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        r1 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to send security exception (");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r8 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>(r1, $r8, $r3);

     label7:
        return 1;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void destroySessions(int, com.android.internal.os.IResultReceiver)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        java.lang.String $r4, r10;
        com.android.server.contentcapture.'-$$Lambda$ContentCaptureManagerService$jCIcV2sgwD7QUkN-c6yfPd58T_U' $r5;
        com.android.server.infra.AbstractPerUserSystemService $r6;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        com.android.internal.os.IResultReceiver r9;
        java.lang.Object r12;
        com.android.server.contentcapture.ContentCapturePerUserService r13;
        java.lang.StringBuilder r17;
        android.os.Bundle r18;
        com.android.server.infra.AbstractMasterSystemService$Visitor r19;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        r9 := @parameter1: com.android.internal.os.IResultReceiver;

        r10 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("destroySessions() for userId ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r10, $r4);

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void enforceCallingPermissionForManagement()>();

        r12 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        entermonitor r12;

        if i0 == -1 goto label05;

     label01:
        $r6 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService peekServiceForUserLocked(int)>(i0);

        r13 = (com.android.server.contentcapture.ContentCapturePerUserService) $r6;

     label02:
        if r13 == null goto label04;

     label03:
        virtualinvoke r13.<com.android.server.contentcapture.ContentCapturePerUserService: void destroySessionsLocked()>();

     label04:
        goto label06;

     label05:
        $r5 = <com.android.server.contentcapture._$$Lambda$ContentCaptureManagerService$jCIcV2sgwD7QUkN_c6yfPd58T_U: com.android.server.contentcapture.'-$$Lambda$ContentCaptureManagerService$jCIcV2sgwD7QUkN-c6yfPd58T_U' INSTANCE>;

        r19 = (com.android.server.infra.AbstractMasterSystemService$Visitor) $r5;

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void visitServicesLocked(com.android.server.infra.AbstractMasterSystemService$Visitor)>(r19);

     label06:
        exitmonitor r12;

     label07:
        r18 = new android.os.Bundle;

        specialinvoke r18.<android.os.Bundle: void <init>()>();

        interfaceinvoke r9.<com.android.internal.os.IResultReceiver: void send(int,android.os.Bundle)>(0, r18);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

     label10:
        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r12;

     label13:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    protected void dumpLocked(java.lang.String, java.io.PrintWriter)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        java.lang.String r1, r9;
        java.io.PrintWriter r2;
        java.lang.StringBuilder $r3;
        android.util.SparseBooleanArray $r6;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions $r7;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.infra.AbstractMasterSystemService: void dumpLocked(java.lang.String,java.io.PrintWriter)>(r1, r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Users disabled by Settings: ");

        $r6 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.util.SparseBooleanArray mDisabledBySettings>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r6);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("DeviceConfig Settings: ");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("disabled: ");

        $z0 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("loggingLevel: ");

        $i0 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLoggingLevel>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("maxBufferSize: ");

        $i1 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgMaxBufferSize>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("idleFlushingFrequencyMs: ");

        $i2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgIdleFlushingFrequencyMs>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("textChangeFlushingFrequencyMs: ");

        $i3 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgTextChangeFlushingFrequencyMs>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i3);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("logHistorySize: ");

        $i4 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgLogHistorySize>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("idleUnbindTimeoutMs: ");

        $i5 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: int mDevCfgIdleUnbindTimeoutMs>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Global Options:");

        $r7 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions mGlobalContentCaptureOptions>;

        virtualinvoke $r7.<com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions: void dump(java.lang.String,java.io.PrintWriter)>(r9, r2);

        return;
    }

    protected void enforceCallingPermissionForManagement()
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: android.content.Context getContext()>();

        $r2 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_CONTENT_CAPTURE", $r2);

        return;
    }

    protected int getMaximumTemporaryServiceDurationMs()
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        return 120000;
    }

    protected boolean isDisabledLocked(int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean mDisabledByDeviceConfig>;

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isDisabledBySettingsLocked(int)>(i0);

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<com.android.server.infra.AbstractMasterSystemService: boolean isDisabledLocked(int)>(i0);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    public boolean isUserSupported(com.android.server.SystemService$TargetUser)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.server.SystemService$TargetUser r1;
        android.content.pm.UserInfo $r2, $r3;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: com.android.server.SystemService$TargetUser;

        $r2 = virtualinvoke r1.<com.android.server.SystemService$TargetUser: android.content.pm.UserInfo getUserInfo()>();

        $z0 = virtualinvoke $r2.<android.content.pm.UserInfo: boolean isFull()>();

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r1.<com.android.server.SystemService$TargetUser: android.content.pm.UserInfo getUserInfo()>();

        $z1 = virtualinvoke $r3.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public void lambda$new$0$ContentCaptureManagerService(android.provider.DeviceConfig$Properties)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        android.provider.DeviceConfig$Properties r1;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: android.provider.DeviceConfig$Properties;

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void onDeviceConfigChange(android.provider.DeviceConfig$Properties)>(r1);

        return;
    }

    void listSessions(int, com.android.internal.os.IResultReceiver)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, r12;
        android.os.Bundle $r6;
        java.util.ArrayList $r7;
        com.android.server.infra.AbstractPerUserSystemService $r8;
        java.lang.Throwable $r9;
        android.os.RemoteException $r10;
        com.android.internal.os.IResultReceiver r11;
        java.lang.Object r15;
        com.android.server.contentcapture.ContentCapturePerUserService r16;
        com.android.server.contentcapture._$$Lambda$ContentCaptureManagerService$17qcaUpUsTMt5exVwDnmTmyrpJw r18;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        r11 := @parameter1: com.android.internal.os.IResultReceiver;

        r12 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listSessions() for userId ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r12, $r5);

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void enforceCallingPermissionForManagement()>();

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r15 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        entermonitor r15;

        if i0 == -1 goto label06;

     label01:
        $r8 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService peekServiceForUserLocked(int)>(i0);

        r16 = (com.android.server.contentcapture.ContentCapturePerUserService) $r8;

     label02:
        if r16 == null goto label04;

     label03:
        virtualinvoke r16.<com.android.server.contentcapture.ContentCapturePerUserService: void listSessionsLocked(java.util.ArrayList)>($r7);

     label04:
        goto label07;

     label05:
        $r9 := @caughtexception;

        goto label13;

     label06:
        r18 = new com.android.server.contentcapture._$$Lambda$ContentCaptureManagerService$17qcaUpUsTMt5exVwDnmTmyrpJw;

        specialinvoke r18.<com.android.server.contentcapture._$$Lambda$ContentCaptureManagerService$17qcaUpUsTMt5exVwDnmTmyrpJw: void <init>(java.util.ArrayList)>($r7);

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void visitServicesLocked(com.android.server.infra.AbstractMasterSystemService$Visitor)>(r18);

     label07:
        exitmonitor r15;

     label08:
        virtualinvoke $r6.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>("sessions", $r7);

     label09:
        interfaceinvoke r11.<com.android.internal.os.IResultReceiver: void send(int,android.os.Bundle)>(0, $r6);

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

     label12:
        return;

     label13:
        exitmonitor r15;

     label14:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label05;
    }

    protected com.android.server.contentcapture.ContentCapturePerUserService newServiceLocked(int, boolean)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        boolean z0;
        com.android.server.contentcapture.ContentCapturePerUserService $r1;
        java.lang.Object $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new com.android.server.contentcapture.ContentCapturePerUserService;

        $r2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: java.lang.Object mLock>;

        specialinvoke $r1.<com.android.server.contentcapture.ContentCapturePerUserService: void <init>(com.android.server.contentcapture.ContentCaptureManagerService,java.lang.Object,boolean,int)>(r0, $r2, z0, i0);

        return $r1;
    }

    protected volatile com.android.server.infra.AbstractPerUserSystemService newServiceLocked(int, boolean)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        boolean z0;
        com.android.server.contentcapture.ContentCapturePerUserService $r1;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCapturePerUserService newServiceLocked(int,boolean)>(i0, z0);

        return $r1;
    }

    protected void onServiceNameChanged(int, java.lang.String, boolean)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        java.lang.String r1;
        boolean z0;
        com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions mGlobalContentCaptureOptions>;

        staticinvoke <com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions: void access$100(com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions,int,java.lang.String,boolean)>($r2, i0, r1, z0);

        specialinvoke r0.<com.android.server.infra.AbstractMasterSystemService: void onServiceNameChanged(int,java.lang.String,boolean)>(i0, r1, z0);

        return;
    }

    protected void onServicePackageUpdatedLocked(int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.contentcapture.ContentCapturePerUserService r1;
        com.android.server.infra.AbstractPerUserSystemService $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        r1 = (com.android.server.contentcapture.ContentCapturePerUserService) $r2;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.contentcapture.ContentCapturePerUserService: void onPackageUpdatedLocked()>();

     label1:
        return;
    }

    protected void onServicePackageUpdatingLocked(int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0;
        com.android.server.contentcapture.ContentCapturePerUserService r1;
        com.android.server.infra.AbstractPerUserSystemService $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>(i0);

        r1 = (com.android.server.contentcapture.ContentCapturePerUserService) $r2;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.contentcapture.ContentCapturePerUserService: void onPackageUpdatingLocked()>();

     label1:
        return;
    }

    protected void onServiceRemoved(com.android.server.contentcapture.ContentCapturePerUserService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.server.contentcapture.ContentCapturePerUserService r1;
        int i0;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: com.android.server.contentcapture.ContentCapturePerUserService;

        i0 := @parameter1: int;

        virtualinvoke r1.<com.android.server.contentcapture.ContentCapturePerUserService: void destroyLocked()>();

        return;
    }

    protected volatile void onServiceRemoved(com.android.server.infra.AbstractPerUserSystemService, int)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.server.infra.AbstractPerUserSystemService r1;
        int i0;
        com.android.server.contentcapture.ContentCapturePerUserService $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: com.android.server.infra.AbstractPerUserSystemService;

        i0 := @parameter1: int;

        $r2 = (com.android.server.contentcapture.ContentCapturePerUserService) r1;

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void onServiceRemoved(com.android.server.contentcapture.ContentCapturePerUserService,int)>($r2, i0);

        return;
    }

    protected void onSettingsChanged(int, java.lang.String)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        int i0, $i1;
        java.lang.String r1, r2, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        byte b3;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        if $i1 == -322385022 goto label2;

     label1:
        goto label3;

     label2:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("content_capture_enabled");

        if $z0 == 0 goto label1;

        b3 = 0;

        goto label4;

     label3:
        b3 = -1;

     label4:
        if b3 == 0 goto label5;

        r2 = <com.android.server.contentcapture.ContentCaptureManagerService: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected property (");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("); updating cache instead");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r2, $r8);

        return;

     label5:
        $z1 = specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: boolean isEnabledBySettings(int)>(i0);

        specialinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void setContentCaptureFeatureEnabledBySettingsForUser(int,boolean)>(i0, $z1);

        return;
    }

    public void onStart()
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub $r1;
        com.android.server.contentcapture.ContentCaptureManagerService$LocalService $r2;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        $r1 = new com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub;

        specialinvoke $r1.<com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void <init>(com.android.server.contentcapture.ContentCaptureManagerService)>(r0);

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void publishBinderService(java.lang.String,android.os.IBinder)>("content_capture", $r1);

        $r2 = r0.<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCaptureManagerService$LocalService mLocalService>;

        virtualinvoke r0.<com.android.server.contentcapture.ContentCaptureManagerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/contentcapture/ContentCaptureManagerInternal;", $r2);

        return;
    }

    protected void registerForExtraSettingsChanges(android.content.ContentResolver, android.database.ContentObserver)
    {
        com.android.server.contentcapture.ContentCaptureManagerService r0;
        android.content.ContentResolver r1;
        android.database.ContentObserver r2;
        android.net.Uri $r3;

        r0 := @this: com.android.server.contentcapture.ContentCaptureManagerService;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.database.ContentObserver;

        $r3 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("content_capture_enabled");

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 0, r2, -1);

        return;
    }
}
