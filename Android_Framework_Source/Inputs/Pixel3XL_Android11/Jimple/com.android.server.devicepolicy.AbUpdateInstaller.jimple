class com.android.server.devicepolicy.AbUpdateInstaller extends com.android.server.devicepolicy.UpdateInstaller
{
    private static final int DOWNLOAD_STATE_INITIALIZATION_ERROR;
    private static final int OFFSET_TO_FILE_NAME;
    private static final java.lang.String PAYLOAD_BIN;
    private static final java.lang.String PAYLOAD_PROPERTIES_TXT;
    public static final java.lang.String UNKNOWN_ERROR;
    private static final java.util.Map errorCodesMap;
    private static final java.util.Map errorStringsMap;
    private java.util.Enumeration mEntries;
    private long mOffsetForUpdate;
    private java.util.zip.ZipFile mPackedUpdateFile;
    private java.util.List mProperties;
    private long mSizeForUpdate;
    private boolean mUpdateInstalled;

    static void <clinit>()
    {
        java.util.Map $r0, $r1;

        <com.android.server.devicepolicy.AbUpdateInstaller: java.lang.String UNKNOWN_ERROR> = "Unknown error with error code = ";

        <com.android.server.devicepolicy.AbUpdateInstaller: java.lang.String PAYLOAD_PROPERTIES_TXT> = "payload_properties.txt";

        <com.android.server.devicepolicy.AbUpdateInstaller: java.lang.String PAYLOAD_BIN> = "payload.bin";

        <com.android.server.devicepolicy.AbUpdateInstaller: int OFFSET_TO_FILE_NAME> = 30;

        <com.android.server.devicepolicy.AbUpdateInstaller: int DOWNLOAD_STATE_INITIALIZATION_ERROR> = 20;

        $r0 = staticinvoke <com.android.server.devicepolicy.AbUpdateInstaller: java.util.Map buildErrorCodesMap()>();

        <com.android.server.devicepolicy.AbUpdateInstaller: java.util.Map errorCodesMap> = $r0;

        $r1 = staticinvoke <com.android.server.devicepolicy.AbUpdateInstaller: java.util.Map buildErrorStringsMap()>();

        <com.android.server.devicepolicy.AbUpdateInstaller: java.util.Map errorStringsMap> = $r1;

        return;
    }

    void <init>(android.content.Context, android.os.ParcelFileDescriptor, android.app.admin.StartInstallingUpdateCallback, com.android.server.devicepolicy.DevicePolicyManagerService$Injector, com.android.server.devicepolicy.DevicePolicyConstants)
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        android.content.Context r1;
        android.os.ParcelFileDescriptor r2;
        android.app.admin.StartInstallingUpdateCallback r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r4;
        com.android.server.devicepolicy.DevicePolicyConstants r5;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.app.admin.StartInstallingUpdateCallback;

        r4 := @parameter3: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r5 := @parameter4: com.android.server.devicepolicy.DevicePolicyConstants;

        specialinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void <init>(android.content.Context,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback,com.android.server.devicepolicy.DevicePolicyManagerService$Injector,com.android.server.devicepolicy.DevicePolicyConstants)>(r1, r2, r3, r4, r5);

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: boolean mUpdateInstalled> = 0;

        return;
    }

    static java.util.Map access$000()
    {
        java.util.Map $r0;

        $r0 = <com.android.server.devicepolicy.AbUpdateInstaller: java.util.Map errorCodesMap>;

        return $r0;
    }

    static java.util.Map access$100()
    {
        java.util.Map $r0;

        $r0 = <com.android.server.devicepolicy.AbUpdateInstaller: java.util.Map errorStringsMap>;

        return $r0;
    }

    private void applyPayload(java.lang.String) throws java.io.IOException
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        java.lang.String[] r1;
        android.os.UpdateEngine r2;
        boolean $z0;
        java.util.List $r3;
        java.util.stream.Stream $r4;
        com.android.server.devicepolicy.'-$$Lambda$AbUpdateInstaller$jqambsFSkRKkP2tdaidkN0h_SUo' $r5;
        java.lang.Object[] $r6;
        long $l0, $l2, $l3;
        byte $b1;
        java.lang.Exception $r7;
        java.lang.String r8;
        java.util.function.IntFunction r10;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        r8 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: boolean updateStateForPayload()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.List mProperties>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = <com.android.server.devicepolicy._$$Lambda$AbUpdateInstaller$jqambsFSkRKkP2tdaidkN0h_SUo: com.android.server.devicepolicy.'-$$Lambda$AbUpdateInstaller$jqambsFSkRKkP2tdaidkN0h_SUo' INSTANCE>;

        r10 = (java.util.function.IntFunction) $r5;

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>(r10);

        r1 = (java.lang.String[]) $r6;

        $l0 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: long mSizeForUpdate>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("UpdateInstaller", "Failed to find payload entry in the given package.");

        virtualinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(3, "Failed to find payload entry in the given package.");

        return;

     label2:
        r2 = specialinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: android.os.UpdateEngine buildBoundUpdateEngine()>();

     label3:
        $l3 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: long mOffsetForUpdate>;

        $l2 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: long mSizeForUpdate>;

        virtualinvoke r2.<android.os.UpdateEngine: void applyPayload(java.lang.String,long,long,java.lang.String[])>(r8, $l3, $l2, r1);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("UpdateInstaller", "Failed to install update from file.", $r7);

        virtualinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(1, "Failed to install update from file.");

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private android.os.UpdateEngine buildBoundUpdateEngine()
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        android.os.UpdateEngine $r2;
        com.android.server.devicepolicy.AbUpdateInstaller$DelegatingUpdateEngineCallback $r3;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        $r2 = new android.os.UpdateEngine;

        specialinvoke $r2.<android.os.UpdateEngine: void <init>()>();

        $r3 = new com.android.server.devicepolicy.AbUpdateInstaller$DelegatingUpdateEngineCallback;

        specialinvoke $r3.<com.android.server.devicepolicy.AbUpdateInstaller$DelegatingUpdateEngineCallback: void <init>(com.android.server.devicepolicy.UpdateInstaller,android.os.UpdateEngine)>(r0, $r2);

        virtualinvoke $r2.<android.os.UpdateEngine: boolean bind(android.os.UpdateEngineCallback)>($r3);

        return $r2;
    }

    private static java.util.Map buildErrorCodesMap()
    {
        java.lang.Integer r1, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, r26, r27;
        java.util.HashMap $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

        r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r26);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(51);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r26);

        r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r27);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r27);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r27);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r27);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(26);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r27);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r1);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r1);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, r1);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(52);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r1);

        return $r2;
    }

    private static java.util.Map buildErrorStringsMap()
    {
        java.util.HashMap $r1;
        java.lang.Integer $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "Unknown error with error code = ");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "The delta update payload was targeted for another version or the source partitionwas modified after it was installed");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, "Failed to finish the configured postinstall works.");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "Failed to open one of the partitions it tried to write to or read data from.");

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "Payload mismatch error.");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "Failed to read the payload data from the given URL.");

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "Payload hash error.");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, "Payload size mismatch error.");

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, "Failed to verify the signature of the payload.");

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(52);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, "The payload has been successfully installed,but the active slot was not flipped.");

        return $r1;
    }

    private long buildOffsetForEntry(java.util.zip.ZipEntry, java.lang.String)
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        java.util.zip.ZipEntry r1;
        java.lang.String r2;
        long l0, l1, $l4, $l5, $l6;
        int $i2, $i3, i7;
        byte[] $r3, $r4;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        r1 := @parameter0: java.util.zip.ZipEntry;

        r2 := @parameter1: java.lang.String;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 + 30;

        l0 = (long) $i3;

        l1 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCompressedSize()>();

        $r3 = virtualinvoke r1.<java.util.zip.ZipEntry: byte[] getExtra()>();

        if $r3 != null goto label1;

        i7 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<java.util.zip.ZipEntry: byte[] getExtra()>();

        i7 = lengthof $r4;

     label2:
        $l5 = l0 + l1;

        $l4 = (long) i7;

        $l6 = $l5 + $l4;

        return $l6;
    }

    static java.lang.String[] lambda$applyPayload$0(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    private void setState() throws java.io.IOException
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        java.util.zip.ZipFile $r1, $r4;
        java.io.File $r2;
        java.util.ArrayList $r3;
        java.util.Enumeration $r5;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: boolean mUpdateInstalled> = 1;

        $r1 = new java.util.zip.ZipFile;

        $r2 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.io.File mCopiedUpdateFile>;

        specialinvoke $r1.<java.util.zip.ZipFile: void <init>(java.io.File)>($r2);

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.zip.ZipFile mPackedUpdateFile> = $r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.List mProperties> = $r3;

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: long mSizeForUpdate> = -1L;

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: long mOffsetForUpdate> = 0L;

        $r4 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.zip.ZipFile mPackedUpdateFile>;

        $r5 = virtualinvoke $r4.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.Enumeration mEntries> = $r5;

        return;
    }

    private void updatePropertiesForEntry(java.util.zip.ZipEntry) throws java.io.IOException
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        java.io.BufferedReader $r1;
        java.io.InputStreamReader $r2;
        java.util.zip.ZipFile $r3;
        java.io.InputStream $r4;
        java.util.List $r5;
        java.lang.Throwable $r6, $r7;
        java.util.zip.ZipEntry r8;
        java.lang.String r10;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        r8 := @parameter0: java.util.zip.ZipEntry;

        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.InputStreamReader;

        $r3 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.zip.ZipFile mPackedUpdateFile>;

        $r4 = virtualinvoke $r3.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r8);

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r4);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

     label01:
        r10 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

     label02:
        if r10 == null goto label05;

     label03:
        $r5 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.List mProperties>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r10);

     label04:
        goto label01;

     label05:
        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

        return;

     label06:
        $r6 := @caughtexception;

     label07:
        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private boolean updateStateForPayload() throws java.io.IOException
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        java.util.zip.ZipEntry r1;
        java.lang.String r2, $r5, $r6;
        java.util.Enumeration $r3, $r7;
        java.lang.Object $r4;
        long $l0, $l2, $l3, $l4, $l6, l7;
        boolean $z0, $z1, $z2, $z3;
        int $i1;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        l7 = 0L;

     label1:
        $r7 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.Enumeration mEntries>;

        $z3 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label6;

        $r3 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.util.Enumeration mEntries>;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r1 = (java.util.zip.ZipEntry) $r4;

        r2 = virtualinvoke r1.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $l0 = specialinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: long buildOffsetForEntry(java.util.zip.ZipEntry,java.lang.String)>(r1, r2);

        l7 = l7 + $l0;

        $z0 = virtualinvoke r1.<java.util.zip.ZipEntry: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $l6 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCompressedSize()>();

        l7 = l7 - $l6;

        goto label1;

     label2:
        $r5 = "payload.bin";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label4;

        $i1 = virtualinvoke r1.<java.util.zip.ZipEntry: int getMethod()>();

        if $i1 == 0 goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("UpdateInstaller", "Invalid compression method.");

        virtualinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(3, "Invalid compression method.");

        return 0;

     label3:
        $l2 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCompressedSize()>();

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: long mSizeForUpdate> = $l2;

        $l3 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCompressedSize()>();

        $l4 = l7 - $l3;

        r0.<com.android.server.devicepolicy.AbUpdateInstaller: long mOffsetForUpdate> = $l4;

        goto label5;

     label4:
        $r6 = "payload_properties.txt";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label5;

        specialinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void updatePropertiesForEntry(java.util.zip.ZipEntry)>(r1);

     label5:
        goto label1;

     label6:
        return 1;
    }

    public void installUpdateInThread()
    {
        com.android.server.devicepolicy.AbUpdateInstaller r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.io.File $r2;
        java.lang.String $r3, $r7, $r9, $r11;
        java.lang.String[] $r4;
        java.nio.file.Path $r5;
        java.net.URI $r6;
        java.lang.Throwable $r8, $r10;

        r0 := @this: com.android.server.devicepolicy.AbUpdateInstaller;

        $z0 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: boolean mUpdateInstalled>;

        if $z0 != 0 goto label6;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void setState()>();

        $r2 = r0.<com.android.server.devicepolicy.AbUpdateInstaller: java.io.File mCopiedUpdateFile>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = newarray (java.lang.String)[0];

        $r5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r3, $r4);

        $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.net.URI toUri()>();

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void applyPayload(java.lang.String)>($r7);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>("UpdateInstaller", $r8);

        $r9 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r8);

        virtualinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(1, $r9);

        goto label5;

     label4:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>("UpdateInstaller", $r10);

        $r11 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r10);

        virtualinvoke r0.<com.android.server.devicepolicy.AbUpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(3, $r11);

     label5:
        return;

     label6:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("installUpdateInThread can be called only once.");

        throw $r1;

        catch java.util.zip.ZipException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label3;
    }
}
