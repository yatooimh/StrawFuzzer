public class com.android.server.devicepolicy.DeviceAdminServiceController extends java.lang.Object
{
    static final boolean DEBUG;
    static final java.lang.String TAG;
    private final android.util.SparseArray mConnections;
    private final com.android.server.devicepolicy.DevicePolicyConstants mConstants;
    final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private final com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector;
    final java.lang.Object mLock;
    private final com.android.server.devicepolicy.DevicePolicyManagerService mService;

    public void <init>(com.android.server.devicepolicy.DevicePolicyManagerService, com.android.server.devicepolicy.DevicePolicyConstants)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        com.android.server.devicepolicy.DevicePolicyConstants r1;
        java.lang.Object $r2;
        android.util.SparseArray $r3;
        android.content.Context $r4;
        android.os.Handler $r5;
        com.android.internal.os.BackgroundThread $r6;
        android.os.Looper $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r9;

        r0 := @this: com.android.server.devicepolicy.DeviceAdminServiceController;

        r8 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: com.android.server.devicepolicy.DevicePolicyConstants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.devicepolicy.DeviceAdminServiceController: java.lang.Object mLock> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections> = $r3;

        r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService mService> = r8;

        r9 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector> = r9;

        $r4 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.content.Context mContext> = $r4;

        $r5 = new android.os.Handler;

        $r6 = staticinvoke <com.android.internal.os.BackgroundThread: com.android.internal.os.BackgroundThread get()>();

        $r7 = virtualinvoke $r6.<com.android.internal.os.BackgroundThread: android.os.Looper getLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.os.Handler mHandler> = $r5;

        r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyConstants mConstants> = r1;

        return;
    }

    static android.os.Handler access$000(com.android.server.devicepolicy.DeviceAdminServiceController)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DeviceAdminServiceController;

        $r1 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.os.Handler mHandler>;

        return $r1;
    }

    static com.android.server.devicepolicy.DevicePolicyConstants access$100(com.android.server.devicepolicy.DeviceAdminServiceController)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        com.android.server.devicepolicy.DevicePolicyConstants $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DeviceAdminServiceController;

        $r1 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        return $r1;
    }

    static transient void debug(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0;
        java.lang.Object[] r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        return;
    }

    private void disconnectServiceOnUserLocked(int, java.lang.String)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        int i0;
        java.lang.String r1;
        com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection r2;
        android.util.SparseArray $r3, $r7;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;

        r0 := @this: com.android.server.devicepolicy.DeviceAdminServiceController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection) $r4;

        if r2 == null goto label1;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r5[1] = r1;

        staticinvoke <com.android.server.devicepolicy.DeviceAdminServiceController: void debug(java.lang.String,java.lang.Object[])>("Stopping service for u%d if already running for %s.", $r5);

        virtualinvoke r2.<com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection: void unbind()>();

        $r7 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        virtualinvoke $r7.<android.util.SparseArray: void remove(int)>(i0);

     label1:
        return;
    }

    private android.content.pm.ServiceInfo findService(java.lang.String, int)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        java.lang.String r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.pm.IPackageManager $r3;
        java.lang.StringBuilder $r4;
        android.content.pm.ServiceInfo $r5;

        r0 := @this: com.android.server.devicepolicy.DeviceAdminServiceController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.IPackageManager getIPackageManager()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = staticinvoke <com.android.server.appbinding.AppBindingUtils: android.content.pm.ServiceInfo findService(java.lang.String,int,java.lang.String,java.lang.String,java.lang.Class,android.content.pm.IPackageManager,java.lang.StringBuilder)>(r1, i0, "android.app.action.DEVICE_ADMIN_SERVICE", "android.permission.BIND_DEVICE_ADMIN", class "Landroid/app/admin/DeviceAdminService;", $r3, $r4);

        return $r5;
    }

    public void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        java.lang.Object r1, $r9;
        int i0, $i1, $i2, i3;
        com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection r2;
        android.util.SparseArray $r3, $r5, $r7, $r8;
        java.lang.Throwable $r12;
        com.android.internal.util.IndentingPrintWriter r13;

        r0 := @this: com.android.server.devicepolicy.DeviceAdminServiceController;

        r13 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r1 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if $i1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        virtualinvoke r13.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Owner Services:");

        virtualinvoke r13.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label04:
        i3 = 0;

     label05:
        $r5 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        $i2 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i3 >= $i2 goto label07;

        $r7 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        i0 = virtualinvoke $r7.<android.util.SparseArray: int keyAt(int)>(i3);

        virtualinvoke r13.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("User: ");

        virtualinvoke r13.<com.android.internal.util.IndentingPrintWriter: void println(int)>(i0);

        $r8 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r2 = (com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection) $r9;

        virtualinvoke r13.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r2.<com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection: void dump(java.lang.String,java.io.PrintWriter)>("", r13);

        virtualinvoke r13.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label06:
        i3 = i3 + 1;

        goto label05;

     label07:
        virtualinvoke r13.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        exitmonitor r1;

     label08:
        return;

     label09:
        $r12 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void startServiceForOwner(java.lang.String, int, java.lang.String)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        int i0;
        java.lang.String r1, $r11, r23;
        long l1;
        java.lang.Object r2, $r6;
        android.content.pm.ServiceInfo r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r14, $r19, $r22;
        android.util.SparseArray $r5, $r13;
        com.android.server.am.PersistentConnection $r7;
        java.lang.Object[] $r8, $r15, $r17;
        java.lang.Integer $r9, $r16, $r18;
        android.content.ComponentName $r10, $r12;
        java.lang.Throwable $r20, $r21;
        com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection r24;

        r0 := @this: com.android.server.devicepolicy.DeviceAdminServiceController;

        r23 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        r3 = specialinvoke r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.content.pm.ServiceInfo findService(java.lang.String,int)>(r23, i0);

     label03:
        if r3 != null goto label06;

     label04:
        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r23;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17[1] = $r18;

        staticinvoke <com.android.server.devicepolicy.DeviceAdminServiceController: void debug(java.lang.String,java.lang.Object[])>("Owner package %s on u%d has no service.", $r17);

        specialinvoke r0.<com.android.server.devicepolicy.DeviceAdminServiceController: void disconnectServiceOnUserLocked(int,java.lang.String)>(i0, r1);

        exitmonitor r2;

     label05:
        $r19 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r19.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return;

     label06:
        $r5 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r7 = (com.android.server.am.PersistentConnection) $r6;

        if $r7 == null goto label07;

        $r15 = newarray (java.lang.Object)[2];

        $r15[0] = r23;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15[1] = $r16;

        staticinvoke <com.android.server.devicepolicy.DeviceAdminServiceController: void debug(java.lang.String,java.lang.Object[])>("Disconnecting from existing service connection.", $r15);

        specialinvoke r0.<com.android.server.devicepolicy.DeviceAdminServiceController: void disconnectServiceOnUserLocked(int,java.lang.String)>(i0, r1);

     label07:
        $r8 = newarray (java.lang.Object)[4];

        $r8[0] = r23;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[1] = $r9;

        $r10 = virtualinvoke r3.<android.content.pm.ServiceInfo: android.content.ComponentName getComponentName()>();

        $r11 = virtualinvoke $r10.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        $r8[2] = $r11;

        $r8[3] = r1;

        staticinvoke <com.android.server.devicepolicy.DeviceAdminServiceController: void debug(java.lang.String,java.lang.Object[])>("Owner package %s on u%d has service %s for %s", $r8);

        r24 = new com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection;

        $r12 = virtualinvoke r3.<android.content.pm.ServiceInfo: android.content.ComponentName getComponentName()>();

        specialinvoke r24.<com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection: void <init>(com.android.server.devicepolicy.DeviceAdminServiceController,int,android.content.ComponentName)>(r0, i0, $r12);

        $r13 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: android.util.SparseArray mConnections>;

        virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r24);

        virtualinvoke r24.<com.android.server.devicepolicy.DeviceAdminServiceController$DevicePolicyServiceConnection: void bind()>();

        exitmonitor r2;

     label08:
        $r14 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return;

     label09:
        $r20 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        throw $r20;

     label12:
        $r21 := @caughtexception;

        $r22 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void stopServiceForOwner(int, java.lang.String)
    {
        com.android.server.devicepolicy.DeviceAdminServiceController r0;
        int i0;
        long l1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r3, $r5;
        java.lang.Throwable $r4, $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.devicepolicy.DeviceAdminServiceController;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DeviceAdminServiceController: void disconnectServiceOnUserLocked(int,java.lang.String)>(i0, r7);

        exitmonitor r1;

     label3:
        $r3 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

     label7:
        $r4 := @caughtexception;

        $r5 = r0.<com.android.server.devicepolicy.DeviceAdminServiceController: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.devicepolicy.DeviceAdminServiceController: java.lang.String TAG> = "DevicePolicyManager";

        <com.android.server.devicepolicy.DeviceAdminServiceController: boolean DEBUG> = 0;

        return;
    }
}
