class com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin extends java.lang.Object
{
    private static final java.lang.String ATTR_LAST_NETWORK_LOGGING_NOTIFICATION;
    private static final java.lang.String ATTR_NUM_NETWORK_LOGGING_NOTIFICATIONS;
    private static final java.lang.String ATTR_VALUE;
    static final int DEF_KEYGUARD_FEATURES_DISABLED;
    static final int DEF_MAXIMUM_FAILED_PASSWORDS_FOR_WIPE;
    static final int DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN;
    static final long DEF_MAXIMUM_TIME_TO_UNLOCK;
    static final int DEF_ORGANIZATION_COLOR;
    static final long DEF_PASSWORD_EXPIRATION_DATE;
    static final long DEF_PASSWORD_EXPIRATION_TIMEOUT;
    static final int DEF_PASSWORD_HISTORY_LENGTH;
    private static final java.lang.String TAG_ACCOUNT_TYPE;
    private static final java.lang.String TAG_ALWAYS_ON_VPN_LOCKDOWN;
    private static final java.lang.String TAG_ALWAYS_ON_VPN_PACKAGE;
    private static final java.lang.String TAG_COMMON_CRITERIA_MODE;
    private static final java.lang.String TAG_CROSS_PROFILE_CALENDAR_PACKAGES;
    private static final java.lang.String TAG_CROSS_PROFILE_CALENDAR_PACKAGES_NULL;
    private static final java.lang.String TAG_CROSS_PROFILE_PACKAGES;
    private static final java.lang.String TAG_CROSS_PROFILE_WIDGET_PROVIDERS;
    private static final java.lang.String TAG_DEFAULT_ENABLED_USER_RESTRICTIONS;
    private static final java.lang.String TAG_DISABLE_ACCOUNT_MANAGEMENT;
    private static final java.lang.String TAG_DISABLE_BLUETOOTH_CONTACT_SHARING;
    private static final java.lang.String TAG_DISABLE_CALLER_ID;
    private static final java.lang.String TAG_DISABLE_CAMERA;
    private static final java.lang.String TAG_DISABLE_CONTACTS_SEARCH;
    private static final java.lang.String TAG_DISABLE_KEYGUARD_FEATURES;
    private static final java.lang.String TAG_DISABLE_SCREEN_CAPTURE;
    private static final java.lang.String TAG_ENCRYPTION_REQUESTED;
    private static final java.lang.String TAG_END_USER_SESSION_MESSAGE;
    private static final java.lang.String TAG_FACTORY_RESET_PROTECTION_POLICY;
    private static final java.lang.String TAG_FORCE_EPHEMERAL_USERS;
    private static final java.lang.String TAG_GLOBAL_PROXY_EXCLUSION_LIST;
    private static final java.lang.String TAG_GLOBAL_PROXY_SPEC;
    private static final java.lang.String TAG_IS_LOGOUT_ENABLED;
    private static final java.lang.String TAG_IS_NETWORK_LOGGING_ENABLED;
    private static final java.lang.String TAG_KEEP_UNINSTALLED_PACKAGES;
    private static final java.lang.String TAG_LONG_SUPPORT_MESSAGE;
    private static final java.lang.String TAG_MANAGE_TRUST_AGENT_FEATURES;
    private static final java.lang.String TAG_MAX_FAILED_PASSWORD_WIPE;
    private static final java.lang.String TAG_MAX_TIME_TO_UNLOCK;
    private static final java.lang.String TAG_METERED_DATA_DISABLED_PACKAGES;
    private static final java.lang.String TAG_MIN_PASSWORD_LENGTH;
    private static final java.lang.String TAG_MIN_PASSWORD_LETTERS;
    private static final java.lang.String TAG_MIN_PASSWORD_LOWERCASE;
    private static final java.lang.String TAG_MIN_PASSWORD_NONLETTER;
    private static final java.lang.String TAG_MIN_PASSWORD_NUMERIC;
    private static final java.lang.String TAG_MIN_PASSWORD_SYMBOLS;
    private static final java.lang.String TAG_MIN_PASSWORD_UPPERCASE;
    private static final java.lang.String TAG_ORGANIZATION_COLOR;
    private static final java.lang.String TAG_ORGANIZATION_NAME;
    private static final java.lang.String TAG_PACKAGE_LIST_ITEM;
    private static final java.lang.String TAG_PARENT_ADMIN;
    private static final java.lang.String TAG_PASSWORD_EXPIRATION_DATE;
    private static final java.lang.String TAG_PASSWORD_EXPIRATION_TIMEOUT;
    private static final java.lang.String TAG_PASSWORD_HISTORY_LENGTH;
    private static final java.lang.String TAG_PASSWORD_QUALITY;
    private static final java.lang.String TAG_PERMITTED_ACCESSIBILITY_SERVICES;
    private static final java.lang.String TAG_PERMITTED_IMES;
    private static final java.lang.String TAG_PERMITTED_NOTIFICATION_LISTENERS;
    private static final java.lang.String TAG_POLICIES;
    private static final java.lang.String TAG_PROFILE_MAXIMUM_TIME_OFF;
    private static final java.lang.String TAG_PROFILE_OFF_DEADLINE;
    private static final java.lang.String TAG_PROVIDER;
    private static final java.lang.String TAG_REQUIRE_AUTO_TIME;
    private static final java.lang.String TAG_RESTRICTION;
    private static final java.lang.String TAG_SHORT_SUPPORT_MESSAGE;
    private static final java.lang.String TAG_SPECIFIES_GLOBAL_PROXY;
    private static final java.lang.String TAG_START_USER_SESSION_MESSAGE;
    private static final java.lang.String TAG_STRONG_AUTH_UNLOCK_TIMEOUT;
    private static final java.lang.String TAG_SUSPEND_PERSONAL_APPS;
    private static final java.lang.String TAG_TEST_ONLY_ADMIN;
    private static final java.lang.String TAG_TRUST_AGENT_COMPONENT;
    private static final java.lang.String TAG_TRUST_AGENT_COMPONENT_OPTIONS;
    private static final java.lang.String TAG_USER_RESTRICTIONS;
    final java.util.Set accountTypesWithManagementDisabled;
    java.util.List crossProfileWidgetProviders;
    final java.util.Set defaultEnabledRestrictionsAlreadySet;
    boolean disableBluetoothContactSharing;
    boolean disableCallerId;
    boolean disableCamera;
    boolean disableContactsSearch;
    boolean disableScreenCapture;
    int disabledKeyguardFeatures;
    boolean encryptionRequested;
    java.lang.String endUserSessionMessage;
    boolean forceEphemeralUsers;
    java.lang.String globalProxyExclusionList;
    java.lang.String globalProxySpec;
    android.app.admin.DeviceAdminInfo info;
    boolean isLogoutEnabled;
    boolean isNetworkLoggingEnabled;
    final boolean isParent;
    java.util.List keepUninstalledPackages;
    long lastNetworkLoggingNotificationTimeMs;
    java.lang.CharSequence longSupportMessage;
    public boolean mAlwaysOnVpnLockdown;
    public java.lang.String mAlwaysOnVpnPackage;
    boolean mCommonCriteriaMode;
    java.util.List mCrossProfileCalendarPackages;
    java.util.List mCrossProfilePackages;
    android.app.admin.FactoryResetProtectionPolicy mFactoryResetProtectionPolicy;
    android.app.admin.PasswordPolicy mPasswordPolicy;
    long mProfileMaximumTimeOffMillis;
    long mProfileOffDeadline;
    boolean mSuspendPersonalApps;
    int maximumFailedPasswordsForWipe;
    long maximumTimeToUnlock;
    java.util.List meteredDisabledPackages;
    int numNetworkLoggingNotifications;
    int organizationColor;
    java.lang.String organizationName;
    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin;
    long passwordExpirationDate;
    long passwordExpirationTimeout;
    int passwordHistoryLength;
    java.util.List permittedAccessiblityServices;
    java.util.List permittedInputMethods;
    java.util.List permittedNotificationListeners;
    boolean requireAutoTime;
    java.lang.CharSequence shortSupportMessage;
    boolean specifiesGlobalProxy;
    java.lang.String startUserSessionMessage;
    long strongAuthUnlockTimeout;
    boolean testOnlyAdmin;
    android.util.ArrayMap trustAgentInfos;
    android.os.Bundle userRestrictions;

    static void <clinit>()
    {
        int $i0;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_USER_RESTRICTIONS> = "user-restrictions";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_TRUST_AGENT_COMPONENT_OPTIONS> = "trust-agent-component-options";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_TRUST_AGENT_COMPONENT> = "component";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_TEST_ONLY_ADMIN> = "test-only-admin";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_SUSPEND_PERSONAL_APPS> = "suspend-personal-apps";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_STRONG_AUTH_UNLOCK_TIMEOUT> = "strong-auth-unlock-timeout";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_START_USER_SESSION_MESSAGE> = "start_user_session_message";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_SPECIFIES_GLOBAL_PROXY> = "specifies-global-proxy";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_SHORT_SUPPORT_MESSAGE> = "short-support-message";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_RESTRICTION> = "restriction";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_REQUIRE_AUTO_TIME> = "require_auto_time";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PROVIDER> = "provider";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PROFILE_OFF_DEADLINE> = "profile-off-deadline";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PROFILE_MAXIMUM_TIME_OFF> = "profile-max-time-off";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_POLICIES> = "policies";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PERMITTED_NOTIFICATION_LISTENERS> = "permitted-notification-listeners";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PERMITTED_IMES> = "permitted-imes";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PERMITTED_ACCESSIBILITY_SERVICES> = "permitted-accessiblity-services";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PASSWORD_QUALITY> = "password-quality";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PASSWORD_HISTORY_LENGTH> = "password-history-length";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PASSWORD_EXPIRATION_TIMEOUT> = "password-expiration-timeout";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PASSWORD_EXPIRATION_DATE> = "password-expiration-date";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PARENT_ADMIN> = "parent-admin";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_PACKAGE_LIST_ITEM> = "item";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_ORGANIZATION_NAME> = "organization-name";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_ORGANIZATION_COLOR> = "organization-color";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MIN_PASSWORD_UPPERCASE> = "min-password-uppercase";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MIN_PASSWORD_SYMBOLS> = "min-password-symbols";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MIN_PASSWORD_NUMERIC> = "min-password-numeric";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MIN_PASSWORD_NONLETTER> = "min-password-nonletter";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MIN_PASSWORD_LOWERCASE> = "min-password-lowercase";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MIN_PASSWORD_LETTERS> = "min-password-letters";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MIN_PASSWORD_LENGTH> = "min-password-length";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_METERED_DATA_DISABLED_PACKAGES> = "metered_data_disabled_packages";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MAX_TIME_TO_UNLOCK> = "max-time-to-unlock";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MAX_FAILED_PASSWORD_WIPE> = "max-failed-password-wipe";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_MANAGE_TRUST_AGENT_FEATURES> = "manage-trust-agent-features";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_LONG_SUPPORT_MESSAGE> = "long-support-message";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_KEEP_UNINSTALLED_PACKAGES> = "keep-uninstalled-packages";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_IS_NETWORK_LOGGING_ENABLED> = "is_network_logging_enabled";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_IS_LOGOUT_ENABLED> = "is_logout_enabled";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_GLOBAL_PROXY_SPEC> = "global-proxy-spec";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_GLOBAL_PROXY_EXCLUSION_LIST> = "global-proxy-exclusion-list";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_FORCE_EPHEMERAL_USERS> = "force_ephemeral_users";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_FACTORY_RESET_PROTECTION_POLICY> = "factory_reset_protection_policy";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_END_USER_SESSION_MESSAGE> = "end_user_session_message";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_ENCRYPTION_REQUESTED> = "encryption-requested";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DISABLE_SCREEN_CAPTURE> = "disable-screen-capture";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DISABLE_KEYGUARD_FEATURES> = "disable-keyguard-features";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DISABLE_CONTACTS_SEARCH> = "disable-contacts-search";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DISABLE_CAMERA> = "disable-camera";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DISABLE_CALLER_ID> = "disable-caller-id";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DISABLE_BLUETOOTH_CONTACT_SHARING> = "disable-bt-contacts-sharing";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DISABLE_ACCOUNT_MANAGEMENT> = "disable-account-management";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_DEFAULT_ENABLED_USER_RESTRICTIONS> = "default-enabled-user-restrictions";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_CROSS_PROFILE_WIDGET_PROVIDERS> = "cross-profile-widget-providers";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_CROSS_PROFILE_PACKAGES> = "cross-profile-packages";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_CROSS_PROFILE_CALENDAR_PACKAGES_NULL> = "cross-profile-calendar-packages-null";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_CROSS_PROFILE_CALENDAR_PACKAGES> = "cross-profile-calendar-packages";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_COMMON_CRITERIA_MODE> = "common-criteria-mode";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_ALWAYS_ON_VPN_PACKAGE> = "vpn-package";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_ALWAYS_ON_VPN_LOCKDOWN> = "vpn-lockdown";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String TAG_ACCOUNT_TYPE> = "account-type";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_PASSWORD_HISTORY_LENGTH> = 0;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long DEF_PASSWORD_EXPIRATION_TIMEOUT> = 0L;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long DEF_PASSWORD_EXPIRATION_DATE> = 0L;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long DEF_MAXIMUM_TIME_TO_UNLOCK> = 0L;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN> = 2;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_MAXIMUM_FAILED_PASSWORDS_FOR_WIPE> = 0;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_KEYGUARD_FEATURES_DISABLED> = 0;

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String ATTR_VALUE> = "value";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String ATTR_NUM_NETWORK_LOGGING_NOTIFICATIONS> = "num-notifications";

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String ATTR_LAST_NETWORK_LOGGING_NOTIFICATION> = "last-notification";

        $i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#00796B");

        <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_ORGANIZATION_COLOR> = $i0;

        return;
    }

    void <init>(android.app.admin.DeviceAdminInfo, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.DeviceAdminInfo r1;
        boolean z0;
        android.app.admin.PasswordPolicy $r2;
        android.util.ArraySet $r3, $r5;
        android.util.ArrayMap $r4;
        int $i0;
        java.util.List $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: android.app.admin.DeviceAdminInfo;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength> = 0;

        $r2 = new android.app.admin.PasswordPolicy;

        specialinvoke $r2.<android.app.admin.PasswordPolicy: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy> = $r2;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.FactoryResetProtectionPolicy mFactoryResetProtectionPolicy> = null;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock> = 0L;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout> = 0L;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout> = 0L;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = 0L;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean testOnlyAdmin> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing> = 1;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isLogoutEnabled> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long lastNetworkLoggingNotificationTimeMs> = 0L;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled> = $r3;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = null;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = null;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos> = $r4;

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet> = $r5;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage> = null;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage> = null;

        $i0 = <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_ORGANIZATION_COLOR>;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor> = $i0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName> = null;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String startUserSessionMessage> = null;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String endUserSessionMessage> = null;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages> = $r6;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages> = $r7;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps> = 0;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis> = 0L;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline> = 0L;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info> = r1;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isParent> = z0;

        return;
    }

    static android.os.Bundle filterRestrictions(android.os.Bundle, java.util.function.Predicate)
    {
        android.os.Bundle r0, $r5;
        java.util.function.Predicate r1;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.Set $r6;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.os.Bundle;

        r1 := @parameter1: java.util.function.Predicate;

        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>()>();

        $r6 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        $z0 = virtualinvoke r0.<android.os.Bundle: boolean getBoolean(java.lang.String)>(r4);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $z1 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        virtualinvoke $r5.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r4, 1);

     label3:
        goto label1;

     label4:
        return $r5;
    }

    private android.util.ArrayMap getAllTrustAgentInfos(org.xmlpull.v1.XmlPullParser, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r4, $r7, $r13, $r14;
        int i0, i1, $i3;
        android.util.ArrayMap $r6;
        boolean $z0;
        java.lang.StringBuilder $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo $r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label6;

        if i1 != 3 goto label2;

        $i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i3 <= i0 goto label6;

     label2:
        if i1 == 3 goto label1;

        if i1 != 4 goto label3;

        goto label1;

     label3:
        r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r7 = "component";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label4;

        $r14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $r15 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo getTrustAgentInfo(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label5;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown tag under ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r13);

     label5:
        goto label1;

     label6:
        return $r6;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo getTrustAgentInfo(org.xmlpull.v1.XmlPullParser, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r4, $r7, $r13;
        int i0, i1, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo $r6;
        boolean $z0;
        java.lang.StringBuilder $r8;
        android.os.PersistableBundle $r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $r6 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo;

        specialinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: void <init>(android.os.PersistableBundle)>(null);

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label6;

        if i1 != 3 goto label2;

        $i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i3 <= i0 goto label6;

     label2:
        if i1 == 3 goto label1;

        if i1 != 4 goto label3;

        goto label1;

     label3:
        r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r7 = "trust-agent-component-options";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label4;

        $r14 = staticinvoke <android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options> = $r14;

        goto label5;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown tag under ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r13);

     label5:
        goto label1;

     label6:
        return $r6;
    }

    static boolean lambda$getGlobalUserRestrictions$1(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean isGlobal(int,java.lang.String)>(i0, r0);

        return $z0;
    }

    static boolean lambda$getLocalUserRestrictions$0(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean isLocal(int,java.lang.String)>(i0, r0);

        return $z0;
    }

    private void readAttributeValues(org.xmlpull.v1.XmlPullParser, java.lang.String, java.util.Collection) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r4, $r11, $r12;
        java.util.Collection r3;
        int i0, i1, $i3;
        boolean $z0;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Collection;

        interfaceinvoke r3.<java.util.Collection: void clear()>();

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label6;

        if i1 != 3 goto label2;

        $i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i3 <= i0 goto label6;

     label2:
        if i1 == 3 goto label1;

        if i1 != 4 goto label3;

        goto label1;

     label3:
        r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r12);

        goto label5;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected tag ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but found ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r11);

     label5:
        goto label1;

     label6:
        return;
    }

    private java.util.List readPackageList(org.xmlpull.v1.XmlPullParser, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r4, $r6, $r12, $r16, r17;
        int i0, i1, $i4;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.StringBuilder $r7, $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label8;

        if i1 != 3 goto label2;

        $i4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i4 <= i0 goto label8;

     label2:
        if i1 == 3 goto label1;

        if i1 != 4 goto label3;

        goto label1;

     label3:
        r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r6 = "item";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label6;

        r17 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        if r17 == null goto label4;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r17);

        goto label5;

     label4:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package name missing under ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r16);

     label5:
        goto label7;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown tag under ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

     label7:
        goto label1;

     label8:
        return $r5;
    }

    static android.os.Bundle removeDeprecatedRestrictions(android.os.Bundle)
    {
        android.os.Bundle r0;
        java.util.Iterator r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @parameter0: android.os.Bundle;

        $r2 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set access$2400()>();

        r1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        virtualinvoke r0.<android.os.Bundle: void remove(java.lang.String)>($r4);

        goto label1;

     label2:
        return r0;
    }

    android.os.Bundle addSyntheticRestrictions(android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.os.Bundle r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: android.os.Bundle;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("no_camera", 1);

     label1:
        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("no_config_date_time", 1);

     label2:
        return r1;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0, $r23, $r29;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.ArrayList r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i15, $i16, $i19, i20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        android.app.admin.DeviceAdminInfo $r3;
        android.app.admin.PasswordPolicy $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r5, $r13, $r14, $r20, $r26, $r31, $r36, $r37, $r42;
        long $l10, $l11, $l13, $l14, $l17, $l18;
        java.util.List $r15, $r16, $r17, $r18, $r19, $r24, $r25, $r27, $r32, $r33, $r34, $r35;
        android.os.Bundle $r21;
        java.util.Set $r22;
        java.lang.Object $r40;
        android.app.admin.DeviceAdminInfo$PolicyInfo $r41;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("uid=");

        $i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("testOnlyAdmin=");

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean testOnlyAdmin>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("policies:");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r2 = virtualinvoke $r3.<android.app.admin.DeviceAdminInfo: java.util.ArrayList getUsedPolicies()>();

        if r2 == null goto label03;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i20 = 0;

     label01:
        $i19 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i20 >= $i19 goto label02;

        $r40 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        $r41 = (android.app.admin.DeviceAdminInfo$PolicyInfo) $r40;

        $r42 = $r41.<android.app.admin.DeviceAdminInfo$PolicyInfo: java.lang.String tag>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r42);

        i20 = i20 + 1;

        goto label01;

     label02:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label03:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("passwordQuality=0x");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i1 = $r4.<android.app.admin.PasswordPolicy: int quality>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("minimumPasswordLength=");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = $r6.<android.app.admin.PasswordPolicy: int length>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("passwordHistoryLength=");

        $i3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("minimumPasswordUpperCase=");

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i4 = $r7.<android.app.admin.PasswordPolicy: int upperCase>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i4);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("minimumPasswordLowerCase=");

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i5 = $r8.<android.app.admin.PasswordPolicy: int lowerCase>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("minimumPasswordLetters=");

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i6 = $r9.<android.app.admin.PasswordPolicy: int letters>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("minimumPasswordNumeric=");

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i7 = $r10.<android.app.admin.PasswordPolicy: int numeric>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("minimumPasswordSymbols=");

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i8 = $r11.<android.app.admin.PasswordPolicy: int symbols>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("minimumPasswordNonLetter=");

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i9 = $r12.<android.app.admin.PasswordPolicy: int nonLetter>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("maximumTimeToUnlock=");

        $l10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(long)>($l10);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("strongAuthUnlockTimeout=");

        $l11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(long)>($l11);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("maximumFailedPasswordsForWipe=");

        $i12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i12);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("specifiesGlobalProxy=");

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("passwordExpirationTimeout=");

        $l13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(long)>($l13);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("passwordExpirationDate=");

        $l14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(long)>($l14);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec>;

        if $r13 == null goto label04;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("globalProxySpec=");

        $r37 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r37);

     label04:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList>;

        if $r14 == null goto label05;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("globalProxyEclusionList=");

        $r36 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r36);

     label05:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("encryptionRequested=");

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("disableCamera=");

        $z3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("disableCallerId=");

        $z4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z4);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("disableContactsSearch=");

        $z5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("disableBluetoothContactSharing=");

        $z6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("disableScreenCapture=");

        $z7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("requireAutoTime=");

        $z8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("forceEphemeralUsers=");

        $z9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("isNetworkLoggingEnabled=");

        $z10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z10);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("disabledKeyguardFeatures=");

        $i15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i15);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("crossProfileWidgetProviders=");

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r15);

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        if $r16 == null goto label06;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("permittedAccessibilityServices=");

        $r35 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r35);

     label06:
        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        if $r17 == null goto label07;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("permittedInputMethods=");

        $r34 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r34);

     label07:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners>;

        if $r18 == null goto label08;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("permittedNotificationListeners=");

        $r33 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r33);

     label08:
        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List keepUninstalledPackages>;

        if $r19 == null goto label09;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("keepUninstalledPackages=");

        $r32 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List keepUninstalledPackages>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r32);

     label09:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("organizationColor=");

        $i16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i16);

        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName>;

        if $r20 == null goto label10;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("organizationName=");

        $r31 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r31);

     label10:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("userRestrictions:");

        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        staticinvoke <com.android.server.pm.UserRestrictionsUtils: void dumpRestrictions(java.io.PrintWriter,java.lang.String,android.os.Bundle)>(r1, "  ", $r21);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("defaultEnabledRestrictionsAlreadySet=");

        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r22);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("isParent=");

        $z11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isParent>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z11);

        $r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        if $r23 == null goto label11;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("parentAdmin:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r29 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        virtualinvoke $r29.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label11:
        $r24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages>;

        if $r24 == null goto label12;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mCrossProfileCalendarPackages=");

        $r27 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r27);

     label12:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mCrossProfilePackages=");

        $r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r25);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mSuspendPersonalApps=");

        $z12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z12);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mProfileMaximumTimeOffMillis=");

        $l17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(long)>($l17);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mProfileOffDeadline=");

        $l18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(long)>($l18);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mAlwaysOnVpnPackage=");

        $r26 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String mAlwaysOnVpnPackage>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r26);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mAlwaysOnVpnLockdown=");

        $z13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mAlwaysOnVpnLockdown>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z13);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mCommonCriteriaMode=");

        $z14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mCommonCriteriaMode>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z14);

        return;
    }

    android.os.Bundle ensureUserRestrictions()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.os.Bundle $r1, $r2, $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        if $r1 != null goto label1;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions> = $r3;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        return $r2;
    }

    android.os.Bundle getEffectiveRestrictions()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.os.Bundle $r1, $r2, $r3, $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = new android.os.Bundle;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle ensureUserRestrictions()>();

        specialinvoke $r1.<android.os.Bundle: void <init>(android.os.Bundle)>($r2);

        $r3 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle removeDeprecatedRestrictions(android.os.Bundle)>($r1);

        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle addSyntheticRestrictions(android.os.Bundle)>($r3);

        return $r4;
    }

    android.os.Bundle getGlobalUserRestrictions(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        int i0;
        android.os.Bundle $r1, $r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$ActiveAdmin$UjhGsndXbfnmx5tCnLRWDR1J0oo $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getEffectiveRestrictions()>();

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$ActiveAdmin$UjhGsndXbfnmx5tCnLRWDR1J0oo;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$ActiveAdmin$UjhGsndXbfnmx5tCnLRWDR1J0oo: void <init>(int)>(i0);

        $r3 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle filterRestrictions(android.os.Bundle,java.util.function.Predicate)>($r1, $r2);

        return $r3;
    }

    android.os.Bundle getLocalUserRestrictions(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        int i0;
        android.os.Bundle $r1, $r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$ActiveAdmin$Itq6pSsfsSgkuDfqznUMc7YMLwU $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getEffectiveRestrictions()>();

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$ActiveAdmin$Itq6pSsfsSgkuDfqznUMc7YMLwU;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$ActiveAdmin$Itq6pSsfsSgkuDfqznUMc7YMLwU: void <init>(int)>(i0);

        $r3 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle filterRestrictions(android.os.Bundle,java.util.function.Predicate)>($r1, $r2);

        return $r3;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0, $r1, $r2, $r3;
        boolean $z0, $z1;
        android.app.admin.DeviceAdminInfo $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isParent>;

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        if $r1 != null goto label1;

        $r3 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        specialinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo,boolean)>($r4, 1);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin> = $r3;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        return $r2;
    }

    int getUid()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.DeviceAdminInfo $r1;
        android.content.pm.ActivityInfo $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r2 = virtualinvoke $r1.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r3 = $r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int uid>;

        return $i0;
    }

    public android.os.UserHandle getUserHandle()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.DeviceAdminInfo $r1;
        android.content.pm.ActivityInfo $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0, $i1;
        android.os.UserHandle $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r2 = virtualinvoke $r1.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r3 = $r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        return $r4;
    }

    boolean hasParentActiveAdmin()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0, $r1;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean hasUserRestrictions()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.os.Bundle r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.os.Bundle: int size()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void readFromXml(org.xmlpull.v1.XmlPullParser, boolean) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0, $r78;
        org.xmlpull.v1.XmlPullParser r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74;
        int i0, i1, $i5, $i7, $i9, $i11, $i12, $i14, $i16, $i18, $i21, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r73, $r74, $r75, $r76, $r77, $r80, $r81, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r114, $r116, $r118, $r120, $r122, $r124, $r125, $r127, $r129;
        java.lang.StringBuilder $r60;
        long $l3, $l4, $l17, $l19, $l20, $l22, $l23;
        android.app.admin.FactoryResetProtectionPolicy $r70;
        java.util.List $r71, $r72, $r84, $r85, $r86, $r87, $r88;
        android.app.admin.DeviceAdminInfo $r79, $r130;
        java.util.Set $r82, $r91;
        android.os.Bundle $r83;
        java.util.ArrayList $r89;
        android.util.ArrayMap $r90;
        android.app.admin.PasswordPolicy $r113, $r115, $r117, $r119, $r121, $r123, $r126, $r128;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        z0 := @parameter1: boolean;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label01:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label67;

        if i1 != 3 goto label02;

        $i34 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i34 <= i0 goto label67;

     label02:
        if i1 == 3 goto label01;

        if i1 != 4 goto label03;

        goto label01;

     label03:
        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r3 = "policies";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label04;

        if z0 == 0 goto label66;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", "Overriding device admin policies from XML.");

        $r130 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        virtualinvoke $r130.<android.app.admin.DeviceAdminInfo: void readPoliciesFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        goto label66;

     label04:
        $r4 = "password-quality";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label05;

        $r128 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r129 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i32 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r129);

        $r128.<android.app.admin.PasswordPolicy: int quality> = $i32;

        goto label66;

     label05:
        $r5 = "min-password-length";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label06;

        $r126 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r127 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i31 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r127);

        $r126.<android.app.admin.PasswordPolicy: int length> = $i31;

        goto label66;

     label06:
        $r6 = "password-history-length";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label07;

        $r125 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i30 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r125);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength> = $i30;

        goto label66;

     label07:
        $r7 = "min-password-uppercase";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label08;

        $r123 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r124 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i29 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r124);

        $r123.<android.app.admin.PasswordPolicy: int upperCase> = $i29;

        goto label66;

     label08:
        $r8 = "min-password-lowercase";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z6 == 0 goto label09;

        $r121 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r122 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i28 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r122);

        $r121.<android.app.admin.PasswordPolicy: int lowerCase> = $i28;

        goto label66;

     label09:
        $r9 = "min-password-letters";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label10;

        $r119 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r120 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i27 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r120);

        $r119.<android.app.admin.PasswordPolicy: int letters> = $i27;

        goto label66;

     label10:
        $r10 = "min-password-numeric";

        $z8 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z8 == 0 goto label11;

        $r117 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r118 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i26 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r118);

        $r117.<android.app.admin.PasswordPolicy: int numeric> = $i26;

        goto label66;

     label11:
        $r11 = "min-password-symbols";

        $z9 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z9 == 0 goto label12;

        $r115 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r116 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i25 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r116);

        $r115.<android.app.admin.PasswordPolicy: int symbols> = $i25;

        goto label66;

     label12:
        $r12 = "min-password-nonletter";

        $z10 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z10 == 0 goto label13;

        $r113 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r114 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i24 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r114);

        $r113.<android.app.admin.PasswordPolicy: int nonLetter> = $i24;

        goto label66;

     label13:
        $r13 = "max-time-to-unlock";

        $z11 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z11 == 0 goto label14;

        $r112 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l23 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r112);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock> = $l23;

        goto label66;

     label14:
        $r14 = "strong-auth-unlock-timeout";

        $z12 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z12 == 0 goto label15;

        $r111 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l22 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r111);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout> = $l22;

        goto label66;

     label15:
        $r15 = "max-failed-password-wipe";

        $z13 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z13 == 0 goto label16;

        $r110 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i21 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r110);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe> = $i21;

        goto label66;

     label16:
        $r16 = "specifies-global-proxy";

        $z14 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z14 == 0 goto label17;

        $r109 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z74 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r109);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = $z74;

        goto label66;

     label17:
        $r17 = "global-proxy-spec";

        $z15 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z15 == 0 goto label18;

        $r108 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = $r108;

        goto label66;

     label18:
        $r18 = "global-proxy-exclusion-list";

        $z16 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z16 == 0 goto label19;

        $r107 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = $r107;

        goto label66;

     label19:
        $r19 = "password-expiration-timeout";

        $z17 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z17 == 0 goto label20;

        $r106 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l20 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r106);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout> = $l20;

        goto label66;

     label20:
        $r20 = "password-expiration-date";

        $z18 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z18 == 0 goto label21;

        $r105 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l19 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r105);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = $l19;

        goto label66;

     label21:
        $r21 = "encryption-requested";

        $z19 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z19 == 0 goto label22;

        $r104 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z73 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r104);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested> = $z73;

        goto label66;

     label22:
        $r22 = "test-only-admin";

        $z20 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z20 == 0 goto label23;

        $r103 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z72 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r103);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean testOnlyAdmin> = $z72;

        goto label66;

     label23:
        $r23 = "disable-camera";

        $z21 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z21 == 0 goto label24;

        $r102 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z71 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r102);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = $z71;

        goto label66;

     label24:
        $r24 = "disable-caller-id";

        $z22 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z22 == 0 goto label25;

        $r101 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z70 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r101);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId> = $z70;

        goto label66;

     label25:
        $r25 = "disable-contacts-search";

        $z23 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z23 == 0 goto label26;

        $r100 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z69 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r100);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch> = $z69;

        goto label66;

     label26:
        $r26 = "disable-bt-contacts-sharing";

        $z24 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z24 == 0 goto label27;

        $r99 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z68 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r99);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing> = $z68;

        goto label66;

     label27:
        $r27 = "disable-screen-capture";

        $z25 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z25 == 0 goto label28;

        $r98 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z67 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r98);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture> = $z67;

        goto label66;

     label28:
        $r28 = "require_auto_time";

        $z26 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z26 == 0 goto label29;

        $r97 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z66 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r97);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime> = $z66;

        goto label66;

     label29:
        $r29 = "force_ephemeral_users";

        $z27 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z27 == 0 goto label30;

        $r96 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z65 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r96);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers> = $z65;

        goto label66;

     label30:
        $r30 = "is_network_logging_enabled";

        $z28 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z28 == 0 goto label31;

        $r93 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z64 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r93);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled> = $z64;

        $r94 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "last-notification");

        $l17 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r94);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long lastNetworkLoggingNotificationTimeMs> = $l17;

        $r95 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "num-notifications");

        $i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r95);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications> = $i18;

        goto label66;

     label31:
        $r31 = "disable-keyguard-features";

        $z29 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z29 == 0 goto label32;

        $r92 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r92);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures> = $i16;

        goto label66;

     label32:
        $r32 = "disable-account-management";

        $z30 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z30 == 0 goto label33;

        $r91 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void readAttributeValues(org.xmlpull.v1.XmlPullParser,java.lang.String,java.util.Collection)>(r1, "account-type", $r91);

        goto label66;

     label33:
        $r33 = "manage-trust-agent-features";

        $z31 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z31 == 0 goto label34;

        $r90 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap getAllTrustAgentInfos(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos> = $r90;

        goto label66;

     label34:
        $r34 = "cross-profile-widget-providers";

        $z32 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z32 == 0 goto label35;

        $r89 = new java.util.ArrayList;

        specialinvoke $r89.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders> = $r89;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void readAttributeValues(org.xmlpull.v1.XmlPullParser,java.lang.String,java.util.Collection)>(r1, "provider", $r89);

        goto label66;

     label35:
        $r35 = "permitted-accessiblity-services";

        $z33 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z33 == 0 goto label36;

        $r88 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List readPackageList(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices> = $r88;

        goto label66;

     label36:
        $r36 = "permitted-imes";

        $z34 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z34 == 0 goto label37;

        $r87 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List readPackageList(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods> = $r87;

        goto label66;

     label37:
        $r37 = "permitted-notification-listeners";

        $z35 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z35 == 0 goto label38;

        $r86 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List readPackageList(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners> = $r86;

        goto label66;

     label38:
        $r38 = "keep-uninstalled-packages";

        $z36 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z36 == 0 goto label39;

        $r85 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List readPackageList(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List keepUninstalledPackages> = $r85;

        goto label66;

     label39:
        $r39 = "metered_data_disabled_packages";

        $z37 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z37 == 0 goto label40;

        $r84 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List readPackageList(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages> = $r84;

        goto label66;

     label40:
        $r40 = "user-restrictions";

        $z38 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z38 == 0 goto label41;

        $r83 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: android.os.Bundle readRestrictions(org.xmlpull.v1.XmlPullParser)>(r1);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions> = $r83;

        goto label66;

     label41:
        $r41 = "default-enabled-user-restrictions";

        $z39 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z39 == 0 goto label42;

        $r82 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void readAttributeValues(org.xmlpull.v1.XmlPullParser,java.lang.String,java.util.Collection)>(r1, "restriction", $r82);

        goto label66;

     label42:
        $r42 = "short-support-message";

        $z40 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z40 == 0 goto label44;

        $i14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i14 != 4 goto label43;

        $r81 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage> = $r81;

        goto label66;

     label43:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Missing text when loading short support message");

        goto label66;

     label44:
        $r43 = "long-support-message";

        $z41 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z41 == 0 goto label46;

        $i12 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i12 != 4 goto label45;

        $r80 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage> = $r80;

        goto label66;

     label45:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Missing text when loading long support message");

        goto label66;

     label46:
        $r44 = "parent-admin";

        $z42 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z42 == 0 goto label47;

        $z62 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isParent>;

        $z63 = $z62 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z63);

        $r78 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r79 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        specialinvoke $r78.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo,boolean)>($r79, 1);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin> = $r78;

        virtualinvoke $r78.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void readFromXml(org.xmlpull.v1.XmlPullParser,boolean)>(r1, z0);

        goto label66;

     label47:
        $r45 = "organization-color";

        $z43 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z43 == 0 goto label48;

        $r77 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r77);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor> = $i11;

        goto label66;

     label48:
        $r46 = "organization-name";

        $z44 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z44 == 0 goto label50;

        $i9 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i9 != 4 goto label49;

        $r76 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName> = $r76;

        goto label66;

     label49:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Missing text when loading organization name");

        goto label66;

     label50:
        $r47 = "is_logout_enabled";

        $z45 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z45 == 0 goto label51;

        $r75 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z61 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r75);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isLogoutEnabled> = $z61;

        goto label66;

     label51:
        $r48 = "start_user_session_message";

        $z46 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z46 == 0 goto label53;

        $i7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i7 != 4 goto label52;

        $r74 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String startUserSessionMessage> = $r74;

        goto label66;

     label52:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Missing text when loading start session message");

        goto label66;

     label53:
        $r49 = "end_user_session_message";

        $z47 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z47 == 0 goto label55;

        $i5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i5 != 4 goto label54;

        $r73 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String endUserSessionMessage> = $r73;

        goto label66;

     label54:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Missing text when loading end session message");

        goto label66;

     label55:
        $r50 = "cross-profile-calendar-packages";

        $z48 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z48 == 0 goto label56;

        $r72 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List readPackageList(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages> = $r72;

        goto label66;

     label56:
        $r51 = "cross-profile-calendar-packages-null";

        $z49 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z49 == 0 goto label57;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages> = null;

        goto label66;

     label57:
        $r52 = "cross-profile-packages";

        $z50 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z50 == 0 goto label58;

        $r71 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List readPackageList(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages> = $r71;

        goto label66;

     label58:
        $r53 = "factory_reset_protection_policy";

        $z51 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z51 == 0 goto label59;

        $r70 = staticinvoke <android.app.admin.FactoryResetProtectionPolicy: android.app.admin.FactoryResetProtectionPolicy readFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.FactoryResetProtectionPolicy mFactoryResetProtectionPolicy> = $r70;

        goto label66;

     label59:
        $r54 = "suspend-personal-apps";

        $z52 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z52 == 0 goto label60;

        $r69 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z60 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r69);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps> = $z60;

        goto label66;

     label60:
        $r55 = "profile-max-time-off";

        $z53 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z53 == 0 goto label61;

        $r68 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r68);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis> = $l4;

        goto label66;

     label61:
        $r56 = "profile-off-deadline";

        $z54 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z54 == 0 goto label62;

        $r67 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r67);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline> = $l3;

        goto label66;

     label62:
        $r57 = "vpn-package";

        $z55 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z55 == 0 goto label63;

        $r66 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String mAlwaysOnVpnPackage> = $r66;

        goto label66;

     label63:
        $r58 = "vpn-lockdown";

        $z56 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z56 == 0 goto label64;

        $r65 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z59 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r65);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mAlwaysOnVpnLockdown> = $z59;

        goto label66;

     label64:
        $r59 = "common-criteria-mode";

        $z57 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z57 == 0 goto label65;

        $r64 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z58 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r64);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mCommonCriteriaMode> = $z58;

        goto label66;

     label65:
        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown admin tag: ");

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r63 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r63);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

     label66:
        goto label01;

     label67:
        return;
    }

    public void transfer(android.app.admin.DeviceAdminInfo)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0, $r2;
        android.app.admin.DeviceAdminInfo r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: android.app.admin.DeviceAdminInfo;

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean hasParentActiveAdmin()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info> = r1;

     label1:
        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info> = r1;

        return;
    }

    void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer, java.lang.String, int) throws java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, $r4;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r2);

        return;
    }

    void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer, java.lang.String, long) throws java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, $r4;
        long l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r2);

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r2);

        return;
    }

    void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer, java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", r3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r2);

        return;
    }

    void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer, java.lang.String, boolean) throws java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, $r4;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r2);

        return;
    }

    void writeAttributeValuesToXml(org.xmlpull.v1.XmlSerializer, java.lang.String, java.lang.String, java.util.Collection) throws java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, r3, r12;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r7;
        java.util.Collection r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r11 := @parameter3: java.util.Collection;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r2);

        r4 = interfaceinvoke r11.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r7;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", r12);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r3);

        goto label1;

     label2:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r2);

        return;
    }

    void writePackageListToXml(org.xmlpull.v1.XmlSerializer, java.lang.String, java.util.List) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2;
        java.util.List r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        if r3 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValuesToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String,java.util.Collection)>(r1, r2, "item", r3);

        return;
    }

    void writeTextToXml(org.xmlpull.v1.XmlSerializer, java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>(r3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r2);

        return;
    }

    void writeToXml(org.xmlpull.v1.XmlSerializer) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0, $r12, $r23;
        org.xmlpull.v1.XmlSerializer r1;
        java.util.Map$Entry r2;
        android.app.admin.DeviceAdminInfo $r4;
        android.app.admin.PasswordPolicy $r6, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69;
        int $i0, $i4, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i27, i30, i34, i35;
        byte $b1, $b2, $b3, $b5, $b7, $b32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, z12, z13, z14, z15, z16, z17, z18, z19, $z20, z21, z22, z23, z24;
        java.util.Set $r7, $r9, $r29, $r46, r73;
        android.util.ArrayMap $r8, $r32;
        java.lang.CharSequence $r10, $r11, $r25, $r27;
        java.util.List $r13, $r31, r77, $r78, $r79, $r80, $r81, $r82, r86;
        android.app.admin.FactoryResetProtectionPolicy $r14, $r18;
        long $l6, $l8, $l10, l28, l29, l31, l33, l36;
        java.lang.String $r15, $r16, $r26, $r28, $r39, $r48, $r50, $r52, r71, r72, r83, r84, r85;
        android.os.Bundle $r30;
        java.lang.Object $r35, $r36, $r38;
        android.os.PersistableBundle $r41, $r44;
        java.lang.Throwable $r70;
        java.util.Iterator r74;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo r75;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "policies");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: void writePoliciesToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "policies");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r6.<android.app.admin.PasswordPolicy: int quality>;

        if $i0 == 0 goto label07;

        $r55 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i11 = $r55.<android.app.admin.PasswordPolicy: int quality>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "password-quality", $i11);

        $r56 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i12 = $r56.<android.app.admin.PasswordPolicy: int length>;

        if $i12 == 0 goto label01;

        $r69 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i25 = $r69.<android.app.admin.PasswordPolicy: int length>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "min-password-length", $i25);

     label01:
        $r57 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i13 = $r57.<android.app.admin.PasswordPolicy: int upperCase>;

        if $i13 == 0 goto label02;

        $r68 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i24 = $r68.<android.app.admin.PasswordPolicy: int upperCase>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "min-password-uppercase", $i24);

     label02:
        $r58 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i14 = $r58.<android.app.admin.PasswordPolicy: int lowerCase>;

        if $i14 == 0 goto label03;

        $r67 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i23 = $r67.<android.app.admin.PasswordPolicy: int lowerCase>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "min-password-lowercase", $i23);

     label03:
        $r59 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i15 = $r59.<android.app.admin.PasswordPolicy: int letters>;

        if $i15 == 1 goto label04;

        $r66 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i22 = $r66.<android.app.admin.PasswordPolicy: int letters>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "min-password-letters", $i22);

     label04:
        $r60 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i16 = $r60.<android.app.admin.PasswordPolicy: int numeric>;

        if $i16 == 1 goto label05;

        $r65 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i21 = $r65.<android.app.admin.PasswordPolicy: int numeric>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "min-password-numeric", $i21);

     label05:
        $r61 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i17 = $r61.<android.app.admin.PasswordPolicy: int symbols>;

        if $i17 == 1 goto label06;

        $r64 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i20 = $r64.<android.app.admin.PasswordPolicy: int symbols>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "min-password-symbols", $i20);

     label06:
        $r62 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i18 = $r62.<android.app.admin.PasswordPolicy: int nonLetter>;

        if $i18 <= 0 goto label07;

        $r63 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i19 = $r63.<android.app.admin.PasswordPolicy: int nonLetter>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "min-password-nonletter", $i19);

     label07:
        i27 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        if i27 == 0 goto label08;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "password-history-length", i27);

     label08:
        l28 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b1 = l28 cmp 0L;

        if $b1 == 0 goto label09;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "max-time-to-unlock", l28);

     label09:
        l29 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout>;

        $b2 = l29 cmp 259200000L;

        if $b2 == 0 goto label10;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "strong-auth-unlock-timeout", l29);

     label10:
        i30 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if i30 == 0 goto label11;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "max-failed-password-wipe", i30);

     label11:
        z10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if z10 == 0 goto label13;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "specifies-global-proxy", z10);

        r71 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec>;

        if r71 == null goto label12;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "global-proxy-spec", r71);

     label12:
        r72 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList>;

        if r72 == null goto label13;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "global-proxy-exclusion-list", r72);

     label13:
        l31 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b32 = l31 cmp 0L;

        if $b32 == 0 goto label14;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "password-expiration-timeout", l31);

     label14:
        l33 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b3 = l33 cmp 0L;

        if $b3 == 0 goto label15;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "password-expiration-date", l33);

     label15:
        z11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        if z11 == 0 goto label16;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "encryption-requested", z11);

     label16:
        z12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean testOnlyAdmin>;

        if z12 == 0 goto label17;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "test-only-admin", z12);

     label17:
        z13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if z13 == 0 goto label18;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "disable-camera", z13);

     label18:
        z14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

        if z14 == 0 goto label19;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "disable-caller-id", z14);

     label19:
        z15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch>;

        if z15 == 0 goto label20;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "disable-contacts-search", z15);

     label20:
        z16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing>;

        if z16 != 0 goto label21;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "disable-bt-contacts-sharing", z16);

     label21:
        z17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        if z17 == 0 goto label22;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "disable-screen-capture", z17);

     label22:
        z18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        if z18 == 0 goto label23;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "require_auto_time", z18);

     label23:
        z19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers>;

        if z19 == 0 goto label24;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "force_ephemeral_users", z19);

     label24:
        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled>;

        if $z0 == 0 goto label25;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "is_network_logging_enabled");

        $z9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled>;

        $r48 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z9);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r48);

        $i9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications>;

        $r50 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i9);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "num-notifications", $r50);

        $l10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long lastNetworkLoggingNotificationTimeMs>;

        $r52 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l10);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "last-notification", $r52);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "is_network_logging_enabled");

     label25:
        i34 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        if i34 == 0 goto label26;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "disable-keyguard-features", i34);

     label26:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        $z1 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label27;

        $r46 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValuesToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String,java.util.Collection)>(r1, "disable-account-management", "account-type", $r46);

     label27:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos>;

        $z2 = virtualinvoke $r8.<android.util.ArrayMap: boolean isEmpty()>();

        if $z2 != 0 goto label35;

        $r32 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos>;

        r73 = virtualinvoke $r32.<android.util.ArrayMap: java.util.Set entrySet()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "manage-trust-agent-features");

        r74 = interfaceinvoke r73.<java.util.Set: java.util.Iterator iterator()>();

     label28:
        $z8 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label34;

        $r35 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r35;

        $r36 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r75 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo) $r36;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "component");

        $r38 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = (java.lang.String) $r38;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r39);

        $r41 = r75.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options>;

        if $r41 == null goto label33;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "trust-agent-component-options");

     label29:
        $r44 = r75.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options>;

        virtualinvoke $r44.<android.os.PersistableBundle: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

     label30:
        goto label32;

     label31:
        $r70 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to save TrustAgent options", $r70);

     label32:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "trust-agent-component-options");

     label33:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "component");

        goto label28;

     label34:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "manage-trust-agent-features");

     label35:
        r77 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        if r77 == null goto label36;

        $z7 = interfaceinvoke r77.<java.util.List: boolean isEmpty()>();

        if $z7 != 0 goto label36;

        $r31 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValuesToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String,java.util.Collection)>(r1, "cross-profile-widget-providers", "provider", $r31);

     label36:
        $r78 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writePackageListToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.List)>(r1, "permitted-accessiblity-services", $r78);

        $r79 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writePackageListToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.List)>(r1, "permitted-imes", $r79);

        $r80 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writePackageListToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.List)>(r1, "permitted-notification-listeners", $r80);

        $r81 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List keepUninstalledPackages>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writePackageListToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.List)>(r1, "keep-uninstalled-packages", $r81);

        $r82 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writePackageListToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.List)>(r1, "metered_data_disabled_packages", $r82);

        $z20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean hasUserRestrictions()>();

        if $z20 == 0 goto label37;

        $r30 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        staticinvoke <com.android.server.pm.UserRestrictionsUtils: void writeRestrictions(org.xmlpull.v1.XmlSerializer,android.os.Bundle,java.lang.String)>(r1, $r30, "user-restrictions");

     label37:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        $z3 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label38;

        $r29 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValuesToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String,java.util.Collection)>(r1, "default-enabled-user-restrictions", "restriction", $r29);

     label38:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage>;

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r10);

        if $z4 != 0 goto label39;

        $r27 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage>;

        $r28 = interfaceinvoke $r27.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeTextToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "short-support-message", $r28);

     label39:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage>;

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r11);

        if $z5 != 0 goto label40;

        $r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage>;

        $r26 = interfaceinvoke $r25.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeTextToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "long-support-message", $r26);

     label40:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        if $r12 == null goto label41;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "parent-admin");

        $r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin parentAdmin>;

        virtualinvoke $r23.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "parent-admin");

     label41:
        i35 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor>;

        $i4 = <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_ORGANIZATION_COLOR>;

        if i35 == $i4 goto label42;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "organization-color", i35);

     label42:
        r83 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName>;

        if r83 == null goto label43;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeTextToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "organization-name", r83);

     label43:
        z21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isLogoutEnabled>;

        if z21 == 0 goto label44;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "is_logout_enabled", z21);

     label44:
        r84 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String startUserSessionMessage>;

        if r84 == null goto label45;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeTextToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "start_user_session_message", r84);

     label45:
        r85 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String endUserSessionMessage>;

        if r85 == null goto label46;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeTextToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "end_user_session_message", r85);

     label46:
        r86 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages>;

        if r86 != null goto label47;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "cross-profile-calendar-packages-null");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "cross-profile-calendar-packages-null");

        goto label48;

     label47:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writePackageListToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.List)>(r1, "cross-profile-calendar-packages", r86);

     label48:
        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writePackageListToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.List)>(r1, "cross-profile-packages", $r13);

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.FactoryResetProtectionPolicy mFactoryResetProtectionPolicy>;

        if $r14 == null goto label49;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "factory_reset_protection_policy");

        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.FactoryResetProtectionPolicy mFactoryResetProtectionPolicy>;

        virtualinvoke $r18.<android.app.admin.FactoryResetProtectionPolicy: void writeToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "factory_reset_protection_policy");

     label49:
        z22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps>;

        if z22 == 0 goto label50;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "suspend-personal-apps", z22);

     label50:
        l36 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        $b5 = l36 cmp 0L;

        if $b5 == 0 goto label51;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "profile-max-time-off", l36);

     label51:
        $l6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label52;

        $l8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "profile-off-deadline", $l8);

     label52:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String mAlwaysOnVpnPackage>;

        $z6 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r15);

        if $z6 != 0 goto label53;

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String mAlwaysOnVpnPackage>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "vpn-package", $r16);

     label53:
        z23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mAlwaysOnVpnLockdown>;

        if z23 == 0 goto label54;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "vpn-lockdown", z23);

     label54:
        z24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mCommonCriteriaMode>;

        if z24 == 0 goto label55;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeAttributeValueToXml(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "common-criteria-mode", z24);

     label55:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label31;
    }
}
