class com.android.server.devicepolicy.DevicePolicyManagerService$Injector extends java.lang.Object
{
    public final android.content.Context mContext;

    void <init>(android.content.Context)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext> = r1;

        return;
    }

    long binderClearCallingIdentity()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        return $l0;
    }

    int binderGetCallingPid()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        return $i0;
    }

    int binderGetCallingUid()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        return $i0;
    }

    android.os.UserHandle binderGetCallingUserHandle()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.UserHandle $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        return $r1;
    }

    boolean binderIsCallingUidMyUid()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void binderRestoreCallingIdentity(long)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        long l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        l0 := @parameter0: long;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;
    }

    final java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        com.android.internal.util.FunctionalUtils$ThrowingSupplier r1;
        java.lang.Object $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingSupplier;

        $r2 = staticinvoke <android.os.Binder: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r1);

        return $r2;
    }

    void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        com.android.internal.util.FunctionalUtils$ThrowingRunnable r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingRunnable;

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r1);

        return;
    }

    android.content.Context createContextAsUser(android.os.UserHandle) throws android.content.pm.PackageManager$NameNotFoundException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.UserHandle r1;
        java.lang.String r2;
        android.content.Context $r3, $r4, $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: android.os.UserHandle;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        r2 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>(r2, 0, r1);

        return $r5;
    }

    java.io.File environmentGetUserSystemDirectory(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        int i0;
        java.io.File $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        return $r1;
    }

    android.app.ActivityManagerInternal getActivityManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        android.app.ActivityManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r2 = (android.app.ActivityManagerInternal) $r1;

        return $r2;
    }

    com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r2 = (com.android.server.wm.ActivityTaskManagerInternal) $r1;

        return $r2;
    }

    android.app.AlarmManager getAlarmManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.AlarmManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AlarmManager;");

        $r3 = (android.app.AlarmManager) $r2;

        return $r3;
    }

    android.net.ConnectivityManager getConnectivityManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.ConnectivityManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/ConnectivityManager;");

        $r3 = (android.net.ConnectivityManager) $r2;

        return $r3;
    }

    java.lang.String getDevicePolicyFilePathForSystemUser()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        return "/data/system/";
    }

    android.app.IActivityManager getIActivityManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.app.IActivityManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        return $r1;
    }

    android.app.IActivityTaskManager getIActivityTaskManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.app.IActivityTaskManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        return $r1;
    }

    android.media.IAudioService getIAudioService()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.IBinder $r1;
        android.media.IAudioService $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        $r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    android.app.backup.IBackupManager getIBackupManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.IBinder $r1;
        android.app.backup.IBackupManager $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("backup");

        $r2 = staticinvoke <android.app.backup.IBackupManager$Stub: android.app.backup.IBackupManager asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    android.net.IIpConnectivityMetrics getIIpConnectivityMetrics()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.IBinder $r1;
        android.net.IIpConnectivityMetrics $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("connmetrics");

        $r2 = staticinvoke <android.net.IIpConnectivityMetrics$Stub: android.net.IIpConnectivityMetrics asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    android.content.pm.IPackageManager getIPackageManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.pm.IPackageManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        return $r1;
    }

    android.permission.IPermissionManager getIPermissionManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.permission.IPermissionManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.app.AppGlobals: android.permission.IPermissionManager getPermissionManager()>();

        return $r1;
    }

    com.android.internal.compat.IPlatformCompat getIPlatformCompat()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.IBinder $r1;
        com.android.internal.compat.IPlatformCompat $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("platform_compat");

        $r2 = staticinvoke <com.android.internal.compat.IPlatformCompat$Stub: com.android.internal.compat.IPlatformCompat asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    android.view.IWindowManager getIWindowManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.IBinder $r1;
        android.view.IWindowManager $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r2 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    android.location.LocationManager getLocationManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.location.LocationManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/location/LocationManager;");

        $r3 = (android.location.LocationManager) $r2;

        return $r3;
    }

    com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        com.android.internal.widget.LockSettingsInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/internal/widget/LockSettingsInternal;");

        $r2 = (com.android.internal.widget.LockSettingsInternal) $r1;

        return $r2;
    }

    android.os.Looper getMyLooper()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.Looper $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        return $r1;
    }

    com.android.server.net.NetworkPolicyManagerInternal getNetworkPolicyManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        com.android.server.net.NetworkPolicyManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;");

        $r2 = (com.android.server.net.NetworkPolicyManagerInternal) $r1;

        return $r2;
    }

    android.app.NotificationManager getNotificationManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.NotificationManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/NotificationManager;");

        $r3 = (android.app.NotificationManager) $r2;

        return $r3;
    }

    android.content.pm.PackageManager getPackageManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        return $r2;
    }

    android.content.pm.PackageManager getPackageManager(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        int i0;
        android.content.Context $r1, $r3;
        android.os.UserHandle $r2;
        android.content.pm.PackageManager $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r3 = virtualinvoke $r1.<android.content.Context: android.content.Context createContextAsUser(android.os.UserHandle,int)>($r2, 0);

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        return $r4;
    }

    android.content.pm.PackageManagerInternal getPackageManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        android.content.pm.PackageManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r2 = (android.content.pm.PackageManagerInternal) $r1;

        return $r2;
    }

    android.permission.PermissionControllerManager getPermissionControllerManager(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1, $r3, $r4, $r6, $r8;
        android.os.UserHandle $r2, r13;
        boolean $z0;
        java.lang.String $r5;
        java.lang.Object $r7, $r9;
        android.permission.PermissionControllerManager $r10, r14;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        java.lang.IllegalStateException $r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r13 := @parameter0: android.os.UserHandle;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.os.UserHandle getUser()>();

        $z0 = virtualinvoke r13.<android.os.UserHandle: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/permission/PermissionControllerManager;");

        $r10 = (android.permission.PermissionControllerManager) $r9;

        return $r10;

     label1:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $r6 = virtualinvoke $r4.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r5, 0, r13);

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/permission/PermissionControllerManager;");

        r14 = (android.permission.PermissionControllerManager) $r7;

     label2:
        return r14;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlockManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        com.android.server.PersistentDataBlockManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/PersistentDataBlockManagerInternal;");

        $r2 = (com.android.server.PersistentDataBlockManagerInternal) $r1;

        return $r2;
    }

    public java.lang.String[] getPersonalAppsForSuspension(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        int i0;
        com.android.server.devicepolicy.PersonalAppsSuspensionHelper $r1;
        android.content.Context $r2, $r4;
        android.os.UserHandle $r3;
        java.lang.String[] $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        i0 := @parameter0: int;

        $r1 = new com.android.server.devicepolicy.PersonalAppsSuspensionHelper;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r4 = virtualinvoke $r2.<android.content.Context: android.content.Context createContextAsUser(android.os.UserHandle,int)>($r3, 0);

        specialinvoke $r1.<com.android.server.devicepolicy.PersonalAppsSuspensionHelper: void <init>(android.content.Context)>($r4);

        $r5 = virtualinvoke $r1.<com.android.server.devicepolicy.PersonalAppsSuspensionHelper: java.lang.String[] getPersonalAppsForSuspension()>();

        return $r5;
    }

    android.os.PowerManagerInternal getPowerManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        android.os.PowerManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/PowerManagerInternal;");

        $r2 = (android.os.PowerManagerInternal) $r1;

        return $r2;
    }

    android.content.res.Resources getResources()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        return $r2;
    }

    android.telephony.TelephonyManager getTelephonyManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telephony.TelephonyManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        $r3 = (android.telephony.TelephonyManager) $r2;

        return $r3;
    }

    android.app.trust.TrustManager getTrustManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.trust.TrustManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("trust");

        $r3 = (android.app.trust.TrustManager) $r2;

        return $r3;
    }

    android.app.usage.UsageStatsManagerInternal getUsageStatsManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        android.app.usage.UsageStatsManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        $r2 = (android.app.usage.UsageStatsManagerInternal) $r1;

        return $r2;
    }

    android.os.UserManager getUserManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        android.os.UserManager $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        return $r2;
    }

    android.os.UserManagerInternal getUserManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Object $r1;
        android.os.UserManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r2 = (android.os.UserManagerInternal) $r1;

        return $r2;
    }

    android.net.wifi.WifiManager getWifiManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.wifi.WifiManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/wifi/WifiManager;");

        $r3 = (android.net.wifi.WifiManager) $r2;

        return $r3;
    }

    public boolean hasFeature()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.pm.PackageManager $r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.device_admin");

        return $z0;
    }

    boolean hasUserSetupCompleted(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        return $z0;
    }

    boolean isBuildDebuggable()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        return $z0;
    }

    android.security.KeyChain$KeyChainConnection keyChainBindAsUser(android.os.UserHandle) throws java.lang.InterruptedException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.os.UserHandle r1;
        android.content.Context $r2;
        android.security.KeyChain$KeyChainConnection $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: android.os.UserHandle;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r2, r1);

        return $r3;
    }

    com.android.internal.widget.LockPatternUtils newLockPatternUtils()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        com.android.internal.widget.LockPatternUtils $r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = new com.android.internal.widget.LockPatternUtils;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        specialinvoke $r1.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r2);

        return $r1;
    }

    com.android.server.devicepolicy.Owners newOwners()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        com.android.server.devicepolicy.Owners $r1;
        android.os.UserManager $r2;
        android.os.UserManagerInternal $r3;
        android.content.pm.PackageManagerInternal $r4;
        com.android.server.wm.ActivityTaskManagerInternal $r5;
        android.app.ActivityManagerInternal $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = new com.android.server.devicepolicy.Owners;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManager getUserManager()>();

        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()>();

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>();

        specialinvoke $r1.<com.android.server.devicepolicy.Owners: void <init>(android.os.UserManager,android.os.UserManagerInternal,android.content.pm.PackageManagerInternal,com.android.server.wm.ActivityTaskManagerInternal,android.app.ActivityManagerInternal)>($r2, $r3, $r4, $r5, $r6);

        return $r1;
    }

    public com.android.server.devicepolicy.TransferOwnershipMetadataManager newTransferOwnershipMetadataManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        com.android.server.devicepolicy.TransferOwnershipMetadataManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $r1 = new com.android.server.devicepolicy.TransferOwnershipMetadataManager;

        specialinvoke $r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager: void <init>()>();

        return $r1;
    }

    android.app.PendingIntent pendingIntentGetActivityAsUser(android.content.Context, int, android.content.Intent, int, android.os.Bundle, android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context r1;
        int i0, i1;
        android.content.Intent r2;
        android.os.Bundle r3;
        android.os.UserHandle r4;
        android.app.PendingIntent $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.Intent;

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.Bundle;

        r4 := @parameter5: android.os.UserHandle;

        $r5 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>(r1, i0, r2, i1, r3, r4);

        return $r5;
    }

    android.app.PendingIntent pendingIntentGetBroadcast(android.content.Context, int, android.content.Intent, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.content.Context r1;
        int i0, i1;
        android.content.Intent r2;
        android.app.PendingIntent $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.Intent;

        i1 := @parameter3: int;

        $r3 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r1, i0, r2, i1);

        return $r3;
    }

    void postOnSystemServerInitThreadPool(java.lang.Runnable)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.Runnable r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r1, "DevicePolicyManager");

        return;
    }

    void powerManagerGoToSleep(long, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        long l0;
        int i1, i2;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.PowerManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r3 = (android.os.PowerManager) $r2;

        virtualinvoke $r3.<android.os.PowerManager: void goToSleep(long,int,int)>(l0, i1, i2);

        return;
    }

    void powerManagerReboot(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.os.PowerManager $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r4 = (android.os.PowerManager) $r3;

        virtualinvoke $r4.<android.os.PowerManager: void reboot(java.lang.String)>(r1);

        return;
    }

    void recoverySystemRebootWipeUserData(boolean, java.lang.String, boolean, boolean) throws java.io.IOException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean z0, z1, z2;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        staticinvoke <android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean,boolean)>($r2, z0, r1, z1, z2);

        return;
    }

    void registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        android.net.Uri r1;
        boolean z0;
        android.database.ContentObserver r2;
        int i0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: android.net.Uri;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.database.ContentObserver;

        i0 := @parameter3: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r4.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>(r1, z0, r2, i0);

        return;
    }

    public void runCryptoSelfTest()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        staticinvoke <com.android.server.devicepolicy.CryptoTestHelper: void runAndLogSelfTest()>();

        return;
    }

    boolean securityLogGetLoggingEnabledProperty()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $z0 = staticinvoke <android.app.admin.SecurityLog: boolean getLoggingEnabledProperty()>();

        return $z0;
    }

    boolean securityLogIsLoggingEnabled()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $z0 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        return $z0;
    }

    void securityLogSetLoggingEnabledProperty(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        z0 := @parameter0: boolean;

        staticinvoke <android.app.admin.SecurityLog: void setLoggingEnabledProperty(boolean)>(z0);

        return;
    }

    int settingsGlobalGetInt(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, r1, i0);

        return $i1;
    }

    java.lang.String settingsGlobalGetString(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, $r4;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r3, r1);

        return $r4;
    }

    void settingsGlobalPutInt(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        int i0;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r3, r1, i0);

        return;
    }

    void settingsGlobalPutString(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r4, r1, r2);

        return;
    }

    void settingsGlobalPutStringForUser(java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, r2;
        int i0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r4, r1, r2, i0);

        return;
    }

    int settingsSecureGetIntForUser(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, r1, i0, i1);

        return $i2;
    }

    java.lang.String settingsSecureGetStringForUser(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, $r4;
        int i0;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r3, r1, i0);

        return $r4;
    }

    void settingsSecurePutInt(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        int i0;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r3, r1, i0);

        return;
    }

    void settingsSecurePutIntForUser(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        int i0, i1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, r1, i0, i1);

        return;
    }

    void settingsSecurePutString(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r4, r1, r2);

        return;
    }

    void settingsSecurePutStringForUser(java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, r2;
        int i0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r4, r1, r2, i0);

        return;
    }

    void settingsSystemPutStringForUser(java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, r2;
        int i0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r4, r1, r2, i0);

        return;
    }

    boolean storageManagerIsEncryptable()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isEncryptable()>();

        return $z0;
    }

    boolean storageManagerIsEncrypted()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isEncrypted()>();

        return $z0;
    }

    boolean storageManagerIsFileBasedEncryptionEnabled()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()>();

        return $z0;
    }

    boolean storageManagerIsNonDefaultBlockEncrypted()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        long l0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        z0 = staticinvoke <android.os.storage.StorageManager: boolean isNonDefaultBlockEncrypted()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long systemCurrentTimeMillis()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    java.lang.String systemPropertiesGet(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String systemPropertiesGet(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    boolean systemPropertiesGetBoolean(java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        boolean z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>(r1, z0);

        return $z1;
    }

    long systemPropertiesGetLong(java.lang.String, long)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1;
        long l0, $l1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $l1 = staticinvoke <android.os.SystemProperties: long getLong(java.lang.String,long)>(r1, l0);

        return $l1;
    }

    void systemPropertiesSet(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    final int userHandleGetCallingUserId()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        int $i0, $i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        return $i1;
    }

    boolean userManagerIsSplitSystemUser()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        $z0 = staticinvoke <android.os.UserManager: boolean isSplitSystemUser()>();

        return $z0;
    }
}
