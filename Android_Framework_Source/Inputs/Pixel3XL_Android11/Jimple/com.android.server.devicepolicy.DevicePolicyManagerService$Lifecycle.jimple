public final class com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle extends com.android.server.SystemService
{
    private com.android.server.devicepolicy.BaseIDevicePolicyManager mService;

    public void <init>(android.content.Context)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle r0;
        android.content.res.Resources $r1;
        boolean $z0;
        java.lang.Class $r2, $r8;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        com.android.server.devicepolicy.BaseIDevicePolicyManager $r7;
        java.lang.Exception $r9;
        java.lang.StringBuilder $r10;
        java.lang.IllegalStateException $r13;
        java.lang.String $r14, r16, r17;
        android.content.Context r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle;

        r15 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r15);

        $r1 = virtualinvoke r15.<android.content.Context: android.content.res.Resources getResources()>();

        r16 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(17039880);

        r17 = r16;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r16);

        if $z0 == 0 goto label1;

        $r8 = class "Lcom/android/server/devicepolicy/DevicePolicyManagerService;";

        r17 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r17);

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Landroid/content/Context;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r15;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r7 = (com.android.server.devicepolicy.BaseIDevicePolicyManager) $r6;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: com.android.server.devicepolicy.BaseIDevicePolicyManager mService> = $r7;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate DevicePolicyManagerService with class name: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r9);

        throw $r13;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void onBootPhase(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle r0;
        int i0;
        com.android.server.devicepolicy.BaseIDevicePolicyManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: com.android.server.devicepolicy.BaseIDevicePolicyManager mService>;

        virtualinvoke $r1.<com.android.server.devicepolicy.BaseIDevicePolicyManager: void systemReady(int)>(i0);

        return;
    }

    public void onStart()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle r0;
        com.android.server.devicepolicy.BaseIDevicePolicyManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: com.android.server.devicepolicy.BaseIDevicePolicyManager mService>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: void publishBinderService(java.lang.String,android.os.IBinder)>("device_policy", $r1);

        return;
    }

    public void onStartUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle r0;
        int i0;
        com.android.server.devicepolicy.BaseIDevicePolicyManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: com.android.server.devicepolicy.BaseIDevicePolicyManager mService>;

        virtualinvoke $r1.<com.android.server.devicepolicy.BaseIDevicePolicyManager: void handleStartUser(int)>(i0);

        return;
    }

    public void onStopUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle r0;
        int i0;
        com.android.server.devicepolicy.BaseIDevicePolicyManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: com.android.server.devicepolicy.BaseIDevicePolicyManager mService>;

        virtualinvoke $r1.<com.android.server.devicepolicy.BaseIDevicePolicyManager: void handleStopUser(int)>(i0);

        return;
    }

    public void onUnlockUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle r0;
        int i0;
        com.android.server.devicepolicy.BaseIDevicePolicyManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: com.android.server.devicepolicy.BaseIDevicePolicyManager mService>;

        virtualinvoke $r1.<com.android.server.devicepolicy.BaseIDevicePolicyManager: void handleUnlockUser(int)>(i0);

        return;
    }
}
