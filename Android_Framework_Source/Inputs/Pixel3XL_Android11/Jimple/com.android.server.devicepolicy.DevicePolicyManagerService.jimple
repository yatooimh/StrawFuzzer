public class com.android.server.devicepolicy.DevicePolicyManagerService extends com.android.server.devicepolicy.BaseIDevicePolicyManager
{
    private static final java.lang.String AB_DEVICE_KEY;
    private static final java.lang.String ACTION_EXPIRED_PASSWORD_NOTIFICATION;
    static final java.lang.String ACTION_PROFILE_OFF_DEADLINE;
    static final java.lang.String ACTION_TURN_PROFILE_ON_NOTIFICATION;
    private static final long ADMIN_APP_PASSWORD_COMPLEXITY;
    private static final java.lang.String ATTR_ALIAS;
    private static final java.lang.String ATTR_APPLICATION_RESTRICTIONS_MANAGER;
    private static final java.lang.String ATTR_DELEGATED_CERT_INSTALLER;
    private static final java.lang.String ATTR_DEVICE_PAIRED;
    private static final java.lang.String ATTR_DEVICE_PROVISIONING_CONFIG_APPLIED;
    private static final java.lang.String ATTR_DISABLED;
    private static final java.lang.String ATTR_ID;
    private static final java.lang.String ATTR_NAME;
    private static final java.lang.String ATTR_PERMISSION_POLICY;
    private static final java.lang.String ATTR_PERMISSION_PROVIDER;
    private static final java.lang.String ATTR_PROVISIONING_STATE;
    private static final java.lang.String ATTR_SETUP_COMPLETE;
    private static final java.lang.String ATTR_VALUE;
    private static final java.lang.String CALLED_FROM_PARENT;
    private static final java.util.Set DA_DISALLOWED_POLICIES;
    private static final java.lang.String[] DELEGATIONS;
    private static final java.util.Set DEPRECATED_USER_RESTRICTIONS;
    private static final int DEVICE_ADMIN_DEACTIVATE_TIMEOUT;
    private static final java.util.List DEVICE_OWNER_DELEGATIONS;
    private static final java.lang.String DEVICE_POLICIES_XML;
    private static final java.lang.String DO_NOT_ASK_CREDENTIALS_ON_BOOT_XML;
    private static final boolean ENABLE_LOCK_GUARD;
    private static final java.util.List EXCLUSIVE_DELEGATIONS;
    private static final long EXPIRATION_GRACE_PERIOD_MS;
    private static final java.util.Set GLOBAL_SETTINGS_DEPRECATED;
    private static final java.util.Set GLOBAL_SETTINGS_WHITELIST;
    protected static final java.lang.String LOG_TAG;
    private static final java.lang.String LOG_TAG_DEVICE_OWNER;
    private static final java.lang.String LOG_TAG_PROFILE_OWNER;
    private static final long MANAGED_PROFILE_MAXIMUM_TIME_OFF_THRESHOLD;
    private static final long MANAGED_PROFILE_OFF_WARNING_PERIOD;
    private static final long MINIMUM_STRONG_AUTH_TIMEOUT_MS;
    private static final long MS_PER_DAY;
    private static final java.lang.String NOT_CALLED_FROM_PARENT;
    private static final int PROFILE_KEYGUARD_FEATURES;
    private static final int PROFILE_KEYGUARD_FEATURES_PROFILE_ONLY;
    private static final int PROFILE_OFF_DEADLINE_DEFAULT;
    private static final int PROFILE_OFF_DEADLINE_REACHED;
    private static final int PROFILE_OFF_DEADLINE_WARNING;
    private static final java.lang.String PROPERTY_ORGANIZATION_OWNED;
    private static final int REQUEST_EXPIRE_PASSWORD;
    private static final int REQUEST_PROFILE_OFF_DEADLINE;
    private static final java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST;
    private static final java.util.Set SECURE_SETTINGS_WHITELIST;
    private static final int STATUS_BAR_DISABLE2_MASK;
    private static final int STATUS_BAR_DISABLE_MASK;
    private static final java.util.Set SYSTEM_SETTINGS_WHITELIST;
    private static final java.lang.String TAG_ACCEPTED_CA_CERTIFICATES;
    private static final java.lang.String TAG_ADMIN_BROADCAST_PENDING;
    private static final java.lang.String TAG_AFFILIATION_ID;
    private static final java.lang.String TAG_APPS_SUSPENDED;
    private static final java.lang.String TAG_CURRENT_INPUT_METHOD_SET;
    private static final java.lang.String TAG_INITIALIZATION_BUNDLE;
    private static final java.lang.String TAG_LAST_BUG_REPORT_REQUEST;
    private static final java.lang.String TAG_LAST_NETWORK_LOG_RETRIEVAL;
    private static final java.lang.String TAG_LAST_SECURITY_LOG_RETRIEVAL;
    private static final java.lang.String TAG_LOCK_TASK_COMPONENTS;
    private static final java.lang.String TAG_LOCK_TASK_FEATURES;
    private static final java.lang.String TAG_OWNER_INSTALLED_CA_CERT;
    private static final java.lang.String TAG_PASSWORD_TOKEN_HANDLE;
    private static final java.lang.String TAG_PASSWORD_VALIDITY;
    private static final java.lang.String TAG_PROTECTED_PACKAGES;
    private static final java.lang.String TAG_SECONDARY_LOCK_SCREEN;
    private static final java.lang.String TAG_STATUS_BAR;
    private static final java.lang.String TAG_TRANSFER_OWNERSHIP_BUNDLE;
    private static final java.lang.String TRANSFER_OWNERSHIP_PARAMETERS_XML;
    private static final int UNATTENDED_MANAGED_KIOSK_MS;
    private static final long USE_SET_LOCATION_ENABLED;
    private static final boolean VERBOSE_LOG;
    final android.os.Handler mBackgroundHandler;
    private final com.android.server.devicepolicy.CertificateMonitor mCertificateMonitor;
    private com.android.server.devicepolicy.DevicePolicyConstants mConstants;
    private final com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyConstantsObserver mConstantsObserver;
    final android.content.Context mContext;
    private final com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController;
    final android.os.Handler mHandler;
    final boolean mHasFeature;
    final boolean mHasTelephonyFeature;
    final android.content.pm.IPackageManager mIPackageManager;
    final android.permission.IPermissionManager mIPermissionManager;
    private final com.android.internal.compat.IPlatformCompat mIPlatformCompat;
    final com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector;
    final boolean mIsWatch;
    final com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService;
    private final java.lang.Object mLockDoNoUseDirectly;
    private final com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private final com.android.internal.widget.LockSettingsInternal mLockSettingsInternal;
    private com.android.server.devicepolicy.NetworkLogger mNetworkLogger;
    private final com.android.server.devicepolicy.OverlayPackagesProvider mOverlayPackagesProvider;
    final com.android.server.devicepolicy.Owners mOwners;
    private final java.util.Set mPackagesToRemove;
    private final com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache;
    final android.content.BroadcastReceiver mReceiver;
    private final android.content.BroadcastReceiver mRemoteBugreportConsentReceiver;
    private final android.content.BroadcastReceiver mRemoteBugreportFinishedReceiver;
    private final java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive;
    private final java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted;
    private final java.lang.Runnable mRemoteBugreportTimeoutRunnable;
    private final com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor;
    private final com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver mSetupContentObserver;
    private final com.android.internal.util.StatLogger mStatLogger;
    private final com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache;
    final android.telephony.TelephonyManager mTelephonyManager;
    private final android.os.Binder mToken;
    final com.android.server.devicepolicy.TransferOwnershipMetadataManager mTransferOwnershipMetadataManager;
    final android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal;
    final android.util.SparseArray mUserData;
    final android.os.UserManager mUserManager;
    final android.os.UserManagerInternal mUserManagerInternal;

    static void <clinit>()
    {
        long l0, $l1, $l2, $l3, $l4;
        java.util.concurrent.TimeUnit $r0, $r42;
        java.lang.String[] $r1, $r2, $r4, $r40;
        java.util.List $r3, $r5;
        android.util.ArraySet $r6, $r9, $r12, $r23, $r28, $r32;
        java.util.Set $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r34, $r36, $r38;
        java.lang.Integer $r33, $r35, $r37, $r39;
        java.util.HashSet $r41;

        <com.android.server.devicepolicy.DevicePolicyManagerService: boolean VERBOSE_LOG> = 0;

        <com.android.server.devicepolicy.DevicePolicyManagerService: long USE_SET_LOCATION_ENABLED> = 117835097L;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int UNATTENDED_MANAGED_KIOSK_MS> = 30000;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TRANSFER_OWNERSHIP_PARAMETERS_XML> = "transfer-ownership-parameters.xml";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_TRANSFER_OWNERSHIP_BUNDLE> = "transfer-ownership-bundle";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_STATUS_BAR> = "statusbar";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_SECONDARY_LOCK_SCREEN> = "secondary-lock-screen";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_PROTECTED_PACKAGES> = "protected-packages";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_PASSWORD_VALIDITY> = "password-validity";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_PASSWORD_TOKEN_HANDLE> = "password-token";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_OWNER_INSTALLED_CA_CERT> = "owner-installed-ca-cert";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_LOCK_TASK_FEATURES> = "lock-task-features";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_LOCK_TASK_COMPONENTS> = "lock-task-component";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_LAST_SECURITY_LOG_RETRIEVAL> = "last-security-log-retrieval";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_LAST_NETWORK_LOG_RETRIEVAL> = "last-network-log-retrieval";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_LAST_BUG_REPORT_REQUEST> = "last-bug-report-request";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_INITIALIZATION_BUNDLE> = "initialization-bundle";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_CURRENT_INPUT_METHOD_SET> = "current-ime-set";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_APPS_SUSPENDED> = "apps-suspended";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_AFFILIATION_ID> = "affiliation-id";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_ADMIN_BROADCAST_PENDING> = "admin-broadcast-pending";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String TAG_ACCEPTED_CA_CERTIFICATES> = "accepted-ca-certificate";

        <com.android.server.devicepolicy.DevicePolicyManagerService: int STATUS_BAR_DISABLE_MASK> = 34013184;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int STATUS_BAR_DISABLE2_MASK> = 1;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int REQUEST_PROFILE_OFF_DEADLINE> = 5572;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int REQUEST_EXPIRE_PASSWORD> = 5571;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String PROPERTY_ORGANIZATION_OWNED> = "ro.organization_owned";

        <com.android.server.devicepolicy.DevicePolicyManagerService: int PROFILE_OFF_DEADLINE_WARNING> = 1;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int PROFILE_OFF_DEADLINE_REACHED> = 2;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int PROFILE_OFF_DEADLINE_DEFAULT> = 0;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int PROFILE_KEYGUARD_FEATURES_PROFILE_ONLY> = 8;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int PROFILE_KEYGUARD_FEATURES> = 440;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String NOT_CALLED_FROM_PARENT> = "notCalledFromParent";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String LOG_TAG_PROFILE_OWNER> = "profile-owner";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String LOG_TAG_DEVICE_OWNER> = "device-owner";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String LOG_TAG> = "DevicePolicyManager";

        <com.android.server.devicepolicy.DevicePolicyManagerService: boolean ENABLE_LOCK_GUARD> = 1;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String DO_NOT_ASK_CREDENTIALS_ON_BOOT_XML> = "do-not-ask-credentials-on-boot";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String DEVICE_POLICIES_XML> = "device_policies.xml";

        <com.android.server.devicepolicy.DevicePolicyManagerService: int DEVICE_ADMIN_DEACTIVATE_TIMEOUT> = 10000;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String CALLED_FROM_PARENT> = "calledFromParent";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_VALUE> = "value";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_SETUP_COMPLETE> = "setup-complete";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_PROVISIONING_STATE> = "provisioning-state";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_PERMISSION_PROVIDER> = "permission-provider";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_PERMISSION_POLICY> = "permission-policy";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_NAME> = "name";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_ID> = "id";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_DISABLED> = "disabled";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_DEVICE_PROVISIONING_CONFIG_APPLIED> = "device-provisioning-config-applied";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_DEVICE_PAIRED> = "device-paired";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_DELEGATED_CERT_INSTALLER> = "delegated-cert-installer";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_APPLICATION_RESTRICTIONS_MANAGER> = "application-restrictions-manager";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_ALIAS> = "alias";

        <com.android.server.devicepolicy.DevicePolicyManagerService: long ADMIN_APP_PASSWORD_COMPLEXITY> = 123562444L;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ACTION_TURN_PROFILE_ON_NOTIFICATION> = "com.android.server.ACTION_TURN_PROFILE_ON_NOTIFICATION";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ACTION_PROFILE_OFF_DEADLINE> = "com.android.server.ACTION_PROFILE_OFF_DEADLINE";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ACTION_EXPIRED_PASSWORD_NOTIFICATION> = "com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String AB_DEVICE_KEY> = "ro.build.ab_update";

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        <com.android.server.devicepolicy.DevicePolicyManagerService: long MS_PER_DAY> = l0;

        $l1 = 5L * l0;

        <com.android.server.devicepolicy.DevicePolicyManagerService: long EXPIRATION_GRACE_PERIOD_MS> = $l1;

        $l2 = 3L * l0;

        <com.android.server.devicepolicy.DevicePolicyManagerService: long MANAGED_PROFILE_MAXIMUM_TIME_OFF_THRESHOLD> = $l2;

        $l3 = l0 * 1L;

        <com.android.server.devicepolicy.DevicePolicyManagerService: long MANAGED_PROFILE_OFF_WARNING_PERIOD> = $l3;

        $r1 = newarray (java.lang.String)[11];

        $r1[0] = "delegation-cert-install";

        $r1[1] = "delegation-app-restrictions";

        $r1[2] = "delegation-block-uninstall";

        $r1[3] = "delegation-enable-system-app";

        $r1[4] = "delegation-keep-uninstalled-packages";

        $r1[5] = "delegation-package-access";

        $r1[6] = "delegation-permission-grant";

        $r1[7] = "delegation-install-existing-package";

        $r1[8] = "delegation-keep-uninstalled-packages";

        $r1[9] = "delegation-network-logging";

        $r1[10] = "delegation-cert-selection";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] DELEGATIONS> = $r1;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "delegation-network-logging";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List DEVICE_OWNER_DELEGATIONS> = $r3;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "delegation-network-logging";

        $r4[1] = "delegation-cert-selection";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List EXCLUSIVE_DELEGATIONS> = $r5;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST> = $r6;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>("default_input_method");

        $r7 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>("skip_first_use_hints");

        $r8 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>("install_non_market_apps");

        $r9 = new android.util.ArraySet;

        specialinvoke $r9.<android.util.ArraySet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST> = $r9;

        $r10 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

        $r11 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>("location_mode");

        $r12 = new android.util.ArraySet;

        specialinvoke $r12.<android.util.ArraySet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST> = $r12;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>("adb_enabled");

        $r13 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>("adb_wifi_enabled");

        $r14 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>("auto_time");

        $r15 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>("auto_time_zone");

        $r16 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>("data_roaming");

        $r17 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>("usb_mass_storage_enabled");

        $r18 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>("wifi_sleep_policy");

        $r19 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>("stay_on_while_plugged_in");

        $r20 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>("wifi_device_owner_configs_lockdown");

        $r21 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>("private_dns_mode");

        $r22 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>("private_dns_specifier");

        $r23 = new android.util.ArraySet;

        specialinvoke $r23.<android.util.ArraySet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_DEPRECATED> = $r23;

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>("bluetooth_on");

        $r24 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_DEPRECATED>;

        interfaceinvoke $r24.<java.util.Set: boolean add(java.lang.Object)>("development_settings_enabled");

        $r25 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_DEPRECATED>;

        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>("mode_ringer");

        $r26 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_DEPRECATED>;

        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>("network_preference");

        $r27 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_DEPRECATED>;

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>("wifi_on");

        $r28 = new android.util.ArraySet;

        specialinvoke $r28.<android.util.ArraySet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SYSTEM_SETTINGS_WHITELIST> = $r28;

        interfaceinvoke $r28.<java.util.Set: boolean add(java.lang.Object)>("screen_brightness");

        $r29 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SYSTEM_SETTINGS_WHITELIST>;

        interfaceinvoke $r29.<java.util.Set: boolean add(java.lang.Object)>("screen_brightness_float");

        $r30 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SYSTEM_SETTINGS_WHITELIST>;

        interfaceinvoke $r30.<java.util.Set: boolean add(java.lang.Object)>("screen_brightness_mode");

        $r31 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SYSTEM_SETTINGS_WHITELIST>;

        interfaceinvoke $r31.<java.util.Set: boolean add(java.lang.Object)>("screen_off_timeout");

        $r32 = new android.util.ArraySet;

        specialinvoke $r32.<android.util.ArraySet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DA_DISALLOWED_POLICIES> = $r32;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r32.<java.util.Set: boolean add(java.lang.Object)>($r33);

        $r34 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DA_DISALLOWED_POLICIES>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke $r34.<java.util.Set: boolean add(java.lang.Object)>($r35);

        $r36 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DA_DISALLOWED_POLICIES>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r36.<java.util.Set: boolean add(java.lang.Object)>($r37);

        $r38 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DA_DISALLOWED_POLICIES>;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>($r39);

        $r40 = newarray (java.lang.String)[2];

        $r40[0] = "no_add_managed_profile";

        $r40[1] = "no_remove_managed_profile";

        $r41 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r40);

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEPRECATED_USER_RESTRICTIONS> = $r41;

        $r42 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $l4 = virtualinvoke $r42.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        <com.android.server.devicepolicy.DevicePolicyManagerService: long MINIMUM_STRONG_AUTH_TIMEOUT_MS> = $l4;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        specialinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void <init>(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService$Injector)>($r2);

        return;
    }

    void <init>(com.android.server.devicepolicy.DevicePolicyManagerService$Injector)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyCacheImpl $r1;
        com.android.server.devicepolicy.DeviceStateCacheImpl $r2;
        android.util.ArraySet $r3;
        android.os.Binder $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5, $r6;
        com.android.internal.util.StatLogger $r7;
        java.lang.String[] $r8;
        java.lang.Object $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$1 $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$2 $r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$3 $r12;
        android.util.SparseArray $r13;
        com.android.server.devicepolicy.DevicePolicyManagerService$4 $r14;
        android.content.Context $r16, $r53, $r60, $r66, $r72, $r78, r81;
        android.os.Handler $r18, $r21, $r57, $r63, $r69, $r76, r92;
        android.os.Looper $r19, r82;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyConstantsObserver $r20;
        com.android.server.devicepolicy.DevicePolicyConstants $r22, $r51;
        com.android.server.devicepolicy.Owners $r24, r84;
        android.os.UserManager $r26, r85;
        android.os.UserManagerInternal $r28, $r79, r86;
        android.app.usage.UsageStatsManagerInternal $r30, r87;
        android.content.pm.IPackageManager $r32, r88;
        com.android.internal.compat.IPlatformCompat $r34, r89;
        android.permission.IPermissionManager $r36, r90;
        android.telephony.TelephonyManager $r38, r91;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r39, $r74;
        com.android.internal.widget.LockPatternUtils $r40;
        com.android.internal.widget.LockSettingsInternal $r41;
        com.android.server.devicepolicy.SecurityLogMonitor $r42;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r43, $r44, $r46, $r49, $r54, r80;
        boolean $z0, $z1, $z2, $z3;
        android.content.pm.PackageManager $r45, $r47;
        com.android.server.devicepolicy.CertificateMonitor $r48;
        com.android.server.devicepolicy.DeviceAdminServiceController $r50;
        com.android.server.devicepolicy.OverlayPackagesProvider $r52;
        com.android.server.devicepolicy.TransferOwnershipMetadataManager $r55;
        android.content.IntentFilter $r56, $r62, $r68;
        android.os.UserHandle $r58, $r64, $r70;
        android.content.BroadcastReceiver $r59, $r65, $r71;
        com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver $r75;
        com.android.server.devicepolicy.DevicePolicyManagerService$RestrictionsListener $r77;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r80 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        specialinvoke r0.<com.android.server.devicepolicy.BaseIDevicePolicyManager: void <init>()>();

        $r1 = new com.android.server.devicepolicy.DevicePolicyCacheImpl;

        specialinvoke $r1.<com.android.server.devicepolicy.DevicePolicyCacheImpl: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache> = $r1;

        $r2 = new com.android.server.devicepolicy.DeviceStateCacheImpl;

        specialinvoke $r2.<com.android.server.devicepolicy.DeviceStateCacheImpl: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache> = $r2;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set mPackagesToRemove> = $r3;

        $r4 = new android.os.Binder;

        specialinvoke $r4.<android.os.Binder: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Binder mToken> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted> = $r6;

        $r7 = new com.android.internal.util.StatLogger;

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "LockGuard.guard()";

        specialinvoke $r7.<com.android.internal.util.StatLogger: void <init>(java.lang.String[])>($r8);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.StatLogger mStatLogger> = $r7;

        $r9 = staticinvoke <com.android.server.LockGuard: java.lang.Object installNewLock(int,boolean)>(7, 1);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object mLockDoNoUseDirectly> = $r9;

        $r10 = new com.android.server.devicepolicy.DevicePolicyManagerService$1;

        specialinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$1: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Runnable mRemoteBugreportTimeoutRunnable> = $r10;

        $r11 = new com.android.server.devicepolicy.DevicePolicyManagerService$2;

        specialinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$2: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportFinishedReceiver> = $r11;

        $r12 = new com.android.server.devicepolicy.DevicePolicyManagerService$3;

        specialinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$3: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportConsentReceiver> = $r12;

        $r13 = new android.util.SparseArray;

        specialinvoke $r13.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData> = $r13;

        $r14 = new com.android.server.devicepolicy.DevicePolicyManagerService$4;

        specialinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver> = $r14;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector> = r80;

        r81 = r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.Context mContext>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r81);

        $r16 = (android.content.Context) r81;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext> = $r16;

        r82 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.Looper getMyLooper()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r82);

        $r18 = new android.os.Handler;

        $r19 = (android.os.Looper) r82;

        specialinvoke $r18.<android.os.Handler: void <init>(android.os.Looper)>($r19);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler> = $r18;

        $r20 = new com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyConstantsObserver;

        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        specialinvoke $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyConstantsObserver: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.Handler)>(r0, $r21);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyConstantsObserver mConstantsObserver> = $r20;

        virtualinvoke $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyConstantsObserver: void register()>();

        $r22 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants loadConstants()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants mConstants> = $r22;

        r84 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.server.devicepolicy.Owners newOwners()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r84);

        $r24 = (com.android.server.devicepolicy.Owners) r84;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners> = $r24;

        r85 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManager getUserManager()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r85);

        $r26 = (android.os.UserManager) r85;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager> = $r26;

        r86 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r86);

        $r28 = (android.os.UserManagerInternal) r86;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal> = $r28;

        r87 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.usage.UsageStatsManagerInternal getUsageStatsManagerInternal()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r87);

        $r30 = (android.app.usage.UsageStatsManagerInternal) r87;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal> = $r30;

        r88 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.IPackageManager getIPackageManager()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r88);

        $r32 = (android.content.pm.IPackageManager) r88;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager> = $r32;

        r89 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.internal.compat.IPlatformCompat getIPlatformCompat()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r89);

        $r34 = (com.android.internal.compat.IPlatformCompat) r89;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.compat.IPlatformCompat mIPlatformCompat> = $r34;

        r90 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.permission.IPermissionManager getIPermissionManager()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r90);

        $r36 = (android.permission.IPermissionManager) r90;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.permission.IPermissionManager mIPermissionManager> = $r36;

        r91 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.telephony.TelephonyManager getTelephonyManager()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r91);

        $r38 = (android.telephony.TelephonyManager) r91;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.telephony.TelephonyManager mTelephonyManager> = $r38;

        $r39 = new com.android.server.devicepolicy.DevicePolicyManagerService$LocalService;

        specialinvoke $r39.<com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService> = $r39;

        $r40 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.internal.widget.LockPatternUtils newLockPatternUtils()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r40;

        $r41 = virtualinvoke r80.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal> = $r41;

        $r42 = new com.android.server.devicepolicy.SecurityLogMonitor;

        specialinvoke $r42.<com.android.server.devicepolicy.SecurityLogMonitor: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor> = $r42;

        $r43 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r43.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean hasFeature()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature> = $z0;

        $r44 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r45 = virtualinvoke $r44.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r45.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch> = $z1;

        $r46 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r47 = virtualinvoke $r46.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $z2 = virtualinvoke $r47.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.telephony");

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature> = $z2;

        r92 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mBackgroundHandler> = r92;

        $r48 = new com.android.server.devicepolicy.CertificateMonitor;

        $r49 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        specialinvoke $r48.<com.android.server.devicepolicy.CertificateMonitor: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$Injector,android.os.Handler)>(r0, $r49, r92);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.CertificateMonitor mCertificateMonitor> = $r48;

        $r50 = new com.android.server.devicepolicy.DeviceAdminServiceController;

        $r51 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        specialinvoke $r50.<com.android.server.devicepolicy.DeviceAdminServiceController: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyConstants)>(r0, $r51);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController> = $r50;

        $r52 = new com.android.server.devicepolicy.OverlayPackagesProvider;

        $r53 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r52.<com.android.server.devicepolicy.OverlayPackagesProvider: void <init>(android.content.Context)>($r53);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.OverlayPackagesProvider mOverlayPackagesProvider> = $r52;

        $r54 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r55 = virtualinvoke $r54.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.server.devicepolicy.TransferOwnershipMetadataManager newTransferOwnershipMetadataManager()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.TransferOwnershipMetadataManager mTransferOwnershipMetadataManager> = $r55;

        $z3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z3 != 0 goto label1;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver mSetupContentObserver> = null;

        return;

     label1:
        $r56 = new android.content.IntentFilter;

        specialinvoke $r56.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.ACTION_TURN_PROFILE_ON_NOTIFICATION");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.ACTION_PROFILE_OFF_DEADLINE");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTED");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STOPPED");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_UNLOCKED");

        virtualinvoke $r56.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");

        virtualinvoke $r56.<android.content.IntentFilter: void setPriority(int)>(1000);

        $r60 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r59 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver>;

        $r58 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r57 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r60.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r59, $r58, $r56, null, $r57);

        $r62 = new android.content.IntentFilter;

        specialinvoke $r62.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r62.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke $r62.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r62.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE");

        virtualinvoke $r62.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke $r62.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r66 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r65 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver>;

        $r64 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r63 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r66.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r65, $r64, $r62, null, $r63);

        $r68 = new android.content.IntentFilter;

        specialinvoke $r68.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r68.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_ADDED");

        virtualinvoke $r68.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.TIME_SET");

        virtualinvoke $r68.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DATE_CHANGED");

        $r72 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r71 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver>;

        $r70 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r69 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r72.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r71, $r70, $r68, null, $r69);

        $r74 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/app/admin/DevicePolicyManagerInternal;", $r74);

        $r75 = new com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver;

        $r76 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        specialinvoke $r75.<com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.Handler)>(r0, $r76);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver mSetupContentObserver> = $r75;

        $r79 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        $r77 = new com.android.server.devicepolicy.DevicePolicyManagerService$RestrictionsListener;

        $r78 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r77.<com.android.server.devicepolicy.DevicePolicyManagerService$RestrictionsListener: void <init>(android.content.Context)>($r78);

        virtualinvoke $r79.<android.os.UserManagerInternal: void addUserRestrictionsListener(android.os.UserManagerInternal$UserRestrictionsListener)>($r77);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void loadOwners()>();

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$000(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        return $r1;
    }

    static void access$100(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void onBugreportFailed()>();

        return;
    }

    static void access$1000(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybePauseDeviceWideLoggingLocked()>();

        return;
    }

    static boolean access$1100(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        return $z0;
    }

    static void access$1200(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void discardDeviceWideLogsLocked()>();

        return;
    }

    static void access$1300(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeResumeDeviceWideLoggingLocked()>();

        return;
    }

    static void access$1400(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeSendAdminEnabledBroadcastLocked(int)>(i0);

        return;
    }

    static void access$1500(com.android.server.devicepolicy.DevicePolicyManagerService, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void handlePackagesChanged(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$1600(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePersonalAppsSuspensionOnUserStart(int)>(i0);

        return;
    }

    static boolean access$1700(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        return $z0;
    }

    static int access$1800(com.android.server.devicepolicy.DevicePolicyManagerService, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int updatePersonalAppsSuspension(int,boolean)>(i0, z0);

        return $i1;
    }

    static void access$1900(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void triggerPolicyComplianceCheck(int)>(i0);

        return;
    }

    static void access$200(com.android.server.devicepolicy.DevicePolicyManagerService, android.content.Intent)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void onBugreportFinished(android.content.Intent)>(r1);

        return;
    }

    static void access$2000(com.android.server.devicepolicy.DevicePolicyManagerService, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void handleNewPackageInstalled(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$2100(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearWipeProfileNotification()>();

        return;
    }

    static void access$2200(com.android.server.devicepolicy.DevicePolicyManagerService, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateSystemUpdateFreezePeriodsRecord(boolean)>(z0);

        return;
    }

    static java.lang.String access$2300(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getManagedProvisioningPackage(android.content.Context)>(r0);

        return $r1;
    }

    static java.util.Set access$2400()
    {
        java.util.Set $r0;

        $r0 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEPRECATED_USER_RESTRICTIONS>;

        return $r0;
    }

    static void access$2500(com.android.server.devicepolicy.DevicePolicyManagerService, android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeAdminArtifacts(android.content.ComponentName,int)>(r1, i0);

        return;
    }

    static void access$2600(com.android.server.devicepolicy.DevicePolicyManagerService, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removePackageIfRequired(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$2800(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnershipSystemPropertyLocked()>();

        return;
    }

    static void access$2900(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        return;
    }

    static void access$300(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void onBugreportSharingAccepted()>();

        return;
    }

    static com.android.server.devicepolicy.DevicePolicyConstants access$3002(com.android.server.devicepolicy.DevicePolicyManagerService, com.android.server.devicepolicy.DevicePolicyConstants)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyConstants r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: com.android.server.devicepolicy.DevicePolicyConstants;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants mConstants> = r1;

        return r1;
    }

    static com.android.server.devicepolicy.DevicePolicyConstants access$3100(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyConstants $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants loadConstants()>();

        return $r1;
    }

    static com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin access$3200(com.android.server.devicepolicy.DevicePolicyManagerService, android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(r1, i0, i1);

        return $r2;
    }

    static android.content.Intent access$3300(com.android.server.devicepolicy.DevicePolicyManagerService, android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        android.content.Intent $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Intent createShowAdminSupportIntent(android.content.ComponentName,int)>(r1, i0);

        return $r2;
    }

    static boolean access$3400(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i0);

        return $z0;
    }

    static com.android.server.devicepolicy.DevicePolicyCacheImpl access$3500(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyCacheImpl $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache>;

        return $r1;
    }

    static com.android.server.devicepolicy.DeviceStateCacheImpl access$3600(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DeviceStateCacheImpl $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache>;

        return $r1;
    }

    static void access$3700(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(int)>(i0);

        return;
    }

    static void access$3800(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordQualityCacheForUserGroup(int)>(i0);

        return;
    }

    static void access$3900(com.android.server.devicepolicy.DevicePolicyManagerService, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void startUninstallIntent(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$400(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void onBugreportSharingDeclined()>();

        return;
    }

    static void access$4100(com.android.server.devicepolicy.DevicePolicyManagerService, java.lang.String, android.os.IBinder)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        android.os.IBinder r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.IBinder;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendPrivateKeyAliasResponse(java.lang.String,android.os.IBinder)>(r1, r2);

        return;
    }

    static android.content.BroadcastReceiver access$500(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.BroadcastReceiver $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportConsentReceiver>;

        return $r1;
    }

    static boolean access$600(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabledInternalLocked()>();

        return $z0;
    }

    static void access$700(com.android.server.devicepolicy.DevicePolicyManagerService, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setNetworkLoggingActiveInternal(boolean)>(z0);

        return;
    }

    static java.lang.String access$800(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerRemoteBugreportUri()>();

        return $r1;
    }

    static void access$900(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void handlePasswordExpirationNotification(int)>(i0);

        return;
    }

    private void applyManagedProfileRestrictionIfDeviceOwnerLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.UserHandle r1;
        com.android.server.devicepolicy.Owners $r2;
        android.os.UserManager $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if i0 != -10000 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void logIfVerbose(java.lang.String)>("No DO found, skipping application of restriction.");

        return;

     label1:
        r1 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r3.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_add_managed_profile", r1);

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r4.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_add_managed_profile", 1, r1);

     label2:
        return;
    }

    private boolean areAllUsersAffiliatedWithDeviceLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7ZxUYCbMxQm_r_Ar3BngHwnkazI $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7ZxUYCbMxQm_r_Ar3BngHwnkazI;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7ZxUYCbMxQm_r_Ar3BngHwnkazI: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean canStartSecurityLogging()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>();

        if $z0 != 0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean areAllUsersAffiliatedWithDeviceLocked()>();

        if $z1 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z2 = 0;

        goto label5;

     label4:
        z2 = 1;

     label5:
        exitmonitor r1;

     label6:
        return z2;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private boolean canUserBindToDeviceOwnerLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy.Owners $r1, $r2, $r3, $r4, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r1.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 == 0 goto label4;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if i0 != $i1 goto label1;

        goto label4;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>(i0);

        if $z1 == 0 goto label3;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: java.lang.String getDeviceOwnerPackageName()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.Owners: java.lang.String getProfileOwnerPackage(int)>(i0);

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r5, $r7);

        if $z2 != 0 goto label2;

        goto label3;

     label2:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        return $z3;

     label3:
        return 0;

     label4:
        return 0;
    }

    private boolean canUserUseLockTaskLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1, $z2;
        com.android.server.devicepolicy.Owners $r1;
        android.content.ComponentName $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r1.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if $r2 != null goto label3;

        return 0;

     label3:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    private void checkActiveAdminPrecondition(android.content.ComponentName, android.app.admin.DeviceAdminInfo, com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.lang.StringBuilder $r3, $r10, $r17;
        java.lang.IllegalArgumentException $r6, $r13, $r20, $r23;
        java.lang.String $r7, $r14, $r21;
        android.content.pm.ActivityInfo $r8, $r15;
        android.content.pm.ApplicationInfo $r9, $r16;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r22;
        android.app.admin.DeviceAdminInfo r24;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r24 := @parameter1: android.app.admin.DeviceAdminInfo;

        r2 := @parameter2: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        if r24 == null goto label4;

        $r8 = virtualinvoke r24.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r9 = $r8.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r9.<android.content.pm.ApplicationInfo: boolean isInternal()>();

        if $z0 == 0 goto label3;

        $r15 = virtualinvoke r24.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r16 = $r15.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z1 = virtualinvoke $r16.<android.content.pm.ApplicationInfo: boolean isInstantApp()>();

        if $z1 != 0 goto label2;

        $r22 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        $z2 = virtualinvoke $r22.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z2 != 0 goto label1;

        return;

     label1:
        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trying to set an admin which is being removed");

        throw $r23;

     label2:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instant apps cannot be device admins: ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label3:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only apps in internal storage can be active admin: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad admin: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private int checkDeviceOwnerProvisioningPreCondition(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        int i0, i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkDeviceOwnerProvisioningPreConditionLocked(android.content.ComponentName,int,boolean,boolean)>(null, i0, 0, 1);

        exitmonitor r1;

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private int checkDeviceOwnerProvisioningPreConditionLocked(android.content.ComponentName, int, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.android.server.devicepolicy.Owners $r2, $r3;
        android.os.UserHandle $r4;
        android.os.UserManager $r5, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z2 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z2 == 0 goto label01;

        return 1;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z3 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>(i0);

        if $z3 == 0 goto label02;

        return 2;

     label02:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r4 = new android.os.UserHandle;

        specialinvoke $r4.<android.os.UserHandle: void <init>(int)>(i0);

        $z4 = virtualinvoke $r5.<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)>($r4);

        if $z4 != 0 goto label03;

        return 3;

     label03:
        $z5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch>;

        if $z5 == 0 goto label04;

        $z11 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasPaired(int)>(0);

        if $z11 == 0 goto label04;

        return 8;

     label04:
        if z0 == 0 goto label08;

        $z8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch>;

        if $z8 != 0 goto label05;

        $z10 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(0);

        if $z10 == 0 goto label07;

     label05:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z9 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean userManagerIsSplitSystemUser()>();

        if $z9 != 0 goto label07;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $i1 = virtualinvoke $r8.<android.os.UserManager: int getUserCount()>();

        if $i1 <= 1 goto label06;

        return 5;

     label06:
        if z1 == 0 goto label07;

        return 6;

     label07:
        return 0;

     label08:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z6 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean userManagerIsSplitSystemUser()>();

        if $z6 != 0 goto label10;

        if i0 == 0 goto label09;

        return 7;

     label09:
        $z7 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(0);

        if $z7 == 0 goto label10;

        return 4;

     label10:
        return 0;
    }

    private int checkManagedProfileProvisioningPreCondition(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        long l1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7;
        android.content.ComponentName $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r9, $r13, $r17, $r21, $r22, $r25;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        android.os.UserManager $r4, $r5, $r7, $r8;
        android.content.pm.UserInfo $r6;
        java.lang.Object[] $r10, $r14, $r18;
        java.lang.Boolean $r11, $r15;
        java.lang.String $r12, $r16, $r20, r26;
        java.lang.Integer $r19;
        java.lang.Throwable $r23, $r24;
        android.os.UserHandle r27;
        java.lang.Object r28;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r26 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasFeatureManagedUsers()>();

        if $z1 != 0 goto label01;

        return 9;

     label01:
        if i0 != 0 goto label02;

        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z5 = virtualinvoke $r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean userManagerIsSplitSystemUser()>();

        if $z5 == 0 goto label02;

        return 14;

     label02:
        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if $r1 == null goto label03;

        return 2;

     label03:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label04:
        r27 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        r28 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r28;

     label05:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        if $r3 == null goto label07;

     label06:
        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        exitmonitor r28;

     label09:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        z0 = virtualinvoke $r4.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_add_managed_profile", r27);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r6 = virtualinvoke $r5.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z2 = virtualinvoke $r6.<android.content.pm.UserInfo: boolean isProfile()>();

        if $z2 == 0 goto label11;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r18[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Calling user %d is a profile, cannot add another.", $r18);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r20);

     label10:
        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r21.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 11;

     label11:
        if z6 == 0 goto label13;

        if z0 != 0 goto label13;

     label12:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Has a device owner but no restriction on adding a profile.");

     label13:
        if z0 == 0 goto label16;

     label14:
        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = r27;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6);

        $r14[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Adding a profile is restricted: User %s Has device owner? %b", $r14);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r16);

     label15:
        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r17.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 11;

     label16:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z3 = virtualinvoke $r7.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_remove_managed_profile", r27);

        if $z3 != 0 goto label18;

     label17:
        z7 = 1;

        goto label19;

     label18:
        z7 = 0;

     label19:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z4 = virtualinvoke $r8.<android.os.UserManager: boolean canAddMoreManagedProfiles(int,boolean)>(i0, z7);

        if $z4 != 0 goto label21;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z7);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot add more profiles: Can remove current? %b", $r10);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

     label20:
        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 11;

     label21:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label22:
        $r23 := @caughtexception;

     label23:
        exitmonitor r28;

     label24:
        throw $r23;

     label25:
        $r24 := @caughtexception;

        $r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r25.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r24;

        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label25;
    }

    private int checkManagedShareableDeviceProvisioningPreCondition(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean userManagerIsSplitSystemUser()>();

        if $z0 != 0 goto label1;

        return 12;

     label1:
        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkDeviceOwnerProvisioningPreCondition(int)>(i0);

        return $i1;
    }

    private int checkManagedUserProvisioningPreCondition(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasFeatureManagedUsers()>();

        if $z0 != 0 goto label1;

        return 9;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z1 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean userManagerIsSplitSystemUser()>();

        if $z1 != 0 goto label2;

        return 12;

     label2:
        if i0 != 0 goto label3;

        return 10;

     label3:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(i0);

        if $z2 == 0 goto label4;

        return 4;

     label4:
        $z3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch>;

        if $z3 == 0 goto label5;

        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasPaired(int)>(0);

        if $z4 == 0 goto label5;

        return 8;

     label5:
        return 0;
    }

    private boolean checkPackagesInPermittedListOrSystem(java.util.List, java.util.List, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1, r12;
        long l0;
        java.lang.String r2;
        int i1, $i2, i4, i5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4, $r8, $r10;
        boolean $z1, z2, z3, z4;
        java.lang.Object $r5;
        android.content.pm.IPackageManager $r6;
        android.content.pm.ApplicationInfo $r7;
        java.lang.Throwable $r9;
        android.os.RemoteException $r11;
        android.content.pm.UserInfo r13;
        java.util.Iterator r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        i4 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label01:
        r13 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getUserInfo(int)>(i4);

     label02:
        i5 = i4;

     label03:
        $z1 = virtualinvoke r13.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label04;

        i5 = r13.<android.content.pm.UserInfo: int profileGroupId>;

     label04:
        r14 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label05:
        z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

     label06:
        z3 = 1;

        if z2 == 0 goto label19;

     label07:
        $r5 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r5;

     label08:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r7 = interfaceinvoke $r6.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r2, 8192, i5);

        i1 = $r7.<android.content.pm.ApplicationInfo: int flags>;

     label09:
        $i2 = i1 & 1;

        if $i2 == 0 goto label10;

        goto label11;

     label10:
        z3 = 0;

     label11:
        goto label15;

     label12:
        $r11 := @caughtexception;

     label13:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Can\'t talk to package managed", $r11);

     label14:
        z3 = 0;

     label15:
        if z3 != 0 goto label18;

     label16:
        z4 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r2);

     label17:
        if z4 != 0 goto label18;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return 0;

     label18:
        goto label05;

     label19:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return 1;

     label20:
        $r9 := @caughtexception;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch android.os.RemoteException from label08 to label09 with label12;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
    }

    private int checkProvisioningPreConditionSkipPermission(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r7, r8;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        byte b6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 13;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        if r1 == null goto label12;

        b6 = -1;

        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case -920528692: goto label07;
            case -514404415: goto label06;
            case -340845101: goto label05;
            case 631897778: goto label04;
            case 1340354933: goto label03;
            default: goto label02;
        };

     label02:
        goto label08;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.PROVISION_FINANCED_DEVICE");

        if $z1 == 0 goto label02;

        b6 = 2;

        goto label08;

     label04:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.PROVISION_MANAGED_SHAREABLE_DEVICE");

        if $z2 == 0 goto label02;

        b6 = 4;

        goto label08;

     label05:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.PROVISION_MANAGED_PROFILE");

        if $z3 == 0 goto label02;

        b6 = 0;

        goto label08;

     label06:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.PROVISION_MANAGED_USER");

        if $z4 == 0 goto label02;

        b6 = 3;

        goto label08;

     label07:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.PROVISION_MANAGED_DEVICE");

        if $z5 == 0 goto label02;

        b6 = 1;

     label08:
        if b6 == 0 goto label11;

        if b6 == 1 goto label10;

        if b6 == 2 goto label10;

        if b6 == 3 goto label09;

        if b6 != 4 goto label12;

        $i5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkManagedShareableDeviceProvisioningPreCondition(int)>(i0);

        return $i5;

     label09:
        $i4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkManagedUserProvisioningPreCondition(int)>(i0);

        return $i4;

     label10:
        $i3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkDeviceOwnerProvisioningPreCondition(int)>(i0);

        return $i3;

     label11:
        $i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkManagedProfileProvisioningPreCondition(java.lang.String,int)>(r8, i0);

        return $i2;

     label12:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown provisioning action ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void checkUserProvisioningStateTransition(int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.StringBuilder $r7;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 != 4 goto label3;

        if i1 != 0 goto label3;

        return;

     label1:
        if i1 != 3 goto label3;

        return;

     label2:
        if i1 == 0 goto label3;

        return;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot move to user provisioning state [");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] from state [");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private void cleanUpOldUsers()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.util.ArraySet r1, $r6;
        java.util.List r2;
        com.android.server.devicepolicy.Owners $r3;
        android.util.SparseArray $r4, $r12;
        int $i0, $i1, $i2, $i3, i4;
        android.os.UserManager $r5;
        boolean $z2, $z3;
        java.lang.Object $r7, $r9, r15;
        java.lang.Integer $r8, $r11, $r13;
        android.content.pm.UserInfo $r10;
        java.lang.Throwable $r14;
        java.util.Set r16;
        java.util.Iterator r18, r19;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r15;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r16 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: java.util.Set getProfileOwnerKeys()>();

        r1 = new android.util.ArraySet;

        specialinvoke r1.<android.util.ArraySet: void <init>()>();

     label02:
        i4 = 0;

     label03:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i4 >= $i0 goto label05;

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $i3 = virtualinvoke $r12.<android.util.SparseArray: int keyAt(int)>(i4);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label04:
        i4 = i4 + 1;

        goto label03;

     label05:
        exitmonitor r15;

     label06:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r5.<android.os.UserManager: java.util.List getUsers()>();

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        interfaceinvoke $r6.<java.util.Set: boolean addAll(java.util.Collection)>(r16);

        interfaceinvoke $r6.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        r18 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r9 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.content.pm.UserInfo) $r9;

        $i2 = $r10.<android.content.pm.UserInfo: int id>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r11);

        goto label07;

     label08:
        r19 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r7 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeUserData(int)>($i1);

        goto label09;

     label10:
        return;

     label11:
        $r14 := @caughtexception;

     label12:
        exitmonitor r15;

     label13:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void clearApplicationRestrictions(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$yG0U24nBabuXep_vu0wvlNyljlY $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mBackgroundHandler>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$yG0U24nBabuXep_vu0wvlNyljlY;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$yG0U24nBabuXep_vu0wvlNyljlY: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void clearDeviceOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DeviceAdminServiceController $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2, r13;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r8;
        android.content.pm.PackageManagerInternal $r4;
        com.android.server.devicepolicy.Owners $r5, $r6;
        android.os.UserHandle $r7;
        com.android.server.devicepolicy.SecurityLogMonitor $r9;
        java.util.Set $r10;
        boolean $z0;
        android.os.UserManagerInternal $r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        virtualinvoke $r1.<com.android.server.devicepolicy.DeviceAdminServiceController: void stopServiceForOwner(int,java.lang.String)>(i0, "clear-device-owner");

        if r12 == null goto label1;

        r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = 0;

        r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions> = null;

        $r10 = r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers> = 0;

        r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled> = 0;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        $z0 = r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers>;

        virtualinvoke $r11.<android.os.UserManagerInternal: void setForceEphemeralUsers(boolean)>($z0);

     label1:
        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mCurrentInputMethodSet> = 0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        r13.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastSecurityLogRetrievalTime> = -1L;

        r13.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastBugReportRequestTime> = -1L;

        r13.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastNetworkLogsRetrievalTime> = -1L;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearUserPoliciesLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearOverrideApnUnchecked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearApplicationRestrictions(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        virtualinvoke $r4.<android.content.pm.PackageManagerInternal: void clearBlockUninstallForUser(int)>(i0);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r5.<com.android.server.devicepolicy.Owners: void clearDeviceOwner()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r6.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateDeviceOwnerLocked()>();

        $r7 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwnerUserRestrictionLocked(android.os.UserHandle)>($r7);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void securityLogSetLoggingEnabledProperty(boolean)>(0);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        virtualinvoke $r9.<com.android.server.devicepolicy.SecurityLogMonitor: void stop()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setNetworkLoggingActiveInternal(boolean)>(0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void deleteTransferOwnershipBundleLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void toggleBackupServiceActive(int,boolean)>(0, 1);

        return;
    }

    private void clearDeviceOwnerUserRestrictionLocked(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle r1;
        android.os.UserManager $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.os.UserHandle;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_add_user", r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r5.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_add_user", 0, r1);

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z1 = virtualinvoke $r3.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_add_managed_profile", r1);

        if $z1 == 0 goto label2;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r4.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_add_managed_profile", 0, r1);

     label2:
        return;
    }

    private void clearOverrideApnUnchecked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1;
        boolean $z0;
        int $i0, $i1, i2;
        java.lang.Object $r2;
        android.telephony.data.ApnSetting $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setOverrideApnsEnabledUnchecked(boolean)>(0);

        r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getOverrideApnsUnchecked()>();

        i2 = 0;

     label2:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (android.telephony.data.ApnSetting) $r2;

        $i1 = virtualinvoke $r3.<android.telephony.data.ApnSetting: int getId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeOverrideApnUnchecked(int)>($i1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    private void clearUserPoliciesLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.util.ArrayMap $r1;
        java.util.Set $r2;
        java.util.List $r3, $r4, $r5, $r6;
        android.permission.IPermissionManager $r7;
        android.os.RemoteException $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPermissionPolicy> = 0;

        $r1 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        virtualinvoke $r1.<android.util.ArrayMap: void clear()>();

        r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled> = 0;

        r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mSecondaryLockscreenEnabled> = 0;

        r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState> = 0;

        $r2 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r3 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r4 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateLockTaskPackagesLocked(java.util.List,int)>($r4, i0);

        r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures> = 0;

        $r5 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r6 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateUserControlDisabledPackagesLocked(java.util.List)>($r6);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label1:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.permission.IPermissionManager mIPermissionManager>;

        interfaceinvoke $r7.<android.permission.IPermissionManager: void updatePermissionFlagsForAllApps(int,int,int)>(4, 0, i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void clearWipeProfileNotification()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.app.NotificationManager $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r2.<android.app.NotificationManager: void cancel(int)>(1001);

        return;
    }

    private android.content.Intent createCrossUserServiceIntent(android.content.Intent, java.lang.String, int) throws android.os.RemoteException, java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.pm.ResolveInfo r1;
        android.content.Context $r2;
        android.content.pm.IPackageManager $r3;
        android.content.ContentResolver $r4;
        java.lang.String $r5, $r12, $r15, $r20, $r26, $r27, r30;
        java.lang.StringBuilder $r6, $r16;
        android.content.pm.ServiceInfo $r13, $r14, $r21, $r22, $r25;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r19, $r28;
        android.content.ComponentName $r23;
        android.content.Intent r29;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r29 := @parameter0: android.content.Intent;

        r30 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = virtualinvoke r29.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

        r1 = interfaceinvoke $r3.<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>(r29, $r5, 0, i0);

        if r1 == null goto label5;

        $r13 = r1.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        if $r13 != null goto label1;

        goto label5;

     label1:
        $r14 = r1.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r15 = $r14.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $z0 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label4;

        $r21 = r1.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $z1 = $r21.<android.content.pm.ServiceInfo: boolean exported>;

        if $z1 == 0 goto label3;

        $r27 = "android.permission.BIND_DEVICE_ADMIN";

        $r25 = r1.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r26 = $r25.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z2 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        $r28 = new java.lang.SecurityException;

        specialinvoke $r28.<java.lang.SecurityException: void <init>(java.lang.String)>("Service must be protected by BIND_DEVICE_ADMIN permission");

        throw $r28;

     label3:
        $r22 = r1.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r23 = virtualinvoke $r22.<android.content.pm.ServiceInfo: android.content.ComponentName getComponentName()>();

        virtualinvoke r29.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r23);

        return r29;

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only allow to bind service in ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r19 = new java.lang.SecurityException;

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fail to look up the service: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or user ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not running");

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

        return null;
    }

    private android.content.Intent createShowAdminSupportIntent(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        android.content.Intent $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.settings.SHOW_ADMIN_SUPPORT_DETAILS");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.USER_ID", i0);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.DEVICE_ADMIN", r1);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        return $r3;
    }

    private void deleteTransferOwnershipMetadataFileLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.TransferOwnershipMetadataManager $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.TransferOwnershipMetadataManager mTransferOwnershipMetadataManager>;

        virtualinvoke $r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager: void deleteMetadataFile()>();

        return;
    }

    private boolean deviceHasKeyguard()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.Iterator r1;
        android.content.pm.UserInfo r2;
        android.os.UserManager $r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        int $i0;
        com.android.internal.widget.LockPatternUtils $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.UserInfo) $r5;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $i0 = r2.<android.content.pm.UserInfo: int id>;

        $z1 = virtualinvoke $r6.<com.android.internal.widget.LockPatternUtils: boolean isSecure(int)>($i0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private void discardDeviceWideLogsLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.NetworkLogger r1;
        com.android.server.devicepolicy.SecurityLogMonitor $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        virtualinvoke $r2.<com.android.server.devicepolicy.SecurityLogMonitor: void discardLogs()>();

        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.devicepolicy.NetworkLogger: void discardLogs()>();

     label1:
        return;
    }

    private boolean doesPackageMatchUid(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r7, $r12, r14;
        int i0, i1, $i2, $i3;
        android.content.pm.IPackageManager $r2;
        java.lang.Object[] $r3, $r6;
        java.lang.Integer $r4, $r5;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;
        android.content.pm.ApplicationInfo r13;
        java.lang.SecurityException r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r13 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r1, 0, i1);

     label2:
        if r13 != null goto label5;

     label3:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("appInfo could not be found for package %s", $r6);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r7);

     label4:
        return 0;

     label5:
        $i2 = r13.<android.content.pm.ApplicationInfo: int uid>;

        if i0 != $i2 goto label7;

     label6:
        return 1;

     label7:
        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = r1;

        $i3 = r13.<android.content.pm.ApplicationInfo: int uid>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[2] = $r5;

        r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Package %s (uid=%d) does not match provided uid %d", $r3);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", r14);

        r15 = new java.lang.SecurityException;

        specialinvoke r15.<java.lang.SecurityException: void <init>(java.lang.String)>(r14);

        throw r15;

     label8:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception caught obtaining appInfo for package ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r12, $r8);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label7 to label8 with label8;
    }

    private void dumpDevicePolicyData(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.internal.util.IndentingPrintWriter r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        android.util.SparseArray $r3, $r4;
        java.lang.StringBuilder $r5, $r18;
        java.lang.String $r11, $r24, $r31;
        java.util.ArrayList $r12, $r13, $r22, $r26;
        boolean $z0, $z1;
        java.util.List $r15;
        java.lang.Object $r27;
        android.app.admin.DeviceAdminInfo $r29;
        android.content.ComponentName $r30;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r36;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i7 = 0;

     label1:
        if i7 >= i0 goto label6;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $i2 = virtualinvoke $r4.<android.util.SparseArray: int keyAt(int)>(i7);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabled Device Admins (User ");

        $i3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", provisioningState: ");

        $i4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):");

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r11);

        $r12 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        i8 = 0;

     label2:
        if i8 >= i1 goto label4;

        $r26 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r27 = virtualinvoke $r26.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r36 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r27;

        if r36 == null goto label3;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r29 = r36.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r30 = virtualinvoke $r29.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r31 = virtualinvoke $r30.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r31);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r36.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        $r13 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        $z0 = virtualinvoke $r13.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing Device Admins (User ");

        $i6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r22 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r24);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label5:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mPasswordOwner=");

        $i5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mUserControlDisabledPackages=");

        $r15 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r15);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mAppsSuspended=");

        $z1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        i7 = i7 + 1;

        goto label1;

     label6:
        return;
    }

    private void enableIfNecessary(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.content.pm.IPackageManager $r1, $r3;
        android.content.pm.ApplicationInfo $r2;
        android.os.RemoteException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r2 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r5, 32768, i0);

        $i1 = $r2.<android.content.pm.ApplicationInfo: int enabledSetting>;

        if $i1 != 4 goto label2;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r3.<android.content.pm.IPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>(r5, 0, 1, i0, "DevicePolicyManager");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void enforceAcrossUsersPermissions()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r3;
        android.content.Context $r4, $r5, $r6, $r7;
        boolean $z0;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingPid()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z0 != 0 goto label5;

        if i0 != 0 goto label1;

        goto label5;

     label1:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i2 = staticinvoke <android.content.PermissionChecker: int checkPermissionForPreflight(android.content.Context,java.lang.String,int,int,java.lang.String)>($r5, "android.permission.INTERACT_ACROSS_PROFILES", i1, i0, r1);

        if $i2 != 0 goto label2;

        return;

     label2:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r6.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $i3 != 0 goto label3;

        return;

     label3:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r7.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i4 != 0 goto label4;

        return;

     label4:
        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Calling user does not have INTERACT_ACROSS_PROFILES orINTERACT_ACROSS_USERS or INTERACT_ACROSS_USERS_FULL permissions");

        throw $r8;

     label5:
        return;
    }

    private void enforceCallerSystemUserHandle()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        int $i0, $i1;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        if $i1 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller has to be in user 0");

        throw $r2;
    }

    private void enforceCanCallLockTaskLocked(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r7;
        java.lang.String $r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -1);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canUserUseLockTaskLocked(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed to use lock task");

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private void enforceCanManageDeviceAdmin()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEVICE_ADMINS", null);

        return;
    }

    private void enforceCanManageProfileAndDeviceOwners()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS", null);

        return;
    }

    private void enforceCanManageScope(android.content.ComponentName, java.lang.String, int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScopeOrCheckPermission(android.content.ComponentName,java.lang.String,int,java.lang.String,java.lang.String)>(r1, r2, i0, r3, null);

        return;
    }

    private void enforceCanManageScopeOrCheckPermission(android.content.ComponentName, java.lang.String, int, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        java.lang.String r1, r2, $r12, r17;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r11;
        android.content.Context $r13;
        java.lang.Throwable $r15;
        android.content.ComponentName r16;
        java.lang.Object r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        r17 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        if r16 == null goto label6;

        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r18;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r16, i0);

        exitmonitor r18;

     label2:
        goto label8;

     label3:
        $r15 := @caughtexception;

     label4:
        exitmonitor r18;

     label5:
        throw $r15;

     label6:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerDelegate(java.lang.String,int,java.lang.String)>(r17, $i1, r1);

        if $z0 == 0 goto label7;

        return;

     label7:
        if r2 == null goto label9;

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r13.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>(r2, null);

     label8:
        return;

     label9:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller with uid ");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i2 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a delegate of scope ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void enforceCanSetDeviceOwnerLocked(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        boolean z0, $z1, $z2;
        java.lang.IllegalStateException $r1, $r2, $r3, $r4, $r5, $r9, $r11, $r12, $r16;
        java.lang.StringBuilder $r6, $r13;
        java.lang.String $r10, $r17;
        android.content.ComponentName r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r18 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z1 != 0 goto label01;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageProfileAndDeviceOwners()>();

     label01:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkDeviceOwnerProvisioningPreConditionLocked(android.content.ComponentName,int,boolean,boolean)>(r18, i0, $z2, z0);

        tableswitch(i1)
        {
            case 0: goto label11;
            case 1: goto label10;
            case 2: goto label09;
            case 3: goto label08;
            case 4: goto label07;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label04;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected @ProvisioningPreCondition ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label03:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not allowed to set the device owner because this device has already paired");

        throw $r1;

     label04:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("User is not system user");

        throw $r2;

     label05:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not allowed to set the device owner because there are already some accounts on the device");

        throw $r3;

     label06:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not allowed to set the device owner because there are already several users on the device");

        throw $r4;

     label07:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set the device owner if the device is already set-up");

        throw $r5;

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User not running: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label09:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to set the device owner, but the user already has a profile owner.");

        throw $r11;

     label10:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to set the device owner, but device owner is already set.");

        throw $r12;

     label11:
        return;
    }

    private void enforceCanSetProfileOwnerLocked(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.StringBuilder $r1, $r15;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r19, r25;
        java.lang.IllegalStateException $r6, $r8, $r10, $r13, $r18, $r20, $r22;
        com.android.server.devicepolicy.Owners $r7, $r9, $r21;
        android.content.Context $r11;
        android.content.res.Resources $r12;
        android.content.ComponentName $r14, r23;
        android.content.pm.UserInfo r24;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r23 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r24 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getUserInfo(int)>(i0);

        if r24 == null goto label14;

        $z1 = virtualinvoke r24.<android.content.pm.UserInfo: boolean isGuest()>();

        if $z1 != 0 goto label13;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z2 = virtualinvoke $r7.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>(i0);

        if $z2 != 0 goto label12;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z3 = virtualinvoke $r9.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z3 == 0 goto label02;

        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r21.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if $i1 == i0 goto label01;

        goto label02;

     label01:
        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to set the profile owner, but the user already has a device owner.");

        throw $r22;

     label02:
        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z4 == 0 goto label06;

        $z10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch>;

        if $z10 != 0 goto label03;

        $z11 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(i0);

        if $z11 == 0 goto label04;

     label03:
        if z0 != 0 goto label05;

     label04:
        return;

     label05:
        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not allowed to set the profile owner because there are already some accounts on the profile");

        throw $r20;

     label06:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageProfileAndDeviceOwners()>();

        $z5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch>;

        if $z5 != 0 goto label07;

        $z9 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(i0);

        if $z9 == 0 goto label10;

     label07:
        $z6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z6 == 0 goto label11;

        $z7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch>;

        if $z7 != 0 goto label10;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>();

        r25 = virtualinvoke $r12.<android.content.res.Resources: java.lang.String getString(int)>(17039870);

        if r25 == null goto label09;

        $r14 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r25);

        $z8 = virtualinvoke r23.<android.content.ComponentName: boolean equals(java.lang.Object)>($r14);

        if $z8 == 0 goto label08;

        goto label10;

     label08:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set non-default profile owner post-setup ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r18 = new java.lang.IllegalStateException;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label09:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to set profile owner post-setup, nodefault supervisor profile owner defined");

        throw $r13;

     label10:
        return;

     label11:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set the profile owner on a user which is already set-up");

        throw $r10;

     label12:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to set the profile owner, but profile owner is already set.");

        throw $r8;

     label13:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set a profile owner on a guest");

        throw $r6;

     label14:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set profile owner for invalid userId: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void enforceCanSetSecondaryLockscreenEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r12;
        java.lang.SecurityException $r6, $r10, $r16;
        java.lang.String $r7, $r17, r19;
        android.content.Context $r8;
        android.content.res.Resources $r9;
        android.content.ComponentName $r11, r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r18 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r18);

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 != 0 goto label3;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        r19 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int)>(17039870);

        if r19 == null goto label2;

        $r11 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r19);

        $z1 = virtualinvoke r18.<android.content.ComponentName: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not the default supervision component");

        $r16 = new java.lang.SecurityException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Unable to set secondary lockscreen setting, no default supervision component defined");

        throw $r10;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed to call setSecondaryLockscreenEnabled");

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void enforceCrossUsersPermission(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemUserOrPermissionIfCrossUser(int,java.lang.String)>(i0, "android.permission.INTERACT_ACROSS_USERS");

        return;
    }

    private void enforceDeviceOwner(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r4, -2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void enforceDeviceOwnerOrManageUsers()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(null, -2, $i0);

        if $r4 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        exitmonitor r1;

     label4:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r4, -3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void enforceFullCrossUsersPermission(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemUserOrPermissionIfCrossUser(int,java.lang.String)>(i0, "android.permission.INTERACT_ACROSS_USERS_FULL");

        return;
    }

    private void enforceHandlesCheckPolicyComplianceIntent(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MkzIDnEuzIwEVF9G_WSS4VfSiIE $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MkzIDnEuzIwEVF9G_WSS4VfSiIE;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MkzIDnEuzIwEVF9G_WSS4VfSiIE: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int)>(r0, r1, i0);

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r2);

        return;
    }

    private void enforceIndividualAttestationSupportedIfRequested(int[])
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int[] r1;
        int i0, $i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.pm.PackageManager $r3;
        boolean $z0;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: int[];

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $i1 = r1[i2];

        if $i1 != 4 goto label3;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.device_unique_attestation");

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Device Individual attestation is not supported on this device.");

        throw $r4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private void enforceManageUsers()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        boolean $z0;
        android.content.Context $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z0 != 0 goto label1;

        if i0 == 0 goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

     label1:
        return;
    }

    private void enforceManagedProfile(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1, $r5;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("You can not %s outside a managed profile, userId = %d", $r3);

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    private void enforceNetworkStackOrProfileOrDeviceOwner(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        android.content.Context $r2;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MAINLINE_NETWORK_STACK");

        if $i0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        return;
    }

    private void enforceNotManagedProfile(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1, $r5;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("You can not %s for a managed profile, userId = %d", $r3);

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    private void enforcePackageIsSystemPackage(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.pm.IPackageManager $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemApp(android.content.pm.IPackageManager,java.lang.String,int)>($r1, r4, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        z0 = 0;

     label4:
        if z0 == 0 goto label5;

        return;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provided package is not a system package");

        throw $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private void enforceProfileOrDeviceOwner(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r4, -1);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.Object[] $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Provided admin %s is either not a profile owner or not on a corporate-owned device.", $r3);

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    private void enforceProfileOwnerOnUser0OrProfileOwnerOrganizationOwned()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        int $i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3, r8;
        java.lang.SecurityException $r5;
        android.os.UserHandle $r6;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(null, -3, $i0);

        if $r3 == null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        r8 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(null, -1, $i1);

     label04:
        if r8 == null goto label07;

     label05:
        $r6 = virtualinvoke r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $z0 = virtualinvoke $r6.<android.os.UserHandle: boolean isSystem()>();

        if $z0 == 0 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        exitmonitor r1;

     label08:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("No active admin found");

        throw $r5;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void enforceProfileOwnerOrFullCrossUsersPermission(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        if i0 != $i1 goto label8;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i2 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(null, -1, $i2);

        if $r5 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

     label8:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemUserOrPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void enforceProfileOwnerOrSystemUser()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        boolean $z0;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(null, -1, $i0);

        if $r4 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        exitmonitor r1;

     label4:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Only profile owner, device owner and system may call this method.");

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void enforceShell(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r8;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        if i0 == 2000 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-shell user attempted to call ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        return;
    }

    private void enforceSystemCaller(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only the system can ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void enforceSystemUserOrPermission(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r9;
        android.content.Context r2;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        int $i0;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        if $i0 == 0 goto label1;

        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must be system or have ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" permission");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>(r1, $r9);

     label1:
        return;
    }

    private void enforceSystemUserOrPermissionIfCrossUser(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        if i0 < 0 goto label2;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        if i0 != $i1 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemUserOrPermission(java.lang.String)>(r7);

        return;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid userId ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void enforceUserUnlocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.UserManager $r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r1.<android.os.UserManager: boolean isUserUnlocked(int)>(i0);

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "User must be running and unlocked");

        return;
    }

    private void enforceUserUnlocked(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>($i1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>(i0);

     label2:
        return;
    }

    private void ensureAllUsersAffiliated() throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.SecurityException r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean areAllUsersAffiliatedWithDeviceLocked()>();

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r3 = new java.lang.SecurityException;

        specialinvoke r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Not all users are affiliated.");

        throw r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void ensureCallerIdentityMatchesIfNotSystem(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, i2, i3, $i4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5, $r6, $r7;
        java.lang.SecurityException $r8;
        java.lang.String r9, r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingPid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        if $i4 < 10000 goto label2;

        if i2 != i1 goto label1;

        if i3 != i0 goto label1;

        goto label2;

     label1:
        $r3 = newarray (java.lang.Object)[5];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r3[1] = $r5;

        $r3[2] = r9;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[3] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[4] = $r7;

        r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Calling uid %d, pid %d cannot check device identifier access for package %s (uid=%d, pid=%d)", $r3);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", r10);

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>(r10);

        throw $r8;

     label2:
        return;
    }

    private void ensureCallerPackage(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        android.content.pm.IPackageManager r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r3;
        android.content.pm.ApplicationInfo $r4;
        android.os.RemoteException $r5;
        java.lang.String r6;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        if r6 != null goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("omit package name");

        goto label9;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

     label2:
        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

     label3:
        z0 = 0;

     label4:
        $r4 = interfaceinvoke r1.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r6, 0, i1);

        $i2 = $r4.<android.content.pm.ApplicationInfo: int uid>;

        if $i2 != i0 goto label6;

     label5:
        z0 = 1;

     label6:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Unmatching package name");

     label7:
        goto label9;

     label8:
        $r5 := @caughtexception;

     label9:
        return;

        catch android.os.RemoteException from label2 to label3 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    private void ensureDeviceOwnerAndAllUsersAffiliated(android.content.ComponentName) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r4, -2);

        exitmonitor r1;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureAllUsersAffiliated()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void ensureDeviceOwnerUserStarted()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.Owners $r2, $r3;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        android.app.IActivityManager $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        java.lang.Object r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r8;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 != 0 goto label03;

        exitmonitor r8;

     label02:
        return;

     label03:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        exitmonitor r8;

     label04:
        if i0 == 0 goto label08;

     label05:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        interfaceinvoke $r5.<android.app.IActivityManager: boolean startUserInBackground(int)>(i0);

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Exception starting user", $r7);

     label08:
        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r8;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void ensureMinimumQuality(int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vyqxdRxB1hyTnrJiMqYRbp5JigI $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vyqxdRxB1hyTnrJiMqYRbp5JigI;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vyqxdRxB1hyTnrJiMqYRbp5JigI: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,int,java.lang.String)>(r0, r1, i1, i0, r2);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        return;
    }

    private void ensureUnknownSourcesRestrictionForProfileOwnerLocked(int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        boolean z0;
        android.os.Bundle $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsSecureGetIntForUser(java.lang.String,int,int)>("unknown_sources_default_reversed", 0, i0);

        if $i1 == 0 goto label2;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle ensureUserRestrictions()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("no_install_unknown_sources", 1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveUserRestrictionsLocked(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsSecurePutIntForUser(java.lang.String,int,int)>("unknown_sources_default_reversed", 0, i0);

     label2:
        return;
    }

    private android.content.ComponentName findAdminComponentWithPackageLocked(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        int i0, i2, i3, i4, i5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;
        android.app.admin.DeviceAdminInfo $r7, $r9;
        boolean $z0;
        android.content.ComponentName r10, r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i2);

        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        r10 = null;

        i3 = 0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r6;

        r11 = r10;

        i5 = i3;

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label3;

        if i3 != 0 goto label2;

        $r9 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r10 = virtualinvoke $r9.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

     label2:
        i5 = i3 + 1;

        r11 = r10;

     label3:
        i4 = i4 + 1;

        r10 = r11;

        i3 = i5;

        goto label1;

     label4:
        if i3 <= 1 goto label5;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Multiple DA found; assume the first one is DO.");

     label5:
        return r10;
    }

    private void findOwnerComponentIfNecessaryLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r11;
        com.android.server.devicepolicy.Owners $r2, $r3, $r6, $r8, $r9, $r10, r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r4, $r5, $r7;
        int $i0, $i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r11 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        $r4 = virtualinvoke r11.<android.content.ComponentName: java.lang.String getClassName()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 != 0 goto label2;

        return;

     label2:
        $r5 = virtualinvoke r11.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i0 = virtualinvoke $r6.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName findAdminComponentWithPackageLocked(java.lang.String,int)>($r5, $i0);

        if r1 != null goto label3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Device-owner isn\'t registered as device-admin");

        goto label4;

     label3:
        r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r7 = virtualinvoke r12.<com.android.server.devicepolicy.Owners: java.lang.String getDeviceOwnerName()>();

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r8.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z2 = virtualinvoke $r9.<com.android.server.devicepolicy.Owners: boolean getDeviceOwnerUserRestrictionsNeedsMigration()>();

        $z3 = $z2 ^ 1;

        virtualinvoke r12.<com.android.server.devicepolicy.Owners: void setDeviceOwnerWithRestrictionsMigrated(android.content.ComponentName,java.lang.String,int,boolean)>(r1, $r7, $i1, $z3);

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r10.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

     label4:
        return;
    }

    private void forceWipeDeviceNoLock(boolean, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.os.storage.StorageManager $r5;
        java.lang.Throwable $r6, $r8;
        java.lang.Object[] $r7, $r9;
        java.lang.String r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        r10 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wtfIfInLock()>();

        if z0 == 0 goto label2;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("storage");

        $r5 = (android.os.storage.StorageManager) $r4;

        virtualinvoke $r5.<android.os.storage.StorageManager: void wipeAdoptableDisks()>();

     label2:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void recoverySystemRebootWipeUserData(boolean,java.lang.String,boolean,boolean)>(0, r10, 1, z1);

     label3:
        goto label8;

     label4:
        $r6 := @caughtexception;

        goto label9;

     label5:
        $r8 := @caughtexception;

     label6:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed requesting data wipe", $r8);

     label7:
        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210023, $r9);

     label8:
        return;

     label9:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210023, $r7);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.lang.SecurityException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    private void forceWipeUser(int, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean z0, $z2, z5, z6, z7;
        android.app.IActivityManager r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.pm.UserInfo $r3;
        android.os.UserManagerInternal $r4;
        java.lang.Object[] $r5, $r10, $r12;
        java.lang.String $r8, r13;
        android.os.RemoteException $r9;
        java.lang.Throwable $r11;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r13 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z5 = 0;

        z6 = 0;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

     label02:
        z5 = 0;

        z6 = 0;

     label03:
        $r3 = interfaceinvoke r1.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        $i1 = $r3.<android.content.pm.UserInfo: int id>;

        if $i1 != i0 goto label06;

     label04:
        z5 = 0;

        z6 = 0;

     label05:
        interfaceinvoke r1.<android.app.IActivityManager: boolean switchUser(int)>(0);

     label06:
        z5 = 0;

        z6 = 0;

     label07:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        z7 = virtualinvoke $r4.<android.os.UserManagerInternal: boolean removeUserEvenWhenDisallowed(int)>(i0);

     label08:
        if z7 != 0 goto label19;

        z5 = z7;

        z6 = z7;

     label09:
        r14 = new java.lang.StringBuilder;

     label10:
        z5 = z7;

        z6 = z7;

     label11:
        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

     label12:
        z5 = z7;

        z6 = z7;

     label13:
        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove user ");

     label14:
        z5 = z7;

        z6 = z7;

     label15:
        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label16:
        z5 = z7;

        z6 = z7;

     label17:
        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r8);

     label18:
        goto label23;

     label19:
        z5 = z7;

        z6 = z7;

     label20:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z2 == 0 goto label23;

     label21:
        if z0 != 0 goto label23;

        z5 = z7;

        z6 = z7;

     label22:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendWipeProfileNotification(java.lang.String)>(r13);

     label23:
        if z7 != 0 goto label27;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210023, $r5);

        goto label27;

     label24:
        $r11 := @caughtexception;

        if z5 != 0 goto label25;

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210023, $r12);

     label25:
        throw $r11;

     label26:
        $r9 := @caughtexception;

        if z6 != 0 goto label27;

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210023, $r10);

     label27:
        return;

        catch android.os.RemoteException from label01 to label02 with label26;
        catch java.lang.Throwable from label01 to label02 with label24;
        catch android.os.RemoteException from label03 to label04 with label26;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch android.os.RemoteException from label05 to label06 with label26;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch android.os.RemoteException from label07 to label08 with label26;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch android.os.RemoteException from label09 to label10 with label26;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch android.os.RemoteException from label11 to label12 with label26;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch android.os.RemoteException from label13 to label14 with label26;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch android.os.RemoteException from label15 to label16 with label26;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch android.os.RemoteException from label17 to label18 with label26;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch android.os.RemoteException from label20 to label21 with label26;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch android.os.RemoteException from label22 to label23 with label26;
        catch java.lang.Throwable from label22 to label23 with label24;
    }

    private android.view.accessibility.AccessibilityManager getAccessibilityManagerForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.view.accessibility.AccessibilityManager $r1;
        android.content.Context $r2;
        android.os.IBinder r3;
        android.view.accessibility.IAccessibilityManager r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        r4 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>(r3);

     label2:
        $r1 = new android.view.accessibility.AccessibilityManager;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r1.<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>($r2, r4, i0);

        return $r1;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForUidLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r12;
        java.lang.SecurityException $r10, $r17;
        java.lang.String $r11, $r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r19;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i1);

        $r3 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r19 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r4;

        if r19 == null goto label2;

        $i2 = virtualinvoke r19.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        if $i2 != i0 goto label1;

        return r19;

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not owned by uid ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = new java.lang.SecurityException;

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for UID ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = new java.lang.SecurityException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    private java.util.Set getActiveAdminPackagesLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        java.lang.String r2;
        java.util.ArrayList $r3, $r4;
        int $i0, i1, i2;
        java.lang.Object $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r6;
        android.app.admin.DeviceAdminInfo $r7;
        android.util.ArraySet $r8, r9, r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        r9 = null;

        $r3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $r7 = $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r2 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        r10 = r9;

        if r9 != null goto label2;

        $r8 = new android.util.ArraySet;

        specialinvoke $r8.<android.util.ArraySet: void <init>()>();

        r10 = $r8;

     label2:
        interfaceinvoke r10.<java.util.Set: boolean add(java.lang.Object)>(r2);

        i2 = i2 + -1;

        r9 = r10;

        goto label1;

     label3:
        return r9;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, i2, $i3, $i4;
        java.util.ArrayList $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2, $r4;
        android.util.ArrayMap $r3;
        java.lang.StringBuilder $r5, $r10;
        java.lang.SecurityException $r8, $r15;
        java.lang.String $r9, $r16;
        android.content.ComponentName r17;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r19, r23;
        java.util.Iterator r22;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r17 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i2);

        if r17 == null goto label4;

        $r3 = r18.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r17);

        r19 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r4;

        if r19 == null goto label3;

        $i4 = virtualinvoke r19.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        if $i4 != i1 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActiveAdminWithPolicyForUserLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,int)>(r19, i0, i2);

        if $z2 == 0 goto label1;

        return r19;

     label1:
        goto label7;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not owned by uid ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = new java.lang.SecurityException;

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.SecurityException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        $r1 = r18.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        r22 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r2 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r2;

        $i3 = virtualinvoke r23.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        if $i3 != i1 goto label6;

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActiveAdminWithPolicyForUserLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,int)>(r23, i0, i2);

        if $z1 == 0 goto label6;

        return r23;

     label6:
        goto label5;

     label7:
        return null;
    }

    private java.util.List getActiveAdminsForAffectedUserLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$PCclwKytv7A925cDWslIbe1Q7Qc' $r1;
        java.util.List $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.util.ArrayList $r4;
        java.util.function.Predicate r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i0);

        $r4 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        return $r4;

     label1:
        $r1 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$PCclwKytv7A925cDWslIbe1Q7Qc: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$PCclwKytv7A925cDWslIbe1Q7Qc' INSTANCE>;

        r5 = (java.util.function.Predicate) $r1;

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForUserAndItsManagedProfilesLocked(int,java.util.function.Predicate)>(i0, r5);

        return $r2;
    }

    private java.util.List getActiveAdminsForLockscreenPoliciesLocked(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean z0, $z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MvCZq_N8hoaiWKavde0PKNRNSUM $r1;
        java.util.List $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i0);

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i0);

        $r4 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        return $r4;

     label1:
        $i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MvCZq_N8hoaiWKavde0PKNRNSUM;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MvCZq_N8hoaiWKavde0PKNRNSUM: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForUserAndItsManagedProfilesLocked(int,java.util.function.Predicate)>($i1, $r1);

        return $r2;
    }

    private java.util.List getActiveAdminsForUserAndItsManagedProfilesLocked(int, java.util.function.Predicate)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.util.function.Predicate r1;
        java.util.ArrayList $r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$mDI3uIriMcjdhtgIeymmGEZxwoo $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.function.Predicate;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$mDI3uIriMcjdhtgIeymmGEZxwoo;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$mDI3uIriMcjdhtgIeymmGEZxwoo: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,java.util.ArrayList,java.util.function.Predicate)>(r0, i0, $r3, r1);

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r4);

        return $r3;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1;
        java.util.List r1;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2, r5, r6;
        java.lang.Object $r3;
        android.content.pm.UserInfo $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i5 := @parameter0: int;

        z0 := @parameter1: boolean;

        i6 = 0;

        r5 = null;

        r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i5, z0);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i7 = 0;

     label1:
        if i7 >= i0 goto label5;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r3;

        $i2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if $i2 != 0 goto label2;

        i8 = i6;

        r6 = r5;

        goto label4;

     label2:
        i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserIdToWipeForFailedPasswords(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r2);

        if i6 == 0 goto label3;

        $i3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if i6 > $i3 goto label3;

        i8 = i6;

        r6 = r5;

        $i4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if i6 != $i4 goto label4;

        i8 = i6;

        r6 = r5;

        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getUserInfo(int)>(i1);

        $z1 = virtualinvoke $r4.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z1 == 0 goto label4;

     label3:
        i8 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        r6 = r2;

     label4:
        i7 = i7 + 1;

        i6 = i8;

        r5 = r6;

        goto label1;

     label5:
        return r5;
    }

    private java.lang.String getApplicationLabel(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r5;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8OqjeHp9AIbdyNZwOogfEG_Hjn8 $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8OqjeHp9AIbdyNZwOogfEG_Hjn8;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8OqjeHp9AIbdyNZwOogfEG_Hjn8: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,java.lang.String)>(r0, i0, r1);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    private boolean getCameraDisabled(android.content.ComponentName, int, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z3, $z4, z5, z6, $z7;
        java.lang.Object r1, $r3;
        java.util.List $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4, $r5, r9, r10;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        int i0;
        java.util.Iterator r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z5 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z1 != 0 goto label01;

        return 0;

     label01:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if z0 == 0 goto label05;

     label02:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r7, 8, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>($r5);

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

        goto label25;

     label05:
        if r7 == null goto label11;

     label06:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r7, i0, z0);

     label07:
        z6 = 0;

        if r9 == null goto label09;

     label08:
        z6 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

     label09:
        exitmonitor r1;

     label10:
        return z6;

     label11:
        if z5 == 0 goto label16;

     label12:
        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label13:
        if r10 == null goto label16;

     label14:
        $z4 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z4 == 0 goto label16;

        exitmonitor r1;

     label15:
        return 1;

     label16:
        if z0 == 0 goto label19;

     label17:
        i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

     label18:
        goto label19;

     label19:
        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForAffectedUserLocked(int)>(i0);

        r11 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z7 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label23;

        $r3 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r3;

        $z3 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z3 == 0 goto label22;

        exitmonitor r1;

     label21:
        return 1;

     label22:
        goto label20;

     label23:
        exitmonitor r1;

     label24:
        return 0;

     label25:
        exitmonitor r1;

     label26:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
        catch java.lang.Throwable from label17 to label18 with label04;
        catch java.lang.Throwable from label19 to label20 with label04;
        catch java.lang.Throwable from label20 to label21 with label04;
        catch java.lang.Throwable from label23 to label24 with label04;
        catch java.lang.Throwable from label25 to label26 with label04;
    }

    private int getCredentialOwner(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3PMRGJU_0j94dGmQcTSGdeHm9es $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3PMRGJU_0j94dGmQcTSGdeHm9es;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3PMRGJU_0j94dGmQcTSGdeHm9es: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,boolean)>(r0, i0, z0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    private java.util.List getCrossProfilePackagesForAdmins(java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1, $r6;
        java.util.ArrayList $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r4;

        $r6 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r3;
    }

    private java.util.List getDelegatePackagesInternalLocked(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.util.ArrayList $r4;
        android.util.ArrayMap $r5, $r6, $r9;
        int $i0, i1, i2;
        java.lang.Object $r7, $r10;
        java.util.List $r8;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $i0 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label3;

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r8 = (java.util.List) $r7;

        $z0 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r9 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r11 = (java.lang.String) $r10;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r11);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r4;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOrProfileOwnerAdminLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1, r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

        r2 = r1;

        if r1 != null goto label1;

        r2 = r1;

        $i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerUserId()>();

        if $i1 != i0 goto label1;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label1:
        return r2;
    }

    private java.lang.String getDeviceOwnerRemoteBugreportUri()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r4 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: java.lang.String getDeviceOwnerRemoteBugreportUri()>();

        exitmonitor r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private int getEncryptionStatus()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsFileBasedEncryptionEnabled()>();

        if $z0 == 0 goto label1;

        return 5;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsNonDefaultBlockEncrypted()>();

        if $z1 == 0 goto label2;

        return 3;

     label2:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z2 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsEncrypted()>();

        if $z2 == 0 goto label3;

        return 4;

     label3:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z3 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsEncryptable()>();

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private java.lang.String getEncryptionStatusName(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        return "unknown";

     label1:
        return "per-user";

     label2:
        return "block default key";

     label3:
        return "block";

     label4:
        return "activating";

     label5:
        return "inactive";

     label6:
        return "unsupported";
    }

    private int getFrpManagementAgentUid()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.PersistentDataBlockManagerInternal r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlockManagerInternal()>();

        if r1 == null goto label1;

        i0 = interfaceinvoke r1.<com.android.server.PersistentDataBlockManagerInternal: int getAllowedUid()>();

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    private int getFrpManagementAgentUidOrThrow()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getFrpManagementAgentUid()>();

        if i0 == -1 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The persistent data block service is not supported on this device");

        throw $r1;
    }

    private static java.lang.String[] getIntentFilterActions(android.content.IntentFilter)
    {
        android.content.IntentFilter r0;
        int i0, i1;
        java.lang.String[] r1;
        java.lang.String $r2;

        r0 := @parameter0: android.content.IntentFilter;

        if r0 != null goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<android.content.IntentFilter: int countActions()>();

        r1 = newarray (java.lang.String)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r2 = virtualinvoke r0.<android.content.IntentFilter: java.lang.String getAction(int)>(i1);

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    private java.util.List getKeepUninstalledPackagesLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.util.List r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        if r1 == null goto label1;

        r2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List keepUninstalledPackages>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    private static java.lang.String getManagedProvisioningPackage(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        java.lang.String $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(17039912);

        return $r2;
    }

    private long getMaximumTimeToLockPolicyFromAdmins(java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        boolean $z0;
        java.lang.Object $r2;
        long $l0, $l2, l4, l5;
        byte $b1, $b3;
        java.util.List r3;
        java.util.Iterator r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: java.util.List;

        l4 = 9223372036854775807L;

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r2;

        l5 = l4;

        $l0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        l5 = l4;

        $l2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b3 = $l2 cmp l4;

        if $b3 >= 0 goto label2;

        l5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

     label2:
        l4 = l5;

        goto label1;

     label3:
        return l4;
    }

    private java.util.Set getMeteredDisabledPackagesLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.util.ArraySet $r2;
        java.util.List $r3, $r4;
        android.content.ComponentName r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getOwnerComponent(int)>(i0);

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        if r5 == null goto label1;

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r5, i0);

        if r6 == null goto label1;

        $r3 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages>;

        if $r3 == null goto label1;

        $r4 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages>;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label1:
        return $r2;
    }

    private long getMinimumStrongAuthTimeoutMs()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r2;
        boolean $z0;
        long $l0, $l1, $l2, $l3, $l4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean isBuildDebuggable()>();

        if $z0 != 0 goto label1;

        $l4 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MINIMUM_STRONG_AUTH_TIMEOUT_MS>;

        return $l4;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $l0 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MINIMUM_STRONG_AUTH_TIMEOUT_MS>;

        $l1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long systemPropertiesGetLong(java.lang.String,long)>("persist.sys.min_str_auth_timeo", $l0);

        $l2 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MINIMUM_STRONG_AUTH_TIMEOUT_MS>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l2);

        return $l3;
    }

    private int getOrganizationOwnedProfileUserId()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.pm.UserInfo[] r1;
        int i0, $i1, $i2, i3;
        android.content.pm.UserInfo r2;
        android.os.UserManagerInternal $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        r1 = virtualinvoke $r3.<android.os.UserManagerInternal: android.content.pm.UserInfo[] getUserInfos()>();

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r2 = r1[i3];

        $z0 = virtualinvoke r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label2;

        $i1 = r2.<android.content.pm.UserInfo: int id>;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>($i1);

        if $z1 == 0 goto label2;

        $i2 = r2.<android.content.pm.UserInfo: int id>;

        return $i2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -10000;
    }

    private java.util.List getOverrideApnsUnchecked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.telephony.TelephonyManager r1;
        android.content.Context $r2;
        java.lang.Object $r3, $r7;
        java.util.List $r4, $r8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$LMd_wuKjXCvh7kVUW2yE0PFNDMw $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r1 = (android.telephony.TelephonyManager) $r3;

        if r1 == null goto label1;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$LMd_wuKjXCvh7kVUW2yE0PFNDMw;

        specialinvoke $r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$LMd_wuKjXCvh7kVUW2yE0PFNDMw: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.telephony.TelephonyManager)>(r0, r1);

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r5);

        $r8 = (java.util.List) $r7;

        return $r8;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "TelephonyManager is null when trying to get override apns");

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;
    }

    private android.content.ComponentName getOwnerComponent(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r2, $r3, $r4, $r5;
        boolean $z0;
        java.lang.Throwable $r6;
        android.content.ComponentName r7, r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if $i1 != i0 goto label3;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r7 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        exitmonitor r1;

     label2:
        return r7;

     label3:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>(i0);

        if $z0 == 0 goto label5;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r8 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i0);

        exitmonitor r1;

     label4:
        return r8;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private android.content.ComponentName getOwnerComponent(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        boolean $z0, $z1;
        com.android.server.devicepolicy.Owners $r2, $r4;
        android.content.ComponentName $r3, $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwnerPackage(java.lang.String,int)>(r1, i0);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        return $r5;

     label1:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerPackage(java.lang.String,int)>(r1, i0);

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i0);

        return $r3;

     label2:
        return null;
    }

    private java.lang.String getOwnerPackageNameForUserLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy.Owners $r1, $r2, $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r1.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if $i1 != i0 goto label1;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: java.lang.String getDeviceOwnerPackageName()>();

        goto label2;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r4 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: java.lang.String getProfileOwnerPackage(int)>(i0);

     label2:
        return r4;
    }

    private long getPasswordExpirationLocked(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        java.util.List r1;
        int i0, i6, i9;
        java.lang.Object $r2;
        byte $b1, $b3, $b5;
        long $l2, $l4, l7, l8, l10;
        android.content.ComponentName r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4, r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: android.content.ComponentName;

        i6 := @parameter1: int;

        z0 := @parameter2: boolean;

        l7 = 0L;

        if r3 == null goto label3;

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r3, i6, z0);

        if r4 == null goto label1;

        l8 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        goto label2;

     label1:
        l8 = 0L;

     label2:
        return l8;

     label3:
        r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i6, z0);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i9 = 0;

     label4:
        if i9 >= i0 goto label7;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i9);

        r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r2;

        $b1 = l7 cmp 0L;

        if $b1 == 0 goto label5;

        l10 = l7;

        $l2 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label6;

        l10 = l7;

        $l4 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b5 = l7 cmp $l4;

        if $b5 <= 0 goto label6;

     label5:
        l10 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

     label6:
        i9 = i9 + 1;

        l7 = l10;

        goto label4;

     label7:
        return l7;
    }

    private android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0, $z1, $z3;
        java.lang.Object r1, $r6;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        java.util.List $r4;
        android.app.admin.PasswordMetrics $r5, $r9, $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r7;
        android.app.admin.PasswordPolicy $r8;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        $r10 = new android.app.admin.PasswordMetrics;

        specialinvoke $r10.<android.app.admin.PasswordMetrics: void <init>(int)>(-1);

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i0, z0);

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r6;

        $r8 = $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r9 = virtualinvoke $r8.<android.app.admin.PasswordPolicy: android.app.admin.PasswordMetrics getMinMetrics()>();

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label4:
        goto label3;

     label5:
        exitmonitor r1;

     label6:
        $r5 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics merge(java.util.List)>($r3);

        return $r5;

     label7:
        $r11 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private java.io.File getPolicyFileDirectory(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r3;
        java.io.File $r2, r5;
        java.lang.String $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = new java.io.File;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String getDevicePolicyFilePathForSystemUser()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r4);

        r5 = $r2;

        goto label2;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r5 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.io.File environmentGetUserSystemDirectory(int)>(i0);

     label2:
        return r5;
    }

    private android.os.PowerManagerInternal getPowerManagerInternal()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.os.PowerManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.PowerManagerInternal getPowerManagerInternal()>();

        return $r2;
    }

    private java.util.List getProfileOwnerAdminsForCurrentProfileGroup()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.util.ArrayList r2;
        android.os.UserManager $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Throwable $r4;
        int[] r5;
        android.content.ComponentName r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r5 = virtualinvoke $r3.<android.os.UserManager: int[] getProfileIdsWithDisabled(int)>($i0);

     label02:
        i4 = 0;

     label03:
        $i1 = lengthof r5;

        if i4 >= $i1 goto label09;

        $i2 = r5[i4];

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>($i2);

     label04:
        if r6 == null goto label08;

     label05:
        $i3 = r5[i4];

        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r6, $i3);

     label06:
        if r7 == null goto label08;

     label07:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

     label08:
        i4 = i4 + 1;

        goto label03;

     label09:
        exitmonitor r1;

     label10:
        return r2;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private int getSecurityLoggingEnabledUser()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r3;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return -1;

     label3:
        exitmonitor r1;

     label4:
        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationOwnedProfileUserId()>();

        return $i0;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private int getStrictestPasswordRequirement(android.content.ComponentName, int, boolean, java.util.function.Function, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2;
        java.util.function.Function r1;
        int i0, i1, $i2, i3, i5, i6, i7, i8;
        java.lang.Object r2, $r3, $r4, $r5;
        java.lang.Integer $r6, r12;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9, r11;
        java.util.List r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i3 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.util.function.Function;

        i0 := @parameter4: int;

        z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z1 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i3);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

        if r8 == null goto label07;

     label02:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r8, i3, z0);

     label03:
        i5 = 0;

        if r9 == null goto label05;

     label04:
        $r5 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r9);

        $r6 = (java.lang.Integer) $r5;

        i5 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label05:
        exitmonitor r2;

     label06:
        return i5;

     label07:
        i6 = 0;

     label08:
        r10 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i3, z0);

        i1 = interfaceinvoke r10.<java.util.List: int size()>();

     label09:
        i7 = 0;

     label10:
        if i7 >= i1 goto label17;

     label11:
        $r3 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i7);

        r11 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r3;

        $z2 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLimitPasswordAllowed(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int)>(r11, i0);

        if $z2 != 0 goto label13;

     label12:
        i8 = i6;

        goto label16;

     label13:
        $r4 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r11);

        r12 = (java.lang.Integer) $r4;

     label14:
        i8 = i6;

     label15:
        $i2 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        if $i2 <= i6 goto label16;

        i8 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

     label16:
        i7 = i7 + 1;

        i6 = i8;

        goto label10;

     label17:
        exitmonitor r2;

     label18:
        return i6;

     label19:
        $r7 := @caughtexception;

     label20:
        exitmonitor r2;

     label21:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private int getTargetSdk(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        int i1, i2;
        android.content.pm.ApplicationInfo r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r3, 0, i1);

     label2:
        if r4 != null goto label3;

        i2 = 0;

        goto label4;

     label3:
        i2 = r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label4:
        return i2;

     label5:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private android.os.Bundle getTransferOwnershipAdminExtras(android.os.PersistableBundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.PersistableBundle r1;
        android.os.Bundle $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.os.PersistableBundle;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        if r1 == null goto label1;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.app.extra.TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE", r1);

     label1:
        return $r3;
    }

    private int getUserIdToWipeForFailedPasswords(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        android.os.UserHandle $r2;
        android.app.admin.DeviceAdminInfo $r3;
        android.content.ComponentName $r4;
        boolean $z0;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r2 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        i0 = virtualinvoke $r2.<android.os.UserHandle: int getIdentifier()>();

        $r3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r4 = virtualinvoke $r3.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(android.content.ComponentName,int)>($r4, i0);

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        goto label1;

     label1:
        return i0;
    }

    private android.content.pm.UserInfo getUserInfo(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$iOVcvtWm_2P_Xugbpi6eKxqOn8c $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        android.content.pm.UserInfo $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$iOVcvtWm_2P_Xugbpi6eKxqOn8c;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$iOVcvtWm_2P_Xugbpi6eKxqOn8c: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (android.content.pm.UserInfo) $r3;

        return $r4;
    }

    private int getUserProvisioningState(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $i1 = $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState>;

        return $i1;
    }

    private void handleNewPackageInstalled(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.pm.PackageManager $r3;
        java.lang.String[] $r4, r13;
        android.content.pm.IPackageManager $r5;
        java.lang.StringBuilder $r7;
        java.lang.String $r10, r12;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $z0 = $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r13 = newarray (java.lang.String)[1];

        r13[0] = r12;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager(int)>(i0);

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getUnsuspendablePackages(java.lang.String[])>(r13);

        $i1 = lengthof $r4;

        if $i1 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newly installed package is unsuspendable: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r10);

        return;

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r5.<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>(r13, 1, null, null, null, "android", i0);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void handlePackagesChanged(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, i4, i5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        java.lang.Object r2, $r8, $r13;
        java.lang.String r3, $r6, $r9, r29;
        java.util.ArrayList $r4, $r12, $r17;
        android.util.ArrayMap $r5, $r7, $r10, $r20;
        boolean $z0, $z1, $z2, z3, z4, z5, z7;
        android.app.admin.DeviceAdminInfo $r14, $r19, $r23;
        android.content.pm.IPackageManager $r15, $r24;
        android.content.pm.PackageInfo $r16;
        android.content.ComponentName $r21, $r25, r32;
        android.content.pm.ActivityInfo $r26;
        android.os.RemoteException $r27;
        java.lang.Throwable $r28;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r30;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r29 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z3 = 0;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i4 = $i1 - 1;

     label02:
        if i4 < 0 goto label23;

     label03:
        $r12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r30 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r13;

     label04:
        z4 = z3;

     label05:
        $r14 = r30.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r3 = virtualinvoke $r14.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

     label06:
        if r29 == null goto label08;

        z5 = z3;

        z4 = z3;

     label07:
        $z2 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label20;

     label08:
        z4 = z3;

     label09:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r16 = interfaceinvoke $r15.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r3, 0, i0);

        if $r16 == null goto label12;

     label10:
        z5 = z3;

        z4 = z3;

     label11:
        $r24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r23 = r30.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r25 = virtualinvoke $r23.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r26 = interfaceinvoke $r24.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>($r25, 786432, i0);

        if $r26 != null goto label20;

     label12:
        z5 = 1;

        z4 = 1;

     label13:
        $r17 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r17.<java.util.ArrayList: java.lang.Object remove(int)>(i4);

     label14:
        z4 = 1;

     label15:
        $r20 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r19 = r30.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r21 = virtualinvoke $r19.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r20.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r21);

     label16:
        z4 = 1;

     label17:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushActiveAdminPackagesLocked(int)>(i0);

     label18:
        z4 = 1;

     label19:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushMeteredDisabledPackagesLocked(int)>(i0);

     label20:
        z3 = z5;

        goto label22;

     label21:
        $r27 := @caughtexception;

        z3 = z4;

     label22:
        i4 = i4 + -1;

        goto label02;

     label23:
        if z3 == 0 goto label25;

     label24:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void validatePasswordOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

     label25:
        z7 = 0;

     label26:
        $r5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $i2 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        i5 = $i2 - 1;

     label27:
        if i5 < 0 goto label31;

     label28:
        $r7 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        $r9 = (java.lang.String) $r8;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRemovedPackage(java.lang.String,java.lang.String,int)>(r29, $r9, i0);

        if $z1 == 0 goto label30;

        $r10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i5);

     label29:
        z7 = 1;

     label30:
        i5 = i5 + -1;

        goto label27;

     label31:
        r32 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getOwnerComponent(int)>(i0);

     label32:
        if r29 == null goto label34;

        if r32 == null goto label34;

     label33:
        $r6 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r29);

        if $z0 == 0 goto label34;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void startOwnerService(int,java.lang.String)>(i0, "package-broadcast");

     label34:
        if z3 != 0 goto label35;

        if z7 == 0 goto label36;

     label35:
        $i3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i3);

     label36:
        exitmonitor r2;

     label37:
        if z3 == 0 goto label38;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

     label38:
        return;

     label39:
        $r28 := @caughtexception;

     label40:
        exitmonitor r2;

     label41:
        throw $r28;

        catch java.lang.Throwable from label01 to label02 with label39;
        catch java.lang.Throwable from label03 to label04 with label39;
        catch android.os.RemoteException from label05 to label06 with label21;
        catch java.lang.Throwable from label05 to label06 with label39;
        catch android.os.RemoteException from label07 to label08 with label21;
        catch java.lang.Throwable from label07 to label08 with label39;
        catch android.os.RemoteException from label09 to label10 with label21;
        catch java.lang.Throwable from label09 to label10 with label39;
        catch android.os.RemoteException from label11 to label12 with label21;
        catch java.lang.Throwable from label11 to label12 with label39;
        catch android.os.RemoteException from label13 to label14 with label21;
        catch java.lang.Throwable from label13 to label14 with label39;
        catch android.os.RemoteException from label15 to label16 with label21;
        catch java.lang.Throwable from label15 to label16 with label39;
        catch android.os.RemoteException from label17 to label18 with label21;
        catch java.lang.Throwable from label17 to label18 with label39;
        catch android.os.RemoteException from label19 to label20 with label21;
        catch java.lang.Throwable from label19 to label20 with label39;
        catch java.lang.Throwable from label24 to label25 with label39;
        catch java.lang.Throwable from label26 to label27 with label39;
        catch java.lang.Throwable from label28 to label29 with label39;
        catch java.lang.Throwable from label31 to label32 with label39;
        catch java.lang.Throwable from label33 to label34 with label39;
        catch java.lang.Throwable from label35 to label36 with label39;
        catch java.lang.Throwable from label36 to label37 with label39;
        catch java.lang.Throwable from label40 to label41 with label39;
    }

    private void handlePasswordExpirationNotification(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i2, i11;
        java.lang.Object r1, $r7;
        long l1, $l3, $l5, $l6, $l7, $l9;
        java.util.List r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        android.os.Bundle $r4;
        android.os.UserHandle $r5;
        android.content.Context $r6;
        android.app.admin.DeviceAdminInfo $r8;
        boolean $z0;
        byte $b4, $b8, $b10;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.intent.extra.USER", $r5);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i0, 0);

        i2 = interfaceinvoke r2.<java.util.List: int size()>();

     label02:
        i11 = 0;

     label03:
        if i11 >= i2 goto label06;

     label04:
        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i11);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r7;

        $r8 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(6);

        if $z0 == 0 goto label05;

        $l3 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b4 = $l3 cmp 0L;

        if $b4 <= 0 goto label05;

        $l6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $l5 = <com.android.server.devicepolicy.DevicePolicyManagerService: long EXPIRATION_GRACE_PERIOD_MS>;

        $l7 = $l6 - $l5;

        $b8 = l1 cmp $l7;

        if $b8 < 0 goto label05;

        $l9 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b10 = $l9 cmp 0L;

        if $b10 <= 0 goto label05;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r3, "android.app.action.ACTION_PASSWORD_EXPIRING", $r4, null);

     label05:
        i11 = i11 + 1;

        goto label03;

     label06:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,int,boolean)>($r6, i0, 0);

        exitmonitor r1;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private boolean hasAccountFeatures(android.accounts.AccountManager, android.accounts.Account, java.lang.String[])
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.accounts.Account r1;
        java.lang.String[] r2;
        boolean z0;
        android.accounts.AccountManagerFuture $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.lang.Exception $r6;
        android.accounts.AccountManager r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.accounts.AccountManager;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String[];

     label1:
        $r3 = virtualinvoke r7.<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>(r1, r2, null, null);

        $r4 = interfaceinvoke $r3.<android.accounts.AccountManagerFuture: java.lang.Object getResult()>();

        $r5 = (java.lang.Boolean) $r4;

        z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to get account feature", $r6);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean hasFeatureManagedUsers()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        z0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean hasSystemFeature(java.lang.String,int)>("android.software.managed_users", 0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean hasIncompatibleAccountsOrNonAdbNoLock(int, android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.ComponentName r1;
        boolean $z0, $z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$CsQvBWdzfNkbrb6KHMy2yuHA2MA $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.ComponentName;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wtfIfInLock()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$CsQvBWdzfNkbrb6KHMy2yuHA2MA;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$CsQvBWdzfNkbrb6KHMy2yuHA2MA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,android.content.ComponentName)>(r0, i0, r1);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    private boolean hasMarkProfileOwnerOnOrganizationOwnedDevicePermission()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context $r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MARK_DEVICE_ORGANIZATION_OWNED");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasPaired(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $z1 = $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPaired>;

        return $z1;
    }

    private boolean hasProfileOwner(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.devicepolicy.Owners $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z0 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean hasUserSetupCompleted(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $z1 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean hasUserSetupCompleted(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r2);

        return $z1;
    }

    private boolean inEphemeralUserSession()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.Iterator r1;
        android.content.pm.UserInfo r2;
        android.os.UserManager $r3, $r7;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.UserInfo) $r5;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManager getUserManager()>();

        $i0 = r2.<android.content.pm.UserInfo: int id>;

        $z1 = virtualinvoke $r7.<android.os.UserManager: boolean isUserEphemeral(int)>($i0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean isActivePasswordSufficientForUserLocked(boolean, android.app.admin.PasswordMetrics, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, $z3;
        android.app.admin.PasswordMetrics r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.app.admin.PasswordMetrics;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z2 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsFileBasedEncryptionEnabled()>();

        if $z2 != 0 goto label1;

        if r1 != null goto label1;

        return z0;

     label1:
        if r1 == null goto label2;

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientForUserWithoutCheckpointLocked(android.app.admin.PasswordMetrics,int,boolean)>(r1, i0, z1);

        return $z3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("isActivePasswordSufficient called on FBE-locked user");

        throw $r3;
    }

    private boolean isAdb()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        if i0 == 2000 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isAdminAffectedByRestriction(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0, i1;
        android.os.UserManager $r3;
        android.os.UserHandle $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        i1 = virtualinvoke $r3.<android.os.UserManager: int getUserRestrictionSource(java.lang.String,android.os.UserHandle)>(r2, $r4);

        if i1 == 0 goto label3;

        if i1 == 2 goto label2;

        if i1 == 4 goto label1;

        return 1;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r1, i0);

        $z3 = $z2 ^ 1;

        return $z3;

     label2:
        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r1, i0);

        $z1 = $z0 ^ 1;

        return $z1;

     label3:
        return 0;
    }

    private boolean isAdminTestOnlyLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, z1;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r2 == null goto label1;

        $z0 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean testOnlyAdmin>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isCallerDelegate(java.lang.String, int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.String r1, $r11, r16;
        java.lang.Object r2, $r14;
        java.util.List r3, $r6;
        boolean z0, $z1, $z2;
        java.lang.String[] $r5;
        java.lang.StringBuilder $r7;
        java.lang.IllegalArgumentException $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r12;
        android.util.ArrayMap $r13;
        java.lang.Throwable $r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "callerPackage is null");

        $r5 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] DELEGATIONS>;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $z1 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label10;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        $r12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r13 = $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r3 = (java.util.List) $r14;

     label02:
        if r3 == null goto label05;

     label03:
        $z2 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z2 == 0 goto label05;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallingFromPackage(java.lang.String,int)>(r16, i0);

        exitmonitor r2;

     label04:
        return z0;

     label05:
        exitmonitor r2;

     label06:
        return 0;

     label07:
        $r15 := @caughtexception;

     label08:
        exitmonitor r2;

     label09:
        throw $r15;

     label10:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected delegation scope: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private boolean isCallerWithSystemUid()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>($i0, 1000);

        return $z0;
    }

    private boolean isCallingFromPackage(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$r06SOhTKGxinPY1SgnMRXl7fpds $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$r06SOhTKGxinPY1SgnMRXl7fpds;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$r06SOhTKGxinPY1SgnMRXl7fpds: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int)>(r0, r1, i0);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isCrossProfileQuickContactDisabled(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabledForUser(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabledForUser(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isCurrentUserDemo()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Context $r1;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$5Wdacb_bv2NxK0bcror9bEmiLFs $r3;
        java.lang.Object $r5;
        java.lang.Boolean $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <android.os.UserManager: boolean isDeviceInDemoMode(android.content.Context)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$5Wdacb_bv2NxK0bcror9bEmiLFs;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$5Wdacb_bv2NxK0bcror9bEmiLFs: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

     label1:
        return 0;
    }

    private boolean isDeviceAB()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = "true";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.build.ab_update", "");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        return $z0;
    }

    private boolean isDeviceOwnerPackage(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r2, $r3, $r4;
        boolean $z0, $z1, z2;
        java.lang.String $r5, r7;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if $i1 != i0 goto label3;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: java.lang.String getDeviceOwnerPackageName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z2;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private boolean isEncryptionSupported()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getEncryptionStatus()>();

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isLimitPasswordAllowed(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        int i0, $i1;
        android.app.admin.PasswordPolicy $r1;
        android.app.admin.DeviceAdminInfo $r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i1 = $r1.<android.app.admin.PasswordPolicy: int quality>;

        if $i1 >= i0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r2.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(0);

        return $z0;
    }

    private boolean isLockScreenSecureUnchecked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1FFSythVtxuOalHJwHtbFM3ZI_M $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1FFSythVtxuOalHJwHtbFM3ZI_M;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1FFSythVtxuOalHJwHtbFM3ZI_M: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isLockTaskFeatureEnabled(int) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.app.IActivityManager $r2;
        android.content.pm.UserInfo $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r4;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        $i1 = $r3.<android.content.pm.UserInfo: int id>;

        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i1);

        $i2 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures>;

        $i3 = $i2 & i0;

        if $i3 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isManagedKioskInternal() throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, z4;
        com.android.server.devicepolicy.Owners $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.app.IActivityManager $r3;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z0 = virtualinvoke $r1.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        z4 = 1;

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        $i0 = interfaceinvoke $r3.<android.app.IActivityManager: int getLockTaskModeState()>();

        if $i0 != 1 goto label1;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLockTaskFeatureEnabled(int)>(1);

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean deviceHasKeyguard()>();

        if $z2 != 0 goto label1;

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean inEphemeralUserSession()>();

        if $z3 != 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        return z4;
    }

    private boolean isManagedProfile(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.pm.UserInfo r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getUserInfo(int)>(i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isNetworkLoggingEnabledInternalLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        if r1 == null goto label1;

        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isPackageTestOnly(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r8, $r11;
        java.lang.String $r9, r12;
        android.os.RemoteException $r10;
        android.content.pm.ApplicationInfo r13;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.IPackageManager getIPackageManager()>();

        r13 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r12, 786432, i0);

     label2:
        if r13 == null goto label5;

        $i1 = r13.<android.content.pm.ApplicationInfo: int flags>;

        $i2 = $i1 & 256;

        if $i2 == 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find package: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label6:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label6;
    }

    private boolean isPasswordSufficientForUserWithoutCheckpointLocked(android.app.admin.PasswordMetrics, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.app.admin.PasswordMetrics r1, r2;
        int i0;
        boolean z0, $z1;
        java.util.List $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.app.admin.PasswordMetrics;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int,boolean)>(i0, z0);

        $r3 = staticinvoke <android.app.admin.PasswordMetrics: java.util.List validatePasswordMetrics(android.app.admin.PasswordMetrics,int,boolean,android.app.admin.PasswordMetrics)>(r2, 0, 0, r1);

        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        return $z1;
    }

    private boolean isProfileOwnerOfOrganizationOwnedDevice(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.devicepolicy.Owners $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z0 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isProfileOwnerOfOrganizationOwnedDevice(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r1, i0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        android.app.admin.DeviceAdminInfo $r2;
        android.content.ComponentName $r3;
        android.os.UserHandle $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r3 = virtualinvoke $r2.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r4 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(android.content.ComponentName,int)>($r3, $i0);

        return $z0;
    }

    private boolean isProfileOwnerPackage(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r2, $r3;
        boolean $z0, $z1, z2;
        java.lang.String $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>(i0);

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: java.lang.String getProfileOwnerPackage(int)>(i0);

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z2;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private boolean isRemovedPackage(java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r4;
        int i0;
        android.content.pm.IPackageManager $r2;
        boolean $z0, z1;
        android.os.RemoteException $r3;
        android.content.pm.PackageInfo r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z1 = 0;

        if r1 == null goto label5;

        if r4 == null goto label2;

     label1:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label5;

     label2:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r5 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r1, 0, i0);

     label3:
        if r5 != null goto label5;

        z1 = 1;

        goto label5;

     label4:
        $r3 := @caughtexception;

        return 0;

     label5:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private boolean isResetPasswordTokenActiveForUserLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        long $l1;
        byte $b2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$2JNhh9XESCwmJPHKrRWF8X_8XkA $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $l1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$2JNhh9XESCwmJPHKrRWF8X_8XkA;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$2JNhh9XESCwmJPHKrRWF8X_8XkA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData,int)>(r0, r1, i0);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label1:
        return 0;
    }

    private boolean isSeparateProfileChallengeEnabled(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$0diVa0pOEMc_Q6tr_ta8iSa3olw $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$0diVa0pOEMc_Q6tr_ta8iSa3olw;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$0diVa0pOEMc_Q6tr_ta8iSa3olw: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isSetSecureSettingLocationModeCheckEnabled(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4, $r6, $r8;
        com.android.internal.compat.IPlatformCompat $r3;
        android.os.RemoteException $r5;
        java.lang.Throwable $r7;
        java.lang.String r9;
        int i2, i3;
        boolean z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.compat.IPlatformCompat mIPlatformCompat>;

        z0 = interfaceinvoke $r3.<com.android.internal.compat.IPlatformCompat: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>(117835097L, r9, i2);

     label2:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r7 := @caughtexception;

        goto label9;

     label4:
        $r5 := @caughtexception;

     label5:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to get a response from PLATFORM_COMPAT_SERVICE", $r5);

        i3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>(r9, i2);

     label6:
        if i3 <= 29 goto label7;

        z1 = 1;

        goto label8;

     label7:
        z1 = 0;

     label8:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return z1;

     label9:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private boolean isSystemApp(android.content.pm.IPackageManager, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r6;
        int $i0, i1, i2;
        android.content.pm.IPackageManager r8;
        android.content.pm.ApplicationInfo r9;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.pm.IPackageManager;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r9 = interfaceinvoke r8.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r1, 8192, i1);

        if r9 == null goto label3;

        i2 = r9.<android.content.pm.ApplicationInfo: int flags>;

        z0 = 1;

        $i0 = i2 & 1;

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The application ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not present on this device");

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private boolean isUnattendedManagedKioskUnchecked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean $z0, z1, z2;
        android.os.PowerManagerInternal $r2;
        android.os.RemoteException $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

     label1:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedKioskInternal()>();

        if $z0 == 0 goto label3;

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PowerManagerInternal getPowerManagerInternal()>();

        z1 = virtualinvoke $r2.<android.os.PowerManagerInternal: boolean wasDeviceIdleFor(long)>(30000L);

     label2:
        if z1 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    private boolean isUserAffiliatedWithDeviceLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.util.Set r1, r9;
        com.android.server.devicepolicy.Owners $r2, $r3;
        boolean $z0, $z1, $z2;
        android.content.ComponentName $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5, $r6;
        java.lang.Object $r7;
        java.lang.String $r8;
        java.util.Iterator r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if i0 != $i1 goto label2;

        return 1;

     label2:
        if i0 != 0 goto label3;

        return 1;

     label3:
        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if $r4 != null goto label4;

        return 0;

     label4:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r9 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds>;

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        r1 = $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds>;

        r10 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $z2 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        goto label5;

     label7:
        return 0;
    }

    static boolean lambda$getActiveAdminsForAffectedUserLocked$10(android.content.pm.UserInfo)
    {
        android.content.pm.UserInfo r0;

        r0 := @parameter0: android.content.pm.UserInfo;

        return 0;
    }

    static java.lang.Integer lambda$getPasswordHistoryLength$15(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $i0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    static java.lang.Integer lambda$getPasswordMinimumLength$14(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.PasswordPolicy $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r1.<android.app.admin.PasswordPolicy: int length>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    static java.lang.Integer lambda$getPasswordMinimumLetters$18(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.PasswordPolicy $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r1.<android.app.admin.PasswordPolicy: int letters>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    static java.lang.Integer lambda$getPasswordMinimumLowerCase$17(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.PasswordPolicy $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r1.<android.app.admin.PasswordPolicy: int lowerCase>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    static java.lang.Integer lambda$getPasswordMinimumNonLetter$21(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.PasswordPolicy $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r1.<android.app.admin.PasswordPolicy: int nonLetter>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    static java.lang.Integer lambda$getPasswordMinimumNumeric$19(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.PasswordPolicy $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r1.<android.app.admin.PasswordPolicy: int numeric>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    static java.lang.Integer lambda$getPasswordMinimumSymbols$20(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.PasswordPolicy $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r1.<android.app.admin.PasswordPolicy: int symbols>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    static java.lang.Integer lambda$getPasswordMinimumUpperCase$16(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r0;
        android.app.admin.PasswordPolicy $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r1.<android.app.admin.PasswordPolicy: int upperCase>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    static void lambda$setCrossProfilePackages$106(android.content.pm.CrossProfileApps, java.util.List, java.util.List) throws java.lang.Exception
    {
        android.content.pm.CrossProfileApps r0;
        java.util.List r1, r2;
        java.util.HashSet $r3;

        r0 := @parameter0: android.content.pm.CrossProfileApps;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>(r2);

        virtualinvoke r0.<android.content.pm.CrossProfileApps: void resetInteractAcrossProfilesAppOps(java.util.Collection,java.util.Set)>(r1, $r3);

        return;
    }

    static void lambda$setPermissionGrantState$81(boolean, android.os.RemoteCallback, android.content.ComponentName, java.lang.String, java.lang.String, int, java.lang.Boolean)
    {
        android.os.RemoteCallback r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        int i0;
        java.lang.Boolean r4;
        android.app.admin.DevicePolicyEventLogger $r5, $r6, $r8, $r9, $r10;
        java.lang.String[] $r7;
        android.os.Bundle $r11;
        boolean $z0, z1, z2;

        z1 := @parameter0: boolean;

        r0 := @parameter1: android.os.RemoteCallback;

        r1 := @parameter2: android.content.ComponentName;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        r4 := @parameter6: java.lang.Boolean;

        if z1 == 0 goto label1;

        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(null);

        return;

     label1:
        if r1 != null goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(19);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r2);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = r3;

        $r8 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r7);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        $r10 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z2);

        virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r11 = <android.os.Bundle: android.os.Bundle EMPTY>;

        virtualinvoke r0.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>($r11);

        return;
    }

    private void loadAdminDataAsync()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$uscGE01UNkxETEanV_Gb_ZwPjKI $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$uscGE01UNkxETEanV_Gb_ZwPjKI;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$uscGE01UNkxETEanV_Gb_ZwPjKI: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void postOnSystemServerInitThreadPool(java.lang.Runnable)>($r1);

        return;
    }

    private com.android.server.devicepolicy.DevicePolicyConstants loadConstants()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        java.lang.String $r2;
        com.android.server.devicepolicy.DevicePolicyConstants $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String settingsGlobalGetString(java.lang.String)>("device_policy_constants");

        $r3 = staticinvoke <com.android.server.devicepolicy.DevicePolicyConstants: com.android.server.devicepolicy.DevicePolicyConstants loadFromString(java.lang.String)>($r2);

        return $r3;
    }

    private void loadSettingsLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0, i1, $i2, $i7, $i8, $i9, $i10, $i11, $i12, i13, i15;
        java.io.File r2;
        java.lang.String r3, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r38, $r39, $r41, $r43, $r44, $r45, $r46, $r48, $r49, $r50, $r51, $r53, $r55, $r56, $r57, $r71, $r72, $r73, r93, r94, r96, r97, r98, r99, r100, r101, r103, r112, r113, $r119, r120, r123, $r131;
        java.nio.charset.Charset $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, z37, z38, z39, $z40, z41, z42, z43, z44, z45;
        java.util.List $r8, $r9, $r35, $r52, r104, $r106, $r111, r121, r145, r146, r147, r148, r149, r150;
        java.util.Set $r37, $r47, $r109, $r110;
        long $l3, $l4, $l5, $l6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r40;
        android.os.PersistableBundle $r42;
        android.util.ArraySet $r54;
        android.util.ArrayMap $r58, $r60, $r65, $r67, $r68, $r70, $r108, r116, $r133;
        java.lang.Object $r59, $r66, $r69, r102, r105, r122;
        android.content.ComponentName $r61, $r62, $r64, $r74;
        android.app.admin.DeviceAdminInfo $r63, r114;
        java.lang.RuntimeException $r75, $r79, $r81, r117;
        java.lang.Throwable $r76, $r77, $r78, $r80, $r82, $r83, $r84, $r85, $r86, $r87, $r88, r95, r151;
        com.android.internal.util.JournaledFile r89;
        java.io.FileInputStream r90, r91, r135;
        org.xmlpull.v1.XmlPullParser r92;
        java.util.ArrayList $r107, $r132, r136, r137, r140;
        java.util.Collection $r134;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r138;
        java.lang.StringBuilder r139, r141, r142, r144;
        org.xmlpull.v1.XmlPullParserException r143;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        i0 := @parameter1: int;

        r89 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r90 = null;

        r2 = virtualinvoke r89.<com.android.internal.util.JournaledFile: java.io.File chooseForRead()>();

        z37 = 0;

        z38 = 0;

     label001:
        r135 = new java.io.FileInputStream;

        r91 = r135;

        specialinvoke r135.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

     label002:
        r90 = r135;

     label003:
        r92 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r135, $r5);

     label004:
        i1 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: int next()>();

     label005:
        if i1 == 1 goto label006;

        if i1 == 2 goto label006;

        goto label004;

     label006:
        r93 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r6 = "policies";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r93);

        if $z0 == 0 goto label277;

        r94 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "permission-provider");

     label007:
        if r94 == null goto label012;

     label008:
        $r74 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r94);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider> = $r74;

     label009:
        goto label012;

     label010:
        $r84 := @caughtexception;

        r95 = $r84;

        goto label296;

     label011:
        $r86 := @caughtexception;

        r91 = r135;

        z37 = 0;

        goto label298;

     label012:
        r96 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "setup-complete");

     label013:
        if r96 == null goto label018;

        z39 = 0;

        z37 = 0;

     label014:
        $r73 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        $z36 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>(r96);

        if $z36 == 0 goto label018;

     label015:
        z39 = 0;

        z37 = 0;

     label016:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete> = 1;

     label017:
        goto label018;

     label018:
        z39 = 0;

        z37 = 0;

     label019:
        r97 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "device-paired");

     label020:
        if r97 == null goto label025;

        z39 = 0;

        z37 = 0;

     label021:
        $r72 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        $z35 = virtualinvoke $r72.<java.lang.String: boolean equals(java.lang.Object)>(r97);

        if $z35 == 0 goto label025;

     label022:
        z39 = 0;

        z37 = 0;

     label023:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPaired> = 1;

     label024:
        goto label025;

     label025:
        z39 = 0;

        z37 = 0;

     label026:
        r98 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "device-provisioning-config-applied");

     label027:
        if r98 == null goto label032;

        z39 = 0;

        z37 = 0;

     label028:
        $r71 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        $z34 = virtualinvoke $r71.<java.lang.String: boolean equals(java.lang.Object)>(r98);

        if $z34 == 0 goto label032;

     label029:
        z39 = 0;

        z37 = 0;

     label030:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mDeviceProvisioningConfigApplied> = 1;

     label031:
        goto label032;

     label032:
        z39 = 0;

        z37 = 0;

     label033:
        r99 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "provisioning-state");

     label034:
        z39 = 0;

        z37 = 0;

     label035:
        $z40 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r99);

        if $z40 != 0 goto label038;

     label036:
        z39 = 0;

        z37 = 0;

     label037:
        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r99);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState> = $i12;

     label038:
        z39 = 0;

        z37 = 0;

     label039:
        r100 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "permission-policy");

     label040:
        z39 = 0;

        z37 = 0;

     label041:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r100);

        if $z1 != 0 goto label044;

     label042:
        z39 = 0;

        z37 = 0;

     label043:
        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r100);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPermissionPolicy> = $i11;

     label044:
        z39 = 0;

        z37 = 0;

     label045:
        r101 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "delegated-cert-installer");

     label046:
        if r101 == null goto label060;

        z39 = 0;

        z37 = 0;

     label047:
        $r68 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r69 = virtualinvoke $r68.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r101);

        r102 = (java.util.List) $r69;

     label048:
        if r102 != null goto label055;

        z39 = 0;

        z37 = 0;

     label049:
        r136 = new java.util.ArrayList;

        r102 = r136;

     label050:
        z39 = 0;

        z37 = 0;

     label051:
        specialinvoke r136.<java.util.ArrayList: void <init>()>();

     label052:
        z39 = 0;

        z37 = 0;

     label053:
        $r70 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        virtualinvoke $r70.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r101, r136);

     label054:
        goto label055;

     label055:
        z39 = 0;

        z37 = 0;

     label056:
        r145 = (java.util.List) r102;

        $z33 = interfaceinvoke r145.<java.util.List: boolean contains(java.lang.Object)>("delegation-cert-install");

        if $z33 != 0 goto label060;

     label057:
        z39 = 0;

        z37 = 0;

     label058:
        r146 = (java.util.List) r102;

        interfaceinvoke r146.<java.util.List: boolean add(java.lang.Object)>("delegation-cert-install");

     label059:
        z38 = 1;

        goto label060;

     label060:
        z39 = z38;

        z37 = z38;

     label061:
        r103 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "application-restrictions-manager");

     label062:
        z41 = z38;

        if r103 == null goto label075;

        z39 = z38;

        z37 = z38;

     label063:
        $r65 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r66 = virtualinvoke $r65.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r103);

        r104 = (java.util.List) $r66;

     label064:
        r105 = r104;

        if r104 != null goto label070;

        z39 = z38;

        z37 = z38;

     label065:
        r137 = new java.util.ArrayList;

        r105 = r137;

     label066:
        z39 = z38;

        z37 = z38;

     label067:
        specialinvoke r137.<java.util.ArrayList: void <init>()>();

     label068:
        z39 = z38;

        z37 = z38;

     label069:
        $r67 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        virtualinvoke $r67.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r103, r137);

     label070:
        z41 = z38;

        z39 = z38;

        z37 = z38;

     label071:
        r147 = (java.util.List) r105;

        $z32 = interfaceinvoke r147.<java.util.List: boolean contains(java.lang.Object)>("delegation-app-restrictions");

        if $z32 != 0 goto label075;

     label072:
        z39 = z38;

        z37 = z38;

     label073:
        r148 = (java.util.List) r105;

        interfaceinvoke r148.<java.util.List: boolean add(java.lang.Object)>("delegation-app-restrictions");

     label074:
        z41 = 1;

     label075:
        z39 = z41;

        z37 = z41;

     label076:
        interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: int next()>();

     label077:
        z39 = z41;

        z37 = z41;

     label078:
        i13 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label079:
        z39 = z41;

        z37 = z41;

     label080:
        $r106 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        interfaceinvoke $r106.<java.util.List: void clear()>();

     label081:
        z39 = z41;

        z37 = z41;

     label082:
        $r107 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r107.<java.util.ArrayList: void clear()>();

     label083:
        z39 = z41;

        z37 = z41;

     label084:
        $r108 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        virtualinvoke $r108.<android.util.ArrayMap: void clear()>();

     label085:
        z39 = z41;

        z37 = z41;

     label086:
        $r109 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds>;

        interfaceinvoke $r109.<java.util.Set: void clear()>();

     label087:
        z39 = z41;

        z37 = z41;

     label088:
        $r110 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        interfaceinvoke $r110.<java.util.Set: void clear()>();

     label089:
        z39 = z41;

        z37 = z41;

     label090:
        $r111 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        interfaceinvoke $r111.<java.util.List: void clear()>();

     label091:
        z42 = z41;

     label092:
        z39 = z42;

        z37 = z42;

     label093:
        i15 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: int next()>();

     label094:
        if i15 == 1 goto label274;

        if i15 != 3 goto label096;

        z39 = z42;

        z37 = z42;

     label095:
        $i10 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i10 <= i13 goto label274;

     label096:
        if i15 == 3 goto label273;

        if i15 != 4 goto label097;

        goto label273;

     label097:
        z39 = z42;

        z37 = z42;

     label098:
        r112 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label099:
        z39 = z42;

        z37 = z42;

     label100:
        $r10 = "admin";

        z43 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r112);

     label101:
        if z43 == 0 goto label133;

        z39 = z42;

        z37 = z42;

     label102:
        r113 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

     label103:
        z39 = z42;

        z37 = z42;

     label104:
        $r61 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r113);

        r114 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int,boolean)>($r61, i0, 0);

     label105:
        if r114 == null goto label120;

        z39 = z42;

        z37 = z42;

     label106:
        $r62 = virtualinvoke r114.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z44 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean shouldOverwritePoliciesFromXml(android.content.ComponentName,int)>($r62, i0);

     label107:
        z39 = z42;

        z37 = z42;

     label108:
        r138 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

     label109:
        z39 = z42;

        z37 = z42;

     label110:
        specialinvoke r138.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo,boolean)>(r114, 0);

     label111:
        z39 = z42;

        z37 = z42;

     label112:
        virtualinvoke r138.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void readFromXml(org.xmlpull.v1.XmlPullParser,boolean)>(r92, z44);

     label113:
        z39 = z42;

        z37 = z42;

     label114:
        r116 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

     label115:
        z39 = z42;

        z37 = z42;

     label116:
        $r63 = r138.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r64 = virtualinvoke $r63.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r116.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r64, r138);

     label117:
        goto label120;

     label118:
        $r75 := @caughtexception;

        r117 = $r75;

        goto label122;

     label119:
        $r81 := @caughtexception;

        r117 = $r81;

        goto label122;

     label120:
        goto label132;

     label121:
        $r79 := @caughtexception;

        r117 = $r79;

     label122:
        z39 = z42;

        z37 = z42;

     label123:
        r139 = new java.lang.StringBuilder;

     label124:
        z39 = z42;

        z37 = z42;

     label125:
        specialinvoke r139.<java.lang.StringBuilder: void <init>()>();

     label126:
        z39 = z42;

        z37 = z42;

     label127:
        virtualinvoke r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed loading admin ");

     label128:
        z39 = z42;

        z37 = z42;

     label129:
        virtualinvoke r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r113);

     label130:
        z39 = z42;

        z37 = z42;

     label131:
        $r119 = virtualinvoke r139.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r119, r117);

     label132:
        goto label273;

     label133:
        z39 = z42;

        z37 = z42;

     label134:
        $r11 = "delegation";

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z4 == 0 goto label152;

     label135:
        z39 = z42;

        z37 = z42;

     label136:
        r3 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "delegatePackage");

     label137:
        z39 = z42;

        z37 = z42;

     label138:
        r120 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "scope");

     label139:
        z39 = z42;

        z37 = z42;

     label140:
        $r58 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r59 = virtualinvoke $r58.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        r121 = (java.util.List) $r59;

     label141:
        r122 = r121;

        if r121 != null goto label147;

        z39 = z42;

        z37 = z42;

     label142:
        r140 = new java.util.ArrayList;

        r122 = r140;

     label143:
        z39 = z42;

        z37 = z42;

     label144:
        specialinvoke r140.<java.util.ArrayList: void <init>()>();

     label145:
        z39 = z42;

        z37 = z42;

     label146:
        $r60 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        virtualinvoke $r60.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r140);

     label147:
        z39 = z42;

        z37 = z42;

     label148:
        r149 = (java.util.List) r122;

        $z31 = interfaceinvoke r149.<java.util.List: boolean contains(java.lang.Object)>(r120);

        if $z31 != 0 goto label151;

     label149:
        z39 = z42;

        z37 = z42;

     label150:
        r150 = (java.util.List) r122;

        interfaceinvoke r150.<java.util.List: boolean add(java.lang.Object)>(r120);

     label151:
        goto label273;

     label152:
        z39 = z42;

        z37 = z42;

     label153:
        $r12 = "failed-password-attempts";

        z45 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r112);

     label154:
        if z45 == 0 goto label157;

        z39 = z42;

        z37 = z42;

     label155:
        $r57 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r57);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = $i9;

     label156:
        goto label273;

     label157:
        z39 = z42;

        z37 = z42;

     label158:
        $r13 = "password-owner";

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z5 == 0 goto label162;

     label159:
        z39 = z42;

        z37 = z42;

     label160:
        $r56 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r56);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = $i8;

     label161:
        goto label273;

     label162:
        z39 = z42;

        z37 = z42;

     label163:
        $r14 = "accepted-ca-certificate";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z6 == 0 goto label167;

     label164:
        z39 = z42;

        z37 = z42;

     label165:
        $r54 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

        $r55 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        virtualinvoke $r54.<android.util.ArraySet: boolean add(java.lang.Object)>($r55);

     label166:
        goto label273;

     label167:
        z39 = z42;

        z37 = z42;

     label168:
        $r15 = "lock-task-component";

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z7 == 0 goto label172;

     label169:
        z39 = z42;

        z37 = z42;

     label170:
        $r52 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $r53 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        interfaceinvoke $r52.<java.util.List: boolean add(java.lang.Object)>($r53);

     label171:
        goto label273;

     label172:
        z39 = z42;

        z37 = z42;

     label173:
        $r16 = "lock-task-features";

        $z8 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z8 == 0 goto label177;

     label174:
        z39 = z42;

        z37 = z42;

     label175:
        $r51 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r51);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures> = $i7;

     label176:
        goto label273;

     label177:
        z39 = z42;

        z37 = z42;

     label178:
        $r17 = "secondary-lock-screen";

        $z9 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z9 == 0 goto label182;

     label179:
        z39 = z42;

        z37 = z42;

     label180:
        $r50 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z30 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r50);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mSecondaryLockscreenEnabled> = $z30;

     label181:
        goto label273;

     label182:
        z39 = z42;

        z37 = z42;

     label183:
        $r18 = "statusbar";

        $z10 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z10 == 0 goto label187;

     label184:
        z39 = z42;

        z37 = z42;

     label185:
        $r49 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "disabled");

        $z29 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r49);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled> = $z29;

     label186:
        goto label273;

     label187:
        z39 = z42;

        z37 = z42;

     label188:
        $r19 = "do-not-ask-credentials-on-boot";

        $z11 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z11 == 0 goto label192;

     label189:
        z39 = z42;

        z37 = z42;

     label190:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean doNotAskCredentialsOnBoot> = 1;

     label191:
        goto label273;

     label192:
        z39 = z42;

        z37 = z42;

     label193:
        $r20 = "affiliation-id";

        $z12 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z12 == 0 goto label197;

     label194:
        z39 = z42;

        z37 = z42;

     label195:
        $r47 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds>;

        $r48 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "id");

        interfaceinvoke $r47.<java.util.Set: boolean add(java.lang.Object)>($r48);

     label196:
        goto label273;

     label197:
        z39 = z42;

        z37 = z42;

     label198:
        $r21 = "last-security-log-retrieval";

        $z13 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z13 == 0 goto label202;

     label199:
        z39 = z42;

        z37 = z42;

     label200:
        $r46 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r46);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastSecurityLogRetrievalTime> = $l6;

     label201:
        goto label273;

     label202:
        z39 = z42;

        z37 = z42;

     label203:
        $r22 = "last-bug-report-request";

        $z14 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z14 == 0 goto label207;

     label204:
        z39 = z42;

        z37 = z42;

     label205:
        $r45 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r45);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastBugReportRequestTime> = $l5;

     label206:
        goto label273;

     label207:
        z39 = z42;

        z37 = z42;

     label208:
        $r23 = "last-network-log-retrieval";

        $z15 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z15 == 0 goto label212;

     label209:
        z39 = z42;

        z37 = z42;

     label210:
        $r44 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r44);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastNetworkLogsRetrievalTime> = $l4;

     label211:
        goto label273;

     label212:
        z39 = z42;

        z37 = z42;

     label213:
        $r24 = "admin-broadcast-pending";

        $z16 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z16 == 0 goto label219;

     label214:
        z39 = z42;

        z37 = z42;

     label215:
        r123 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

     label216:
        z39 = z42;

        z37 = z42;

     label217:
        $r43 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        $z28 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>(r123);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAdminBroadcastPending> = $z28;

     label218:
        goto label273;

     label219:
        z39 = z42;

        z37 = z42;

     label220:
        $r25 = "initialization-bundle";

        $z17 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z17 == 0 goto label224;

     label221:
        z39 = z42;

        z37 = z42;

     label222:
        $r42 = staticinvoke <android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r92);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.os.PersistableBundle mInitBundle> = $r42;

     label223:
        goto label273;

     label224:
        z39 = z42;

        z37 = z42;

     label225:
        $r26 = "active-password";

        $z18 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z18 == 0 goto label227;

     label226:
        z42 = 1;

        goto label092;

     label227:
        z39 = z42;

        z37 = z42;

     label228:
        $r27 = "password-validity";

        $z19 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z19 == 0 goto label235;

     label229:
        z39 = z42;

        z37 = z42;

     label230:
        $r40 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z26 = virtualinvoke $r40.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsFileBasedEncryptionEnabled()>();

        if $z26 != 0 goto label234;

     label231:
        z39 = z42;

        z37 = z42;

     label232:
        $r41 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z27 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r41);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPasswordValidAtLastCheckpoint> = $z27;

     label233:
        goto label273;

     label234:
        goto label273;

     label235:
        z39 = z42;

        z37 = z42;

     label236:
        $r28 = "password-token";

        $z20 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z20 == 0 goto label240;

     label237:
        z39 = z42;

        z37 = z42;

     label238:
        $r39 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r39);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle> = $l3;

     label239:
        goto label273;

     label240:
        z39 = z42;

        z37 = z42;

     label241:
        $r29 = "current-ime-set";

        $z21 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z21 == 0 goto label245;

     label242:
        z39 = z42;

        z37 = z42;

     label243:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mCurrentInputMethodSet> = 1;

     label244:
        goto label273;

     label245:
        z39 = z42;

        z37 = z42;

     label246:
        $r30 = "owner-installed-ca-cert";

        $z22 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z22 == 0 goto label250;

     label247:
        z39 = z42;

        z37 = z42;

     label248:
        $r37 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        $r38 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "alias");

        interfaceinvoke $r37.<java.util.Set: boolean add(java.lang.Object)>($r38);

     label249:
        goto label273;

     label250:
        z39 = z42;

        z37 = z42;

     label251:
        $r31 = "protected-packages";

        $z23 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z23 == 0 goto label255;

     label252:
        z39 = z42;

        z37 = z42;

     label253:
        $r35 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        $r36 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r36);

     label254:
        goto label273;

     label255:
        z39 = z42;

        z37 = z42;

     label256:
        $r32 = "apps-suspended";

        $z24 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r112);

        if $z24 == 0 goto label260;

     label257:
        z39 = z42;

        z37 = z42;

     label258:
        $r34 = interfaceinvoke r92.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z25 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r34);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended> = $z25;

     label259:
        goto label273;

     label260:
        z39 = z42;

        z37 = z42;

     label261:
        r141 = new java.lang.StringBuilder;

     label262:
        z39 = z42;

        z37 = z42;

     label263:
        specialinvoke r141.<java.lang.StringBuilder: void <init>()>();

     label264:
        z39 = z42;

        z37 = z42;

     label265:
        virtualinvoke r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown tag: ");

     label266:
        z39 = z42;

        z37 = z42;

     label267:
        virtualinvoke r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r112);

     label268:
        z39 = z42;

        z37 = z42;

     label269:
        $r33 = virtualinvoke r141.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r33);

     label270:
        z39 = z42;

        z37 = z42;

     label271:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r92);

     label272:
        goto label273;

     label273:
        goto label092;

     label274:
        z37 = z42;

        goto label298;

     label275:
        $r88 := @caughtexception;

        r95 = $r88;

        goto label296;

     label276:
        $r80 := @caughtexception;

        r91 = r135;

        z37 = 0;

        goto label298;

     label277:
        z39 = 0;

        z37 = 0;

     label278:
        r143 = new org.xmlpull.v1.XmlPullParserException;

     label279:
        z39 = 0;

        z37 = 0;

     label280:
        r142 = new java.lang.StringBuilder;

     label281:
        z39 = 0;

        z37 = 0;

     label282:
        specialinvoke r142.<java.lang.StringBuilder: void <init>()>();

     label283:
        z39 = 0;

        z37 = 0;

     label284:
        virtualinvoke r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Settings do not start with policies tag: found ");

     label285:
        z39 = 0;

        z37 = 0;

     label286:
        virtualinvoke r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

     label287:
        z39 = 0;

        z37 = 0;

     label288:
        $r7 = virtualinvoke r142.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r143.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r7);

     label289:
        z39 = 0;

        z37 = 0;

     label290:
        r151 = (java.lang.Throwable) r143;

        throw r151;

     label291:
        $r77 := @caughtexception;

        r95 = $r77;

        r90 = r135;

        z37 = z39;

        goto label296;

     label292:
        $r85 := @caughtexception;

        goto label298;

     label293:
        $r78 := @caughtexception;

        r95 = $r78;

        goto label296;

     label294:
        $r87 := @caughtexception;

        r91 = r135;

        z37 = 0;

        goto label298;

     label295:
        $r82 := @caughtexception;

        r95 = $r82;

     label296:
        r144 = new java.lang.StringBuilder;

        specialinvoke r144.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        virtualinvoke r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r131 = virtualinvoke r144.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r131, r95);

        r91 = r90;

        goto label298;

     label297:
        $r76 := @caughtexception;

        z37 = 0;

        r91 = null;

     label298:
        if r91 == null goto label302;

     label299:
        virtualinvoke r91.<java.io.FileInputStream: void close()>();

     label300:
        goto label302;

     label301:
        $r83 := @caughtexception;

        goto label302;

     label302:
        $r132 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r133 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r134 = virtualinvoke $r133.<android.util.ArrayMap: java.util.Collection values()>();

        virtualinvoke $r132.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r134);

        if z37 == 0 goto label303;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label303:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void validatePasswordOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(int)>(i0);

        $r8 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateLockTaskPackagesLocked(java.util.List,int)>($r8, i0);

        $i2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateLockTaskFeaturesLocked(int,int)>($i2, i0);

        $r9 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateUserControlDisabledPackagesLocked(java.util.List)>($r9);

        $z2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled>;

        if $z2 == 0 goto label304;

        $z3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabledInternal(boolean,int)>($z3, i0);

     label304:
        return;

        catch java.io.FileNotFoundException from label001 to label002 with label297;
        catch java.lang.NullPointerException from label001 to label002 with label295;
        catch java.lang.NumberFormatException from label001 to label002 with label295;
        catch org.xmlpull.v1.XmlPullParserException from label001 to label002 with label295;
        catch java.io.IOException from label001 to label002 with label295;
        catch java.lang.IndexOutOfBoundsException from label001 to label002 with label295;
        catch java.io.FileNotFoundException from label003 to label004 with label294;
        catch java.lang.NullPointerException from label003 to label004 with label293;
        catch java.lang.NumberFormatException from label003 to label004 with label293;
        catch org.xmlpull.v1.XmlPullParserException from label003 to label004 with label293;
        catch java.io.IOException from label003 to label004 with label293;
        catch java.lang.IndexOutOfBoundsException from label003 to label004 with label293;
        catch java.io.FileNotFoundException from label004 to label005 with label294;
        catch java.lang.NullPointerException from label004 to label005 with label293;
        catch java.lang.NumberFormatException from label004 to label005 with label293;
        catch org.xmlpull.v1.XmlPullParserException from label004 to label005 with label293;
        catch java.io.IOException from label004 to label005 with label293;
        catch java.lang.IndexOutOfBoundsException from label004 to label005 with label293;
        catch java.io.FileNotFoundException from label006 to label007 with label294;
        catch java.lang.NullPointerException from label006 to label007 with label293;
        catch java.lang.NumberFormatException from label006 to label007 with label293;
        catch org.xmlpull.v1.XmlPullParserException from label006 to label007 with label293;
        catch java.io.IOException from label006 to label007 with label293;
        catch java.lang.IndexOutOfBoundsException from label006 to label007 with label293;
        catch java.io.FileNotFoundException from label008 to label009 with label011;
        catch java.lang.NullPointerException from label008 to label009 with label010;
        catch java.lang.NumberFormatException from label008 to label009 with label010;
        catch org.xmlpull.v1.XmlPullParserException from label008 to label009 with label010;
        catch java.io.IOException from label008 to label009 with label010;
        catch java.lang.IndexOutOfBoundsException from label008 to label009 with label010;
        catch java.io.FileNotFoundException from label012 to label013 with label276;
        catch java.lang.NullPointerException from label012 to label013 with label275;
        catch java.lang.NumberFormatException from label012 to label013 with label275;
        catch org.xmlpull.v1.XmlPullParserException from label012 to label013 with label275;
        catch java.io.IOException from label012 to label013 with label275;
        catch java.lang.IndexOutOfBoundsException from label012 to label013 with label275;
        catch java.io.FileNotFoundException from label014 to label015 with label292;
        catch java.lang.NullPointerException from label014 to label015 with label291;
        catch java.lang.NumberFormatException from label014 to label015 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label014 to label015 with label291;
        catch java.io.IOException from label014 to label015 with label291;
        catch java.lang.IndexOutOfBoundsException from label014 to label015 with label291;
        catch java.io.FileNotFoundException from label016 to label017 with label292;
        catch java.lang.NullPointerException from label016 to label017 with label291;
        catch java.lang.NumberFormatException from label016 to label017 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label016 to label017 with label291;
        catch java.io.IOException from label016 to label017 with label291;
        catch java.lang.IndexOutOfBoundsException from label016 to label017 with label291;
        catch java.io.FileNotFoundException from label019 to label020 with label292;
        catch java.lang.NullPointerException from label019 to label020 with label291;
        catch java.lang.NumberFormatException from label019 to label020 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label019 to label020 with label291;
        catch java.io.IOException from label019 to label020 with label291;
        catch java.lang.IndexOutOfBoundsException from label019 to label020 with label291;
        catch java.io.FileNotFoundException from label021 to label022 with label292;
        catch java.lang.NullPointerException from label021 to label022 with label291;
        catch java.lang.NumberFormatException from label021 to label022 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label021 to label022 with label291;
        catch java.io.IOException from label021 to label022 with label291;
        catch java.lang.IndexOutOfBoundsException from label021 to label022 with label291;
        catch java.io.FileNotFoundException from label023 to label024 with label292;
        catch java.lang.NullPointerException from label023 to label024 with label291;
        catch java.lang.NumberFormatException from label023 to label024 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label023 to label024 with label291;
        catch java.io.IOException from label023 to label024 with label291;
        catch java.lang.IndexOutOfBoundsException from label023 to label024 with label291;
        catch java.io.FileNotFoundException from label026 to label027 with label292;
        catch java.lang.NullPointerException from label026 to label027 with label291;
        catch java.lang.NumberFormatException from label026 to label027 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label026 to label027 with label291;
        catch java.io.IOException from label026 to label027 with label291;
        catch java.lang.IndexOutOfBoundsException from label026 to label027 with label291;
        catch java.io.FileNotFoundException from label028 to label029 with label292;
        catch java.lang.NullPointerException from label028 to label029 with label291;
        catch java.lang.NumberFormatException from label028 to label029 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label028 to label029 with label291;
        catch java.io.IOException from label028 to label029 with label291;
        catch java.lang.IndexOutOfBoundsException from label028 to label029 with label291;
        catch java.io.FileNotFoundException from label030 to label031 with label292;
        catch java.lang.NullPointerException from label030 to label031 with label291;
        catch java.lang.NumberFormatException from label030 to label031 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label030 to label031 with label291;
        catch java.io.IOException from label030 to label031 with label291;
        catch java.lang.IndexOutOfBoundsException from label030 to label031 with label291;
        catch java.io.FileNotFoundException from label033 to label034 with label292;
        catch java.lang.NullPointerException from label033 to label034 with label291;
        catch java.lang.NumberFormatException from label033 to label034 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label033 to label034 with label291;
        catch java.io.IOException from label033 to label034 with label291;
        catch java.lang.IndexOutOfBoundsException from label033 to label034 with label291;
        catch java.io.FileNotFoundException from label035 to label036 with label292;
        catch java.lang.NullPointerException from label035 to label036 with label291;
        catch java.lang.NumberFormatException from label035 to label036 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label035 to label036 with label291;
        catch java.io.IOException from label035 to label036 with label291;
        catch java.lang.IndexOutOfBoundsException from label035 to label036 with label291;
        catch java.io.FileNotFoundException from label037 to label038 with label292;
        catch java.lang.NullPointerException from label037 to label038 with label291;
        catch java.lang.NumberFormatException from label037 to label038 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label037 to label038 with label291;
        catch java.io.IOException from label037 to label038 with label291;
        catch java.lang.IndexOutOfBoundsException from label037 to label038 with label291;
        catch java.io.FileNotFoundException from label039 to label040 with label292;
        catch java.lang.NullPointerException from label039 to label040 with label291;
        catch java.lang.NumberFormatException from label039 to label040 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label039 to label040 with label291;
        catch java.io.IOException from label039 to label040 with label291;
        catch java.lang.IndexOutOfBoundsException from label039 to label040 with label291;
        catch java.io.FileNotFoundException from label041 to label042 with label292;
        catch java.lang.NullPointerException from label041 to label042 with label291;
        catch java.lang.NumberFormatException from label041 to label042 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label041 to label042 with label291;
        catch java.io.IOException from label041 to label042 with label291;
        catch java.lang.IndexOutOfBoundsException from label041 to label042 with label291;
        catch java.io.FileNotFoundException from label043 to label044 with label292;
        catch java.lang.NullPointerException from label043 to label044 with label291;
        catch java.lang.NumberFormatException from label043 to label044 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label043 to label044 with label291;
        catch java.io.IOException from label043 to label044 with label291;
        catch java.lang.IndexOutOfBoundsException from label043 to label044 with label291;
        catch java.io.FileNotFoundException from label045 to label046 with label292;
        catch java.lang.NullPointerException from label045 to label046 with label291;
        catch java.lang.NumberFormatException from label045 to label046 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label045 to label046 with label291;
        catch java.io.IOException from label045 to label046 with label291;
        catch java.lang.IndexOutOfBoundsException from label045 to label046 with label291;
        catch java.io.FileNotFoundException from label047 to label048 with label292;
        catch java.lang.NullPointerException from label047 to label048 with label291;
        catch java.lang.NumberFormatException from label047 to label048 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label047 to label048 with label291;
        catch java.io.IOException from label047 to label048 with label291;
        catch java.lang.IndexOutOfBoundsException from label047 to label048 with label291;
        catch java.io.FileNotFoundException from label049 to label050 with label292;
        catch java.lang.NullPointerException from label049 to label050 with label291;
        catch java.lang.NumberFormatException from label049 to label050 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label049 to label050 with label291;
        catch java.io.IOException from label049 to label050 with label291;
        catch java.lang.IndexOutOfBoundsException from label049 to label050 with label291;
        catch java.io.FileNotFoundException from label051 to label052 with label292;
        catch java.lang.NullPointerException from label051 to label052 with label291;
        catch java.lang.NumberFormatException from label051 to label052 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label051 to label052 with label291;
        catch java.io.IOException from label051 to label052 with label291;
        catch java.lang.IndexOutOfBoundsException from label051 to label052 with label291;
        catch java.io.FileNotFoundException from label053 to label054 with label292;
        catch java.lang.NullPointerException from label053 to label054 with label291;
        catch java.lang.NumberFormatException from label053 to label054 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label053 to label054 with label291;
        catch java.io.IOException from label053 to label054 with label291;
        catch java.lang.IndexOutOfBoundsException from label053 to label054 with label291;
        catch java.io.FileNotFoundException from label056 to label057 with label292;
        catch java.lang.NullPointerException from label056 to label057 with label291;
        catch java.lang.NumberFormatException from label056 to label057 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label056 to label057 with label291;
        catch java.io.IOException from label056 to label057 with label291;
        catch java.lang.IndexOutOfBoundsException from label056 to label057 with label291;
        catch java.io.FileNotFoundException from label058 to label059 with label292;
        catch java.lang.NullPointerException from label058 to label059 with label291;
        catch java.lang.NumberFormatException from label058 to label059 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label058 to label059 with label291;
        catch java.io.IOException from label058 to label059 with label291;
        catch java.lang.IndexOutOfBoundsException from label058 to label059 with label291;
        catch java.io.FileNotFoundException from label061 to label062 with label292;
        catch java.lang.NullPointerException from label061 to label062 with label291;
        catch java.lang.NumberFormatException from label061 to label062 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label061 to label062 with label291;
        catch java.io.IOException from label061 to label062 with label291;
        catch java.lang.IndexOutOfBoundsException from label061 to label062 with label291;
        catch java.io.FileNotFoundException from label063 to label064 with label292;
        catch java.lang.NullPointerException from label063 to label064 with label291;
        catch java.lang.NumberFormatException from label063 to label064 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label063 to label064 with label291;
        catch java.io.IOException from label063 to label064 with label291;
        catch java.lang.IndexOutOfBoundsException from label063 to label064 with label291;
        catch java.io.FileNotFoundException from label065 to label066 with label292;
        catch java.lang.NullPointerException from label065 to label066 with label291;
        catch java.lang.NumberFormatException from label065 to label066 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label065 to label066 with label291;
        catch java.io.IOException from label065 to label066 with label291;
        catch java.lang.IndexOutOfBoundsException from label065 to label066 with label291;
        catch java.io.FileNotFoundException from label067 to label068 with label292;
        catch java.lang.NullPointerException from label067 to label068 with label291;
        catch java.lang.NumberFormatException from label067 to label068 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label067 to label068 with label291;
        catch java.io.IOException from label067 to label068 with label291;
        catch java.lang.IndexOutOfBoundsException from label067 to label068 with label291;
        catch java.io.FileNotFoundException from label069 to label070 with label292;
        catch java.lang.NullPointerException from label069 to label070 with label291;
        catch java.lang.NumberFormatException from label069 to label070 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label069 to label070 with label291;
        catch java.io.IOException from label069 to label070 with label291;
        catch java.lang.IndexOutOfBoundsException from label069 to label070 with label291;
        catch java.io.FileNotFoundException from label071 to label072 with label292;
        catch java.lang.NullPointerException from label071 to label072 with label291;
        catch java.lang.NumberFormatException from label071 to label072 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label071 to label072 with label291;
        catch java.io.IOException from label071 to label072 with label291;
        catch java.lang.IndexOutOfBoundsException from label071 to label072 with label291;
        catch java.io.FileNotFoundException from label073 to label074 with label292;
        catch java.lang.NullPointerException from label073 to label074 with label291;
        catch java.lang.NumberFormatException from label073 to label074 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label073 to label074 with label291;
        catch java.io.IOException from label073 to label074 with label291;
        catch java.lang.IndexOutOfBoundsException from label073 to label074 with label291;
        catch java.io.FileNotFoundException from label076 to label077 with label292;
        catch java.lang.NullPointerException from label076 to label077 with label291;
        catch java.lang.NumberFormatException from label076 to label077 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label076 to label077 with label291;
        catch java.io.IOException from label076 to label077 with label291;
        catch java.lang.IndexOutOfBoundsException from label076 to label077 with label291;
        catch java.io.FileNotFoundException from label078 to label079 with label292;
        catch java.lang.NullPointerException from label078 to label079 with label291;
        catch java.lang.NumberFormatException from label078 to label079 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label078 to label079 with label291;
        catch java.io.IOException from label078 to label079 with label291;
        catch java.lang.IndexOutOfBoundsException from label078 to label079 with label291;
        catch java.io.FileNotFoundException from label080 to label081 with label292;
        catch java.lang.NullPointerException from label080 to label081 with label291;
        catch java.lang.NumberFormatException from label080 to label081 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label080 to label081 with label291;
        catch java.io.IOException from label080 to label081 with label291;
        catch java.lang.IndexOutOfBoundsException from label080 to label081 with label291;
        catch java.io.FileNotFoundException from label082 to label083 with label292;
        catch java.lang.NullPointerException from label082 to label083 with label291;
        catch java.lang.NumberFormatException from label082 to label083 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label082 to label083 with label291;
        catch java.io.IOException from label082 to label083 with label291;
        catch java.lang.IndexOutOfBoundsException from label082 to label083 with label291;
        catch java.io.FileNotFoundException from label084 to label085 with label292;
        catch java.lang.NullPointerException from label084 to label085 with label291;
        catch java.lang.NumberFormatException from label084 to label085 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label084 to label085 with label291;
        catch java.io.IOException from label084 to label085 with label291;
        catch java.lang.IndexOutOfBoundsException from label084 to label085 with label291;
        catch java.io.FileNotFoundException from label086 to label087 with label292;
        catch java.lang.NullPointerException from label086 to label087 with label291;
        catch java.lang.NumberFormatException from label086 to label087 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label086 to label087 with label291;
        catch java.io.IOException from label086 to label087 with label291;
        catch java.lang.IndexOutOfBoundsException from label086 to label087 with label291;
        catch java.io.FileNotFoundException from label088 to label089 with label292;
        catch java.lang.NullPointerException from label088 to label089 with label291;
        catch java.lang.NumberFormatException from label088 to label089 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label088 to label089 with label291;
        catch java.io.IOException from label088 to label089 with label291;
        catch java.lang.IndexOutOfBoundsException from label088 to label089 with label291;
        catch java.io.FileNotFoundException from label090 to label091 with label292;
        catch java.lang.NullPointerException from label090 to label091 with label291;
        catch java.lang.NumberFormatException from label090 to label091 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label090 to label091 with label291;
        catch java.io.IOException from label090 to label091 with label291;
        catch java.lang.IndexOutOfBoundsException from label090 to label091 with label291;
        catch java.io.FileNotFoundException from label093 to label094 with label292;
        catch java.lang.NullPointerException from label093 to label094 with label291;
        catch java.lang.NumberFormatException from label093 to label094 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label093 to label094 with label291;
        catch java.io.IOException from label093 to label094 with label291;
        catch java.lang.IndexOutOfBoundsException from label093 to label094 with label291;
        catch java.io.FileNotFoundException from label095 to label096 with label292;
        catch java.lang.NullPointerException from label095 to label096 with label291;
        catch java.lang.NumberFormatException from label095 to label096 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label095 to label096 with label291;
        catch java.io.IOException from label095 to label096 with label291;
        catch java.lang.IndexOutOfBoundsException from label095 to label096 with label291;
        catch java.io.FileNotFoundException from label098 to label099 with label292;
        catch java.lang.NullPointerException from label098 to label099 with label291;
        catch java.lang.NumberFormatException from label098 to label099 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label098 to label099 with label291;
        catch java.io.IOException from label098 to label099 with label291;
        catch java.lang.IndexOutOfBoundsException from label098 to label099 with label291;
        catch java.io.FileNotFoundException from label100 to label101 with label292;
        catch java.lang.NullPointerException from label100 to label101 with label291;
        catch java.lang.NumberFormatException from label100 to label101 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label100 to label101 with label291;
        catch java.io.IOException from label100 to label101 with label291;
        catch java.lang.IndexOutOfBoundsException from label100 to label101 with label291;
        catch java.io.FileNotFoundException from label102 to label103 with label292;
        catch java.lang.NullPointerException from label102 to label103 with label291;
        catch java.lang.NumberFormatException from label102 to label103 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label102 to label103 with label291;
        catch java.io.IOException from label102 to label103 with label291;
        catch java.lang.IndexOutOfBoundsException from label102 to label103 with label291;
        catch java.lang.RuntimeException from label104 to label105 with label121;
        catch java.io.FileNotFoundException from label104 to label105 with label292;
        catch java.lang.NullPointerException from label104 to label105 with label291;
        catch java.lang.NumberFormatException from label104 to label105 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label104 to label105 with label291;
        catch java.io.IOException from label104 to label105 with label291;
        catch java.lang.IndexOutOfBoundsException from label104 to label105 with label291;
        catch java.lang.RuntimeException from label106 to label107 with label121;
        catch java.io.FileNotFoundException from label106 to label107 with label292;
        catch java.lang.NullPointerException from label106 to label107 with label291;
        catch java.lang.NumberFormatException from label106 to label107 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label106 to label107 with label291;
        catch java.io.IOException from label106 to label107 with label291;
        catch java.lang.IndexOutOfBoundsException from label106 to label107 with label291;
        catch java.lang.RuntimeException from label108 to label109 with label121;
        catch java.io.FileNotFoundException from label108 to label109 with label292;
        catch java.lang.NullPointerException from label108 to label109 with label291;
        catch java.lang.NumberFormatException from label108 to label109 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label108 to label109 with label291;
        catch java.io.IOException from label108 to label109 with label291;
        catch java.lang.IndexOutOfBoundsException from label108 to label109 with label291;
        catch java.lang.RuntimeException from label110 to label111 with label119;
        catch java.io.FileNotFoundException from label110 to label111 with label292;
        catch java.lang.NullPointerException from label110 to label111 with label291;
        catch java.lang.NumberFormatException from label110 to label111 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label110 to label111 with label291;
        catch java.io.IOException from label110 to label111 with label291;
        catch java.lang.IndexOutOfBoundsException from label110 to label111 with label291;
        catch java.lang.RuntimeException from label112 to label113 with label119;
        catch java.io.FileNotFoundException from label112 to label113 with label292;
        catch java.lang.NullPointerException from label112 to label113 with label291;
        catch java.lang.NumberFormatException from label112 to label113 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label112 to label113 with label291;
        catch java.io.IOException from label112 to label113 with label291;
        catch java.lang.IndexOutOfBoundsException from label112 to label113 with label291;
        catch java.lang.RuntimeException from label114 to label115 with label119;
        catch java.io.FileNotFoundException from label114 to label115 with label292;
        catch java.lang.NullPointerException from label114 to label115 with label291;
        catch java.lang.NumberFormatException from label114 to label115 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label114 to label115 with label291;
        catch java.io.IOException from label114 to label115 with label291;
        catch java.lang.IndexOutOfBoundsException from label114 to label115 with label291;
        catch java.lang.RuntimeException from label116 to label117 with label118;
        catch java.io.FileNotFoundException from label116 to label117 with label292;
        catch java.lang.NullPointerException from label116 to label117 with label291;
        catch java.lang.NumberFormatException from label116 to label117 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label116 to label117 with label291;
        catch java.io.IOException from label116 to label117 with label291;
        catch java.lang.IndexOutOfBoundsException from label116 to label117 with label291;
        catch java.io.FileNotFoundException from label123 to label124 with label292;
        catch java.lang.NullPointerException from label123 to label124 with label291;
        catch java.lang.NumberFormatException from label123 to label124 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label123 to label124 with label291;
        catch java.io.IOException from label123 to label124 with label291;
        catch java.lang.IndexOutOfBoundsException from label123 to label124 with label291;
        catch java.io.FileNotFoundException from label125 to label126 with label292;
        catch java.lang.NullPointerException from label125 to label126 with label291;
        catch java.lang.NumberFormatException from label125 to label126 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label125 to label126 with label291;
        catch java.io.IOException from label125 to label126 with label291;
        catch java.lang.IndexOutOfBoundsException from label125 to label126 with label291;
        catch java.io.FileNotFoundException from label127 to label128 with label292;
        catch java.lang.NullPointerException from label127 to label128 with label291;
        catch java.lang.NumberFormatException from label127 to label128 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label127 to label128 with label291;
        catch java.io.IOException from label127 to label128 with label291;
        catch java.lang.IndexOutOfBoundsException from label127 to label128 with label291;
        catch java.io.FileNotFoundException from label129 to label130 with label292;
        catch java.lang.NullPointerException from label129 to label130 with label291;
        catch java.lang.NumberFormatException from label129 to label130 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label129 to label130 with label291;
        catch java.io.IOException from label129 to label130 with label291;
        catch java.lang.IndexOutOfBoundsException from label129 to label130 with label291;
        catch java.io.FileNotFoundException from label131 to label132 with label292;
        catch java.lang.NullPointerException from label131 to label132 with label291;
        catch java.lang.NumberFormatException from label131 to label132 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label131 to label132 with label291;
        catch java.io.IOException from label131 to label132 with label291;
        catch java.lang.IndexOutOfBoundsException from label131 to label132 with label291;
        catch java.io.FileNotFoundException from label134 to label135 with label292;
        catch java.lang.NullPointerException from label134 to label135 with label291;
        catch java.lang.NumberFormatException from label134 to label135 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label134 to label135 with label291;
        catch java.io.IOException from label134 to label135 with label291;
        catch java.lang.IndexOutOfBoundsException from label134 to label135 with label291;
        catch java.io.FileNotFoundException from label136 to label137 with label292;
        catch java.lang.NullPointerException from label136 to label137 with label291;
        catch java.lang.NumberFormatException from label136 to label137 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label136 to label137 with label291;
        catch java.io.IOException from label136 to label137 with label291;
        catch java.lang.IndexOutOfBoundsException from label136 to label137 with label291;
        catch java.io.FileNotFoundException from label138 to label139 with label292;
        catch java.lang.NullPointerException from label138 to label139 with label291;
        catch java.lang.NumberFormatException from label138 to label139 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label138 to label139 with label291;
        catch java.io.IOException from label138 to label139 with label291;
        catch java.lang.IndexOutOfBoundsException from label138 to label139 with label291;
        catch java.io.FileNotFoundException from label140 to label141 with label292;
        catch java.lang.NullPointerException from label140 to label141 with label291;
        catch java.lang.NumberFormatException from label140 to label141 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label140 to label141 with label291;
        catch java.io.IOException from label140 to label141 with label291;
        catch java.lang.IndexOutOfBoundsException from label140 to label141 with label291;
        catch java.io.FileNotFoundException from label142 to label143 with label292;
        catch java.lang.NullPointerException from label142 to label143 with label291;
        catch java.lang.NumberFormatException from label142 to label143 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label142 to label143 with label291;
        catch java.io.IOException from label142 to label143 with label291;
        catch java.lang.IndexOutOfBoundsException from label142 to label143 with label291;
        catch java.io.FileNotFoundException from label144 to label145 with label292;
        catch java.lang.NullPointerException from label144 to label145 with label291;
        catch java.lang.NumberFormatException from label144 to label145 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label144 to label145 with label291;
        catch java.io.IOException from label144 to label145 with label291;
        catch java.lang.IndexOutOfBoundsException from label144 to label145 with label291;
        catch java.io.FileNotFoundException from label146 to label147 with label292;
        catch java.lang.NullPointerException from label146 to label147 with label291;
        catch java.lang.NumberFormatException from label146 to label147 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label146 to label147 with label291;
        catch java.io.IOException from label146 to label147 with label291;
        catch java.lang.IndexOutOfBoundsException from label146 to label147 with label291;
        catch java.io.FileNotFoundException from label148 to label149 with label292;
        catch java.lang.NullPointerException from label148 to label149 with label291;
        catch java.lang.NumberFormatException from label148 to label149 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label148 to label149 with label291;
        catch java.io.IOException from label148 to label149 with label291;
        catch java.lang.IndexOutOfBoundsException from label148 to label149 with label291;
        catch java.io.FileNotFoundException from label150 to label151 with label292;
        catch java.lang.NullPointerException from label150 to label151 with label291;
        catch java.lang.NumberFormatException from label150 to label151 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label150 to label151 with label291;
        catch java.io.IOException from label150 to label151 with label291;
        catch java.lang.IndexOutOfBoundsException from label150 to label151 with label291;
        catch java.io.FileNotFoundException from label153 to label154 with label292;
        catch java.lang.NullPointerException from label153 to label154 with label291;
        catch java.lang.NumberFormatException from label153 to label154 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label153 to label154 with label291;
        catch java.io.IOException from label153 to label154 with label291;
        catch java.lang.IndexOutOfBoundsException from label153 to label154 with label291;
        catch java.io.FileNotFoundException from label155 to label156 with label292;
        catch java.lang.NullPointerException from label155 to label156 with label291;
        catch java.lang.NumberFormatException from label155 to label156 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label155 to label156 with label291;
        catch java.io.IOException from label155 to label156 with label291;
        catch java.lang.IndexOutOfBoundsException from label155 to label156 with label291;
        catch java.io.FileNotFoundException from label158 to label159 with label292;
        catch java.lang.NullPointerException from label158 to label159 with label291;
        catch java.lang.NumberFormatException from label158 to label159 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label158 to label159 with label291;
        catch java.io.IOException from label158 to label159 with label291;
        catch java.lang.IndexOutOfBoundsException from label158 to label159 with label291;
        catch java.io.FileNotFoundException from label160 to label161 with label292;
        catch java.lang.NullPointerException from label160 to label161 with label291;
        catch java.lang.NumberFormatException from label160 to label161 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label160 to label161 with label291;
        catch java.io.IOException from label160 to label161 with label291;
        catch java.lang.IndexOutOfBoundsException from label160 to label161 with label291;
        catch java.io.FileNotFoundException from label163 to label164 with label292;
        catch java.lang.NullPointerException from label163 to label164 with label291;
        catch java.lang.NumberFormatException from label163 to label164 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label163 to label164 with label291;
        catch java.io.IOException from label163 to label164 with label291;
        catch java.lang.IndexOutOfBoundsException from label163 to label164 with label291;
        catch java.io.FileNotFoundException from label165 to label166 with label292;
        catch java.lang.NullPointerException from label165 to label166 with label291;
        catch java.lang.NumberFormatException from label165 to label166 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label165 to label166 with label291;
        catch java.io.IOException from label165 to label166 with label291;
        catch java.lang.IndexOutOfBoundsException from label165 to label166 with label291;
        catch java.io.FileNotFoundException from label168 to label169 with label292;
        catch java.lang.NullPointerException from label168 to label169 with label291;
        catch java.lang.NumberFormatException from label168 to label169 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label168 to label169 with label291;
        catch java.io.IOException from label168 to label169 with label291;
        catch java.lang.IndexOutOfBoundsException from label168 to label169 with label291;
        catch java.io.FileNotFoundException from label170 to label171 with label292;
        catch java.lang.NullPointerException from label170 to label171 with label291;
        catch java.lang.NumberFormatException from label170 to label171 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label170 to label171 with label291;
        catch java.io.IOException from label170 to label171 with label291;
        catch java.lang.IndexOutOfBoundsException from label170 to label171 with label291;
        catch java.io.FileNotFoundException from label173 to label174 with label292;
        catch java.lang.NullPointerException from label173 to label174 with label291;
        catch java.lang.NumberFormatException from label173 to label174 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label173 to label174 with label291;
        catch java.io.IOException from label173 to label174 with label291;
        catch java.lang.IndexOutOfBoundsException from label173 to label174 with label291;
        catch java.io.FileNotFoundException from label175 to label176 with label292;
        catch java.lang.NullPointerException from label175 to label176 with label291;
        catch java.lang.NumberFormatException from label175 to label176 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label175 to label176 with label291;
        catch java.io.IOException from label175 to label176 with label291;
        catch java.lang.IndexOutOfBoundsException from label175 to label176 with label291;
        catch java.io.FileNotFoundException from label178 to label179 with label292;
        catch java.lang.NullPointerException from label178 to label179 with label291;
        catch java.lang.NumberFormatException from label178 to label179 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label178 to label179 with label291;
        catch java.io.IOException from label178 to label179 with label291;
        catch java.lang.IndexOutOfBoundsException from label178 to label179 with label291;
        catch java.io.FileNotFoundException from label180 to label181 with label292;
        catch java.lang.NullPointerException from label180 to label181 with label291;
        catch java.lang.NumberFormatException from label180 to label181 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label180 to label181 with label291;
        catch java.io.IOException from label180 to label181 with label291;
        catch java.lang.IndexOutOfBoundsException from label180 to label181 with label291;
        catch java.io.FileNotFoundException from label183 to label184 with label292;
        catch java.lang.NullPointerException from label183 to label184 with label291;
        catch java.lang.NumberFormatException from label183 to label184 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label183 to label184 with label291;
        catch java.io.IOException from label183 to label184 with label291;
        catch java.lang.IndexOutOfBoundsException from label183 to label184 with label291;
        catch java.io.FileNotFoundException from label185 to label186 with label292;
        catch java.lang.NullPointerException from label185 to label186 with label291;
        catch java.lang.NumberFormatException from label185 to label186 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label185 to label186 with label291;
        catch java.io.IOException from label185 to label186 with label291;
        catch java.lang.IndexOutOfBoundsException from label185 to label186 with label291;
        catch java.io.FileNotFoundException from label188 to label189 with label292;
        catch java.lang.NullPointerException from label188 to label189 with label291;
        catch java.lang.NumberFormatException from label188 to label189 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label188 to label189 with label291;
        catch java.io.IOException from label188 to label189 with label291;
        catch java.lang.IndexOutOfBoundsException from label188 to label189 with label291;
        catch java.io.FileNotFoundException from label190 to label191 with label292;
        catch java.lang.NullPointerException from label190 to label191 with label291;
        catch java.lang.NumberFormatException from label190 to label191 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label190 to label191 with label291;
        catch java.io.IOException from label190 to label191 with label291;
        catch java.lang.IndexOutOfBoundsException from label190 to label191 with label291;
        catch java.io.FileNotFoundException from label193 to label194 with label292;
        catch java.lang.NullPointerException from label193 to label194 with label291;
        catch java.lang.NumberFormatException from label193 to label194 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label193 to label194 with label291;
        catch java.io.IOException from label193 to label194 with label291;
        catch java.lang.IndexOutOfBoundsException from label193 to label194 with label291;
        catch java.io.FileNotFoundException from label195 to label196 with label292;
        catch java.lang.NullPointerException from label195 to label196 with label291;
        catch java.lang.NumberFormatException from label195 to label196 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label195 to label196 with label291;
        catch java.io.IOException from label195 to label196 with label291;
        catch java.lang.IndexOutOfBoundsException from label195 to label196 with label291;
        catch java.io.FileNotFoundException from label198 to label199 with label292;
        catch java.lang.NullPointerException from label198 to label199 with label291;
        catch java.lang.NumberFormatException from label198 to label199 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label198 to label199 with label291;
        catch java.io.IOException from label198 to label199 with label291;
        catch java.lang.IndexOutOfBoundsException from label198 to label199 with label291;
        catch java.io.FileNotFoundException from label200 to label201 with label292;
        catch java.lang.NullPointerException from label200 to label201 with label291;
        catch java.lang.NumberFormatException from label200 to label201 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label200 to label201 with label291;
        catch java.io.IOException from label200 to label201 with label291;
        catch java.lang.IndexOutOfBoundsException from label200 to label201 with label291;
        catch java.io.FileNotFoundException from label203 to label204 with label292;
        catch java.lang.NullPointerException from label203 to label204 with label291;
        catch java.lang.NumberFormatException from label203 to label204 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label203 to label204 with label291;
        catch java.io.IOException from label203 to label204 with label291;
        catch java.lang.IndexOutOfBoundsException from label203 to label204 with label291;
        catch java.io.FileNotFoundException from label205 to label206 with label292;
        catch java.lang.NullPointerException from label205 to label206 with label291;
        catch java.lang.NumberFormatException from label205 to label206 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label205 to label206 with label291;
        catch java.io.IOException from label205 to label206 with label291;
        catch java.lang.IndexOutOfBoundsException from label205 to label206 with label291;
        catch java.io.FileNotFoundException from label208 to label209 with label292;
        catch java.lang.NullPointerException from label208 to label209 with label291;
        catch java.lang.NumberFormatException from label208 to label209 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label208 to label209 with label291;
        catch java.io.IOException from label208 to label209 with label291;
        catch java.lang.IndexOutOfBoundsException from label208 to label209 with label291;
        catch java.io.FileNotFoundException from label210 to label211 with label292;
        catch java.lang.NullPointerException from label210 to label211 with label291;
        catch java.lang.NumberFormatException from label210 to label211 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label210 to label211 with label291;
        catch java.io.IOException from label210 to label211 with label291;
        catch java.lang.IndexOutOfBoundsException from label210 to label211 with label291;
        catch java.io.FileNotFoundException from label213 to label214 with label292;
        catch java.lang.NullPointerException from label213 to label214 with label291;
        catch java.lang.NumberFormatException from label213 to label214 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label213 to label214 with label291;
        catch java.io.IOException from label213 to label214 with label291;
        catch java.lang.IndexOutOfBoundsException from label213 to label214 with label291;
        catch java.io.FileNotFoundException from label215 to label216 with label292;
        catch java.lang.NullPointerException from label215 to label216 with label291;
        catch java.lang.NumberFormatException from label215 to label216 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label215 to label216 with label291;
        catch java.io.IOException from label215 to label216 with label291;
        catch java.lang.IndexOutOfBoundsException from label215 to label216 with label291;
        catch java.io.FileNotFoundException from label217 to label218 with label292;
        catch java.lang.NullPointerException from label217 to label218 with label291;
        catch java.lang.NumberFormatException from label217 to label218 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label217 to label218 with label291;
        catch java.io.IOException from label217 to label218 with label291;
        catch java.lang.IndexOutOfBoundsException from label217 to label218 with label291;
        catch java.io.FileNotFoundException from label220 to label221 with label292;
        catch java.lang.NullPointerException from label220 to label221 with label291;
        catch java.lang.NumberFormatException from label220 to label221 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label220 to label221 with label291;
        catch java.io.IOException from label220 to label221 with label291;
        catch java.lang.IndexOutOfBoundsException from label220 to label221 with label291;
        catch java.io.FileNotFoundException from label222 to label223 with label292;
        catch java.lang.NullPointerException from label222 to label223 with label291;
        catch java.lang.NumberFormatException from label222 to label223 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label222 to label223 with label291;
        catch java.io.IOException from label222 to label223 with label291;
        catch java.lang.IndexOutOfBoundsException from label222 to label223 with label291;
        catch java.io.FileNotFoundException from label225 to label226 with label292;
        catch java.lang.NullPointerException from label225 to label226 with label291;
        catch java.lang.NumberFormatException from label225 to label226 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label225 to label226 with label291;
        catch java.io.IOException from label225 to label226 with label291;
        catch java.lang.IndexOutOfBoundsException from label225 to label226 with label291;
        catch java.io.FileNotFoundException from label228 to label229 with label292;
        catch java.lang.NullPointerException from label228 to label229 with label291;
        catch java.lang.NumberFormatException from label228 to label229 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label228 to label229 with label291;
        catch java.io.IOException from label228 to label229 with label291;
        catch java.lang.IndexOutOfBoundsException from label228 to label229 with label291;
        catch java.io.FileNotFoundException from label230 to label231 with label292;
        catch java.lang.NullPointerException from label230 to label231 with label291;
        catch java.lang.NumberFormatException from label230 to label231 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label230 to label231 with label291;
        catch java.io.IOException from label230 to label231 with label291;
        catch java.lang.IndexOutOfBoundsException from label230 to label231 with label291;
        catch java.io.FileNotFoundException from label232 to label233 with label292;
        catch java.lang.NullPointerException from label232 to label233 with label291;
        catch java.lang.NumberFormatException from label232 to label233 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label232 to label233 with label291;
        catch java.io.IOException from label232 to label233 with label291;
        catch java.lang.IndexOutOfBoundsException from label232 to label233 with label291;
        catch java.io.FileNotFoundException from label236 to label237 with label292;
        catch java.lang.NullPointerException from label236 to label237 with label291;
        catch java.lang.NumberFormatException from label236 to label237 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label236 to label237 with label291;
        catch java.io.IOException from label236 to label237 with label291;
        catch java.lang.IndexOutOfBoundsException from label236 to label237 with label291;
        catch java.io.FileNotFoundException from label238 to label239 with label292;
        catch java.lang.NullPointerException from label238 to label239 with label291;
        catch java.lang.NumberFormatException from label238 to label239 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label238 to label239 with label291;
        catch java.io.IOException from label238 to label239 with label291;
        catch java.lang.IndexOutOfBoundsException from label238 to label239 with label291;
        catch java.io.FileNotFoundException from label241 to label242 with label292;
        catch java.lang.NullPointerException from label241 to label242 with label291;
        catch java.lang.NumberFormatException from label241 to label242 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label241 to label242 with label291;
        catch java.io.IOException from label241 to label242 with label291;
        catch java.lang.IndexOutOfBoundsException from label241 to label242 with label291;
        catch java.io.FileNotFoundException from label243 to label244 with label292;
        catch java.lang.NullPointerException from label243 to label244 with label291;
        catch java.lang.NumberFormatException from label243 to label244 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label243 to label244 with label291;
        catch java.io.IOException from label243 to label244 with label291;
        catch java.lang.IndexOutOfBoundsException from label243 to label244 with label291;
        catch java.io.FileNotFoundException from label246 to label247 with label292;
        catch java.lang.NullPointerException from label246 to label247 with label291;
        catch java.lang.NumberFormatException from label246 to label247 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label246 to label247 with label291;
        catch java.io.IOException from label246 to label247 with label291;
        catch java.lang.IndexOutOfBoundsException from label246 to label247 with label291;
        catch java.io.FileNotFoundException from label248 to label249 with label292;
        catch java.lang.NullPointerException from label248 to label249 with label291;
        catch java.lang.NumberFormatException from label248 to label249 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label248 to label249 with label291;
        catch java.io.IOException from label248 to label249 with label291;
        catch java.lang.IndexOutOfBoundsException from label248 to label249 with label291;
        catch java.io.FileNotFoundException from label251 to label252 with label292;
        catch java.lang.NullPointerException from label251 to label252 with label291;
        catch java.lang.NumberFormatException from label251 to label252 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label251 to label252 with label291;
        catch java.io.IOException from label251 to label252 with label291;
        catch java.lang.IndexOutOfBoundsException from label251 to label252 with label291;
        catch java.io.FileNotFoundException from label253 to label254 with label292;
        catch java.lang.NullPointerException from label253 to label254 with label291;
        catch java.lang.NumberFormatException from label253 to label254 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label253 to label254 with label291;
        catch java.io.IOException from label253 to label254 with label291;
        catch java.lang.IndexOutOfBoundsException from label253 to label254 with label291;
        catch java.io.FileNotFoundException from label256 to label257 with label292;
        catch java.lang.NullPointerException from label256 to label257 with label291;
        catch java.lang.NumberFormatException from label256 to label257 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label256 to label257 with label291;
        catch java.io.IOException from label256 to label257 with label291;
        catch java.lang.IndexOutOfBoundsException from label256 to label257 with label291;
        catch java.io.FileNotFoundException from label258 to label259 with label292;
        catch java.lang.NullPointerException from label258 to label259 with label291;
        catch java.lang.NumberFormatException from label258 to label259 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label258 to label259 with label291;
        catch java.io.IOException from label258 to label259 with label291;
        catch java.lang.IndexOutOfBoundsException from label258 to label259 with label291;
        catch java.io.FileNotFoundException from label261 to label262 with label292;
        catch java.lang.NullPointerException from label261 to label262 with label291;
        catch java.lang.NumberFormatException from label261 to label262 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label261 to label262 with label291;
        catch java.io.IOException from label261 to label262 with label291;
        catch java.lang.IndexOutOfBoundsException from label261 to label262 with label291;
        catch java.io.FileNotFoundException from label263 to label264 with label292;
        catch java.lang.NullPointerException from label263 to label264 with label291;
        catch java.lang.NumberFormatException from label263 to label264 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label263 to label264 with label291;
        catch java.io.IOException from label263 to label264 with label291;
        catch java.lang.IndexOutOfBoundsException from label263 to label264 with label291;
        catch java.io.FileNotFoundException from label265 to label266 with label292;
        catch java.lang.NullPointerException from label265 to label266 with label291;
        catch java.lang.NumberFormatException from label265 to label266 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label265 to label266 with label291;
        catch java.io.IOException from label265 to label266 with label291;
        catch java.lang.IndexOutOfBoundsException from label265 to label266 with label291;
        catch java.io.FileNotFoundException from label267 to label268 with label292;
        catch java.lang.NullPointerException from label267 to label268 with label291;
        catch java.lang.NumberFormatException from label267 to label268 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label267 to label268 with label291;
        catch java.io.IOException from label267 to label268 with label291;
        catch java.lang.IndexOutOfBoundsException from label267 to label268 with label291;
        catch java.io.FileNotFoundException from label269 to label270 with label292;
        catch java.lang.NullPointerException from label269 to label270 with label291;
        catch java.lang.NumberFormatException from label269 to label270 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label269 to label270 with label291;
        catch java.io.IOException from label269 to label270 with label291;
        catch java.lang.IndexOutOfBoundsException from label269 to label270 with label291;
        catch java.io.FileNotFoundException from label271 to label272 with label292;
        catch java.lang.NullPointerException from label271 to label272 with label291;
        catch java.lang.NumberFormatException from label271 to label272 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label271 to label272 with label291;
        catch java.io.IOException from label271 to label272 with label291;
        catch java.lang.IndexOutOfBoundsException from label271 to label272 with label291;
        catch java.io.FileNotFoundException from label278 to label279 with label292;
        catch java.lang.NullPointerException from label278 to label279 with label291;
        catch java.lang.NumberFormatException from label278 to label279 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label278 to label279 with label291;
        catch java.io.IOException from label278 to label279 with label291;
        catch java.lang.IndexOutOfBoundsException from label278 to label279 with label291;
        catch java.io.FileNotFoundException from label280 to label281 with label292;
        catch java.lang.NullPointerException from label280 to label281 with label291;
        catch java.lang.NumberFormatException from label280 to label281 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label280 to label281 with label291;
        catch java.io.IOException from label280 to label281 with label291;
        catch java.lang.IndexOutOfBoundsException from label280 to label281 with label291;
        catch java.io.FileNotFoundException from label282 to label283 with label292;
        catch java.lang.NullPointerException from label282 to label283 with label291;
        catch java.lang.NumberFormatException from label282 to label283 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label282 to label283 with label291;
        catch java.io.IOException from label282 to label283 with label291;
        catch java.lang.IndexOutOfBoundsException from label282 to label283 with label291;
        catch java.io.FileNotFoundException from label284 to label285 with label292;
        catch java.lang.NullPointerException from label284 to label285 with label291;
        catch java.lang.NumberFormatException from label284 to label285 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label284 to label285 with label291;
        catch java.io.IOException from label284 to label285 with label291;
        catch java.lang.IndexOutOfBoundsException from label284 to label285 with label291;
        catch java.io.FileNotFoundException from label286 to label287 with label292;
        catch java.lang.NullPointerException from label286 to label287 with label291;
        catch java.lang.NumberFormatException from label286 to label287 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label286 to label287 with label291;
        catch java.io.IOException from label286 to label287 with label291;
        catch java.lang.IndexOutOfBoundsException from label286 to label287 with label291;
        catch java.io.FileNotFoundException from label288 to label289 with label292;
        catch java.lang.NullPointerException from label288 to label289 with label291;
        catch java.lang.NumberFormatException from label288 to label289 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label288 to label289 with label291;
        catch java.io.IOException from label288 to label289 with label291;
        catch java.lang.IndexOutOfBoundsException from label288 to label289 with label291;
        catch java.io.FileNotFoundException from label290 to label291 with label292;
        catch java.lang.NullPointerException from label290 to label291 with label291;
        catch java.lang.NumberFormatException from label290 to label291 with label291;
        catch org.xmlpull.v1.XmlPullParserException from label290 to label291 with label291;
        catch java.io.IOException from label290 to label291 with label291;
        catch java.lang.IndexOutOfBoundsException from label290 to label291 with label291;
        catch java.io.IOException from label299 to label300 with label301;
    }

    private void logIfVerbose(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        return;
    }

    private void logSetCrossProfilePackages(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.util.List r2;
        android.app.admin.DevicePolicyEventLogger $r3, $r4, $r8;
        int $i0;
        java.lang.String[] $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        $r3 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(138);

        $r4 = virtualinvoke $r3.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        $r8 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r7);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    private com.android.internal.util.JournaledFile makeJournaledFile(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1, $r12;
        java.io.File $r4, $r5, $r6, $r11;
        java.lang.StringBuilder $r7;
        com.android.internal.util.JournaledFile $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r4 = new java.io.File;

        $r5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.io.File getPolicyFileDirectory(int)>(i0);

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "device_policies.xml");

        r1 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r10 = new com.android.internal.util.JournaledFile;

        $r11 = new java.io.File;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r12);

        specialinvoke $r10.<com.android.internal.util.JournaledFile: void <init>(java.io.File,java.io.File)>($r6, $r11);

        return $r10;
    }

    private int makeSuspensionReasons(boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1;
        byte b0, b1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        b0 = 0;

        if z0 == 0 goto label1;

        b0 = 0 | 1;

     label1:
        b1 = b0;

        if z1 == 0 goto label2;

        b1 = b0 | 2;

     label2:
        return b1;
    }

    private void markProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object[] $r3, $r7;
        java.lang.String $r4, $r6, $r8, $r10;
        java.lang.Integer $r5, $r9;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fNcFHUyZ8am8m_L17XqT1P4UAl4 $r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r12;
        com.android.server.devicepolicy.Owners $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r1, i0);

        if $z0 == 0 goto label1;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = virtualinvoke r1.<android.content.ComponentName: java.lang.String flattenToString()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Marking %s as profile owner on organization-owned device for user %d", $r7);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r10);

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r11 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fNcFHUyZ8am8m_L17XqT1P4UAl4;

        specialinvoke $r11.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fNcFHUyZ8am8m_L17XqT1P4UAl4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r11);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r13.<com.android.server.devicepolicy.Owners: void markProfileOwnerOfOrganizationOwnedDevice(int)>(i0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r1.<android.content.ComponentName: java.lang.String flattenToString()>();

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Component %s is not a Profile Owner of user %d", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    private void maybeClearLockTaskPolicyLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hUuh5dIc_N7BD7eJAxYBFdUSRRY $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hUuh5dIc_N7BD7eJAxYBFdUSRRY;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hUuh5dIc_N7BD7eJAxYBFdUSRRY: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r1);

        return;
    }

    private void maybeLogPasswordComplexitySet(android.content.ComponentName, int, boolean, android.app.admin.PasswordPolicy)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10;
        boolean z0, $z1;
        android.app.admin.PasswordPolicy r2;
        java.lang.Object[] $r3;
        java.lang.String $r4;
        java.lang.Integer $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: android.app.admin.PasswordPolicy;

        $z1 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label3;

        if z0 == 0 goto label1;

        i10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        goto label2;

     label1:
        i10 = i0;

     label2:
        $r3 = newarray (java.lang.Object)[11];

        $r4 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r3[2] = $r6;

        $i1 = r2.<android.app.admin.PasswordPolicy: int length>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[3] = $r7;

        $i2 = r2.<android.app.admin.PasswordPolicy: int quality>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[4] = $r8;

        $i3 = r2.<android.app.admin.PasswordPolicy: int letters>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[5] = $r9;

        $i4 = r2.<android.app.admin.PasswordPolicy: int nonLetter>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[6] = $r10;

        $i5 = r2.<android.app.admin.PasswordPolicy: int numeric>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r3[7] = $r11;

        $i6 = r2.<android.app.admin.PasswordPolicy: int upperCase>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r3[8] = $r12;

        $i7 = r2.<android.app.admin.PasswordPolicy: int lowerCase>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r3[9] = $r13;

        $i8 = r2.<android.app.admin.PasswordPolicy: int symbols>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r3[10] = $r14;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210017, $r3);

     label3:
        return;
    }

    private void maybeLogStart()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean $z0;
        java.lang.Object[] $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = newarray (java.lang.Object)[2];

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String systemPropertiesGet(java.lang.String)>("ro.boot.verifiedbootstate");

        $r1[0] = $r3;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String systemPropertiesGet(java.lang.String)>("ro.boot.veritymode");

        $r1[1] = $r5;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210009, $r1);

        return;
    }

    private void maybePauseDeviceWideLoggingLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.NetworkLogger r1;
        boolean $z0, $z1;
        com.android.server.devicepolicy.SecurityLogMonitor $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean areAllUsersAffiliatedWithDeviceLocked()>();

        if $z0 != 0 goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "There are unaffiliated users, network logging will be paused if enabled.");

        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.devicepolicy.NetworkLogger: void pause()>();

     label1:
        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>();

        if $z1 != 0 goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Not org-owned managed profile device, security logging will be paused if enabled.");

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        virtualinvoke $r2.<com.android.server.devicepolicy.SecurityLogMonitor: void pause()>();

     label2:
        return;
    }

    private void maybeResumeDeviceWideLoggingLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$p1IyjYrjhmxXxk2Zna25gipa0Mk $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean areAllUsersAffiliatedWithDeviceLocked()>();

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>();

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$p1IyjYrjhmxXxk2Zna25gipa0Mk;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$p1IyjYrjhmxXxk2Zna25gipa0Mk: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,boolean,boolean)>(r0, z0, z1);

        virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r1);

        return;
    }

    private void maybeSendAdminEnabledBroadcastLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        boolean $z0, z1;
        android.os.Bundle $r3, r5;
        android.os.PersistableBundle r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAdminBroadcastPending>;

        if $z0 == 0 goto label4;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

        z1 = 1;

        if r2 == null goto label3;

        r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.os.PersistableBundle mInitBundle>;

        if r4 != null goto label1;

        r5 = null;

        goto label2;

     label1:
        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>(android.os.PersistableBundle)>(r4);

        r5 = $r3;

     label2:
        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver,boolean)>(r2, "android.app.action.DEVICE_ADMIN_ENABLED", r5, null, 1);

     label3:
        if z1 == 0 goto label4;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.os.PersistableBundle mInitBundle> = null;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAdminBroadcastPending> = 0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label4:
        return;
    }

    private void maybeSetDefaultProfileOwnerUserRestrictions()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r5;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.Owners $r3;
        java.util.Set $r4, $r8;
        java.lang.Integer $r6;
        android.os.UserManager $r7;
        boolean $z0, $z1;
        java.lang.Throwable $r9;
        java.util.Iterator r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: java.util.Set getProfileOwnerKeys()>();

        r10 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label03:
        if r2 == null goto label02;

     label04:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r7.<android.os.UserManager: boolean isManagedProfile(int)>(i0);

        if $z0 != 0 goto label06;

     label05:
        goto label02;

     label06:
        $r8 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: java.util.Set getDefaultEnabledForManagedProfiles()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeSetDefaultRestrictionsForAdminLocked(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.util.Set)>(i0, r2, $r8);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureUnknownSourcesRestrictionForProfileOwnerLocked(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,boolean)>(i0, r2, 0);

     label07:
        goto label02;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void maybeSetDefaultRestrictionsForAdminLocked(int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.util.Set)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.util.Iterator r1;
        java.util.Set $r2, $r8, $r9, r17;
        boolean $z0, $z2, $z3;
        java.lang.StringBuilder $r3, $r10;
        java.lang.String $r6, $r13, r20;
        android.util.ArraySet $r7;
        java.lang.Object $r14;
        android.os.Bundle $r15;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r16 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r17 := @parameter2: java.util.Set;

        $r2 = r16.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        $z0 = interfaceinvoke r17.<java.util.Set: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New user restrictions need to be set by default for user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r6);

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>(java.util.Collection)>(r17);

        $r8 = r16.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        interfaceinvoke $r7.<java.util.Set: boolean removeAll(java.util.Collection)>($r8);

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r14 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r14;

        $r15 = virtualinvoke r16.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle ensureUserRestrictions()>();

        virtualinvoke $r15.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r20, 1);

        goto label2;

     label3:
        $r9 = r16.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabled the following restrictions by default: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r13);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveUserRestrictionsLocked(int)>(i0);

     label4:
        return;
    }

    private void maybeStartSecurityLogMonitorOnActivityManagerReady()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r5;
        boolean $z0;
        com.android.server.devicepolicy.SecurityLogMonitor $r4;
        int $i0;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogIsLoggingEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getSecurityLoggingEnabledUser()>();

        virtualinvoke $r4.<com.android.server.devicepolicy.SecurityLogMonitor: void start(int)>($i0);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void runCryptoSelfTest()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybePauseDeviceWideLoggingLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void migratePersonalAppSuspensionLocked(int, int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        android.content.pm.PackageManagerInternal r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        boolean $z0;
        android.app.admin.DeviceAdminInfo $r4;
        java.lang.String $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r2 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $z0 = virtualinvoke r2.<android.content.pm.PackageManagerInternal: boolean isSuspendingAnyPackages(java.lang.String,int)>("android", i0);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "DO is not suspending any apps.");

        return;

     label1:
        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r5 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>($r5, i1);

        if $i2 < 30 goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "PO is targeting R+, keeping personal apps suspended.");

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended> = 1;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps> = 1;

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "PO isn\'t targeting R+, unsuspending personal apps.");

        virtualinvoke r2.<android.content.pm.PackageManagerInternal: void unsuspendForSuspendingPackage(java.lang.String,int)>("android", i0);

     label3:
        return;
    }

    private void migrateToProfileOnOrganizationOwnedDeviceIfCompLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i14, $i15;
        android.content.ComponentName r1, r26, r27;
        com.android.server.devicepolicy.Owners $r2, $r4, $r5;
        android.os.UserManager $r3;
        java.lang.String $r6, $r7, $r11, $r14, $r21;
        boolean $z0;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r12, r24, r25;
        android.app.admin.DeviceAdminInfo $r13;
        android.app.admin.DevicePolicyEventLogger $r15, $r16;
        java.lang.StringBuilder $r17;
        java.util.List r22;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void logIfVerbose(java.lang.String)>("Checking whether we need to migrate COMP ");

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if i0 != -10000 goto label01;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void logIfVerbose(java.lang.String)>("No DO found, skipping migration.");

        return;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r22 = virtualinvoke $r3.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        $i2 = interfaceinvoke r22.<java.util.List: int size()>();

        if $i2 == 2 goto label04;

        $i14 = interfaceinvoke r22.<java.util.List: int size()>();

        if $i14 != 1 goto label02;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void logIfVerbose(java.lang.String)>("Profile not found, skipping migration.");

        goto label03;

     label02:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ");

        $i15 = interfaceinvoke r22.<java.util.List: int size()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" profiles, skipping migration");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", $r21);

     label03:
        return;

     label04:
        i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getManagedUserId(int)>(i0);

        if i1 >= 0 goto label05;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Found DO and a profile, but it is not managed, skipping migration");

        return;

     label05:
        r24 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        r25 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i1);

        if r24 == null goto label10;

        if r25 != null goto label06;

        goto label10;

     label06:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r1 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r26 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i1);

        if r1 == null goto label09;

        if r26 != null goto label07;

        goto label09;

     label07:
        $r6 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7 = virtualinvoke r26.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label08;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "DO and PO are different packages, aborting migration.");

        return;

     label08:
        $r8 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Migrating COMP to PO on a corp owned device; primary user: %d; profile: %d", $r8);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r11);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Giving the PO additional power...");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void markProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked(android.content.ComponentName,int)>(r26, i1);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Migrating DO policies to PO...");

        $r12 = virtualinvoke r25.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void moveDoPoliciesToProfileParentAdminLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r24, $r12);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void migratePersonalAppSuspensionLocked(int,int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(i0, i1, r25);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Clearing the DO...");

        $r13 = r24.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r27 = virtualinvoke $r13.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int)>(r24, i0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Removing admin artifacts...");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeAdminArtifacts(android.content.ComponentName,int)>(r27, i0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Uninstalling the DO...");

        $r14 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallOrDisablePackage(java.lang.String,int)>($r14, i0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Migration complete.");

        $r15 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(137);

        $r16 = virtualinvoke $r15.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r26);

        virtualinvoke $r16.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label09:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot find PO or DO component name, aborting migration.");

        return;

     label10:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Failed to get either PO or DO admin, aborting migration.");

        return;
    }

    private void migrateUserRestrictionsForUser(android.os.UserHandle, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.util.Set, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle r1;
        java.util.Set r2, $r11;
        boolean z0, $z1, $z2, $z3, z4;
        android.os.Bundle r3, $r9, $r10, $r17, $r18;
        java.util.Iterator r6;
        java.lang.String r7, $r16;
        android.os.UserManagerInternal $r8, $r12;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r13;
        java.lang.Object $r19;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.os.UserHandle;

        r20 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter2: java.util.Set;

        z0 := @parameter3: boolean;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r3 = virtualinvoke $r8.<android.os.UserManagerInternal: android.os.Bundle getBaseUserRestrictions(int)>($i0);

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        $r11 = virtualinvoke r3.<android.os.Bundle: java.util.Set keySet()>();

        r6 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r19 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r19;

        $z1 = virtualinvoke r3.<android.os.Bundle: boolean getBoolean(java.lang.String)>(r7);

        if $z1 != 0 goto label02;

        goto label01;

     label02:
        if z0 == 0 goto label03;

        z4 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean canDeviceOwnerChange(java.lang.String)>(r7);

        goto label04;

     label03:
        $i5 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        z4 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean canProfileOwnerChange(java.lang.String,int)>(r7, $i5);

     label04:
        if z4 == 0 goto label06;

        if r2 == null goto label05;

        $z2 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r7);

        if $z2 == 0 goto label05;

        goto label06;

     label05:
        virtualinvoke $r10.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r7, 1);

        goto label07;

     label06:
        virtualinvoke $r9.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r7, 1);

     label07:
        goto label01;

     label08:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r12.<android.os.UserManagerInternal: void setBaseUserRestrictionsByDpmsForMigration(int,android.os.Bundle)>($i1, $r9);

        if r20 == null goto label09;

        $r17 = virtualinvoke r20.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle ensureUserRestrictions()>();

        virtualinvoke $r17.<android.os.Bundle: void clear()>();

        $r18 = virtualinvoke r20.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle ensureUserRestrictions()>();

        virtualinvoke $r18.<android.os.Bundle: void putAll(android.os.Bundle)>($r10);

        goto label10;

     label09:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ActiveAdmin for DO/PO not found. user=");

        $i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r16);

     label10:
        $i4 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i4);

        return;
    }

    private void migrateUserRestrictionsIfNecessaryLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.util.ArraySet r1, r16;
        java.util.Iterator r2;
        android.content.pm.UserInfo r3;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4, r15;
        com.android.server.devicepolicy.Owners $r5, $r10, $r12, $r14;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r6;
        android.os.UserManager $r7;
        java.util.List $r8;
        java.lang.Object $r9;
        android.os.UserHandle $r11, $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: boolean getDeviceOwnerUserRestrictionsNeedsMigration()>();

        if $z0 == 0 goto label1;

        r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        $r13 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void migrateUserRestrictionsForUser(android.os.UserHandle,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.util.Set,boolean)>($r13, r15, null, 1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(0);

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r14.<com.android.server.devicepolicy.Owners: void setDeviceOwnerUserRestrictionsMigrated()>();

     label1:
        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "no_outgoing_calls";

        $r6[1] = "no_sms";

        r1 = staticinvoke <com.google.android.collect.Sets: android.util.ArraySet newArraySet(java.lang.Object[])>($r6);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r8 = virtualinvoke $r7.<android.os.UserManager: java.util.List getUsers()>();

        r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r9;

        i0 = r3.<android.content.pm.UserInfo: int id>;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r10.<com.android.server.devicepolicy.Owners: boolean getProfileOwnerUserRestrictionsNeedsMigration(int)>(i0);

        if $z1 == 0 goto label5;

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

        if i0 != 0 goto label3;

        r16 = null;

        goto label4;

     label3:
        r16 = r1;

     label4:
        $r11 = virtualinvoke r3.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void migrateUserRestrictionsForUser(android.os.UserHandle,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.util.Set,boolean)>($r11, r4, r16, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r12.<com.android.server.devicepolicy.Owners: void setProfileOwnerUserRestrictionsMigrated(int)>(i0);

     label5:
        goto label2;

     label6:
        return;
    }

    private void moveDoPoliciesToProfileParentAdminLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1, r2;
        android.app.admin.PasswordPolicy $r3, $r8;
        int $i0, $i1, $i4, $i9, $i10, $i11, $i12, $i15, $i17;
        long $l2, $l5, $l7, $l13, $l14, $l16;
        byte $b3, $b6, $b8;
        android.util.ArrayMap $r4, $r5;
        boolean $z0, $z1, $z2;
        java.util.Set $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i0 = $r3.<android.app.admin.PasswordPolicy: int quality>;

        if $i0 != 0 goto label1;

        $r8 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy> = $r8;

     label1:
        $i1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        if $i1 != 0 goto label2;

        $i17 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength> = $i17;

     label2:
        $l2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label3;

        $l16 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout> = $l16;

     label3:
        $i4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if $i4 != 0 goto label4;

        $i15 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe> = $i15;

     label4:
        $l5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label5;

        $l14 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock> = $l14;

     label5:
        $l7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout>;

        $b8 = $l7 cmp 259200000L;

        if $b8 != 0 goto label6;

        $l13 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout> = $l13;

     label6:
        $i11 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        $i9 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        $i10 = $i9 & 438;

        $i12 = $i11 | $i10;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures> = $i12;

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos>;

        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos>;

        virtualinvoke $r5.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r4);

        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = $z0;

        $z1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime> = $z1;

        $z2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture> = $z2;

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        $r6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        interfaceinvoke $r7.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void moveDoUserRestrictionsToCopeParent(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r1, r2);

        return;
    }

    private void moveDoUserRestrictionsToCopeParent(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1, r2;
        java.util.Iterator r3;
        java.lang.String r4;
        android.os.Bundle $r5, $r6, $r9, $r10;
        java.util.Set $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        $r7 = virtualinvoke $r6.<android.os.Bundle: java.util.Set keySet()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $z1 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean canProfileOwnerOfOrganizationOwnedDeviceChange(java.lang.String)>(r4);

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle ensureUserRestrictions()>();

        $r10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        $z2 = virtualinvoke $r10.<android.os.Bundle: boolean getBoolean(java.lang.String)>(r4);

        virtualinvoke $r9.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r4, $z2);

     label3:
        goto label2;

     label4:
        return;
    }

    private void notifyAffiliatedProfileTransferOwnershipComplete(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.Bundle $r2;
        android.os.UserHandle $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.intent.extra.USER", $r3);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDeviceOwnerCommand(java.lang.String,android.os.Bundle)>("android.app.action.AFFILIATED_PROFILE_TRANSFER_OWNERSHIP_COMPLETE", $r2);

        return;
    }

    private void onBugreportFailed()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.concurrent.atomic.AtomicBoolean $r2, $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r5;
        android.app.NotificationManager $r6;
        android.os.Bundle $r7;
        android.content.BroadcastReceiver $r8, $r10;
        android.content.Context $r9, $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void systemPropertiesSet(java.lang.String,java.lang.String)>("ctl.stop", "bugreportd");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String,java.lang.String)>(null, null);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r6.<android.app.NotificationManager: void cancel(java.lang.String,int)>("DevicePolicyManager", 678432343);

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        virtualinvoke $r7.<android.os.Bundle: void putInt(java.lang.String,int)>("android.app.extra.BUGREPORT_FAILURE_REASON", 0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDeviceOwnerCommand(java.lang.String,android.os.Bundle)>("android.app.action.BUGREPORT_FAILED", $r7);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportConsentReceiver>;

        virtualinvoke $r9.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r8);

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportFinishedReceiver>;

        virtualinvoke $r11.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r10);

        return;
    }

    private void onBugreportFinished(android.content.Intent)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.net.Uri r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r5;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6, $r13;
        android.app.NotificationManager $r7, $r14;
        android.content.Context $r8, $r12;
        android.app.Notification $r9;
        android.os.UserHandle $r10;
        android.content.BroadcastReceiver $r11;
        android.content.Intent r15;
        java.lang.String r16, r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r15 := @parameter0: android.content.Intent;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Runnable mRemoteBugreportTimeoutRunnable>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r2);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        r1 = virtualinvoke r15.<android.content.Intent: android.net.Uri getData()>();

        r16 = null;

        if r1 == null goto label1;

        r16 = virtualinvoke r1.<android.net.Uri: java.lang.String toString()>();

     label1:
        r17 = virtualinvoke r15.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android.intent.extra.REMOTE_BUGREPORT_HASH");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void shareBugreportWithDeviceOwnerIfExists(java.lang.String,java.lang.String)>(r16, r17);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r14 = virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r14.<android.app.NotificationManager: void cancel(java.lang.String,int)>("DevicePolicyManager", 678432343);

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String,java.lang.String)>(r16, r17);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = staticinvoke <com.android.server.devicepolicy.RemoteBugreportUtils: android.app.Notification buildNotification(android.content.Context,int)>($r8, 3);

        $r10 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r7.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>("DevicePolicyManager", 678432343, $r9, $r10);

     label3:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportFinishedReceiver>;

        virtualinvoke $r12.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r11);

        return;
    }

    private void onBugreportSharingAccepted()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.String r2, r12;
        java.util.concurrent.atomic.AtomicBoolean $r3, $r5;
        com.android.server.devicepolicy.Owners $r4;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.app.NotificationManager $r7;
        android.content.Context $r8;
        android.app.Notification $r9;
        android.os.UserHandle $r10;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerRemoteBugreportUri()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r12 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: java.lang.String getDeviceOwnerRemoteBugreportHash()>();

        exitmonitor r1;

     label2:
        if r2 == null goto label3;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void shareBugreportWithDeviceOwnerIfExists(java.lang.String,java.lang.String)>(r2, r12);

        goto label4;

     label3:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label4;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = staticinvoke <com.android.server.devicepolicy.RemoteBugreportUtils: android.app.Notification buildNotification(android.content.Context,int)>($r8, 2);

        $r10 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r7.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>("DevicePolicyManager", 678432343, $r9, $r10);

     label4:
        return;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void onBugreportSharingDeclined()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2, $r4;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Runnable $r5;
        android.os.Handler $r6;
        android.content.BroadcastReceiver $r7;
        android.content.Context $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void systemPropertiesSet(java.lang.String,java.lang.String)>("ctl.stop", "bugreportd");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Runnable mRemoteBugreportTimeoutRunnable>;

        virtualinvoke $r6.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r5);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportFinishedReceiver>;

        virtualinvoke $r8.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r7);

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String,java.lang.String)>(null, null);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDeviceOwnerCommand(java.lang.String,android.os.Bundle)>("android.app.action.BUGREPORT_SHARING_DECLINED", null);

        return;
    }

    private void onLockSettingsReady()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver $r3;
        boolean $z0;
        android.os.UserManagerInternal $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r8;
        java.lang.String $r6, $r7;
        android.content.pm.PackageManagerInternal $r9;
        java.lang.Throwable $r10, $r11, $r12;
        java.lang.Object r13, r14, r16;
        java.util.List r15;
        android.app.ActivityManagerInternal r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r13;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void migrateUserRestrictionsIfNecessaryLocked()>();

        exitmonitor r13;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void cleanUpOldUsers()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeSetDefaultProfileOwnerUserRestrictions()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void handleStartUser(int)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogStart()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver mSetupContentObserver>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver: void register()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateUserSetupCompleteAndPaired()>();

        r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r14;

     label03:
        r15 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getKeepUninstalledPackagesLocked()>();

        exitmonitor r14;

     label04:
        if r15 == null goto label05;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r9 = virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        virtualinvoke $r9.<android.content.pm.PackageManagerInternal: void setKeepUninstalledPackages(java.util.List)>(r15);

     label05:
        r16 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r16;

     label06:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label07:
        if r1 == null goto label09;

     label08:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers>;

        virtualinvoke $r4.<android.os.UserManagerInternal: void setForceEphemeralUsers(boolean)>($z0);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r17 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>();

        $r6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String startUserSessionMessage>;

        virtualinvoke r17.<android.app.ActivityManagerInternal: void setSwitchingFromSystemUserMessage(java.lang.String)>($r6);

        $r7 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String endUserSessionMessage>;

        virtualinvoke r17.<android.app.ActivityManagerInternal: void setSwitchingToSystemUserMessage(java.lang.String)>($r7);

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void revertTransferOwnershipIfNecessaryLocked()>();

        exitmonitor r16;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r16;

     label13:
        throw $r10;

     label14:
        $r11 := @caughtexception;

     label15:
        exitmonitor r14;

     label16:
        throw $r11;

     label17:
        $r12 := @caughtexception;

     label18:
        exitmonitor r13;

     label19:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private boolean passwordQualityInvocationOrderCheckEnabled(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, $i2;
        com.android.internal.compat.IPlatformCompat $r3;
        android.os.RemoteException $r4;
        boolean z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.compat.IPlatformCompat mIPlatformCompat>;

        z0 = interfaceinvoke $r3.<com.android.internal.compat.IPlatformCompat: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>(123562444L, r1, i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to get a response from PLATFORM_COMPAT_SERVICE", $r4);

        $i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>(r1, i0);

        if $i2 <= 29 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void postTransfer(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void deleteTransferOwnershipMetadataFileLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendOwnerChangedBroadcast(java.lang.String,int)>(r1, i0);

        return;
    }

    private void prepareTransfer(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle, int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r2;
        android.os.PersistableBundle r3;
        int i0;
        java.lang.String r4;
        com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata $r5;
        com.android.server.devicepolicy.TransferOwnershipMetadataManager $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: android.os.PersistableBundle;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveTransferOwnershipBundleLocked(android.os.PersistableBundle,int)>(r3, i0);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.TransferOwnershipMetadataManager mTransferOwnershipMetadataManager>;

        $r5 = new com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata;

        specialinvoke $r5.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: void <init>(android.content.ComponentName,android.content.ComponentName,int,java.lang.String)>(r1, r2, i0, r4);

        virtualinvoke $r6.<com.android.server.devicepolicy.TransferOwnershipMetadataManager: boolean saveMetadataFile(com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata)>($r5);

        return;
    }

    private void pushActiveAdminPackages()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r3;
        int i0, $i1, i2;
        android.os.UserManager $r2;
        android.content.pm.UserInfo $r4;
        android.app.usage.UsageStatsManagerInternal $r5;
        java.util.Set $r6;
        java.lang.Throwable $r7;
        java.util.List r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r8 = virtualinvoke $r2.<android.os.UserManager: java.util.List getUsers()>();

        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label5;

     label3:
        $r3 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (android.content.pm.UserInfo) $r3;

        i0 = $r4.<android.content.pm.UserInfo: int id>;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal>;

        $r6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set getActiveAdminPackagesLocked(int)>(i0);

        virtualinvoke $r5.<android.app.usage.UsageStatsManagerInternal: void setActiveAdminApps(java.util.Set,int)>($r6, i0);

     label4:
        i2 = i2 + -1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void pushActiveAdminPackagesLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.app.usage.UsageStatsManagerInternal $r1;
        java.util.Set $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal>;

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set getActiveAdminPackagesLocked(int)>(i0);

        virtualinvoke $r1.<android.app.usage.UsageStatsManagerInternal: void setActiveAdminApps(java.util.Set,int)>($r2, i0);

        return;
    }

    private void pushAllMeteredRestrictedPackages()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r3;
        int i0, $i1, i2;
        android.os.UserManager $r2;
        android.content.pm.UserInfo $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        com.android.server.net.NetworkPolicyManagerInternal $r6;
        java.util.Set $r7;
        java.lang.Throwable $r8;
        java.util.List r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r9 = virtualinvoke $r2.<android.os.UserManager: java.util.List getUsers()>();

        $i1 = interfaceinvoke r9.<java.util.List: int size()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label5;

     label3:
        $r3 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (android.content.pm.UserInfo) $r3;

        i0 = $r4.<android.content.pm.UserInfo: int id>;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.server.net.NetworkPolicyManagerInternal getNetworkPolicyManagerInternal()>();

        $r7 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set getMeteredDisabledPackagesLocked(int)>(i0);

        virtualinvoke $r6.<com.android.server.net.NetworkPolicyManagerInternal: void setMeteredRestrictedPackagesAsync(java.util.Set,int)>($r7, i0);

     label4:
        i2 = i2 + -1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void pushMeteredDisabledPackagesLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        com.android.server.net.NetworkPolicyManagerInternal $r2;
        java.util.Set $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.server.net.NetworkPolicyManagerInternal getNetworkPolicyManagerInternal()>();

        $r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set getMeteredDisabledPackagesLocked(int)>(i0);

        virtualinvoke $r2.<com.android.server.net.NetworkPolicyManagerInternal: void setMeteredRestrictedPackages(java.util.Set,int)>($r3, i0);

        return;
    }

    private void pushUserRestrictions(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2;
        boolean z0, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, $r8, $r11, r15;
        com.android.server.pm.RestrictionsSet $r4;
        com.android.server.devicepolicy.Owners $r5;
        android.os.Bundle $r6, $r9, $r12, $r13, r16, r17;
        android.os.UserHandle $r7, $r10;
        java.lang.Throwable $r14;
        android.os.UserManagerInternal $r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r4 = new com.android.server.pm.RestrictionsSet;

        specialinvoke $r4.<com.android.server.pm.RestrictionsSet: void <init>()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z0 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: boolean isDeviceOwnerUserId(int)>(i0);

     label02:
        if z0 == 0 goto label09;

     label03:
        r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label04:
        if r15 != null goto label07;

     label05:
        exitmonitor r2;

     label06:
        return;

     label07:
        r16 = virtualinvoke r15.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getGlobalUserRestrictions(int)>(0);

        $r13 = virtualinvoke r15.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getLocalUserRestrictions(int)>(0);

        virtualinvoke $r4.<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>(i0, $r13);

     label08:
        goto label19;

     label09:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label10:
        if r3 != null goto label13;

     label11:
        exitmonitor r2;

     label12:
        return;

     label13:
        r17 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getGlobalUserRestrictions(int)>(1);

        $r6 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getLocalUserRestrictions(int)>(1);

        virtualinvoke $r4.<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>(i0, $r6);

     label14:
        r16 = r17;

     label15:
        $r7 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $i1 = virtualinvoke $r7.<android.os.UserHandle: int getIdentifier()>();

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>($i1);

        if $z2 == 0 goto label19;

     label16:
        $r8 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()>();

        $r9 = virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getGlobalUserRestrictions(int)>(2);

        staticinvoke <com.android.server.pm.UserRestrictionsUtils: void merge(android.os.Bundle,android.os.Bundle)>(r17, $r9);

     label17:
        $r10 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $i2 = virtualinvoke $r10.<android.os.UserHandle: int getIdentifier()>();

        $i3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>($i2);

        $r11 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()>();

        $r12 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle getLocalUserRestrictions(int)>(2);

        virtualinvoke $r4.<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>($i3, $r12);

     label18:
        r16 = r17;

     label19:
        exitmonitor r2;

     label20:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r18.<android.os.UserManagerInternal: void setDevicePolicyUserRestrictions(int,android.os.Bundle,com.android.server.pm.RestrictionsSet,boolean)>(i0, r16, $r4, z0);

        return;

     label21:
        $r14 := @caughtexception;

     label22:
        exitmonitor r2;

     label23:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private void putPrivateDnsSettings(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Y8_DG_Rz0enih3iXyl_Zqb0F5OE $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Y8_DG_Rz0enih3iXyl_Zqb0F5OE;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Y8_DG_Rz0enih3iXyl_Zqb0F5OE: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,java.lang.String)>(r0, r1, r2);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        return;
    }

    private void recordSecurityLogRetrievalTime()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        long l0, $l1;
        byte $b2;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $l1 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastSecurityLogRetrievalTime>;

        $b2 = l0 cmp $l1;

        if $b2 <= 0 goto label2;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastSecurityLogRetrievalTime> = l0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void registerRemoteBugreportReceivers()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.BroadcastReceiver $r1, $r5;
        android.content.Context $r2, $r6;
        android.content.IntentFilter $r4, r9;
        android.content.IntentFilter$MalformedMimeTypeException $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

     label1:
        r9 = new android.content.IntentFilter;

        specialinvoke r9.<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>("android.intent.action.REMOTE_BUGREPORT_DISPATCH", "application/vnd.android.bugreport");

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportFinishedReceiver>;

        virtualinvoke $r2.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r1, r9);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to set type application/vnd.android.bugreport", $r8);

     label4:
        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.action.REMOTE_BUGREPORT_SHARING_DECLINED");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.action.REMOTE_BUGREPORT_SHARING_ACCEPTED");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mRemoteBugreportConsentReceiver>;

        virtualinvoke $r6.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r5, $r4);

        return;

        catch android.content.IntentFilter$MalformedMimeTypeException from label1 to label2 with label3;
    }

    private void removeAdminArtifacts(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        boolean z0;
        android.app.admin.DeviceAdminInfo $r3;
        java.util.ArrayList $r4, $r7;
        android.util.ArrayMap $r5;
        java.lang.String $r12;
        java.lang.Throwable $r13;
        android.content.ComponentName r14;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r15;
        java.lang.StringBuilder r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r14 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r14, i0);

     label02:
        if r15 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r3 = r15.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        z0 = virtualinvoke $r3.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(5);

        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r15);

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r14);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void validatePasswordOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r2);

     label06:
        if z0 == 0 goto label08;

     label07:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void resetGlobalProxyLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r2);

     label08:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushActiveAdminPackagesLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushMeteredDisabledPackagesLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(int)>(i0);

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        virtualinvoke $r7.<java.util.ArrayList: boolean remove(java.lang.Object)>(r14);

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device admin ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" removed from user ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

     label09:
        exitmonitor r1;

     label10:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

        return;

     label11:
        $r13 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void removeCaApprovalsIfNeeded(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Iterator r1;
        boolean z0, $z1, $z2, $z3, z4;
        java.lang.Object r2, $r5;
        android.os.UserManager $r3;
        java.util.List $r4;
        com.android.internal.widget.LockPatternUtils $r6, $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r7;
        android.util.ArraySet $r8;
        com.android.server.devicepolicy.CertificateMonitor $r9;
        java.lang.Throwable $r11;
        android.content.pm.UserInfo r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.content.pm.UserInfo) $r5;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $i1 = r12.<android.content.pm.UserInfo: int id>;

        z0 = virtualinvoke $r6.<com.android.internal.widget.LockPatternUtils: boolean isSecure(int)>($i1);

        z4 = z0;

        $z2 = virtualinvoke r12.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z2 == 0 goto label2;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $i4 = r12.<android.content.pm.UserInfo: int id>;

        $i5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>($i4);

        $z3 = virtualinvoke $r10.<com.android.internal.widget.LockPatternUtils: boolean isSecure(int)>($i5);

        z4 = z0 | $z3;

     label2:
        if z4 != 0 goto label8;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label3:
        $i2 = r12.<android.content.pm.UserInfo: int id>;

        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i2);

        $r8 = $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

        virtualinvoke $r8.<android.util.ArraySet: void clear()>();

        $i3 = r12.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i3);

        exitmonitor r2;

     label4:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.CertificateMonitor mCertificateMonitor>;

        virtualinvoke $r9.<com.android.server.devicepolicy.CertificateMonitor: void onCertificateApprovalsChanged(int)>(i0);

        goto label8;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r11;

     label8:
        goto label1;

     label9:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private java.util.List removeInvalidPkgsForMeteredDataRestriction(int, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, i2;
        java.util.List r1;
        java.util.Set r2;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        boolean $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.content.pm.IPackageManager $r7;
        android.os.RemoteException $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set getActiveAdminPackagesLocked(int)>(i0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label6;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r9 = (java.lang.String) $r5;

        $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z1 == 0 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label5;

     label2:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.IPackageManager getIPackageManager()>();

        $z2 = interfaceinvoke $r7.<android.content.pm.IPackageManager: boolean isPackageAvailable(java.lang.String,int)>(r9, i0);

        if $z2 != 0 goto label3;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r9);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        i2 = i2 + -1;

        goto label1;

     label6:
        interfaceinvoke r1.<java.util.List: boolean removeAll(java.util.Collection)>($r4);

        return $r4;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private boolean removeOverrideApnUnchecked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$wdijrwi7iS5DMK0OmCCLo7_PkXA $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 = 0;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$wdijrwi7iS5DMK0OmCCLo7_PkXA;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$wdijrwi7iS5DMK0OmCCLo7_PkXA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 <= 0 goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    private void removePackageIfRequired(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)>(r1, i0);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void startUninstallIntent(java.lang.String,int)>(r1, i0);

     label1:
        return;
    }

    private void resetGlobalProxyLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $r3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $z0 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z0 == 0 goto label2;

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec>;

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveGlobalProxyLocked(java.lang.String,java.lang.String)>($r7, $r6);

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveGlobalProxyLocked(java.lang.String,java.lang.String)>(null, null);

        return;
    }

    private void resetInactivePasswordRequirementsIfRPlus(int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        android.app.admin.DeviceAdminInfo $r1;
        java.lang.String $r2;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        android.app.admin.PasswordPolicy r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r1 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r2 = virtualinvoke $r1.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean passwordQualityInvocationOrderCheckEnabled(java.lang.String,int)>($r2, i0);

        if $z0 == 0 goto label2;

        r4 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i1 = r4.<android.app.admin.PasswordPolicy: int quality>;

        if $i1 >= 131072 goto label1;

        r4.<android.app.admin.PasswordPolicy: int length> = 0;

     label1:
        $i2 = r4.<android.app.admin.PasswordPolicy: int quality>;

        if $i2 >= 393216 goto label2;

        r4.<android.app.admin.PasswordPolicy: int letters> = 1;

        r4.<android.app.admin.PasswordPolicy: int upperCase> = 0;

        r4.<android.app.admin.PasswordPolicy: int lowerCase> = 0;

        r4.<android.app.admin.PasswordPolicy: int numeric> = 1;

        r4.<android.app.admin.PasswordPolicy: int symbols> = 1;

        r4.<android.app.admin.PasswordPolicy: int nonLetter> = 0;

     label2:
        return;
    }

    private boolean resetPasswordInternal(java.lang.String, long, byte[], int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, l3;
        int i1, i2, $i4, $i5, $i6, $i7, $i8, i11, i13;
        android.app.admin.PasswordMetrics r1, r21;
        boolean $z0, $z1, z2, z3, z4, z5, z6;
        byte[] $r2, r19;
        com.android.internal.widget.LockPatternUtils $r3, $r6, r27;
        com.android.internal.widget.LockscreenCredential $r4, r26;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r7, $r8, $r14, $r25;
        java.lang.Object $r10, r20, r29;
        java.lang.String $r12, r18;
        java.lang.Throwable $r13, $r15, $r16, $r17, r28;
        java.util.List r22;
        java.lang.StringBuilder r23;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r24;
        byte $b12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r18 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r19 := @parameter2: byte[];

        i11 := @parameter3: int;

        i1 := @parameter4: int;

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r20;

     label01:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)>(i2);

        $z0 = virtualinvoke r18.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        r21 = new android.app.admin.PasswordMetrics;

        specialinvoke r21.<android.app.admin.PasswordMetrics: void <init>(int)>(-1);

        r22 = staticinvoke <android.app.admin.PasswordMetrics: java.util.List validatePasswordMetrics(android.app.admin.PasswordMetrics,int,boolean,android.app.admin.PasswordMetrics)>(r1, 0, 0, r21);

     label02:
        goto label04;

     label03:
        $r2 = virtualinvoke r18.<java.lang.String: byte[] getBytes()>();

        r22 = staticinvoke <android.app.admin.PasswordMetrics: java.util.List validatePassword(android.app.admin.PasswordMetrics,int,boolean,byte[])>(r1, 0, 0, $r2);

     label04:
        $z1 = interfaceinvoke r22.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to reset password due to constraint violation: ");

        $r10 = interfaceinvoke r22.<java.util.List: java.lang.Object get(int)>(0);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

        exitmonitor r20;

     label05:
        return 0;

     label06:
        exitmonitor r20;

     label07:
        r24 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i2);

        $i4 = r24.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i4 < 0 goto label08;

        $i8 = r24.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i8 == i1 goto label08;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "resetPassword: already set by another uid and not entered by user");

        return 0;

     label08:
        z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerDeviceOwner(int)>(i1);

        $i5 = i11 & 2;

        if $i5 == 0 goto label09;

        z3 = 1;

        goto label10;

     label09:
        z3 = 0;

     label10:
        if z2 == 0 goto label11;

        if z3 == 0 goto label11;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDoNotAskCredentialsOnBoot()>();

     label11:
        $r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l3 = virtualinvoke $r25.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

        r26 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPasswordOrNone(java.lang.CharSequence)>(r18);

        $b12 = l0 cmp 0L;

        if $b12 == 0 goto label17;

        if r19 != null goto label12;

        goto label17;

     label12:
        r27 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

     label13:
        z4 = virtualinvoke r27.<com.android.internal.widget.LockPatternUtils: boolean setLockCredentialWithToken(com.android.internal.widget.LockscreenCredential,long,byte[],int)>(r26, l0, r19, i2);

     label14:
        if z4 != 0 goto label15;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l3);

        return 0;

     label15:
        goto label19;

     label16:
        $r15 := @caughtexception;

        r28 = $r15;

        goto label33;

     label17:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r4 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        z5 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>(r26, $r4, i2);

     label18:
        if z5 != 0 goto label19;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l3);

        return 0;

     label19:
        z6 = 0;

        $i6 = i11 & 1;

        if $i6 == 0 goto label20;

        z6 = 1;

     label20:
        if z6 == 0 goto label23;

     label21:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        virtualinvoke $r6.<com.android.internal.widget.LockPatternUtils: void requireStrongAuth(int,int)>(2, -1);

     label22:
        goto label23;

     label23:
        i13 = -1;

     label24:
        r29 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r29;

     label25:
        if z6 == 0 goto label26;

        i13 = i1;

     label26:
        $i7 = r24.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i7 == i13 goto label27;

        r24.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = i13;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i2);

     label27:
        exitmonitor r29;

     label28:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l3);

        return 1;

     label29:
        $r17 := @caughtexception;

     label30:
        exitmonitor r29;

     label31:
        throw $r17;

     label32:
        $r13 := @caughtexception;

        r28 = $r13;

     label33:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l3);

        throw r28;

     label34:
        $r16 := @caughtexception;

     label35:
        exitmonitor r20;

     label36:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label03 to label04 with label34;
        catch java.lang.Throwable from label04 to label05 with label34;
        catch java.lang.Throwable from label06 to label07 with label34;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label13 to label14 with label32;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.lang.Throwable from label21 to label22 with label32;
        catch java.lang.Throwable from label24 to label25 with label32;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
        catch java.lang.Throwable from label31 to label32 with label32;
        catch java.lang.Throwable from label35 to label36 with label34;
    }

    private android.content.ComponentName resolveDelegateReceiver(java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0, $i1, i4, i5;
        java.lang.Object $r1, $r6, r23;
        android.content.Intent $r2;
        android.content.pm.IPackageManager $r4;
        android.content.pm.ParceledListSlice $r5;
        android.content.pm.ResolveInfo $r7;
        android.content.pm.ActivityInfo $r8;
        android.content.ComponentName $r9;
        java.lang.StringBuilder $r10, $r15;
        java.lang.String $r14, $r18, r21, r22, r26;
        android.os.RemoteException $r19;
        java.lang.Throwable $r20;
        java.util.List r24, r28;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r21 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        r23 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r23;

     label01:
        r24 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatePackagesInternalLocked(java.lang.String,int)>(r21, i4);

        exitmonitor r23;

     label02:
        $i0 = interfaceinvoke r24.<java.util.List: int size()>();

        if $i0 != 0 goto label03;

        return null;

     label03:
        $i1 = interfaceinvoke r24.<java.util.List: int size()>();

        if $i1 <= 1 goto label04;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one delegate holds ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", $r18);

        return null;

     label04:
        $r1 = interfaceinvoke r24.<java.util.List: java.lang.Object get(int)>(0);

        r26 = (java.lang.String) $r1;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>(r22);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r26);

     label05:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r5 = interfaceinvoke $r4.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>($r2, null, 0, i4);

        r28 = virtualinvoke $r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label06:
        i5 = interfaceinvoke r28.<java.util.List: int size()>();

        if i5 < 1 goto label08;

        if i5 <= 1 goto label07;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" defines more than one delegate receiver for ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r14);

     label07:
        $r6 = interfaceinvoke r28.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (android.content.pm.ResolveInfo) $r6;

        $r8 = $r7.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = virtualinvoke $r8.<android.content.pm.ActivityInfo: android.content.ComponentName getComponentName()>();

        return $r9;

     label08:
        return null;

     label09:
        $r19 := @caughtexception;

        return null;

     label10:
        $r20 := @caughtexception;

     label11:
        exitmonitor r23;

     label12:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void revertTransferOwnershipIfNecessaryLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata r1;
        com.android.server.devicepolicy.TransferOwnershipMetadataManager $r2, $r3;
        boolean $z0, $z1, $z2;
        java.lang.String $r4, $r5;
        int $i1, $i2, $i3, $i4;
        android.content.ComponentName $r6, $r7, $r8, $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.TransferOwnershipMetadataManager mTransferOwnershipMetadataManager>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.TransferOwnershipMetadataManager: boolean metadataFileExists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Owner transfer metadata file exists! Reverting transfer.");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.TransferOwnershipMetadataManager mTransferOwnershipMetadataManager>;

        r1 = virtualinvoke $r3.<com.android.server.devicepolicy.TransferOwnershipMetadataManager: com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata loadMetadataFile()>();

        $r4 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: java.lang.String adminType>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("profile-owner");

        if $z1 == 0 goto label2;

        $r9 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: android.content.ComponentName targetComponent>;

        $r8 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: android.content.ComponentName sourceComponent>;

        $i3 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: int userId>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void transferProfileOwnershipLocked(android.content.ComponentName,android.content.ComponentName,int)>($r9, $r8, $i3);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void deleteTransferOwnershipMetadataFileLocked()>();

        $i4 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: int userId>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void deleteTransferOwnershipBundleLocked(int)>($i4);

        goto label3;

     label2:
        $r5 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: java.lang.String adminType>;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("device-owner");

        if $z2 == 0 goto label3;

        $r7 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: android.content.ComponentName targetComponent>;

        $r6 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: android.content.ComponentName sourceComponent>;

        $i1 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: int userId>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void transferDeviceOwnershipLocked(android.content.ComponentName,android.content.ComponentName,int)>($r7, $r6, $i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void deleteTransferOwnershipMetadataFileLocked()>();

        $i2 = r1.<com.android.server.devicepolicy.TransferOwnershipMetadataManager$Metadata: int userId>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void deleteTransferOwnershipBundleLocked(int)>($i2);

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateSystemUpdateFreezePeriodsRecord(boolean)>(1);

        return;
    }

    private void saveGlobalProxyLocked(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String $r1, $r3, $r4, $r10, $r12, $r13, r15, r16, r17, r18, r21;
        int $i0, i2, i3, i4;
        android.net.ProxyInfo $r2;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6, $r7;
        java.lang.StringBuilder $r8;
        java.lang.Throwable $r14;
        java.lang.String[] r19;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

        r17 = r16;

        if r16 != null goto label1;

        r17 = "";

     label1:
        r18 = r15;

        if r15 != null goto label2;

        r18 = "";

     label2:
        $r1 = virtualinvoke r18.<java.lang.String: java.lang.String trim()>();

        r19 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i2 = 8080;

        i3 = 8080;

        $i0 = lengthof r19;

        if $i0 <= 1 goto label7;

     label3:
        $r13 = r19[1];

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

     label4:
        i2 = i4;

     label5:
        i3 = i2;

        goto label7;

     label6:
        $r14 := @caughtexception;

        goto label5;

     label7:
        r21 = virtualinvoke r17.<java.lang.String: java.lang.String trim()>();

        $r2 = new android.net.ProxyInfo;

        $r3 = r19[0];

        specialinvoke $r2.<android.net.ProxyInfo: void <init>(java.lang.String,int,java.lang.String)>($r3, i3, r21);

        $z0 = virtualinvoke $r2.<android.net.ProxyInfo: boolean isValid()>();

        if $z0 != 0 goto label8;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r10 = virtualinvoke $r2.<android.net.ProxyInfo: java.lang.String toString()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

        return;

     label8:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = r19[0];

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutString(java.lang.String,java.lang.String)>("global_http_proxy_host", $r4);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutInt(java.lang.String,int)>("global_http_proxy_port", i3);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutString(java.lang.String,java.lang.String)>("global_http_proxy_exclusion_list", r21);

        return;

        catch java.lang.NumberFormatException from label3 to label4 with label6;
    }

    private void saveSettingsLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i18, $i19, $i20, $i21, $i22, i23, $i24, i25, i26, i27, i28, $i29, i30, i31, i32;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        com.android.internal.util.JournaledFile r2;
        com.android.internal.util.FastXmlSerializer r3;
        java.util.Iterator r4, r69, r71;
        java.lang.String r5, $r7, $r17, $r21, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r35, $r36, $r37, $r38, $r43, $r49, $r50, $r51, $r52, $r53, $r55, r64, r68, r70, r72, r73;
        java.nio.charset.Charset $r6;
        java.lang.Boolean $r8;
        android.content.ComponentName $r9, $r42, $r54;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.util.ArrayList $r10, $r39;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r11;
        java.util.List $r12, $r16, $r18, $r31, r65;
        java.util.Set $r13, $r15;
        long $l6, $l8, $l10, $l12, $l14, $l15, $l16, $l17;
        byte $b7, $b9, $b11, $b13;
        android.os.PersistableBundle $r14, $r22;
        java.lang.Object $r19, $r20, $r27, $r32, $r34, $r40, $r45, $r47, $r48;
        android.util.ArraySet $r33, $r67;
        android.app.admin.DeviceAdminInfo $r41;
        android.util.ArrayMap $r44, $r46, $r63;
        java.lang.Throwable $r56, $r57, $r58, $r59, r74;
        java.io.FileOutputStream r60, r61;
        java.io.File r62;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r66;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r60 = null;

     label001:
        r61 = new java.io.FileOutputStream;

     label002:
        r60 = null;

     label003:
        r62 = virtualinvoke r2.<com.android.internal.util.JournaledFile: java.io.File chooseForWrite()>();

     label004:
        r60 = null;

     label005:
        specialinvoke r61.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r62, 0);

     label006:
        r3 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r3.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r61, $r7);

     label007:
        r60 = r61;

     label008:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r8);

     label009:
        r60 = r61;

     label010:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "policies");

     label011:
        r60 = r61;

     label012:
        $r9 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider>;

        if $r9 == null goto label016;

     label013:
        r60 = r61;

     label014:
        $r54 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider>;

        $r55 = virtualinvoke $r54.<android.content.ComponentName: java.lang.String flattenToString()>();

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "permission-provider", $r55);

     label015:
        goto label016;

     label016:
        r60 = r61;

     label017:
        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        if $z0 == 0 goto label020;

     label018:
        r60 = r61;

     label019:
        $r53 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "setup-complete", $r53);

     label020:
        r60 = r61;

     label021:
        $z1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPaired>;

        if $z1 == 0 goto label024;

     label022:
        r60 = r61;

     label023:
        $r52 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "device-paired", $r52);

     label024:
        r60 = r61;

     label025:
        $z2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mDeviceProvisioningConfigApplied>;

        if $z2 == 0 goto label028;

     label026:
        r60 = r61;

     label027:
        $r51 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "device-provisioning-config-applied", $r51);

     label028:
        r60 = r61;

     label029:
        $i1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState>;

        if $i1 == 0 goto label032;

     label030:
        r60 = r61;

     label031:
        $i22 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState>;

        $r50 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i22);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "provisioning-state", $r50);

     label032:
        r60 = r61;

     label033:
        $i2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPermissionPolicy>;

        if $i2 == 0 goto label036;

     label034:
        r60 = r61;

     label035:
        $i21 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPermissionPolicy>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i21);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "permission-policy", $r49);

     label036:
        i23 = 0;

     label037:
        r60 = r61;

     label038:
        $r63 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $i24 = virtualinvoke $r63.<android.util.ArrayMap: int size()>();

        if i23 >= $i24 goto label059;

     label039:
        r60 = r61;

     label040:
        $r44 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r45 = virtualinvoke $r44.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i23);

        r64 = (java.lang.String) $r45;

     label041:
        r60 = r61;

     label042:
        $r46 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r47 = virtualinvoke $r46.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i23);

        r65 = (java.util.List) $r47;

     label043:
        r60 = r61;

     label044:
        r4 = interfaceinvoke r65.<java.util.List: java.util.Iterator iterator()>();

     label045:
        r60 = r61;

     label046:
        $z14 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label058;

     label047:
        r60 = r61;

     label048:
        $r48 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r48;

     label049:
        r60 = r61;

     label050:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "delegation");

     label051:
        r60 = r61;

     label052:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "delegatePackage", r64);

     label053:
        r60 = r61;

     label054:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "scope", r5);

     label055:
        r60 = r61;

     label056:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "delegation");

     label057:
        goto label045;

     label058:
        i23 = i23 + 1;

        goto label037;

     label059:
        r60 = r61;

     label060:
        $r10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i25 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

     label061:
        i26 = 0;

     label062:
        if i26 >= i25 goto label074;

        r60 = r61;

     label063:
        $r39 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r40 = virtualinvoke $r39.<java.util.ArrayList: java.lang.Object get(int)>(i26);

        r66 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r40;

     label064:
        if r66 == null goto label073;

        r60 = r61;

     label065:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "admin");

     label066:
        r60 = r61;

     label067:
        $r41 = r66.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r42 = virtualinvoke $r41.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r43 = virtualinvoke $r42.<android.content.ComponentName: java.lang.String flattenToString()>();

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r43);

     label068:
        r60 = r61;

     label069:
        virtualinvoke r66.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeToXml(org.xmlpull.v1.XmlSerializer)>(r3);

     label070:
        r60 = r61;

     label071:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "admin");

     label072:
        goto label073;

     label073:
        i26 = i26 + 1;

        goto label062;

     label074:
        r60 = r61;

     label075:
        i27 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

     label076:
        if i27 < 0 goto label082;

        r60 = r61;

     label077:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "password-owner");

     label078:
        r60 = r61;

     label079:
        $i20 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i20);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r38);

     label080:
        r60 = r61;

     label081:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "password-owner");

     label082:
        r60 = r61;

     label083:
        $i3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i3 == 0 goto label090;

     label084:
        r60 = r61;

     label085:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "failed-password-attempts");

     label086:
        r60 = r61;

     label087:
        $i19 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i19);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r37);

     label088:
        r60 = r61;

     label089:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "failed-password-attempts");

     label090:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z3 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsFileBasedEncryptionEnabled()>();

        if $z3 != 0 goto label091;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "password-validity");

        $z13 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPasswordValidAtLastCheckpoint>;

        $r36 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z13);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r36);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "password-validity");

     label091:
        i28 = 0;

     label092:
        $r67 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

        $i29 = virtualinvoke $r67.<android.util.ArraySet: int size()>();

        if i28 >= $i29 goto label094;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "accepted-ca-certificate");

        $r33 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

        $r34 = virtualinvoke $r33.<android.util.ArraySet: java.lang.Object valueAt(int)>(i28);

        $r35 = (java.lang.String) $r34;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r35);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "accepted-ca-certificate");

     label093:
        i28 = i28 + 1;

        goto label092;

     label094:
        i30 = 0;

     label095:
        $r12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $i4 = interfaceinvoke $r12.<java.util.List: int size()>();

        if i30 >= $i4 goto label097;

        $r31 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(i30);

        r68 = (java.lang.String) $r32;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "lock-task-component");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", r68);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "lock-task-component");

     label096:
        i30 = i30 + 1;

        goto label095;

     label097:
        $i5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures>;

        if $i5 == 0 goto label098;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "lock-task-features");

        $i18 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i18);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r30);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "lock-task-features");

     label098:
        $z4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mSecondaryLockscreenEnabled>;

        if $z4 == 0 goto label099;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "secondary-lock-screen");

        $r29 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r29);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "secondary-lock-screen");

     label099:
        $z5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled>;

        if $z5 == 0 goto label100;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "statusbar");

        $z12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled>;

        $r28 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z12);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "disabled", $r28);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "statusbar");

     label100:
        $z6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean doNotAskCredentialsOnBoot>;

        if $z6 == 0 goto label101;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "do-not-ask-credentials-on-boot");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "do-not-ask-credentials-on-boot");

     label101:
        $r13 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds>;

        r69 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label102:
        $z15 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label104;

        $r27 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        r70 = (java.lang.String) $r27;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "affiliation-id");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "id", r70);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "affiliation-id");

     label103:
        goto label102;

     label104:
        $l6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastSecurityLogRetrievalTime>;

        $b7 = $l6 cmp 0L;

        if $b7 < 0 goto label105;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "last-security-log-retrieval");

        $l17 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastSecurityLogRetrievalTime>;

        $r26 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l17);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r26);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "last-security-log-retrieval");

     label105:
        $l8 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastBugReportRequestTime>;

        $b9 = $l8 cmp 0L;

        if $b9 < 0 goto label106;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "last-bug-report-request");

        $l16 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastBugReportRequestTime>;

        $r25 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l16);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r25);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "last-bug-report-request");

     label106:
        $l10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastNetworkLogsRetrievalTime>;

        $b11 = $l10 cmp 0L;

        if $b11 < 0 goto label107;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "last-network-log-retrieval");

        $l15 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastNetworkLogsRetrievalTime>;

        $r24 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l15);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r24);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "last-network-log-retrieval");

     label107:
        $z7 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAdminBroadcastPending>;

        if $z7 == 0 goto label108;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "admin-broadcast-pending");

        $z11 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAdminBroadcastPending>;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z11);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r23);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "admin-broadcast-pending");

     label108:
        $r14 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.os.PersistableBundle mInitBundle>;

        if $r14 == null goto label109;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "initialization-bundle");

        $r22 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.os.PersistableBundle mInitBundle>;

        virtualinvoke $r22.<android.os.PersistableBundle: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r3);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "initialization-bundle");

     label109:
        $l12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $b13 = $l12 cmp 0L;

        if $b13 == 0 goto label110;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "password-token");

        $l14 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $r21 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l14);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r21);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "password-token");

     label110:
        $z8 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mCurrentInputMethodSet>;

        if $z8 == 0 goto label111;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "current-ime-set");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "current-ime-set");

     label111:
        $r15 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        r71 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label112:
        $z16 = interfaceinvoke r71.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label114;

        $r20 = interfaceinvoke r71.<java.util.Iterator: java.lang.Object next()>();

        r72 = (java.lang.String) $r20;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "owner-installed-ca-cert");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "alias", r72);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "owner-installed-ca-cert");

     label113:
        goto label112;

     label114:
        i31 = 0;

     label115:
        $r16 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        i32 = interfaceinvoke $r16.<java.util.List: int size()>();

     label116:
        if i31 >= i32 goto label119;

     label117:
        $r18 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i31);

        r73 = (java.lang.String) $r19;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "protected-packages");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", r73);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "protected-packages");

     label118:
        i31 = i31 + 1;

        goto label116;

     label119:
        $z9 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended>;

        if $z9 == 0 goto label120;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "apps-suspended");

        $z10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended>;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z10);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r17);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "apps-suspended");

     label120:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "policies");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        virtualinvoke r61.<java.io.FileOutputStream: void flush()>();

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r61);

        virtualinvoke r61.<java.io.FileOutputStream: void close()>();

        virtualinvoke r2.<com.android.internal.util.JournaledFile: void commit()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendChangedNotification(int)>(i0);

     label121:
        goto label130;

     label122:
        $r57 := @caughtexception;

        r74 = $r57;

        goto label125;

     label123:
        $r58 := @caughtexception;

        r74 = $r58;

        goto label125;

     label124:
        $r56 := @caughtexception;

        r61 = r60;

        r74 = $r56;

     label125:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "failed writing file", r74);

        if r61 == null goto label129;

     label126:
        virtualinvoke r61.<java.io.FileOutputStream: void close()>();

     label127:
        goto label129;

     label128:
        $r59 := @caughtexception;

        goto label129;

     label129:
        virtualinvoke r2.<com.android.internal.util.JournaledFile: void rollback()>();

     label130:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label001 to label002 with label124;
        catch java.io.IOException from label001 to label002 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label003 to label004 with label124;
        catch java.io.IOException from label003 to label004 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label005 to label006 with label124;
        catch java.io.IOException from label005 to label006 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label006 to label007 with label123;
        catch java.io.IOException from label006 to label007 with label123;
        catch org.xmlpull.v1.XmlPullParserException from label008 to label009 with label124;
        catch java.io.IOException from label008 to label009 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label010 to label011 with label124;
        catch java.io.IOException from label010 to label011 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label012 to label013 with label124;
        catch java.io.IOException from label012 to label013 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label014 to label015 with label124;
        catch java.io.IOException from label014 to label015 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label017 to label018 with label124;
        catch java.io.IOException from label017 to label018 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label019 to label020 with label124;
        catch java.io.IOException from label019 to label020 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label021 to label022 with label124;
        catch java.io.IOException from label021 to label022 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label023 to label024 with label124;
        catch java.io.IOException from label023 to label024 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label025 to label026 with label124;
        catch java.io.IOException from label025 to label026 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label027 to label028 with label124;
        catch java.io.IOException from label027 to label028 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label029 to label030 with label124;
        catch java.io.IOException from label029 to label030 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label031 to label032 with label124;
        catch java.io.IOException from label031 to label032 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label033 to label034 with label124;
        catch java.io.IOException from label033 to label034 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label035 to label036 with label124;
        catch java.io.IOException from label035 to label036 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label038 to label039 with label124;
        catch java.io.IOException from label038 to label039 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label040 to label041 with label124;
        catch java.io.IOException from label040 to label041 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label042 to label043 with label124;
        catch java.io.IOException from label042 to label043 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label044 to label045 with label124;
        catch java.io.IOException from label044 to label045 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label046 to label047 with label124;
        catch java.io.IOException from label046 to label047 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label048 to label049 with label124;
        catch java.io.IOException from label048 to label049 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label050 to label051 with label124;
        catch java.io.IOException from label050 to label051 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label052 to label053 with label124;
        catch java.io.IOException from label052 to label053 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label054 to label055 with label124;
        catch java.io.IOException from label054 to label055 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label056 to label057 with label124;
        catch java.io.IOException from label056 to label057 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label060 to label061 with label124;
        catch java.io.IOException from label060 to label061 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label063 to label064 with label124;
        catch java.io.IOException from label063 to label064 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label065 to label066 with label124;
        catch java.io.IOException from label065 to label066 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label067 to label068 with label124;
        catch java.io.IOException from label067 to label068 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label069 to label070 with label124;
        catch java.io.IOException from label069 to label070 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label071 to label072 with label124;
        catch java.io.IOException from label071 to label072 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label075 to label076 with label124;
        catch java.io.IOException from label075 to label076 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label077 to label078 with label124;
        catch java.io.IOException from label077 to label078 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label079 to label080 with label124;
        catch java.io.IOException from label079 to label080 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label081 to label082 with label124;
        catch java.io.IOException from label081 to label082 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label083 to label084 with label124;
        catch java.io.IOException from label083 to label084 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label085 to label086 with label124;
        catch java.io.IOException from label085 to label086 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label087 to label088 with label124;
        catch java.io.IOException from label087 to label088 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label089 to label090 with label124;
        catch java.io.IOException from label089 to label090 with label124;
        catch org.xmlpull.v1.XmlPullParserException from label090 to label091 with label122;
        catch java.io.IOException from label090 to label091 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label092 to label093 with label122;
        catch java.io.IOException from label092 to label093 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label095 to label096 with label122;
        catch java.io.IOException from label095 to label096 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label097 to label098 with label122;
        catch java.io.IOException from label097 to label098 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label098 to label099 with label122;
        catch java.io.IOException from label098 to label099 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label099 to label100 with label122;
        catch java.io.IOException from label099 to label100 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label100 to label101 with label122;
        catch java.io.IOException from label100 to label101 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label101 to label102 with label122;
        catch java.io.IOException from label101 to label102 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label102 to label103 with label122;
        catch java.io.IOException from label102 to label103 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label104 to label105 with label122;
        catch java.io.IOException from label104 to label105 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label105 to label106 with label122;
        catch java.io.IOException from label105 to label106 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label106 to label107 with label122;
        catch java.io.IOException from label106 to label107 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label107 to label108 with label122;
        catch java.io.IOException from label107 to label108 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label108 to label109 with label122;
        catch java.io.IOException from label108 to label109 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label109 to label110 with label122;
        catch java.io.IOException from label109 to label110 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label110 to label111 with label122;
        catch java.io.IOException from label110 to label111 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label111 to label112 with label122;
        catch java.io.IOException from label111 to label112 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label112 to label113 with label122;
        catch java.io.IOException from label112 to label113 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label115 to label116 with label122;
        catch java.io.IOException from label115 to label116 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label117 to label118 with label122;
        catch java.io.IOException from label117 to label118 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label119 to label120 with label122;
        catch java.io.IOException from label119 to label120 with label122;
        catch org.xmlpull.v1.XmlPullParserException from label120 to label121 with label122;
        catch java.io.IOException from label120 to label121 with label122;
        catch java.io.IOException from label126 to label127 with label128;
    }

    private void saveUserRestrictionsLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendChangedNotification(int)>(i0);

        return;
    }

    private void sendActiveAdminCommand(java.lang.String, android.os.Bundle, int, android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.Bundle r1;
        int i0;
        android.content.ComponentName r2;
        android.content.Intent $r3;
        android.content.Context $r5;
        android.os.UserHandle $r6;
        java.lang.String r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.ComponentName;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>(r8);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r2);

        if r1 == null goto label1;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r1);

     label1:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r3, $r6);

        return;
    }

    private void sendAdminCommandForLockscreenPoliciesLocked(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1;
        android.os.Bundle $r3;
        android.os.UserHandle $r4;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.intent.extra.USER", $r4);

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int,android.os.Bundle)>(r1, i0, i1, $r3);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandToSelfAndProfilesLocked(java.lang.String,int,int,android.os.Bundle)>(r1, i0, i1, $r3);

     label2:
        return;
    }

    private void sendAdminCommandToSelfAndProfilesLocked(java.lang.String, int, int, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2, i3, i4;
        android.os.Bundle r2;
        int[] r3;
        android.os.UserManager $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        r2 := @parameter3: android.os.Bundle;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r3 = virtualinvoke $r4.<android.os.UserManager: int[] getProfileIdsWithDisabled(int)>(i3);

        i1 = lengthof r3;

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        $i2 = r3[i4];

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int,android.os.Bundle)>(r1, i0, $i2, r2);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private void sendChangedNotification(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Intent $r2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eD2HDpBc_OGp1j6mPQwOljJf8zo $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eD2HDpBc_OGp1j6mPQwOljJf8zo;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eD2HDpBc_OGp1j6mPQwOljJf8zo: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.Intent,int)>(r0, $r2, i0);

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r4);

        return;
    }

    private void sendDelegationChangedBroadcast(java.lang.String, java.util.ArrayList, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        java.util.ArrayList r2;
        int i0;
        android.content.Intent $r4;
        android.content.Context $r8;
        android.os.UserHandle $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.ArrayList;

        i0 := @parameter2: int;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.APPLICATION_DELEGATION_SCOPES_CHANGED");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>("android.app.extra.DELEGATION_SCOPES", r2);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r9);

        return;
    }

    private void sendNetworkLoggingNotificationLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, $l2, $l3, $l4;
        boolean $z0;
        int $i1, $i6, $i7, $i8, $i9;
        byte $b5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r29;
        android.content.Intent $r3;
        android.content.ComponentName $r4;
        java.lang.String $r5, $r10, $r14, $r17, $r20, $r26;
        android.os.UserHandle $r7;
        android.content.Context $r8, $r11, $r13, $r16, $r19, $r25;
        android.app.Notification$Builder $r9, $r12, $r15, $r18, $r21, $r22, $r23, $r28;
        android.app.Notification$BigTextStyle $r24, $r27;
        android.app.NotificationManager $r30;
        com.android.server.devicepolicy.Owners $r31;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r32;
        android.content.pm.PackageManagerInternal r33;
        android.app.PendingIntent r34;
        android.app.Notification r35;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r32 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        if r32 == null goto label6;

        $z0 = r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled>;

        if $z0 != 0 goto label1;

        goto label6;

     label1:
        $i1 = r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications>;

        if $i1 < 2 goto label2;

        return;

     label2:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long lastNetworkLoggingNotificationTimeMs>;

        $l4 = l0 - $l2;

        $l3 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MS_PER_DAY>;

        $b5 = $l4 cmp $l3;

        if $b5 >= 0 goto label3;

        return;

     label3:
        $i6 = r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications>;

        $i7 = $i6 + 1;

        r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications> = $i7;

        $i8 = r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications>;

        if $i8 < 2 goto label4;

        r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long lastNetworkLoggingNotificationTimeMs> = 0L;

        goto label5;

     label4:
        r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long lastNetworkLoggingNotificationTimeMs> = l0;

     label5:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r33 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.SHOW_DEVICE_MONITORING_DIALOG");

        $r4 = virtualinvoke r33.<android.content.pm.PackageManagerInternal: android.content.ComponentName getSystemUiServiceComponent()>();

        $r5 = virtualinvoke $r4.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r5);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r7 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r34 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)>($r8, 0, $r3, 0, $r7);

        $r9 = new android.app.Notification$Builder;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String DEVICE_ADMIN>;

        specialinvoke $r9.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r11, $r10);

        $r12 = virtualinvoke $r9.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302447);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.String getString(int)>(17040653);

        $r15 = virtualinvoke $r12.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r14);

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: java.lang.String getString(int)>(17040652);

        $r18 = virtualinvoke $r15.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r17);

        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r20 = virtualinvoke $r19.<android.content.Context: java.lang.String getString(int)>(17040653);

        $r21 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>($r20);

        $r22 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)>(1);

        $r23 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r34);

        $r24 = new android.app.Notification$BigTextStyle;

        specialinvoke $r24.<android.app.Notification$BigTextStyle: void <init>()>();

        $r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r26 = virtualinvoke $r25.<android.content.Context: java.lang.String getString(int)>(17040652);

        $r27 = virtualinvoke $r24.<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>($r26);

        $r28 = virtualinvoke $r23.<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>($r27);

        r35 = virtualinvoke $r28.<android.app.Notification$Builder: android.app.Notification build()>();

        $r29 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r30 = virtualinvoke $r29.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r30.<android.app.NotificationManager: void notify(int,android.app.Notification)>(1002, r35);

        $r31 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i9 = virtualinvoke $r31.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i9);

        return;

     label6:
        return;
    }

    private void sendOwnerChangedBroadcast(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Intent $r1, r5;
        android.content.Context $r2;
        android.os.UserHandle $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>(r4);

        r5 = virtualinvoke $r1.<android.content.Intent: android.content.Intent addFlags(int)>(16777216);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r2.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r5, $r3);

        return;
    }

    private void sendPrivateKeyAliasResponse(java.lang.String, android.os.IBinder)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Exception $r1;
        java.lang.String r2;
        android.os.IBinder r3;
        android.security.IKeyChainAliasCallback r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: android.os.IBinder;

        r4 = staticinvoke <android.security.IKeyChainAliasCallback$Stub: android.security.IKeyChainAliasCallback asInterface(android.os.IBinder)>(r3);

     label1:
        interfaceinvoke r4.<android.security.IKeyChainAliasCallback: void alias(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "error while responding to callback", $r1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void sendProfileOwnerCommand(java.lang.String, android.os.Bundle, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        android.os.Bundle r2;
        int i0;
        com.android.server.devicepolicy.Owners $r3;
        android.content.ComponentName $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendActiveAdminCommand(java.lang.String,android.os.Bundle,int,android.content.ComponentName)>(r1, r2, i0, $r4);

        return;
    }

    private void sendWipeProfileNotification(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.app.Notification$Builder $r1, $r4, $r7, $r8, $r10, $r13;
        java.lang.String $r2, $r6, r16;
        android.content.Context $r3, $r5, $r9;
        int $i0;
        android.app.Notification$BigTextStyle $r11, $r12;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r14;
        android.app.NotificationManager $r15;
        android.app.Notification r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: java.lang.String;

        $r1 = new android.app.Notification$Builder;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r2 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String DEVICE_ADMIN>;

        specialinvoke $r1.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r3, $r2);

        $r4 = virtualinvoke $r1.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301642);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getString(int)>(17041495);

        $r7 = virtualinvoke $r4.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r6);

        $r8 = virtualinvoke $r7.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r16);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r9.<android.content.Context: int getColor(int)>(17170460);

        $r10 = virtualinvoke $r8.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i0);

        $r11 = new android.app.Notification$BigTextStyle;

        specialinvoke $r11.<android.app.Notification$BigTextStyle: void <init>()>();

        $r12 = virtualinvoke $r11.<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>(r16);

        $r13 = virtualinvoke $r10.<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>($r12);

        r17 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification build()>();

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r15 = virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r15.<android.app.NotificationManager: void notify(int,android.app.Notification)>(1001, r17);

        return;
    }

    private void setActiveAdmin(android.content.ComponentName, boolean, int, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        int i0;
        android.os.Bundle r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        android.app.admin.DeviceAdminInfo r3;
        java.lang.Object r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vT_QnqFgjh3LMaMTwq65qCK_WUU r6;
        android.content.Context $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: android.os.Bundle;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEVICE_ADMINS", null);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int,boolean)>(r9, i0, 1);

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r4;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void checkActiveAdminPrecondition(android.content.ComponentName,android.app.admin.DeviceAdminInfo,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r9, r3, r2);

        r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vT_QnqFgjh3LMaMTwq65qCK_WUU;

        specialinvoke r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vT_QnqFgjh3LMaMTwq65qCK_WUU: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName,int,boolean,android.app.admin.DeviceAdminInfo,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData,android.os.Bundle)>(r0, r9, i0, z0, r3, r2, r1);

        virtualinvoke r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r6);

        exitmonitor r4;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r4;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setDelegatedScopePreO(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, r5;
        java.lang.Object r3, $r10, $r12, $r14, r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7;
        android.util.ArrayMap $r9, $r11, $r13, $r19;
        boolean $z0, $z1, $z3;
        java.lang.Throwable $r15;
        android.content.ComponentName r16;
        int i0, i1, $i2;
        java.util.List r17, r20, r25, r26, r27;
        java.util.ArrayList r23, r24;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "ComponentName is null");

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r16, -1);

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

     label02:
        if r1 == null goto label07;

     label03:
        $r13 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r17 = (java.util.List) $r14;

     label04:
        r18 = r17;

        if r17 != null goto label06;

     label05:
        r23 = new java.util.ArrayList;

        r18 = r23;

        specialinvoke r23.<java.util.ArrayList: void <init>()>();

     label06:
        r25 = (java.util.List) r18;

        $z3 = interfaceinvoke r25.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z3 != 0 goto label07;

        r26 = (java.util.List) r18;

        interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r2);

        r27 = (java.util.List) r18;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>(r16, r1, r27);

     label07:
        i1 = 0;

     label08:
        $r19 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $i2 = virtualinvoke $r19.<android.util.ArrayMap: int size()>();

        if i1 >= $i2 goto label10;

        $r9 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r5 = (java.lang.String) $r10;

        $r11 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r20 = (java.util.List) $r12;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label09;

        $z1 = interfaceinvoke r20.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label09;

        r24 = new java.util.ArrayList;

        specialinvoke r24.<java.util.ArrayList: void <init>(java.util.Collection)>(r20);

        interfaceinvoke r24.<java.util.List: boolean remove(java.lang.Object)>(r2);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>(r16, r5, r24);

     label09:
        i1 = i1 + 1;

        goto label08;

     label10:
        exitmonitor r3;

     label11:
        return;

     label12:
        $r15 := @caughtexception;

     label13:
        exitmonitor r3;

     label14:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r5;
        java.lang.Object r2;
        com.android.server.devicepolicy.Owners $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r3.<com.android.server.devicepolicy.Owners: void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String,java.lang.String)>(r5, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setDeviceOwnershipSystemPropertyLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, $z3, z4, z5, $z6;
        int $i0;
        com.android.server.devicepolicy.Owners $r1;
        java.lang.StringBuilder $r2, $r6;
        java.lang.String $r5, $r9, r12, r14;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r10, r11, $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z2 = staticinvoke <android.os.storage.StorageManager: boolean inCryptKeeperBounce()>();

        if $z2 == 0 goto label1;

        return;

     label1:
        r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        z4 = 0;

        $i0 = virtualinvoke r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsGlobalGetInt(java.lang.String,int)>("device_provisioned", 0);

        if $i0 == 0 goto label2;

        z5 = 1;

        goto label3;

     label2:
        z5 = 0;

     label3:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z0 = virtualinvoke $r1.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>();

        if z0 != 0 goto label4;

        if z1 != 0 goto label4;

        if z5 != 0 goto label4;

        return;

     label4:
        if z0 != 0 goto label5;

        if z1 == 0 goto label6;

     label5:
        z4 = 1;

     label6:
        r12 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z4);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r14 = virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String systemPropertiesGet(java.lang.String,java.lang.String)>("ro.organization_owned", null);

        $z6 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r14);

        if $z6 == 0 goto label7;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set ro.organization_owned property to ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r9);

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void systemPropertiesSet(java.lang.String,java.lang.String)>("ro.organization_owned", r12);

        goto label8;

     label7:
        $z3 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z3 != 0 goto label8;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot change existing ro.organization_owned to ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r5);

     label8:
        return;
    }

    private void setDoNotAskCredentialsOnBoot()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $z0 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean doNotAskCredentialsOnBoot>;

        if $z0 != 0 goto label2;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean doNotAskCredentialsOnBoot> = 1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setEncryptionRequested(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        return;
    }

    private void setExpirationAlarmCheckLocked(android.content.Context, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context r1;
        int i0;
        boolean z0;
        long l1, $l4, $l6, l7, l8, l9, l10, l11;
        byte $b2, $b3, $b5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$VDIwg4X1iKAqFvQldV7uz3FQETk $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        l7 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName,int,boolean)>(null, i0, z0);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l8 = l7 - l1;

        $b2 = l7 cmp 0L;

        if $b2 != 0 goto label1;

        l9 = 0L;

        goto label4;

     label1:
        $b3 = l8 cmp 0L;

        if $b3 > 0 goto label2;

        $l6 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MS_PER_DAY>;

        l9 = $l6 + l1;

        goto label4;

     label2:
        $l4 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MS_PER_DAY>;

        l10 = l8 % $l4;

        l11 = l10;

        $b5 = l10 cmp 0L;

        if $b5 != 0 goto label3;

        l11 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MS_PER_DAY>;

     label3:
        l9 = l1 + l11;

     label4:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$VDIwg4X1iKAqFvQldV7uz3FQETk;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$VDIwg4X1iKAqFvQldV7uz3FQETk: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,boolean,int,android.content.Context,long)>(r0, z0, i0, r1, l9);

        virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        return;
    }

    private void setLockTaskFeaturesLocked(int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures> = i1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateLockTaskFeaturesLocked(int,int)>(i1, i0);

        return;
    }

    private void setLockTaskPackagesLocked(int, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.util.List r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages> = r1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateLockTaskPackagesLocked(java.util.List,int)>(r1, i0);

        return;
    }

    private void setNetworkLoggingActiveInternal(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r2;
        java.lang.Throwable $r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3HcAzO009pZUvLblT_J907Cx1Ic r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3HcAzO009pZUvLblT_J907Cx1Ic;

        specialinvoke r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3HcAzO009pZUvLblT_J907Cx1Ic: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,boolean)>(r0, z0);

        virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setOverrideApnsEnabledUnchecked(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        android.content.ContentValues $r2;
        java.lang.Boolean $r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$T0myn3uRGgoaPw0RIT5H2gnczq4 $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("enforced", $r3);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$T0myn3uRGgoaPw0RIT5H2gnczq4;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$T0myn3uRGgoaPw0RIT5H2gnczq4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ContentValues)>(r0, $r2);

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r4);

        return;
    }

    private boolean setPasswordPrivileged(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2;
        boolean $z0, $z1;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLockScreenSecureUnchecked(int)>($i2);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPasswordInternal(java.lang.String,long,byte[],int,int)>(r1, 0L, null, i0, i1);

        return $z1;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Cannot change current password");

        throw $r2;
    }

    private boolean setStatusBarDisabledInternal(boolean, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        int i0, i3;
        long l1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r3, $r10, $r12;
        android.os.IBinder $r2;
        android.content.Context $r4, $r7;
        android.os.Binder $r5, $r8;
        java.lang.String $r6, $r9;
        java.lang.Throwable $r11;
        android.os.RemoteException $r13;
        com.android.internal.statusbar.IStatusBarService r14;
        byte b4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label01:
        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("statusbar");

        r14 = staticinvoke <com.android.internal.statusbar.IStatusBarService$Stub: com.android.internal.statusbar.IStatusBarService asInterface(android.os.IBinder)>($r2);

     label02:
        if r14 == null goto label08;

        if z0 == 0 goto label03;

        i3 = 34013184;

        goto label04;

     label03:
        i3 = 0;

     label04:
        if z0 == 0 goto label05;

        b4 = 1;

        goto label06;

     label05:
        b4 = 0;

     label06:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Binder mToken>;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r14.<com.android.internal.statusbar.IStatusBarService: void disableForUser(int,android.os.IBinder,java.lang.String,int)>(i3, $r5, $r6, i0);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Binder mToken>;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r14.<com.android.internal.statusbar.IStatusBarService: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>(b4, $r8, $r9, i0);

     label07:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label08:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        goto label13;

     label09:
        $r11 := @caughtexception;

        goto label14;

     label10:
        $r13 := @caughtexception;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to disable the status bar", $r13);

     label12:
        goto label08;

     label13:
        return 0;

     label14:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r11;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
    }

    private void setUserControlDisabledPackagesLocked(int, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.util.List r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages> = r1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateUserControlDisabledPackagesLocked(java.util.List)>(r1);

        return;
    }

    private void shareBugreportWithDeviceOwnerIfExists(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.net.Uri r1;
        android.content.Context $r2, $r13;
        android.content.ContentResolver $r3;
        com.android.server.devicepolicy.Owners $r4, $r7, $r10, $r12;
        android.content.ComponentName $r5, $r8;
        java.lang.Object $r6, r26;
        java.lang.String $r9, r21, r22;
        int $i0, $i1;
        com.android.server.uri.NeededUriGrants $r11;
        android.os.UserHandle $r14;
        java.lang.Throwable $r15, $r16, $r17, $r18, $r19, $r20;
        android.os.ParcelFileDescriptor r23, r24, r25;
        android.content.Intent r27;
        com.android.server.uri.UriGrantsManagerInternal r28;
        java.io.FileNotFoundException r31;
        android.os.Bundle r32;
        java.util.concurrent.atomic.AtomicBoolean $r33, $r34;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r21 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        if r21 == null goto label19;

        r23 = null;

        r24 = null;

     label01:
        r1 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r21);

     label02:
        r23 = null;

        r24 = null;

     label03:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r25 = virtualinvoke $r3.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>(r1, "r");

     label04:
        r23 = r25;

        r24 = r25;

     label05:
        r26 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

     label06:
        r23 = r25;

        r24 = r25;

     label07:
        entermonitor r26;

     label08:
        r27 = new android.content.Intent;

        specialinvoke r27.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.BUGREPORT_SHARE");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        virtualinvoke r27.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r5);

        virtualinvoke r27.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>(r1, "application/vnd.android.bugreport");

        virtualinvoke r27.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.BUGREPORT_HASH", r22);

        virtualinvoke r27.<android.content.Intent: android.content.Intent setFlags(int)>(1);

        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/uri/UriGrantsManagerInternal;");

        r28 = (com.android.server.uri.UriGrantsManagerInternal) $r6;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        $r9 = virtualinvoke $r8.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i0 = virtualinvoke $r10.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        $r11 = interfaceinvoke r28.<com.android.server.uri.UriGrantsManagerInternal: com.android.server.uri.NeededUriGrants checkGrantUriPermissionFromIntent(android.content.Intent,int,java.lang.String,int)>(r27, 2000, $r9, $i0);

        interfaceinvoke r28.<com.android.server.uri.UriGrantsManagerInternal: void grantUriPermissionUncheckedFromIntent(com.android.server.uri.NeededUriGrants,com.android.server.uri.UriPermissionOwner)>($r11, null);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r12.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        $r14 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        virtualinvoke $r13.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r27, $r14);

        exitmonitor r26;

     label09:
        if r25 == null goto label37;

     label10:
        virtualinvoke r25.<android.os.ParcelFileDescriptor: void close()>();

     label11:
        goto label37;

     label12:
        $r18 := @caughtexception;

        goto label37;

     label13:
        $r16 := @caughtexception;

     label14:
        exitmonitor r26;

     label15:
        r23 = r25;

        r24 = r25;

     label16:
        throw $r16;

     label17:
        $r15 := @caughtexception;

        goto label38;

     label18:
        $r17 := @caughtexception;

        goto label25;

     label19:
        r23 = null;

        r24 = null;

     label20:
        r31 = new java.io.FileNotFoundException;

     label21:
        r23 = null;

        r24 = null;

     label22:
        specialinvoke r31.<java.io.FileNotFoundException: void <init>()>();

     label23:
        r23 = null;

        r24 = null;

     label24:
        throw r31;

     label25:
        r23 = r24;

     label26:
        r32 = new android.os.Bundle;

     label27:
        r23 = r24;

     label28:
        specialinvoke r32.<android.os.Bundle: void <init>()>();

     label29:
        r23 = r24;

     label30:
        virtualinvoke r32.<android.os.Bundle: void putInt(java.lang.String,int)>("android.app.extra.BUGREPORT_FAILURE_REASON", 1);

     label31:
        r23 = r24;

     label32:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDeviceOwnerCommand(java.lang.String,android.os.Bundle)>("android.app.action.BUGREPORT_FAILED", r32);

     label33:
        if r24 == null goto label37;

     label34:
        virtualinvoke r24.<android.os.ParcelFileDescriptor: void close()>();

     label35:
        goto label37;

     label36:
        $r20 := @caughtexception;

        goto label37;

     label37:
        $r33 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted>;

        virtualinvoke $r33.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String,java.lang.String)>(null, null);

        return;

     label38:
        if r23 == null goto label42;

     label39:
        virtualinvoke r23.<android.os.ParcelFileDescriptor: void close()>();

     label40:
        goto label42;

     label41:
        $r19 := @caughtexception;

        goto label42;

     label42:
        $r34 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted>;

        virtualinvoke $r34.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String,java.lang.String)>(null, null);

        throw $r15;

        catch java.io.FileNotFoundException from label01 to label02 with label18;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.io.FileNotFoundException from label03 to label04 with label18;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.io.FileNotFoundException from label05 to label06 with label18;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.io.FileNotFoundException from label07 to label08 with label18;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.io.FileNotFoundException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.io.FileNotFoundException from label20 to label21 with label18;
        catch java.lang.Throwable from label20 to label21 with label17;
        catch java.io.FileNotFoundException from label22 to label23 with label18;
        catch java.lang.Throwable from label22 to label23 with label17;
        catch java.io.FileNotFoundException from label24 to label25 with label18;
        catch java.lang.Throwable from label24 to label25 with label17;
        catch java.lang.Throwable from label26 to label27 with label17;
        catch java.lang.Throwable from label28 to label29 with label17;
        catch java.lang.Throwable from label30 to label31 with label17;
        catch java.lang.Throwable from label32 to label33 with label17;
        catch java.io.IOException from label34 to label35 with label36;
        catch java.io.IOException from label39 to label40 with label41;
    }

    private static boolean shouldCheckIfDelegatePackageIsInstalled(java.lang.String, int, java.util.List)
    {
        java.lang.String r0, $r3;
        int i0, $i1;
        java.util.List r1;
        boolean $z0, $z1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        if i0 < 24 goto label1;

        return 1;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 != 1 goto label2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r2;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("delegation-cert-install");

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    private boolean shouldOverwritePoliciesFromXml(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r1, i0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r1, i0);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private void showLocationSettingsEnabledNotification(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Intent r1, $r3;
        android.content.pm.ActivityInfo r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r7, $r23;
        int $i0, $i2;
        android.content.pm.PackageManager $r5;
        android.content.Context $r6, $r10, $r12, $r15, $r18;
        android.app.Notification$Builder $r8, $r11, $r14, $r17, $r19, $r20, $r21, $r22;
        java.lang.String $r9, $r13, $r16;
        android.app.NotificationManager $r24;
        android.content.ComponentName $r25;
        android.os.UserHandle r27;
        android.app.PendingIntent r28;
        android.app.Notification r29;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r27 := @parameter0: android.os.UserHandle;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.settings.LOCATION_SOURCE_SETTINGS");

        r1 = virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke r27.<android.os.UserHandle: int getIdentifier()>();

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager(int)>($i0);

        r2 = virtualinvoke r1.<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>($r5, 1048576);

        if r2 == null goto label1;

        $r25 = virtualinvoke r2.<android.content.pm.ActivityInfo: android.content.ComponentName getComponentName()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r25);

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Failed to resolve intent for location settings");

     label2:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r28 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.PendingIntent pendingIntentGetActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r6, 0, r1, 134217728, null, r27);

        $r8 = new android.app.Notification$Builder;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String DEVICE_ADMIN>;

        specialinvoke $r8.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r10, $r9);

        $r11 = virtualinvoke $r8.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302447);

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: java.lang.String getString(int)>(17040430);

        $r14 = virtualinvoke $r11.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r13);

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: java.lang.String getString(int)>(17040429);

        $r17 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r16);

        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r18.<android.content.Context: int getColor(int)>(17170460);

        $r19 = virtualinvoke $r17.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i2);

        $r20 = virtualinvoke $r19.<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)>(1);

        $r21 = virtualinvoke $r20.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r28);

        $r22 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>(1);

        r29 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification build()>();

        $r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r24 = virtualinvoke $r23.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r24.<android.app.NotificationManager: void notify(int,android.app.Notification)>(59, r29);

        return;
    }

    private void startOwnerService(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1, $r4;
        android.content.ComponentName r2;
        com.android.server.devicepolicy.DeviceAdminServiceController $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getOwnerComponent(int)>(i0);

        if r2 == null goto label1;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        $r4 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r3.<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>($r4, i0, r1);

     label1:
        return;
    }

    private void startUninstallIntent(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.util.Pair $r2;
        java.lang.Integer $r3;
        java.util.Set $r4, $r5;
        boolean $z0, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.app.IActivityManager $r7;
        java.lang.StringBuilder $r8;
        android.content.Intent $r11;
        java.lang.String $r12, r19;
        android.net.Uri $r13;
        android.content.Context $r15;
        android.os.UserHandle $r16;
        android.os.RemoteException $r17;
        java.lang.Throwable $r18;
        java.lang.Object r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r19 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new android.util.Pair;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r19, $r3);

        r20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r20;

     label01:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set mPackagesToRemove>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label03;

        exitmonitor r20;

     label02:
        return;

     label03:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set mPackagesToRemove>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        exitmonitor r20;

     label04:
        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageInstalledForUser(java.lang.String,int)>(r19, i0);

        if $z2 != 0 goto label05;

        return;

     label05:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        interfaceinvoke $r7.<android.app.IActivityManager: void forceStopPackage(java.lang.String,int)>(r19, i0);

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Failure talking to ActivityManager while force stopping package");

     label08:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r11 = new android.content.Intent;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r12);

        specialinvoke $r11.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.UNINSTALL_PACKAGE", $r13);

        virtualinvoke $r11.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r16 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r15.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r11, $r16);

        return;

     label09:
        $r18 := @caughtexception;

     label10:
        exitmonitor r20;

     label11:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void stopOwnerService(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1;
        com.android.server.devicepolicy.DeviceAdminServiceController $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        virtualinvoke $r2.<com.android.server.devicepolicy.DeviceAdminServiceController: void stopServiceForOwner(int,java.lang.String)>(i0, r1);

        return;
    }

    private int stopUserUnchecked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r2, $r4, $r5, $r6, $r8, $r10;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r7;
        java.lang.Throwable $r9;
        int i1, i2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        i2 = interfaceinvoke $r3.<android.app.IActivityManager: int stopUser(int,boolean,android.app.IStopUserCallback)>(i1, 1, null);

     label2:
        if i2 == -2 goto label4;

        if i2 == 0 goto label3;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return 0;

     label4:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return 4;

     label5:
        $r9 := @caughtexception;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r9;

     label6:
        $r7 := @caughtexception;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return 1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    private void suspendPersonalAppsInPackageManager(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KMO1i249rG8h8aL6nnWbSt_eQuU $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KMO1i249rG8h8aL6nnWbSt_eQuU;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KMO1i249rG8h8aL6nnWbSt_eQuU: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r1);

        return;
    }

    private void suspendPersonalAppsInternal(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2, $r8;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.String $r5, r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.content.pm.PackageManagerInternal $r7;
        java.lang.Throwable $r9;
        java.lang.Object r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $z1 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended>;

        if $z1 != z0 goto label01;

        return;

     label01:
        if z0 == 0 goto label02;

        r10 = "Suspending";

        goto label03;

     label02:
        r10 = "Unsuspending";

     label03:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r10;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s personal apps for user %d", $r3);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r5);

        if z0 == 0 goto label04;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void suspendPersonalAppsInPackageManager(int)>(i0);

        goto label05;

     label04:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        virtualinvoke $r7.<android.content.pm.PackageManagerInternal: void unsuspendForSuspendingPackage(java.lang.String,int)>("android", i0);

     label05:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r11;

     label06:
        $r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAppsSuspended> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r11;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r11;

     label10:
        throw $r9;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void toggleBackupServiceActive(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0;
        long l1;
        java.lang.IllegalStateException r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4, $r6, $r7, $r13;
        android.app.backup.IBackupManager $r5, $r8;
        android.os.RemoteException $r9;
        java.lang.Object[] $r10;
        java.lang.String $r11, r15;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.backup.IBackupManager getIBackupManager()>();

        if $r5 == null goto label2;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.backup.IBackupManager getIBackupManager()>();

        interfaceinvoke $r8.<android.app.backup.IBackupManager: void setBackupServiceActive(int,boolean)>(i0, z0);

     label2:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r12 := @caughtexception;

        goto label9;

     label4:
        $r9 := @caughtexception;

     label5:
        r2 = new java.lang.IllegalStateException;

     label6:
        if z0 == 0 goto label7;

        r15 = "activating";

        goto label8;

     label7:
        r15 = "deactivating";

     label8:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r15;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed %s backup service.", $r10);

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r9);

        throw r2;

     label9:
        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r12;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label8 to label9 with label3;
    }

    private void transferActiveAdminUncheckedLocked(android.content.ComponentName, android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r2;
        int i0, i1, $i2, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        android.app.admin.DeviceAdminInfo r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        android.util.ArrayMap $r6, $r7, $r9, $r11, $r13;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $z0 = virtualinvoke $r6.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r13 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $z1 = virtualinvoke $r13.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        return;

     label1:
        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int,boolean)>(r1, i0, 1);

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r8;

        i1 = virtualinvoke r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        virtualinvoke r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void transfer(android.app.admin.DeviceAdminInfo)>(r4);

        $r9 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r2);

        $r11 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i2 != i1 goto label2;

        $i3 = virtualinvoke r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = $i3;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r5, "android.app.action.DEVICE_ADMIN_ENABLED", null, null);

        return;
    }

    private void transferDeviceOwnershipLocked(android.content.ComponentName, android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r12;
        int i0;
        com.android.server.devicepolicy.Owners $r2, $r9;
        java.lang.StringBuilder $r3;
        java.lang.String $r8, $r11;
        com.android.server.devicepolicy.DeviceAdminServiceController $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void transferActiveAdminUncheckedLocked(android.content.ComponentName,android.content.ComponentName,int)>(r1, r12, i0);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r2.<com.android.server.devicepolicy.Owners: void transferDeviceOwnership(android.content.ComponentName)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device owner set: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r8);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r9.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        $r11 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r10.<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>($r11, i0, "transfer-device-owner");

        return;
    }

    private void transferProfileOwnershipLocked(android.content.ComponentName, android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r12;
        int i0;
        com.android.server.devicepolicy.Owners $r2, $r9;
        java.lang.StringBuilder $r3;
        java.lang.String $r8, $r11;
        com.android.server.devicepolicy.DeviceAdminServiceController $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void transferActiveAdminUncheckedLocked(android.content.ComponentName,android.content.ComponentName,int)>(r1, r12, i0);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r2.<com.android.server.devicepolicy.Owners: void transferProfileOwner(android.content.ComponentName,int)>(r1, i0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile owner set: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r8);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r9.<com.android.server.devicepolicy.Owners: void writeProfileOwner(int)>(i0);

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        $r11 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r10.<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>($r11, i0, "transfer-profile-owner");

        return;
    }

    public static int[] translateIdAttestationFlags(int)
    {
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9;
        java.util.Iterator r1;
        java.util.HashMap $r2;
        java.lang.Integer $r3, $r6, $r7, $r9, $r14, r15, r16, r18;
        java.util.Set $r11;
        java.lang.Object $r12, $r13;
        int[] r17;
        boolean $z0;

        i5 := @parameter0: int;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, $r3);

        r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r15);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r16);

        i0 = staticinvoke <java.lang.Integer: int bitCount(int)>(i5);

        if i0 != 0 goto label1;

        return null;

     label1:
        i6 = i0;

        i7 = i5;

        $i1 = i5 & 1;

        if $i1 == 0 goto label2;

        i6 = i0 - 1;

        i7 = i5 & -2;

     label2:
        r17 = newarray (int)[i6];

        i8 = 0;

        $r11 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.Integer) $r12;

        i9 = i8;

        $i2 = virtualinvoke r18.<java.lang.Integer: int intValue()>();

        $i3 = $i2 & i7;

        if $i3 == 0 goto label4;

        $r13 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        $r14 = (java.lang.Integer) $r13;

        $i4 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        r17[i8] = $i4;

        i9 = i8 + 1;

     label4:
        i8 = i9;

        goto label3;

     label5:
        return r17;
    }

    private void triggerPolicyComplianceCheck(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        android.content.Intent $r3;
        android.app.admin.DeviceAdminInfo $r4;
        java.lang.String $r5;
        android.content.Context $r7;
        android.os.UserHandle $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.CHECK_POLICY_COMPLIANCE");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label02:
        if r2 != null goto label05;

     label03:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Profile owner not found for compliance check");

        exitmonitor r1;

     label04:
        return;

     label05:
        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r5 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r5);

     label06:
        exitmonitor r1;

     label07:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r7.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r3, $r8);

        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void uninstallOrDisablePackage(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        android.content.pm.IPackageManager $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$5 $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.content.pm.PackageManager $r4, $r10;
        android.content.pm.PackageInstaller $r5;
        android.content.IntentSender $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8, $r14, r16;
        android.content.Context $r9;
        java.lang.StringBuilder $r11;
        android.os.RemoteException $r15;
        android.content.pm.ApplicationInfo r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r17 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r16, 786432, i0);

     label2:
        if r17 != null goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get package info for ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", $r14);

        return;

     label3:
        $i1 = r17.<android.content.pm.ApplicationInfo: int flags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label4;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r16;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Package %s is pre-installed, marking disabled until used", $r7);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r8);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        virtualinvoke $r10.<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>(r16, 4, 0);

        return;

     label4:
        $r2 = new com.android.server.devicepolicy.DevicePolicyManagerService$5;

        specialinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$5: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int)>(r0, r16, i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager(int)>(i0);

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>();

        $r6 = new android.content.IntentSender;

        specialinvoke $r6.<android.content.IntentSender: void <init>(android.content.IIntentSender)>($r2);

        virtualinvoke $r5.<android.content.pm.PackageInstaller: void uninstall(java.lang.String,int,android.content.IntentSender)>(r16, 0, $r6);

        return;

     label5:
        $r15 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    private void updateDeviceOwnerLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r3, $r7, $r12;
        com.android.server.devicepolicy.Owners $r2;
        android.app.IActivityManager $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r9 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

     label2:
        if r9 == null goto label7;

     label3:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        $r5 = virtualinvoke r9.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke $r4.<android.app.IActivityManager: void updateDeviceOwner(java.lang.String)>($r5);

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r6;

     label6:
        $r8 := @caughtexception;

     label7:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void updateLockTaskFeaturesLocked(int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        long l2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r2, $r4, $r6;
        android.app.IActivityTaskManager $r3;
        java.lang.Throwable $r5;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityTaskManager getIActivityTaskManager()>();

        interfaceinvoke $r3.<android.app.IActivityTaskManager: void updateLockTaskFeatures(int,int)>(i1, i0);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        throw $r5;

     label4:
        $r7 := @caughtexception;

     label5:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateLockTaskPackagesLocked(java.util.List, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i2;
        long l1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r2, $r7, $r9;
        android.app.IActivityManager $r3;
        java.lang.String[] $r4, $r6;
        java.lang.Object[] $r5;
        java.lang.Throwable $r8;
        android.os.RemoteException $r10;
        java.util.List r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        $i2 = interfaceinvoke r11.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i2];

        $r5 = interfaceinvoke r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        interfaceinvoke $r3.<android.app.IActivityManager: void updateLockTaskPackages(int,java.lang.String[])>(i0, $r6);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r8;

     label4:
        $r10 := @caughtexception;

     label5:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateMaximumTimeToLockLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$SsR9y4_hj6Xw2ls1bInxrta0CQw $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateProfileLockTimeoutLocked(int)>(i0);

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$SsR9y4_hj6Xw2ls1bInxrta0CQw;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$SsR9y4_hj6Xw2ls1bInxrta0CQw: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r1);

        return;
    }

    private void updatePasswordExpirationsLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r2;
        int i0, $i2, $i3, i6, i7;
        long l1, $l5, l8;
        android.util.ArraySet $r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r6;
        java.lang.Integer $r5, $r9;
        android.app.admin.DeviceAdminInfo $r7;
        android.os.UserHandle $r8;
        byte $b4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r10;
        java.util.Iterator r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i6 := @parameter0: int;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i6, 0);

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i7 = 0;

     label1:
        if i7 >= i0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        r10 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r6;

        $r7 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z1 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(6);

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $i3 = virtualinvoke $r8.<android.os.UserHandle: int getIdentifier()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r9);

        l1 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        l8 = 0L;

        $b4 = l1 cmp 0L;

        if $b4 <= 0 goto label2;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l8 = $l5 + l1;

     label2:
        r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = l8;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        r11 = virtualinvoke $r3.<android.util.ArraySet: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i2);

        goto label5;

     label6:
        return;
    }

    private void updatePasswordQualityCacheForUserGroup(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserManager $r1, $r5;
        java.lang.Object $r2;
        android.content.pm.UserInfo $r3;
        com.android.server.devicepolicy.DevicePolicyCacheImpl $r4;
        int $i0, i1, i2;
        java.util.List r6;
        java.util.Iterator r7;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        if i1 != -1 goto label1;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r6 = virtualinvoke $r5.<android.os.UserManager: java.util.List getUsers()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r6 = virtualinvoke $r1.<android.os.UserManager: java.util.List getProfiles(int)>(i1);

     label2:
        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (android.content.pm.UserInfo) $r2;

        i2 = $r3.<android.content.pm.UserInfo: int id>;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache>;

        $i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int,boolean)>(null, i2, 0);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyCacheImpl: void setPasswordQuality(int,int)>(i2, $i0);

        goto label3;

     label4:
        return;
    }

    private void updatePasswordValidityCheckpointLocked(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        android.app.admin.PasswordMetrics r2;
        com.android.internal.widget.LockSettingsInternal $r3;
        boolean $z0, z1, z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

        i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getCredentialOwner(int,boolean)>(i0, z1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal>;

        r2 = virtualinvoke $r3.<com.android.internal.widget.LockSettingsInternal: android.app.admin.PasswordMetrics getUserPasswordMetrics(int)>(i1);

        if r2 == null goto label1;

        z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientForUserWithoutCheckpointLocked(android.app.admin.PasswordMetrics,int,boolean)>(r2, i0, z1);

        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPasswordValidAtLastCheckpoint>;

        if z2 == $z0 goto label1;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPasswordValidAtLastCheckpoint> = z2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label1:
        return;
    }

    private int updatePersonalAppsSuspension(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        java.lang.Boolean $r3;
        java.lang.Integer $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        int i1, i2, i3, $i4;
        boolean z1, z2, z3, z4, z5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        z1 := @parameter1: boolean;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i1);

     label02:
        if r7 == null goto label10;

     label03:
        i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int updateProfileOffDeadlineLocked(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,boolean)>(i1, r7, z1);

        z2 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps>;

     label04:
        if i2 != 2 goto label05;

        z3 = 1;

        goto label06;

     label05:
        z3 = 0;

     label06:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Personal apps suspended explicitly: %b, deadline state: %d", $r2);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", $r5);

     label07:
        if z1 == 0 goto label08;

        i2 = 0;

        goto label08;

     label08:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateProfileOffDeadlineNotificationLocked(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int)>(i1, r7, i2);

     label09:
        z4 = z2;

        goto label11;

     label10:
        z4 = 0;

        z3 = 0;

     label11:
        exitmonitor r1;

     label12:
        i3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

        z5 = 1;

        if z4 != 0 goto label14;

        if z3 == 0 goto label13;

        z5 = 1;

        goto label14;

     label13:
        z5 = 0;

     label14:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void suspendPersonalAppsInternal(int,boolean)>(i3, z5);

        $i4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int makeSuspensionReasons(boolean,boolean)>(z4, z3);

        return $i4;

     label15:
        $r6 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void updatePersonalAppsSuspensionOnUserStart(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getManagedUserId(int)>(i0);

        if i1 < 0 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int updatePersonalAppsSuspension(int,boolean)>(i1, 0);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void suspendPersonalAppsInternal(int,boolean)>(i0, 0);

     label2:
        return;
    }

    private void updateProfileLockTimeoutLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        boolean $z0;
        long $l1, l3;
        byte $b2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Z4Z1L2SoQNQaQFS40CclOGVDZHc $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i0);

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i0, 0);

        l3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLockPolicyFromAdmins(java.util.List)>($r4);

        goto label2;

     label1:
        l3 = 9223372036854775807L;

     label2:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i0);

        $l1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock>;

        $b2 = $l1 cmp l3;

        if $b2 != 0 goto label3;

        return;

     label3:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock> = l3;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Z4Z1L2SoQNQaQFS40CclOGVDZHc;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Z4Z1L2SoQNQaQFS40CclOGVDZHc: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r0, i0, r1);

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r2);

        return;
    }

    private int updateProfileOffDeadlineLocked(int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z2, z3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r9, $r15;
        long $l0, $l2, $l4, $l6, $l8, $l9, $l10, $l12, $l13, $l16, $l19, $l20, $l21, $l24, $l26, $l29, l32, l33;
        byte $b1, $b3, $b5, $b7, $b11, $b17, $b22, $b25, $b27, $b30, b34, $b35;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r14;
        int i31;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7;
        android.app.AlarmManager r10;
        android.content.Intent $r11;
        android.content.Context $r13, $r16;
        android.app.PendingIntent r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i31 := @parameter0: int;

        r7 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l32 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long systemCurrentTimeMillis()>();

        $l0 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label02;

        $l26 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b27 = l32 cmp $l26;

        if $b27 <= 0 goto label02;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile off deadline has been reached, unlocked: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r6);

        $l29 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b30 = $l29 cmp -1L;

        if $b30 == 0 goto label01;

        r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline> = -1L;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i31);

     label01:
        return 2;

     label02:
        $z2 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps>;

        if $z2 == 0 goto label03;

        z3 = 0;

        $l24 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b25 = $l24 cmp 0L;

        if $b25 == 0 goto label06;

        r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline> = 0L;

        z3 = 1;

        goto label06;

     label03:
        $l2 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label05;

        $l21 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        $b22 = $l21 cmp 0L;

        if $b22 == 0 goto label04;

        if z0 == 0 goto label05;

     label04:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Profile off deadline is reset to zero");

        r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline> = 0L;

        z3 = 1;

        goto label06;

     label05:
        z3 = 0;

        $l4 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label06;

        z3 = 0;

        $l16 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        $b17 = $l16 cmp 0L;

        if $b17 == 0 goto label06;

        z3 = 0;

        if z0 != 0 goto label06;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Profile off deadline is set.");

        $l19 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        $l20 = $l19 + l32;

        r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline> = $l20;

        z3 = 1;

     label06:
        if z3 == 0 goto label07;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i31);

     label07:
        $l6 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label08;

        l33 = 0L;

        b34 = 0;

        goto label10;

     label08:
        $l8 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $l10 = $l8 - l32;

        $l9 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MANAGED_PROFILE_OFF_WARNING_PERIOD>;

        $b11 = $l10 cmp $l9;

        if $b11 >= 0 goto label09;

        l33 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        b34 = 1;

        goto label10;

     label09:
        $l13 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $l12 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MANAGED_PROFILE_OFF_WARNING_PERIOD>;

        l33 = $l13 - $l12;

        b34 = 0;

     label10:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r10 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.AlarmManager getAlarmManager()>();

        $r11 = new android.content.Intent;

        specialinvoke $r11.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.ACTION_PROFILE_OFF_DEADLINE");

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r11.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r14);

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r17 = virtualinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.PendingIntent pendingIntentGetBroadcast(android.content.Context,int,android.content.Intent,int)>($r16, 5572, $r11, 1207959552);

        $b35 = l33 cmp 0L;

        if $b35 != 0 goto label11;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Profile off deadline alarm is removed.");

        virtualinvoke r10.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>(r17);

        goto label12;

     label11:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Profile off deadline alarm is set.");

        virtualinvoke r10.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(1, l33, r17);

     label12:
        return b34;
    }

    private void updateProfileOffDeadlineNotificationLocked(int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i8, i9, i10;
        long l1, l2, $l3, $l4, $l5, $l6, $l7;
        android.content.Intent $r1;
        android.content.Context $r2, $r6, $r9, $r11, $r12, $r14, $r18, $r22, $r34, $r35, $r37;
        java.lang.String $r3, $r10, $r15, $r17, $r23, r45, r46, r47;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r32, $r39;
        android.app.Notification$Action$Builder $r8;
        android.os.Bundle $r13;
        android.app.Notification$Builder $r16, $r19, $r20, $r21, $r24, $r25, $r28, $r29, $r30, $r31;
        android.app.Notification$BigTextStyle $r26, $r27;
        android.app.NotificationManager $r33, $r40;
        java.lang.Object[] $r36;
        java.lang.Integer $r38;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r41;
        android.app.PendingIntent r43;
        android.app.Notification$Action r44;
        boolean z0;
        android.app.Notification r49;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i8 := @parameter0: int;

        r41 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        $r39 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r40 = virtualinvoke $r39.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r40.<android.app.NotificationManager: void cancel(int)>(1003);

        return;

     label1:
        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.ACTION_TURN_PROFILE_ON_NOTIFICATION");

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r1.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r3);

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.user_handle", i8);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r43 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.PendingIntent pendingIntentGetBroadcast(android.content.Context,int,android.content.Intent,int)>($r6, 0, $r1, 134217728);

        $r8 = new android.app.Notification$Action$Builder;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.String getString(int)>(17041023);

        specialinvoke $r8.<android.app.Notification$Action$Builder: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)>(null, $r10, r43);

        r44 = virtualinvoke $r8.<android.app.Notification$Action$Builder: android.app.Notification$Action build()>();

        if i0 != 1 goto label2;

        l1 = r41.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        l2 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MS_PER_DAY>;

        $l3 = l2 / 2L;

        $l4 = l1 + $l3;

        $l5 = $l4 / l2;

        i9 = (int) $l5;

        $r34 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $l6 = r41.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        r45 = staticinvoke <android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>($r34, $l6, 16);

        $r35 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $l7 = r41.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        r46 = staticinvoke <android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>($r35, $l7, 1);

        $r37 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r36 = newarray (java.lang.Object)[3];

        $r36[0] = r45;

        $r36[1] = r46;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r36[2] = $r38;

        r47 = virtualinvoke $r37.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17041024, $r36);

        z0 = 0;

        goto label3;

     label2:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r47 = virtualinvoke $r11.<android.content.Context: java.lang.String getString(int)>(17041025);

        z0 = 1;

     label3:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        i10 = virtualinvoke $r12.<android.content.Context: int getColor(int)>(17170896);

        $r13 = new android.os.Bundle;

        specialinvoke $r13.<android.os.Bundle: void <init>()>();

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.String getString(int)>(17040717);

        virtualinvoke $r13.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.substName", $r15);

        $r16 = new android.app.Notification$Builder;

        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r17 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String DEVICE_ADMIN>;

        specialinvoke $r16.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r18, $r17);

        $r19 = virtualinvoke $r16.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302384);

        $r20 = virtualinvoke $r19.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(z0);

        $r21 = virtualinvoke $r20.<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>(0);

        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: java.lang.String getString(int)>(17041026);

        $r24 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r23);

        $r25 = virtualinvoke $r24.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r47);

        $r26 = new android.app.Notification$BigTextStyle;

        specialinvoke $r26.<android.app.Notification$BigTextStyle: void <init>()>();

        $r27 = virtualinvoke $r26.<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>(r47);

        $r28 = virtualinvoke $r25.<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>($r27);

        $r29 = virtualinvoke $r28.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>(i10);

        $r30 = virtualinvoke $r29.<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>(r44);

        $r31 = virtualinvoke $r30.<android.app.Notification$Builder: android.app.Notification$Builder addExtras(android.os.Bundle)>($r13);

        r49 = virtualinvoke $r31.<android.app.Notification$Builder: android.app.Notification build()>();

        $r32 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r33 = virtualinvoke $r32.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r33.<android.app.NotificationManager: void notify(int,android.app.Notification)>(1003, r49);

        return;
    }

    private void updateScreenCaptureDisabled(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyCacheImpl $r1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MpKSZCaip5itOpByyM31AZdtkIk $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache>;

        $z1 = z0 ^ 1;

        virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyCacheImpl: void setScreenCaptureAllowed(int,boolean)>(i0, $z1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MpKSZCaip5itOpByyM31AZdtkIk;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MpKSZCaip5itOpByyM31AZdtkIk: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void updateSystemUpdateFreezePeriodsRecord(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.lang.Object r1, $r5, $r6;
        java.time.LocalDate r2, $r9, $r10, r17, r20;
        com.android.server.devicepolicy.Owners $r3, $r4, $r7, $r8, $r11, $r12, $r13, $r14;
        java.lang.Throwable $r15;
        android.app.admin.SystemUpdatePolicy r16;
        android.util.Pair r18, r19;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", "updateSystemUpdateFreezePeriodsRecord");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r16 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>();

     label02:
        if r16 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        r17 = staticinvoke <java.time.LocalDate: java.time.LocalDate now()>();

        r18 = virtualinvoke r16.<android.app.admin.SystemUpdatePolicy: android.util.Pair getCurrentFreezePeriod(java.time.LocalDate)>(r17);

     label06:
        if r18 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r19 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: android.util.Pair getSystemUpdateFreezePeriodRecord()>();

        $r5 = r19.<android.util.Pair: java.lang.Object first>;

        r2 = (java.time.LocalDate) $r5;

        $r6 = r19.<android.util.Pair: java.lang.Object second>;

        r20 = (java.time.LocalDate) $r6;

     label10:
        if r20 == null goto label20;

        if r2 != null goto label11;

        goto label20;

     label11:
        $r9 = virtualinvoke r20.<java.time.LocalDate: java.time.LocalDate plusDays(long)>(1L);

        $z1 = virtualinvoke r17.<java.time.LocalDate: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label13;

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z6 = virtualinvoke $r14.<com.android.server.devicepolicy.Owners: boolean setSystemUpdateFreezePeriodRecord(java.time.LocalDate,java.time.LocalDate)>(r2, r17);

     label12:
        goto label21;

     label13:
        $r10 = virtualinvoke r20.<java.time.LocalDate: java.time.LocalDate plusDays(long)>(1L);

        $z2 = virtualinvoke r17.<java.time.LocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>($r10);

        if $z2 == 0 goto label17;

        $z4 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: boolean withinRange(android.util.Pair,java.time.LocalDate)>(r18, r2);

        if $z4 == 0 goto label15;

        $z5 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: boolean withinRange(android.util.Pair,java.time.LocalDate)>(r18, r20);

        if $z5 == 0 goto label15;

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z6 = virtualinvoke $r13.<com.android.server.devicepolicy.Owners: boolean setSystemUpdateFreezePeriodRecord(java.time.LocalDate,java.time.LocalDate)>(r2, r17);

     label14:
        goto label21;

     label15:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z6 = virtualinvoke $r12.<com.android.server.devicepolicy.Owners: boolean setSystemUpdateFreezePeriodRecord(java.time.LocalDate,java.time.LocalDate)>(r17, r17);

     label16:
        goto label21;

     label17:
        $z3 = virtualinvoke r17.<java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>(r2);

        if $z3 == 0 goto label19;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z6 = virtualinvoke $r11.<com.android.server.devicepolicy.Owners: boolean setSystemUpdateFreezePeriodRecord(java.time.LocalDate,java.time.LocalDate)>(r17, r17);

     label18:
        goto label21;

     label19:
        z6 = 0;

        goto label21;

     label20:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        z6 = virtualinvoke $r7.<com.android.server.devicepolicy.Owners: boolean setSystemUpdateFreezePeriodRecord(java.time.LocalDate,java.time.LocalDate)>(r17, r17);

     label21:
        if z6 == 0 goto label23;

        if z0 == 0 goto label23;

     label22:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r8.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

     label23:
        exitmonitor r1;

     label24:
        return;

     label25:
        $r15 := @caughtexception;

     label26:
        exitmonitor r1;

     label27:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    private void updateUserControlDisabledPackagesLocked(java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.pm.PackageManagerInternal $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        virtualinvoke $r3.<android.content.pm.PackageManagerInternal: void setDeviceOwnerProtectedPackages(java.util.List)>(r1);

        return;
    }

    static void validateQualityConstant(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r6;
        java.lang.IllegalArgumentException $r5;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 32768 goto label2;

        if i0 == 65536 goto label2;

        if i0 == 131072 goto label2;

        if i0 == 196608 goto label2;

        if i0 == 262144 goto label2;

        if i0 == 327680 goto label2;

        if i0 == 393216 goto label2;

        if i0 != 524288 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid quality constant: 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    private void wipeDataNoLock(android.content.ComponentName, int, java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1;
        java.lang.String r2, r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$olEIpfE_PsDgrTFneHlR7G9MHyA $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wtfIfInLock()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$olEIpfE_PsDgrTFneHlR7G9MHyA;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$olEIpfE_PsDgrTFneHlR7G9MHyA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,android.content.ComponentName,int,java.lang.String,java.lang.String)>(r0, i1, r1, i0, r2, r3);

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r4);

        return;
    }

    private static boolean withinRange(android.util.Pair, java.time.LocalDate)
    {
        android.util.Pair r0;
        java.time.LocalDate r1;
        java.lang.Object $r2, $r4;
        java.time.chrono.ChronoLocalDate $r3, $r5;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.util.Pair;

        r1 := @parameter1: java.time.LocalDate;

        $r2 = r0.<android.util.Pair: java.lang.Object first>;

        $r3 = (java.time.chrono.ChronoLocalDate) $r2;

        $z0 = virtualinvoke r1.<java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>($r3);

        if $z0 != 0 goto label1;

        $r4 = r0.<android.util.Pair: java.lang.Object second>;

        $r5 = (java.time.chrono.ChronoLocalDate) $r4;

        $z1 = virtualinvoke r1.<java.time.LocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>($r5);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private void wtfIfInLock()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int wtfStack(java.lang.String,java.lang.String)>("DevicePolicyManager", "Shouldn\'t be called with DPMS lock held");

     label1:
        return;
    }

    public void addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.IntentFilter r1;
        int i0, i1, $i3, $i4, $i5, $i6;
        java.lang.Object r2;
        long l2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r16, $r19, r23;
        android.os.UserManager $r6;
        android.app.admin.DevicePolicyEventLogger $r7, $r8, $r10, $r11;
        java.lang.String[] $r9;
        android.content.pm.IPackageManager $r12, $r14;
        java.lang.String $r13, $r15;
        android.os.RemoteException $r17;
        java.lang.Throwable $r18, $r20;
        android.content.ComponentName r21;
        android.content.pm.UserInfo r22;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r21 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.IntentFilter;

        i0 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r21, "ComponentName is null");

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r21, -1);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l2 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r22 = virtualinvoke $r6.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i1);

     label03:
        if r22 != null goto label07;

     label04:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot call addCrossProfileIntentFilter if there is no parent");

     label05:
        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r16.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        exitmonitor r2;

     label06:
        return;

     label07:
        $i3 = i0 & 1;

        if $i3 == 0 goto label09;

     label08:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r15 = virtualinvoke r21.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i6 = r22.<android.content.pm.UserInfo: int id>;

        interfaceinvoke $r14.<android.content.pm.IPackageManager: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>(r1, $r15, i1, $i6, 0);

     label09:
        $i4 = i0 & 2;

        if $i4 == 0 goto label11;

     label10:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r13 = virtualinvoke r21.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i5 = r22.<android.content.pm.UserInfo: int id>;

        interfaceinvoke $r12.<android.content.pm.IPackageManager: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>(r1, $r13, $i5, i1, 0);

     label11:
        r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label12:
        goto label18;

     label13:
        $r18 := @caughtexception;

     label14:
        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r19.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

     label15:
        throw $r18;

     label16:
        $r17 := @caughtexception;

     label17:
        r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label18:
        virtualinvoke r23.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

     label19:
        exitmonitor r2;

     label20:
        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(48);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r21);

        $r9 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getIntentFilterActions(android.content.IntentFilter)>(r1);

        $r10 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r9);

        $r11 = virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label21:
        $r20 := @caughtexception;

     label22:
        exitmonitor r2;

     label23:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch android.os.RemoteException from label02 to label03 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch android.os.RemoteException from label04 to label05 with label16;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch android.os.RemoteException from label08 to label09 with label16;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch android.os.RemoteException from label10 to label11 with label16;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        java.util.ArrayList r3, r10;
        java.util.List $r4, r12;
        boolean $z0;
        android.app.admin.DevicePolicyEventLogger $r5, $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r10 = null;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -1);

        $r4 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        if $r4 != null goto label02;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders> = r3;

     label02:
        r12 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

     label03:
        $z0 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label05;

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r1);

        r10 = new java.util.ArrayList;

        specialinvoke r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r12);

     label04:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label05:
        exitmonitor r2;

     label06:
        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(49);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r9);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        if r10 == null goto label07;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: void access$2700(com.android.server.devicepolicy.DevicePolicyManagerService$LocalService,int,java.util.List)>($r7, i0, r10);

        return 1;

     label07:
        return 0;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public int addOverrideApn(android.content.ComponentName, android.telephony.data.ApnSetting)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.telephony.data.ApnSetting r1;
        boolean $z0, $z1;
        android.content.Context $r4;
        java.lang.Object $r5, $r8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$lwklMJIQriO8V2SlhyqCpHU90S8 $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7;
        java.lang.Integer $r9;
        int $i1;
        android.content.ComponentName r10;
        android.telephony.TelephonyManager r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.telephony.data.ApnSetting;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label3;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature>;

        if $z1 != 0 goto label1;

        goto label3;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "ComponentName is null in addOverrideApn");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ApnSetting is null in addOverrideApn");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r10);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r11 = (android.telephony.TelephonyManager) $r5;

        if r11 == null goto label2;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$lwklMJIQriO8V2SlhyqCpHU90S8;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$lwklMJIQriO8V2SlhyqCpHU90S8: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.telephony.TelephonyManager,android.telephony.data.ApnSetting)>(r0, r11, r1);

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r6);

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        return $i1;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "TelephonyManager is null when trying to add override apn");

        return -1;

     label3:
        return -1;
    }

    public void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.IntentFilter r1;
        int i0;
        java.lang.Object r2;
        long l1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r13, r18;
        android.content.pm.IPackageManager $r6, $r7;
        android.app.admin.DevicePolicyEventLogger $r8, $r9, $r11;
        java.lang.String[] $r10;
        java.lang.Throwable $r12, $r15;
        android.os.RemoteException $r14;
        android.content.ComponentName r16, r17;
        java.lang.String r21;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.IntentFilter;

        r17 := @parameter2: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "ComponentName is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r16, -1);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r6.<android.content.pm.IPackageManager: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>(r1, r17, i0);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r7.<android.content.pm.IPackageManager: void flushPackageRestrictionsAsUser(int)>(i0);

     label03:
        r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label04:
        goto label10;

     label05:
        $r12 := @caughtexception;

     label06:
        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label07:
        throw $r12;

     label08:
        $r14 := @caughtexception;

     label09:
        r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label10:
        virtualinvoke r18.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label11:
        exitmonitor r2;

     label12:
        if r17 == null goto label13;

        r21 = virtualinvoke r17.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label14;

     label13:
        r21 = null;

     label14:
        $r8 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(52);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r16);

        $r10 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getIntentFilterActions(android.content.IntentFilter)>(r1);

        $r11 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String,java.lang.String[])>(r21, $r10);

        virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label15:
        $r15 := @caughtexception;

     label16:
        exitmonitor r2;

     label17:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch android.os.RemoteException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public boolean approveCaCert(java.lang.String, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        android.util.ArraySet r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        com.android.server.devicepolicy.CertificateMonitor $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        boolean z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r2 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

     label02:
        if z0 == 0 goto label05;

     label03:
        z1 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r6);

     label04:
        goto label06;

     label05:
        z1 = interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>(r6);

     label06:
        if z1 != 0 goto label09;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r1;

     label10:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.CertificateMonitor mCertificateMonitor>;

        virtualinvoke $r4.<com.android.server.devicepolicy.CertificateMonitor: void onCertificateApprovalsChanged(int)>(i0);

        return 1;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean bindDeviceAdminServiceAsUser(android.content.ComponentName, android.app.IApplicationThread, android.os.IBinder, android.content.Intent, android.app.IServiceConnection, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.IBinder r1;
        android.content.Intent r2, r38;
        android.app.IServiceConnection r3;
        int i0, i2, $i3, i4;
        long l1;
        android.app.IActivityManager r4;
        android.content.ComponentName $r8, r30;
        java.util.List $r12;
        android.os.UserHandle $r13;
        boolean $z1, z2, z3, z4, z5;
        java.lang.SecurityException $r14;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r15, $r16, $r20, $r21, $r24, $r28, $r35;
        android.content.Context $r17, $r19;
        android.content.ContentResolver $r18;
        java.lang.String $r22, $r34, r37, r39, r40;
        android.os.RemoteException $r23, $r25;
        java.lang.Throwable $r26, $r27, $r29, r41;
        android.app.IApplicationThread r31;
        java.lang.StringBuilder $r32;
        java.lang.Object r36;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r30 := @parameter0: android.content.ComponentName;

        r31 := @parameter1: android.app.IApplicationThread;

        r1 := @parameter2: android.os.IBinder;

        r2 := @parameter3: android.content.Intent;

        r3 := @parameter4: android.app.IServiceConnection;

        i2 := @parameter5: int;

        i0 := @parameter6: int;

        z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z2 != 0 goto label01;

        return 0;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r30);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r31);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r8 = virtualinvoke r2.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r8 != null goto label03;

        $r22 = virtualinvoke r2.<android.content.Intent: java.lang.String getPackage()>();

        if $r22 == null goto label02;

        goto label03;

     label02:
        z3 = 0;

        goto label04;

     label03:
        z3 = 1;

     label04:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service intent must be explicit (with a package name or component): ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, $r34);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r35 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i3 = virtualinvoke $r35.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        if $i3 == i0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "target user id must be different from the calling user id");

        $r12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>(r30);

        $r13 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $z1 = interfaceinvoke $r12.<java.util.List: boolean contains(java.lang.Object)>($r13);

        if $z1 == 0 goto label24;

        r36 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r36;

     label07:
        r37 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getOwnerPackageNameForUserLocked(int)>(i0);

        exitmonitor r36;

     label08:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label09:
        r38 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Intent createCrossUserServiceIntent(android.content.Intent,java.lang.String,int)>(r2, r37, i0);

     label10:
        if r38 != null goto label11;

        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r21.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label11:
        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = virtualinvoke $r16.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r39 = virtualinvoke r2.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r18);

        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r40 = virtualinvoke $r19.<android.content.Context: java.lang.String getOpPackageName()>();

     label12:
        i4 = interfaceinvoke r4.<android.app.IActivityManager: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>(r31, r1, r2, r39, r3, i2, r40, i0);

     label13:
        z5 = 0;

        if i4 == 0 goto label14;

        z5 = 1;

     label14:
        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return z5;

     label15:
        $r27 := @caughtexception;

        r41 = $r27;

        goto label18;

     label16:
        $r25 := @caughtexception;

        goto label20;

     label17:
        $r29 := @caughtexception;

        r41 = $r29;

     label18:
        $r28 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r28.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw r41;

     label19:
        $r23 := @caughtexception;

     label20:
        $r24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r24.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label21:
        $r26 := @caughtexception;

     label22:
        exitmonitor r36;

     label23:
        throw $r26;

     label24:
        $r14 = new java.lang.SecurityException;

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Not allowed to bind to target user id");

        throw $r14;

        catch java.lang.Throwable from label07 to label08 with label21;
        catch android.os.RemoteException from label09 to label10 with label19;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch android.os.RemoteException from label11 to label12 with label19;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch android.os.RemoteException from label12 to label13 with label16;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public boolean canProfileOwnerResetPasswordWhenLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0, $z1;
        android.app.admin.DeviceAdminInfo $r2;
        android.content.pm.IPackageManager $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7;
        android.content.pm.ApplicationInfo r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("call canProfileOwnerResetPasswordWhenLocked");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label02:
        if r7 == null goto label16;

     label03:
        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getEncryptionStatus()>();

        if $i1 != 5 goto label16;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isResetPasswordTokenActiveForUserLocked(int)>(i0);

     label04:
        if z0 != 0 goto label05;

        goto label16;

     label05:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r2 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r4 = virtualinvoke $r2.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        r8 = interfaceinvoke $r3.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>($r4, 0, i0);

     label06:
        if r8 != null goto label09;

     label07:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot find AppInfo for profile owner");

        exitmonitor r1;

     label08:
        return 0;

     label09:
        $z1 = virtualinvoke r8.<android.content.pm.ApplicationInfo: boolean isEncryptionAware()>();

        if $z1 != 0 goto label11;

        exitmonitor r1;

     label10:
        return 0;

     label11:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", "PO should be able to reset password from direct boot");

        exitmonitor r1;

     label12:
        return 1;

     label13:
        $r6 := @caughtexception;

     label14:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to query PO app info", $r6);

        exitmonitor r1;

     label15:
        return 0;

     label16:
        exitmonitor r1;

     label17:
        return 0;

     label18:
        $r5 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch android.os.RemoteException from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public boolean checkDeviceIdentifierAccess(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r3, $r4;
        int i0, i1, $i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        android.content.Context $r2;
        android.content.ComponentName r5, r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureCallerIdentityMatchesIfNotSystem(java.lang.String,int,int)>(r1, i3, i0);

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean doesPackageMatchUid(java.lang.String,int)>(r1, i0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.READ_PHONE_STATE", i3, i0);

        if $i2 == 0 goto label2;

        return 0;

     label2:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getDeviceOwnerComponent(boolean)>(1);

        if r5 == null goto label4;

        $r4 = virtualinvoke r5.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label3;

        $z5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerDelegate(java.lang.String,int,java.lang.String)>(r1, i0, "delegation-cert-install");

        if $z5 == 0 goto label4;

     label3:
        return 1;

     label4:
        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwnerAsUser(int)>(i1);

        if r6 == null goto label6;

        $r3 = virtualinvoke r6.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label5;

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerDelegate(java.lang.String,int,java.lang.String)>(r1, i0, "delegation-cert-install");

        if $z3 == 0 goto label6;

     label5:
        z6 = 1;

        goto label7;

     label6:
        z6 = 0;

     label7:
        if z6 == 0 goto label8;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>(i1);

        if $z1 == 0 goto label8;

        return 1;

     label8:
        if z6 == 0 goto label9;

        return 1;

     label9:
        return 0;
    }

    public int checkProvisioningPreCondition(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageProfileAndDeviceOwners()>();

        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkProvisioningPreConditionSkipPermission(java.lang.String,java.lang.String)>(r1, r2);

        return $i0;
    }

    public void choosePrivateKeyAlias(int, android.net.Uri, java.lang.String, android.os.IBinder)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        java.lang.String r1;
        android.os.IBinder r2;
        android.os.UserHandle r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r14;
        android.content.Intent $r6;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KC0Z7yzWFjtErh_0xtfrg7axi3g $r13;
        boolean $z0, z1;
        android.app.admin.DeviceAdminInfo $r16;
        java.lang.Throwable $r17;
        android.net.Uri r18;
        android.content.ComponentName r19, r23;
        java.lang.Object r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r18 := @parameter1: android.net.Uri;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.IBinder;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("choose private key alias");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r3 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $i1 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        r19 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>($i1);

        if r19 != null goto label09;

        $z0 = virtualinvoke r3.<android.os.UserHandle: boolean isSystem()>();

        if $z0 == 0 goto label09;

        r20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r20;

     label01:
        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label02:
        if r4 == null goto label04;

     label03:
        $r16 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r19 = virtualinvoke $r16.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

     label04:
        exitmonitor r20;

     label05:
        goto label09;

     label06:
        $r17 := @caughtexception;

     label07:
        exitmonitor r20;

     label08:
        throw $r17;

     label09:
        if r19 != null goto label10;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendPrivateKeyAliasResponse(java.lang.String,android.os.IBinder)>(null, r2);

        return;

     label10:
        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.CHOOSE_PRIVATE_KEY_ALIAS");

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.app.extra.CHOOSE_PRIVATE_KEY_SENDER_UID", i0);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.CHOOSE_PRIVATE_KEY_URI", r18);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.CHOOSE_PRIVATE_KEY_ALIAS", r1);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)>("android.app.extra.CHOOSE_PRIVATE_KEY_RESPONSE", r2);

        virtualinvoke $r6.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $i2 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        r23 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName resolveDelegateReceiver(java.lang.String,java.lang.String,int)>("delegation-cert-selection", "android.app.action.CHOOSE_PRIVATE_KEY_ALIAS", $i2);

        if r23 == null goto label11;

        virtualinvoke $r6.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r23);

        z1 = 1;

        goto label12;

     label11:
        virtualinvoke $r6.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r19);

        z1 = 0;

     label12:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r13 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KC0Z7yzWFjtErh_0xtfrg7axi3g;

        specialinvoke $r13.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KC0Z7yzWFjtErh_0xtfrg7axi3g: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.Intent,android.os.UserHandle,android.os.IBinder,boolean)>(r0, $r6, r3, r2, z1);

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r13);

        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public void clearApplicationUserData(android.content.ComponentName, java.lang.String, android.content.pm.IPackageDataObserver)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r15;
        android.content.pm.IPackageDataObserver r2;
        int i0;
        long l1;
        java.lang.StringBuilder r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r11, $r22;
        android.app.IActivityManager $r8;
        android.os.RemoteException $r9, $r16;
        java.lang.Throwable $r10, $r12;
        android.content.ComponentName r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r17 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.pm.IPackageDataObserver;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r17, "ComponentName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "callback is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r17);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label01:
        $r8 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r8.<android.app.IActivityManager: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>(r1, 0, r2, i0);

     label02:
        goto label11;

     label03:
        $r10 := @caughtexception;

        goto label09;

     label04:
        $r12 := @caughtexception;

     label05:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to clear application user data for package ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r15, $r12);

     label06:
        interfaceinvoke r2.<android.content.pm.IPackageDataObserver: void onRemoveCompleted(java.lang.String,boolean)>(r1, 0);

     label07:
        goto label11;

     label08:
        $r16 := @caughtexception;

        goto label11;

     label09:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r10;

     label10:
        $r9 := @caughtexception;

     label11:
        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch java.lang.SecurityException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label03;
    }

    public void clearCrossProfileIntentFilters(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i2;
        java.lang.Object r1;
        long l1;
        android.content.pm.UserInfo r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r11, $r14, r17;
        android.os.UserManager $r6;
        android.content.pm.IPackageManager $r7, $r9;
        java.lang.String $r8, $r10;
        java.lang.Throwable $r12, $r13;
        android.os.RemoteException $r15;
        android.content.ComponentName r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "ComponentName is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r16, -1);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r6.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

     label03:
        if r2 != null goto label07;

     label04:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot call clearCrossProfileIntentFilter if there is no parent");

     label05:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        exitmonitor r1;

     label06:
        return;

     label07:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r8 = virtualinvoke r16.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke $r7.<android.content.pm.IPackageManager: void clearCrossProfileIntentFilters(int,java.lang.String)>(i0, $r8);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $i2 = r2.<android.content.pm.UserInfo: int id>;

        $r10 = virtualinvoke r16.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke $r9.<android.content.pm.IPackageManager: void clearCrossProfileIntentFilters(int,java.lang.String)>($i2, $r10);

     label08:
        r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label09:
        goto label15;

     label10:
        $r13 := @caughtexception;

     label11:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label12:
        throw $r13;

     label13:
        $r15 := @caughtexception;

     label14:
        r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label15:
        virtualinvoke r17.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r12 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label04 to label05 with label13;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void clearDeviceOwner(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        android.content.ComponentName r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r7, r21;
        com.android.server.devicepolicy.Owners $r8, $r9, $r10;
        java.lang.String $r11, $r14, r17;
        long $l3, $l6;
        byte $b4;
        com.android.internal.widget.LockPatternUtils $r15;
        java.lang.Throwable $r16;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r18;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$AJ1y854sYTZ_MPW0IOAcTsPyhjc r19;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r17 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r17, "packageName is null");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallingFromPackage(java.lang.String,int)>(r17, i0);

        if $z0 == 0 goto label9;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r2 = virtualinvoke $r8.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        i1 = virtualinvoke $r9.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r10.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z1 == 0 goto label5;

        $r11 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z2 == 0 goto label5;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        if i1 != $i2 goto label5;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>(i1);

        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $l3 = r18.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label2;

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $l6 = r18.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        virtualinvoke $r15.<com.android.internal.widget.LockPatternUtils: boolean removeEscrowToken(long,int)>($l6, i1);

     label2:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r19 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$AJ1y854sYTZ_MPW0IOAcTsPyhjc;

        specialinvoke r19.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$AJ1y854sYTZ_MPW0IOAcTsPyhjc: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,android.content.ComponentName)>(r0, r3, i1, r2);

        virtualinvoke r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r19);

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device owner removed: ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r14);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        r21 = new java.lang.SecurityException;

        specialinvoke r21.<java.lang.SecurityException: void <init>(java.lang.String)>("clearDeviceOwner can only be called by the device owner");

        throw r21;

     label6:
        $r16 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r16;

     label9:
        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Invalid packageName");

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        long l1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r11, r13;
        android.content.pm.IPackageManager $r6, $r7;
        java.lang.Throwable $r8, $r10;
        android.os.RemoteException $r9;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "ComponentName is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r12, -1);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r6.<android.content.pm.IPackageManager: void clearPackagePersistentPreferredActivities(java.lang.String,int)>(r1, i0);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r7.<android.content.pm.IPackageManager: void flushPackageRestrictionsAsUser(int)>(i0);

     label03:
        r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label04:
        goto label10;

     label05:
        $r10 := @caughtexception;

     label06:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label07:
        throw $r10;

     label08:
        $r9 := @caughtexception;

     label09:
        r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label10:
        virtualinvoke r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label11:
        exitmonitor r2;

     label12:
        return;

     label13:
        $r8 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch android.os.RemoteException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void clearProfileOwner(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$gHXBW5obI5bGEUL_qnloZ8Ik_Fo r3;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, r13;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i0, "clear profile owner");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r12, -1);

        r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$gHXBW5obI5bGEUL_qnloZ8Ik_Fo;

        specialinvoke r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$gHXBW5obI5bGEUL_qnloZ8Ik_Fo: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,android.content.ComponentName)>(r0, r2, i0, r12);

        virtualinvoke r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r3);

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile owner ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" removed from user ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r10);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void clearProfileOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DeviceAdminServiceController $r1;
        java.util.Set $r2, $r5;
        com.android.server.devicepolicy.Owners $r3, $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        virtualinvoke $r1.<com.android.server.devicepolicy.DeviceAdminServiceController: void stopServiceForOwner(int,java.lang.String)>(i0, "clear-profile-owner");

        if r6 == null goto label1;

        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = 0;

        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions> = null;

        $r5 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set defaultEnabledRestrictionsAlreadySet>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

     label1:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mCurrentInputMethodSet> = 0;

        $r2 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearUserPoliciesLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearApplicationRestrictions(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r3.<com.android.server.devicepolicy.Owners: void removeProfileOwner(int)>(i0);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r4.<com.android.server.devicepolicy.Owners: void writeProfileOwner(int)>(i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void deleteTransferOwnershipBundleLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void toggleBackupServiceActive(int,boolean)>(i0, 1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void applyManagedProfileRestrictionIfDeviceOwnerLocked()>();

        return;
    }

    public boolean clearResetPasswordToken(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r7;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r2, $r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Iu0rxnl5GhuXlGE2REoYShLaV_I r3;
        boolean z0, $z1, $z2;
        com.android.internal.widget.LockPatternUtils $r4;
        long $l1;
        byte $b2;
        java.lang.Boolean $r8;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label9;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r4.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label1;

        goto label9;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -1);

        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $l1 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Iu0rxnl5GhuXlGE2REoYShLaV_I;

        specialinvoke r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Iu0rxnl5GhuXlGE2REoYShLaV_I: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData,int)>(r0, r11, i0);

        $r7 = virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r3);

        $r8 = (java.lang.Boolean) $r7;

        z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r1;

     label3:
        return z0;

     label4:
        exitmonitor r1;

     label5:
        return 0;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

     label9:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void clearSystemUpdatePolicyFreezePeriodRecord()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r3, $r7, $r8;
        java.lang.String $r4, $r6;
        boolean $z0;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceShell(java.lang.String)>("clearSystemUpdatePolicyFreezePeriodRecord");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Clear freeze period record: ");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: java.lang.String getSystemUpdateFreezePeriodRecordAsString()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r6);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r7.<com.android.server.devicepolicy.Owners: boolean setSystemUpdateFreezePeriodRecord(java.time.LocalDate,java.time.LocalDate)>(null, null);

        if $z0 == 0 goto label2;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r8.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.Intent createAdminSupportIntent(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object r1, $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.String $r3, $r5, $r11, $r14, $r15, r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.ArrayList $r4, $r9;
        android.app.admin.DeviceAdminInfo $r6, $r12;
        android.content.ComponentName $r7, $r13;
        com.android.server.devicepolicy.Owners $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r16;
        java.lang.Throwable $r17;
        android.content.Intent r19, r21;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r20;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r22, r23;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r18 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r18);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i2 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        $r3 = "policy_disable_camera";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z0 != 0 goto label02;

        $r15 = "policy_disable_screen_capture";

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z7 == 0 goto label01;

        goto label02;

     label01:
        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        r19 = virtualinvoke $r16.<com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: android.content.Intent createUserRestrictionSupportIntent(int,java.lang.String)>(i0, r18);

        goto label16;

     label02:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label03:
        r20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r4 = r20.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label04:
        i4 = 0;

     label05:
        r21 = null;

        if i4 >= i1 goto label11;

     label06:
        $r9 = r20.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r22 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r10;

        $z3 = r22.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z3 == 0 goto label07;

        $r14 = "policy_disable_camera";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z6 != 0 goto label08;

     label07:
        $z4 = r22.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        if $z4 == 0 goto label10;

        $r11 = "policy_disable_screen_capture";

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z5 == 0 goto label10;

     label08:
        $r12 = r22.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r13 = virtualinvoke $r12.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        r21 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Intent createShowAdminSupportIntent(android.content.ComponentName,int)>($r13, i0);

     label09:
        goto label11;

     label10:
        i4 = i4 + 1;

        goto label05;

     label11:
        r19 = r21;

        if r21 != null goto label15;

        r19 = r21;

     label12:
        $r5 = "policy_disable_camera";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z1 == 0 goto label15;

        r23 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label13:
        r19 = r21;

        if r23 == null goto label15;

        r19 = r21;

     label14:
        $z2 = r23.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z2 == 0 goto label15;

        $r6 = r23.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r7 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i3 = virtualinvoke $r8.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        r19 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Intent createShowAdminSupportIntent(android.content.ComponentName,int)>($r7, $i3);

     label15:
        exitmonitor r1;

     label16:
        if r19 == null goto label17;

        virtualinvoke r19.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.RESTRICTION", r18);

     label17:
        return r19;

     label18:
        $r17 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r17;

        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.PersistableBundle r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i9, i11;
        java.lang.Object r2, $r16, r78;
        android.os.UserManagerInternal r3;
        java.lang.String $r4, $r5, $r8, $r23, $r30, $r46, r64, r70, r77;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6, z7, z8;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r9, $r12, $r13, $r14, $r27, $r31, $r40, $r41, $r47, $r56, $r75, $r84;
        android.os.UserHandle $r10, $r25, $r29, r73;
        java.lang.SecurityException $r11;
        android.content.pm.PackageManagerInternal $r15;
        com.android.server.storage.DeviceStorageMonitorInternal $r17;
        android.os.UserManager $r18, $r45;
        android.content.Intent $r19, $r20, $r21, $r24, r76;
        android.content.Context $r22, $r26, $r32, $r42;
        android.content.pm.IPackageManager $r28, $r34;
        android.content.ContentResolver $r33;
        android.os.ServiceSpecificException $r35, r67, r69, r82;
        com.android.server.devicepolicy.OverlayPackagesProvider $r36;
        java.util.Set $r37;
        java.lang.String[] $r38, r71;
        java.lang.Object[] $r39;
        java.lang.Throwable $r43, $r44, $r48, $r49, $r50, $r52, $r53, $r55, $r57, $r58, $r59, $r60, $r61, r66, r68, r80, r81;
        android.os.RemoteException $r51;
        android.os.UserManager$CheckedUserOperationException $r54, $r62, r74;
        android.content.ComponentName r63, r65;
        long l8, l12;
        short s10;
        android.content.pm.UserInfo r72;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r79;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r63 := @parameter0: android.content.ComponentName;

        r64 := @parameter1: java.lang.String;

        r65 := @parameter2: android.content.ComponentName;

        r1 := @parameter3: android.os.PersistableBundle;

        i0 := @parameter4: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r63, "admin is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r65, "profileOwner is null");

        $r4 = virtualinvoke r63.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r5 = virtualinvoke r65.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label73;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r10 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $z1 = virtualinvoke $r10.<android.os.UserHandle: boolean isSystem()>();

        if $z1 == 0 goto label72;

        $i1 = i0 & 2;

        if $i1 == 0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        $i2 = i0 & 4;

        if $i2 == 0 goto label03;

        $r42 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $z3 = staticinvoke <android.os.UserManager: boolean isDeviceInDemoMode(android.content.Context)>($r42);

        if $z3 == 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        $i6 = i0 & 16;

        if $i6 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label07:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r63, -2);

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i7 = virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l8 = virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label08:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r15 = virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        i9 = virtualinvoke $r15.<android.content.pm.PackageManagerInternal: int getUidTargetSdkVersion(int)>(i7);

        $r16 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/storage/DeviceStorageMonitorInternal;");

        $r17 = (com.android.server.storage.DeviceStorageMonitorInternal) $r16;

        z7 = interfaceinvoke $r17.<com.android.server.storage.DeviceStorageMonitorInternal: boolean isMemoryLow()>();

     label09:
        if z7 == 0 goto label15;

        if i9 >= 28 goto label13;

     label10:
        $r41 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r41.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l8);

        exitmonitor r2;

     label11:
        return null;

     label12:
        $r59 := @caughtexception;

        r66 = $r59;

        goto label69;

     label13:
        r67 = new android.os.ServiceSpecificException;

        specialinvoke r67.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(5, "low device storage");

        throw r67;

     label14:
        $r58 := @caughtexception;

        r68 = $r58;

        goto label66;

     label15:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        z8 = virtualinvoke $r18.<android.os.UserManager: boolean canAddMoreUsers()>();

     label16:
        if z8 != 0 goto label20;

        if i9 >= 28 goto label19;

     label17:
        $r40 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r40.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l8);

        exitmonitor r2;

     label18:
        return null;

     label19:
        r69 = new android.os.ServiceSpecificException;

        specialinvoke r69.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(6, "user limit reached");

        throw r69;

     label20:
        if z4 == 0 goto label21;

        s10 = 256;

        goto label22;

     label21:
        s10 = 0;

     label22:
        if z5 == 0 goto label23;

        r70 = "android.os.usertype.full.DEMO";

        goto label24;

     label23:
        r70 = "android.os.usertype.full.SECONDARY";

     label24:
        if z6 != 0 goto label27;

     label25:
        $r36 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.OverlayPackagesProvider mOverlayPackagesProvider>;

        $i5 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r37 = virtualinvoke $r36.<com.android.server.devicepolicy.OverlayPackagesProvider: java.util.Set getNonRequiredApps(android.content.ComponentName,int,java.lang.String)>(r63, $i5, "android.app.action.PROVISION_MANAGED_USER");

        $r38 = newarray (java.lang.String)[0];

        $r39 = interfaceinvoke $r37.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r38);

        r71 = (java.lang.String[]) $r39;

     label26:
        goto label28;

     label27:
        r71 = null;

     label28:
        r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

     label29:
        r72 = virtualinvoke r3.<android.os.UserManagerInternal: android.content.pm.UserInfo createUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,java.lang.String[])>(r64, r70, s10, r71);

     label30:
        r73 = null;

        if r72 == null goto label32;

     label31:
        r73 = virtualinvoke r72.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

     label32:
        goto label39;

     label33:
        $r50 := @caughtexception;

        r68 = $r50;

        goto label66;

     label34:
        $r54 := @caughtexception;

        r74 = $r54;

        goto label37;

     label35:
        $r60 := @caughtexception;

        r68 = $r60;

        goto label66;

     label36:
        $r62 := @caughtexception;

        r74 = $r62;

     label37:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Couldn\'t createUserEvenWhenDisallowed", r74);

     label38:
        r73 = null;

     label39:
        $r75 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r75.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l8);

     label40:
        exitmonitor r2;

     label41:
        if r73 != null goto label43;

        if i9 >= 28 goto label42;

        return null;

     label42:
        $r35 = new android.os.ServiceSpecificException;

        specialinvoke $r35.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(1, "failed to create user");

        throw $r35;

     label43:
        i11 = virtualinvoke r73.<android.os.UserHandle: int getIdentifier()>();

        $r19 = new android.content.Intent;

        specialinvoke $r19.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.MANAGED_USER_CREATED");

        $r20 = virtualinvoke $r19.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.user_handle", i11);

        $r21 = virtualinvoke $r20.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.app.extra.PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED", z6);

        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r23 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getManagedProvisioningPackage(android.content.Context)>($r22);

        $r24 = virtualinvoke $r21.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r23);

        r76 = virtualinvoke $r24.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r26 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r25 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r26.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r76, $r25);

        $r27 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l12 = virtualinvoke $r27.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label44:
        r77 = virtualinvoke r63.<android.content.ComponentName: java.lang.String getPackageName()>();

     label45:
        $r28 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $z2 = interfaceinvoke $r28.<android.content.pm.IPackageManager: boolean isPackageAvailable(java.lang.String,int)>(r77, i11);

        if $z2 != 0 goto label46;

        $r34 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r34.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>(r77, i11, 4194304, 1, null);

     label46:
        goto label48;

     label47:
        $r51 := @caughtexception;

     label48:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r65, 1, i11);

        $r29 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $i3 = virtualinvoke $r29.<android.os.UserHandle: int getIdentifier()>();

        $r30 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getProfileOwnerName(int)>($i3);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r65, $r30, i11);

        r78 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r78;

     label49:
        r79 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i11);

     label50:
        r79.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.os.PersistableBundle mInitBundle> = r1;

        r79.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mAdminBroadcastPending> = 1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i11);

        exitmonitor r78;

     label51:
        $i4 = i0 & 1;

        if $i4 == 0 goto label53;

     label52:
        $r32 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r33 = virtualinvoke $r32.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r33, "user_setup_complete", 1, i11);

     label53:
        $r31 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r31.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l12);

        return r73;

     label54:
        $r43 := @caughtexception;

        r80 = $r43;

        goto label56;

     label55:
        $r61 := @caughtexception;

        r80 = $r61;

     label56:
        exitmonitor r78;

     label57:
        throw r80;

     label58:
        $r49 := @caughtexception;

        r81 = $r49;

        goto label60;

     label59:
        $r44 := @caughtexception;

        r81 = $r44;

     label60:
        $r45 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r45.<android.os.UserManager: boolean removeUser(int)>(i11);

     label61:
        if i9 >= 28 goto label62;

        $r47 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r47.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l12);

        return null;

     label62:
        r82 = new android.os.ServiceSpecificException;

        $r46 = virtualinvoke r81.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke r82.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(1, $r46);

        throw r82;

     label63:
        $r55 := @caughtexception;

        $r56 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r56.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l12);

        throw $r55;

     label64:
        $r48 := @caughtexception;

        r66 = $r48;

        goto label69;

     label65:
        $r57 := @caughtexception;

        r68 = $r57;

     label66:
        $r84 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r84.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l8);

     label67:
        throw r68;

     label68:
        $r53 := @caughtexception;

        r66 = $r53;

     label69:
        exitmonitor r2;

     label70:
        throw r66;

     label71:
        $r52 := @caughtexception;

        r66 = $r52;

        goto label69;

     label72:
        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("createAndManageUser was called from non-system user");

        throw $r11;

     label73:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profileOwner ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r65);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and admin ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r63);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are not in the same package");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.Throwable from label07 to label08 with label68;
        catch java.lang.Throwable from label08 to label09 with label65;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label65;
        catch java.lang.Throwable from label17 to label18 with label12;
        catch java.lang.Throwable from label19 to label20 with label14;
        catch java.lang.Throwable from label25 to label26 with label14;
        catch android.os.UserManager$CheckedUserOperationException from label28 to label29 with label36;
        catch java.lang.Throwable from label28 to label29 with label35;
        catch android.os.UserManager$CheckedUserOperationException from label29 to label30 with label34;
        catch java.lang.Throwable from label29 to label30 with label33;
        catch android.os.UserManager$CheckedUserOperationException from label31 to label32 with label34;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label37 to label38 with label33;
        catch java.lang.Throwable from label39 to label40 with label64;
        catch java.lang.Throwable from label40 to label41 with label64;
        catch java.lang.Throwable from label44 to label45 with label59;
        catch android.os.RemoteException from label45 to label46 with label47;
        catch java.lang.Throwable from label45 to label46 with label59;
        catch java.lang.Throwable from label48 to label49 with label59;
        catch java.lang.Throwable from label49 to label50 with label55;
        catch java.lang.Throwable from label50 to label51 with label54;
        catch java.lang.Throwable from label52 to label53 with label58;
        catch java.lang.Throwable from label56 to label57 with label54;
        catch java.lang.Throwable from label57 to label58 with label58;
        catch java.lang.Throwable from label60 to label61 with label63;
        catch java.lang.Throwable from label62 to label63 with label63;
        catch java.lang.Throwable from label66 to label67 with label71;
        catch java.lang.Throwable from label67 to label68 with label71;
        catch java.lang.Throwable from label69 to label70 with label71;
    }

    void deleteTransferOwnershipBundleLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.io.File $r1, $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.io.File environmentGetUserSystemDirectory(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "transfer-ownership-parameters.xml");

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context $r1;
        boolean $z0;
        com.android.internal.util.IndentingPrintWriter $r2;
        com.android.server.devicepolicy.Owners $r4;
        com.android.server.devicepolicy.DeviceAdminServiceController $r5;
        com.android.server.devicepolicy.DevicePolicyConstants $r6;
        com.android.internal.util.StatLogger $r7;
        int $i0;
        java.lang.String $r9, $r11;
        com.android.server.devicepolicy.DevicePolicyCacheImpl $r12;
        com.android.server.devicepolicy.DeviceStateCacheImpl $r13;
        java.lang.Throwable $r14;
        java.io.FileDescriptor r15;
        java.io.PrintWriter r16;
        java.lang.String[] r17;
        java.lang.Object r19;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r15 := @parameter0: java.io.FileDescriptor;

        r16 := @parameter1: java.io.PrintWriter;

        r17 := @parameter2: java.lang.String[];

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r1, "DevicePolicyManager", r16);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r16, "  ");

        r19 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r19;

     label2:
        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current Device Policy Manager state:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r4.<com.android.server.devicepolicy.Owners: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DeviceAdminServiceController: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void dumpDevicePolicyData(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyConstants: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r7.<com.android.internal.util.StatLogger: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encryption Status: ");

        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getEncryptionStatus()>();

        $r9 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getEncryptionStatusName(int)>($i0);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r11);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache>;

        virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyCacheImpl: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache>;

        virtualinvoke $r13.<com.android.server.devicepolicy.DeviceStateCacheImpl: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        exitmonitor r19;

     label3:
        return;

     label4:
        $r14 := @caughtexception;

     label5:
        exitmonitor r19;

     label6:
        throw $r14;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void enableSystemApp(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r17;
        java.lang.Object r3;
        int i0, i2;
        long l1;
        java.lang.StringBuilder r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r20, r23;
        android.content.pm.IPackageManager $r6, $r12, $r13;
        android.app.admin.DevicePolicyEventLogger $r7, $r8, $r9, $r11;
        java.lang.String[] $r10;
        boolean $z0, z1, z2;
        android.os.RemoteException $r14;
        java.lang.Throwable $r18, $r19;
        android.content.ComponentName r21;
        java.lang.IllegalArgumentException r22;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r21 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r21, r1, -1, "delegation-enable-system-app");

        z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCurrentUserDemo()>();

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        i2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

     label03:
        if z1 != 0 goto label07;

     label04:
        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemApp(android.content.pm.IPackageManager,java.lang.String,int)>($r13, r2, i2);

        if $z0 == 0 goto label06;

     label05:
        goto label07;

     label06:
        r22 = new java.lang.IllegalArgumentException;

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only system apps can be enabled this way.");

        throw r22;

     label07:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r6.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>(r2, i0, 4194304, 1, null);

     label08:
        if z1 == 0 goto label10;

     label09:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r12.<android.content.pm.IPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>(r2, 1, 1, i0, "DevicePolicyManager");

     label10:
        r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label11:
        virtualinvoke r23.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label12:
        goto label18;

     label13:
        $r19 := @caughtexception;

        goto label22;

     label14:
        $r14 := @caughtexception;

     label15:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r17, $r14);

     label16:
        r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label17:
        goto label11;

     label18:
        exitmonitor r3;

     label19:
        if r21 != null goto label20;

        z2 = 1;

        goto label21;

     label20:
        z2 = 0;

     label21:
        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(64);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z2);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = r2;

        $r11 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r10);

        virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label22:
        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label23:
        throw $r19;

     label24:
        $r18 := @caughtexception;

     label25:
        exitmonitor r3;

     label26:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch android.os.RemoteException from label02 to label03 with label14;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch android.os.RemoteException from label04 to label05 with label14;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label06 to label07 with label14;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch android.os.RemoteException from label07 to label08 with label14;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label23 to label24 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    public int enableSystemAppWithIntent(android.content.ComponentName, java.lang.String, android.content.Intent)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r9, $r16, $r25, $r33, r39;
        android.content.Intent r2;
        java.lang.Object r3, $r18;
        int i0, i2, i6, i7;
        long l1;
        java.lang.StringBuilder r4, r42;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r11, $r29, $r34;
        android.content.Context $r6;
        android.content.pm.IPackageManager $r7, $r21, $r26;
        android.content.ContentResolver $r8;
        android.content.pm.ParceledListSlice $r10;
        android.app.admin.DevicePolicyEventLogger $r12, $r13, $r14, $r17;
        java.lang.String[] $r15;
        boolean $z0, $z1, z2;
        android.content.pm.ActivityInfo $r19, $r20;
        java.lang.Throwable $r27, $r28;
        android.os.RemoteException $r30;
        android.content.ComponentName r35;
        java.util.List r36;
        java.util.Iterator r37;
        android.content.pm.ResolveInfo r38;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r35 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.Intent;

        i6 = 0;

        i7 = 0;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r35, r1, -1, "delegation-enable-system-app");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        i2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = virtualinvoke r2.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r8);

        $r10 = interfaceinvoke $r7.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(r2, $r9, 786432, i2);

        r36 = virtualinvoke $r10.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label03:
        if r36 == null goto label13;

     label04:
        r37 = interfaceinvoke r36.<java.util.List: java.util.Iterator iterator()>();

     label05:
        i6 = i7;

     label06:
        $z0 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r18 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (android.content.pm.ResolveInfo) $r18;

        $r19 = r38.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r19 == null goto label12;

        $r20 = r38.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r39 = $r20.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemApp(android.content.pm.IPackageManager,java.lang.String,int)>($r21, r39, i2);

        if $z1 == 0 goto label10;

     label07:
        i7 = i7 + 1;

     label08:
        $r26 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r26.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>(r39, i0, 4194304, 1, null);

     label09:
        goto label12;

     label10:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enabling ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since is not a system app");

        $r25 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", $r25);

     label11:
        goto label12;

     label12:
        goto label05;

     label13:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label14:
        exitmonitor r3;

     label15:
        if r35 != null goto label16;

        z2 = 1;

        goto label17;

     label16:
        z2 = 0;

     label17:
        $r12 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(65);

        $r13 = virtualinvoke $r12.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z2);

        $r15 = newarray (java.lang.String)[1];

        $r16 = virtualinvoke r2.<android.content.Intent: java.lang.String getAction()>();

        $r15[0] = $r16;

        $r17 = virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r15);

        virtualinvoke $r17.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return i6;

     label18:
        $r28 := @caughtexception;

        goto label23;

     label19:
        $r30 := @caughtexception;

     label20:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve intent for: ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r33 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", $r33);

     label21:
        $r34 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r34.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        exitmonitor r3;

     label22:
        return 0;

     label23:
        $r29 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r29.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label24:
        throw $r28;

     label25:
        $r27 := @caughtexception;

     label26:
        exitmonitor r3;

     label27:
        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch android.os.RemoteException from label02 to label03 with label19;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch android.os.RemoteException from label04 to label05 with label19;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch android.os.RemoteException from label06 to label07 with label19;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch android.os.RemoteException from label08 to label09 with label19;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch android.os.RemoteException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public void enforceCallerCanRequestDeviceIdAttestation(android.content.ComponentName, java.lang.String, int) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean $z0, $z1;
        java.lang.SecurityException $r3;
        int i0, i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasProfileOwner(int)>(i1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r1, r2, -1, "delegation-cert-install");

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>(i1);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Profile Owner is not allowed to access Device IDs.");

        throw $r3;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r1, r2, -2, "delegation-cert-install");

        return;
    }

    public void enforceCanManageCaCerts(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        boolean $z0;
        android.content.Context $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerDelegate(java.lang.String,int,java.lang.String)>(r2, $i0, "delegation-cert-install");

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_CA_CERTIFICATES", null);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

     label2:
        return;
    }

    final void ensureLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object mLockDoNoUseDirectly>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        staticinvoke <android.util.Slog: int wtfStack(java.lang.String,java.lang.String)>("DevicePolicyManager", "Not holding DPMS lock.");

        return;
    }

    public android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i2;
        boolean z0, $z1, $z2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W0PqT_DujOnRfFtIRJT9BUc0AKo $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r12, $r20;
        java.lang.IllegalArgumentException $r8, $r18;
        java.lang.String $r9, $r10, $r11, $r25, r28;
        android.content.pm.ApplicationInfo $r17;
        java.lang.Throwable $r19;
        android.content.pm.ActivityInfo r26;
        android.app.admin.DeviceAdminInfo $r29;
        android.content.Context $r30;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W0PqT_DujOnRfFtIRJT9BUc0AKo;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W0PqT_DujOnRfFtIRJT9BUc0AKo: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName,int)>(r0, r1, i0);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        r26 = (android.content.pm.ActivityInfo) $r4;

        if r26 == null goto label6;

        $r11 = "android.permission.BIND_DEVICE_ADMIN";

        $r10 = r26.<android.content.pm.ActivityInfo: java.lang.String permission>;

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 != 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DeviceAdminReceiver ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be protected with ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.BIND_DEVICE_ADMIN");

        r28 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", r28);

        if z0 == 0 goto label3;

        $r17 = r26.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r17.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 > 23 goto label2;

        goto label3;

     label2:
        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r28);

        throw $r18;

     label3:
        $r29 = new android.app.admin.DeviceAdminInfo;

        $r30 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r29.<android.app.admin.DeviceAdminInfo: void <init>(android.content.Context,android.content.pm.ActivityInfo)>($r30, r26);

     label4:
        return $r29;

     label5:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad device admin requested for user=");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r25, $r19);

        return null;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown admin: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public long forceNetworkLogs()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eW23f0MqFt_d2il8jQ1FNpzoRrI r2;
        long l0;
        boolean $z0;
        com.android.server.devicepolicy.NetworkLogger $r3;
        java.lang.Long $r5;
        java.lang.Throwable $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r7;
        java.lang.IllegalStateException r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceShell(java.lang.String)>("forceNetworkLogs");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabledInternalLocked()>();

        if $z0 == 0 goto label5;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        if $r3 == null goto label3;

        r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eW23f0MqFt_d2il8jQ1FNpzoRrI;

        specialinvoke r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eW23f0MqFt_d2il8jQ1FNpzoRrI: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        $r4 = virtualinvoke r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r2);

        $r5 = (java.lang.Long) $r4;

        l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        exitmonitor r1;

     label2:
        return l0;

     label3:
        exitmonitor r1;

     label4:
        return 0L;

     label5:
        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("logging is not available");

        throw r8;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void forceRemoveActiveAdmin(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean $z0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$kMbNyFCPm_YTFbzEmBLvLJbyLPM $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceShell(java.lang.String)>("forceRemoveActiveAdmin");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$kMbNyFCPm_YTFbzEmBLvLJbyLPM;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$kMbNyFCPm_YTFbzEmBLvLJbyLPM: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName,int)>(r0, r1, i0);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        return;
    }

    public long forceSecurityLogs()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        com.android.server.devicepolicy.SecurityLogMonitor $r3;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceShell(java.lang.String)>("forceSecurityLogs");

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogGetLoggingEnabledProperty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        $l0 = virtualinvoke $r3.<com.android.server.devicepolicy.SecurityLogMonitor: long forceLogs()>();

        return $l0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("logging is not available");

        throw $r2;
    }

    public void forceUpdateUserSetupComplete()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4;
        boolean $z0, z1;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5;
        com.android.server.devicepolicy.DeviceStateCacheImpl $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageProfileAndDeviceOwners()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCallerSystemUserHandle()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean isBuildDebuggable()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsSecureGetIntForUser(java.lang.String,int,int)>("user_setup_complete", 0, 0);

        if $i0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete> = z1;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DeviceStateCacheImpl: void setDeviceProvisioned(boolean)>(z1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label4:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean generateKeyPair(android.content.ComponentName, java.lang.String, java.lang.String, android.security.keystore.ParcelableKeyGenParameterSpec, int, android.security.keymaster.KeymasterCertificateChain)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r4, $r21, $r25, $r28, r50;
        int i0, i1, $i3, $i7, i10, i11;
        android.security.keymaster.KeymasterCertificateChain r2;
        int[] r3;
        long l2;
        android.security.IKeyChainService r5;
        android.security.keystore.ParcelableKeyGenParameterSpec r6, r51;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r9, $r10, $r18, $r22, $r29, $r67, $r68;
        java.lang.IllegalArgumentException $r8, $r31;
        android.content.Context $r11;
        android.security.keystore.KeyGenParameterSpec$Builder $r12, r55;
        android.app.admin.DevicePolicyEventLogger $r13, $r14, $r15, $r17, r64;
        java.lang.String[] $r16;
        java.lang.Object[] $r19, $r23, $r26;
        java.lang.Integer $r20, $r24, $r27;
        byte[] $r30, r61;
        java.lang.Throwable $r32, $r35, $r36, $r37, $r38, $r39, $r40, $r43, $r44, $r45, $r46, $r47, $r48, r57, r58, r63;
        android.os.RemoteException $r33, $r34, $r41, $r42, r59;
        android.content.ComponentName r49;
        boolean z1, $z2, z3;
        android.security.keystore.KeyGenParameterSpec r52, r56;
        android.os.UserHandle r53;
        android.security.KeyChain$KeyChainConnection r54;
        android.os.ServiceSpecificException r60;
        java.lang.UnsupportedOperationException r62;
        java.lang.Thread $r66;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r49 := @parameter0: android.content.ComponentName;

        r50 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r51 := @parameter3: android.security.keystore.ParcelableKeyGenParameterSpec;

        i0 := @parameter4: int;

        r2 := @parameter5: android.security.keymaster.KeymasterCertificateChain;

        r3 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: int[] translateIdAttestationFlags(int)>(i0);

        if r3 == null goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        if z1 == 0 goto label03;

        $i7 = lengthof r3;

        if $i7 <= 0 goto label03;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCallerCanRequestDeviceIdAttestation(android.content.ComponentName,java.lang.String,int)>(r49, r50, i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceIndividualAttestationSupportedIfRequested(int[])>(r3);

        goto label04;

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r49, r50, -1, "delegation-cert-install");

     label04:
        r52 = virtualinvoke r51.<android.security.keystore.ParcelableKeyGenParameterSpec: android.security.keystore.KeyGenParameterSpec getSpec()>();

        r4 = virtualinvoke r52.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z2 != 0 goto label63;

        $i3 = virtualinvoke r52.<android.security.keystore.KeyGenParameterSpec: int getUid()>();

        if $i3 == -1 goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Only the caller can be granted access to the generated keypair.");

        return 0;

     label05:
        if z1 == 0 goto label07;

        $r30 = virtualinvoke r52.<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()>();

        if $r30 == null goto label06;

        goto label07;

     label06:
        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requested Device ID attestation but challenge is empty.");

        throw $r31;

     label07:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r53 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l2 = virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label08:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r54 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r11, r53);

     label09:
        r5 = virtualinvoke r54.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        r55 = new android.security.keystore.KeyGenParameterSpec$Builder;

        specialinvoke r55.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(android.security.keystore.KeyGenParameterSpec)>(r52);

        $r12 = virtualinvoke r55.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setAttestationChallenge(byte[])>(null);

        r56 = virtualinvoke $r12.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

        r6 = new android.security.keystore.ParcelableKeyGenParameterSpec;

        specialinvoke r6.<android.security.keystore.ParcelableKeyGenParameterSpec: void <init>(android.security.keystore.KeyGenParameterSpec)>(r56);

        i10 = interfaceinvoke r5.<android.security.IKeyChainService: int generateKeyPair(java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec)>(r1, r6);

     label10:
        if i10 == 0 goto label20;

     label11:
        $r23 = newarray (java.lang.Object)[1];

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r23[0] = $r24;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("KeyChain failed to generate a keypair, error %d.", $r23);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r25);

     label12:
        if i10 == 6 goto label19;

        if r54 == null goto label18;

     label13:
        virtualinvoke r54.<android.security.KeyChain$KeyChainConnection: void close()>();

     label14:
        goto label18;

     label15:
        $r47 := @caughtexception;

        r57 = $r47;

        goto label62;

     label16:
        $r38 := @caughtexception;

        r58 = $r38;

        goto label56;

     label17:
        $r33 := @caughtexception;

        r59 = $r33;

        goto label59;

     label18:
        $r29 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r29.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        return 0;

     label19:
        r60 = new android.os.ServiceSpecificException;

        $r26 = newarray (java.lang.Object)[1];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r26[0] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("KeyChain error: %d", $r26);

        specialinvoke r60.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(1, $r28);

        throw r60;

     label20:
        interfaceinvoke r5.<android.security.IKeyChainService: void setGrant(int,java.lang.String,boolean)>(i1, r4, 1);

        r61 = virtualinvoke r52.<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()>();

     label21:
        if r61 == null goto label35;

     label22:
        i11 = interfaceinvoke r5.<android.security.IKeyChainService: int attestKey(java.lang.String,byte[],int[],android.security.keymaster.KeymasterCertificateChain)>(r4, r61, r3, r2);

     label23:
        if i11 == 0 goto label33;

     label24:
        $r19 = newarray (java.lang.Object)[2];

        $r19[0] = r4;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        $r19[1] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Attestation for %s failed (rc=%d), deleting key.", $r19);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r21);

        interfaceinvoke r5.<android.security.IKeyChainService: boolean removeKeyPair(java.lang.String)>(r4);

     label25:
        if i11 == 3 goto label32;

        if r54 == null goto label31;

     label26:
        virtualinvoke r54.<android.security.KeyChain$KeyChainConnection: void close()>();

     label27:
        goto label31;

     label28:
        $r43 := @caughtexception;

        r57 = $r43;

        goto label62;

     label29:
        $r37 := @caughtexception;

        r58 = $r37;

        goto label56;

     label30:
        $r42 := @caughtexception;

        r59 = $r42;

        goto label59;

     label31:
        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        return 0;

     label32:
        r62 = new java.lang.UnsupportedOperationException;

        specialinvoke r62.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Device does not support Device ID attestation.");

        throw r62;

     label33:
        goto label35;

     label34:
        $r36 := @caughtexception;

        r63 = $r36;

        goto label44;

     label35:
        if r49 != null goto label36;

        z3 = 1;

        goto label37;

     label36:
        z3 = 0;

     label37:
        r64 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(59);

     label38:
        $r13 = virtualinvoke r64.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r50);

        $r14 = virtualinvoke $r13.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z3);

        $r15 = virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = r1;

        $r17 = virtualinvoke $r15.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r16);

        virtualinvoke $r17.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label39:
        if r54 == null goto label41;

     label40:
        virtualinvoke r54.<android.security.KeyChain$KeyChainConnection: void close()>();

     label41:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r18.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        return 1;

     label42:
        $r40 := @caughtexception;

        r63 = $r40;

        goto label44;

     label43:
        $r45 := @caughtexception;

        r63 = $r45;

     label44:
        goto label46;

     label45:
        $r39 := @caughtexception;

        r63 = $r39;

     label46:
        if r54 == null goto label51;

     label47:
        virtualinvoke r54.<android.security.KeyChain$KeyChainConnection: void close()>();

     label48:
        goto label51;

     label49:
        $r35 := @caughtexception;

     label50:
        virtualinvoke r63.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r35);

     label51:
        throw r63;

     label52:
        $r32 := @caughtexception;

        r58 = $r32;

        goto label56;

     label53:
        $r41 := @caughtexception;

        r59 = $r41;

        goto label59;

     label54:
        $r44 := @caughtexception;

        r57 = $r44;

        goto label62;

     label55:
        $r46 := @caughtexception;

        r58 = $r46;

     label56:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Interrupted while generating keypair", r58);

        $r66 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r66.<java.lang.Thread: void interrupt()>();

     label57:
        goto label60;

     label58:
        $r34 := @caughtexception;

        r59 = $r34;

     label59:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "KeyChain error while generating a keypair", r59);

     label60:
        $r67 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r67.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        return 0;

     label61:
        $r48 := @caughtexception;

        r57 = $r48;

     label62:
        $r68 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r68.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

        throw r57;

     label63:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty alias provided.");

        throw $r8;

        catch android.os.RemoteException from label08 to label09 with label58;
        catch java.lang.InterruptedException from label08 to label09 with label55;
        catch java.lang.Throwable from label08 to label09 with label54;
        catch java.lang.Throwable from label09 to label10 with label45;
        catch java.lang.Throwable from label11 to label12 with label43;
        catch android.os.RemoteException from label13 to label14 with label17;
        catch java.lang.InterruptedException from label13 to label14 with label16;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label19 to label20 with label43;
        catch java.lang.Throwable from label20 to label21 with label43;
        catch java.lang.Throwable from label22 to label23 with label34;
        catch java.lang.Throwable from label24 to label25 with label34;
        catch android.os.RemoteException from label26 to label27 with label30;
        catch java.lang.InterruptedException from label26 to label27 with label29;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.lang.Throwable from label37 to label38 with label34;
        catch java.lang.Throwable from label38 to label39 with label42;
        catch android.os.RemoteException from label40 to label41 with label53;
        catch java.lang.InterruptedException from label40 to label41 with label52;
        catch java.lang.Throwable from label40 to label41 with label61;
        catch java.lang.Throwable from label47 to label48 with label49;
        catch android.os.RemoteException from label50 to label51 with label53;
        catch java.lang.InterruptedException from label50 to label51 with label52;
        catch java.lang.Throwable from label50 to label51 with label61;
        catch android.os.RemoteException from label51 to label52 with label53;
        catch java.lang.InterruptedException from label51 to label52 with label52;
        catch java.lang.Throwable from label51 to label52 with label61;
        catch java.lang.Throwable from label56 to label57 with label61;
        catch java.lang.Throwable from label59 to label60 with label61;
    }

    protected java.util.Set getAcceptedCaCertificates(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        java.util.Set $r3;
        java.lang.Throwable $r4;
        android.os.UserHandle r5;
        android.util.ArraySet r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.os.UserHandle;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r3;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $i0 = virtualinvoke r5.<android.os.UserHandle: int getIdentifier()>();

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i0);

        r6 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabled()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)>($i0, 0);

        return $r1;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z3, z5;
        java.lang.Object r1, $r8;
        int $i0, $i1, $i2, i3;
        java.lang.String[] $r2, r15;
        java.lang.Object[] $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4, $r9, r14;
        java.util.Set $r5, $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r6;
        java.util.ArrayList $r7;
        java.lang.Throwable $r11;
        android.util.ArraySet r12;
        java.util.Iterator r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i3 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i3);

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return null;

     label01:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r12 = new android.util.ArraySet;

        specialinvoke r12.<android.util.ArraySet: void <init>()>();

     label03:
        if z0 != 0 goto label07;

     label04:
        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i3);

        $r7 = $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        r13 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r8 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r8;

        $r10 = $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        virtualinvoke r12.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r10);

     label06:
        goto label05;

     label07:
        r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerOfOrganizationOwnedDeviceLocked(int)>(i3);

     label08:
        if r14 == null goto label11;

        if z0 != 0 goto label10;

     label09:
        $i1 = virtualinvoke r14.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        if $i2 == i3 goto label11;

     label10:
        z5 = 1;

        goto label12;

     label11:
        z5 = 0;

     label12:
        if z5 == 0 goto label14;

     label13:
        $r4 = virtualinvoke r14.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()>();

        $r5 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        virtualinvoke r12.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r5);

     label14:
        $i0 = virtualinvoke r12.<android.util.ArraySet: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = virtualinvoke r12.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        r15 = (java.lang.String[]) $r3;

        exitmonitor r1;

     label15:
        return r15;

     label16:
        $r11 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName, int) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(android.content.ComponentName,int,java.lang.String)>(r1, i0, null);

        return $r2;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName, int, boolean) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(android.content.ComponentName,int,boolean,java.lang.String)>(r1, i0, z0, null);

        return $r2;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(android.content.ComponentName, int, java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, i2, i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1, r61;
        boolean z0, z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.StringBuilder $r3, $r17, $r25, $r33, $r47, $r63;
        java.lang.SecurityException $r8, $r23, $r31, $r39, $r56, $r69;
        java.lang.String $r9, $r24, $r32, $r40, $r54, $r57, r60, $r68, $r70;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r10;
        android.util.ArrayMap $r11;
        java.lang.Object $r12;
        android.app.admin.DeviceAdminInfo $r13, $r15, $r19, $r27, $r35, $r49, $r53, $r65, $r67;
        android.content.ComponentName $r14, $r16, $r20, $r28, $r36, $r50, r59, $r66;
        java.util.Set $r41;
        java.lang.Integer $r42;
        android.content.Context $r58;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r59 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r60 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i2 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(r59, i0, i2);

        if r1 == null goto label1;

        return r1;

     label1:
        if r60 == null goto label2;

        $r58 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r58.<android.content.Context: int checkCallingPermission(java.lang.String)>(r60);

        if $i1 != 0 goto label2;

        return null;

     label2:
        if r59 == null goto label7;

        i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        $r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i3);

        $r11 = $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r59);

        r61 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r12;

        $r13 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r14 = virtualinvoke $r13.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>($r14, i3);

        $r15 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r16 = virtualinvoke $r15.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>($r16, i3);

        if i0 == -2 goto label6;

        if i0 == -1 goto label5;

        if i0 == -3 goto label4;

        $r41 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DA_DISALLOWED_POLICIES>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r41.<java.util.Set: boolean contains(java.lang.Object)>($r42);

        if $z2 == 0 goto label3;

        if z0 != 0 goto label3;

        if z1 != 0 goto label3;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r49 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r50 = virtualinvoke $r49.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a device owner or profile owner, so may not use policy: ");

        $r53 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r54 = virtualinvoke $r53.<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>(i0);

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = new java.lang.SecurityException;

        $r57 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<java.lang.SecurityException: void <init>(java.lang.String)>($r57);

        throw $r56;

     label3:
        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r65 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r66 = virtualinvoke $r65.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did not specify uses-policy for: ");

        $r67 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r68 = virtualinvoke $r67.<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>(i0);

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r69 = new java.lang.SecurityException;

        $r70 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r69.<java.lang.SecurityException: void <init>(java.lang.String)>($r70);

        throw $r69;

     label4:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r35 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r36 = virtualinvoke $r35.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not the profile owner on organization-owned device");

        $r39 = new java.lang.SecurityException;

        $r40 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.SecurityException: void <init>(java.lang.String)>($r40);

        throw $r39;

     label5:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r27 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r28 = virtualinvoke $r27.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not own the profile");

        $r31 = new java.lang.SecurityException;

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.SecurityException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label6:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r19 = r61.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r20 = virtualinvoke $r19.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not own the device");

        $r23 = new java.lang.SecurityException;

        $r24 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.SecurityException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin owned by uid ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for policy #");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(android.content.ComponentName, int, boolean, java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean z0;
        java.lang.String r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.ComponentName r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>($i1, "call APIs on the parent profile");

     label1:
        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(android.content.ComponentName,int,java.lang.String)>(r3, i0, r1);

        if z0 == 0 goto label2;

        r4 = virtualinvoke r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()>();

        goto label2;

     label2:
        return r4;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        java.lang.String $r6, $r9, $r10, $r13;
        android.app.admin.DeviceAdminInfo $r7, $r11;
        android.content.pm.ActivityInfo $r8, $r12;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r4 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        if r2 == null goto label1;

        $r6 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r9 = $r8.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        $r11 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r12 = virtualinvoke $r11.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r13 = $r12.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label1;

        return r2;

     label1:
        return null;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1, r3;
        android.content.ComponentName r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r2 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i0, "call APIs on the parent profile");

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r2, i0);

        r3 = r1;

        if r1 == null goto label2;

        r3 = r1;

        if z0 == 0 goto label2;

        r3 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()>();

     label2:
        return r3;
    }

    public java.util.List getActiveAdmins(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        int i0, i1, i2;
        boolean $z0;
        java.util.ArrayList $r3, $r4, r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r6;
        android.app.admin.DeviceAdminInfo $r7;
        android.content.ComponentName $r8;
        java.util.List $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        $r9 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r9;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label03:
        if i0 > 0 goto label06;

     label04:
        exitmonitor r1;

     label05:
        return null;

     label06:
        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>(int)>(i0);

     label07:
        i2 = 0;

     label08:
        if i2 >= i0 goto label11;

     label09:
        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $r7 = $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label10:
        i2 = i2 + 1;

        goto label08;

     label11:
        exitmonitor r1;

     label12:
        return r11;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public java.util.List getAffiliationIds(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5;
        java.util.Set $r6;
        java.util.List $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        java.util.ArrayList r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -1);

        r10 = new java.util.ArrayList;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i0);

        $r6 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds>;

        specialinvoke r10.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        exitmonitor r1;

     label3:
        return r10;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.List getAllCrossProfilePackages()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        java.util.List $r2, $r3, $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceAcrossUsersPermissions()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getProfileOwnerAdminsForCurrentProfileGroup()>();

        r6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfilePackagesForAdmins(java.util.List)>($r2);

        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDefaultCrossProfilePackages()>();

        interfaceinvoke r6.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Dgn7mIvO7GV5cu_z9FT6ErtFPmE $r3;
        java.lang.Object $r5;
        java.util.List $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Dgn7mIvO7GV5cu_z9FT6ErtFPmE;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Dgn7mIvO7GV5cu_z9FT6ErtFPmE: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Fgo6KGvG0qe9Ep_X392nYq_GMH4 $r3;
        java.lang.Object $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Fgo6KGvG0qe9Ep_X392nYq_GMH4;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Fgo6KGvG0qe9Ep_X392nYq_GMH4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.lang.String) $r5;

        return $r6;
    }

    public java.lang.String getAlwaysOnVpnPackageForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("getAlwaysOnVpnPackageForUser");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOrProfileOwnerAdminLocked(int)>(i0);

     label02:
        if r3 == null goto label05;

     label03:
        r4 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String mAlwaysOnVpnPackage>;

     label04:
        goto label06;

     label05:
        r4 = null;

     label06:
        exitmonitor r1;

     label07:
        return r4;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$xNvmnuCEG4Pl75_HBeeIW_JURcQ $r4;
        java.lang.Object $r6;
        android.os.Bundle $r7;
        android.content.ComponentName r8;
        android.os.UserHandle r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r8, r1, -1, "delegation-app-restrictions");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r9 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$xNvmnuCEG4Pl75_HBeeIW_JURcQ;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$xNvmnuCEG4Pl75_HBeeIW_JURcQ: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,android.os.UserHandle)>(r0, r2, r9);

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r4);

        $r7 = (android.os.Bundle) $r6;

        return $r7;
    }

    public java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        java.lang.Object $r1;
        android.content.ComponentName r2;
        java.util.List r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r2 := @parameter0: android.content.ComponentName;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>(r2, "delegation-app-restrictions");

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r1 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (java.lang.String) $r1;

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public boolean getAutoTimeEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOnUser0OrProfileOwnerOrganizationOwned()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsGlobalGetInt(java.lang.String,int)>("auto_time", 0);

        if $i0 <= 0 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    public boolean getAutoTimeRequired()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.devicepolicy.Owners $r3;
        java.util.Set $r4;
        java.lang.Integer $r6;
        int $i0;
        java.lang.Throwable $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r8, r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label03:
        if r8 == null goto label06;

     label04:
        $z2 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        if $z2 == 0 goto label06;

        exitmonitor r1;

     label05:
        return 1;

     label06:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: java.util.Set getProfileOwnerKeys()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>($i0);

     label08:
        if r9 == null goto label11;

     label09:
        $z1 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        if $z1 == 0 goto label11;

        exitmonitor r1;

     label10:
        return 1;

     label11:
        goto label07;

     label12:
        exitmonitor r1;

     label13:
        return 0;

     label14:
        $r7 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean getAutoTimeZoneEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOnUser0OrProfileOwnerOrganizationOwned()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsGlobalGetInt(java.lang.String,int)>("auto_time_zone", 0);

        if $i0 <= 0 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    public java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r7;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r2, $r6;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6QNqernNKqCvV8XDd_StT3J4XnM r3;
        boolean $z0;
        java.util.List $r8, r11;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r8;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r10);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -1);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6QNqernNKqCvV8XDd_StT3J4XnM;

        specialinvoke r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6QNqernNKqCvV8XDd_StT3J4XnM: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName,int)>(r0, r10, i0);

        $r7 = virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r3);

        r11 = (java.util.List) $r7;

        exitmonitor r1;

     label3:
        return r11;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean getBluetoothContactSharingDisabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -1);

        z0 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing>;

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean getBluetoothContactSharingDisabledForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label02:
        if r3 == null goto label05;

     label03:
        z0 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing>;

     label04:
        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean getCameraDisabled(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int,boolean,boolean)>(r1, i0, 1, z0);

        return $z1;
    }

    public java.lang.String getCertInstallerPackage(android.content.ComponentName) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        java.lang.Object $r1;
        android.content.ComponentName r2;
        java.util.List r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r2 := @parameter0: android.content.ComponentName;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>(r2, "delegation-cert-install");

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r1 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (java.lang.String) $r1;

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.util.List $r4, r7;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r6, -1);

        r7 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages>;

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.List getCrossProfileCalendarPackagesForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.util.List $r2, $r3, r6;
        java.lang.Throwable $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label03:
        if r5 == null goto label06;

     label04:
        r6 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages>;

        exitmonitor r1;

     label05:
        return r6;

     label06:
        exitmonitor r1;

     label07:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -1);

        z0 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean getCrossProfileCallerIdDisabledForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label02:
        if r3 == null goto label05;

     label03:
        z0 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

     label04:
        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -1);

        z0 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch>;

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean getCrossProfileContactsSearchDisabledForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label02:
        if r3 == null goto label05;

     label03:
        z0 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch>;

     label04:
        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.util.List getCrossProfilePackages(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.util.List $r4, r7;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r6, -1);

        r7 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages>;

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.util.List $r3, $r4, $r6, r10;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        java.util.ArrayList r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r8, -1);

        $r3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        if $r3 == null goto label07;

        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

     label02:
        goto label07;

     label03:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean binderIsCallingUidMyUid()>();

        if $z1 == 0 goto label05;

        r9 = new java.util.ArrayList;

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        specialinvoke r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        exitmonitor r1;

     label04:
        return r9;

     label05:
        r10 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        exitmonitor r1;

     label06:
        return r10;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int getCurrentFailedPasswordAttempts(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.internal.widget.LockPatternUtils $r3;
        android.content.Context $r4;
        int $i0, i1, $i2, i3;
        java.lang.Throwable $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z1 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z2 != 0 goto label3;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE");

        if $i0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(null, 1, z0);

     label3:
        $i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getCredentialOwner(int,boolean)>(i1, z0);

        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>($i2);

        i3 = $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        exitmonitor r1;

     label4:
        return i3;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.List getDefaultCrossProfilePackages()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.HashSet $r2;
        android.content.Context $r3, $r6;
        android.content.res.Resources $r4, $r7;
        java.lang.String[] $r5, $r8;
        java.util.ArrayList $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236096);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r5);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236128);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r8);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r9;
    }

    public java.util.List getDelegatePackages(android.content.ComponentName, java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r11;
        int i0;
        java.lang.Object r2;
        java.lang.String[] $r5;
        java.util.List $r6, r16;
        boolean $z0;
        java.lang.StringBuilder $r7;
        java.lang.IllegalArgumentException $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r12;
        java.lang.Throwable $r14;
        android.content.ComponentName r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r15 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "ComponentName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Scope is null");

        $r5 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] DELEGATIONS>;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $z0 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label6;

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r15, -1);

        r16 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatePackagesInternalLocked(java.lang.String,int)>(r1, i0);

        exitmonitor r2;

     label2:
        return r16;

     label3:
        $r14 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r14;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected delegation scope: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List getDelegatedScopes(android.content.ComponentName, java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r10;
        int i0, i1;
        java.lang.Object r2, $r13;
        java.lang.SecurityException r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r11;
        android.util.ArrayMap $r12;
        java.lang.Throwable $r15;
        android.content.ComponentName r16;
        java.util.List r17;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Delegate package is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

        if r16 == null goto label03;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r16, -1);

     label02:
        goto label04;

     label03:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallingFromPackage(java.lang.String,int)>(r1, i0);

        if $z0 == 0 goto label10;

     label04:
        $r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r12 = $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r17 = (java.util.List) $r13;

     label05:
        if r17 != null goto label08;

     label06:
        r17 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label07:
        goto label08;

     label08:
        exitmonitor r2;

     label09:
        return r17;

     label10:
        r3 = new java.lang.SecurityException;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller with uid ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw r3;

     label11:
        $r15 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, $r13;
        int i0, $i1, i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.Owners $r3, $r4;
        java.util.ArrayList $r5, $r10;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        java.lang.Object $r11;
        android.app.admin.DeviceAdminInfo $r12;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i1);

        $r5 = r14.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $r10 = r14.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r11;

        $r12 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r13 = virtualinvoke $r12.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $z0 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label3;

        return r2;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active admin for device owner not found. component=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", $r9);

        return null;
    }

    public android.content.ComponentName getDeviceOwnerComponent(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r2, $r3, $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        int $i0, $i1;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return null;

     label01:
        if z0 != 0 goto label02;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

     label02:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label03:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z2 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z2 != 0 goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        if z0 == 0 goto label08;

     label06:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if $i0 == $i1 goto label08;

        exitmonitor r1;

     label07:
        return null;

     label08:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r7 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        exitmonitor r1;

     label09:
        return r7;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.lang.CharSequence getDeviceOwnerLockScreenInfo()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.internal.widget.LockPatternUtils $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r2 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: java.lang.String getDeviceOwnerInfo()>();

        return $r2;
    }

    public java.lang.String getDeviceOwnerName()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        com.android.server.devicepolicy.Owners $r2, $r3;
        java.lang.String $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z1 != 0 goto label4;

        exitmonitor r1;

     label3:
        return null;

     label4:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: java.lang.String getDeviceOwnerPackageName()>();

        r6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getApplicationLabel(java.lang.String,int)>($r4, 0);

        exitmonitor r1;

     label5:
        return r6;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1, r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        r2 = r1;

        if r1 != null goto label1;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerOfOrganizationOwnedDeviceLocked(int)>(i0);

     label1:
        return r2;
    }

    public java.lang.CharSequence getDeviceOwnerOrganizationName()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        r4 = null;

        if z0 != 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label3:
        if r2 != null goto label4;

        goto label5;

     label4:
        r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName>;

     label5:
        exitmonitor r1;

     label6:
        return r4;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int getDeviceOwnerUserId()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r3, $r4;
        java.lang.Throwable $r5;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        i0 = -10000;

        if z0 != 0 goto label1;

        return -10000;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z1 == 0 goto label3;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        i0 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

     label3:
        exitmonitor r1;

     label4:
        return i0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.List getDisallowedSystemApps(android.content.ComponentName, int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.String r2;
        java.util.ArrayList $r3;
        com.android.server.devicepolicy.OverlayPackagesProvider $r4;
        java.util.Set $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageProfileAndDeviceOwners()>();

        $r3 = new java.util.ArrayList;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.OverlayPackagesProvider mOverlayPackagesProvider>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.OverlayPackagesProvider: java.util.Set getNonRequiredApps(android.content.ComponentName,int,java.lang.String)>(r1, i0, r2);

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        return $r3;
    }

    public boolean getDoNotAskCredentialsOnBoot()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0;
        android.content.Context $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT", null);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        z0 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean doNotAskCredentialsOnBoot>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public volatile java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getEndUserSessionMessage(android.content.ComponentName)>(r1);

        return $r2;
    }

    public java.lang.String getEndUserSessionMessage(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        java.lang.String r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -2);

        r6 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String endUserSessionMessage>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.Context $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        android.app.admin.FactoryResetProtectionPolicy r6;
        java.lang.SecurityException r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        r6 = null;

        if z0 != 0 goto label01;

        return null;

     label01:
        i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getFrpManagementAgentUidOrThrow()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if r5 != null goto label07;

     label02:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        if i0 == $i1 goto label05;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MASTER_CLEAR");

        if $i3 != 0 goto label04;

     label03:
        goto label05;

     label04:
        r7 = new java.lang.SecurityException;

        specialinvoke r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Must be called by the FRP management agent on device");

        throw r7;

     label05:
        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked(int)>($i2);

     label06:
        goto label08;

     label07:
        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -3);

     label08:
        exitmonitor r1;

     label09:
        if r8 == null goto label10;

        r6 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.FactoryResetProtectionPolicy mFactoryResetProtectionPolicy>;

     label10:
        return r6;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean getForceEphemeralUsers(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -2);

        z0 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers>;

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String settingsGlobalGetString(java.lang.String)>("private_dns_specifier");

        return $r4;
    }

    public int getGlobalPrivateDnsMode(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r5;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.content.ComponentName r4;
        byte b1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r4);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String settingsGlobalGetString(java.lang.String)>("private_dns_mode");

        r5 = r1;

        if r1 != null goto label02;

        r5 = "opportunistic";

     label02:
        b1 = -1;

        i0 = virtualinvoke r5.<java.lang.String: int hashCode()>();

        if i0 == -539229175 goto label06;

        if i0 == -299803597 goto label05;

        if i0 == 109935 goto label04;

     label03:
        goto label07;

     label04:
        $z3 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z3 == 0 goto label03;

        b1 = 0;

        goto label07;

     label05:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("hostname");

        if $z2 == 0 goto label03;

        b1 = 2;

        goto label07;

     label06:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("opportunistic");

        if $z1 == 0 goto label03;

        b1 = 1;

     label07:
        if b1 == 0 goto label10;

        if b1 == 1 goto label09;

        if b1 == 2 goto label08;

        return 0;

     label08:
        return 3;

     label09:
        return 2;

     label10:
        return 1;
    }

    public android.content.ComponentName getGlobalProxyAdmin(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        int i0, i1, i2;
        boolean $z0, $z1;
        java.util.ArrayList $r3, $r4;
        android.app.admin.DeviceAdminInfo $r6;
        java.lang.Throwable $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $r3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label08;

     label05:
        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r8 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $z1 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z1 == 0 goto label07;

        $r6 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r9 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        exitmonitor r1;

     label06:
        return r9;

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        exitmonitor r1;

     label09:
        return null;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.util.List getKeepUninstalledPackages(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        java.util.List r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r4, r1, -2, "delegation-keep-uninstalled-packages");

        r5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getKeepUninstalledPackagesLocked()>();

        exitmonitor r2;

     label3:
        return r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, $z3, z4;
        long l0;
        java.lang.Object r1, $r5, r15;
        int i1, i2, $i3, $i4, $i5, i6, i8, i9, i10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2, r13;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4, $r8, $r11;
        android.os.UserHandle $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r7;
        java.lang.Throwable $r9, $r10;
        android.content.ComponentName r12;
        java.util.List r17, r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        i6 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z1 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i6);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label03:
        if r12 == null goto label10;

     label04:
        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r12, i6, z0);

     label05:
        i8 = 0;

        if r13 == null goto label07;

     label06:
        i8 = r13.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

     label07:
        exitmonitor r1;

     label08:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return i8;

     label09:
        $r9 := @caughtexception;

        goto label30;

     label10:
        if z0 != 0 goto label13;

     label11:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i6);

        if $z3 == 0 goto label13;

        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i6);

        r15 = $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

     label12:
        goto label14;

     label13:
        r15 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i6, z0);

     label14:
        i9 = 0;

     label15:
        r17 = (java.util.List) r15;

        i1 = interfaceinvoke r17.<java.util.List: int size()>();

     label16:
        i10 = 0;

     label17:
        if i10 >= i1 goto label28;

     label18:
        r18 = (java.util.List) r15;

        $r5 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i10);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $r6 = virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        i2 = virtualinvoke $r6.<android.os.UserHandle: int getIdentifier()>();

     label19:
        if z0 != 0 goto label20;

        if i2 != i6 goto label20;

        z4 = 1;

        goto label21;

     label20:
        z4 = 0;

     label21:
        if z4 != 0 goto label26;

     label22:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i2);

        if $z2 != 0 goto label24;

     label23:
        goto label26;

     label24:
        $i4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        $i5 = $i4 & 438;

        i9 = i9 | $i5;

     label25:
        goto label27;

     label26:
        $i3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        i9 = i9 | $i3;

     label27:
        i10 = i10 + 1;

        goto label17;

     label28:
        exitmonitor r1;

     label29:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return i9;

     label30:
        exitmonitor r1;

     label31:
        throw $r9;

     label32:
        $r10 := @caughtexception;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label32;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label18 to label19 with label09;
        catch java.lang.Throwable from label22 to label23 with label09;
        catch java.lang.Throwable from label24 to label25 with label09;
        catch java.lang.Throwable from label26 to label27 with label09;
        catch java.lang.Throwable from label28 to label29 with label09;
        catch java.lang.Throwable from label30 to label31 with label09;
        catch java.lang.Throwable from label31 to label32 with label32;
    }

    public long getLastBugReportRequestTime()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrManageUsers()>();

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $l0 = $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastBugReportRequestTime>;

        return $l0;
    }

    public long getLastNetworkLogRetrievalTime()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrManageUsers()>();

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $l0 = $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastNetworkLogsRetrievalTime>;

        return $l0;
    }

    public long getLastSecurityLogRetrievalTime()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrManageUsers()>();

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $l0 = $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastSecurityLogRetrievalTime>;

        return $l0;
    }

    final java.lang.Object getLockObject()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        com.android.internal.util.StatLogger $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        l0 = virtualinvoke $r1.<com.android.internal.util.StatLogger: long getTime()>();

        staticinvoke <com.android.server.LockGuard: void guard(int)>(7);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r2.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(0, l0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object mLockDoNoUseDirectly>;

        return $r3;
    }

    public int getLockTaskFeatures(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r4;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        int i0, i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanCallLockTaskLocked(android.content.ComponentName)>(r6);

        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        i1 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures>;

        exitmonitor r1;

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String[] getLockTaskPackages(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.os.UserHandle $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5;
        java.lang.String[] $r6, r11;
        java.lang.Object[] $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        java.util.List r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanCallLockTaskLocked(android.content.ComponentName)>(r9);

        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r10 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $i1 = interfaceinvoke r10.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i1];

        $r7 = interfaceinvoke r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r11 = (java.lang.String[]) $r7;

        exitmonitor r1;

     label2:
        return r11;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        java.lang.CharSequence r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForUidLocked(android.content.ComponentName,int)>(r6, $i0);

        r7 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage>;

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.lang.CharSequence r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query support message for user");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r4, i0);

     label03:
        if r5 == null goto label06;

     label04:
        r6 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage>;

        exitmonitor r1;

     label05:
        return r6;

     label06:
        exitmonitor r1;

     label07:
        return null;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public long getManagedProfileMaximumTimeOff(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        long l0;
        java.lang.Throwable $r2;
        android.content.ComponentName r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: android.content.ComponentName;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r3, -3, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r4);

        l0 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getManagedUserId(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        android.content.pm.UserInfo r2;
        android.os.UserManager $r3;
        java.util.List $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.UserInfo) $r5;

        $i1 = r2.<android.content.pm.UserInfo: int id>;

        if $i1 == i0 goto label1;

        $z0 = virtualinvoke r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $i2 = r2.<android.content.pm.UserInfo: int id>;

        return $i2;

     label3:
        return -1;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        com.android.internal.widget.LockPatternUtils $r2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        int i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z1 == 0 goto label12;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label12;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if r4 == null goto label04;

     label02:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r4, i1, z0);

     label03:
        goto label05;

     label04:
        r5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int,boolean)>(i1, z0);

     label05:
        i2 = 0;

        if r5 == null goto label07;

     label06:
        i2 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

     label07:
        exitmonitor r1;

     label08:
        return i2;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

     label12:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public long getMaximumTimeToLock(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0, z1;
        java.lang.Object r1;
        long l1, l3;
        java.util.List $r2;
        byte $b2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        l3 = 0L;

        if z1 != 0 goto label01;

        return 0L;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if r4 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r4, i0, z0);

     label03:
        if r5 == null goto label05;

     label04:
        l3 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

     label05:
        exitmonitor r1;

     label06:
        return l3;

     label07:
        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i0, z0);

        l1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLockPolicyFromAdmins(java.util.List)>($r2);

     label08:
        $b2 = l1 cmp 9223372036854775807L;

        if $b2 != 0 goto label09;

        goto label10;

     label09:
        l3 = l1;

     label10:
        exitmonitor r1;

     label11:
        return l3;

     label12:
        $r3 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, r8;
        boolean $z0;
        java.util.List $r3, r12;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7;
        java.util.ArrayList r10, r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        r10 = new java.util.ArrayList;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        return r10;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r6, -1);

        $r3 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages>;

        if $r3 != null goto label4;

        r11 = new java.util.ArrayList;

        r8 = r11;

        specialinvoke r11.<java.util.ArrayList: void <init>()>();

     label3:
        goto label5;

     label4:
        r8 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages>;

     label5:
        exitmonitor r1;

     label6:
        r12 = (java.util.List) r8;

        return r12;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int getOrganizationColor(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $i2 = <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_ORGANIZATION_COLOR>;

        return $i2;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>($i1, "get organization color");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r6, -1);

        i0 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor>;

        exitmonitor r1;

     label3:
        return i0;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getOrganizationColorForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0, i1, i2;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        $i0 = <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_ORGANIZATION_COLOR>;

        return $i0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i1, "get organization color");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i1);

     label03:
        if r3 == null goto label06;

     label04:
        i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor>;

     label05:
        goto label07;

     label06:
        i2 = <com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int DEF_ORGANIZATION_COLOR>;

     label07:
        exitmonitor r1;

     label08:
        return i2;

     label09:
        $r2 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public java.lang.CharSequence getOrganizationName(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        java.lang.String r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>($i0, "get organization name");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r6, -1);

        r7 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName>;

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.CharSequence getOrganizationNameForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        r4 = null;

        if z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i0, "get organization name");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label03:
        if r2 == null goto label06;

     label04:
        r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName>;

     label05:
        goto label06;

     label06:
        exitmonitor r1;

     label07:
        return r4;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.util.List getOverrideApns(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean $z0, $z1;
        java.util.List $r2, $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature>;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null in getOverrideApns");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getOverrideApnsUnchecked()>();

        return $r4;

     label2:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;
    }

    public android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.util.ArrayList r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        java.util.Set $r3;
        java.lang.Throwable $r4;
        android.os.UserHandle r5;
        java.lang.Object r6;
        android.content.pm.StringParceledListSlice r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.os.UserHandle;

        i0 = virtualinvoke r5.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOrFullCrossUsersPermission(int)>(i0);

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r6;

     label1:
        r7 = new android.content.pm.StringParceledListSlice;

        r1 = new java.util.ArrayList;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r3 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        specialinvoke r7.<android.content.pm.StringParceledListSlice: void <init>(java.util.List)>(r1);

        exitmonitor r6;

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r6;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getPasswordComplexity(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1, $r3, $r6;
        android.content.pm.PackageManager $r2;
        int $i0, i1, i2, i3;
        java.lang.String[] $r4;
        android.app.admin.DevicePolicyEventLogger $r5, r10;
        android.content.Context $r7;
        com.android.internal.widget.LockSettingsInternal $r8;
        java.lang.Throwable $r9;
        java.lang.String r11;
        java.lang.Object r12;
        android.app.admin.PasswordMetrics r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        r10 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(72);

        if z0 == 0 goto label01;

        r11 = "calledFromParent";

        goto label02;

     label01:
        r11 = "notCalledFromParent";

     label02:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>($i0);

        $r5 = virtualinvoke r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String,java.lang.String[])>(r11, $r4);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        if z0 == 0 goto label03;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOrSystemUser()>();

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>(i1);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REQUEST_PASSWORD_COMPLEXITY", "Must have android.permission.REQUEST_PASSWORD_COMPLEXITY permission.");

        r12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r12;

     label04:
        i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getCredentialOwner(int,boolean)>(i1, z0);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal>;

        r13 = virtualinvoke $r8.<com.android.internal.widget.LockSettingsInternal: android.app.admin.PasswordMetrics getUserPasswordMetrics(int)>(i2);

     label05:
        if r13 != null goto label06;

        i3 = 0;

        goto label07;

     label06:
        i3 = virtualinvoke r13.<android.app.admin.PasswordMetrics: int determineComplexity()>();

     label07:
        exitmonitor r12;

     label08:
        return i3;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor r12;

     label11:
        throw $r9;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public long getPasswordExpiration(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        long l1;
        com.android.internal.widget.LockPatternUtils $r2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label7;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label1;

        goto label7;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        l1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName,int,boolean)>(r4, i0, z0);

        exitmonitor r1;

     label3:
        return l1;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

     label7:
        return 0L;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1, $r4;
        java.util.List r2;
        int i0, i6, i9;
        com.android.internal.widget.LockPatternUtils $r3;
        byte $b1, $b3, $b5;
        long $l2, $l4, l7, l8, l10;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7, r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        i6 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label24;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label24;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i6);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        l7 = 0L;

        if r6 == null goto label09;

     label02:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r6, i6, z0);

     label03:
        if r7 == null goto label06;

     label04:
        l8 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

     label05:
        goto label07;

     label06:
        l8 = 0L;

     label07:
        exitmonitor r1;

     label08:
        return l8;

     label09:
        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i6, z0);

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

     label10:
        i9 = 0;

     label11:
        if i9 >= i0 goto label19;

     label12:
        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i9);

        r8 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r4;

     label13:
        $b1 = l7 cmp 0L;

        if $b1 == 0 goto label17;

        l10 = l7;

     label14:
        $l2 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label18;

     label15:
        l10 = l7;

     label16:
        $l4 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b5 = l7 cmp $l4;

        if $b5 <= 0 goto label18;

     label17:
        l10 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

     label18:
        i9 = i9 + 1;

        l7 = l10;

        goto label11;

     label19:
        exitmonitor r1;

     label20:
        return l7;

     label21:
        $r5 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r5;

     label24:
        return 0L;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public int getPasswordHistoryLength(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0, $z1;
        com.android.internal.widget.LockPatternUtils $r2;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$tWYI31o9UB0oOJEus8BJtUC2mSA' $r3;
        java.util.function.Function r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z1 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r3 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$tWYI31o9UB0oOJEus8BJtUC2mSA: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$tWYI31o9UB0oOJEus8BJtUC2mSA' INSTANCE>;

        r4 = (java.util.function.Function) $r3;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r4, 0);

        return $i1;
    }

    public int getPasswordMinimumLength(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$8m6ETZ9G6u09DOeRclrLBLmcvXY' $r2;
        java.util.function.Function r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8m6ETZ9G6u09DOeRclrLBLmcvXY: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$8m6ETZ9G6u09DOeRclrLBLmcvXY' INSTANCE>;

        r3 = (java.util.function.Function) $r2;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r3, 131072);

        return $i1;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$8lOCXThb21-zutHjuKq74wAF1gU' $r2;
        java.util.function.Function r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8lOCXThb21_zutHjuKq74wAF1gU: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$8lOCXThb21-zutHjuKq74wAF1gU' INSTANCE>;

        r3 = (java.util.function.Function) $r2;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r3, 393216);

        return $i1;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$cNgs8e5vj88uyEUuc68wGOw_Hhs' $r2;
        java.util.function.Function r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$cNgs8e5vj88uyEUuc68wGOw_Hhs: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$cNgs8e5vj88uyEUuc68wGOw_Hhs' INSTANCE>;

        r3 = (java.util.function.Function) $r2;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r3, 393216);

        return $i1;
    }

    public android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.app.admin.PasswordMetrics $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int,boolean)>(i0, 0);

        return $r1;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$XCuce-y3cC1XYNnIB5yVmAnp8So' $r2;
        java.util.function.Function r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$XCuce_y3cC1XYNnIB5yVmAnp8So: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$XCuce-y3cC1XYNnIB5yVmAnp8So' INSTANCE>;

        r3 = (java.util.function.Function) $r2;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r3, 393216);

        return $i1;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$kSoXdhWKOQf1JjdKOiwdvbdlo98' $r2;
        java.util.function.Function r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$kSoXdhWKOQf1JjdKOiwdvbdlo98: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$kSoXdhWKOQf1JjdKOiwdvbdlo98' INSTANCE>;

        r3 = (java.util.function.Function) $r2;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r3, 393216);

        return $i1;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$AuOlu0RbyACpjyqkDNCn8M9U_-4' $r2;
        java.util.function.Function r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$AuOlu0RbyACpjyqkDNCn8M9U__4: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$AuOlu0RbyACpjyqkDNCn8M9U_-4' INSTANCE>;

        r3 = (java.util.function.Function) $r2;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r3, 393216);

        return $i1;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        boolean z0;
        com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$Omg78vw58IPNY8HRcUSslIMaH40' $r2;
        java.util.function.Function r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = <com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Omg78vw58IPNY8HRcUSslIMaH40: com.android.server.devicepolicy.'-$$Lambda$DevicePolicyManagerService$Omg78vw58IPNY8HRcUSslIMaH40' INSTANCE>;

        r3 = (java.util.function.Function) $r2;

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getStrictestPasswordRequirement(android.content.ComponentName,int,boolean,java.util.function.Function,int)>(r1, i0, z0, r3, 393216);

        return $i1;
    }

    public int getPasswordQuality(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        int i0, $i1, i2, i3, i4, i5, i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2, r9;
        android.app.admin.PasswordPolicy $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        java.util.List r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i2);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        i3 = 0;

        if r8 == null goto label09;

     label02:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r8, i2, z0);

     label03:
        if r9 == null goto label06;

     label04:
        $r6 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        i4 = $r6.<android.app.admin.PasswordPolicy: int quality>;

     label05:
        goto label07;

     label06:
        i4 = 0;

     label07:
        exitmonitor r1;

     label08:
        return i4;

     label09:
        r10 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i2, z0);

        i0 = interfaceinvoke r10.<java.util.List: int size()>();

     label10:
        i5 = 0;

     label11:
        if i5 >= i0 goto label16;

     label12:
        $r3 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i5);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r3;

     label13:
        i6 = i3;

     label14:
        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i1 = $r4.<android.app.admin.PasswordPolicy: int quality>;

        if i3 >= $i1 goto label15;

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        i6 = $r5.<android.app.admin.PasswordPolicy: int quality>;

     label15:
        i5 = i5 + 1;

        i3 = i6;

        goto label11;

     label16:
        exitmonitor r1;

     label17:
        return i3;

     label18:
        $r7 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.Owners $r3;
        android.app.admin.SystemUpdateInfo $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo getSystemUpdateInfo()>();

        return $r4;
    }

    public int getPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, r13;
        android.content.pm.PackageManager r3;
        android.os.UserHandle r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r5, $r7, $r8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$aHdStmjUzTsD7JoubrCGz5Qp3Bs r6;
        int i0;
        boolean $z0;
        java.lang.Object $r9, r14;
        java.lang.Integer $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        r13 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r3 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r12, r13, -1, "delegation-permission-grant");

        goto label1;

     label1:
        r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r14;

     label2:
        r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$aHdStmjUzTsD7JoubrCGz5Qp3Bs;

        specialinvoke r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$aHdStmjUzTsD7JoubrCGz5Qp3Bs: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,android.os.UserHandle,java.lang.String,java.lang.String,android.content.pm.PackageManager)>(r0, r13, r4, r2, r1, r3);

        $r9 = virtualinvoke r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r6);

        $r10 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        exitmonitor r14;

     label3:
        return i0;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r14;

     label6:
        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getPermissionPolicy(android.content.ComponentName) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        int i0, i1;
        java.lang.Object r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r5;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        i1 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPermissionPolicy>;

        exitmonitor r5;

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r5;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List getPermittedAccessibilityServices(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        java.util.List r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -1);

        r6 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.List getPermittedAccessibilityServicesForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r7, $r14;
        int i0, i1, $i3, $i4, $i5, i6, i7, i8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.util.List r3, r26;
        long l2;
        boolean $z0, $z1, $z2;
        android.os.UserManager $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6, $r19;
        android.accessibilityservice.AccessibilityServiceInfo $r8;
        android.content.pm.ResolveInfo $r9;
        android.content.pm.ApplicationInfo $r10;
        java.lang.String $r11;
        java.util.ArrayList $r12, $r13, $r16, r20, r22, r23;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r15;
        java.lang.Throwable $r17, $r18;
        int[] r21;
        android.content.pm.UserInfo r24;
        android.view.accessibility.AccessibilityManager r25;
        java.util.Iterator r27;
        android.content.pm.ServiceInfo r28;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i6 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        r20 = null;

     label02:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r21 = virtualinvoke $r4.<android.os.UserManager: int[] getProfileIdsWithDisabled(int)>(i6);

        i0 = lengthof r21;

     label03:
        i7 = 0;

     label04:
        if i7 >= i0 goto label16;

     label05:
        $i5 = r21[i7];

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>($i5);

        $r12 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

     label06:
        i8 = 0;

        r22 = r20;

     label07:
        if i8 >= i1 goto label15;

     label08:
        $r13 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r15 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        r3 = $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

     label09:
        r23 = r22;

        if r3 == null goto label14;

        if r22 != null goto label12;

     label10:
        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        r23 = $r16;

     label11:
        goto label14;

     label12:
        interfaceinvoke r22.<java.util.List: boolean retainAll(java.util.Collection)>(r3);

     label13:
        r23 = r22;

     label14:
        i8 = i8 + 1;

        r22 = r23;

        goto label07;

     label15:
        i7 = i7 + 1;

        r20 = r22;

        goto label04;

     label16:
        if r20 == null goto label31;

     label17:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l2 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label18:
        r24 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getUserInfo(int)>(i6);

     label19:
        $z1 = virtualinvoke r24.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label20;

        i6 = r24.<android.content.pm.UserInfo: int profileGroupId>;

     label20:
        r25 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.accessibility.AccessibilityManager getAccessibilityManagerForUser(int)>(i6);

     label21:
        r26 = virtualinvoke r25.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>();

     label22:
        if r26 == null goto label26;

     label23:
        r27 = interfaceinvoke r26.<java.util.List: java.util.Iterator iterator()>();

     label24:
        $z2 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label26;

        $r7 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.accessibilityservice.AccessibilityServiceInfo) $r7;

        $r9 = virtualinvoke $r8.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        r28 = $r9.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r10 = r28.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r10.<android.content.pm.ApplicationInfo: int flags>;

        $i4 = $i3 & 1;

        if $i4 == 0 goto label25;

        $r11 = r28.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        interfaceinvoke r20.<java.util.List: boolean add(java.lang.Object)>($r11);

     label25:
        goto label24;

     label26:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

     label27:
        goto label31;

     label28:
        $r18 := @caughtexception;

     label29:
        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r19.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

     label30:
        throw $r18;

     label31:
        exitmonitor r1;

     label32:
        return r20;

     label33:
        $r17 := @caughtexception;

     label34:
        exitmonitor r1;

     label35:
        throw $r17;

        catch java.lang.Throwable from label02 to label03 with label33;
        catch java.lang.Throwable from label05 to label06 with label33;
        catch java.lang.Throwable from label08 to label09 with label33;
        catch java.lang.Throwable from label10 to label11 with label33;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Throwable from label17 to label18 with label33;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label29 to label30 with label33;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label34 to label35 with label33;
    }

    public java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        java.util.List r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -1);

        r6 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.List getPermittedInputMethods(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        java.util.List r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -1);

        r6 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.List getPermittedInputMethodsForCurrentUser()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r1, $r6, $r11;
        java.util.List r2, r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.util.ArrayList $r4, $r10, $r13, r15, r17;
        com.android.server.inputmethod.InputMethodManagerInternal $r5;
        boolean $z0;
        android.view.inputmethod.InputMethodInfo $r7;
        android.content.pm.ApplicationInfo $r8;
        java.lang.String $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r12;
        java.lang.Throwable $r14;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r16;
        java.util.Iterator r19;
        android.content.pm.ServiceInfo r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        r15 = null;

     label01:
        r16 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i0);

     label02:
        i4 = 0;

     label03:
        $r4 = r16.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i4 >= $i1 goto label10;

        $r10 = r16.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r12 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r11;

        r2 = $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

     label04:
        r17 = r15;

        if r2 == null goto label09;

        if r15 != null goto label07;

     label05:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r17 = $r13;

     label06:
        goto label09;

     label07:
        interfaceinvoke r15.<java.util.List: boolean retainAll(java.util.Collection)>(r2);

     label08:
        r17 = r15;

     label09:
        i4 = i4 + 1;

        r15 = r17;

        goto label03;

     label10:
        if r15 == null goto label16;

     label11:
        $r5 = staticinvoke <com.android.server.inputmethod.InputMethodManagerInternal: com.android.server.inputmethod.InputMethodManagerInternal get()>();

        r18 = virtualinvoke $r5.<com.android.server.inputmethod.InputMethodManagerInternal: java.util.List getInputMethodListAsUser(int)>(i0);

     label12:
        if r18 == null goto label16;

     label13:
        r19 = interfaceinvoke r18.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r6 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.view.inputmethod.InputMethodInfo) $r6;

        r20 = virtualinvoke $r7.<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>();

        $r8 = r20.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r8.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label15;

        $r9 = r20.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r9);

     label15:
        goto label14;

     label16:
        exitmonitor r1;

     label17:
        return r15;

     label18:
        $r14 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public int getPersonalAppsSuspendedReasons(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        long l0, $l4;
        boolean z0, z1;
        int i1, $i6;
        byte $b2, $b5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r7;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r4, -3, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r5);

        l0 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        z0 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps>;

     label02:
        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label05;

     label03:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $l4 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long systemCurrentTimeMillis()>();

        $b5 = $l4 cmp l0;

        if $b5 <= 0 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int makeSuspensionReasons(boolean,boolean)>(z0, z1);

        $r6 = newarray (java.lang.Object)[2];

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i6 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("getPersonalAppsSuspendedReasons user: %d; result: %d", $r6);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", $r10);

        exitmonitor r1;

     label07:
        return i1;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.content.ComponentName getProfileOwner(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.Owners $r2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r4 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i0);

        exitmonitor r1;

     label3:
        return r4;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        com.android.server.devicepolicy.Owners $r4;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7;
        android.app.admin.DeviceAdminInfo $r8;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r1 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i1);

        if r1 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r7;

        $r8 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r9 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $z0 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        return r3;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return null;
    }

    public android.content.ComponentName getProfileOwnerAsUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUsersPermission(int)>(i0);

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        return $r1;
    }

    public java.lang.String getProfileOwnerName(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.ComponentName r1;
        boolean $z0;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if r1 != null goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getApplicationLabel(java.lang.String,int)>($r2, i0);

        return $r3;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerOfOrganizationOwnedDeviceLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$618RSoGYj0mcR9mfpEflcd0OItQ $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$618RSoGYj0mcR9mfpEflcd0OItQ;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$618RSoGYj0mcR9mfpEflcd0OItQ: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r3;

        return $r4;
    }

    public android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        android.content.ComponentName r2, r10, r11;
        boolean $z0, $z1, $z2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        com.android.server.devicepolicy.Owners $r5, $r6;
        int $i0;
        java.lang.Throwable $r7;
        android.os.UserHandle r8;
        java.lang.String r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.os.UserHandle;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        r9 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String getString(int)>(17039870);

     label03:
        if r9 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return null;

     label06:
        r2 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r9);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r10 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i0 = virtualinvoke r8.<android.os.UserHandle: int getIdentifier()>();

        r11 = virtualinvoke $r6.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>($i0);

        $z1 = virtualinvoke r2.<android.content.ComponentName: boolean equals(java.lang.Object)>(r10);

        if $z1 != 0 goto label10;

        $z2 = virtualinvoke r2.<android.content.ComponentName: boolean equals(java.lang.Object)>(r11);

        if $z2 == 0 goto label08;

     label07:
        goto label10;

     label08:
        exitmonitor r1;

     label09:
        return null;

     label10:
        exitmonitor r1;

     label11:
        return r2;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    protected int getProfileParentId(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hRvJuO1gf5MsRwxjvTdgEH89AJ4 $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hRvJuO1gf5MsRwxjvTdgEH89AJ4;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hRvJuO1gf5MsRwxjvTdgEH89AJ4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public int getProfileWithMinimumFailedPasswordsForWipe(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        com.android.internal.widget.LockPatternUtils $r2;
        java.lang.Throwable $r3;
        int i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z1 == 0 goto label10;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label10;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int,boolean)>(i1, z0);

     label03:
        i2 = -10000;

        if r4 == null goto label05;

     label04:
        i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserIdToWipeForFailedPasswords(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r4);

     label05:
        exitmonitor r1;

     label06:
        return i2;

     label07:
        $r3 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r3;

     label10:
        return -10000;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.RemoteCallback r1;
        int i0;
        java.lang.Object r2;
        android.content.Context r3, $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$8 r4;
        boolean $z0;
        android.app.admin.DeviceAdminInfo $r7;
        android.content.ComponentName $r8, r11;
        java.lang.Throwable $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r12;
        android.content.Intent r13;
        android.os.UserHandle r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.RemoteCallback;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        r12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r11, i0);

     label03:
        if r12 != null goto label06;

     label04:
        virtualinvoke r1.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(null);

        exitmonitor r2;

     label05:
        return;

     label06:
        r13 = new android.content.Intent;

        specialinvoke r13.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED");

        virtualinvoke r13.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r7 = r12.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r13.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r8);

        r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r14 = new android.os.UserHandle;

        specialinvoke r14.<android.os.UserHandle: void <init>(int)>(i0);

        r4 = new com.android.server.devicepolicy.DevicePolicyManagerService$8;

        specialinvoke r4.<com.android.server.devicepolicy.DevicePolicyManagerService$8: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.RemoteCallback)>(r0, r1);

        virtualinvoke r3.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r13, r14, null, r4, null, -1, null, null);

        exitmonitor r2;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public long getRequiredStrongAuthTimeout(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2;
        java.lang.Object r1, $r3;
        long l0, $l2, l5, l6, l8, l9;
        com.android.internal.widget.LockPatternUtils $r2;
        int $i1, i4, i7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4, r7;
        byte $b3;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        java.util.List r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        i4 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return 259200000L;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        z1 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        l5 = 0L;

        if z1 != 0 goto label02;

        return 0L;

     label02:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i4);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if r6 == null goto label08;

     label03:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r6, i4, z0);

     label04:
        if r7 == null goto label06;

     label05:
        l5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout>;

     label06:
        exitmonitor r1;

     label07:
        return l5;

     label08:
        r8 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i4, z0);

     label09:
        l6 = 259200000L;

        i7 = 0;

     label10:
        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        if i7 >= $i1 goto label14;

        $r3 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i7);

        $r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r3;

        l0 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout>;

     label11:
        l8 = l6;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label13;

     label12:
        l8 = staticinvoke <java.lang.Math: long min(long,long)>(l0, l6);

     label13:
        i7 = i7 + 1;

        l6 = l8;

        goto label10;

     label14:
        $l2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getMinimumStrongAuthTimeoutMs()>();

        l9 = staticinvoke <java.lang.Math: long max(long,long)>(l6, $l2);

        exitmonitor r1;

     label15:
        return l9;

     label16:
        $r5 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r5;

        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public android.content.ComponentName getRestrictionsProvider(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query the permission provider");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

     label02:
        if r3 == null goto label05;

     label03:
        r4 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider>;

     label04:
        goto label06;

     label05:
        r4 = null;

     label06:
        exitmonitor r1;

     label07:
        return r4;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z2, $z3, z4, z5, $z6;
        java.lang.Object r1, $r3;
        java.util.List $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4, $r5, r9;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        int i0;
        java.util.Iterator r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z4 := @parameter2: boolean;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z0 != 0 goto label01;

        return 0;

     label01:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if z4 == 0 goto label05;

     label02:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r7, -3, z4);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>($r5);

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

        goto label21;

     label05:
        if r7 == null goto label12;

     label06:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r7, i0, z4);

     label07:
        z5 = 0;

        if r9 == null goto label10;

        z5 = 0;

     label08:
        $z3 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        if $z3 == 0 goto label10;

     label09:
        z5 = 1;

     label10:
        exitmonitor r1;

     label11:
        return z5;

     label12:
        if z4 == 0 goto label15;

     label13:
        i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

     label14:
        goto label15;

     label15:
        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForAffectedUserLocked(int)>(i0);

        r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label19;

        $r3 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r3;

        $z2 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        if $z2 == 0 goto label18;

        exitmonitor r1;

     label17:
        return 1;

     label18:
        goto label16;

     label19:
        exitmonitor r1;

     label20:
        return 0;

     label21:
        exitmonitor r1;

     label22:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label13 to label14 with label04;
        catch java.lang.Throwable from label15 to label16 with label04;
        catch java.lang.Throwable from label16 to label17 with label04;
        catch java.lang.Throwable from label19 to label20 with label04;
        catch java.lang.Throwable from label21 to label22 with label04;
    }

    public java.util.List getSecondaryUsers(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$v6ysSfg9A_OdF3DKN_5_eHYZcfg $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        java.lang.Object $r5;
        java.util.List $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$v6ysSfg9A_OdF3DKN_5_eHYZcfg;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$v6ysSfg9A_OdF3DKN_5_eHYZcfg: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        java.lang.CharSequence r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForUidLocked(android.content.ComponentName,int)>(r6, $i0);

        r7 = $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage>;

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.lang.CharSequence r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query support message for user");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r4, i0);

     label03:
        if r5 == null goto label06;

     label04:
        r6 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage>;

        exitmonitor r1;

     label05:
        return r6;

     label06:
        exitmonitor r1;

     label07:
        return null;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public volatile java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getStartUserSessionMessage(android.content.ComponentName)>(r1);

        return $r2;
    }

    public java.lang.String getStartUserSessionMessage(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        java.lang.String r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -2);

        r6 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String startUserSessionMessage>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean getStorageEncryption(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, z2;
        java.lang.Object r1, $r4;
        int i0, i1, i2;
        java.util.ArrayList $r2, $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r5, r8;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        i1 := @parameter1: int;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        z2 = 0;

        if z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if r7 == null goto label07;

     label02:
        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r7, i1);

     label03:
        if r8 == null goto label05;

     label04:
        z2 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

     label05:
        exitmonitor r1;

     label06:
        return z2;

     label07:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r2 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label08:
        i2 = 0;

     label09:
        if i2 >= i0 goto label13;

     label10:
        $r3 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r4;

        $z1 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        if $z1 == 0 goto label12;

        exitmonitor r1;

     label11:
        return 1;

     label12:
        i2 = i2 + 1;

        goto label09;

     label13:
        exitmonitor r1;

     label14:
        return 0;

     label15:
        $r6 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public int getStorageEncryptionStatus(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, i2;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.SecurityException $r3;
        java.lang.String r4;
        android.content.pm.ApplicationInfo r5;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i2);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureCallerPackage(java.lang.String)>(r4);

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r4, 0, i2);

     label2:
        z0 = 0;

        $i1 = r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 > 23 goto label3;

        z0 = 1;

     label3:
        i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getEncryptionStatus()>();

        if i0 != 5 goto label4;

        if z0 == 0 goto label4;

        return 3;

     label4:
        return i0;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        android.app.admin.SystemUpdatePolicy r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r4 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>();

     label2:
        if r4 == null goto label5;

     label3:
        $z0 = virtualinvoke r4.<android.app.admin.SystemUpdatePolicy: boolean isValid()>();

        if $z0 != 0 goto label5;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Stored system update policy is invalid, return null instead.");

        exitmonitor r1;

     label4:
        return null;

     label5:
        exitmonitor r1;

     label6:
        return r4;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.os.PersistableBundle getTransferOwnershipBundle()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        java.io.File $r5, r13;
        boolean $z0;
        java.lang.Throwable $r6, $r7, $r8, $r9;
        java.lang.String $r12;
        java.io.FileInputStream r14;
        org.xmlpull.v1.XmlPullParser r15;
        android.os.PersistableBundle r16;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, -1);

        r13 = new java.io.File;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.io.File environmentGetUserSystemDirectory(int)>(i0);

        specialinvoke r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "transfer-ownership-parameters.xml");

        $z0 = virtualinvoke r13.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        r14 = new java.io.FileInputStream;

        specialinvoke r14.<java.io.FileInputStream: void <init>(java.io.File)>(r13);

     label04:
        r15 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r15.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r14, null);

        interfaceinvoke r15.<org.xmlpull.v1.XmlPullParser: int next()>();

        r16 = staticinvoke <android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r15);

     label05:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label06:
        exitmonitor r1;

     label07:
        return r16;

     label08:
        $r6 := @caughtexception;

     label09:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label10:
        goto label13;

     label11:
        $r7 := @caughtexception;

     label12:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

     label13:
        throw $r6;

     label14:
        $r9 := @caughtexception;

     label15:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught exception while trying to load the owner transfer parameters from file ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r12 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r12, $r9);

        exitmonitor r1;

     label16:
        return null;

     label17:
        $r8 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.io.IOException from label03 to label04 with label14;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label14;
        catch java.lang.IllegalArgumentException from label03 to label04 with label14;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.io.IOException from label05 to label06 with label14;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label14;
        catch java.lang.IllegalArgumentException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label14;
        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.io.IOException from label13 to label14 with label14;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label14;
        catch java.lang.IllegalArgumentException from label13 to label14 with label14;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public java.util.List getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z2, $z3, $z4, z7, z8;
        java.lang.Object r1, $r6, $r8, $r18;
        java.lang.String r2, $r15;
        java.util.List r3;
        int i0, $i1, $i2, i4, i5;
        com.android.internal.widget.LockPatternUtils $r4;
        android.util.ArrayMap $r7, $r17;
        android.os.PersistableBundle $r9, $r10, $r16, $r19, $r20;
        android.app.admin.DeviceAdminInfo $r12;
        java.lang.Throwable $r21;
        android.content.ComponentName r22, r23;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r24, r28;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo r25, r29;
        java.util.ArrayList r26, r27, r30;
        java.lang.StringBuilder r31;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r22 := @parameter0: android.content.ComponentName;

        r23 := @parameter1: android.content.ComponentName;

        i4 := @parameter2: int;

        z0 := @parameter3: boolean;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 == 0 goto label43;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z3 = virtualinvoke $r4.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z3 != 0 goto label01;

        goto label43;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r23, "agent null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i4);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r23.<android.content.ComponentName: java.lang.String flattenToString()>();

     label03:
        if r22 == null goto label16;

     label04:
        r24 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r22, i4, z0);

     label05:
        if r24 != null goto label08;

     label06:
        exitmonitor r1;

     label07:
        return null;

     label08:
        $r17 = r24.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos>;

        $r18 = virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r25 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo) $r18;

     label09:
        if r25 == null goto label14;

     label10:
        $r19 = r25.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options>;

        if $r19 != null goto label12;

     label11:
        goto label14;

     label12:
        r26 = new java.util.ArrayList;

        specialinvoke r26.<java.util.ArrayList: void <init>()>();

        $r20 = r25.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options>;

        interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>($r20);

        exitmonitor r1;

     label13:
        return r26;

     label14:
        exitmonitor r1;

     label15:
        return null;

     label16:
        r27 = null;

     label17:
        r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i4, z0);

     label18:
        i0 = interfaceinvoke r3.<java.util.List: int size()>();

     label19:
        i5 = 0;

     label20:
        if i5 >= i0 goto label35;

     label21:
        $r6 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i5);

        r28 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r6;

        $i1 = r28.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label23;

     label22:
        z7 = 1;

        goto label24;

     label23:
        z7 = 0;

     label24:
        $r7 = r28.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r29 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo) $r8;

     label25:
        if r29 == null goto label33;

     label26:
        $r9 = r29.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options>;

        if $r9 == null goto label33;

        $r10 = r29.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options>;

        $z4 = virtualinvoke $r10.<android.os.PersistableBundle: boolean isEmpty()>();

        if $z4 != 0 goto label33;

     label27:
        if z7 == 0 goto label31;

        r30 = r27;

        if r27 != null goto label29;

     label28:
        r30 = new java.util.ArrayList;

        specialinvoke r30.<java.util.ArrayList: void <init>()>();

     label29:
        $r16 = r29.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: android.os.PersistableBundle options>;

        interfaceinvoke r30.<java.util.List: boolean add(java.lang.Object)>($r16);

     label30:
        goto label34;

     label31:
        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring admin ");

        $r12 = r28.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it has trust options but doesn\'t declare KEYGUARD_DISABLE_TRUST_AGENTS");

        $r15 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r15);

     label32:
        r30 = r27;

        goto label34;

     label33:
        r30 = r27;

        if z7 == 0 goto label34;

        z8 = 0;

        goto label36;

     label34:
        i5 = i5 + 1;

        r27 = r30;

        goto label20;

     label35:
        z8 = 1;

     label36:
        if z8 == 0 goto label37;

        goto label38;

     label37:
        r27 = null;

     label38:
        exitmonitor r1;

     label39:
        return r27;

     label40:
        $r21 := @caughtexception;

     label41:
        exitmonitor r1;

     label42:
        throw $r21;

     label43:
        return null;

        catch java.lang.Throwable from label02 to label03 with label40;
        catch java.lang.Throwable from label04 to label05 with label40;
        catch java.lang.Throwable from label06 to label07 with label40;
        catch java.lang.Throwable from label08 to label09 with label40;
        catch java.lang.Throwable from label10 to label11 with label40;
        catch java.lang.Throwable from label12 to label13 with label40;
        catch java.lang.Throwable from label14 to label15 with label40;
        catch java.lang.Throwable from label17 to label18 with label40;
        catch java.lang.Throwable from label18 to label19 with label40;
        catch java.lang.Throwable from label21 to label22 with label40;
        catch java.lang.Throwable from label24 to label25 with label40;
        catch java.lang.Throwable from label26 to label27 with label40;
        catch java.lang.Throwable from label28 to label29 with label40;
        catch java.lang.Throwable from label29 to label30 with label40;
        catch java.lang.Throwable from label31 to label32 with label40;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label41 to label42 with label40;
    }

    public java.util.List getUserControlDisabledPackages(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.os.UserHandle $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        java.util.List r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r7, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r7);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r8 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mUserControlDisabledPackages>;

     label2:
        if r8 != null goto label5;

     label3:
        r8 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label4:
        goto label5;

     label5:
        exitmonitor r1;

     label6:
        return r8;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1, $r3;
        android.util.SparseArray $r2, $r4;
        boolean $z0;
        com.android.server.devicepolicy.DeviceStateCacheImpl $r5;
        java.lang.Throwable $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r7, r8, r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData) $r3;

     label02:
        r8 = r7;

        if r7 != null goto label08;

     label03:
        r9 = new com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        specialinvoke r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: void <init>(int)>(i0);

     label04:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        virtualinvoke $r4.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void loadSettingsLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData,int)>(r9, i0);

     label05:
        r8 = r9;

        if i0 != 0 goto label08;

     label06:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache>;

        $z0 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DeviceStateCacheImpl: void setDeviceProvisioned(boolean)>($z0);

     label07:
        r8 = r9;

     label08:
        exitmonitor r1;

     label09:
        return r8;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$E3l49EGA6UCGqdaOZqz6OFNlTrc $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$E3l49EGA6UCGqdaOZqz6OFNlTrc;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$E3l49EGA6UCGqdaOZqz6OFNlTrc: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData) $r3;

        return $r4;
    }

    public int getUserProvisioningState()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        int $i0, $i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserProvisioningState(int)>($i0);

        return $i1;
    }

    public android.os.Bundle getUserRestrictions(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        android.os.Bundle r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r4, -1, z0);

     label3:
        if z0 == 0 goto label5;

     label4:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r5);

     label5:
        r6 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle userRestrictions>;

        exitmonitor r1;

     label6:
        return r6;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String getWifiMacAddress(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$uy1p_xwvq26PU9sdLctDkYIEUWg $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$uy1p_xwvq26PU9sdLctDkYIEUWg;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$uy1p_xwvq26PU9sdLctDkYIEUWg: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName)>(r0, r1);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    void handleStartUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>(null, i0, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateScreenCaptureDisabled(int,boolean)>(i0, $z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

        if i0 != 0 goto label1;

        i1 = -1;

        goto label2;

     label1:
        i1 = i0;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordQualityCacheForUserGroup(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void startOwnerService(int,java.lang.String)>(i0, "start-user");

        return;
    }

    void handleStopUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void stopOwnerService(int,java.lang.String)>(i0, "stop-user");

        return;
    }

    void handleUnlockUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void startOwnerService(int,java.lang.String)>(i0, "unlock-user");

        return;
    }

    public boolean hasDeviceOwner()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.Owners $r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrManageUsers()>();

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r1.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        return $z0;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.SecurityException r2;
        java.lang.String $r5;
        android.app.admin.DeviceAdminInfo $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r8, i1);

     label3:
        if r9 == null goto label6;

     label4:
        $r6 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        z0 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        exitmonitor r1;

     label5:
        return z0;

     label6:
        r2 = new java.lang.SecurityException;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin ");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw r2;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean $z0, $z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MIqKv_Yr1Kj270ONV0ilPWZmzHg $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MIqKv_Yr1Kj270ONV0ilPWZmzHg;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MIqKv_Yr1Kj270ONV0ilPWZmzHg: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public boolean hasUserSetupCompleted()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>($i0);

        return $z0;
    }

    public boolean installCaCert(android.content.ComponentName, java.lang.String, byte[]) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        byte[] r1;
        android.os.UserHandle r2;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vR7SP_H_46D2EH5k6b409TXJQKY $r4;
        java.lang.Object $r6, r13;
        int $i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r7;
        java.util.Set $r8;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;
        java.lang.String r11, r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r11 := @parameter1: java.lang.String;

        r1 := @parameter2: byte[];

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>(r10, r11);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r2 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vR7SP_H_46D2EH5k6b409TXJQKY;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$vR7SP_H_46D2EH5k6b409TXJQKY: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.UserHandle,byte[],android.content.ComponentName,java.lang.String)>(r0, r2, r1, r10, r11);

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r4);

        r12 = (java.lang.String) $r6;

        if r12 != null goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Problem installing cert");

        return 0;

     label2:
        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r13;

     label3:
        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i0);

        $r8 = $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r12);

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i1);

        exitmonitor r13;

     label4:
        return 1;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r13;

     label7:
        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean installExistingPackage(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        long l0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r7, $r9, $r16, $r19;
        boolean $z0, z1, z2;
        java.lang.String $r6, r21, r22;
        android.content.pm.IPackageManager $r8;
        android.app.admin.DevicePolicyEventLogger $r10, $r11, $r12, $r14;
        java.lang.String[] $r13;
        java.lang.Throwable $r15, $r17;
        android.os.RemoteException $r18;
        android.content.ComponentName r20;
        int i1, i2;
        java.lang.SecurityException r25;
        java.lang.StringBuilder r26;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r20 := @parameter0: android.content.ComponentName;

        r21 := @parameter1: java.lang.String;

        r22 := @parameter2: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r20, r21, -1, "delegation-install-existing-package");

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i1);

        if $z0 == 0 goto label17;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        i2 = interfaceinvoke $r8.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>(r22, i1, 4194304, 1, null);

     label03:
        if i2 != 1 goto label04;

        z1 = 1;

        goto label05;

     label04:
        z1 = 0;

     label05:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

     label06:
        exitmonitor r1;

     label07:
        if z1 == 0 goto label10;

        if r20 != null goto label08;

        z2 = 1;

        goto label09;

     label08:
        z2 = 0;

     label09:
        $r10 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(66);

        $r11 = virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r21);

        $r12 = virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z2);

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = r22;

        $r14 = virtualinvoke $r12.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r13);

        virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label10:
        return z1;

     label11:
        $r15 := @caughtexception;

     label12:
        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r16.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

     label13:
        throw $r15;

     label14:
        $r18 := @caughtexception;

     label15:
        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r19.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label16:
        return 0;

     label17:
        r25 = new java.lang.SecurityException;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is neither the device owner or affiliated user\'s profile owner.");

        $r6 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw r25;

     label18:
        $r17 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch android.os.RemoteException from label02 to label03 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public boolean installKeyPair(android.content.ComponentName, java.lang.String, byte[], byte[], byte[], java.lang.String, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r5;
        byte[] r2, r3, r4;
        boolean z0, z1, z2, z3;
        int i0;
        long l1;
        android.security.KeyChain$KeyChainConnection r6;
        android.security.IKeyChainService r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r8, $r9, $r15, $r16, $r21, $r32;
        android.content.Context $r10;
        android.os.UserHandle $r11;
        android.app.admin.DevicePolicyEventLogger $r12, $r13, $r14;
        java.lang.Throwable $r17, $r19, $r20, $r22, $r23, $r25, r29, r30, r31;
        java.lang.Thread $r18;
        android.os.RemoteException $r24, $r26, r28;
        android.content.ComponentName r27;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r27 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        r5 := @parameter5: java.lang.String;

        z2 := @parameter6: boolean;

        z0 := @parameter7: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r27, r1, -1, "delegation-cert-install");

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label01:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i0);

        r6 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r10, $r11);

     label02:
        r7 = virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        z1 = interfaceinvoke r7.<android.security.IKeyChainService: boolean installKeyPair(byte[],byte[],byte[],java.lang.String,int)>(r2, r3, r4, r5, -1);

     label03:
        if z1 != 0 goto label06;

     label04:
        virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: void close()>();

     label05:
        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r16.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label06:
        if z2 == 0 goto label08;

     label07:
        interfaceinvoke r7.<android.security.IKeyChainService: void setGrant(int,java.lang.String,boolean)>(i0, r5, 1);

     label08:
        interfaceinvoke r7.<android.security.IKeyChainService: void setUserSelectable(java.lang.String,boolean)>(r5, z0);

     label09:
        if r27 != null goto label10;

        z3 = 1;

        goto label11;

     label10:
        z3 = 0;

     label11:
        $r12 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(20);

        $r13 = virtualinvoke $r12.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z3);

        virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label12:
        virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: void close()>();

     label13:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label14:
        $r26 := @caughtexception;

        r28 = $r26;

        goto label17;

     label15:
        $r22 := @caughtexception;

        r29 = $r22;

        goto label21;

     label16:
        $r24 := @caughtexception;

        r28 = $r24;

     label17:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Installing certificate", r28);

     label18:
        virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: void close()>();

     label19:
        goto label27;

     label20:
        $r23 := @caughtexception;

        r29 = $r23;

     label21:
        virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: void close()>();

     label22:
        throw r29;

     label23:
        $r17 := @caughtexception;

        r30 = $r17;

        goto label26;

     label24:
        $r25 := @caughtexception;

        r31 = $r25;

        goto label29;

     label25:
        $r19 := @caughtexception;

        r30 = $r19;

     label26:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Interrupted while installing certificate", r30);

        $r18 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r18.<java.lang.Thread: void interrupt()>();

     label27:
        $r32 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r32.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label28:
        $r20 := @caughtexception;

        r31 = $r20;

     label29:
        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r21.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw r31;

        catch java.lang.InterruptedException from label01 to label02 with label25;
        catch java.lang.Throwable from label01 to label02 with label24;
        catch android.os.RemoteException from label02 to label03 with label16;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.InterruptedException from label04 to label05 with label25;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch android.os.RemoteException from label07 to label08 with label16;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch android.os.RemoteException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch android.os.RemoteException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.InterruptedException from label12 to label13 with label23;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.InterruptedException from label18 to label19 with label23;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.InterruptedException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.InterruptedException from label22 to label23 with label23;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    public void installUpdateFromFile(android.content.ComponentName, android.os.ParcelFileDescriptor, android.app.admin.StartInstallingUpdateCallback)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        android.os.ParcelFileDescriptor r2;
        android.app.admin.StartInstallingUpdateCallback r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        boolean $z0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$mKZVydU_p90i1MHdcWnX9nTODpU $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.app.admin.StartInstallingUpdateCallback;

        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(73);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceAB()>();

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>($z0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r1);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$mKZVydU_p90i1MHdcWnX9nTODpU;

        specialinvoke $r7.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$mKZVydU_p90i1MHdcWnX9nTODpU: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>(r0, r2, r3);

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r7);

        return;
    }

    public boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        boolean z0, $z1;
        java.util.List $r5, $r6, $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 1;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "ComponentName is null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query if an accessibility service is disabled by admin");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r9, i0);

     label03:
        if r10 != null goto label06;

     label04:
        exitmonitor r2;

     label05:
        return 0;

     label06:
        $r5 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        if $r5 != null goto label08;

        exitmonitor r2;

     label07:
        return 1;

     label08:
        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        $r7 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkPackagesInPermittedListOrSystem(java.util.List,java.util.List,int)>($r6, $r7, i0);

        exitmonitor r2;

     label09:
        return z0;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    boolean isActiveAdminWithPolicyForUserLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        int i0, $i1, i2;
        boolean z0, z1, z2, $z5, $z6, z7, z8, z9, z10;
        android.app.admin.DeviceAdminInfo $r2, $r4, $r6, $r8, $r11;
        android.content.ComponentName $r3, $r5, $r7;
        java.util.Set $r9;
        java.lang.Integer $r10;
        java.lang.String $r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureLocked()>();

        $r2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r3 = virtualinvoke $r2.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>($r3, i2);

        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r5 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>($r5, i2);

        $r6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r7 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(android.content.ComponentName,int)>($r7, i2);

        if i0 != -2 goto label01;

        return z0;

     label01:
        z7 = 0;

        if i0 != -3 goto label04;

        if z0 != 0 goto label02;

        if z2 == 0 goto label03;

     label02:
        z7 = 1;

     label03:
        return z7;

     label04:
        if i0 != -1 goto label07;

        if z0 != 0 goto label05;

        if z2 != 0 goto label05;

        z8 = 0;

        if z1 == 0 goto label06;

     label05:
        z8 = 1;

     label06:
        return z8;

     label07:
        if z0 != 0 goto label09;

        if z1 != 0 goto label09;

        $r9 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DA_DISALLOWED_POLICIES>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z6 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z6 == 0 goto label09;

        $r11 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r12 = virtualinvoke $r11.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>($r12, i2);

        if $i1 >= 29 goto label08;

        goto label09;

     label08:
        z9 = 0;

        goto label10;

     label09:
        z9 = 1;

     label10:
        z10 = 0;

        if z9 == 0 goto label11;

        z10 = 0;

        $r8 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z5 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        if $z5 == 0 goto label11;

        z10 = 1;

     label11:
        return z10;
    }

    public boolean isActivePasswordSufficient(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        boolean $z0, $z1, z2, z3;
        com.android.internal.widget.LockSettingsInternal $r4;
        java.lang.Throwable $r5;
        android.app.admin.PasswordMetrics r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int,boolean)>(i0, z2);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(null, 0, z2);

        i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getCredentialOwner(int,boolean)>(i0, z2);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal>;

        r6 = virtualinvoke $r4.<com.android.internal.widget.LockSettingsInternal: android.app.admin.PasswordMetrics getUserPasswordMetrics(int)>(i1);

        $z1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPasswordValidAtLastCheckpoint>;

        z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficientForUserLocked(boolean,android.app.admin.PasswordMetrics,int,boolean)>($z1, r6, i0, z2);

        exitmonitor r1;

     label3:
        return z3;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isAdminActive(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0, z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r2;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r4, i0);

        if $r2 == null goto label4;

     label3:
        z1 = 1;

     label4:
        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isAffiliatedUser()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>($i0);

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W_EOiMR88VHfIKObgtqzPusoGq4 $r3;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNetworkStackOrProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W_EOiMR88VHfIKObgtqzPusoGq4;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W_EOiMR88VHfIKObgtqzPusoGq4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isAlwaysOnVpnLockdownEnabledForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Boolean r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("isAlwaysOnVpnLockdownEnabledForUser");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOrProfileOwnerAdminLocked(int)>(i0);

     label02:
        if r3 == null goto label05;

     label03:
        $z1 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mAlwaysOnVpnLockdown>;

        r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

     label04:
        goto label06;

     label05:
        r4 = null;

     label06:
        z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isApplicationHidden(android.content.ComponentName, java.lang.String, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r8;
        java.lang.Object r2, $r3;
        java.lang.Boolean $r4;
        int $i0, i1;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        boolean z0, z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r9, r11;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8c01T1VfrA2f17KUyVPH5I2iY84 r10;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$83mxXqMA5j_vl407oK1_5dzIjT8 r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        r8 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label01;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>($i0);

        goto label02;

     label01:
        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r7, r8, -1, "delegation-package-access");

     label04:
        if z0 == 0 goto label06;

     label05:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r7, -3, z0);

        r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r10 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8c01T1VfrA2f17KUyVPH5I2iY84;

        specialinvoke r10.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$8c01T1VfrA2f17KUyVPH5I2iY84: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int)>(r0, r1, i1);

        virtualinvoke r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r10);

     label06:
        r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r12 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$83mxXqMA5j_vl407oK1_5dzIjT8;

        specialinvoke r12.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$83mxXqMA5j_vl407oK1_5dzIjT8: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int)>(r0, r1, i1);

        $r3 = virtualinvoke r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r12);

        $r4 = (java.lang.Boolean) $r3;

        z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r2;

     label07:
        return z1;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isBackupServiceEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        boolean z0, z1, z2;
        java.lang.Object r8;
        android.app.backup.IBackupManager r9;
        java.lang.IllegalStateException r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        z1 = 1;

        if z0 != 0 goto label01;

        return 1;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r7);

        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r8;

     label02:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r9 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.backup.IBackupManager getIBackupManager()>();

     label03:
        if r9 == null goto label06;

     label04:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        z2 = interfaceinvoke r9.<android.app.backup.IBackupManager: boolean isBackupServiceActive(int)>($i0);

     label05:
        if z2 == 0 goto label06;

        goto label07;

     label06:
        z1 = 0;

     label07:
        exitmonitor r8;

     label08:
        return z1;

     label09:
        $r6 := @caughtexception;

        goto label12;

     label10:
        $r5 := @caughtexception;

     label11:
        r11 = new java.lang.IllegalStateException;

        specialinvoke r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed requesting backup service state.", $r5);

        throw r11;

     label12:
        exitmonitor r8;

     label13:
        throw $r6;

        catch android.os.RemoteException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch android.os.RemoteException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public boolean isCaCertApproved(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        android.util.ArraySet $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r3 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

        z0 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerDelegate(java.lang.String,int,java.lang.String)>(r1, $i0, "delegation-app-restrictions");

        return $z0;
    }

    boolean isCallerDeviceOwner(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        java.lang.String[] r2;
        int i0, $i1, $i2, i3, i4;
        boolean z0, $z1;
        com.android.server.devicepolicy.Owners $r3, $r4, $r5;
        android.content.ComponentName $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7;
        android.content.pm.IPackageManager $r8;
        java.lang.String $r9, r12;
        java.lang.Throwable $r10;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i3 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i3);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i2 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if $i1 == $i2 goto label05;

        exitmonitor r1;

     label04:
        return 0;

     label05:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        r12 = virtualinvoke $r6.<android.content.ComponentName: java.lang.String getPackageName()>();

     label06:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.IPackageManager getIPackageManager()>();

        r2 = interfaceinvoke $r8.<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>(i3);

        i0 = lengthof r2;

     label07:
        i4 = 0;

     label08:
        if i4 >= i0 goto label14;

     label09:
        $r9 = r2[i4];

        z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r9);

     label10:
        if z0 == 0 goto label13;

     label11:
        exitmonitor r1;

     label12:
        return 1;

     label13:
        i4 = i4 + 1;

        goto label08;

     label14:
        exitmonitor r1;

     label15:
        return 0;

     label16:
        $r11 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        return 0;

     label19:
        $r10 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch android.os.RemoteException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch android.os.RemoteException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public boolean isCommonCriteriaModeEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r1, r8;
        java.lang.Throwable $r2, $r3;
        android.content.ComponentName r4;
        java.lang.Object r5, r7;
        boolean z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        if r4 == null goto label06;

        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r5;

     label01:
        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r4, -3);

        z0 = $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mCommonCriteriaMode>;

        exitmonitor r5;

     label02:
        return z0;

     label03:
        $r3 := @caughtexception;

     label04:
        exitmonitor r5;

     label05:
        throw $r3;

     label06:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r7;

        z1 = 0;

     label07:
        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked(int)>(0);

     label08:
        if r8 == null goto label10;

     label09:
        z1 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mCommonCriteriaMode>;

     label10:
        exitmonitor r7;

     label11:
        return z1;

     label12:
        $r2 := @caughtexception;

     label13:
        exitmonitor r7;

     label14:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean isCurrentInputMethodSetByOwner()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOrSystemUser()>();

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i0);

        $z0 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mCurrentInputMethodSet>;

        return $z0;
    }

    public boolean isDeviceOwner(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r2, $r3, $r4;
        boolean $z0, $z1, z2;
        android.content.ComponentName $r5, r7;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if $i1 != i0 goto label3;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        $z1 = virtualinvoke $r5.<android.content.ComponentName: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z2;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean isDeviceOwner(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        android.app.admin.DeviceAdminInfo $r2;
        android.content.ComponentName $r3;
        android.os.UserHandle $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r3 = virtualinvoke $r2.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r4 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>($r3, $i0);

        return $z0;
    }

    public boolean isDeviceProvisioned()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(0);

        z0 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isDeviceProvisioningConfigApplied()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        z0 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mDeviceProvisioningConfigApplied>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isEphemeralUser(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$NM277PNv78w1mkpB_avt411PSag $r4;
        java.lang.Object $r6;
        java.lang.Boolean $r7;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$NM277PNv78w1mkpB_avt411PSag;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$NM277PNv78w1mkpB_avt411PSag: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r4);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isFactoryResetProtectionPolicySupported()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getFrpManagementAgentUid()>();

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isInputMethodPermittedByAdmin(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        boolean z0, $z1;
        java.util.List $r5, $r6, $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 1;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "ComponentName is null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query if an input method is disabled by admin");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r9, i0);

     label03:
        if r10 != null goto label06;

     label04:
        exitmonitor r2;

     label05:
        return 0;

     label06:
        $r5 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        if $r5 != null goto label08;

        exitmonitor r2;

     label07:
        return 1;

     label08:
        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        $r7 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkPackagesInPermittedListOrSystem(java.util.List,java.util.List,int)>($r6, $r7, i0);

        exitmonitor r2;

     label09:
        return z0;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean isLockTaskPermitted(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.util.List $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r4 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r6);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isLogoutEnabled()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean $z1, z2, z3;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z2 != 0 goto label01;

        return 0;

     label01:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

     label03:
        z3 = 0;

        if r3 == null goto label06;

        z3 = 0;

     label04:
        $z1 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isLogoutEnabled>;

        if $z1 == 0 goto label06;

     label05:
        z3 = 1;

     label06:
        exitmonitor r1;

     label07:
        return z3;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isManagedKiosk()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        boolean z0, $z1;
        java.lang.IllegalStateException r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r3, $r6;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label2:
        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedKioskInternal()>();

     label3:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        return z0;

     label4:
        $r5 := @caughtexception;

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        r1 = new java.lang.IllegalStateException;

        specialinvoke r1.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw r1;

     label7:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public boolean isManagedProfile(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>($i0);

        return $z0;
    }

    public boolean isMasterVolumeMuted(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r5;
        boolean z0;
        android.content.Context $r4;
        android.media.AudioManager $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r8, -1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r6 = (android.media.AudioManager) $r5;

        z0 = virtualinvoke $r6.<android.media.AudioManager: boolean isMasterMute()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        boolean z0, $z1;
        java.util.List $r4, $r5;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query restricted pkgs for a specific user");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r7, i0);

     label03:
        if r8 == null goto label06;

     label04:
        $r4 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages>;

        if $r4 == null goto label06;

        $r5 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages>;

        z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r1);

        exitmonitor r2;

     label05:
        return z0;

     label06:
        exitmonitor r2;

     label07:
        return 0;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isNetworkLoggingEnabled(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean z0, $z1;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScopeOrCheckPermission(android.content.ComponentName,java.lang.String,int,java.lang.String,java.lang.String)>(r4, r1, -2, "delegation-network-logging", "android.permission.MANAGE_USERS");

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabledInternalLocked()>();

        exitmonitor r2;

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isNotificationListenerServicePermitted(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        boolean z0, $z1;
        java.util.List $r4, $r5, $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 1;

     label01:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r8, "packageName is null or empty");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query if a notification listener service is permitted");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label03:
        if r2 == null goto label08;

     label04:
        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners>;

        if $r4 != null goto label06;

     label05:
        goto label08;

     label06:
        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r8);

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners>;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkPackagesInPermittedListOrSystem(java.util.List,java.util.List,int)>($r5, $r6, i0);

        exitmonitor r1;

     label07:
        return z0;

     label08:
        exitmonitor r1;

     label09:
        return 1;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean isOrganizationOwnedDeviceWithManagedProfile()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationOwnedProfileUserId()>();

        if $i0 == -10000 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    public boolean isOverrideApnEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, z3;
        int i0, $i1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Sz8rlxkKvTkB7XBKJnVEkHyisIw $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6;
        android.content.ComponentName r7;
        android.database.Cursor r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        z3 = 0;

        if z0 == 0 goto label12;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature>;

        if $z1 != 0 goto label01;

        goto label12;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "ComponentName is null in isOverrideApnEnabled");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r7);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Sz8rlxkKvTkB7XBKJnVEkHyisIw;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Sz8rlxkKvTkB7XBKJnVEkHyisIw: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        r8 = (android.database.Cursor) $r4;

        if r8 != null goto label02;

        return 0;

     label02:
        $z2 = interfaceinvoke r8.<android.database.Cursor: boolean moveToFirst()>();

        if $z2 == 0 goto label05;

        $i1 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("enforced");

        i0 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>($i1);

     label03:
        if i0 != 1 goto label04;

        z3 = 1;

     label04:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

        return z3;

     label05:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

        goto label10;

     label06:
        $r5 := @caughtexception;

        goto label11;

     label07:
        $r6 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Cursor returned from ENFORCE_MANAGED_URI doesn\'t contain correct info.", $r6);

     label09:
        goto label05;

     label10:
        return 0;

     label11:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

        throw $r5;

     label12:
        return 0;

        catch java.lang.IllegalArgumentException from label02 to label03 with label07;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
    }

    public boolean isPackageAllowedToAccessCalendarForUser(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        java.util.List $r5, $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r8, "Package name is null or empty");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsSecureGetIntForUser(java.lang.String,int,int)>("cross_profile_calendar_enabled", 0, i0);

        if $i1 != 0 goto label04;

        exitmonitor r1;

     label03:
        return 0;

     label04:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i0);

     label05:
        if r2 == null goto label10;

     label06:
        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages>;

        if $r5 != null goto label08;

        exitmonitor r1;

     label07:
        return 1;

     label08:
        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages>;

        z0 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r8);

        exitmonitor r1;

     label09:
        return z0;

     label10:
        exitmonitor r1;

     label11:
        return 0;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    boolean isPackageInstalledForUser(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$XZQm7n2szdd5c9UgCUEe2WHB0qA $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$XZQm7n2szdd5c9UgCUEe2WHB0qA;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$XZQm7n2szdd5c9UgCUEe2WHB0qA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int)>(r0, r1, i0);

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isPackageSuspended(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        int i0;
        java.lang.Object r3;
        long l1;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r6, $r8, $r11;
        android.content.pm.IPackageManager $r5;
        java.lang.Throwable $r7, $r9;
        android.os.RemoteException $r10;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r12, r1, -1, "delegation-package-access");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        z0 = interfaceinvoke $r5.<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>(r2, i0);

     label03:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        exitmonitor r3;

     label04:
        return z0;

     label05:
        $r7 := @caughtexception;

        goto label11;

     label06:
        $r10 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed talking to the package manager", $r10);

     label08:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label09:
        exitmonitor r3;

     label10:
        return 0;

     label11:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label12:
        throw $r7;

     label13:
        $r9 := @caughtexception;

     label14:
        exitmonitor r3;

     label15:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch android.os.RemoteException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public boolean isPasswordSufficientAfterProfileUnification(int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        java.lang.Object r1, $r5;
        boolean z0, $z1, $z2;
        com.android.internal.widget.LockSettingsInternal $r2;
        android.app.admin.PasswordMetrics $r3, $r8, r10;
        java.util.List $r4, r12;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r6;
        android.app.admin.PasswordPolicy $r7;
        java.lang.Throwable $r9;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$WWE2z5Q71LPUB2n6sdrruHEUx2s r11;
        java.util.ArrayList r13;
        java.util.Iterator r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 1;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i0, "check password sufficiency");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal>;

        r10 = virtualinvoke $r2.<com.android.internal.widget.LockSettingsInternal: android.app.admin.PasswordMetrics getUserPasswordMetrics(int)>(i0);

        r11 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$WWE2z5Q71LPUB2n6sdrruHEUx2s;

        specialinvoke r11.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$WWE2z5Q71LPUB2n6sdrruHEUx2s: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i1);

        r12 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForUserAndItsManagedProfilesLocked(int,java.util.function.Predicate)>(i0, r11);

        r13 = new java.util.ArrayList;

        $i2 = interfaceinvoke r12.<java.util.List: int size()>();

        specialinvoke r13.<java.util.ArrayList: void <init>(int)>($i2);

        r14 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r5 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $r7 = $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r8 = virtualinvoke $r7.<android.app.admin.PasswordPolicy: android.app.admin.PasswordMetrics getMinMetrics()>();

        virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label4:
        goto label3;

     label5:
        $r3 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics merge(java.util.List)>(r13);

        $r4 = staticinvoke <android.app.admin.PasswordMetrics: java.util.List validatePasswordMetrics(android.app.admin.PasswordMetrics,int,boolean,android.app.admin.PasswordMetrics)>($r3, 0, 0, r10);

        z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        exitmonitor r1;

     label6:
        return z0;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isProfileActivePasswordSufficientForParent(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        boolean z0, $z1, $z2;
        com.android.internal.widget.LockSettingsInternal $r3;
        java.lang.Throwable $r4;
        android.app.admin.PasswordMetrics r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i1 := @parameter0: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 1;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i1, "call APIs refering to the parent profile");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int,boolean)>(i0, 0);

        i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getCredentialOwner(int,boolean)>(i1, 0);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i2);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal>;

        r5 = virtualinvoke $r3.<com.android.internal.widget.LockSettingsInternal: android.app.admin.PasswordMetrics getUserPasswordMetrics(int)>(i2);

        $z2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPasswordValidAtLastCheckpoint>;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficientForUserLocked(boolean,android.app.admin.PasswordMetrics,int,boolean)>($z2, r5, i0, 0);

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isProfileOwner(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r2;
        int i0;
        boolean $z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isProvisioningAllowed(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r15, r16;
        int i0, i2, $i3, $i4;
        long l1;
        java.lang.IllegalArgumentException r2;
        java.lang.StringBuilder r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6, $r7, $r9, $r11;
        android.content.pm.PackageManager $r8;
        java.lang.Throwable $r10;
        android.content.pm.PackageManager$NameNotFoundException $r12;
        boolean z1, z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label01:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        i2 = virtualinvoke $r8.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r1, $i3);

     label02:
        if i0 != i2 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "Caller uid doesn\'t match the one for the provided package.");

     label05:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        $i4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int checkProvisioningPreConditionSkipPermission(java.lang.String,java.lang.String)>(r16, r1);

        if $i4 != 0 goto label06;

        z2 = 1;

        goto label07;

     label06:
        z2 = 0;

     label07:
        return z2;

     label08:
        $r10 := @caughtexception;

        goto label11;

     label09:
        $r12 := @caughtexception;

     label10:
        r2 = new java.lang.IllegalArgumentException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package provided ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r12);

        throw r2;

     label11:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r10;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label09;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
    }

    public boolean isRemovingAdmin(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        java.util.ArrayList $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r3 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        z0 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r5);

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isResetPasswordTokenActive(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        int i0;
        boolean z0, $z1, $z2;
        com.android.internal.widget.LockPatternUtils $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label7;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label1;

        goto label7;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r6, -1);

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isResetPasswordTokenActiveForUserLocked(int)>(i0);

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

     label7:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isRuntimePermission(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        android.content.pm.PackageManager r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.content.pm.PermissionInfo $r4;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r2 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        z0 = 0;

        $r4 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>(r1, 0);

        $i0 = $r4.<android.content.pm.PermissionInfo: int protectionLevel>;

        $i1 = $i0 & 15;

        if $i1 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isSecondaryLockscreenEnabled(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0;
        int $i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r2;
        java.lang.Throwable $r3;
        android.os.UserHandle r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.os.UserHandle;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i0);

        z0 = $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mSecondaryLockscreenEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isSecurityLoggingEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerWithSystemUid()>();

        if $z2 != 0 goto label3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r6, -3);

     label3:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        z0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogGetLoggingEnabledProperty()>();

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isSeparateProfileChallengeAllowed(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.content.ComponentName r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("query separate challenge support");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>($r2, i0);

        if $i1 <= 23 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSystemOnlyUser(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $z0 = staticinvoke <android.os.UserManager: boolean isSplitSystemUser()>();

        if $z0 == 0 goto label1;

        if i0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isUnattendedManagedKiosk()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean $z0, $z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eb4B_P3q87imsfbrRzkTxjgR_2Q $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r1 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eb4B_P3q87imsfbrRzkTxjgR_2Q;

        specialinvoke $r1.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$eb4B_P3q87imsfbrRzkTxjgR_2Q: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public boolean isUninstallBlocked(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        long l1;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r5, $r8, $r11;
        android.content.pm.IPackageManager $r4;
        java.lang.Throwable $r7, $r9;
        android.os.RemoteException $r10;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

        if r12 == null goto label02;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r12, -1);

     label02:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label03:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        z0 = interfaceinvoke $r4.<android.content.pm.IPackageManager: boolean getBlockUninstallForUser(java.lang.String,int)>(r1, i0);

     label04:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label05:
        return z0;

     label06:
        $r7 := @caughtexception;

        goto label12;

     label07:
        $r10 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to getBlockUninstallForUser", $r10);

     label09:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label10:
        exitmonitor r2;

     label11:
        return 0;

     label12:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label13:
        throw $r7;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch android.os.RemoteException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean isUninstallInQueue(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        android.util.Pair $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        int $i0;
        java.lang.Integer $r3;
        java.util.Set $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        java.lang.Object r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageDeviceAdmin()>();

        $r1 = new android.util.Pair;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r6, $r3);

        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r8;

     label1:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set mPackagesToRemove>;

        z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        exitmonitor r8;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r8;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isUsingUnifiedPassword(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean $z0, $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i0, "query unified challenge status");

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i0);

        $z2 = 1 ^ $z1;

        return $z2;
    }

    public java.lang.Integer lambda$addOverrideApn$98$DevicePolicyManagerService(android.telephony.TelephonyManager, android.telephony.data.ApnSetting) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.telephony.TelephonyManager r1;
        android.telephony.data.ApnSetting r2;
        android.content.Context $r3;
        int $i0;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.telephony.TelephonyManager;

        r2 := @parameter1: android.telephony.data.ApnSetting;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke r1.<android.telephony.TelephonyManager: int addDevicePolicyOverrideApn(android.content.Context,android.telephony.data.ApnSetting)>($r3, r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r4;
    }

    public java.lang.Boolean lambda$areAllUsersAffiliatedWithDeviceLocked$88$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, i3;
        android.os.UserManager $r1;
        java.lang.Boolean $r2, $r10;
        java.lang.Object $r3;
        android.content.pm.UserInfo $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;
        java.util.List r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r11 = virtualinvoke $r1.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        i3 = 0;

     label1:
        $i1 = interfaceinvoke r11.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r3 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i3);

        $r4 = (android.content.pm.UserInfo) $r3;

        i0 = $r4.<android.content.pm.UserInfo: int id>;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User id ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not affiliated.");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r10;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;
    }

    public void lambda$choosePrivateKeyAlias$29$DevicePolicyManagerService(android.content.Intent, android.os.UserHandle, android.os.IBinder, boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.os.IBinder r3;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$7 $r4;
        android.content.Context $r5;
        android.app.admin.DevicePolicyEventLogger $r6, $r8, $r9;
        android.content.ComponentName $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.os.IBinder;

        z0 := @parameter3: boolean;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = new com.android.server.devicepolicy.DevicePolicyManagerService$7;

        specialinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$7: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.IBinder)>(r0, r3);

        virtualinvoke $r5.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r2, null, $r4, null, -1, null, null);

        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(22);

        $r7 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r8 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>($r7);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void lambda$clearApplicationRestrictions$47$DevicePolicyManagerService(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.UserHandle r1;
        android.content.pm.PackageInfo r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r6;
        android.content.pm.PackageManager $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.os.UserManager $r7;
        java.lang.String $r8;
        java.util.List r9;
        java.util.Iterator r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager(int)>(i0);

        r9 = virtualinvoke $r4.<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>(786432);

        r1 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.PackageInfo) $r5;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManager getUserManager()>();

        $r8 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r7.<android.os.UserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,android.os.UserHandle)>($r8, null, r1);

        goto label1;

     label2:
        return;
    }

    public void lambda$clearDeviceOwner$46$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int, android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        int i0;
        android.content.ComponentName r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ComponentName;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int)>(r1, i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdminLocked(android.content.ComponentName,int)>(r2, i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendOwnerChangedBroadcast(java.lang.String,int)>("android.app.action.DEVICE_OWNER_CHANGED", i0);

        return;
    }

    public void lambda$clearProfileOwner$49$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int, android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        int i0;
        android.content.ComponentName r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ComponentName;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int)>(r1, i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdminLocked(android.content.ComponentName,int)>(r2, i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendOwnerChangedBroadcast(java.lang.String,int)>("android.app.action.PROFILE_OWNER_CHANGED", i0);

        return;
    }

    public java.lang.Boolean lambda$clearResetPasswordToken$96$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0;
        boolean z0;
        long $l1;
        com.android.internal.widget.LockPatternUtils $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $l1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        z0 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean removeEscrowToken(long,int)>($l1, i0);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle> = 0L;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        return $r3;
    }

    public void lambda$enforceHandlesCheckPolicyComplianceIntent$113$DevicePolicyManagerService(java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        android.content.Intent $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        android.content.pm.PackageManager $r6;
        java.util.List $r7;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.CHECK_POLICY_COMPLIANCE");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $r7 = virtualinvoke $r6.<android.content.pm.PackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)>($r3, 0, i0);

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Admin doesn\'t handle android.app.action.CHECK_POLICY_COMPLIANCE");

        return;
    }

    public void lambda$ensureMinimumQuality$13$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int, int, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        int i0, i1, $i2;
        java.lang.String r2, $r5, $r9;
        android.app.admin.PasswordPolicy $r3;
        android.app.admin.DeviceAdminInfo $r4;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = $r3.<android.app.admin.PasswordPolicy: int quality>;

        if $i2 >= i0 goto label2;

        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r5 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean passwordQualityInvocationOrderCheckEnabled(java.lang.String,int)>($r5, i1);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.IllegalStateException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r7[1] = r2;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("password quality should be at least %d for %s", $r7);

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label2:
        return;
    }

    public android.content.pm.ActivityInfo lambda$findAdmin$2$DevicePolicyManagerService(android.content.ComponentName, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        android.content.ComponentName r3;
        android.content.pm.ActivityInfo r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>(r3, 819328, i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.Long lambda$forceNetworkLogs$93$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.NetworkLogger $r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        $l0 = virtualinvoke $r1.<com.android.server.devicepolicy.NetworkLogger: long forceBatchFinalization()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    public void lambda$forceRemoveActiveAdmin$6$DevicePolicyManagerService(android.content.ComponentName, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i2;
        java.lang.SecurityException r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r6, $r21;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r11, $r14;
        android.os.UserManager $r12, $r13;
        java.lang.Throwable $r15;
        android.content.ComponentName r16;
        java.lang.Object r17;
        android.os.UserHandle r18;
        java.lang.StringBuilder $r19, r22;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r17 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r17;

     label1:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminTestOnlyLocked(android.content.ComponentName,int)>(r16, i0);

        if $z0 == 0 goto label6;

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r16, i0);

        if $z1 == 0 goto label2;

        $r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int)>($r14, i0);

     label2:
        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r16, i0);

        if $z2 == 0 goto label4;

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>(i0);

        if $z3 == 0 goto label3;

        $i2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        r18 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i2);

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r12.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_remove_managed_profile", 0, r18);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r13.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_add_user", 0, r18);

     label3:
        $r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int,boolean)>(r16, i0, 0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int)>($r11, i0);

     label4:
        exitmonitor r17;

     label5:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeAdminArtifacts(android.content.ComponentName,int)>(r16, i0);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" removed from user ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r21);

        return;

     label6:
        r1 = new java.lang.SecurityException;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to remove non-test admin ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw r1;

     label7:
        $r15 := @caughtexception;

     label8:
        exitmonitor r17;

     label9:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean lambda$getActiveAdminsForLockscreenPoliciesLocked$9$DevicePolicyManagerService(android.content.pm.UserInfo)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.pm.UserInfo r1;
        int $i0;
        com.android.internal.widget.LockPatternUtils $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.pm.UserInfo;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $i0 = r1.<android.content.pm.UserInfo: int id>;

        $z0 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean isSeparateProfileChallengeEnabled(int)>($i0);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public void lambda$getActiveAdminsForUserAndItsManagedProfilesLocked$11$DevicePolicyManagerService(int, java.util.ArrayList, java.util.function.Predicate) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i4, i5;
        java.util.ArrayList r1, $r13, $r14, $r17;
        java.util.function.Predicate r2;
        java.util.Iterator r3;
        android.content.pm.UserInfo r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r5;
        android.os.UserManager $r6;
        java.util.List $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8, $r15;
        java.lang.StringBuilder $r9;
        java.lang.String $r12;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r16, r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: java.util.function.Predicate;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r7 = virtualinvoke $r6.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.UserInfo) $r8;

        $i1 = r4.<android.content.pm.UserInfo: int id>;

        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>($i1);

        $i2 = r4.<android.content.pm.UserInfo: int id>;

        if $i2 != i0 goto label2;

        $r17 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r17);

        goto label8;

     label2:
        $z1 = virtualinvoke r4.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label7;

        i5 = 0;

     label3:
        $r13 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i4 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        if i5 >= $i4 goto label6;

        $r14 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r18 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r15;

        $z2 = virtualinvoke r18.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean hasParentActiveAdmin()>();

        if $z2 == 0 goto label4;

        $r16 = virtualinvoke r18.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getParentActiveAdmin()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label4:
        $z3 = interfaceinvoke r2.<java.util.function.Predicate: boolean test(java.lang.Object)>(r4);

        if $z3 == 0 goto label5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r18);

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        goto label8;

     label7:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown user type: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

     label8:
        goto label1;

     label9:
        return;
    }

    public java.util.List lambda$getAlwaysOnVpnLockdownWhitelist$33$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.net.ConnectivityManager $r2;
        java.util.List $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.net.ConnectivityManager getConnectivityManager()>();

        $r3 = virtualinvoke $r2.<android.net.ConnectivityManager: java.util.List getVpnLockdownWhitelist(int)>(i0);

        return $r3;
    }

    public java.lang.String lambda$getAlwaysOnVpnPackage$31$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.net.ConnectivityManager $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.net.ConnectivityManager getConnectivityManager()>();

        $r3 = virtualinvoke $r2.<android.net.ConnectivityManager: java.lang.String getAlwaysOnVpnPackageForUser(int)>(i0);

        return $r3;
    }

    public java.lang.String lambda$getApplicationLabel$54$DevicePolicyManagerService(int, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.pm.ApplicationInfo r1;
        android.content.Context $r2, r13;
        android.content.pm.PackageManager $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9, r10, r11;
        android.os.UserHandle r12;
        java.lang.CharSequence r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        r11 = null;

     label1:
        r12 = new android.os.UserHandle;

        specialinvoke r12.<android.os.UserHandle: void <init>(int)>(i0);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r13 = virtualinvoke $r2.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>(r10, 0, r12);

     label2:
        r1 = virtualinvoke r13.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r14 = null;

        if r1 == null goto label3;

        $r3 = virtualinvoke r13.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r14 = virtualinvoke r1.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadUnsafeLabel(android.content.pm.PackageManager)>($r3);

     label3:
        if r14 == null goto label4;

        r11 = interfaceinvoke r14.<java.lang.CharSequence: java.lang.String toString()>();

     label4:
        return r11;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not installed for user ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r9, $r4);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
    }

    public android.os.Bundle lambda$getApplicationRestrictions$63$DevicePolicyManagerService(java.lang.String, android.os.UserHandle) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle r1;
        android.os.UserManager $r2;
        java.lang.String r3;
        android.os.Bundle r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r4 = virtualinvoke $r2.<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String,android.os.UserHandle)>(r3, r1);

        if r4 == null goto label1;

        goto label2;

     label1:
        r4 = <android.os.Bundle: android.os.Bundle EMPTY>;

     label2:
        return r4;
    }

    public java.util.ArrayList lambda$getBindDeviceAdminTargetUsers$90$DevicePolicyManagerService(android.content.ComponentName, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3, i4;
        java.util.ArrayList $r2;
        boolean $z0, $z1, $z3;
        android.os.UserManager $r3;
        java.lang.Object $r4;
        android.content.pm.UserInfo $r5;
        android.os.UserHandle $r6, $r8;
        com.android.server.devicepolicy.Owners $r7;
        android.content.ComponentName r9;
        java.util.List r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r9, i0);

        if $z0 != 0 goto label1;

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canUserBindToDeviceOwnerLocked(int)>(i0);

        if $z3 == 0 goto label4;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i3 = virtualinvoke $r7.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        $r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i3);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label4;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r10 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        i4 = 0;

     label2:
        $i2 = interfaceinvoke r10.<java.util.List: int size()>();

        if i4 >= $i2 goto label4;

        $r4 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i4);

        $r5 = (android.content.pm.UserInfo) $r4;

        i1 = $r5.<android.content.pm.UserInfo: int id>;

        if i1 == i0 goto label3;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canUserBindToDeviceOwnerLocked(int)>(i1);

        if $z1 == 0 goto label3;

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return $r2;
    }

    public java.lang.Integer lambda$getCredentialOwner$56$DevicePolicyManagerService(int, boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i2, $i3;
        boolean z0;
        android.content.pm.UserInfo r1;
        android.os.UserManager $r2, $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i2 = i0;

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        i2 = i0;

        if r1 == null goto label1;

        i2 = r1.<android.content.pm.UserInfo: int id>;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $i3 = virtualinvoke $r3.<android.os.UserManager: int getCredentialOwnerProfile(int)>(i2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r4;
    }

    public java.util.List lambda$getOverrideApnsUnchecked$101$DevicePolicyManagerService(android.telephony.TelephonyManager) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.telephony.TelephonyManager r1;
        android.content.Context $r2;
        java.util.List $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.telephony.TelephonyManager;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke r1.<android.telephony.TelephonyManager: java.util.List getDevicePolicyOverrideApns(android.content.Context)>($r2);

        return $r3;
    }

    public java.lang.Integer lambda$getPermissionGrantState$82$DevicePolicyManagerService(java.lang.String, android.os.UserHandle, java.lang.String, java.lang.String, android.content.pm.PackageManager) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r14, r15;
        android.content.pm.PackageManager r3;
        int $i1, $i2, $i3, i4, i5, i6, i7, $i8, $i9;
        android.content.Context $r4;
        java.lang.Integer $r5, $r6;
        android.content.pm.IPackageManager $r7;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        java.lang.StringBuilder $r9;
        android.os.RemoteException $r13;
        android.os.UserHandle r16;
        byte b10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: android.os.UserHandle;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.content.pm.PackageManager;

        $i1 = virtualinvoke r16.<android.os.UserHandle: int getIdentifier()>();

        i4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>(r15, $i1);

        if i4 >= 29 goto label1;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $i3 = virtualinvoke r16.<android.os.UserHandle: int getIdentifier()>();

        i5 = interfaceinvoke $r7.<android.content.pm.IPackageManager: int checkPermission(java.lang.String,java.lang.String,int)>(r1, r2, $i3);

        goto label4;

     label1:
        $i2 = virtualinvoke r16.<android.os.UserHandle: int getIdentifier()>();

        i6 = virtualinvoke r3.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r2, $i2);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        i7 = staticinvoke <android.content.PermissionChecker: int checkPermissionForPreflight(android.content.Context,java.lang.String,int,int,java.lang.String)>($r4, r1, -1, i6, r2);

     label2:
        if i7 == 0 goto label3;

        i5 = -1;

        goto label4;

     label3:
        i5 = 0;

     label4:
        $i8 = virtualinvoke r3.<android.content.pm.PackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)>(r1, r2, r16);

        $i9 = $i8 & 4;

        if $i9 == 4 goto label5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        return $r6;

     label5:
        if i5 != 0 goto label6;

        b10 = 1;

        goto label7;

     label6:
        b10 = 2;

     label7:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b10);

        return $r5;

     label8:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot check if ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is a runtime permission");

        $r13 = new android.os.RemoteException;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<android.os.RemoteException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>($r14, $r8, 0, 1);

        throw $r13;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label8;
    }

    public com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$53$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r1;
        android.content.pm.UserInfo r2;
        android.os.UserManager $r3;
        java.util.List $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        android.content.ComponentName $r6, $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.pm.UserInfo) $r5;

        $z1 = virtualinvoke r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label2;

        $i1 = r2.<android.content.pm.UserInfo: int id>;

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>($i1);

        if $r6 == null goto label2;

        $i2 = r2.<android.content.pm.UserInfo: int id>;

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(int)>($i2);

        if $z2 == 0 goto label2;

        $i3 = r2.<android.content.pm.UserInfo: int id>;

        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>($i3);

        $i4 = r2.<android.content.pm.UserInfo: int id>;

        $r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>($r7, $i4);

        return $r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.Integer lambda$getProfileParentId$55$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.pm.UserInfo r1;
        android.os.UserManager $r2;
        java.lang.Integer $r3;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r1 == null goto label1;

        i0 = r1.<android.content.pm.UserInfo: int id>;

        goto label1;

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r3;
    }

    public java.util.List lambda$getSecondaryUsers$61$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.Iterator r2;
        android.os.UserHandle r3, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        android.os.UserManager $r5;
        java.util.ArrayList $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7;
        int $i0;
        java.util.List r9;
        android.content.pm.UserInfo r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManager getUserManager()>();

        r9 = virtualinvoke $r5.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.content.pm.UserInfo) $r7;

        r3 = virtualinvoke r10.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z1 = virtualinvoke r3.<android.os.UserHandle: boolean isSystem()>();

        if $z1 != 0 goto label2;

        $i0 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>($i0);

        if $z2 != 0 goto label2;

        $r8 = virtualinvoke r10.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        return $r6;
    }

    public com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData lambda$getUserDataUnchecked$0$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        return $r1;
    }

    public android.content.pm.UserInfo lambda$getUserInfo$23$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.UserManager $r1;
        android.content.pm.UserInfo $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r2 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        return $r2;
    }

    public java.lang.String lambda$getWifiMacAddress$84$DevicePolicyManagerService(android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String[] r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.net.wifi.WifiManager $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5;
        int $i0;
        android.content.ComponentName r6;
        java.lang.String r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: android.content.ComponentName;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.net.wifi.WifiManager getWifiManager()>();

        r1 = virtualinvoke $r3.<android.net.wifi.WifiManager: java.lang.String[] getFactoryMacAddresses()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(54);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r6);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        r7 = null;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label2;

        r7 = r1[0];

     label2:
        return r7;
    }

    public java.lang.Boolean lambda$hasIncompatibleAccountsOrNonAdbNoLock$91$DevicePolicyManagerService(int, android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.accounts.AccountManager r1;
        java.lang.String[] r2, r23;
        int i0, $i1, i7, i8;
        android.content.Context $r3;
        java.lang.Boolean $r4, $r5, $r18;
        boolean $z1, $z2, $z3, $z4, z5;
        java.lang.StringBuilder $r6, $r12;
        java.lang.String $r9, $r11, $r15, $r17;
        java.lang.Throwable $r19;
        android.content.ComponentName r20;
        android.accounts.Account[] r21;
        java.lang.Object r22;
        android.accounts.Account r24;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i7 := @parameter0: int;

        r20 := @parameter1: android.content.ComponentName;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r1 = staticinvoke <android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>($r3);

        r21 = virtualinvoke r1.<android.accounts.AccountManager: android.accounts.Account[] getAccountsAsUser(int)>(i7);

        $i1 = lengthof r21;

        if $i1 != 0 goto label01;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r18;

     label01:
        r22 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r22;

        if r20 == null goto label12;

     label02:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminTestOnlyLocked(android.content.ComponentName,int)>(r20, i7);

        if $z1 != 0 goto label04;

     label03:
        goto label12;

     label04:
        exitmonitor r22;

     label05:
        r23 = newarray (java.lang.String)[1];

        r23[0] = "android.account.DEVICE_OR_PROFILE_OWNER_ALLOWED";

        r2 = newarray (java.lang.String)[1];

        r2[0] = "android.account.DEVICE_OR_PROFILE_OWNER_DISALLOWED";

        i0 = lengthof r21;

        i8 = 0;

     label06:
        z5 = 1;

        if i8 >= i0 goto label09;

        r24 = r21[i8];

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasAccountFeatures(android.accounts.AccountManager,android.accounts.Account,java.lang.String[])>(r1, r24, r2);

        if $z3 == 0 goto label07;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has ");

        $r15 = r2[0];

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r17);

        z5 = 0;

        goto label09;

     label07:
        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasAccountFeatures(android.accounts.AccountManager,android.accounts.Account,java.lang.String[])>(r1, r24, r23);

        if $z4 != 0 goto label08;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t have ");

        $r9 = r23[0];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r11);

        z5 = 0;

        goto label09;

     label08:
        i8 = i8 + 1;

        goto label06;

     label09:
        if z5 == 0 goto label10;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "All accounts are compatible");

        goto label11;

     label10:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Found incompatible accounts");

     label11:
        $z2 = z5 ^ 1;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r5;

     label12:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Non test-only owner can\'t be installed with existing accounts.");

        exitmonitor r22;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r4;

     label13:
        $r19 := @caughtexception;

     label14:
        exitmonitor r22;

     label15:
        throw $r19;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public java.lang.Boolean lambda$hasLockdownAdminConfiguredNetworks$73$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r1;
        int $i0;
        java.lang.Boolean $r2;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        z0 = 0;

        $i0 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsGlobalGetInt(java.lang.String,int)>("wifi_device_owner_configs_lockdown", 0);

        if $i0 <= 0 goto label1;

        z0 = 1;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        return $r2;
    }

    public java.lang.String lambda$installCaCert$27$DevicePolicyManagerService(android.os.UserHandle, byte[], android.content.ComponentName, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        byte[] r1;
        android.content.ComponentName r2;
        java.lang.String r3, r9;
        com.android.server.devicepolicy.CertificateMonitor $r4;
        android.app.admin.DevicePolicyEventLogger $r5, $r6, $r7;
        android.os.UserHandle r8;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.os.UserHandle;

        r1 := @parameter1: byte[];

        r2 := @parameter2: android.content.ComponentName;

        r3 := @parameter3: java.lang.String;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.CertificateMonitor mCertificateMonitor>;

        r9 = virtualinvoke $r4.<com.android.server.devicepolicy.CertificateMonitor: java.lang.String installCaCert(android.os.UserHandle,byte[])>(r8, r1);

        if r2 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(21);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return r9;
    }

    public void lambda$installUpdateFromFile$105$DevicePolicyManagerService(android.os.ParcelFileDescriptor, android.app.admin.StartInstallingUpdateCallback) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.app.admin.StartInstallingUpdateCallback r1;
        boolean $z0;
        com.android.server.devicepolicy.NonAbUpdateInstaller $r2;
        com.android.server.devicepolicy.DevicePolicyConstants $r3, $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r8;
        android.content.Context $r5, $r9;
        com.android.server.devicepolicy.AbUpdateInstaller $r6;
        android.os.ParcelFileDescriptor r10;
        com.android.server.devicepolicy.UpdateInstaller r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.os.ParcelFileDescriptor;

        r1 := @parameter1: android.app.admin.StartInstallingUpdateCallback;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceAB()>();

        if $z0 == 0 goto label1;

        $r6 = new com.android.server.devicepolicy.AbUpdateInstaller;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        specialinvoke $r6.<com.android.server.devicepolicy.AbUpdateInstaller: void <init>(android.content.Context,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback,com.android.server.devicepolicy.DevicePolicyManagerService$Injector,com.android.server.devicepolicy.DevicePolicyConstants)>($r9, r10, r1, $r8, $r7);

        r11 = $r6;

        goto label2;

     label1:
        $r2 = new com.android.server.devicepolicy.NonAbUpdateInstaller;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        specialinvoke $r2.<com.android.server.devicepolicy.NonAbUpdateInstaller: void <init>(android.content.Context,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback,com.android.server.devicepolicy.DevicePolicyManagerService$Injector,com.android.server.devicepolicy.DevicePolicyConstants)>($r5, r10, r1, $r4, $r3);

        r11 = $r2;

     label2:
        virtualinvoke r11.<com.android.server.devicepolicy.UpdateInstaller: void startInstallUpdate()>();

        return;
    }

    public java.lang.Boolean lambda$isAlwaysOnVpnLockdownEnabled$32$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.net.ConnectivityManager $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.net.ConnectivityManager getConnectivityManager()>();

        $z0 = virtualinvoke $r2.<android.net.ConnectivityManager: boolean isVpnLockdownEnabled(int)>(i0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public void lambda$isApplicationHidden$66$DevicePolicyManagerService(java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforcePackageIsSystemPackage(java.lang.String,int)>(r1, i0);

        return;
    }

    public java.lang.Boolean lambda$isApplicationHidden$67$DevicePolicyManagerService(java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        android.content.pm.IPackageManager $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $z0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>(r1, i0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public java.lang.Boolean lambda$isCallingFromPackage$109$DevicePolicyManagerService(java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.content.pm.PackageManager $r2;
        java.lang.Boolean $r3, $r5;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.String r6;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i2 = virtualinvoke $r2.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r6, $i1);

        if $i2 != i0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        return $r3;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Calling package not found", $r4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r5;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
    }

    public java.lang.Boolean lambda$isCurrentUserDemo$89$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.UserManager $r1;
        android.content.pm.UserInfo $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r2 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r2.<android.content.pm.UserInfo: boolean isDemo()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public java.lang.Boolean lambda$isEphemeralUser$62$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.os.UserManager $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserManager getUserManager()>();

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean isUserEphemeral(int)>(i0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public java.lang.Boolean lambda$isLockScreenSecureUnchecked$24$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.internal.widget.LockPatternUtils $r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: boolean isSecure(int)>(i0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public android.database.Cursor lambda$isOverrideApnEnabled$103$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3;
        android.database.Cursor $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = <android.provider.Telephony$Carriers: android.net.Uri ENFORCE_MANAGED_URI>;

        $r4 = virtualinvoke $r2.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r3, null, null, null, null);

        return $r4;
    }

    public java.lang.Boolean lambda$isPackageInstalledForUser$83$DevicePolicyManagerService(java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.content.pm.IPackageManager r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.pm.ApplicationInfo $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;
        android.content.pm.PackageInfo r7;
        boolean z1;
        java.lang.Boolean $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.IPackageManager getIPackageManager()>();

     label2:
        r7 = interfaceinvoke r1.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r6, 0, i0);

     label3:
        z1 = 0;

        if r7 == null goto label6;

        z1 = 0;

     label4:
        $r3 = r7.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        if $i1 == 0 goto label6;

     label5:
        z1 = 1;

     label6:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        return $r8;

     label7:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Package manager has died", $r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public boolean lambda$isPasswordSufficientAfterProfileUnification$22$DevicePolicyManagerService(int, android.content.pm.UserInfo)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        android.content.pm.UserInfo r1;
        com.android.internal.widget.LockPatternUtils $r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.UserInfo;

        $i1 = r1.<android.content.pm.UserInfo: int id>;

        if $i1 == i0 goto label2;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $i2 = r1.<android.content.pm.UserInfo: int id>;

        $z0 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean isSeparateProfileChallengeEnabled(int)>($i2);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public java.lang.Boolean lambda$isResetPasswordTokenActiveForUserLocked$97$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0;
        long $l1;
        com.android.internal.widget.LockPatternUtils $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $l1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $z0 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean isEscrowTokenActive(long,int)>($l1, i0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public java.lang.Boolean lambda$isSeparateProfileChallengeEnabled$12$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.internal.widget.LockPatternUtils $r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: boolean isSeparateProfileChallengeEnabled(int)>(i0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public java.lang.Boolean lambda$isUnattendedManagedKiosk$107$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUnattendedManagedKioskUnchecked()>();

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public void lambda$loadAdminDataAsync$5$DevicePolicyManagerService()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.app.usage.UsageStatsManagerInternal $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        com.android.server.net.NetworkPolicyManagerInternal $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushActiveAdminPackages()>();

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal>;

        virtualinvoke $r1.<android.app.usage.UsageStatsManagerInternal: void onAdminDataAvailable()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushAllMeteredRestrictedPackages()>();

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: com.android.server.net.NetworkPolicyManagerInternal getNetworkPolicyManagerInternal()>();

        virtualinvoke $r3.<com.android.server.net.NetworkPolicyManagerInternal: void onAdminDataAvailable()>();

        return;
    }

    public void lambda$markProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked$87$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.os.UserHandle r1, $r3;
        android.os.UserManager $r2, $r8, $r9;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        r1 = virtualinvoke $r2.<android.os.UserManager: android.os.UserHandle getProfileParent(android.os.UserHandle)>($r3);

        $z0 = virtualinvoke r1.<android.os.UserHandle: boolean isSystem()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r8.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_remove_managed_profile", 1, r1);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r9.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_add_user", 1, r1);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        $r5 = newarray (java.lang.Object)[1];

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Only the profile owner of a managed profile on the primary user can be granted access to device identifiers, not on user %d", $r5);

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r4;
    }

    public void lambda$maybeClearLockTaskPolicyLocked$69$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1, $r6, $r18;
        int i0, $i1, $i2, i5;
        android.os.UserManager $r2;
        java.lang.Object $r3;
        android.content.pm.UserInfo $r4;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5, $r7;
        java.lang.StringBuilder $r8, $r13;
        java.lang.String $r12, $r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r2.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i5 = $i1 - 1;

     label1:
        if i5 < 0 goto label5;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r4 = (android.content.pm.UserInfo) $r3;

        i0 = $r4.<android.content.pm.UserInfo: int id>;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canUserUseLockTaskLocked(int)>(i0);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User id ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not affiliated. Clearing lock task packages");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", $r17);

        $r18 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskPackagesLocked(int,java.util.List)>(i0, $r18);

     label3:
        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $i2 = $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mLockTaskFeatures>;

        if $i2 == 0 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User id ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not affiliated. Clearing lock task features");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskFeaturesLocked(int,int)>(i0, 0);

     label4:
        i5 = i5 + -1;

        goto label1;

     label5:
        return;
    }

    public void lambda$maybeResumeDeviceWideLoggingLocked$94$DevicePolicyManagerService(boolean, boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1;
        com.android.server.devicepolicy.NetworkLogger r1;
        com.android.server.devicepolicy.SecurityLogMonitor $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        virtualinvoke $r2.<com.android.server.devicepolicy.SecurityLogMonitor: void resume()>();

     label2:
        if z0 == 0 goto label3;

        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        if r1 == null goto label3;

        virtualinvoke r1.<com.android.server.devicepolicy.NetworkLogger: void resume()>();

     label3:
        return;
    }

    public void lambda$notifyPendingSystemUpdate$80$DevicePolicyManagerService(android.content.Intent) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int[] r1;
        int i0, i1, $i2, i4;
        com.android.server.devicepolicy.Owners $r2, $r5, $r9, $r10;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.IActivityManager $r4;
        android.content.Context $r7, $r13;
        android.os.UserHandle $r8, r19;
        android.content.ComponentName $r11, r21;
        android.os.RemoteException $r14;
        java.lang.Throwable $r15, $r16;
        android.content.Intent r17;
        java.lang.Object r18, r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r17 := @parameter0: android.content.Intent;

        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r18;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z0 == 0 goto label02;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i2 = virtualinvoke $r9.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        r19 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i2);

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $r11 = virtualinvoke $r10.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        virtualinvoke r17.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r11);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r13.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r17, r19);

     label02:
        exitmonitor r18;

     label03:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        r1 = interfaceinvoke $r4.<android.app.IActivityManager: int[] getRunningUserIds()>();

     label04:
        i0 = lengthof r1;

        i4 = 0;

     label05:
        if i4 >= i0 goto label14;

        i1 = r1[i4];

        r20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r20;

     label06:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r21 = virtualinvoke $r5.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i1);

     label07:
        if r21 == null goto label09;

     label08:
        virtualinvoke r17.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r21);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        virtualinvoke $r7.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r17, $r8);

     label09:
        exitmonitor r20;

     label10:
        i4 = i4 + 1;

        goto label05;

     label11:
        $r16 := @caughtexception;

     label12:
        exitmonitor r20;

     label13:
        throw $r16;

     label14:
        return;

     label15:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Could not retrieve the list of running users", $r14);

        return;

     label16:
        $r15 := @caughtexception;

     label17:
        exitmonitor r18;

     label18:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void lambda$putPrivateDnsSettings$104$DevicePolicyManagerService(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutString(java.lang.String,java.lang.String)>("private_dns_mode", r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutString(java.lang.String,java.lang.String)>("private_dns_specifier", r2);

        return;
    }

    public void lambda$reboot$85$DevicePolicyManagerService(android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        android.telephony.TelephonyManager $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.telephony.TelephonyManager mTelephonyManager>;

        $i0 = virtualinvoke $r2.<android.telephony.TelephonyManager: int getCallState()>();

        if $i0 != 0 goto label1;

        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(34);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void powerManagerReboot(java.lang.String)>("deviceowner");

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot be called with ongoing call on the device");

        throw $r3;
    }

    public void lambda$removeActiveAdmin$7$DevicePolicyManagerService(android.content.ComponentName, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdminLocked(android.content.ComponentName,int)>(r1, i0);

        return;
    }

    public java.lang.Integer lambda$removeOverrideApnUnchecked$100$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3, $r5;
        java.lang.String $r4;
        java.lang.Integer $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = <android.provider.Telephony$Carriers: android.net.Uri DPC_URI>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r3, $r4);

        $i1 = virtualinvoke $r2.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r5, null, null);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r6;
    }

    public java.lang.Boolean lambda$removeUser$60$DevicePolicyManagerService(android.os.UserHandle, android.content.ComponentName, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        android.os.UserManagerInternal $r2;
        java.lang.Boolean $r3, $r9;
        java.lang.StringBuilder $r4;
        java.lang.String $r8, r11;
        android.os.UserHandle r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.os.UserHandle;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r10.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>($i1);

        if $z0 == 0 goto label1;

        r11 = "no_remove_managed_profile";

        goto label2;

     label1:
        r11 = "no_remove_user";

     label2:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminAffectedByRestriction(android.content.ComponentName,java.lang.String,int)>(r1, r11, i0);

        if $z1 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The device owner cannot remove a user because ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is enabled, and was not set by the device owner");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r9;

     label3:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        $i2 = virtualinvoke r10.<android.os.UserHandle: int getIdentifier()>();

        $z2 = virtualinvoke $r2.<android.os.UserManagerInternal: boolean removeUserEvenWhenDisallowed(int)>($i2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r3;
    }

    public void lambda$reportSuccessfulPasswordAttempt$37$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        i0 := @parameter1: int;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = -1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandForLockscreenPoliciesLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_SUCCEEDED", 1, i0);

     label1:
        return;
    }

    public void lambda$sendChangedNotification$3$DevicePolicyManagerService(android.content.Intent, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Intent r1;
        int i0;
        android.os.UserHandle $r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r2 = new android.os.UserHandle;

        specialinvoke $r2.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke $r3.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r2);

        return;
    }

    public void lambda$setActiveAdmin$4$DevicePolicyManagerService(android.content.ComponentName, int, boolean, android.app.admin.DeviceAdminInfo, com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData, android.os.Bundle) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, $r22;
        int i0, i2, i3, i4;
        android.app.admin.DeviceAdminInfo r2, $r21;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        android.os.Bundle r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5, $r7, $r20;
        java.lang.String $r8, $r15, $r17;
        android.util.ArrayMap $r9;
        java.util.ArrayList $r11, $r12, $r14, $r18;
        android.app.usage.UsageStatsManagerInternal $r16;
        java.lang.Object $r19;
        boolean $z1, z2, z3;
        java.lang.IllegalArgumentException $r23;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z2 := @parameter2: boolean;

        r2 := @parameter3: android.app.admin.DeviceAdminInfo;

        r3 := @parameter4: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        r4 := @parameter5: android.os.Bundle;

        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if z2 != 0 goto label2;

        if r5 != null goto label1;

        goto label2;

     label1:
        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Admin is already added");

        throw $r23;

     label2:
        $r7 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        specialinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo,boolean)>(r2, 0);

        if r5 == null goto label3;

        z3 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean testOnlyAdmin>;

        goto label4;

     label3:
        $r8 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageTestOnly(java.lang.String,int)>($r8, i0);

     label4:
        $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean testOnlyAdmin> = z3;

        $r9 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        $r11 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        i3 = 0;

     label5:
        i4 = -1;

        if i3 >= i2 goto label7;

        $r18 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r19 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r20 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r19;

        $r21 = $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r22 = virtualinvoke $r21.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $z1 = virtualinvoke $r22.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label6;

        i4 = i3;

        goto label7;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        if i4 != -1 goto label8;

        $r14 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $r15 = virtualinvoke r2.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enableIfNecessary(java.lang.String,int)>($r15, i0);

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal>;

        $r17 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r16.<android.app.usage.UsageStatsManagerInternal: void onActiveAdminAdded(java.lang.String,int)>($r17, i0);

        goto label9;

     label8:
        $r12 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r12.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i4, $r7);

     label9:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>($r7, "android.app.action.DEVICE_ADMIN_ENABLED", r4, null);

        return;
    }

    public void lambda$setAlwaysOnVpnPackage$30$DevicePolicyManagerService(java.lang.String, int, boolean, java.util.List, android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Iterator r1;
        java.lang.String r2, $r12, $r17, r19;
        java.lang.UnsupportedOperationException $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r6, $r7, r26, r27;
        java.lang.String[] $r5;
        java.lang.Object $r8;
        java.lang.StringBuilder $r9, $r14;
        android.os.ServiceSpecificException $r13, $r18;
        int i2, i3;
        java.util.List r20;
        android.content.ComponentName r21;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r24;
        android.net.ConnectivityManager $r25;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r19 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        r20 := @parameter3: java.util.List;

        r21 := @parameter4: android.content.ComponentName;

        if r19 == null goto label2;

        $z3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageInstalledForUser(java.lang.String,int)>(r19, i2);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-existent VPN package specified: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r17);

        $r18 = new android.os.ServiceSpecificException;

        specialinvoke $r18.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(1, r19);

        throw $r18;

     label2:
        if r19 == null goto label5;

        if z0 == 0 goto label5;

        if r20 == null goto label5;

        r1 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r8;

        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageInstalledForUser(java.lang.String,int)>(r2, i2);

        if $z2 == 0 goto label4;

        goto label3;

     label4:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-existent package in VPN whitelist: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r12);

        $r13 = new android.os.ServiceSpecificException;

        specialinvoke $r13.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(1, r2);

        throw $r13;

     label5:
        $r24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r25 = virtualinvoke $r24.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.net.ConnectivityManager getConnectivityManager()>();

        $z4 = virtualinvoke $r25.<android.net.ConnectivityManager: boolean setAlwaysOnVpnPackageForUser(int,java.lang.String,boolean,java.util.List)>(i2, r19, z0, r20);

        if $z4 == 0 goto label7;

        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(26);

        r26 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r21);

        i3 = 0;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r19;

        $r6 = virtualinvoke r26.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r5);

        r27 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        if r20 == null goto label6;

        i3 = interfaceinvoke r20.<java.util.List: int size()>();

     label6:
        $r7 = virtualinvoke r27.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i3);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label7:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void lambda$setApplicationHidden$64$DevicePolicyManagerService(java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforcePackageIsSystemPackage(java.lang.String,int)>(r1, i0);

        return;
    }

    public java.lang.Boolean lambda$setApplicationHidden$65$DevicePolicyManagerService(java.lang.String, boolean, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        boolean z0, $z1;
        int i0;
        android.content.pm.IPackageManager $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $z1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>(r1, z0, i0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r3;
    }

    public void lambda$setApplicationRestrictions$59$DevicePolicyManagerService(java.lang.String, android.os.Bundle, android.os.UserHandle, android.content.ComponentName, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r5;
        android.os.Bundle r2;
        android.os.UserHandle r3;
        android.content.ComponentName r4;
        android.os.UserManager $r6;
        android.app.admin.DevicePolicyEventLogger $r7, $r8, $r9, $r11;
        java.lang.String[] $r10;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.UserHandle;

        r4 := @parameter3: android.content.ComponentName;

        r5 := @parameter4: java.lang.String;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r6.<android.os.UserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,android.os.UserHandle)>(r1, r2, r3);

        if r4 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(62);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = r1;

        $r11 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r10);

        virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void lambda$setAutoTimeEnabled$42$DevicePolicyManagerService(boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = (int) z0;

        virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutInt(java.lang.String,int)>("auto_time", i0);

        return;
    }

    public void lambda$setAutoTimeRequired$41$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutInt(java.lang.String,int)>("auto_time", 1);

        return;
    }

    public void lambda$setAutoTimeZoneEnabled$43$DevicePolicyManagerService(boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = (int) z0;

        virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutInt(java.lang.String,int)>("auto_time_zone", i0);

        return;
    }

    public void lambda$setConfiguredNetworksLockdownState$72$DevicePolicyManagerService(boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = (int) z0;

        virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutInt(java.lang.String,int)>("wifi_device_owner_configs_lockdown", i0);

        return;
    }

    public void lambda$setDefaultSmsApplication$57$DevicePolicyManagerService(java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>($i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforcePackageIsSystemPackage(java.lang.String,int)>(r1, $i1);

        return;
    }

    public void lambda$setDefaultSmsApplication$58$DevicePolicyManagerService(java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        staticinvoke <com.android.internal.telephony.SmsApplication: void setDefaultApplication(java.lang.String,android.content.Context)>(r1, $r2);

        return;
    }

    public void lambda$setDeviceOwner$45$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.UserManager $r1;
        android.os.UserHandle $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r2 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r1.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_add_managed_profile", 1, $r2);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendOwnerChangedBroadcast(java.lang.String,int)>("android.app.action.DEVICE_OWNER_CHANGED", i0);

        return;
    }

    public void lambda$setDeviceOwnerLockScreenInfo$50$DevicePolicyManagerService(java.lang.CharSequence) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.internal.widget.LockPatternUtils r1;
        java.lang.CharSequence r2;
        java.lang.String r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r2 := @parameter0: java.lang.CharSequence;

        r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        if r2 == null goto label1;

        r3 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        virtualinvoke r1.<com.android.internal.widget.LockPatternUtils: void setDeviceOwnerInfo(java.lang.String)>(r3);

        return;
    }

    public void lambda$setExpirationAlarmCheckLocked$1$DevicePolicyManagerService(boolean, int, android.content.Context, long) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        long l0;
        android.app.AlarmManager r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.Intent $r3;
        android.os.UserHandle $r4;
        byte $b1;
        int i2;
        android.content.Context r5;
        android.app.PendingIntent r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        i2 := @parameter1: int;

        r5 := @parameter2: android.content.Context;

        l0 := @parameter3: long;

        if z0 == 0 goto label1;

        i2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i2);

        goto label1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.AlarmManager getAlarmManager()>();

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION");

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i2);

        r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)>(r5, 5571, $r3, 1207959552, $r4);

        virtualinvoke r1.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>(r6);

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label2;

        virtualinvoke r1.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(1, l0, r6);

     label2:
        return;
    }

    public void lambda$setFactoryResetProtectionPolicy$36$DevicePolicyManagerService(android.content.Intent, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Intent r1;
        int i0;
        android.content.Context $r2;
        android.os.UserHandle $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i0);

        virtualinvoke $r2.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>(r1, $r3, "android.permission.MANAGE_FACTORY_RESET_PROTECTION");

        return;
    }

    public void lambda$setForceEphemeralUsers$44$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserManagerInternal $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r1.<android.os.UserManagerInternal: void removeAllUsers()>();

        return;
    }

    public void lambda$setGlobalProxy$38$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void resetGlobalProxyLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        return;
    }

    public void lambda$setGlobalSetting$70$DevicePolicyManagerService(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutString(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void lambda$setLocationEnabled$74$DevicePolicyManagerService(android.os.UserHandle, boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle r1;
        boolean z0, z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        android.location.LocationManager $r3, $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.os.UserHandle;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.location.LocationManager getLocationManager()>();

        z1 = virtualinvoke $r3.<android.location.LocationManager: boolean isLocationEnabledForUser(android.os.UserHandle)>(r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.location.LocationManager getLocationManager()>();

        virtualinvoke $r5.<android.location.LocationManager: void setLocationEnabledForUser(boolean,android.os.UserHandle)>(z0, r1);

        if z0 == 0 goto label1;

        if z1 == z0 goto label1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void showLocationSettingsEnabledNotification(android.os.UserHandle)>(r1);

     label1:
        return;
    }

    public java.lang.Integer lambda$setManagedProfileMaximumTimeOff$112$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.os.UserManager $r1;
        boolean $z0;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r1.<android.os.UserManager: boolean isUserUnlocked()>();

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int updatePersonalAppsSuspension(int,boolean)>(i0, $z0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r2;
    }

    public java.util.List lambda$setMeteredDataDisabledPackages$86$DevicePolicyManagerService(int, java.util.List, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.util.List r1, r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List removeInvalidPkgsForMeteredDataRestriction(int,java.util.List)>(i0, r1);

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List meteredDisabledPackages> = r1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushMeteredDisabledPackagesLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        return r3;
    }

    public void lambda$setNetworkLoggingActiveInternal$92$DevicePolicyManagerService(boolean) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        com.android.server.devicepolicy.NetworkLogger $r1, r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r6;
        android.content.pm.PackageManagerInternal $r3;
        android.app.NotificationManager $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $r1 = new com.android.server.devicepolicy.NetworkLogger;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        specialinvoke $r1.<com.android.server.devicepolicy.NetworkLogger: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.pm.PackageManagerInternal)>(r0, $r3);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger> = $r1;

        $z2 = virtualinvoke $r1.<com.android.server.devicepolicy.NetworkLogger: boolean startNetworkLogging()>();

        if $z2 != 0 goto label1;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger> = null;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Network logging could not be started due to the logging service not being available yet.");

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybePauseDeviceWideLoggingLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendNetworkLoggingNotificationLocked()>();

        goto label4;

     label2:
        r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        if r5 == null goto label3;

        $z1 = virtualinvoke r5.<com.android.server.devicepolicy.NetworkLogger: boolean stopNetworkLogging()>();

        if $z1 != 0 goto label3;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", "Network logging could not be stopped due to the logging service not being available yet.");

     label3:
        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger> = null;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        virtualinvoke $r7.<android.app.NotificationManager: void cancel(int)>(1002);

     label4:
        return;
    }

    public java.lang.Integer lambda$setOverrideApnsEnabledUnchecked$102$DevicePolicyManagerService(android.content.ContentValues) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ContentValues r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.net.Uri $r4;
        int $i0;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ContentValues;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = <android.provider.Telephony$Carriers: android.net.Uri ENFORCE_MANAGED_URI>;

        $i0 = virtualinvoke $r3.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r4, r1, null, null);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;
    }

    public void lambda$setPasswordQuality$8$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, int, int, boolean, android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        int i0, i1, $i2;
        boolean z0;
        android.content.ComponentName r2;
        android.app.admin.PasswordPolicy r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: android.content.ComponentName;

        r3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r3.<android.app.admin.PasswordPolicy: int quality>;

        if $i2 == i0 goto label1;

        r3.<android.app.admin.PasswordPolicy: int quality> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void resetInactivePasswordRequirementsIfRPlus(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(i1, r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordQualityCacheForUserGroup(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r2, i1, z0, r3);

        return;
    }

    public java.lang.Integer lambda$setPersonalAppsSuspended$110$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.os.UserManager $r1;
        boolean $z0;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r1.<android.os.UserManager: boolean isUserUnlocked(int)>(i0);

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int updatePersonalAppsSuspension(int,boolean)>(i0, $z0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r2;
    }

    public void lambda$setProfileEnabled$51$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.os.UserManager $r2, $r3;
        android.content.Intent $r4;
        android.os.UserHandle $r5, $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r8;
        android.content.Context $r10;
        android.content.pm.UserInfo r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r2.<android.os.UserManager: void setUserEnabled(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r11 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MANAGED_PROFILE_ADDED");

        $r5 = new android.os.UserHandle;

        specialinvoke $r5.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.USER", $r5);

        $r7 = new android.os.UserHandle;

        $i1 = r11.<android.content.pm.UserInfo: int id>;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>($i1);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: void broadcastIntentToCrossProfileManifestReceiversAsUser(android.content.Intent,android.os.UserHandle,boolean)>($r4, $r7, 1);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent addFlags(int)>(1342177280);

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r7);

        return;
    }

    public void lambda$setProfileName$52$DevicePolicyManagerService(int, java.lang.String, android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1;
        android.content.ComponentName r2;
        android.os.UserManager $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.ComponentName;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r3.<android.os.UserManager: void setUserName(int,java.lang.String)>(i0, r1);

        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(40);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r2);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void lambda$setProfileOwner$48$DevicePolicyManagerService(int, com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        android.os.UserManager $r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: java.util.Set getDefaultEnabledForManagedProfiles()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeSetDefaultRestrictionsForAdminLocked(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.util.Set)>(i0, r1, $r3);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureUnknownSourcesRestrictionForProfileOwnerLocked(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,boolean)>(i0, r1, 1);

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendOwnerChangedBroadcast(java.lang.String,int)>("android.app.action.PROFILE_OWNER_CHANGED", i0);

        return;
    }

    public void lambda$setRecommendedGlobalProxy$39$DevicePolicyManagerService(android.net.ProxyInfo) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.net.ProxyInfo r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.net.ConnectivityManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.net.ProxyInfo;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.net.ConnectivityManager getConnectivityManager()>();

        virtualinvoke $r3.<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyInfo)>(r1);

        return;
    }

    public java.lang.Boolean lambda$setResetPasswordToken$95$DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData, int, byte[]) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0;
        byte[] r2;
        long $l1, $l3, $l4, $l6;
        byte $b2, $b5;
        com.android.internal.widget.LockPatternUtils $r3, $r5;
        java.lang.Boolean $r4;
        boolean z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        $l1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $l6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        virtualinvoke $r5.<com.android.internal.widget.LockPatternUtils: boolean removeEscrowToken(long,int)>($l6, i0);

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $l3 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: long addEscrowToken(byte[],int,com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback)>(r2, i0, null);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle> = $l3;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $l4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        return $r4;
    }

    public void lambda$setSecureSetting$77$DevicePolicyManagerService(java.lang.String, int, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r3, $r6;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        android.os.UserHandle $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = "default_input_method";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String settingsSecureGetStringForUser(java.lang.String,int)>("default_input_method", i0);

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r6, r2);

        if $z1 != 0 goto label1;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver mSetupContentObserver>;

        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver: void access$4000(com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver,int)>($r8, i0);

     label1:
        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mCurrentInputMethodSet> = 1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label2:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsSecurePutStringForUser(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("location_mode");

        if $z2 == 0 goto label3;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        if $i1 == 0 goto label3;

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void showLocationSettingsEnabledNotification(android.os.UserHandle)>($r4);

     label3:
        return;
    }

    public void lambda$setSystemSetting$71$DevicePolicyManagerService(java.lang.String, java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsSystemPutStringForUser(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    public void lambda$setSystemUpdatePolicy$79$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Intent $r1;
        android.content.Context $r2;
        android.os.UserHandle $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.SYSTEM_UPDATE_POLICY_CHANGED");

        $r3 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r2.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r1, $r3);

        return;
    }

    public void lambda$setTime$75$DevicePolicyManagerService(long) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;
        android.app.AlarmManager $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.AlarmManager getAlarmManager()>();

        virtualinvoke $r2.<android.app.AlarmManager: void setTime(long)>(l0);

        return;
    }

    public void lambda$setTimeZone$76$DevicePolicyManagerService(java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.app.AlarmManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.AlarmManager getAlarmManager()>();

        virtualinvoke $r3.<android.app.AlarmManager: void setTimeZone(java.lang.String)>(r1);

        return;
    }

    public void lambda$setUserIcon$78$DevicePolicyManagerService(int, android.graphics.Bitmap) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.graphics.Bitmap r1;
        android.os.UserManagerInternal $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Bitmap;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r2.<android.os.UserManagerInternal: void setUserIcon(int,android.graphics.Bitmap)>(i0, r1);

        return;
    }

    public void lambda$startManagedQuickContact$68$DevicePolicyManagerService(int, android.content.Intent) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        android.content.Context r2;
        android.os.UserHandle r3;
        boolean $z0;
        java.lang.Throwable $r4;
        int i0, i1;
        android.content.Intent r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.content.Intent;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getManagedUserId(int)>(i0);

     label02:
        if i1 >= 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCrossProfileQuickContactDisabled(int)>(i1);

        if $z0 == 0 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r3 = new android.os.UserHandle;

        specialinvoke r3.<android.os.UserHandle: void <init>(int)>(i1);

        staticinvoke <android.provider.ContactsInternal: void startQuickContactWithErrorToastForUser(android.content.Context,android.content.Intent,android.os.UserHandle)>(r2, r5, r3);

        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public java.lang.Boolean lambda$startViewCalendarEventInManagedProfile$108$DevicePolicyManagerService(int, java.lang.String, long, long, long, boolean, int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, l1, l2;
        boolean z0, $z1;
        int i3, i6, i7;
        java.lang.Boolean r1, $r12;
        android.content.Intent $r3;
        android.content.Context $r10;
        android.os.UserHandle $r11;
        java.lang.Object[] $r13;
        java.lang.String $r14, r16;
        android.content.ActivityNotFoundException $r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i6 := @parameter0: int;

        r16 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        z0 := @parameter5: boolean;

        i3 := @parameter6: int;

        i7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getManagedUserId(int)>(i6);

        r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        if i7 >= 0 goto label1;

        return r1;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>(r16, i7);

        if $z1 != 0 goto label2;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r16;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Package %s is not allowed to access cross-profilecalendar APIs", $r13);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", $r14);

        return r1;

     label2:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.provider.calendar.action.VIEW_MANAGED_PROFILE_CALENDAR_EVENT");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r16);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("id", l0);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("beginTime", l1);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("endTime", l2);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("allDay", z0);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setFlags(int)>(i3);

     label3:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i7);

        virtualinvoke $r10.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r3, $r11);

     label4:
        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r12;

     label5:
        $r15 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "View event activity not found", $r15);

        return r1;

        catch android.content.ActivityNotFoundException from label3 to label4 with label5;
    }

    public void lambda$suspendPersonalAppsInPackageManager$111$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.StringBuilder r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.content.pm.IPackageManager $r3;
        boolean $z0;
        java.lang.String $r5, $r7;
        android.os.RemoteException $r8;
        java.lang.String[] r9, r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r9 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.String[] getPersonalAppsForSuspension(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r10 = interfaceinvoke $r3.<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>(r9, 1, null, null, null, "android", i0);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r10);

        if $z0 != 0 goto label2;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to suspend apps: ");

        $r5 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(",", r10);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManager", $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed talking to the package manager", $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lambda$uninstallCaCerts$28$DevicePolicyManagerService(int, java.lang.String[], android.content.ComponentName, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String[] r1;
        android.content.ComponentName r2;
        java.lang.String r3;
        com.android.server.devicepolicy.CertificateMonitor $r4;
        android.os.UserHandle $r5;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r8;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: android.content.ComponentName;

        r3 := @parameter3: java.lang.String;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.CertificateMonitor mCertificateMonitor>;

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r4.<com.android.server.devicepolicy.CertificateMonitor: void uninstallCaCerts(android.os.UserHandle,java.lang.String[])>($r5, r1);

        if r2 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(24);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void lambda$updateMaximumTimeToLockLocked$25$DevicePolicyManagerService(int) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, $l1, $l3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        java.util.List $r2;
        byte $b2, $b4;
        android.os.PowerManagerInternal $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        int i5, i6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i5 := @parameter0: int;

        i6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i5);

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdminsForLockscreenPoliciesLocked(int,boolean)>(i6, 0);

        l0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLockPolicyFromAdmins(java.util.List)>($r2);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserDataUnchecked(int)>(i6);

        $l1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock>;

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label1;

        return;

     label1:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock> = l0;

        $l3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock>;

        $b4 = $l3 cmp 9223372036854775807L;

        if $b4 == 0 goto label2;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void settingsGlobalPutInt(java.lang.String,int)>("stay_on_while_plugged_in", 0);

     label2:
        $r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PowerManagerInternal getPowerManagerInternal()>();

        virtualinvoke $r3.<android.os.PowerManagerInternal: void setMaximumScreenOffTimeoutFromDeviceAdmin(int,long)>(0, l0);

        return;
    }

    public java.lang.Boolean lambda$updateOverrideApn$99$DevicePolicyManagerService(android.telephony.TelephonyManager, int, android.telephony.data.ApnSetting) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.telephony.TelephonyManager r1;
        int i0;
        android.telephony.data.ApnSetting r2;
        android.content.Context $r3;
        boolean $z0;
        java.lang.Boolean $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.telephony.TelephonyManager;

        i0 := @parameter1: int;

        r2 := @parameter2: android.telephony.data.ApnSetting;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $z0 = virtualinvoke r1.<android.telephony.TelephonyManager: boolean modifyDevicePolicyOverrideApn(android.content.Context,int,android.telephony.data.ApnSetting)>($r3, i0, r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r4;
    }

    public void lambda$updateProfileLockTimeoutLocked$26$DevicePolicyManagerService(int, com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        android.os.PowerManagerInternal $r2;
        long $l1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PowerManagerInternal getPowerManagerInternal()>();

        $l1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock>;

        virtualinvoke $r2.<android.os.PowerManagerInternal: void setMaximumScreenOffTimeoutFromDeviceAdmin(int,long)>(i0, $l1);

        return;
    }

    public void lambda$updateScreenCaptureDisabled$40$DevicePolicyManagerService(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.view.IWindowManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.view.IWindowManager getIWindowManager()>();

        interfaceinvoke $r3.<android.view.IWindowManager: void refreshScreenCaptureDisabled(int)>(i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Unable to notify WindowManager.", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lambda$wipeDataNoLock$35$DevicePolicyManagerService(int, android.content.ComponentName, int, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String r1, r2, $r9, r13;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r8;
        android.content.Context $r10;
        java.lang.Object $r11;
        android.content.ComponentName r12;
        android.service.persistentdata.PersistentDataBlockManager r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r12 := @parameter1: android.content.ComponentName;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        if i0 != 0 goto label01;

        r13 = "no_factory_reset";

        goto label03;

     label01:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label02;

        r13 = "no_remove_managed_profile";

        goto label03;

     label02:
        r13 = "no_remove_user";

     label03:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminAffectedByRestriction(android.content.ComponentName,java.lang.String,int)>(r12, r13, i0);

        if $z1 != 0 goto label11;

        $i2 = i1 & 2;

        if $i2 == 0 goto label04;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("persistent_data_block");

        r14 = (android.service.persistentdata.PersistentDataBlockManager) $r11;

        if r14 == null goto label04;

        virtualinvoke r14.<android.service.persistentdata.PersistentDataBlockManager: void wipe()>();

     label04:
        z2 = 0;

        z3 = 0;

        if i0 != 0 goto label08;

        $i4 = i1 & 1;

        if $i4 == 0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        $i5 = i1 & 4;

        if $i5 == 0 goto label07;

        z3 = 1;

     label07:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void forceWipeDeviceNoLock(boolean,java.lang.String,boolean)>(z4, r1, z3);

        goto label10;

     label08:
        $i3 = i1 & 8;

        if $i3 == 0 goto label09;

        z2 = 1;

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void forceWipeUser(int,java.lang.String,boolean)>(i0, r2, z2);

     label10:
        return;

     label11:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot wipe data. ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restriction is set for user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void lambda$wipeDataWithReason$34$DevicePolicyManagerService() throws java.lang.Exception
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle $r1, $r3;
        android.os.UserManager $r2, $r4;
        com.android.internal.widget.LockPatternUtils $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r1 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r2.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_remove_managed_profile", 0, $r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r3 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r4.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_add_user", 0, $r3);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        virtualinvoke $r5.<com.android.internal.widget.LockPatternUtils: void setDeviceOwnerInfo(java.lang.String)>(null);

        return;
    }

    void loadOwners()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r3.<com.android.server.devicepolicy.Owners: void load()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnershipSystemPropertyLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void findOwnerComponentIfNecessaryLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateDeviceOwnerLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lockNow(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i5, $i6, i7, i8;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r1;
        long l2, $l4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r3, $r5, $r14, $r15, $r17, $r21, r31, r34;
        android.app.admin.DeviceAdminInfo $r4;
        android.app.trust.TrustManager $r6;
        android.app.admin.DevicePolicyEventLogger $r7, $r8, $r9;
        java.lang.Object[] $r10;
        java.lang.String $r11;
        java.lang.Integer $r12, $r13;
        android.view.IWindowManager $r16;
        android.os.UserManager $r18;
        android.content.Context $r19;
        java.lang.Throwable $r20, $r22;
        android.os.RemoteException $r23;
        android.content.ComponentName r24, r26;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r25;
        java.lang.UnsupportedOperationException r27;
        java.lang.IllegalArgumentException r28;
        java.lang.SecurityException r29;
        com.android.internal.widget.LockPatternUtils $r30;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i6 = virtualinvoke $r19.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.LOCK_DEVICE");

        if $i6 == 0 goto label01;

        return;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r24 = null;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r25 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(android.content.ComponentName,int,boolean,java.lang.String)>(null, 3, z0, "android.permission.LOCK_DEVICE");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l2 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label03:
        if r25 != null goto label04;

        r26 = null;

        goto label05;

     label04:
        $r4 = r25.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r26 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

     label05:
        if r26 == null goto label32;

        $i5 = i0 & 1;

        if $i5 == 0 goto label32;

        r24 = r26;

     label06:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i1, "set FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY");

     label07:
        r24 = r26;

     label08:
        $z4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r26, i1);

        if $z4 == 0 goto label26;

     label09:
        if z0 != 0 goto label20;

        r24 = r26;

     label10:
        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z5 = virtualinvoke $r17.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean storageManagerIsFileBasedEncryptionEnabled()>();

        if $z5 == 0 goto label14;

     label11:
        r24 = r26;

     label12:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r18.<android.os.UserManager: void evictCredentialEncryptionKey(int)>(i1);

     label13:
        goto label32;

     label14:
        r24 = r26;

     label15:
        r27 = new java.lang.UnsupportedOperationException;

     label16:
        r24 = r26;

     label17:
        specialinvoke r27.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY only applies to FBE devices");

     label18:
        r24 = r26;

     label19:
        throw r27;

     label20:
        r24 = r26;

     label21:
        r28 = new java.lang.IllegalArgumentException;

     label22:
        r24 = r26;

     label23:
        specialinvoke r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY for the parent");

     label24:
        r24 = r26;

     label25:
        throw r28;

     label26:
        r24 = r26;

     label27:
        r29 = new java.lang.SecurityException;

     label28:
        r24 = r26;

     label29:
        specialinvoke r29.<java.lang.SecurityException: void <init>(java.lang.String)>("Only profile owner admins can set FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY");

     label30:
        r24 = r26;

     label31:
        throw r29;

     label32:
        if z0 != 0 goto label36;

        r24 = r26;

     label33:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i1);

        if $z3 != 0 goto label35;

     label34:
        goto label36;

     label35:
        i7 = i1;

        goto label37;

     label36:
        i7 = -1;

     label37:
        r24 = r26;

     label38:
        $r30 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        virtualinvoke $r30.<com.android.internal.widget.LockPatternUtils: void requireStrongAuth(int,int)>(2, i7);

     label39:
        if i7 != -1 goto label44;

        r24 = r26;

     label40:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void powerManagerGoToSleep(long,int,int)>($l4, 1, 0);

     label41:
        r24 = r26;

     label42:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r16 = virtualinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.view.IWindowManager getIWindowManager()>();

        interfaceinvoke $r16.<android.view.IWindowManager: void lockNow(android.os.Bundle)>(null);

     label43:
        goto label46;

     label44:
        r24 = r26;

     label45:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r6.<android.app.trust.TrustManager: void setDeviceLockedForUser(int,boolean)>(i7, 1);

     label46:
        r24 = r26;

     label47:
        $z2 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label54;

     label48:
        if r26 == null goto label54;

        if z0 == 0 goto label51;

        r24 = r26;

     label49:
        i8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

     label50:
        goto label52;

     label51:
        i8 = i1;

     label52:
        r24 = r26;

     label53:
        $r10 = newarray (java.lang.Object)[3];

        $r11 = virtualinvoke r26.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r10[2] = $r13;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210022, $r10);

     label54:
        r31 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label55:
        goto label62;

     label56:
        $r20 := @caughtexception;

     label57:
        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r21.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

     label58:
        throw $r20;

     label59:
        $r23 := @caughtexception;

     label60:
        r34 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label61:
        r26 = r24;

        r31 = r34;

     label62:
        virtualinvoke r31.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l2);

     label63:
        exitmonitor r1;

     label64:
        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(10);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r26);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label65:
        $r22 := @caughtexception;

     label66:
        exitmonitor r1;

     label67:
        throw $r22;

        catch java.lang.Throwable from label02 to label03 with label65;
        catch android.os.RemoteException from label04 to label05 with label59;
        catch java.lang.Throwable from label04 to label05 with label56;
        catch android.os.RemoteException from label06 to label07 with label59;
        catch java.lang.Throwable from label06 to label07 with label56;
        catch android.os.RemoteException from label08 to label09 with label59;
        catch java.lang.Throwable from label08 to label09 with label56;
        catch android.os.RemoteException from label10 to label11 with label59;
        catch java.lang.Throwable from label10 to label11 with label56;
        catch android.os.RemoteException from label12 to label13 with label59;
        catch java.lang.Throwable from label12 to label13 with label56;
        catch android.os.RemoteException from label15 to label16 with label59;
        catch java.lang.Throwable from label15 to label16 with label56;
        catch android.os.RemoteException from label17 to label18 with label59;
        catch java.lang.Throwable from label17 to label18 with label56;
        catch android.os.RemoteException from label19 to label20 with label59;
        catch java.lang.Throwable from label19 to label20 with label56;
        catch android.os.RemoteException from label21 to label22 with label59;
        catch java.lang.Throwable from label21 to label22 with label56;
        catch android.os.RemoteException from label23 to label24 with label59;
        catch java.lang.Throwable from label23 to label24 with label56;
        catch android.os.RemoteException from label25 to label26 with label59;
        catch java.lang.Throwable from label25 to label26 with label56;
        catch android.os.RemoteException from label27 to label28 with label59;
        catch java.lang.Throwable from label27 to label28 with label56;
        catch android.os.RemoteException from label29 to label30 with label59;
        catch java.lang.Throwable from label29 to label30 with label56;
        catch android.os.RemoteException from label31 to label32 with label59;
        catch java.lang.Throwable from label31 to label32 with label56;
        catch android.os.RemoteException from label33 to label34 with label59;
        catch java.lang.Throwable from label33 to label34 with label56;
        catch android.os.RemoteException from label38 to label39 with label59;
        catch java.lang.Throwable from label38 to label39 with label56;
        catch android.os.RemoteException from label40 to label41 with label59;
        catch java.lang.Throwable from label40 to label41 with label56;
        catch android.os.RemoteException from label42 to label43 with label59;
        catch java.lang.Throwable from label42 to label43 with label56;
        catch android.os.RemoteException from label45 to label46 with label59;
        catch java.lang.Throwable from label45 to label46 with label56;
        catch android.os.RemoteException from label47 to label48 with label59;
        catch java.lang.Throwable from label47 to label48 with label56;
        catch android.os.RemoteException from label49 to label50 with label59;
        catch java.lang.Throwable from label49 to label50 with label56;
        catch android.os.RemoteException from label53 to label54 with label59;
        catch java.lang.Throwable from label53 to label54 with label56;
        catch java.lang.Throwable from label54 to label55 with label65;
        catch java.lang.Throwable from label57 to label58 with label65;
        catch java.lang.Throwable from label58 to label59 with label65;
        catch java.lang.Throwable from label60 to label61 with label65;
        catch java.lang.Throwable from label62 to label63 with label65;
        catch java.lang.Throwable from label63 to label64 with label65;
        catch java.lang.Throwable from label66 to label67 with label65;
    }

    public int logoutUser(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i2;
        java.lang.Object r1;
        long l1;
        java.lang.SecurityException r2;
        java.lang.StringBuilder r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r11, $r12, $r14, $r15, $r17, $r20;
        boolean $z0, $z1, $z2;
        java.lang.String $r10;
        android.app.IActivityManager $r13;
        android.os.RemoteException $r16;
        java.lang.Throwable $r18, $r19;
        android.content.ComponentName r21;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r21 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r21, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r21, -1);

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        if $z0 == 0 goto label09;

        exitmonitor r1;

     label02:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z1 == 0 goto label03;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Managed profile cannot be logout");

        return 2;

     label03:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label04:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r13 = virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        $z2 = interfaceinvoke $r13.<android.app.IActivityManager: boolean switchUser(int)>(0);

        if $z2 != 0 goto label06;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Failed to switch to primary user");

     label05:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label06:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        $i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int stopUserUnchecked(int)>(i0);

        return $i2;

     label07:
        $r19 := @caughtexception;

        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r19;

     label08:
        $r16 := @caughtexception;

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r17.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label09:
        r2 = new java.lang.SecurityException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is neither the device owner or affiliated user\'s profile owner.");

        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw r2;

     label10:
        $r18 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.os.RemoteException from label04 to label05 with label08;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r3;
        java.lang.SecurityException $r4, $r5;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z1 != 0 goto label03;

        $z5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasMarkProfileOwnerOnOrganizationOwnedDevicePermission()>();

        if $z5 == 0 goto label02;

        goto label03;

     label02:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system can mark a profile owner of organization-owned device.");

        throw $r5;

     label03:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z2 == 0 goto label05;

        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasIncompatibleAccountsOrNonAdbNoLock(int,android.content.ComponentName)>(i0, r7);

        if $z4 != 0 goto label04;

        goto label06;

     label04:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Can only be called from ADB if the device has no accounts.");

        throw $r4;

     label05:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(0);

        if $z3 != 0 goto label12;

     label06:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label07:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void markProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked(android.content.ComponentName,int)>(r7, i0);

        exitmonitor r1;

     label08:
        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

     label12:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot mark profile owner as managing an organization-owned device after set-up");

        throw $r3;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void notifyLockTaskModeChanged(boolean, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, z4, $z5, z6;
        int i0;
        java.lang.Object r1, $r4;
        android.os.Bundle r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        android.app.admin.DeviceAdminInfo $r5, $r7, $r10;
        android.content.ComponentName $r6, $r8;
        android.app.admin.DevicePolicyEventLogger $r9, $r12, $r13, $r15;
        java.lang.String $r11, r17;
        java.lang.String[] $r14;
        java.lang.Throwable $r16;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r18;
        java.util.ArrayList $r19;
        java.util.Iterator r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        r17 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("call notifyLockTaskModeChanged");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $z2 = r18.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled>;

        if $z2 == 0 goto label05;

     label02:
        if z0 != 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabledInternal(boolean,int)>(z4, i0);

     label05:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.app.extra.LOCK_TASK_PACKAGE", r17);

        $r19 = r18.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        r20 = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r4 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r4;

        $r5 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r6 = virtualinvoke $r5.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>($r6, i0);

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>($r8, i0);

     label07:
        if z6 != 0 goto label08;

        if z1 == 0 goto label13;

     label08:
        if z0 == 0 goto label11;

     label09:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r3, "android.app.action.LOCK_TASK_ENTERING", r2, null);

     label10:
        goto label12;

     label11:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>(r3, "android.app.action.LOCK_TASK_EXITING");

     label12:
        $r9 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(51);

        $r10 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r11 = virtualinvoke $r10.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $r12 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = r17;

        $r15 = virtualinvoke $r13.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r14);

        virtualinvoke $r15.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label13:
        goto label06;

     label14:
        exitmonitor r1;

     label15:
        return;

     label16:
        $r16 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context $r2;
        int $i0;
        com.android.server.devicepolicy.Owners $r3;
        boolean $z0;
        android.content.Intent $r4, r8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$644zL8wgO32pVumtOZ1j2oplpRA $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.app.admin.SystemUpdateInfo r7;
        long l2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.app.admin.SystemUpdateInfo;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.NOTIFY_PENDING_SYSTEM_UPDATE", "Only the system update service can broadcast update information");

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i0 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Only the system update service in the system user can broadcast update information.");

        return;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z0 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean saveSystemUpdateInfo(android.app.admin.SystemUpdateInfo)>(r7);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.NOTIFY_PENDING_SYSTEM_UPDATE");

        if r7 != null goto label3;

        l2 = -1L;

        goto label4;

     label3:
        l2 = virtualinvoke r7.<android.app.admin.SystemUpdateInfo: long getReceivedTime()>();

     label4:
        r8 = virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("android.app.extra.SYSTEM_UPDATE_RECEIVED_TIME", l2);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$644zL8wgO32pVumtOZ1j2oplpRA;

        specialinvoke $r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$644zL8wgO32pVumtOZ1j2oplpRA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.Intent)>(r0, r8);

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r5);

        return;
    }

    protected void onInstalledCertificatesChanged(android.os.UserHandle, java.util.Collection)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.Collection r1;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1;
        android.util.ArraySet $r4;
        java.util.Set $r5;
        java.lang.Throwable $r6;
        android.os.UserHandle r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.os.UserHandle;

        r1 := @parameter1: java.util.Collection;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        $i0 = virtualinvoke r7.<android.os.UserHandle: int getIdentifier()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i0);

        $r4 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArraySet mAcceptedCaCertificates>;

        $z1 = virtualinvoke $r4.<android.util.ArraySet: boolean retainAll(java.util.Collection)>(r1);

        $z2 = 0 | $z1;

        $r5 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        $z3 = interfaceinvoke $r5.<java.util.Set: boolean retainAll(java.util.Collection)>(r1);

        $z4 = $z2 | $z3;

        if $z4 == 0 goto label3;

        $i1 = virtualinvoke r7.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i1);

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean packageHasActiveAdmins(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        int i0, i1, i2;
        boolean $z0, $z1;
        java.util.ArrayList $r3, $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r6;
        android.app.admin.DeviceAdminInfo $r7;
        java.lang.String $r8, r10;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label08;

     label05:
        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $r7 = $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label07;

        exitmonitor r1;

     label06:
        return 1;

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void reboot(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W9Oy5tNXrtuBYa37BvbpgLesbME $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W9Oy5tNXrtuBYa37BvbpgLesbME;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$W9Oy5tNXrtuBYa37BvbpgLesbME: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName)>(r0, r1);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        return;
    }

    public void removeActiveAdmin(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i2, $i3;
        java.lang.Object r1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$2h0zQxmPn2IIGWmGaNIAQMexgvQ r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6, r11;
        android.content.Context $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r10;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r9, i0);

     label03:
        if r10 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r9, i0);

        if $z1 != 0 goto label11;

        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r9, i0);

        if $z2 == 0 goto label08;

     label07:
        goto label11;

     label08:
        $i2 = virtualinvoke r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i3 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        if $i2 == $i3 goto label09;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEVICE_ADMINS", null);

     label09:
        r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$2h0zQxmPn2IIGWmGaNIAQMexgvQ;

        specialinvoke r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$2h0zQxmPn2IIGWmGaNIAQMexgvQ: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName,int)>(r0, r9, i0);

        virtualinvoke r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

        exitmonitor r1;

     label10:
        return;

     label11:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device/profile owner cannot be removed: component=");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r5 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r5);

        exitmonitor r1;

     label12:
        return;

     label13:
        $r8 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void removeActiveAdminLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        java.util.ArrayList $r4, $r5;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$6 $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        if r2 == null goto label1;

        $r4 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r6 = new com.android.server.devicepolicy.DevicePolicyManagerService$6;

        specialinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$6: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.ComponentName,int)>(r0, r1, i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>(r2, "android.app.action.DEVICE_ADMIN_DISABLED", $r6);

     label1:
        return;
    }

    public boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        java.util.List $r3, $r4, r12;
        boolean $z0, $z1;
        android.app.admin.DevicePolicyEventLogger $r5, $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        java.util.ArrayList r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r10 = null;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -1);

        $r3 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        if $r3 == null goto label09;

        $r4 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

     label02:
        goto label09;

     label03:
        r12 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

     label04:
        $z1 = interfaceinvoke r12.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if $z1 == 0 goto label06;

        r10 = new java.util.ArrayList;

        specialinvoke r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r12);

     label05:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label06:
        exitmonitor r2;

     label07:
        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(117);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r9);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        if r10 == null goto label08;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: void access$2700(com.android.server.devicepolicy.DevicePolicyManagerService$LocalService,int,java.util.List)>($r7, i0, r10);

        return 1;

     label08:
        return 0;

     label09:
        exitmonitor r2;

     label10:
        return 0;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean removeKeyPair(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        long l0;
        boolean z0, z1;
        android.os.UserHandle $r3;
        int $i1;
        android.content.Context $r4;
        android.security.IKeyChainService $r5;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r8;
        java.lang.Throwable $r9, $r11, $r13;
        java.lang.Thread $r10;
        android.os.RemoteException $r12;
        android.content.ComponentName r14;
        android.security.KeyChain$KeyChainConnection r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r14 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r14, r1, -1, "delegation-cert-install");

        $r3 = new android.os.UserHandle;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke $r3.<android.os.UserHandle: void <init>(int)>($i1);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r16 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r4, $r3);

     label02:
        $r5 = virtualinvoke r16.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        z0 = interfaceinvoke $r5.<android.security.IKeyChainService: boolean removeKeyPair(java.lang.String)>(r2);

     label03:
        if r14 != null goto label04;

        z1 = 1;

        goto label05;

     label04:
        z1 = 0;

     label05:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(23);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z1);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label06:
        virtualinvoke r16.<android.security.KeyChain$KeyChainConnection: void close()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label08:
        $r13 := @caughtexception;

        goto label13;

     label09:
        $r12 := @caughtexception;

     label10:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Removing keypair", $r12);

     label11:
        virtualinvoke r16.<android.security.KeyChain$KeyChainConnection: void close()>();

     label12:
        goto label18;

     label13:
        virtualinvoke r16.<android.security.KeyChain$KeyChainConnection: void close()>();

     label14:
        throw $r13;

     label15:
        $r11 := @caughtexception;

        goto label19;

     label16:
        $r9 := @caughtexception;

     label17:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Interrupted while removing keypair", $r9);

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void interrupt()>();

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r11;

        catch java.lang.InterruptedException from label01 to label02 with label16;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch android.os.RemoteException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.InterruptedException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.InterruptedException from label11 to label12 with label16;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.InterruptedException from label13 to label14 with label16;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.InterruptedException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label17 to label18 with label15;
    }

    public boolean removeOverrideApn(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature>;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null in removeOverrideApn");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeOverrideApnUnchecked(int)>(i0);

        return $z2;

     label2:
        return 0;
    }

    public boolean removeUser(android.content.ComponentName, android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r7;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$9W65ptLRJPi4uxjSjBjpuNDNtg0 $r6;
        java.lang.Object $r8;
        java.lang.Boolean $r9;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "UserHandle is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$9W65ptLRJPi4uxjSjBjpuNDNtg0;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$9W65ptLRJPi4uxjSjBjpuNDNtg0: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.UserHandle,android.content.ComponentName,int)>(r0, r2, r1, i0);

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r6);

        $r9 = (java.lang.Boolean) $r8;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    void removeUserData(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1, $r7;
        java.io.File r2, $r10;
        com.android.server.devicepolicy.DevicePolicyCacheImpl $r3;
        com.android.server.devicepolicy.Owners $r4, $r5;
        android.util.SparseArray $r6, $r15;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r9;
        java.lang.String $r12, $r14;
        java.lang.Throwable $r16;
        java.lang.StringBuilder r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if i0 != 0 goto label3;

     label1:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Tried to remove device policy file for user 0! Ignoring.");

        exitmonitor r1;

     label2:
        return;

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordQualityCacheForUserGroup(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache>;

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyCacheImpl: void onUserRemoved(int)>(i0);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r4.<com.android.server.devicepolicy.Owners: void removeProfileOwner(int)>(i0);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r5.<com.android.server.devicepolicy.Owners: void writeProfileOwner(int)>(i0);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r8 = (com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData) $r7;

        if $r8 == null goto label4;

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        virtualinvoke $r15.<android.util.SparseArray: void remove(int)>(i0);

     label4:
        r2 = new java.io.File;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r10 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.io.File environmentGetUserSystemDirectory(int)>(i0);

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "device_policies.xml");

        virtualinvoke r2.<java.io.File: boolean delete()>();

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed device policy file ");

        $r12 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r14);

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r16 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void reportFailedBiometricAttempt(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Context $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogIsLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[1] = $r5;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210007, $r3);

     label1:
        return;
    }

    public void reportFailedPasswordAttempt(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        boolean $z1, $z2, z3, $z4;
        android.content.Context $r2, $r17;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4, $r22, $r36;
        int $i1, $i2, $i5, i7, i8, i9;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;
        java.lang.StringBuilder $r8, $r24;
        android.app.admin.DeviceAdminInfo $r10, $r18;
        android.content.ComponentName $r11, $r19;
        java.lang.String $r12, $r16, $r28, r33;
        java.lang.Throwable $r20, $r21, $r23, $r29, r37;
        java.lang.Object r30;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r31;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i7 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i7);

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i7);

        if $z1 != 0 goto label01;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i7, "report failed password attempt if separate profile challenge is not in place");

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        r30 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r30;

     label03:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i7);

        $i1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        $i2 = $i1 + 1;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = $i2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i7);

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 == 0 goto label13;

        r31 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int,boolean)>(i7, 0);

     label04:
        if r31 == null goto label07;

     label05:
        i8 = r31.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

     label06:
        goto label08;

     label07:
        i8 = 0;

     label08:
        z3 = 0;

        if i8 <= 0 goto label11;

        z3 = 0;

     label09:
        $i5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i5 < i8 goto label11;

     label10:
        z3 = 1;

     label11:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandForLockscreenPoliciesLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_FAILED", 1, i7);

     label12:
        goto label14;

     label13:
        z3 = 0;

        r31 = null;

     label14:
        exitmonitor r30;

     label15:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        if z3 == 0 goto label19;

        if r31 == null goto label19;

        i9 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserIdToWipeForFailedPasswords(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r31);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max failed password attempts policy reached for admin: ");

        $r10 = r31.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r11 = virtualinvoke $r10.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r12 = virtualinvoke $r11.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Calling wipeData for user ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r16 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r16);

     label16:
        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r33 = virtualinvoke $r17.<android.content.Context: java.lang.String getString(int)>(17041498);

        $r18 = r31.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r19 = virtualinvoke $r18.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDataNoLock(android.content.ComponentName,int,java.lang.String,java.lang.String,int)>($r19, 0, "reportFailedPasswordAttempt()", r33, i9);

     label17:
        goto label19;

     label18:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to wipe user ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after max failed password attempts reached.");

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r28, $r23);

     label19:
        $r36 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z4 = virtualinvoke $r36.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogIsLoggingEnabled()>();

        if $z4 == 0 goto label20;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[1] = $r7;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210007, $r5);

     label20:
        return;

     label21:
        $r29 := @caughtexception;

        r37 = $r29;

        goto label23;

     label22:
        $r20 := @caughtexception;

        r37 = $r20;

     label23:
        exitmonitor r30;

     label24:
        throw r37;

     label25:
        $r21 := @caughtexception;

        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r21;

        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.SecurityException from label16 to label17 with label18;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label25;
    }

    public void reportKeyguardDismissed(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Context $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        boolean $z0;
        java.lang.Object[] $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogIsLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210006, $r3);

     label1:
        return;
    }

    public void reportKeyguardSecured(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Context $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        boolean $z0;
        java.lang.Object[] $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogIsLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210008, $r3);

     label1:
        return;
    }

    public void reportPasswordChanged(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        com.android.internal.widget.LockPatternUtils $r2;
        android.content.Context $r3;
        java.lang.Throwable $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label8;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z1 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z1 != 0 goto label1;

        goto label8;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceSystemCaller(java.lang.String)>("report password change");

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i0);

        if $z2 != 0 goto label2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i0, "set the active password");

     label2:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label3:
        r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = 0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i0, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordExpirationsLocked(int)>(i0);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,int,boolean)>($r3, i0, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandForLockscreenPoliciesLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_CHANGED", 0, i0);

        exitmonitor r1;

     label4:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeCaApprovalsIfNeeded(int)>(i0);

        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void reportSuccessfulBiometricAttempt(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Context $r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogIsLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[1] = $r5;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210007, $r3);

     label1:
        return;
    }

    public void reportSuccessfulPasswordAttempt(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i3;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Tf0q34mpCvG_X0h8xOQyHLd1Puc r3;
        android.content.Context $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;
        java.lang.Throwable $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r9, $r10;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i0);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $i1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i1 != 0 goto label2;

        $i3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i3 < 0 goto label3;

     label2:
        r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Tf0q34mpCvG_X0h8xOQyHLd1Puc;

        specialinvoke r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Tf0q34mpCvG_X0h8xOQyHLd1Puc: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData,int)>(r0, r2, i0);

        virtualinvoke r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r3);

     label3:
        exitmonitor r1;

     label4:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z0 = virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogIsLoggingEnabled()>();

        if $z0 == 0 goto label5;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[1] = $r7;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210007, $r5);

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean requestBugreport(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r9, $r10;
        java.lang.String $r5;
        long $l1, l4, l5;
        byte $b2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6, $r7, $r11, $r20, $r22, $r24;
        android.app.IActivityManager $r8;
        android.app.NotificationManager $r12;
        android.content.Context $r13;
        android.app.Notification $r14;
        android.os.UserHandle $r15;
        java.lang.Runnable $r16;
        android.os.Handler $r17;
        android.app.admin.DevicePolicyEventLogger $r18, $r19;
        android.os.RemoteException $r21;
        java.lang.Throwable $r23, $r25;
        android.content.ComponentName r26;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r26 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r26, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureDeviceOwnerAndAllUsersAffiliated(android.content.ComponentName)>(r26);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        $z1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label16;

        $r5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerRemoteBugreportUri()>();

        if $r5 == null goto label02;

        goto label16;

     label02:
        l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label03:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $l1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastBugReportRequestTime>;

        $b2 = l4 cmp $l1;

        if $b2 <= 0 goto label04;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastBugReportRequestTime> = l4;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

     label04:
        exitmonitor r1;

     label05:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l5 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label06:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        interfaceinvoke $r8.<android.app.IActivityManager: void requestRemoteBugReport()>();

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportServiceIsActive>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.concurrent.atomic.AtomicBoolean mRemoteBugreportSharingAccepted>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void registerRemoteBugreportReceivers()>();

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r12 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.NotificationManager getNotificationManager()>();

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r14 = staticinvoke <com.android.server.devicepolicy.RemoteBugreportUtils: android.app.Notification buildNotification(android.content.Context,int)>($r13, 1);

        $r15 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r12.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>("DevicePolicyManager", 678432343, $r14, $r15);

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Runnable mRemoteBugreportTimeoutRunnable>;

        virtualinvoke $r17.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r16, 600000L);

        $r18 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(53);

        $r19 = virtualinvoke $r18.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r26);

        virtualinvoke $r19.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label07:
        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l5);

        return 1;

     label08:
        $r23 := @caughtexception;

        goto label12;

     label09:
        $r21 := @caughtexception;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to make remote calls to start bugreportremote service", $r21);

     label11:
        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l5);

        return 0;

     label12:
        $r24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r24.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l5);

        throw $r23;

     label13:
        $r25 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r25;

     label16:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DevicePolicyManager", "Remote bugreport wasn\'t started because there\'s already one running.");

        return 0;

        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public boolean resetPassword(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, i2, $i3, $i4, $i6;
        com.android.internal.widget.LockPatternUtils $r1;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r3;
        android.content.Context $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r5, r14;
        android.app.admin.DeviceAdminInfo $r6, $r8;
        java.lang.String $r7, $r9, r11, r12;
        java.lang.Throwable $r10;
        java.lang.Object r13;
        java.lang.SecurityException r15, r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot reset password when the device has no lock screen");

        return 0;

     label01:
        r12 = r11;

        if r11 != null goto label02;

        r12 = "";

     label02:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i2 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.RESET_PASSWORD");

        if $i3 != 0 goto label03;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPasswordPrivileged(java.lang.String,int,int)>(r12, i0, i1);

        return $z1;

     label03:
        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r13;

     label04:
        r14 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName,int,int)>(null, -1, i1);

     label05:
        if r14 == null goto label09;

     label06:
        $r8 = r14.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r9 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $i6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>($r9, i2);

        if $i6 >= 26 goto label08;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "DPC can no longer call resetPassword()");

        exitmonitor r13;

     label07:
        return 0;

     label08:
        r15 = new java.lang.SecurityException;

        specialinvoke r15.<java.lang.SecurityException: void <init>(java.lang.String)>("Device admin can no longer call resetPassword()");

        throw r15;

     label09:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(null, 2, 0);

        $r6 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r7 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $i4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>($r7, i2);

        if $i4 > 23 goto label11;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Device admin can no longer call resetPassword()");

        exitmonitor r13;

     label10:
        return 0;

     label11:
        r16 = new java.lang.SecurityException;

        specialinvoke r16.<java.lang.SecurityException: void <init>(java.lang.String)>("Device admin can no longer call resetPassword()");

        throw r16;

     label12:
        $r10 := @caughtexception;

     label13:
        exitmonitor r13;

     label14:
        throw $r10;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean resetPasswordWithToken(android.content.ComponentName, java.lang.String, byte[], int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r12;
        byte[] r2;
        int i0, i1, $i6;
        java.lang.Object r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        boolean z0, $z1, $z2;
        com.android.internal.widget.LockPatternUtils $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r9;
        long $l2, $l5;
        byte $b3;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label13;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r5.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label13;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label02:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r11, -1);

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $l2 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label07;

     label03:
        if r1 == null goto label04;

        r12 = r1;

        goto label05;

     label04:
        r12 = "";

     label05:
        $l5 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mPasswordTokenHandle>;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i6 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPasswordInternal(java.lang.String,long,byte[],int,int)>(r12, $l5, r2, i0, $i6);

        exitmonitor r3;

     label06:
        return z0;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "No saved token handle");

     label08:
        exitmonitor r3;

     label09:
        return 0;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r3;

     label12:
        throw $r10;

     label13:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.util.List retrieveNetworkLogs(android.content.ComponentName, java.lang.String, long)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        long l0, l1, $l2;
        java.lang.Object r2;
        boolean $z0, $z1, z2;
        com.android.server.devicepolicy.NetworkLogger $r3, $r7;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        byte $b3;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r10;
        java.util.List r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r9, r1, -2, "delegation-network-logging");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureAllUsersAffiliated()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        if $r3 == null goto label09;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabledInternalLocked()>();

        if $z1 != 0 goto label04;

     label03:
        goto label09;

     label04:
        if r9 != null goto label05;

        z2 = 1;

        goto label06;

     label05:
        z2 = 0;

     label06:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(120);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z2);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $l2 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastNetworkLogsRetrievalTime>;

        $b3 = l1 cmp $l2;

        if $b3 <= 0 goto label07;

        r10.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastNetworkLogsRetrievalTime> = l1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

     label07:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.NetworkLogger mNetworkLogger>;

        r11 = virtualinvoke $r7.<com.android.server.devicepolicy.NetworkLogger: java.util.List retrieveLogs(long)>(l0);

        exitmonitor r2;

     label08:
        return r11;

     label09:
        exitmonitor r2;

     label10:
        return null;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        android.app.admin.DevicePolicyEventLogger $r2, $r3;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        java.util.ArrayList $r7;
        android.content.pm.ParceledListSlice $r8, $r10;
        java.lang.Throwable $r9;
        java.util.List $r11;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r12);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r12);

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>();

        if $z1 != 0 goto label02;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureAllUsersAffiliated()>();

     label02:
        $r2 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(17);

        $r3 = virtualinvoke $r2.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r12);

        virtualinvoke $r3.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r5.<android.content.res.Resources: boolean getBoolean(int)>(17891546);

        if $z2 == 0 goto label10;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z3 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogGetLoggingEnabledProperty()>();

        if $z3 != 0 goto label03;

        goto label10;

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void recordSecurityLogRetrievalTime()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

     label04:
        staticinvoke <android.app.admin.SecurityLog: void readPreviousEvents(java.util.Collection)>($r7);

        i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getSecurityLoggingEnabledUser()>();

     label05:
        if i0 == -1 goto label07;

     label06:
        staticinvoke <android.app.admin.SecurityLog: void redactEvents(java.util.ArrayList,int)>($r7, i0);

     label07:
        $r8 = new android.content.pm.ParceledListSlice;

        specialinvoke $r8.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r7);

     label08:
        return $r8;

     label09:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Fail to read previous events", $r9);

        $r10 = new android.content.pm.ParceledListSlice;

        $r11 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r10.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r11);

        return $r10;

     label10:
        return null;

        catch java.io.IOException from label04 to label05 with label09;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.util.List r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        com.android.server.devicepolicy.SecurityLogMonitor $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5;
        android.content.pm.ParceledListSlice $r6, r8;
        android.content.ComponentName r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r7);

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>();

        if $z1 != 0 goto label2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureAllUsersAffiliated()>();

     label2:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z2 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogGetLoggingEnabledProperty()>();

        if $z2 != 0 goto label3;

        return null;

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void recordSecurityLogRetrievalTime()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        r1 = virtualinvoke $r3.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.List retrieveLogs()>();

        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(16);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r7);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        r8 = null;

        if r1 == null goto label4;

        $r6 = new android.content.pm.ParceledListSlice;

        specialinvoke $r6.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r1);

        r8 = $r6;

     label4:
        return r8;
    }

    void saveTransferOwnershipBundleLocked(android.os.PersistableBundle, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.internal.util.FastXmlSerializer r3;
        java.io.File $r4, $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        android.util.AtomicFile $r7;
        java.nio.charset.Charset $r8;
        java.lang.String $r9, $r17;
        java.lang.Boolean $r10;
        java.lang.Throwable $r13;
        java.lang.StringBuilder $r14;
        android.os.PersistableBundle r18;
        java.io.FileOutputStream r19, r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r18 := @parameter0: android.os.PersistableBundle;

        i0 := @parameter1: int;

        $r4 = new java.io.File;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.io.File environmentGetUserSystemDirectory(int)>(i0);

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "transfer-ownership-parameters.xml");

        $r7 = new android.util.AtomicFile;

        specialinvoke $r7.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

        r19 = null;

     label01:
        r20 = virtualinvoke $r7.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r19 = r20;

     label03:
        r3 = new com.android.internal.util.FastXmlSerializer;

     label04:
        r19 = r20;

     label05:
        specialinvoke r3.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label06:
        r19 = r20;

     label07:
        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r20, $r9);

     label08:
        r19 = r20;

     label09:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r10);

     label10:
        r19 = r20;

     label11:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "transfer-ownership-bundle");

     label12:
        r19 = r20;

     label13:
        virtualinvoke r18.<android.os.PersistableBundle: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r3);

     label14:
        r19 = r20;

     label15:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "transfer-ownership-bundle");

     label16:
        r19 = r20;

     label17:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label18:
        r19 = r20;

     label19:
        virtualinvoke $r7.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r20);

     label20:
        goto label22;

     label21:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught exception while trying to save the owner transfer parameters to file ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", $r17, $r13);

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        virtualinvoke $r7.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r19);

     label22:
        return;

        catch java.io.IOException from label01 to label02 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label21;
        catch java.io.IOException from label05 to label06 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label21;
        catch java.io.IOException from label07 to label08 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label21;
        catch java.io.IOException from label09 to label10 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label21;
        catch java.io.IOException from label11 to label12 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label21;
        catch java.io.IOException from label13 to label14 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label21;
        catch java.io.IOException from label15 to label16 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label21;
        catch java.io.IOException from label17 to label18 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label21;
        catch java.io.IOException from label19 to label20 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label21;
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>(r1, r2, null);

        return;
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.lang.String, android.content.BroadcastReceiver)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;
        android.content.BroadcastReceiver r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.BroadcastReceiver;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r1, r2, null, r3);

        return;
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.lang.String, android.os.Bundle, android.content.BroadcastReceiver)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.content.BroadcastReceiver r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.content.BroadcastReceiver;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver,boolean)>(r1, r2, r3, r4, 0);

        return;
    }

    void sendAdminCommandLocked(java.lang.String, int, int, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        android.os.Bundle r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7;
        android.app.admin.DeviceAdminInfo $r8;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        r2 := @parameter3: android.os.Bundle;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i2);

        $r5 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r7;

        $r8 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r4, r1, r2, null);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    boolean sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.lang.String, android.os.Bundle, android.content.BroadcastReceiver, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        android.os.Bundle r2, $r16, $r19;
        android.content.BroadcastReceiver r3;
        boolean z0, $z1, $z2, $z3;
        android.content.Intent $r5;
        android.app.admin.DeviceAdminInfo $r6;
        android.content.ComponentName $r7;
        android.content.Context $r9, $r14, $r17;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r10;
        android.content.pm.PackageManager $r11;
        android.os.UserHandle $r12, $r15, $r18;
        java.util.List $r13;
        android.os.Handler $r20;
        long $l0;
        java.lang.String r25;
        android.app.BroadcastOptions r26;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r25 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: android.content.BroadcastReceiver;

        z0 := @parameter4: boolean;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>(r25);

        $r6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r7 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r7);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $z1 = staticinvoke <android.os.UserManager: boolean isDeviceInDemoMode(android.content.Context)>($r9);

        if $z1 == 0 goto label1;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label1:
        $z2 = virtualinvoke r25.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.ACTION_PASSWORD_EXPIRING");

        if $z2 == 0 goto label2;

        $l0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("expiration", $l0);

     label2:
        if z0 == 0 goto label3;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label3:
        if r2 == null goto label4;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r2);

     label4:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r11 = virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManager getPackageManager()>();

        $r12 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $r13 = virtualinvoke $r11.<android.content.pm.PackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)>($r5, 268435456, $r12);

        $z3 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label5;

        return 0;

     label5:
        r26 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

        virtualinvoke r26.<android.app.BroadcastOptions: void setBackgroundActivityStartsAllowed(boolean)>(1);

        if r3 == null goto label6;

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $r19 = virtualinvoke r26.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r17.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r5, $r18, null, -1, $r19, r3, $r20, -1, null, null);

        goto label7;

     label6:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $r16 = virtualinvoke r26.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        virtualinvoke $r14.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)>($r5, $r15, null, $r16);

     label7:
        return 1;
    }

    void sendDeviceOwnerCommand(java.lang.String, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.Bundle r1;
        int i0;
        com.android.server.devicepolicy.Owners $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4, $r5;
        java.lang.String r6;
        java.lang.Object r7, r10;
        android.content.ComponentName r8, r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.Bundle;

        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r7;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        exitmonitor r7;

     label02:
        r8 = null;

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.NETWORK_LOGS_AVAILABLE");

        if $z0 == 0 goto label03;

        r8 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName resolveDelegateReceiver(java.lang.String,java.lang.String,int)>("delegation-network-logging", r6, i0);

     label03:
        r9 = r8;

        if r8 != null goto label09;

        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r10;

     label04:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r9 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: android.content.ComponentName getDeviceOwnerComponent()>();

        exitmonitor r10;

     label05:
        goto label09;

     label06:
        $r4 := @caughtexception;

     label07:
        exitmonitor r10;

     label08:
        throw $r4;

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendActiveAdminCommand(java.lang.String,android.os.Bundle,int,android.content.ComponentName)>(r6, r1, i0, r9);

        return;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r7;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        boolean z0, z1, $z2;
        java.lang.Object r2;
        java.util.Set $r4, $r5;
        int $i0;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        byte b1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "ComponentName is null");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

        if z1 == 0 goto label02;

        b1 = -3;

        goto label03;

     label02:
        b1 = -1;

     label03:
        r8 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r7, b1, z1);

     label04:
        if z0 == 0 goto label07;

     label05:
        $r5 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label06:
        goto label08;

     label07:
        $r4 = r8.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label08:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r2;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int,android.os.Bundle)>(r1, z0, i0, null);

        return;
    }

    public void setAffiliationIds(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1, $r9;
        android.util.ArraySet $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5, $r6;
        java.lang.Object $r7, r15;
        java.lang.String $r8;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;
        java.util.List r12;
        java.util.Iterator r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        r12 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        if r12 == null goto label13;

        r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r7 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8);

        if $z3 != 0 goto label03;

        goto label02;

     label03:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ids must not contain empty string");

        throw $r9;

     label04:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>(java.util.Collection)>(r12);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r15;

     label05:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r11, -1);

        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds> = $r2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label06:
        if i0 == 0 goto label08;

     label07:
        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r11, i0);

        if $z2 == 0 goto label08;

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mAffiliationIds> = $r2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

     label08:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybePauseDeviceWideLoggingLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeResumeDeviceWideLoggingLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeClearLockTaskPolicyLocked()>();

        exitmonitor r15;

     label09:
        return;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r15;

     label12:
        throw $r10;

     label13:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ids must not be null");

        throw $r1;

        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean, java.util.List) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r5;
        boolean z0, $z1, $z2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$qaARLZVf9sBQMzowdcaHiWY_0ZU $r3;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        java.util.List r8;
        java.lang.Object r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r8 := @parameter3: java.util.List;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r7);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$qaARLZVf9sBQMzowdcaHiWY_0ZU;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$qaARLZVf9sBQMzowdcaHiWY_0ZU: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int,boolean,java.util.List,android.content.ComponentName)>(r0, r1, i0, z0, r8, r7);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r9;

     label1:
        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r7, -1);

        $r5 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String mAlwaysOnVpnPackage>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, $r5);

        if $z1 == 0 goto label2;

        $z2 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mAlwaysOnVpnLockdown>;

        if z0 == $z2 goto label3;

     label2:
        r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String mAlwaysOnVpnPackage> = r1;

        r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mAlwaysOnVpnLockdown> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label3:
        exitmonitor r9;

     label4:
        return 1;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r9;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean setApplicationHidden(android.content.ComponentName, java.lang.String, java.lang.String, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r11, r18, r19;
        boolean z0, z1, z2, z3;
        java.lang.Object $r2, r12;
        java.lang.Boolean $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r7, r17;
        java.lang.String[] $r6;
        int $i0, i1;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r13, r15;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$b6dFLQOqF0sBfbo4jm2WLvHzgLU r14;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3igxJWr_9JHbbBQIhu3oSje6LfI r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r11 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        if z1 == 0 goto label01;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>($i0);

        goto label02;

     label01:
        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label02:
        r12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r12;

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r10, r11, -1, "delegation-package-access");

     label04:
        if z1 == 0 goto label06;

     label05:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r10, -3, z1);

        r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r14 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$b6dFLQOqF0sBfbo4jm2WLvHzgLU;

        specialinvoke r14.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$b6dFLQOqF0sBfbo4jm2WLvHzgLU: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int)>(r0, r1, i1);

        virtualinvoke r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r14);

     label06:
        r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r16 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3igxJWr_9JHbbBQIhu3oSje6LfI;

        specialinvoke r16.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3igxJWr_9JHbbBQIhu3oSje6LfI: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,boolean,int)>(r0, r1, z0, i1);

        $r2 = virtualinvoke r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r16);

        $r3 = (java.lang.Boolean) $r2;

        z2 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r12;

     label07:
        if r10 != null goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(63);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r11);

        r17 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z3);

        if z0 == 0 goto label10;

        r18 = "hidden";

        goto label11;

     label10:
        r18 = "not_hidden";

     label11:
        if z1 == 0 goto label12;

        r19 = "calledFromParent";

        goto label13;

     label12:
        r19 = "notCalledFromParent";

     label13:
        $r6 = newarray (java.lang.String)[3];

        $r6[0] = r1;

        $r6[1] = r18;

        $r6[2] = r19;

        $r7 = virtualinvoke r17.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r6);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return z2;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r12;

     label16:
        throw $r9;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void setApplicationRestrictions(android.content.ComponentName, java.lang.String, java.lang.String, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        android.os.Bundle r4;
        android.os.UserHandle r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6, $r8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$BS2lv_1WKNnSWJl4GwhA4oD3TTc $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r1, r2, -1, "delegation-app-restrictions");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r5 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$BS2lv_1WKNnSWJl4GwhA4oD3TTc;

        specialinvoke $r7.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$BS2lv_1WKNnSWJl4GwhA4oD3TTc: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,android.os.Bundle,android.os.UserHandle,android.content.ComponentName,java.lang.String)>(r0, r3, r4, r5, r1, r2);

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r7);

        return;
    }

    public boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        java.lang.Throwable $r2;
        android.content.ComponentName r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopePreO(android.content.ComponentName,java.lang.String,java.lang.String)>(r3, r1, "delegation-app-restrictions");

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void setAutoTimeEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$YzzvHB4UD9JrQUosVFftX4PrsaM $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        android.app.admin.DevicePolicyEventLogger $r5, $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOnUser0OrProfileOwnerOrganizationOwned()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$YzzvHB4UD9JrQUosVFftX4PrsaM;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$YzzvHB4UD9JrQUosVFftX4PrsaM: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,boolean)>(r0, z0);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(127);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void setAutoTimeRequired(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, z4;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$b3NTO2da8giLE0FbLlcsmHCo9uc $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r8;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;
        java.lang.SecurityException r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "ComponentName is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        z4 = 0;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z2 != 0 goto label09;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -1);

     label03:
        $z3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        if $z3 == z0 goto label05;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label04:
        z4 = 1;

     label05:
        exitmonitor r1;

     label06:
        if z4 == 0 goto label07;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

     label07:
        if z0 == 0 goto label08;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$b3NTO2da8giLE0FbLlcsmHCo9uc;

        specialinvoke $r7.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$b3NTO2da8giLE0FbLlcsmHCo9uc: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r7);

     label08:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(36);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r10);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label09:
        r11 = new java.lang.SecurityException;

        specialinvoke r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Managed profile cannot set auto time required");

        throw r11;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setAutoTimeZoneEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$YebNDt72K_EBAICmMtNJmfL7aIY $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        android.app.admin.DevicePolicyEventLogger $r5, $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOnUser0OrProfileOwnerOrganizationOwned()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$YebNDt72K_EBAICmMtNJmfL7aIY;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$YebNDt72K_EBAICmMtNJmfL7aIY: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,boolean)>(r0, z0);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(128);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void setBackupServiceEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void toggleBackupServiceActive(int,boolean)>($i0, z0);

        return;
    }

    public void setBluetoothContactSharingDisabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        int $i0;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r8, -1);

        $z2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing>;

        if $z2 == z0 goto label3;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableBluetoothContactSharing> = z0;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

     label3:
        exitmonitor r1;

     label4:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(47);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setCameraDisabled(android.content.ComponentName, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, $z3, $z4;
        int i0, i2, i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r7, r16;
        java.lang.String[] $r6;
        java.lang.Object[] $r8;
        java.lang.String $r9, r17;
        java.lang.Integer $r10, $r11, $r12;
        java.lang.Throwable $r13;
        android.content.ComponentName r14;
        java.lang.Object r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r14 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r15;

     label02:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r14, 8, z1);

     label03:
        if z1 == 0 goto label05;

     label04:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r1);

     label05:
        $z3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z3 == z0 goto label06;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label06:
        exitmonitor r15;

     label07:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void pushUserRestrictions(int)>(i0);

        if z1 == 0 goto label08;

        i2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        goto label09;

     label08:
        i2 = i0;

     label09:
        $z4 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label10;

        $r8 = newarray (java.lang.Object)[4];

        $r9 = virtualinvoke r14.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r8[2] = $r11;

        i3 = (int) z0;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r8[3] = $r12;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210034, $r8);

     label10:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(30);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r14);

        r16 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        if z1 == 0 goto label11;

        r17 = "calledFromParent";

        goto label12;

     label11:
        r17 = "notCalledFromParent";

     label12:
        $r6 = newarray (java.lang.String)[1];

        $r6[0] = r17;

        $r7 = virtualinvoke r16.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r6);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label13:
        $r13 := @caughtexception;

     label14:
        exitmonitor r15;

     label15:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setCertInstallerPackage(android.content.ComponentName, java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.app.admin.DevicePolicyEventLogger $r3, $r4, $r6;
        java.lang.String[] $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopePreO(android.content.ComponentName,java.lang.String,java.lang.String)>(r1, r2, "delegation-cert-install");

        $r3 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(25);

        $r4 = virtualinvoke $r3.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r2;

        $r6 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r5);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void setCommonCriteriaModeEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r8, -3);

        $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mCommonCriteriaMode> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r1;

     label2:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(131);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setConfiguredNetworksLockdownState(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fJNAzCI3mwnUqZcVwOV9M87qqL4 $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        android.app.admin.DevicePolicyEventLogger $r5, $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fJNAzCI3mwnUqZcVwOV9M87qqL4;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fJNAzCI3mwnUqZcVwOV9M87qqL4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,boolean)>(r0, z0);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(132);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void setCrossProfileCalendarPackages(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        int $i0, $i1;
        android.app.admin.DevicePolicyEventLogger $r5, $r8, r12;
        java.lang.String[] $r6, r13;
        java.lang.Object[] $r7;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;
        java.lang.Object r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "ComponentName is null");

        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r11;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -1);

        $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfileCalendarPackages> = r1;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r11;

     label3:
        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(70);

        r12 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r10);

        if r1 != null goto label4;

        r13 = null;

        goto label5;

     label4:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i1];

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r13 = (java.lang.String[]) $r7;

     label5:
        $r8 = virtualinvoke r12.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>(r13);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r11;

     label8:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7;
        int $i0;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -1);

        $z2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

        if $z2 == z0 goto label3;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId> = z0;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

     label3:
        exitmonitor r1;

     label4:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(46);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r9);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setCrossProfileContactsSearchDisabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7;
        int $i0;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -1);

        $z2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch>;

        if $z2 == z0 goto label3;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableContactsSearch> = z0;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

     label3:
        exitmonitor r1;

     label4:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(45);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r9);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setCrossProfilePackages(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1, r4;
        java.lang.Object r2, $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r11;
        int $i0;
        android.content.Context $r8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$SJV7Bqa7knvyY_n1JOPLFRNOVdI $r10;
        java.lang.Throwable $r12;
        android.content.ComponentName r13;
        android.content.pm.CrossProfileApps r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r13 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "ComponentName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Package names is null");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r13, -1);

        r4 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages>;

        $z1 = interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label4;

        exitmonitor r2;

     label3:
        return;

     label4:
        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List mCrossProfilePackages> = r1;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r2;

     label5:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void logSetCrossProfilePackages(android.content.ComponentName,java.util.List)>(r13, r1);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/content/pm/CrossProfileApps;");

        r14 = (android.content.pm.CrossProfileApps) $r9;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r10 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$SJV7Bqa7knvyY_n1JOPLFRNOVdI;

        specialinvoke $r10.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$SJV7Bqa7knvyY_n1JOPLFRNOVdI: void <init>(android.content.pm.CrossProfileApps,java.util.List,java.util.List)>(r14, r4, r1);

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r10);

        return;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r12;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setDefaultSmsApplication(android.content.ComponentName, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Stlw_ruesGd30Nhy63yNmxN91SA $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r6;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MDhujAGk4eG0OntgRld3_J2QTjA $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        if z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r1, -3, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>($r6);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MDhujAGk4eG0OntgRld3_J2QTjA;

        specialinvoke $r7.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$MDhujAGk4eG0OntgRld3_J2QTjA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String)>(r0, r2);

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r7);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Stlw_ruesGd30Nhy63yNmxN91SA;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Stlw_ruesGd30Nhy63yNmxN91SA: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String)>(r0, r2);

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r4);

        return;
    }

    public void setDelegatedScopes(android.content.ComponentName, java.lang.String, java.util.List) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r14, $r29;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r6, r39, r41, r43;
        android.util.ArraySet $r7;
        java.lang.String[] $r8;
        java.util.List $r9, $r11, $r25, r33, r42;
        java.lang.IllegalArgumentException $r10, r36;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r12;
        android.util.ArrayMap $r15, $r17, $r18, $r20, $r22, r40;
        java.lang.Object $r19, $r21, r35;
        java.lang.Throwable $r31;
        android.content.ComponentName r32;
        java.lang.StringBuilder r37;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r38;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r32 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r33 := @parameter2: java.util.List;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r32, "ComponentName is null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "Delegate package is null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.util.Collection checkCollectionElementsNotNull(java.util.Collection,java.lang.String)>(r33, "Scopes");

        $r6 = new java.util.ArrayList;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>(java.util.Collection)>(r33);

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        $r8 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] DELEGATIONS>;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean retainAll(java.util.Collection)>($r9);

        if $z1 != 0 goto label25;

        $r11 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List DEVICE_OWNER_DELEGATIONS>;

        z0 = staticinvoke <java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>($r6, $r11);

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r35 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r35;

        $z2 = z0 ^ 1;

        if $z2 == 0 goto label03;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r32, -2);

     label02:
        goto label04;

     label03:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r32, -1);

     label04:
        $r14 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>($r14, i0);

        $z3 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: boolean shouldCheckIfDelegatePackageIsInstalled(java.lang.String,int,java.util.List)>(r1, $i1, $r6);

        if $z3 == 0 goto label07;

        $z10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageInstalledForUser(java.lang.String,int)>(r1, i0);

        if $z10 == 0 goto label06;

     label05:
        goto label07;

     label06:
        r36 = new java.lang.IllegalArgumentException;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not installed on the current user");

        $r29 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw r36;

     label07:
        r38 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

     label08:
        r39 = null;

     label09:
        $z4 = virtualinvoke $r6.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 != 0 goto label12;

        r40 = r38.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        r41 = new java.util.ArrayList;

        specialinvoke r41.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        virtualinvoke r40.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41);

        r39 = new java.util.ArrayList;

        specialinvoke r39.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

     label10:
        $r25 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List EXCLUSIVE_DELEGATIONS>;

        interfaceinvoke r39.<java.util.List: boolean retainAll(java.util.Collection)>($r25);

     label11:
        goto label13;

     label12:
        $r15 = r38.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

     label13:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDelegationChangedBroadcast(java.lang.String,java.util.ArrayList,int)>(r1, $r6, i0);

     label14:
        if r39 == null goto label20;

     label15:
        $z5 = interfaceinvoke r39.<java.util.List: boolean isEmpty()>();

        if $z5 != 0 goto label20;

        $r17 = r38.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $i2 = virtualinvoke $r17.<android.util.ArrayMap: int size()>();

        i3 = $i2 - 1;

     label16:
        if i3 < 0 goto label20;

     label17:
        $r18 = r38.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        r2 = (java.lang.String) $r19;

        $r20 = r38.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        $r21 = virtualinvoke $r20.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        r42 = (java.util.List) $r21;

        $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 != 0 goto label19;

        $z7 = interfaceinvoke r42.<java.util.List: boolean removeAll(java.util.Collection)>(r39);

        if $z7 == 0 goto label19;

        $z8 = interfaceinvoke r42.<java.util.List: boolean isEmpty()>();

        if $z8 == 0 goto label18;

        $r22 = r38.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mDelegationMap>;

        virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i3);

     label18:
        r43 = new java.util.ArrayList;

        specialinvoke r43.<java.util.ArrayList: void <init>(java.util.Collection)>(r42);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDelegationChangedBroadcast(java.lang.String,java.util.ArrayList,int)>(r2, r43, i0);

     label19:
        i3 = i3 + -1;

        goto label16;

     label20:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r35;

     label21:
        return;

     label22:
        $r31 := @caughtexception;

     label23:
        exitmonitor r35;

     label24:
        throw $r31;

     label25:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected delegation scopes");

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public boolean setDeviceOwner(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Object r1;
        java.lang.StringBuilder $r2, r34, r36;
        java.lang.IllegalArgumentException $r6, r35;
        java.lang.String $r7, $r8, $r12, $r18, $r23, r31;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r13;
        java.util.ArrayList $r14;
        com.android.server.devicepolicy.Owners $r15, $r16;
        com.android.server.devicepolicy.DeviceAdminServiceController $r17;
        android.content.Context $r24;
        android.app.admin.DevicePolicyEventLogger $r25, $r26, $r28;
        java.lang.String[] $r27;
        java.lang.Throwable $r29;
        android.content.ComponentName r30;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r32;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$sUVpi_BVE2_hZ5timBv59wD_svs r33;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r30 := @parameter0: android.content.ComponentName;

        r31 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        if r30 == null goto label9;

        $r8 = virtualinvoke r30.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageInstalledForUser(java.lang.String,int)>($r8, i0);

        if $z2 == 0 goto label9;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasIncompatibleAccountsOrNonAdbNoLock(int,android.content.ComponentName)>(i0, r30);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanSetDeviceOwnerLocked(android.content.ComponentName,int,boolean)>(r30, i0, z0);

        $r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r30, i0);

        if $r9 == null goto label5;

        $r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r14 = $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        $z3 = virtualinvoke $r14.<java.util.ArrayList: boolean contains(java.lang.Object)>(r30);

        if $z3 != 0 goto label5;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void toggleBackupServiceActive(int,boolean)>(0, 0);

        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z4 == 0 goto label3;

        $r24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int,java.lang.String)>($r24, 617, "device-owner");

        $r25 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(82);

        $r26 = virtualinvoke $r25.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r30);

        $r27 = newarray (java.lang.String)[1];

        $r27[0] = "device-owner";

        $r28 = virtualinvoke $r26.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r27);

        virtualinvoke $r28.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label3:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r15.<com.android.server.devicepolicy.Owners: void setDeviceOwner(android.content.ComponentName,java.lang.String,int)>(r30, r31, i0);

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r16.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateDeviceOwnerLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnershipSystemPropertyLocked()>();

        r32 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r33 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$sUVpi_BVE2_hZ5timBv59wD_svs;

        specialinvoke r33.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$sUVpi_BVE2_hZ5timBv59wD_svs: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke r32.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r33);

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        $r18 = virtualinvoke r30.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r17.<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>($r18, i0, "set-device-owner");

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device owner set: ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r23);

        exitmonitor r1;

     label4:
        return 1;

     label5:
        r35 = new java.lang.IllegalArgumentException;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not active admin: ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r12 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw r35;

     label6:
        $r29 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r29;

     label9:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid component ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for device owner");

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setDeviceOwnerLockScreenInfo(android.content.ComponentName, java.lang.CharSequence)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.CharSequence r1;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean $z0, $z1, $z2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$GBVASs_O0lex5Dd9rS_k6hCRyHE $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.app.admin.DevicePolicyEventLogger $r7, $r8;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;
        java.lang.SecurityException r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "ComponentName is null");

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -1);

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r3);

        if $z1 != 0 goto label5;

        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r3);

        if $z2 == 0 goto label4;

     label3:
        goto label5;

     label4:
        r11 = new java.lang.SecurityException;

        specialinvoke r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Only Device Owner or Profile Owner of organization-owned device can set screen lock info.");

        throw r11;

     label5:
        exitmonitor r2;

     label6:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$GBVASs_O0lex5Dd9rS_k6hCRyHE;

        specialinvoke $r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$GBVASs_O0lex5Dd9rS_k6hCRyHE: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.CharSequence)>(r0, r1);

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r5);

        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(42);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r10);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setDeviceProvisioningConfigApplied()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mDeviceProvisioningConfigApplied> = 1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setEndUserSessionMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.CharSequence r1;
        java.lang.Object r2;
        boolean $z0, $z1;
        java.lang.String $r4, r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6;
        int $i0;
        android.app.ActivityManagerInternal $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        if r1 == null goto label02;

        r10 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        goto label03;

     label02:
        r10 = null;

     label03:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label04:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -2);

        $r4 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String endUserSessionMessage>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r4, r1);

        if $z1 == 0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String endUserSessionMessage> = r10;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r2;

     label07:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>();

        virtualinvoke $r7.<android.app.ActivityManagerInternal: void setSwitchingToSystemUserMessage(java.lang.String)>(r10);

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r8;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setFactoryResetProtectionPolicy(android.content.ComponentName, android.app.admin.FactoryResetProtectionPolicy)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        android.content.Intent $r5, r13;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$oWsLtfkKNFB2cV5_IoTQb5uG0qM $r6;
        android.app.admin.DevicePolicyEventLogger $r8, $r9;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;
        android.app.admin.FactoryResetProtectionPolicy r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        r12 := @parameter1: android.app.admin.FactoryResetProtectionPolicy;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r11, "ComponentName is null");

        i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getFrpManagementAgentUidOrThrow()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r11, -3);

        $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.FactoryResetProtectionPolicy mFactoryResetProtectionPolicy> = r12;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        exitmonitor r1;

     label3:
        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.RESET_PROTECTION_POLICY_CHANGED");

        r13 = virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(285212672);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$oWsLtfkKNFB2cV5_IoTQb5uG0qM;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$oWsLtfkKNFB2cV5_IoTQb5uG0qM: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.content.Intent,int)>(r0, r13, i0);

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r6);

        $r8 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(130);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setForceEphemeralUsers(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, z4;
        java.lang.Object r1;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1wt3IEUSd5Y7SSKrQL0AgOHtqtc $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r5, $r7;
        int $i0;
        android.os.UserManagerInternal $r6;
        java.lang.UnsupportedOperationException $r8;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "ComponentName is null");

        if z0 == 0 goto label03;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z3 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean userManagerIsSplitSystemUser()>();

        if $z3 == 0 goto label02;

        goto label03;

     label02:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot force ephemeral users on systems without split system user.");

        throw $r8;

     label03:
        z4 = 0;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label04:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -2);

     label05:
        $z2 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers>;

        if $z2 == z0 goto label07;

        r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean forceEphemeralUsers> = z0;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r6.<android.os.UserManagerInternal: void setForceEphemeralUsers(boolean)>(z0);

     label06:
        z4 = z0;

     label07:
        exitmonitor r1;

     label08:
        if z4 == 0 goto label09;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1wt3IEUSd5Y7SSKrQL0AgOHtqtc;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1wt3IEUSd5Y7SSKrQL0AgOHtqtc: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

     label09:
        return;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r9;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public int setGlobalPrivateDns(android.content.ComponentName, int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.String r2, $r8, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r4, $r5, $r9;
        java.lang.Object[] $r6, $r10;
        java.lang.Integer $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 2;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        if i0 == 2 goto label4;

        if i0 != 3 goto label3;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z2 != 0 goto label2;

        $z3 = staticinvoke <android.net.NetworkUtils: boolean isWeaklyValidatedHostname(java.lang.String)>(r2);

        if $z3 == 0 goto label2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void putPrivateDnsSettings(java.lang.String,java.lang.String)>("hostname", r2);

        return 0;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r2;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Provided hostname %s is not valid", $r10);

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Provided mode, %d, is not a valid mode.", $r6);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label4:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label5;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void putPrivateDnsSettings(java.lang.String,java.lang.String)>("opportunistic", null);

        return 0;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host provided for opportunistic mode, but is not needed.");

        throw $r4;
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r13, r20;
        java.lang.Object r2, $r14, $r16;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4, $r17;
        java.util.Iterator r5;
        android.content.ComponentName r6, r19;
        boolean $z0, $z1, $z2, $z3;
        android.util.ArrayMap $r8, $r15;
        java.util.Set $r9;
        int $i0, $i1;
        java.lang.Throwable $r18;
        java.lang.StringBuilder r21;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r22;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$GZd44oNE3IpkbK4yqi6AVs8SBAw r23;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r19 := @parameter0: android.content.ComponentName;

        r20 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r19, "ComponentName is null");

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r19, 5);

        $r8 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.util.Set keySet()>();

        r5 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.content.ComponentName) $r14;

        $r15 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.util.ArrayMap mAdminMap>;

        $r16 = virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r6);

        $r17 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r16;

        $z2 = $r17.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z2 == 0 goto label05;

        $z3 = virtualinvoke r6.<android.content.ComponentName: boolean equals(java.lang.Object)>(r19);

        if $z3 != 0 goto label05;

        exitmonitor r2;

     label04:
        return r6;

     label05:
        goto label03;

     label06:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i0 == 0 goto label08;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only the owner is allowed to set the global proxy. User ");

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted.");

        $r13 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r13);

        exitmonitor r2;

     label07:
        return null;

     label08:
        if r20 != null goto label11;

     label09:
        r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = 0;

        r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = null;

        r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = null;

     label10:
        goto label12;

     label11:
        r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = 1;

        r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = r20;

        r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = r1;

     label12:
        r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r23 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$GZd44oNE3IpkbK4yqi6AVs8SBAw;

        specialinvoke r23.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$GZd44oNE3IpkbK4yqi6AVs8SBAw: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r0, r3);

        virtualinvoke r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r23);

        exitmonitor r2;

     label13:
        return null;

     label14:
        $r18 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r18;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r13, $r17, $r20;
        java.lang.Object r3;
        long l0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$894ujN_qww_EpROjsVOC0YY5qx0 r4;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r9;
        java.lang.String[] $r8;
        java.util.Set $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r14, r25;
        int $i1;
        byte $b2, $b3;
        android.content.Context $r15;
        java.lang.Object[] $r16;
        java.lang.Throwable $r21;
        android.content.ComponentName r22;
        java.lang.StringBuilder r23;
        java.lang.SecurityException r24;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r22 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r22, "ComponentName is null");

        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(111);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r22);

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = r1;

        $r8[1] = r2;

        $r9 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r8);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r22, -2);

        $r11 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_DEPRECATED>;

        $z0 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label03;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Global setting no longer supported: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r20);

        exitmonitor r3;

     label02:
        return;

     label03:
        $r12 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        $z1 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label06;

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $z3 = staticinvoke <android.os.UserManager: boolean isDeviceInDemoMode(android.content.Context)>($r15);

        if $z3 == 0 goto label05;

     label04:
        goto label06;

     label05:
        r24 = new java.lang.SecurityException;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r1;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission denial: device owners cannot update %1$s", $r16);

        specialinvoke r24.<java.lang.SecurityException: void <init>(java.lang.String)>($r17);

        throw r24;

     label06:
        $r13 = "stay_on_while_plugged_in";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label10;

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        l0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>(r22, $i1, 0);

     label07:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label10;

        $b3 = l0 cmp 9223372036854775807L;

        if $b3 >= 0 goto label10;

     label08:
        exitmonitor r3;

     label09:
        return;

     label10:
        r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$894ujN_qww_EpROjsVOC0YY5qx0;

        specialinvoke r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$894ujN_qww_EpROjsVOC0YY5qx0: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,java.lang.String)>(r0, r1, r2);

        virtualinvoke r25.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r4);

        exitmonitor r3;

     label11:
        return;

     label12:
        $r21 := @caughtexception;

     label13:
        exitmonitor r3;

     label14:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setKeepUninstalledPackages(android.content.ComponentName, java.lang.String, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        java.util.List r2;
        int i0;
        java.lang.Object r3;
        boolean $z0, z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.content.pm.PackageManagerInternal $r7;
        android.app.admin.DevicePolicyEventLogger $r8, $r9, $r10, $r14;
        java.lang.String[] $r11, $r13;
        java.lang.Object[] $r12;
        java.lang.Throwable $r15;
        android.content.ComponentName r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "packageList is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r16, r1, -2, "delegation-keep-uninstalled-packages");

        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List keepUninstalledPackages> = r2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        virtualinvoke $r7.<android.content.pm.PackageManagerInternal: void setKeepUninstalledPackages(java.util.List)>(r2);

        exitmonitor r3;

     label3:
        if r16 != null goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        $r8 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(61);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z1);

        $r11 = newarray (java.lang.String)[0];

        $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (java.lang.String[]) $r12;

        $r14 = virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r13);

        virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label6:
        $r15 := @caughtexception;

     label7:
        exitmonitor r3;

     label8:
        throw $r15;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean setKeyGrantForApp(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r9, r27;
        boolean z0, $z1, $z2;
        int i0, i4, i5;
        long l1;
        java.lang.IllegalArgumentException $r3, $r4, r34;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6, $r10, $r11, $r15, $r20, $r23, $r25;
        android.content.pm.IPackageManager $r7;
        java.lang.Object[] $r8;
        android.content.Context $r12;
        android.os.UserHandle $r13;
        android.security.IKeyChainService $r14;
        java.lang.Throwable $r16, $r21, $r24;
        android.os.RemoteException $r17, $r19;
        java.lang.IllegalStateException $r18;
        java.lang.Thread $r22;
        android.content.ComponentName r26;
        android.content.pm.ApplicationInfo r28;
        android.security.KeyChain$KeyChainConnection r29;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r26 := @parameter0: android.content.ComponentName;

        r27 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r26, r27, -1, "delegation-cert-selection");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label24;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z2 != 0 goto label23;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i4 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

     label01:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.IPackageManager getIPackageManager()>();

        r28 = interfaceinvoke $r7.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r2, 0, i4);

     label02:
        if r28 == null goto label21;

     label03:
        i0 = r28.<android.content.pm.ApplicationInfo: int uid>;

     label04:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i5 = virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label05:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r13 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i5);

        r29 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r12, $r13);

     label06:
        $r14 = virtualinvoke r29.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        interfaceinvoke $r14.<android.security.IKeyChainService: void setGrant(int,java.lang.String,boolean)>(i0, r1, z0);

     label07:
        virtualinvoke r29.<android.security.KeyChain$KeyChainConnection: void close()>();

     label08:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label09:
        $r16 := @caughtexception;

        goto label14;

     label10:
        $r19 := @caughtexception;

     label11:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Setting grant for package.", $r19);

     label12:
        virtualinvoke r29.<android.security.KeyChain$KeyChainConnection: void close()>();

     label13:
        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label14:
        virtualinvoke r29.<android.security.KeyChain$KeyChainConnection: void close()>();

     label15:
        throw $r16;

     label16:
        $r24 := @caughtexception;

        goto label20;

     label17:
        $r21 := @caughtexception;

     label18:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Interrupted while setting key grant", $r21);

        $r22 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r22.<java.lang.Thread: void interrupt()>();

     label19:
        $r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r23.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label20:
        $r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r25.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r24;

     label21:
        r34 = new java.lang.IllegalArgumentException;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r2;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Provided package %s is not installed", $r8);

        specialinvoke r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r34;

     label22:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failure getting grantee uid", $r17);

        throw $r18;

     label23:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package to grant to cannot be empty.");

        throw $r4;

     label24:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Alias to grant cannot be empty.");

        throw $r3;

        catch android.os.RemoteException from label01 to label02 with label22;
        catch android.os.RemoteException from label03 to label04 with label22;
        catch java.lang.InterruptedException from label05 to label06 with label17;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.InterruptedException from label07 to label08 with label17;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.InterruptedException from label12 to label13 with label17;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.InterruptedException from label14 to label15 with label17;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.InterruptedException from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
        catch android.os.RemoteException from label21 to label22 with label22;
    }

    public boolean setKeyPairCertificate(android.content.ComponentName, java.lang.String, java.lang.String, byte[], byte[], boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r30;
        byte[] r2, r3;
        int i0;
        long l1;
        android.security.KeyChain$KeyChainConnection r4;
        android.security.IKeyChainService r5;
        boolean z0, z1, z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6, $r7, $r13, $r14, $r19, $r36;
        android.content.Context $r8;
        android.os.UserHandle $r9;
        android.app.admin.DevicePolicyEventLogger $r10, $r11, $r12;
        java.lang.Throwable $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r24, $r26, $r28, r31, r33, r34;
        android.os.RemoteException $r23, $r25, $r27, r32;
        android.content.ComponentName r29;
        java.lang.Thread $r37;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r29 := @parameter0: android.content.ComponentName;

        r30 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: byte[];

        r3 := @parameter4: byte[];

        z1 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r29, r30, -1, "delegation-cert-install");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label01:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i0);

        r4 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r8, $r9);

     label02:
        r5 = virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

     label03:
        z0 = interfaceinvoke r5.<android.security.IKeyChainService: boolean setKeyPairCertificate(java.lang.String,byte[],byte[])>(r1, r2, r3);

     label04:
        if z0 != 0 goto label11;

        if r4 == null goto label10;

     label05:
        virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: void close()>();

     label06:
        goto label10;

     label07:
        $r18 := @caughtexception;

        r31 = $r18;

        goto label30;

     label08:
        $r27 := @caughtexception;

        r32 = $r27;

        goto label32;

     label09:
        $r17 := @caughtexception;

        r33 = $r17;

        goto label35;

     label10:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label11:
        interfaceinvoke r5.<android.security.IKeyChainService: void setUserSelectable(java.lang.String,boolean)>(r1, z1);

     label12:
        if r29 != null goto label13;

        z2 = 1;

        goto label14;

     label13:
        z2 = 0;

     label14:
        $r10 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(60);

        $r11 = virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r30);

        $r12 = virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z2);

        virtualinvoke $r12.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label15:
        if r4 == null goto label17;

     label16:
        virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: void close()>();

     label17:
        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label18:
        $r15 := @caughtexception;

        r34 = $r15;

        goto label21;

     label19:
        $r20 := @caughtexception;

        r34 = $r20;

        goto label21;

     label20:
        $r16 := @caughtexception;

        r34 = $r16;

     label21:
        if r4 == null goto label26;

     label22:
        virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: void close()>();

     label23:
        goto label26;

     label24:
        $r24 := @caughtexception;

     label25:
        virtualinvoke r34.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24);

     label26:
        throw r34;

     label27:
        $r25 := @caughtexception;

        r32 = $r25;

        goto label32;

     label28:
        $r26 := @caughtexception;

        r33 = $r26;

        goto label35;

     label29:
        $r21 := @caughtexception;

        r31 = $r21;

     label30:
        goto label39;

     label31:
        $r23 := @caughtexception;

        r32 = $r23;

     label32:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed setting keypair certificate", r32);

     label33:
        $r36 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r36.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        goto label37;

     label34:
        $r22 := @caughtexception;

        r33 = $r22;

     label35:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Interrupted while setting keypair certificate", r33);

        $r37 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r37.<java.lang.Thread: void interrupt()>();

     label36:
        goto label33;

     label37:
        return 0;

     label38:
        $r28 := @caughtexception;

        r31 = $r28;

     label39:
        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r19.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw r31;

        catch java.lang.InterruptedException from label01 to label02 with label34;
        catch android.os.RemoteException from label01 to label02 with label31;
        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.InterruptedException from label05 to label06 with label09;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.InterruptedException from label16 to label17 with label28;
        catch android.os.RemoteException from label16 to label17 with label27;
        catch java.lang.Throwable from label16 to label17 with label38;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.InterruptedException from label25 to label26 with label28;
        catch android.os.RemoteException from label25 to label26 with label27;
        catch java.lang.Throwable from label25 to label26 with label38;
        catch java.lang.InterruptedException from label26 to label27 with label28;
        catch android.os.RemoteException from label26 to label27 with label27;
        catch java.lang.Throwable from label26 to label27 with label38;
        catch java.lang.Throwable from label32 to label33 with label38;
        catch java.lang.Throwable from label35 to label36 with label38;
    }

    public boolean setKeyguardDisabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, $z3;
        int i0;
        java.lang.Object r1;
        long l1;
        java.lang.SecurityException r2, $r11;
        java.lang.StringBuilder r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r12, $r17, $r18, $r21, $r24;
        java.lang.String $r10;
        com.android.internal.widget.LockPatternUtils $r13, $r20;
        android.app.admin.DevicePolicyEventLogger $r14, $r15, $r16;
        android.view.IWindowManager $r19;
        java.lang.Throwable $r22, $r23;
        android.os.RemoteException $r25;
        android.content.ComponentName r26;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r26 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r26, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r26, -1);

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        if $z2 == 0 goto label14;

        exitmonitor r1;

     label02:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z3 != 0 goto label13;

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

        if z0 == 0 goto label05;

     label03:
        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        z1 = virtualinvoke $r20.<com.android.internal.widget.LockPatternUtils: boolean isSecure(int)>(i0);

     label04:
        if z1 == 0 goto label05;

        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r21.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label05:
        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        virtualinvoke $r13.<com.android.internal.widget.LockPatternUtils: void setLockScreenDisabled(boolean,int)>(z0, i0);

     label06:
        if z0 == 0 goto label08;

     label07:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r19 = virtualinvoke $r18.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.view.IWindowManager getIWindowManager()>();

        interfaceinvoke $r19.<android.view.IWindowManager: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>(null, null);

     label08:
        $r14 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(37);

        $r15 = virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r26);

        $r16 = virtualinvoke $r15.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r16.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label09:
        goto label12;

     label10:
        $r23 := @caughtexception;

        $r24 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r24.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r23;

     label11:
        $r25 := @caughtexception;

     label12:
        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r17.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label13:
        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Managed profile cannot disable keyguard");

        throw $r11;

     label14:
        r2 = new java.lang.SecurityException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is neither the device owner or affiliated user\'s profile owner.");

        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw r2;

     label15:
        $r22 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch android.os.RemoteException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label05 to label06 with label11;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch android.os.RemoteException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i2, i3, $i4, i5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.String[] $r4;
        android.app.admin.DevicePolicyEventLogger $r5, $r14, $r15, r16;
        java.lang.Object[] $r6;
        java.lang.String $r7, r17;
        java.lang.Integer $r8, $r9, $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;
        java.lang.Object r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r13;

     label02:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r12, 9, z0);

     label03:
        i3 = i2;

     label04:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z2 == 0 goto label10;

     label05:
        if z0 == 0 goto label09;

     label06:
        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r1);

        if $z4 == 0 goto label08;

     label07:
        i3 = i2 & 438;

        goto label10;

     label08:
        i3 = i2 & 432;

        goto label10;

     label09:
        i3 = i2 & 440;

     label10:
        $i4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        if $i4 == i3 goto label11;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures> = i3;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label11:
        exitmonitor r13;

     label12:
        $z3 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label15;

        if z0 == 0 goto label13;

        i5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

        goto label14;

     label13:
        i5 = i0;

     label14:
        $r6 = newarray (java.lang.Object)[4];

        $r7 = virtualinvoke r12.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r6[2] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r6[3] = $r10;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210021, $r6);

     label15:
        $r14 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(9);

        $r15 = virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r12);

        r16 = virtualinvoke $r15.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i3);

        if z0 == 0 goto label16;

        r17 = "calledFromParent";

        goto label17;

     label16:
        r17 = "notCalledFromParent";

     label17:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r17;

        $r5 = virtualinvoke r16.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r4);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label18:
        $r11 := @caughtexception;

     label19:
        exitmonitor r13;

     label20:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void setLocationEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        android.os.UserHandle r1;
        android.content.ComponentName $r3, r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r6;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KMSC44D4g_vW3awRQ_VcGEjg_5Y $r5;
        android.app.admin.DevicePolicyEventLogger $r7, $r10, r12;
        java.lang.String[] $r8;
        java.lang.String $r9;
        byte b0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r11);

        $r3 = (android.content.ComponentName) r11;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>($r3);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KMSC44D4g_vW3awRQ_VcGEjg_5Y;

        specialinvoke $r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$KMSC44D4g_vW3awRQ_VcGEjg_5Y: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.UserHandle,boolean)>(r0, r1, z0);

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r5);

        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(14);

        r12 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        b0 = 0;

        if z0 == 0 goto label1;

        b0 = 3;

        goto label1;

     label1:
        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "location_mode";

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(b0);

        $r8[1] = $r9;

        $r10 = virtualinvoke r12.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r8);

        virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    public void setLockTaskFeatures(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;
        boolean z1, z2, z3, z4, z5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "ComponentName is null");

        $i1 = i0 & 4;

        if $i1 == 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        $i2 = i0 & 8;

        if $i2 == 0 goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        if z1 != 0 goto label06;

        if z2 != 0 goto label05;

        goto label06;

     label05:
        z3 = 0;

        goto label07;

     label06:
        z3 = 1;

     label07:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "Cannot use LOCK_TASK_FEATURE_OVERVIEW without LOCK_TASK_FEATURE_HOME");

        $i3 = i0 & 2;

        if $i3 == 0 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        z5 = 1;

        if z1 != 0 goto label11;

        if z4 != 0 goto label10;

        z5 = 1;

        goto label11;

     label10:
        z5 = 0;

     label11:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "Cannot use LOCK_TASK_FEATURE_NOTIFICATIONS without LOCK_TASK_FEATURE_HOME");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i4 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label12:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanCallLockTaskLocked(android.content.ComponentName)>(r4);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskFeaturesLocked(int,int)>(i4, i0);

        exitmonitor r1;

     label13:
        return;

     label14:
        $r3 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r3;

        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void setLockTaskPackages(android.content.ComponentName, java.lang.String[]) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String[] r1;
        java.lang.Object r2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        java.util.List $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        java.util.ArrayList r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packages is null");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanCallLockTaskLocked(android.content.ComponentName)>(r8);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r9 = new java.util.ArrayList;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskPackagesLocked(int,java.util.List)>(i0, r9);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setLogoutEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        int $i0;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r5, -2);

        $z2 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isLogoutEnabled>;

        if $z2 != z0 goto label4;

        exitmonitor r1;

     label3:
        return;

     label4:
        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isLogoutEnabled> = z0;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setLongSupportMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.CharSequence r1, $r7;
        int i0, $i1;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6;
        android.app.admin.DevicePolicyEventLogger $r8, $r9;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForUidLocked(android.content.ComponentName,int)>(r11, $i1);

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r1);

        if $z1 != 0 goto label3;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence longSupportMessage> = r1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label3:
        exitmonitor r2;

     label4:
        $r8 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(44);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setManagedProfileMaximumTimeOff(android.content.ComponentName, long)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, $l4, l6, $l7;
        int i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r7;
        android.app.admin.DeviceAdminInfo $r4;
        java.lang.String $r5;
        byte $b2, $b3, $b5, $b8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$OGNKfhAvFX0Q1DLoBVuWFhpbK0E $r6;
        android.app.admin.DevicePolicyEventLogger $r9, $r10, $r11;
        boolean $z0, z1;
        java.lang.Throwable $r12;
        android.content.ComponentName r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r13 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        z1 = 0;

     label01:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r13, -3, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r2);

        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r5 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceHandlesCheckPolicyComplianceIntent(int,java.lang.String)>(i1, $r5);

     label02:
        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label03;

        z1 = 1;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "Timeout must be non-negative.");

     label04:
        l6 = l0;

        $b3 = l0 cmp 0L;

        if $b3 <= 0 goto label08;

        l6 = l0;

     label05:
        $l4 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MANAGED_PROFILE_MAXIMUM_TIME_OFF_THRESHOLD>;

        $b5 = l0 cmp $l4;

        if $b5 >= 0 goto label08;

     label06:
        l6 = l0;

     label07:
        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminTestOnlyLocked(android.content.ComponentName,int)>(r13, i1);

        if $z0 != 0 goto label08;

        l6 = <com.android.server.devicepolicy.DevicePolicyManagerService: long MANAGED_PROFILE_MAXIMUM_TIME_OFF_THRESHOLD>;

     label08:
        $l7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis>;

        $b8 = $l7 cmp l6;

        if $b8 != 0 goto label10;

        exitmonitor r1;

     label09:
        return;

     label10:
        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileMaximumTimeOffMillis> = l6;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        exitmonitor r1;

     label11:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$OGNKfhAvFX0Q1DLoBVuWFhpbK0E;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$OGNKfhAvFX0Q1DLoBVuWFhpbK0E: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i1);

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r6);

        $r9 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(136);

        $r10 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r13);

        $r11 = virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setTimePeriod(long)>(l6);

        virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label12:
        $r12 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setMasterVolumeMuted(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        java.lang.Object r1;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r8, -1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)>(r8, "disallow_unmute_device", z0, 0);

        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(35);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, i4;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.internal.widget.LockPatternUtils $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        java.lang.Object[] $r7;
        java.lang.String $r8;
        java.lang.Integer $r9, $r10, $r11;
        java.lang.Throwable $r12;
        android.content.ComponentName r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r13 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label11;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label11;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r13, 4, z0);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r13, 1, z0);

        $i2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if $i2 == i0 goto label03;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label03:
        exitmonitor r1;

     label04:
        $z3 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label07;

        if z0 == 0 goto label05;

        i4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

        goto label06;

     label05:
        i4 = i1;

     label06:
        $r7 = newarray (java.lang.Object)[4];

        $r8 = virtualinvoke r13.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r7[2] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[3] = $r11;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210020, $r7);

     label07:
        return;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r12;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setMaximumTimeToLock(android.content.ComponentName, long, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, $l2;
        boolean z0, $z1, $z2;
        int i1, i5;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        byte $b3;
        java.lang.Object[] $r5;
        java.lang.String $r6;
        java.lang.Integer $r7, $r8;
        java.lang.Long $r9;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "ComponentName is null");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r11, 3, z0);

        $l2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label03;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock> = l0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(int)>(i1);

     label03:
        exitmonitor r1;

     label04:
        $z2 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label07;

        if z0 == 0 goto label05;

        i5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

        goto label06;

     label05:
        i5 = i1;

     label06:
        $r5 = newarray (java.lang.Object)[4];

        $r6 = virtualinvoke r11.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[3] = $r9;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210019, $r5);

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.util.List setMeteredDataDisabledPackages(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1, r12;
        java.lang.Object r2, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hGowsDgycqdZtYhKFJ6UEAaUPIQ r4;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, r11;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r10);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return r1;

     label1:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -1);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hGowsDgycqdZtYhKFJ6UEAaUPIQ;

        specialinvoke r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$hGowsDgycqdZtYhKFJ6UEAaUPIQ: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,java.util.List,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r0, i0, r1, r3);

        $r8 = virtualinvoke r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r4);

        r12 = (java.util.List) $r8;

        exitmonitor r2;

     label3:
        return r12;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setNetworkLoggingEnabled(android.content.ComponentName, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        boolean z0, $z1, $z2, z3;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        int $i0;
        android.app.admin.DevicePolicyEventLogger $r5, $r6, $r7, r10;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        byte b1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r9, r1, -2, "delegation-network-logging");

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabledInternalLocked()>();

        if z0 != $z2 goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdminLocked()>();

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean isNetworkLoggingEnabled> = z0;

     label05:
        b1 = 0;

        if z0 != 0 goto label07;

     label06:
        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int numNetworkLoggingNotifications> = 0;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long lastNetworkLoggingNotificationTimeMs> = 0L;

     label07:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setNetworkLoggingActiveInternal(boolean)>(z0);

     label08:
        if r9 != null goto label09;

        z3 = 1;

        goto label10;

     label09:
        z3 = 0;

     label10:
        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(119);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        r10 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z3);

     label11:
        if z0 == 0 goto label12;

        b1 = 1;

     label12:
        $r7 = virtualinvoke r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(b1);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        exitmonitor r2;

     label13:
        return;

     label14:
        $r8 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void setOrganizationColor(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r4;
        android.app.admin.DevicePolicyEventLogger $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i1, "set organization color");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r8, -1);

        $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        exitmonitor r1;

     label3:
        $r5 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(39);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setOrganizationColorForUser(int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManageUsers()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i1, "set organization color");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdminLocked(int)>(i1);

        $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int organizationColor> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setOrganizationName(android.content.ComponentName, java.lang.CharSequence)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.CharSequence r1;
        int i0, $i1;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        java.lang.String $r6, r9;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label02:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r8, -1);

        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r6, r1);

        if $z1 != 0 goto label10;

     label03:
        if r1 == null goto label08;

     label04:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label06;

     label05:
        goto label08;

     label06:
        r9 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

     label07:
        goto label09;

     label08:
        r9 = null;

     label09:
        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String organizationName> = r9;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label10:
        exitmonitor r2;

     label11:
        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setOverrideApnsEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1, $z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label2;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature>;

        if $z2 != 0 goto label1;

        goto label2;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null in setOverrideApnEnabled");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setOverrideApnsEnabledUnchecked(boolean)>(z0);

        return;

     label2:
        return;
    }

    public java.lang.String[] setPackagesSuspended(android.content.ComponentName, java.lang.String, java.lang.String[], boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        java.lang.String[] r2, r19;
        int i0;
        java.lang.Object r3;
        long l1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r5, $r11, $r22;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r8, $r9;
        android.os.RemoteException $r10, $r13, r21;
        java.lang.Throwable $r12, $r14, $r15, $r16, r20;
        android.content.ComponentName r17;
        boolean z0, z1;
        android.content.pm.IPackageManager r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r17 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r17, r1, -1, "delegation-package-access");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

     label03:
        r19 = interfaceinvoke r18.<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>(r2, z0, null, null, null, "android", i0);

     label04:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label05:
        goto label13;

     label06:
        $r14 := @caughtexception;

        r20 = $r14;

        goto label19;

     label07:
        $r13 := @caughtexception;

        r21 = $r13;

        goto label10;

     label08:
        $r15 := @caughtexception;

        r20 = $r15;

        goto label19;

     label09:
        $r10 := @caughtexception;

        r21 = $r10;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed talking to the package manager", r21);

     label11:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label12:
        r19 = null;

        goto label05;

     label13:
        exitmonitor r3;

     label14:
        if r17 != null goto label15;

        z1 = 1;

        goto label16;

     label15:
        z1 = 0;

     label16:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(68);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z1);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>(r2);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        if r19 == null goto label17;

        return r19;

     label17:
        return r2;

     label18:
        $r12 := @caughtexception;

        r20 = $r12;

     label19:
        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r22.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label20:
        throw r20;

     label21:
        $r16 := @caughtexception;

     label22:
        exitmonitor r3;

     label23:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch android.os.RemoteException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch android.os.RemoteException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName, long, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, $l7, l8;
        boolean z0, $z1, $z2, $z3;
        int i1, i9;
        java.lang.Object r1;
        java.text.DateFormat r2;
        java.util.Date r3;
        com.android.internal.widget.LockPatternUtils $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        byte $b3, $b4;
        android.content.Context $r7;
        java.lang.Object[] $r8;
        java.lang.String $r9, $r14, $r16;
        java.lang.Integer $r10, $r11;
        java.lang.Long $r12;
        java.lang.Throwable $r17;
        android.content.ComponentName r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r19;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r18 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label18;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r4.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label18;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r18, "ComponentName is null");

        staticinvoke <com.android.internal.util.Preconditions: long checkArgumentNonnegative(long,java.lang.String)>(l0, "Timeout must be >= 0 ms");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r19 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r18, 6, z0);

     label03:
        $b3 = l0 cmp 0L;

        if $b3 <= 0 goto label06;

     label04:
        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l8 = $l7 + l0;

     label05:
        goto label07;

     label06:
        l8 = 0L;

     label07:
        r19.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = l8;

        r19.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout> = l0;

     label08:
        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label10;

     label09:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setPasswordExpiration(): password will expire on ");

        r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>(2, 2);

        r3 = new java.util.Date;

        specialinvoke r3.<java.util.Date: void <init>(long)>(l8);

        $r14 = virtualinvoke r2.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r3);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r16);

     label10:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,int,boolean)>($r7, i1, z0);

        exitmonitor r1;

     label11:
        $z3 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label14;

        if z0 == 0 goto label12;

        i9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

        goto label13;

     label12:
        i9 = i1;

     label13:
        $r8 = newarray (java.lang.Object)[4];

        $r9 = virtualinvoke r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r8[2] = $r11;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r8[3] = $r12;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210016, $r8);

     label14:
        return;

     label15:
        $r17 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r17;

     label18:
        return;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void setPasswordHistoryLength(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, i4;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.internal.widget.LockPatternUtils $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        java.lang.Object[] $r6;
        java.lang.String $r7;
        java.lang.Integer $r8, $r9, $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label11;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label11;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r12, 0, z0);

        $i2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        if $i2 == i0 goto label03;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label03:
        exitmonitor r1;

     label04:
        $z3 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label07;

        if z0 == 0 goto label05;

        i4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

        goto label06;

     label05:
        i4 = i1;

     label06:
        $r6 = newarray (java.lang.Object)[4];

        $r7 = virtualinvoke r12.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r6[2] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[3] = $r10;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210018, $r6);

     label07:
        return;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r11;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setPasswordMinimumLength(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9;
        android.app.admin.PasswordPolicy r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r8, 0, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureMinimumQuality(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,java.lang.String)>(i1, r9, 131072, "setPasswordMinimumLength");

        r10 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r10.<android.app.admin.PasswordPolicy: int length>;

        if $i2 == i0 goto label3;

        r10.<android.app.admin.PasswordPolicy: int length> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r8, i1, z0, r10);

        exitmonitor r1;

     label4:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(2);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setPasswordMinimumLetters(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9;
        android.app.admin.PasswordPolicy r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r8, 0, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureMinimumQuality(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,java.lang.String)>(i1, r9, 393216, "setPasswordMinimumLetters");

        r10 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r10.<android.app.admin.PasswordPolicy: int letters>;

        if $i2 == i0 goto label3;

        r10.<android.app.admin.PasswordPolicy: int letters> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r8, i1, z0, r10);

        exitmonitor r1;

     label4:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(5);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        boolean z0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9;
        android.app.admin.PasswordPolicy r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label1:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r8, 0, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureMinimumQuality(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,java.lang.String)>(i1, r9, 393216, "setPasswordMinimumLowerCase");

        r10 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r10.<android.app.admin.PasswordPolicy: int lowerCase>;

        if $i2 == i0 goto label2;

        r10.<android.app.admin.PasswordPolicy: int lowerCase> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r8, i1, z0, r10);

        exitmonitor r1;

     label3:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(6);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        android.app.admin.PasswordPolicy r3, $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r8;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r11, 0, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureMinimumQuality(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,java.lang.String)>(i1, r2, 393216, "setPasswordMinimumNonLetter");

        r3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r3.<android.app.admin.PasswordPolicy: int nonLetter>;

        if $i2 == i0 goto label3;

        $r9 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r9.<android.app.admin.PasswordPolicy: int nonLetter> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r11, i1, z0, r3);

        exitmonitor r1;

     label4:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(4);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9;
        android.app.admin.PasswordPolicy r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r8, 0, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureMinimumQuality(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,java.lang.String)>(i1, r9, 393216, "setPasswordMinimumNumeric");

        r10 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r10.<android.app.admin.PasswordPolicy: int numeric>;

        if $i2 == i0 goto label3;

        r10.<android.app.admin.PasswordPolicy: int numeric> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r8, i1, z0, r10);

        exitmonitor r1;

     label4:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(3);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        android.app.admin.PasswordPolicy r3, $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r8;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r11, 0, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureMinimumQuality(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,java.lang.String)>(i1, r2, 393216, "setPasswordMinimumSymbols");

        r3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r3.<android.app.admin.PasswordPolicy: int symbols>;

        if $i2 == i0 goto label3;

        $r9 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $r9.<android.app.admin.PasswordPolicy: int symbols> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r11, i1, z0, r3);

        exitmonitor r1;

     label4:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(8);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9;
        android.app.admin.PasswordPolicy r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r8, 0, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureMinimumQuality(int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,java.lang.String)>(i1, r9, 393216, "setPasswordMinimumUpperCase");

        r10 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.PasswordPolicy mPasswordPolicy>;

        $i2 = r10.<android.app.admin.PasswordPolicy: int upperCase>;

        if $i2 == i0 goto label3;

        r10.<android.app.admin.PasswordPolicy: int upperCase> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordValidityCheckpointLocked(int,boolean)>(i1, z0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeLogPasswordComplexitySet(android.content.ComponentName,int,boolean,android.app.admin.PasswordPolicy)>(r8, i1, z0, r10);

        exitmonitor r1;

     label4:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(7);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r8);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setPasswordQuality(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r2, $r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6VeZWEdN1dyRdHEAUxfQP_WansI r3;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r9, r13;
        java.lang.String[] $r8;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;
        java.lang.Object r12;
        java.lang.String r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "ComponentName is null");

        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void validateQualityConstant(int)>(i0);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r12;

     label2:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r11, 0, z0);

        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6VeZWEdN1dyRdHEAUxfQP_WansI;

        specialinvoke r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6VeZWEdN1dyRdHEAUxfQP_WansI: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,int,int,boolean,android.content.ComponentName)>(r0, r1, i0, i1, z0, r11);

        virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r3);

        exitmonitor r12;

     label3:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(1);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        r13 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        if z0 == 0 goto label4;

        r14 = "calledFromParent";

        goto label5;

     label4:
        r14 = "notCalledFromParent";

     label5:
        $r8 = newarray (java.lang.String)[1];

        $r8[0] = r14;

        $r9 = virtualinvoke r13.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r8);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r12;

     label8:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String, int, android.os.RemoteCallback) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r20, r35, r36;
        int i0, $i1, $i2, i6, i7;
        android.os.RemoteCallback r2;
        java.lang.Object r3;
        boolean z0, z1;
        android.permission.PermissionControllerManager r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$o0LwS4YG_RzBTpouxzUjijvm1sw r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r8, $r9, $r10, $r41, $r44, $r48, $r49;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, r38, r39, r45;
        android.content.pm.PackageManager$NameNotFoundException $r16, $r23, r40;
        android.content.ComponentName r34;
        android.os.UserHandle r37;
        long l4, l5, l8;
        android.content.Context $r42;
        java.util.concurrent.Executor r43;
        android.os.RemoteException r46;
        java.lang.StringBuilder r47;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r34 := @parameter0: android.content.ComponentName;

        r35 := @parameter1: java.lang.String;

        r36 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r2 := @parameter5: android.os.RemoteCallback;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r37 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.os.UserHandle binderGetCallingUserHandle()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r34, r35, -1, "delegation-permission-grant");

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l4 = virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        l5 = l4;

     label03:
        $i1 = virtualinvoke r37.<android.os.UserHandle: int getIdentifier()>();

        i6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>(r35, $i1);

     label04:
        if i6 < 29 goto label05;

        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        if z1 != 0 goto label13;

     label07:
        i7 = virtualinvoke r37.<android.os.UserHandle: int getIdentifier()>();

     label08:
        $i2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>(r36, i7);

        if $i2 >= 23 goto label13;

        virtualinvoke r2.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(null);

     label09:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l5);

        exitmonitor r3;

     label10:
        return;

     label11:
        $r28 := @caughtexception;

        r38 = $r28;

        goto label49;

     label12:
        $r31 := @caughtexception;

        r39 = $r31;

        goto label51;

     label13:
        z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRuntimePermission(java.lang.String)>(r1);

     label14:
        if z0 != 0 goto label19;

     label15:
        virtualinvoke r2.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(null);

     label16:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l5);

        exitmonitor r3;

     label17:
        return;

     label18:
        $r16 := @caughtexception;

        r40 = $r16;

        goto label36;

     label19:
        if i0 == 1 goto label21;

        if i0 == 2 goto label21;

        if i0 != 0 goto label20;

        goto label21;

     label20:
        goto label24;

     label21:
        $r41 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = virtualinvoke $r41.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.permission.PermissionControllerManager getPermissionControllerManager(android.os.UserHandle)>(r37);

        $r42 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r43 = virtualinvoke $r42.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

     label22:
        r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$o0LwS4YG_RzBTpouxzUjijvm1sw;

     label23:
        specialinvoke r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$o0LwS4YG_RzBTpouxzUjijvm1sw: void <init>(boolean,android.os.RemoteCallback,android.content.ComponentName,java.lang.String,java.lang.String,int)>(z1, r2, r34, r35, r1, i0);

        virtualinvoke r4.<android.permission.PermissionControllerManager: void setRuntimePermissionGrantStateByDeviceAdmin(java.lang.String,java.lang.String,java.lang.String,int,java.util.concurrent.Executor,java.util.function.Consumer)>(r35, r36, r1, i0, r43, r5);

     label24:
        $r44 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r44.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l4);

     label25:
        goto label57;

     label26:
        $r21 := @caughtexception;

        r45 = $r21;

        goto label63;

     label27:
        $r25 := @caughtexception;

        r38 = $r25;

        goto label30;

     label28:
        $r29 := @caughtexception;

        r39 = $r29;

        goto label32;

     label29:
        $r13 := @caughtexception;

        r38 = $r13;

     label30:
        goto label60;

     label31:
        $r26 := @caughtexception;

        r39 = $r26;

     label32:
        goto label52;

     label33:
        $r27 := @caughtexception;

        r38 = $r27;

        l4 = l5;

        goto label60;

     label34:
        $r14 := @caughtexception;

        r39 = $r14;

        l4 = l5;

        goto label52;

     label35:
        $r23 := @caughtexception;

        r40 = $r23;

     label36:
        r46 = new android.os.RemoteException;

        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot check if ");

     label37:
        l8 = l4;

     label38:
        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label39:
        l8 = l4;

     label40:
        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is a runtime permission");

     label41:
        l8 = l4;

     label42:
        $r20 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r46.<android.os.RemoteException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>($r20, r40, 0, 1);

     label43:
        l8 = l4;

     label44:
        throw r46;

     label45:
        $r33 := @caughtexception;

        r39 = $r33;

        goto label52;

     label46:
        $r24 := @caughtexception;

        r38 = $r24;

        goto label60;

     label47:
        $r32 := @caughtexception;

        r39 = $r32;

        goto label52;

     label48:
        $r15 := @caughtexception;

        r38 = $r15;

     label49:
        l4 = l5;

        goto label60;

     label50:
        $r12 := @caughtexception;

        r39 = $r12;

     label51:
        l4 = l5;

     label52:
        l8 = l4;

     label53:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Could not set permission grant state", r39);

     label54:
        l8 = l4;

     label55:
        virtualinvoke r2.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(null);

     label56:
        $r48 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r48.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l4);

     label57:
        exitmonitor r3;

     label58:
        return;

     label59:
        $r11 := @caughtexception;

        r38 = $r11;

        l4 = l8;

     label60:
        $r49 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r49.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l4);

     label61:
        throw r38;

     label62:
        $r22 := @caughtexception;

        r45 = $r22;

        goto label63;

     label63:
        exitmonitor r3;

     label64:
        throw r45;

     label65:
        $r30 := @caughtexception;

        r45 = $r30;

        goto label63;

        catch java.lang.Throwable from label01 to label02 with label62;
        catch java.lang.SecurityException from label03 to label04 with label50;
        catch java.lang.Throwable from label03 to label04 with label48;
        catch java.lang.SecurityException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.SecurityException from label08 to label09 with label50;
        catch java.lang.Throwable from label08 to label09 with label48;
        catch java.lang.Throwable from label09 to label10 with label62;
        catch android.content.pm.PackageManager$NameNotFoundException from label13 to label14 with label35;
        catch java.lang.SecurityException from label13 to label14 with label34;
        catch java.lang.Throwable from label13 to label14 with label33;
        catch android.content.pm.PackageManager$NameNotFoundException from label15 to label16 with label18;
        catch java.lang.SecurityException from label15 to label16 with label50;
        catch java.lang.Throwable from label15 to label16 with label48;
        catch java.lang.Throwable from label16 to label17 with label62;
        catch java.lang.SecurityException from label21 to label22 with label34;
        catch java.lang.Throwable from label21 to label22 with label33;
        catch java.lang.SecurityException from label22 to label23 with label31;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.SecurityException from label23 to label24 with label28;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.SecurityException from label36 to label37 with label47;
        catch java.lang.Throwable from label36 to label37 with label46;
        catch java.lang.SecurityException from label38 to label39 with label45;
        catch java.lang.Throwable from label38 to label39 with label59;
        catch java.lang.SecurityException from label40 to label41 with label45;
        catch java.lang.Throwable from label40 to label41 with label59;
        catch java.lang.SecurityException from label42 to label43 with label45;
        catch java.lang.Throwable from label42 to label43 with label59;
        catch java.lang.SecurityException from label44 to label45 with label45;
        catch java.lang.Throwable from label44 to label45 with label59;
        catch java.lang.Throwable from label53 to label54 with label59;
        catch java.lang.Throwable from label55 to label56 with label59;
        catch java.lang.Throwable from label56 to label57 with label65;
        catch java.lang.Throwable from label57 to label58 with label65;
        catch java.lang.Throwable from label60 to label61 with label65;
        catch java.lang.Throwable from label61 to label62 with label65;
        catch java.lang.Throwable from label63 to label64 with label65;
    }

    public void setPermissionPolicy(android.content.ComponentName, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r5, $r6, $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r9, r1, -1, "delegation-permission-grant");

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPermissionPolicy>;

        if $i2 == i0 goto label2;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPermissionPolicy> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label2:
        exitmonitor r2;

     label3:
        if r9 != null goto label4;

        z0 = 1;

        goto label5;

     label4:
        z0 = 0;

     label5:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(18);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0;
        boolean $z0, $z1, $z2, $z3;
        android.app.admin.DevicePolicyEventLogger $r2, $r3, $r4;
        java.lang.String[] $r5, r28;
        java.lang.Object[] $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r9, $r18;
        android.view.accessibility.AccessibilityManager $r8;
        java.util.ArrayList $r10;
        java.lang.Object $r11, r26;
        android.accessibilityservice.AccessibilityServiceInfo $r12;
        android.content.pm.ResolveInfo $r13;
        android.content.pm.ServiceInfo $r14;
        java.lang.String $r15;
        java.lang.Throwable $r16, $r17;
        android.content.ComponentName r19;
        java.util.List r20, r22;
        int i2, $i3;
        android.content.pm.UserInfo r21;
        java.util.Iterator r24;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r27;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r19 := @parameter0: android.content.ComponentName;

        r20 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r19, "ComponentName is null");

        if r20 == null goto label09;

        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        r21 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getUserInfo(int)>(i2);

     label03:
        $z1 = virtualinvoke r21.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label04;

        i2 = r21.<android.content.pm.UserInfo: int profileGroupId>;

     label04:
        $r8 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.accessibility.AccessibilityManager getAccessibilityManagerForUser(int)>(i2);

        r22 = virtualinvoke $r8.<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>(-1);

     label05:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        if r22 == null goto label09;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r24 = interfaceinvoke r22.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r11 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (android.accessibilityservice.AccessibilityServiceInfo) $r11;

        $r13 = virtualinvoke $r12.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r14 = $r13.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r15 = $r14.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label06;

     label07:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkPackagesInPermittedListOrSystem(java.util.List,java.util.List,int)>($r10, r20, i2);

        if $z3 != 0 goto label09;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot set permitted accessibility services, because it contains already enabled accesibility services.");

        return 0;

     label08:
        $r17 := @caughtexception;

        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r18.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        throw $r17;

     label09:
        r26 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r26;

     label10:
        $r27 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r19, -1);

        $r27.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices> = r20;

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i3);

        exitmonitor r26;

     label11:
        if r20 == null goto label12;

        $r5 = newarray (java.lang.String)[0];

        $r6 = interfaceinvoke r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r28 = (java.lang.String[]) $r6;

        goto label13;

     label12:
        r28 = null;

     label13:
        $r2 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(28);

        $r3 = virtualinvoke $r2.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r19);

        $r4 = virtualinvoke $r3.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>(r28);

        virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return 1;

     label14:
        $r16 := @caughtexception;

     label15:
        exitmonitor r26;

     label16:
        throw $r16;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1;
        int i0;
        java.lang.Object r2;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r5;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "ComponentName is null");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label3:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r7, -1);

        $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedNotificationListeners> = r1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r2;

     label4:
        return 1;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean setPermittedInputMethods(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean $z0, $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        android.app.admin.DevicePolicyEventLogger $r3, $r4, $r5;
        java.lang.String[] $r6, r21;
        java.lang.Object[] $r7;
        com.android.server.inputmethod.InputMethodManagerInternal $r8;
        java.util.ArrayList $r9;
        java.lang.Object $r10, r19;
        android.view.inputmethod.InputMethodInfo $r11;
        java.lang.String $r12;
        java.lang.Throwable $r13;
        android.content.ComponentName r14;
        java.util.List r15, r16;
        java.util.Iterator r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r14 := @parameter0: android.content.ComponentName;

        r15 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "ComponentName is null");

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        if r15 == null goto label04;

        $r8 = staticinvoke <com.android.server.inputmethod.InputMethodManagerInternal: com.android.server.inputmethod.InputMethodManagerInternal get()>();

        r16 = virtualinvoke $r8.<com.android.server.inputmethod.InputMethodManagerInternal: java.util.List getEnabledInputMethodListAsUser(int)>(i0);

        if r16 == null goto label04;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r18 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r10 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (android.view.inputmethod.InputMethodInfo) $r10;

        $r12 = virtualinvoke $r11.<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label02;

     label03:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkPackagesInPermittedListOrSystem(java.util.List,java.util.List,int)>($r9, r15, i0);

        if $z2 != 0 goto label04;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot set permitted input methods, because it contains already enabled input method.");

        return 0;

     label04:
        r19 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r19;

     label05:
        $r20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r14, -1);

        $r20.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods> = r15;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r19;

     label06:
        if r15 == null goto label07;

        $r6 = newarray (java.lang.String)[0];

        $r7 = interfaceinvoke r15.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r21 = (java.lang.String[]) $r7;

        goto label08;

     label07:
        r21 = null;

     label08:
        $r3 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(27);

        $r4 = virtualinvoke $r3.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r14);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>(r21);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return 1;

     label09:
        $r13 := @caughtexception;

     label10:
        exitmonitor r19;

     label11:
        throw $r13;

        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setPersonalAppsSuspended(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, z2;
        int i0;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r7;
        android.app.admin.DeviceAdminInfo $r4;
        java.lang.String $r5;
        long $l1;
        byte $b2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$upnDVQHzdwB9JRIQW0RioXiJMvQ $r6;
        android.app.admin.DevicePolicyEventLogger $r9, $r10, $r11;
        java.lang.Throwable $r12;
        android.content.ComponentName r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r13 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r13, -3, 0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r2);

        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r5 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceHandlesCheckPolicyComplianceIntent(int,java.lang.String)>(i0, $r5);

     label02:
        z2 = 0;

     label03:
        $z1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps>;

        if $z1 == z0 goto label05;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean mSuspendPersonalApps> = z0;

     label04:
        z2 = 1;

     label05:
        $l1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label07;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long mProfileOffDeadline> = 0L;

     label06:
        z2 = 1;

     label07:
        if z2 == 0 goto label09;

     label08:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label09:
        exitmonitor r1;

     label10:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$upnDVQHzdwB9JRIQW0RioXiJMvQ;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$upnDVQHzdwB9JRIQW0RioXiJMvQ: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r6);

        $r9 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(135);

        $r10 = virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r13);

        $r11 = virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label11:
        $r12 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setProfileEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r2;
        boolean $z0, $z1;
        android.content.pm.UserInfo $r5;
        java.lang.Throwable $r6;
        android.content.ComponentName r7;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$yyRZl2GpUexUXfLFFPH1uLwUVIk r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "ComponentName is null");

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r7, -1);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceManagedProfile(int,java.lang.String)>(i0, "enable the profile");

        $r5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z1 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isEnabled()>();

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "setProfileEnabled is called when the profile is already enabled");

        exitmonitor r1;

     label3:
        return;

     label4:
        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r8 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$yyRZl2GpUexUXfLFFPH1uLwUVIk;

        specialinvoke r8.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$yyRZl2GpUexUXfLFFPH1uLwUVIk: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i0);

        virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r8);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setProfileName(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7xrTEdFpImbnnwbWRuOeQoAGpSw $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r1);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7xrTEdFpImbnnwbWRuOeQoAGpSw;

        specialinvoke $r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7xrTEdFpImbnnwbWRuOeQoAGpSw: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,java.lang.String,android.content.ComponentName)>(r0, i0, r2, r1);

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r4);

        return;
    }

    public boolean setProfileOwner(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r2;
        java.lang.StringBuilder $r3, r36, r39;
        java.lang.IllegalArgumentException $r8, r38;
        java.lang.String $r9, $r10, $r13, $r22, $r24, r34;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r14;
        java.util.ArrayList $r15;
        com.android.server.devicepolicy.Owners $r16, $r17;
        com.android.server.devicepolicy.DeviceAdminServiceController $r23;
        android.content.Context $r25;
        android.app.admin.DevicePolicyEventLogger $r26, $r27, $r29;
        java.lang.String[] $r28;
        android.os.UserManager $r30;
        android.os.UserHandle $r31;
        java.lang.Throwable $r32;
        android.content.ComponentName r33;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r35;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6JgDkElDkUD02PU6ArKIybRSx74 r37;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r33 := @parameter0: android.content.ComponentName;

        r34 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        if r33 == null goto label15;

        $r10 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageInstalledForUser(java.lang.String,int)>($r10, i0);

        if $z2 == 0 goto label15;

        z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasIncompatibleAccountsOrNonAdbNoLock(int,android.content.ComponentName)>(i0, r33);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanSetProfileOwnerLocked(android.content.ComponentName,int,boolean)>(r33, i0, z0);

        r35 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r33, i0);

     label03:
        if r35 == null goto label11;

     label04:
        $r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r15 = $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mRemovingAdmins>;

        $z3 = virtualinvoke $r15.<java.util.ArrayList: boolean contains(java.lang.Object)>(r33);

        if $z3 != 0 goto label11;

        i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

     label05:
        if i1 == i0 goto label08;

     label06:
        $r30 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r31 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        $z5 = virtualinvoke $r30.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_add_managed_profile", $r31);

        if $z5 == 0 goto label08;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot set profile owner because of restriction.");

        exitmonitor r1;

     label07:
        return 0;

     label08:
        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z4 == 0 goto label09;

        $r25 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int,java.lang.String)>($r25, 617, "profile-owner");

        $r26 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(82);

        $r27 = virtualinvoke $r26.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r33);

        $r28 = newarray (java.lang.String)[1];

        $r28[0] = "profile-owner";

        $r29 = virtualinvoke $r27.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r28);

        virtualinvoke $r29.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void toggleBackupServiceActive(int,boolean)>(i0, 0);

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r16.<com.android.server.devicepolicy.Owners: void setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r33, r34, i0);

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r17.<com.android.server.devicepolicy.Owners: void writeProfileOwner(int)>(i0);

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile owner set: ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManager", $r22);

        r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r37 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6JgDkElDkUD02PU6ArKIybRSx74;

        specialinvoke r37.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$6JgDkElDkUD02PU6ArKIybRSx74: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r0, i0, r35);

        virtualinvoke r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r37);

        $r23 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController>;

        $r24 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r23.<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>($r24, i0, "set-profile-owner");

        exitmonitor r1;

     label10:
        return 1;

     label11:
        r38 = new java.lang.IllegalArgumentException;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not active admin: ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r13 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw r38;

     label12:
        $r32 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r32;

     label15:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not installed for userId:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        android.net.ProxyInfo r2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3BpC92RwmXncw9zPUT7Ffcu3Oeg $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.net.ProxyInfo;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3BpC92RwmXncw9zPUT7Ffcu3Oeg;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$3BpC92RwmXncw9zPUT7Ffcu3Oeg: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.net.ProxyInfo)>(r0, r2);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        return;
    }

    public void setRequiredStrongAuthTimeout(android.content.ComponentName, long, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, z5, z6;
        long l0, $l4, l8, l9, l11;
        int i1, $i6;
        java.lang.Object r1;
        com.android.internal.widget.LockPatternUtils $r2;
        byte $b2, $b3, $b5, $b7, $b10;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;
        com.android.internal.widget.LockSettingsInternal $r5, $r6;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r8 := @parameter0: android.content.ComponentName;

        l8 := @parameter1: long;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label16;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label01;

        goto label16;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "ComponentName is null");

        $b2 = l8 cmp 0L;

        if $b2 < 0 goto label02;

        z5 = 1;

        goto label03;

     label02:
        z5 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "Timeout must not be a negative number.");

        l0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getMinimumStrongAuthTimeoutMs()>();

        l9 = l8;

        $b3 = l8 cmp 0L;

        if $b3 == 0 goto label04;

        l9 = l8;

        $b7 = l8 cmp l0;

        if $b7 >= 0 goto label04;

        l9 = l0;

     label04:
        $b10 = l9 cmp 259200000L;

        if $b10 <= 0 goto label05;

        l11 = 259200000L;

        goto label06;

     label05:
        l11 = l9;

     label06:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        z6 = 0;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label07:
        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r8, -1, z0);

     label08:
        $l4 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout>;

        $b5 = $l4 cmp l11;

        if $b5 == 0 goto label10;

        r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long strongAuthUnlockTimeout> = l11;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label09:
        z6 = 1;

     label10:
        exitmonitor r1;

     label11:
        if z6 == 0 goto label12;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal>;

        virtualinvoke $r5.<com.android.internal.widget.LockSettingsInternal: void refreshStrongAuthTimeout(int)>(i1);

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i1);

        if $z3 == 0 goto label12;

        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeEnabled(int)>(i1);

        if $z4 != 0 goto label12;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockSettingsInternal mLockSettingsInternal>;

        $i6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i1);

        virtualinvoke $r6.<com.android.internal.widget.LockSettingsInternal: void refreshStrongAuthTimeout(int)>($i6);

     label12:
        return;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r7;

     label16:
        return;

        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public boolean setResetPasswordToken(android.content.ComponentName, byte[])
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        byte[] r1;
        java.lang.Object r2, $r9;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$4Rn8bUsWe_tjjwQ22_bs_xFo9tY r4;
        boolean z0, $z1, $z2;
        com.android.internal.widget.LockPatternUtils $r5;
        java.lang.IllegalArgumentException $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, r13;
        java.lang.Boolean $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: byte[];

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label8;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r5.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label1;

        goto label8;

     label1:
        if r1 == null goto label7;

        $i1 = lengthof r1;

        if $i1 < 32 goto label7;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r12, -1);

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$4Rn8bUsWe_tjjwQ22_bs_xFo9tY;

        specialinvoke r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$4Rn8bUsWe_tjjwQ22_bs_xFo9tY: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData,int,byte[])>(r0, r3, i0, r1);

        $r9 = virtualinvoke r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r4);

        $r10 = (java.lang.Boolean) $r9;

        z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r2;

     label3:
        return z0;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r11;

     label7:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token must be at least 32-byte long");

        throw $r6;

     label8:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r7;
        java.lang.Object r2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "ComponentName is null");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r7, -1);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider> = r1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setScreenCaptureDisabled(android.content.ComponentName, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, $z3;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        int i0;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "ComponentName is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r5, -1, z1);

     label03:
        if z1 == 0 goto label05;

     label04:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r2);

     label05:
        $z3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        if $z3 == z0 goto label10;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label06:
        if z1 == 0 goto label09;

     label07:
        i0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>(i0);

     label08:
        goto label09;

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateScreenCaptureDisabled(int,boolean)>(i0, z0);

     label10:
        exitmonitor r1;

     label11:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(29);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r5);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label12:
        $r4 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setSecondaryLockscreenEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r5 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanSetSecondaryLockscreenEnabled(android.content.ComponentName)>(r5);

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r6;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mSecondaryLockscreenEnabled> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r6;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r6;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r14, $r27, $r28, $r30, $r33, $r40;
        int i0, $i1, $i2;
        java.lang.Object r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r4, $r7;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1VPVEblQN9E9nRRmtfmNoNpYUZ4 r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        java.util.Set $r9, $r31;
        android.app.admin.DevicePolicyEventLogger $r10, $r11, $r13, $r16, $r17, $r19;
        java.lang.String[] $r12, $r18;
        android.os.UserManager $r15;
        java.lang.Object[] $r29, $r32;
        java.lang.Throwable $r34, $r35;
        android.content.ComponentName r41;
        java.lang.SecurityException r42, r43;
        java.lang.UnsupportedOperationException r44, r48;
        java.lang.StringBuilder r45, r47;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r41 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r41, "ComponentName is null");

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r41, -1);

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r41, i0);

        if $z0 == 0 goto label04;

        $r31 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST>;

        $z6 = interfaceinvoke $r31.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z6 != 0 goto label07;

        $z7 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCurrentUserDemo()>();

        if $z7 == 0 goto label03;

     label02:
        goto label07;

     label03:
        r42 = new java.lang.SecurityException;

        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = r1;

        $r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission denial: Device owners cannot update %1$s", $r32);

        specialinvoke r42.<java.lang.SecurityException: void <init>(java.lang.String)>($r33);

        throw r42;

     label04:
        $r9 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        $z1 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label07;

        $z5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCurrentUserDemo()>();

        if $z5 == 0 goto label06;

     label05:
        goto label07;

     label06:
        r43 = new java.lang.SecurityException;

        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = r1;

        $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission denial: Profile owners cannot update %1$s", $r29);

        specialinvoke r43.<java.lang.SecurityException: void <init>(java.lang.String)>($r30);

        throw r43;

     label07:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("location_mode");

        if $z8 == 0 goto label10;

        $r28 = virtualinvoke r41.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSetSecureSettingLocationModeCheckEnabled(java.lang.String,int)>($r28, i0);

        if $z4 != 0 goto label09;

     label08:
        goto label10;

     label09:
        r44 = new java.lang.UnsupportedOperationException;

        specialinvoke r44.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("location_mode is deprecated. Please use setLocationEnabled() instead.");

        throw r44;

     label10:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("install_non_market_apps");

        if $z2 == 0 goto label23;

        $r14 = virtualinvoke r41.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getTargetSdk(java.lang.String,int)>($r14, i0);

        if $i1 >= 26 goto label22;

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $z3 = virtualinvoke $r15.<android.os.UserManager: boolean isManagedProfile(int)>(i0);

        if $z3 != 0 goto label12;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring setSecureSetting request for ");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". User restriction ");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no_install_unknown_sources");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no_install_unknown_sources_globally");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be used instead.");

        $r27 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r27);

     label11:
        goto label20;

     label12:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        if $i2 != 0 goto label14;

     label13:
        z9 = 1;

        goto label15;

     label14:
        z9 = 0;

     label15:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)>(r41, "no_install_unknown_sources", z9, 0);

     label16:
        $r16 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(14);

        $r17 = virtualinvoke $r16.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r41);

        $r18 = newarray (java.lang.String)[2];

        $r18[0] = r1;

        $r18[1] = r2;

        $r19 = virtualinvoke $r17.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r18);

        virtualinvoke $r19.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label17:
        goto label20;

     label18:
        $r35 := @caughtexception;

     label19:
        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value: ");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for setting ");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r40 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", $r40);

     label20:
        exitmonitor r3;

     label21:
        return;

     label22:
        r48 = new java.lang.UnsupportedOperationException;

        specialinvoke r48.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("install_non_market_apps is deprecated. Please use one of the user restrictions no_install_unknown_sources or no_install_unknown_sources_globally instead.");

        throw r48;

     label23:
        r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1VPVEblQN9E9nRRmtfmNoNpYUZ4;

        specialinvoke r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$1VPVEblQN9E9nRRmtfmNoNpYUZ4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,int,java.lang.String)>(r0, r1, i0, r2);

        virtualinvoke r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r5);

        exitmonitor r3;

     label24:
        $r10 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(14);

        $r11 = virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r41);

        $r12 = newarray (java.lang.String)[2];

        $r12[0] = r1;

        $r12[1] = r2;

        $r13 = virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r12);

        virtualinvoke $r13.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label25:
        $r34 := @caughtexception;

     label26:
        exitmonitor r3;

     label27:
        throw $r34;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.NumberFormatException from label12 to label13 with label18;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.NumberFormatException from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.NumberFormatException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public void setSecurityLoggingEnabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r5;
        com.android.server.devicepolicy.SecurityLogMonitor $r6, $r10;
        android.app.admin.DevicePolicyEventLogger $r7, $r8, $r9;
        int $i0;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r12);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r12, -3);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $z2 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean securityLogGetLoggingEnabledProperty()>();

        if z0 != $z2 goto label04;

        exitmonitor r1;

     label03:
        return;

     label04:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void securityLogSetLoggingEnabledProperty(boolean)>(z0);

     label05:
        if z0 == 0 goto label08;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getSecurityLoggingEnabledUser()>();

        virtualinvoke $r10.<com.android.server.devicepolicy.SecurityLogMonitor: void start(int)>($i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybePauseDeviceWideLoggingLocked()>();

     label07:
        goto label09;

     label08:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor>;

        virtualinvoke $r6.<com.android.server.devicepolicy.SecurityLogMonitor: void stop()>();

     label09:
        exitmonitor r1;

     label10:
        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(15);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r12);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label11:
        $r11 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setShortSupportMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.CharSequence r1, $r7;
        int i0, $i1;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6;
        android.app.admin.DevicePolicyEventLogger $r8, $r9;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "ComponentName is null");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForUidLocked(android.content.ComponentName,int)>(r11, $i1);

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r1);

        if $z1 != 0 goto label3;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.CharSequence shortSupportMessage> = r1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label3:
        exitmonitor r2;

     label4:
        $r8 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(43);

        $r9 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setStartUserSessionMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.CharSequence r1;
        java.lang.Object r2;
        boolean $z0, $z1;
        java.lang.String $r4, r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6;
        int $i0;
        android.app.ActivityManagerInternal $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        if r1 == null goto label02;

        r10 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        goto label03;

     label02:
        r10 = null;

     label03:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label04:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r9, -2);

        $r4 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String startUserSessionMessage>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r4, r1);

        if $z1 == 0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String startUserSessionMessage> = r10;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r2;

     label07:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>();

        virtualinvoke $r7.<android.app.ActivityManagerInternal: void setSwitchingFromSystemUserMessage(java.lang.String)>(r10);

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r8;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean setStatusBarDisabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, z5;
        int i0, i1;
        java.lang.Object r1;
        java.lang.String $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7;
        android.app.IActivityTaskManager $r8;
        java.lang.Throwable $r9;
        android.os.RemoteException $r10;
        android.content.ComponentName r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r12;
        android.app.admin.DevicePolicyEventLogger $r14, $r15, $r16;
        java.lang.SecurityException r17, r18;
        java.lang.StringBuilder r19;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r11 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r11, -1);

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        if $z2 == 0 goto label16;

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z3 != 0 goto label15;

        r12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        z1 = r12.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled>;

     label02:
        if z1 == z0 goto label13;

        z5 = 0;

     label03:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityTaskManager getIActivityTaskManager()>();

        i1 = interfaceinvoke $r8.<android.app.IActivityTaskManager: int getLockTaskModeState()>();

     label04:
        if i1 == 0 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        goto label09;

     label07:
        $r10 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManager", "Failed to get LockTask mode");

     label09:
        if z5 != 0 goto label12;

     label10:
        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabledInternal(boolean,int)>(z0, i0);

        if $z4 != 0 goto label12;

        exitmonitor r1;

     label11:
        return 0;

     label12:
        r12.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mStatusBarDisabled> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label13:
        exitmonitor r1;

     label14:
        $r14 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(38);

        $r15 = virtualinvoke $r14.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r11);

        $r16 = virtualinvoke $r15.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z0);

        virtualinvoke $r16.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return 1;

     label15:
        r17 = new java.lang.SecurityException;

        specialinvoke r17.<java.lang.SecurityException: void <init>(java.lang.String)>("Managed profile cannot disable status bar");

        throw r17;

     label16:
        r18 = new java.lang.SecurityException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is neither the device owner or affiliated user\'s profile owner.");

        $r6 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw r18;

     label17:
        $r9 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch android.os.RemoteException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public int setStorageEncryption(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.Object r1, $r5;
        int i0, $i1, i3, i4, i5;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.util.ArrayList $r3, $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r6, r14;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;
        java.lang.StringBuilder r13;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: android.content.ComponentName;

        z4 := @parameter1: boolean;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "ComponentName is null");

        i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        if i3 == 0 goto label04;

     label02:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only owner/system user is allowed to set storage encryption. User ");

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted.");

        $r10 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r10);

        exitmonitor r1;

     label03:
        return 0;

     label04:
        r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r12, 7);

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isEncryptionSupported()>();

        if $z1 != 0 goto label06;

        exitmonitor r1;

     label05:
        return 0;

     label06:
        $z2 = r14.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        if $z2 == z4 goto label07;

        r14.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested> = z4;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i3);

     label07:
        r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

     label08:
        z5 = 0;

     label09:
        $r3 = r15.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label10:
        i4 = 0;

     label11:
        if i4 >= i0 goto label14;

     label12:
        $r4 = r15.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $z3 = $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        z5 = z5 | $z3;

     label13:
        i4 = i4 + 1;

        goto label11;

     label14:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setEncryptionRequested(boolean)>(z5);

     label15:
        if z5 == 0 goto label16;

        i5 = 3;

        goto label17;

     label16:
        i5 = 1;

     label17:
        exitmonitor r1;

     label18:
        return i5;

     label19:
        $r11 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void setSystemSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r10;
        java.lang.Object r3;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r4, $r11;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object[] $r9;
        java.lang.Throwable $r12;
        android.content.ComponentName r13;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$dhvmeszm1pcQE1_YdsBo8p9c6wM r14;
        java.lang.SecurityException r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r13 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "ComponentName is null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "String setting is null or empty");

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r13, -1);

        $r8 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SYSTEM_SETTINGS_WHITELIST>;

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r14 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$dhvmeszm1pcQE1_YdsBo8p9c6wM;

        specialinvoke r14.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$dhvmeszm1pcQE1_YdsBo8p9c6wM: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String,java.lang.String,int)>(r0, r1, r2, i0);

        virtualinvoke r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r14);

        exitmonitor r3;

     label2:
        return;

     label3:
        r15 = new java.lang.SecurityException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission denial: device owners cannot update %1$s", $r9);

        specialinvoke r15.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw r15;

     label4:
        $r12 := @caughtexception;

     label5:
        exitmonitor r3;

     label6:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setSystemUpdatePolicy(android.content.ComponentName, android.app.admin.SystemUpdatePolicy)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.app.admin.SystemUpdatePolicy r1;
        com.android.server.devicepolicy.Owners $r3, $r4, $r9, $r10;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Z1LI9Lyl_wMUQtV1EQlCfsxUFP4 $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r6;
        android.app.admin.DevicePolicyEventLogger $r7, $r8, r20;
        java.lang.Object $r11, $r12, r19;
        java.time.LocalDate $r13, $r14, $r15;
        java.lang.Throwable $r16;
        android.content.ComponentName r17;
        android.util.Pair r18;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r17 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.app.admin.SystemUpdatePolicy;

        if r1 == null goto label01;

        virtualinvoke r1.<android.app.admin.SystemUpdatePolicy: void validateType()>();

        virtualinvoke r1.<android.app.admin.SystemUpdatePolicy: void validateFreezePeriods()>();

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        r18 = virtualinvoke $r10.<com.android.server.devicepolicy.Owners: android.util.Pair getSystemUpdateFreezePeriodRecord()>();

        $r11 = r18.<android.util.Pair: java.lang.Object first>;

        $r13 = (java.time.LocalDate) $r11;

        $r12 = r18.<android.util.Pair: java.lang.Object second>;

        $r14 = (java.time.LocalDate) $r12;

        $r15 = staticinvoke <java.time.LocalDate: java.time.LocalDate now()>();

        virtualinvoke r1.<android.app.admin.SystemUpdatePolicy: void validateAgainstPreviousFreezePeriod(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)>($r13, $r14, $r15);

     label01:
        r19 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r19;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r17, -3);

     label03:
        i0 = 0;

        if r1 != null goto label06;

     label04:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r9.<com.android.server.devicepolicy.Owners: void clearSystemUpdatePolicy()>();

     label05:
        goto label07;

     label06:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r3.<com.android.server.devicepolicy.Owners: void setSystemUpdatePolicy(android.app.admin.SystemUpdatePolicy)>(r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateSystemUpdateFreezePeriodsRecord(boolean)>(0);

     label07:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r4.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

        exitmonitor r19;

     label08:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Z1LI9Lyl_wMUQtV1EQlCfsxUFP4;

        specialinvoke $r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$Z1LI9Lyl_wMUQtV1EQlCfsxUFP4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r5);

        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(50);

        r20 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r17);

        if r1 == null goto label09;

        i0 = virtualinvoke r1.<android.app.admin.SystemUpdatePolicy: int getPolicyType()>();

     label09:
        $r8 = virtualinvoke r20.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label10:
        $r16 := @caughtexception;

     label11:
        exitmonitor r19;

     label12:
        throw $r16;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean setTime(android.content.ComponentName, long)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        long l0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r7;
        int $i1;
        android.app.admin.DevicePolicyEventLogger $r4, $r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7e4uuP4UTiA9RIuQFlKNKQAB9wo $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null in setTime");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r1);

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsGlobalGetInt(java.lang.String,int)>("auto_time", 0);

        if $i1 != 1 goto label1;

        return 0;

     label1:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(133);

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7e4uuP4UTiA9RIuQFlKNKQAB9wo;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$7e4uuP4UTiA9RIuQFlKNKQAB9wo: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,long)>(r0, l0);

        virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r6);

        return 1;
    }

    public boolean setTimeZone(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r6;
        int $i0;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$5qNMqBX_bLyhFvh65S8aJdYLXAM $r5;
        android.app.admin.DevicePolicyEventLogger $r7, $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null in setTimeZone");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwnerOrProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r1);

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsGlobalGetInt(java.lang.String,int)>("auto_time_zone", 0);

        if $i0 != 1 goto label1;

        return 0;

     label1:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r5 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$5qNMqBX_bLyhFvh65S8aJdYLXAM;

        specialinvoke $r5.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$5qNMqBX_bLyhFvh65S8aJdYLXAM: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.lang.String)>(r0, r2);

        virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r5);

        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(134);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r1);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return 1;
    }

    public void setTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.PersistableBundle r1;
        boolean z0, $z1, $z2;
        int i0;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo r3;
        com.android.internal.widget.LockPatternUtils $r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r7;
        java.lang.Throwable $r9;
        android.content.ComponentName r10, r11;
        android.util.ArrayMap r12;
        java.lang.String r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r11 := @parameter1: android.content.ComponentName;

        r1 := @parameter2: android.os.PersistableBundle;

        z0 := @parameter3: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label7;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r4.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z2 != 0 goto label1;

        goto label7;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "admin is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "agent is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label2:
        $r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r10, 9, z0);

        r12 = $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.util.ArrayMap trustAgentInfos>;

        r13 = virtualinvoke r11.<android.content.ComponentName: java.lang.String flattenToString()>();

        r3 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo;

        specialinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin$TrustAgentInfo: void <init>(android.os.PersistableBundle)>(r1);

        virtualinvoke r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r3);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setUninstallBlocked(android.content.ComponentName, java.lang.String, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2;
        int i0;
        java.lang.Object r3;
        long l1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r11, $r14, r17;
        android.content.pm.IPackageManager $r5;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r8, $r10;
        java.lang.String[] $r9;
        android.os.RemoteException $r12;
        java.lang.Throwable $r13, $r15;
        android.content.ComponentName r16;
        boolean z1, z2;
        android.content.pm.PackageManagerInternal r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r3;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageScope(android.content.ComponentName,java.lang.String,int,java.lang.String)>(r16, r1, -1, "delegation-block-uninstall");

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.IPackageManager mIPackageManager>;

        interfaceinvoke $r5.<android.content.pm.IPackageManager: boolean setBlockUninstallForUser(java.lang.String,boolean,int)>(r2, z1, i0);

     label03:
        r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label04:
        virtualinvoke r17.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label05:
        goto label11;

     label06:
        $r13 := @caughtexception;

        goto label16;

     label07:
        $r12 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Failed to setBlockUninstallForUser", $r12);

     label09:
        r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

     label10:
        goto label04;

     label11:
        exitmonitor r3;

     label12:
        if z1 == 0 goto label13;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r20 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        virtualinvoke r20.<android.content.pm.PackageManagerInternal: void removeNonSystemPackageSuspensions(java.lang.String,int)>(r2, i0);

        virtualinvoke r20.<android.content.pm.PackageManagerInternal: void removeDistractingPackageRestrictions(java.lang.String,int)>(r2, i0);

        virtualinvoke r20.<android.content.pm.PackageManagerInternal: void flushPackageRestrictions(int)>(i0);

     label13:
        if r16 != null goto label14;

        z2 = 1;

        goto label15;

     label14:
        z2 = 0;

     label15:
        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(67);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>(z2);

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r2;

        $r10 = virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r9);

        virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label16:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

     label17:
        throw $r13;

     label18:
        $r15 := @caughtexception;

     label19:
        exitmonitor r3;

     label20:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch android.os.RemoteException from label02 to label03 with label07;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void setUserControlDisabledPackages(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1;
        java.lang.Object r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5;
        int $i0, $i1;
        android.app.admin.DevicePolicyEventLogger $r6, $r7, $r11;
        java.lang.String[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.Throwable $r12;
        android.content.ComponentName r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r13 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r13, "ComponentName is null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "packages is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r13);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackagesLocked(int,java.util.List)>($i0, r1);

        $r6 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(129);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r13);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r8 = newarray (java.lang.String)[$i1];

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.lang.String[]) $r9;

        $r11 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r10);

        virtualinvoke $r11.<android.app.admin.DevicePolicyEventLogger: void write()>();

        exitmonitor r2;

     label2:
        return;

     label3:
        $r12 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setUserIcon(android.content.ComponentName, android.graphics.Bitmap)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.graphics.Bitmap r1;
        java.lang.Object r2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r3;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$rgX_GNnoZT63e9X4mWS0Dsa6JtU r4;
        android.app.admin.DevicePolicyEventLogger $r7, $r8;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "ComponentName is null");

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r10, -1);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r4 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$rgX_GNnoZT63e9X4mWS0Dsa6JtU;

        specialinvoke r4.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$rgX_GNnoZT63e9X4mWS0Dsa6JtU: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,android.graphics.Bitmap)>(r0, i0, r1);

        virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r4);

        exitmonitor r2;

     label2:
        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(41);

        $r8 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r10);

        virtualinvoke $r8.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setUserProvisioningState(int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        boolean $z0, $z1, z2, $z3;
        com.android.server.devicepolicy.Owners $r2, $r3;
        java.lang.IllegalStateException $r4, r6;
        java.lang.Throwable $r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $i2 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        if i1 == $i2 goto label03;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        $z1 = virtualinvoke $r3.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>(i1);

        if $z1 != 0 goto label03;

        $i5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getManagedUserId(int)>(i1);

        if $i5 == -1 goto label02;

        goto label03;

     label02:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not allowed to change provisioning state unless a device or profile owner is set.");

        throw $r4;

     label03:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

        z2 = 1;

     label04:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdb()>();

        if $z3 == 0 goto label07;

        $i4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserProvisioningState(int)>(i1);

        if $i4 != 0 goto label06;

     label05:
        if i0 != 3 goto label06;

        z2 = 0;

        goto label08;

     label06:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not allowed to change provisioning state unless current provisioning state is unmanaged, and new state is finalized.");

        throw r6;

     label07:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageProfileAndDeviceOwners()>();

     label08:
        r7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

     label09:
        if z2 == 0 goto label11;

     label10:
        $i3 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void checkUserProvisioningStateTransition(int,int)>($i3, i0);

     label11:
        r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserProvisioningState> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        exitmonitor r1;

     label12:
        return;

     label13:
        $r5 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r5;

        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setUserRestriction(android.content.ComponentName, java.lang.String, boolean, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r8, $r12, $r15, r27;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10;
        int i0, i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r6, r26;
        java.lang.String[] $r5;
        java.lang.Object[] $r7;
        java.lang.Integer $r9;
        java.lang.Throwable $r16;
        android.content.ComponentName r17;
        java.lang.Object r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r19;
        java.lang.IllegalArgumentException r20;
        java.lang.SecurityException r21, r23;
        java.lang.StringBuilder r22, r24;
        android.os.Bundle r25;
        byte b2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r17 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r17, "ComponentName is null");

        $z2 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean isValidRestriction(java.lang.String)>(r1);

        if $z2 != 0 goto label01;

        return;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r18;

     label02:
        r19 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int,boolean)>(r17, -1, z1);

        $z3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r17, i0);

        if $z3 == 0 goto label06;

        $z8 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean canDeviceOwnerChange(java.lang.String)>(r1);

        if $z8 == 0 goto label05;

     label03:
        if z1 != 0 goto label04;

        goto label16;

     label04:
        r20 = new java.lang.IllegalArgumentException;

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use the parent instance in Device Owner mode");

        throw r20;

     label05:
        r21 = new java.lang.SecurityException;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device owner cannot set user restriction ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw r21;

     label06:
        if z1 != 0 goto label09;

     label07:
        $z7 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean canProfileOwnerChange(java.lang.String,int)>(r1, i0);

        if $z7 == 0 goto label09;

     label08:
        z9 = 1;

        goto label10;

     label09:
        z9 = 0;

     label10:
        if z1 == 0 goto label13;

     label11:
        $z5 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r19);

        if $z5 == 0 goto label13;

        $z6 = staticinvoke <com.android.server.pm.UserRestrictionsUtils: boolean canProfileOwnerOfOrganizationOwnedDeviceChange(java.lang.String)>(r1);

        if $z6 == 0 goto label13;

     label12:
        z10 = 1;

        goto label14;

     label13:
        z10 = 0;

     label14:
        if z9 != 0 goto label16;

        if z10 == 0 goto label15;

        goto label16;

     label15:
        r23 = new java.lang.SecurityException;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile owner cannot set user restriction ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw r23;

     label16:
        r25 = virtualinvoke r19.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.Bundle ensureUserRestrictions()>();

     label17:
        if z0 == 0 goto label20;

     label18:
        virtualinvoke r25.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r1, 1);

     label19:
        goto label21;

     label20:
        virtualinvoke r25.<android.os.Bundle: void remove(java.lang.String)>(r1);

     label21:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveUserRestrictionsLocked(int)>(i0);

        exitmonitor r18;

     label22:
        if z0 == 0 goto label23;

        b2 = 12;

        goto label24;

     label23:
        b2 = 13;

     label24:
        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(b2);

        r26 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r17);

        if z1 == 0 goto label25;

        r27 = "calledFromParent";

        goto label26;

     label25:
        r27 = "notCalledFromParent";

     label26:
        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r1;

        $r5[1] = r27;

        $r6 = virtualinvoke r26.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r5);

        virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $z4 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label29;

        if z0 == 0 goto label27;

        i3 = 210027;

        goto label28;

     label27:
        i3 = 210028;

     label28:
        $r7 = newarray (java.lang.Object)[3];

        $r8 = virtualinvoke r17.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r9;

        $r7[2] = r1;

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(i3, $r7);

     label29:
        return;

     label30:
        $r16 := @caughtexception;

     label31:
        exitmonitor r18;

     label32:
        throw $r16;

        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.lang.Throwable from label04 to label05 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label11 to label12 with label30;
        catch java.lang.Throwable from label15 to label16 with label30;
        catch java.lang.Throwable from label16 to label17 with label30;
        catch java.lang.Throwable from label18 to label19 with label30;
        catch java.lang.Throwable from label20 to label21 with label30;
        catch java.lang.Throwable from label21 to label22 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    public void startManagedQuickContact(java.lang.String, long, boolean, long, android.content.Intent)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, l1;
        boolean z0;
        android.content.Intent r1, r5;
        int i2;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$IA51YIZQ09ey9aTtvnl0DivINic $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r4 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        l1 := @parameter3: long;

        r1 := @parameter4: android.content.Intent;

        r5 = staticinvoke <android.provider.ContactsContract$QuickContact: android.content.Intent rebuildManagedQuickContactsIntent(java.lang.String,long,boolean,long,android.content.Intent)>(r4, l0, z0, l1, r1);

        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r2 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$IA51YIZQ09ey9aTtvnl0DivINic;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$IA51YIZQ09ey9aTtvnl0DivINic: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,android.content.Intent)>(r0, i2, r5);

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r2);

        return;
    }

    public int startUserInBackground(android.content.ComponentName, android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle r1;
        int i0;
        long l1;
        boolean z0, $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r5, $r7, $r9, $r10, $r11, $r13, $r15;
        android.app.ActivityManagerInternal $r6;
        android.app.IActivityManager $r8;
        java.lang.Throwable $r12;
        android.os.RemoteException $r14;
        android.content.ComponentName r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r16 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "ComponentName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "UserHandle is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r16);

        i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Managed profile cannot be started in background");

        return 2;

     label1:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>();

        $z2 = virtualinvoke $r6.<android.app.ActivityManagerInternal: boolean canStartMoreUsers()>();

        if $z2 != 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Cannot start more users in background");

     label3:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 3;

     label4:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        z0 = interfaceinvoke $r8.<android.app.IActivityManager: boolean startUserInBackground(int)>(i0);

     label5:
        if z0 == 0 goto label6;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 0;

     label6:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

     label7:
        $r12 := @caughtexception;

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw $r12;

     label8:
        $r14 := @caughtexception;

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        return 1;

        catch android.os.RemoteException from label2 to label3 with label8;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public boolean startViewCalendarEventInManagedProfile(java.lang.String, long, long, long, boolean, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        long l0, l1, l2;
        boolean z0, $z1, $z2, $z3;
        int i3, i4, i5;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r4, $r7;
        java.lang.SecurityException $r5;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$DYjq43wQj9C5KMmr2xUNBiq_h1w $r6;
        java.lang.Object $r8;
        java.lang.Boolean $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        z0 := @parameter4: boolean;

        i3 := @parameter5: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "Package name is empty");

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i4 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int binderGetCallingUid()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i5 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallingFromPackage(java.lang.String,int)>(r1, i4);

        if $z2 == 0 goto label2;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$DYjq43wQj9C5KMmr2xUNBiq_h1w;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$DYjq43wQj9C5KMmr2xUNBiq_h1w: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,java.lang.String,long,long,long,boolean,int)>(r0, i5, r1, l0, l1, l2, z0, i3);

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r6);

        $r9 = (java.lang.Boolean) $r8;

        $z3 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label2:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Input package name doesn\'t align with actual calling package.");

        throw $r5;
    }

    public int stopUser(android.content.ComponentName, android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ComponentName is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "UserHandle is null");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r1);

        i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "Managed profile cannot be stopped");

        return 2;

     label1:
        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int stopUserUnchecked(int)>(i0);

        return $i1;
    }

    public boolean switchUser(android.content.ComponentName, android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle r1;
        java.lang.Object r2;
        long l0;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r5, $r6, $r8, $r10, $r12;
        android.app.IActivityManager $r7;
        java.lang.Throwable $r9, $r13;
        android.os.RemoteException $r11;
        android.content.ComponentName r14;
        int i2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r14 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "ComponentName is null");

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r14, -2);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l0 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        i2 = 0;

        if r1 == null goto label04;

     label03:
        i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

     label04:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.app.IActivityManager getIActivityManager()>();

        z0 = interfaceinvoke $r7.<android.app.IActivityManager: boolean switchUser(int)>(i2);

     label05:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r8.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label06:
        return z0;

     label07:
        $r9 := @caughtexception;

        goto label12;

     label08:
        $r11 := @caughtexception;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManager", "Couldn\'t switch user", $r11);

     label10:
        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label11:
        return 0;

     label12:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l0);

     label13:
        throw $r9;

     label14:
        $r13 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch android.os.RemoteException from label04 to label05 with label08;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    void systemReady(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.devicepolicy.Owners $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        if i0 == 480 goto label09;

        if i0 == 550 goto label03;

        if i0 == 1000 goto label02;

        goto label10;

     label02:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void ensureDeviceOwnerUserStarted()>();

        goto label10;

     label03:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r1;

     label04:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void migrateToProfileOnOrganizationOwnedDeviceIfCompLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void applyManagedProfileRestrictionIfDeviceOwnerLocked()>();

        exitmonitor r1;

     label05:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void maybeStartSecurityLogMonitorOnActivityManagerReady()>();

        goto label10;

     label06:
        $r4 := @caughtexception;

     label07:
        exitmonitor r1;

     label08:
        throw $r4;

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void onLockSettingsReady()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void loadAdminDataAsync()>();

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.Owners mOwners>;

        virtualinvoke $r3.<com.android.server.devicepolicy.Owners: void systemReady()>();

     label10:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public void transferOwnership(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r19;
        int i0;
        long l1;
        java.lang.Object r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IllegalArgumentException $r3, $r6, $r8;
        java.lang.String $r4, $r5, r25, $r30;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7, $r9, $r14, $r26;
        android.os.Bundle $r10, $r11;
        java.lang.Throwable $r12, $r13, $r15, $r16, $r17, $r18, r24, r32;
        android.os.PersistableBundle r20, r23;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r21;
        android.app.admin.DeviceAdminInfo r22;
        android.app.admin.DevicePolicyEventLogger $r27, $r28, $r31;
        java.lang.String[] $r29;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r19 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        r20 := @parameter2: android.os.PersistableBundle;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r19, "Admin cannot be null.");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Target cannot be null.");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceProfileOrDeviceOwner(android.content.ComponentName)>(r19);

        $z1 = virtualinvoke r19.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label35;

        $r4 = virtualinvoke r19.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r5 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label34;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        r21 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r22 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int,boolean)>(r1, i0, 1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void checkActiveAdminPrecondition(android.content.ComponentName,android.app.admin.DeviceAdminInfo,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1, r22, r21);

        $z3 = virtualinvoke r22.<android.app.admin.DeviceAdminInfo: boolean supportsTransferOwnership()>();

        if $z3 == 0 goto label33;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        l1 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: long binderClearCallingIdentity()>();

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r2;

     label03:
        if r20 != null goto label07;

     label04:
        r23 = new android.os.PersistableBundle;

        specialinvoke r23.<android.os.PersistableBundle: void <init>()>();

     label05:
        goto label08;

     label06:
        $r18 := @caughtexception;

        r24 = $r18;

        goto label27;

     label07:
        r23 = r20;

     label08:
        $z4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>(r19, i0);

        if $z4 == 0 goto label17;

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void prepareTransfer(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,int,java.lang.String)>(r19, r1, r23, i0, "profile-owner");

     label10:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void transferProfileOwnershipLocked(android.content.ComponentName,android.content.ComponentName,int)>(r19, r1, i0);

     label11:
        $r11 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getTransferOwnershipAdminExtras(android.os.PersistableBundle)>(r23);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendProfileOwnerCommand(java.lang.String,android.os.Bundle,int)>("android.app.action.TRANSFER_OWNERSHIP_COMPLETE", $r11, i0);

     label12:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void postTransfer(java.lang.String,int)>("android.app.action.PROFILE_OWNER_CHANGED", i0);

     label13:
        $z6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUserAffiliatedWithDeviceLocked(int)>(i0);

        if $z6 == 0 goto label15;

     label14:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyAffiliatedProfileTransferOwnershipComplete(int)>(i0);

     label15:
        r25 = "profile-owner";

        goto label24;

     label16:
        $r16 := @caughtexception;

        r24 = $r16;

        goto label27;

     label17:
        r25 = null;

     label18:
        $z5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>(r19, i0);

        if $z5 == 0 goto label24;

     label19:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void prepareTransfer(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,int,java.lang.String)>(r19, r1, r23, i0, "device-owner");

     label20:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void transferDeviceOwnershipLocked(android.content.ComponentName,android.content.ComponentName,int)>(r19, r1, i0);

     label21:
        $r10 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getTransferOwnershipAdminExtras(android.os.PersistableBundle)>(r23);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDeviceOwnerCommand(java.lang.String,android.os.Bundle)>("android.app.action.TRANSFER_OWNERSHIP_COMPLETE", $r10);

     label22:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void postTransfer(java.lang.String,int)>("android.app.action.DEVICE_OWNER_CHANGED", i0);

     label23:
        r25 = "device-owner";

     label24:
        exitmonitor r2;

     label25:
        $r26 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r26.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        $r27 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(58);

        $r28 = virtualinvoke $r27.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>(r19);

        $r29 = newarray (java.lang.String)[2];

        $r30 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r29[0] = $r30;

        $r29[1] = r25;

        $r31 = virtualinvoke $r28.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r29);

        virtualinvoke $r31.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;

     label26:
        $r15 := @caughtexception;

        r24 = $r15;

     label27:
        exitmonitor r2;

     label28:
        throw r24;

     label29:
        $r17 := @caughtexception;

        r32 = $r17;

        goto label32;

     label30:
        $r12 := @caughtexception;

        r24 = $r12;

        goto label27;

     label31:
        $r13 := @caughtexception;

        r32 = $r13;

     label32:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r14.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderRestoreCallingIdentity(long)>(l1);

        throw r32;

     label33:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided target does not support ownership transfer.");

        throw $r8;

     label34:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided administrator and target have the same package name.");

        throw $r6;

     label35:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided administrator and target are the same object.");

        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label31;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label30;
        catch java.lang.Throwable from label19 to label20 with label16;
        catch java.lang.Throwable from label20 to label21 with label16;
        catch java.lang.Throwable from label21 to label22 with label16;
        catch java.lang.Throwable from label22 to label23 with label16;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch java.lang.Throwable from label27 to label28 with label30;
        catch java.lang.Throwable from label28 to label29 with label29;
    }

    public void uninstallCaCerts(android.content.ComponentName, java.lang.String, java.lang.String[])
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String[] r1;
        int i0;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2, $r4;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$BUPDdwFRc3Pb9VfSCy2Epjzh7Qo $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r5;
        java.util.Set $r6;
        java.util.List $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;
        java.lang.String r10;
        java.lang.Object r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r9 := @parameter0: android.content.ComponentName;

        r10 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String[];

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>(r9, r10);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r3 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$BUPDdwFRc3Pb9VfSCy2Epjzh7Qo;

        specialinvoke $r3.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$BUPDdwFRc3Pb9VfSCy2Epjzh7Qo: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int,java.lang.String[],android.content.ComponentName,java.lang.String)>(r0, i0, r1, r9, r10);

        virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r11;

     label2:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.Set mOwnerInstalledCaCerts>;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean removeAll(java.util.Collection)>($r7);

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label3:
        exitmonitor r11;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r11;

     label7:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void uninstallPackageWithActiveAdmins(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        boolean $z0, $z1, $z4, $z5, $z7, $z8;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$9 $r3;
        android.os.Handler $r4;
        java.lang.Object $r5, r18;
        java.lang.String $r6, $r7, $r9, r12;
        java.lang.IllegalArgumentException $r8, $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r13, r14, r23;
        android.util.Pair $r15;
        java.lang.Integer $r16;
        java.util.Set $r19;
        java.util.List r20;
        java.util.ArrayList $r21;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r12 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageDeviceAdmin()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r12);

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>($z1);

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        i0 = virtualinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceUserUnlocked(int)>(i0);

        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if r13 == null goto label02;

        $r9 = virtualinvoke r13.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z8 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z8 != 0 goto label01;

        goto label02;

     label01:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot uninstall a package with a profile owner");

        throw $r10;

     label02:
        r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getDeviceOwnerComponent(boolean)>(0);

        $i1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerUserId()>();

        if $i1 != i0 goto label04;

        if r14 == null goto label04;

        $r7 = virtualinvoke r14.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z7 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z7 != 0 goto label03;

        goto label04;

     label03:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot uninstall a package with a device owner");

        throw $r8;

     label04:
        $r15 = new android.util.Pair;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r15.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r12, $r16);

        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r18;

     label05:
        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set mPackagesToRemove>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r15);

        exitmonitor r18;

     label06:
        r20 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>(i0);

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        if r20 == null goto label09;

        r1 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.content.ComponentName) $r5;

        $r6 = virtualinvoke r23.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z5 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z5 == 0 goto label08;

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r23);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)>(r23, i0);

     label08:
        goto label07;

     label09:
        $i2 = interfaceinvoke $r21.<java.util.List: int size()>();

        if $i2 != 0 goto label10;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void startUninstallIntent(java.lang.String,int)>(r12, i0);

        goto label11;

     label10:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        $r3 = new com.android.server.devicepolicy.DevicePolicyManagerService$9;

        specialinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$9: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,java.util.List,int,java.lang.String)>(r0, $r21, i0, r12);

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 10000L);

     label11:
        return;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r18;

     label14:
        throw $r11;

        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean updateOverrideApn(android.content.ComponentName, int, android.telephony.data.ApnSetting)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.telephony.data.ApnSetting r1;
        boolean $z0, $z1, $z2;
        android.content.Context $r4;
        java.lang.Object $r5, $r8;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$C3_dNtMln9d5mQJ_0HLI24dfI_A $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r7;
        java.lang.Boolean $r9;
        android.content.ComponentName r10;
        android.telephony.TelephonyManager r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r10 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 := @parameter2: android.telephony.data.ApnSetting;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label4;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasTelephonyFeature>;

        if $z1 != 0 goto label1;

        goto label4;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "ComponentName is null in updateOverrideApn");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "ApnSetting is null in updateOverrideApn");

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceDeviceOwner(android.content.ComponentName)>(r10);

        if i0 >= 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r11 = (android.telephony.TelephonyManager) $r5;

        if r11 == null goto label3;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r6 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$C3_dNtMln9d5mQJ_0HLI24dfI_A;

        specialinvoke $r6.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$C3_dNtMln9d5mQJ_0HLI24dfI_A: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.telephony.TelephonyManager,int,android.telephony.data.ApnSetting)>(r0, r11, i0, r1);

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: java.lang.Object binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r6);

        $r9 = (java.lang.Boolean) $r8;

        $z2 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", "TelephonyManager is null when trying to modify override apn");

        return 0;

     label4:
        return 0;
    }

    void updateUserSetupCompleteAndPaired()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3, i4;
        android.os.UserManager $r1;
        java.lang.Object $r2, r11, r14;
        android.content.pm.UserInfo $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4, $r5;
        boolean $z0, $z1, $z2;
        com.android.server.devicepolicy.DeviceStateCacheImpl $r6;
        java.lang.Throwable $r7, $r8;
        java.util.List r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r10, r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r9 = virtualinvoke $r1.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        i0 = interfaceinvoke r9.<java.util.List: int size()>();

        i4 = 0;

     label01:
        if i4 >= i0 goto label15;

        $r2 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(i4);

        $r3 = (android.content.pm.UserInfo) $r2;

        i1 = $r3.<android.content.pm.UserInfo: int id>;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i2 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsSecureGetIntForUser(java.lang.String,int,int)>("user_setup_complete", 0, i1);

        if $i2 == 0 goto label08;

        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $z1 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        if $z1 != 0 goto label08;

        r10.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete> = 1;

        if i1 != 0 goto label02;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache>;

        virtualinvoke $r6.<com.android.server.devicepolicy.DeviceStateCacheImpl: void setDeviceProvisioned(boolean)>(1);

     label02:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r11;

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        exitmonitor r11;

     label04:
        goto label08;

     label05:
        $r8 := @caughtexception;

     label06:
        exitmonitor r11;

     label07:
        throw $r8;

     label08:
        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mIsWatch>;

        if $z2 == 0 goto label14;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i3 = virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int settingsSecureGetIntForUser(java.lang.String,int,int)>("device_paired", 0, i1);

        if $i3 == 0 goto label14;

        r13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $z0 = r13.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPaired>;

        if $z0 != 0 goto label14;

        r13.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mPaired> = 1;

        r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r14;

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        exitmonitor r14;

     label10:
        goto label14;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r14;

     label13:
        throw $r7;

     label14:
        i4 = i4 + 1;

        goto label01;

     label15:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void validatePasswordOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int $i0, $i1, $i2, $i4, $i5, i6;
        java.util.ArrayList $r3, $r9;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;
        java.lang.Object $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r11;
        boolean z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $i0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i0 < 0 goto label4;

        $r3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i6 = $i1 - 1;

     label1:
        z1 = 0;

        if i6 < 0 goto label3;

        $r9 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r11 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r10;

        $i4 = virtualinvoke $r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        $i5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i4 != $i5 goto label2;

        z1 = 1;

        goto label3;

     label2:
        i6 = i6 + -1;

        goto label1;

     label3:
        if z1 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previous password owner ");

        $i2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer active; disabling");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManager", $r8);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = -1;

     label4:
        return;
    }

    public void wipeDataWithReason(int, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        android.app.admin.DevicePolicyEventLogger r2, $r10, $r29, $r32;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r3, $r6, $r19;
        java.lang.SecurityException $r4, $r22, $r23;
        java.lang.Object[] $r5, $r11;
        java.lang.Integer $r7;
        java.lang.String $r8, $r14, r25, r27, r33, r34;
        java.lang.String[] $r9;
        android.app.admin.DeviceAdminInfo $r12, $r16, $r30;
        android.content.ComponentName $r13, $r17, $r31;
        java.lang.Boolean $r15;
        com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fGkKJ1VMbsV8nZ73Dlvo3_N5_2Q $r18;
        android.content.Context $r20, $r21;
        java.lang.Throwable $r24;
        java.lang.Object r26;
        android.os.UserHandle $r28;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r25 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return;

     label01:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i1 = virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceFullCrossUsersPermission(int)>($i1);

        r26 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.Object getLockObject()>();

        entermonitor r26;

     label02:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 4);

        exitmonitor r26;

     label03:
        if r1 == null goto label14;

        z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r1);

        if z0 == 0 goto label05;

        if z1 == 0 goto label04;

        goto label05;

     label04:
        $r23 = new java.lang.SecurityException;

        specialinvoke $r23.<java.lang.SecurityException: void <init>(java.lang.String)>("Wiping the entire device can only be done by a profileowner on organization-owned device.");

        throw $r23;

     label05:
        $i3 = i0 & 2;

        if $i3 == 0 goto label07;

        $z3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin)>(r1);

        if $z3 != 0 goto label07;

        if z1 == 0 goto label06;

        goto label07;

     label06:
        $r22 = new java.lang.SecurityException;

        specialinvoke $r22.<java.lang.SecurityException: void <init>(java.lang.String)>("Only device owners or proflie owners of organization-owned device can set WIPE_RESET_PROTECTION_DATA");

        throw $r22;

     label07:
        r27 = r25;

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r25);

        if $z4 == 0 goto label09;

        if z1 == 0 goto label08;

        if z0 != 0 goto label08;

        $r21 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r27 = virtualinvoke $r21.<android.content.Context: java.lang.String getString(int)>(17040050);

        goto label09;

     label08:
        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r27 = virtualinvoke $r20.<android.content.Context: java.lang.String getString(int)>(17041496);

     label09:
        $r28 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        i4 = virtualinvoke $r28.<android.os.UserHandle: int getIdentifier()>();

        if z1 == 0 goto label11;

        if z0 == 0 goto label10;

        i4 = 0;

        goto label11;

     label10:
        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $r18 = new com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fGkKJ1VMbsV8nZ73Dlvo3_N5_2Q;

        specialinvoke $r18.<com.android.server.devicepolicy._$$Lambda$DevicePolicyManagerService$fGkKJ1VMbsV8nZ73Dlvo3_N5_2Q: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        virtualinvoke $r19.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void binderWithCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r18);

     label11:
        $r29 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(11);

        $r30 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r31 = virtualinvoke $r30.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r32 = virtualinvoke $r29.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(android.content.ComponentName)>($r31);

        r2 = virtualinvoke $r32.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        if z0 == 0 goto label12;

        r33 = "calledFromParent";

        goto label13;

     label12:
        r33 = "notCalledFromParent";

     label13:
        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r33;

        $r10 = virtualinvoke r2.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r9);

        virtualinvoke $r10.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r11 = newarray (java.lang.Object)[2];

        $r12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r13 = virtualinvoke $r12.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r14 = virtualinvoke $r13.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        $r11[0] = $r14;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r11[1] = $r15;

        r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DevicePolicyManager.wipeDataWithReason() from %s, organization-owned? %s", $r11);

        $r16 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r17 = virtualinvoke $r16.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDataNoLock(android.content.ComponentName,int,java.lang.String,java.lang.String,int)>($r17, i0, r34, r27, i4);

        return;

     label14:
        $r4 = new java.lang.SecurityException;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        $i2 = virtualinvoke $r6.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: int userHandleGetCallingUserId()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No active admin for user %d", $r5);

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label15:
        $r24 := @caughtexception;

     label16:
        exitmonitor r26;

     label17:
        throw $r24;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }
}
