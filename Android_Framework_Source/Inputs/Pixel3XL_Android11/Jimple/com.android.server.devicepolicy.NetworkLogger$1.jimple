class com.android.server.devicepolicy.NetworkLogger$1 extends com.android.server.net.BaseNetdEventCallback
{
    final com.android.server.devicepolicy.NetworkLogger this$0;

    void <init>(com.android.server.devicepolicy.NetworkLogger)
    {
        com.android.server.devicepolicy.NetworkLogger$1 r0;
        com.android.server.devicepolicy.NetworkLogger r1;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger$1;

        r1 := @parameter0: com.android.server.devicepolicy.NetworkLogger;

        r0.<com.android.server.devicepolicy.NetworkLogger$1: com.android.server.devicepolicy.NetworkLogger this$0> = r1;

        specialinvoke r0.<com.android.server.net.BaseNetdEventCallback: void <init>()>();

        return;
    }

    private void sendNetworkEvent(android.app.admin.NetworkEvent)
    {
        com.android.server.devicepolicy.NetworkLogger$1 r0;
        android.app.admin.NetworkEvent r1;
        android.os.Message r2;
        com.android.server.devicepolicy.NetworkLogger $r4, $r7;
        com.android.server.devicepolicy.NetworkLoggingHandler $r5, $r8;
        android.os.Bundle $r6;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger$1;

        r1 := @parameter0: android.app.admin.NetworkEvent;

        $r4 = r0.<com.android.server.devicepolicy.NetworkLogger$1: com.android.server.devicepolicy.NetworkLogger this$0>;

        $r5 = staticinvoke <com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler access$200(com.android.server.devicepolicy.NetworkLogger)>($r4);

        r2 = virtualinvoke $r5.<com.android.server.devicepolicy.NetworkLoggingHandler: android.os.Message obtainMessage(int)>(1);

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        virtualinvoke $r6.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("network_event", r1);

        virtualinvoke r2.<android.os.Message: void setData(android.os.Bundle)>($r6);

        $r7 = r0.<com.android.server.devicepolicy.NetworkLogger$1: com.android.server.devicepolicy.NetworkLogger this$0>;

        $r8 = staticinvoke <com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler access$200(com.android.server.devicepolicy.NetworkLogger)>($r7);

        virtualinvoke $r8.<com.android.server.devicepolicy.NetworkLoggingHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void onConnectEvent(java.lang.String, int, long, int)
    {
        com.android.server.devicepolicy.NetworkLogger$1 r0;
        java.lang.String r1, $r7;
        int i0, i2;
        long l1;
        com.android.server.devicepolicy.NetworkLogger $r2, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        android.app.admin.ConnectEvent $r4;
        android.content.pm.PackageManagerInternal $r6;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger$1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.devicepolicy.NetworkLogger$1: com.android.server.devicepolicy.NetworkLogger this$0>;

        $r3 = staticinvoke <com.android.server.devicepolicy.NetworkLogger: java.util.concurrent.atomic.AtomicBoolean access$000(com.android.server.devicepolicy.NetworkLogger)>($r2);

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = new android.app.admin.ConnectEvent;

        $r5 = r0.<com.android.server.devicepolicy.NetworkLogger$1: com.android.server.devicepolicy.NetworkLogger this$0>;

        $r6 = staticinvoke <com.android.server.devicepolicy.NetworkLogger: android.content.pm.PackageManagerInternal access$100(com.android.server.devicepolicy.NetworkLogger)>($r5);

        $r7 = virtualinvoke $r6.<android.content.pm.PackageManagerInternal: java.lang.String getNameForUid(int)>(i2);

        specialinvoke $r4.<android.app.admin.ConnectEvent: void <init>(java.lang.String,int,java.lang.String,long)>(r1, i0, $r7, l1);

        specialinvoke r0.<com.android.server.devicepolicy.NetworkLogger$1: void sendNetworkEvent(android.app.admin.NetworkEvent)>($r4);

        return;
    }

    public void onDnsEvent(int, int, int, java.lang.String, java.lang.String[], int, long, int)
    {
        com.android.server.devicepolicy.NetworkLogger$1 r0;
        int i0, i1, i2, i3, i5;
        java.lang.String r1, $r8;
        java.lang.String[] r2;
        long l4;
        com.android.server.devicepolicy.NetworkLogger $r3, $r6;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        boolean $z0;
        android.app.admin.DnsEvent $r5;
        android.content.pm.PackageManagerInternal $r7;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String[];

        i3 := @parameter5: int;

        l4 := @parameter6: long;

        i5 := @parameter7: int;

        $r3 = r0.<com.android.server.devicepolicy.NetworkLogger$1: com.android.server.devicepolicy.NetworkLogger this$0>;

        $r4 = staticinvoke <com.android.server.devicepolicy.NetworkLogger: java.util.concurrent.atomic.AtomicBoolean access$000(com.android.server.devicepolicy.NetworkLogger)>($r3);

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new android.app.admin.DnsEvent;

        $r6 = r0.<com.android.server.devicepolicy.NetworkLogger$1: com.android.server.devicepolicy.NetworkLogger this$0>;

        $r7 = staticinvoke <com.android.server.devicepolicy.NetworkLogger: android.content.pm.PackageManagerInternal access$100(com.android.server.devicepolicy.NetworkLogger)>($r6);

        $r8 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: java.lang.String getNameForUid(int)>(i5);

        specialinvoke $r5.<android.app.admin.DnsEvent: void <init>(java.lang.String,java.lang.String[],int,java.lang.String,long)>(r1, r2, i3, $r8, l4);

        specialinvoke r0.<com.android.server.devicepolicy.NetworkLogger$1: void sendNetworkEvent(android.app.admin.NetworkEvent)>($r5);

        return;
    }
}
