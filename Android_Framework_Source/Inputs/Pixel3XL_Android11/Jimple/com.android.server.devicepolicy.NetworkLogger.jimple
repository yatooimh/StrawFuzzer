final class com.android.server.devicepolicy.NetworkLogger extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final com.android.server.devicepolicy.DevicePolicyManagerService mDpm;
    private com.android.server.ServiceThread mHandlerThread;
    private android.net.IIpConnectivityMetrics mIpConnectivityMetrics;
    private final java.util.concurrent.atomic.AtomicBoolean mIsLoggingEnabled;
    private final android.net.INetdEventCallback mNetdEventCallback;
    private com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler;
    private final android.content.pm.PackageManagerInternal mPm;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Lcom/android/server/devicepolicy/NetworkLogger;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG> = $r1;

        return;
    }

    void <init>(com.android.server.devicepolicy.DevicePolicyManagerService, android.content.pm.PackageManagerInternal)
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        com.android.server.devicepolicy.DevicePolicyManagerService r1;
        android.content.pm.PackageManagerInternal r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        com.android.server.devicepolicy.NetworkLogger$1 $r4;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r2 := @parameter1: android.content.pm.PackageManagerInternal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.devicepolicy.NetworkLogger: java.util.concurrent.atomic.AtomicBoolean mIsLoggingEnabled> = $r3;

        $r4 = new com.android.server.devicepolicy.NetworkLogger$1;

        specialinvoke $r4.<com.android.server.devicepolicy.NetworkLogger$1: void <init>(com.android.server.devicepolicy.NetworkLogger)>(r0);

        r0.<com.android.server.devicepolicy.NetworkLogger: android.net.INetdEventCallback mNetdEventCallback> = $r4;

        r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.DevicePolicyManagerService mDpm> = r1;

        r0.<com.android.server.devicepolicy.NetworkLogger: android.content.pm.PackageManagerInternal mPm> = r2;

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$000(com.android.server.devicepolicy.NetworkLogger)
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.devicepolicy.NetworkLogger;

        $r1 = r0.<com.android.server.devicepolicy.NetworkLogger: java.util.concurrent.atomic.AtomicBoolean mIsLoggingEnabled>;

        return $r1;
    }

    static android.content.pm.PackageManagerInternal access$100(com.android.server.devicepolicy.NetworkLogger)
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        android.content.pm.PackageManagerInternal $r1;

        r0 := @parameter0: com.android.server.devicepolicy.NetworkLogger;

        $r1 = r0.<com.android.server.devicepolicy.NetworkLogger: android.content.pm.PackageManagerInternal mPm>;

        return $r1;
    }

    static com.android.server.devicepolicy.NetworkLoggingHandler access$200(com.android.server.devicepolicy.NetworkLogger)
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        com.android.server.devicepolicy.NetworkLoggingHandler $r1;

        r0 := @parameter0: com.android.server.devicepolicy.NetworkLogger;

        $r1 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler>;

        return $r1;
    }

    private boolean checkIpConnectivityMetricsService()
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        android.net.IIpConnectivityMetrics r1, $r2;
        com.android.server.devicepolicy.DevicePolicyManagerService $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r4;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        $r2 = r0.<com.android.server.devicepolicy.NetworkLogger: android.net.IIpConnectivityMetrics mIpConnectivityMetrics>;

        if $r2 == null goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.DevicePolicyManagerService mDpm>;

        $r4 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        r1 = virtualinvoke $r4.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: android.net.IIpConnectivityMetrics getIIpConnectivityMetrics()>();

        if r1 != null goto label2;

        return 0;

     label2:
        r0.<com.android.server.devicepolicy.NetworkLogger: android.net.IIpConnectivityMetrics mIpConnectivityMetrics> = r1;

        return 1;
    }

    void discardLogs()
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        com.android.server.devicepolicy.NetworkLoggingHandler r1;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        r1 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.devicepolicy.NetworkLoggingHandler: void discardLogs()>();

     label1:
        return;
    }

    long forceBatchFinalization()
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        com.android.server.devicepolicy.NetworkLoggingHandler $r1;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        $r1 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler>;

        $l0 = virtualinvoke $r1.<com.android.server.devicepolicy.NetworkLoggingHandler: long forceBatchFinalization()>();

        return $l0;
    }

    void pause()
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        com.android.server.devicepolicy.NetworkLoggingHandler r1;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        r1 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.devicepolicy.NetworkLoggingHandler: void pause()>();

     label1:
        return;
    }

    void resume()
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        com.android.server.devicepolicy.NetworkLoggingHandler r1;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        r1 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.devicepolicy.NetworkLoggingHandler: void resume()>();

     label1:
        return;
    }

    java.util.List retrieveLogs(long)
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        long l0;
        com.android.server.devicepolicy.NetworkLoggingHandler $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.devicepolicy.NetworkLoggingHandler: java.util.List retrieveFullLogBatch(long)>(l0);

        return $r2;
    }

    boolean startNetworkLogging()
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        java.lang.String $r1, $r4, $r9, $r11;
        boolean $z0, $z1;
        android.net.INetdEventCallback $r2;
        android.net.IIpConnectivityMetrics $r3;
        com.android.server.ServiceThread $r5, r12;
        android.os.Looper $r6;
        com.android.server.devicepolicy.DevicePolicyManagerService $r7;
        java.util.concurrent.atomic.AtomicBoolean $r8;
        android.os.RemoteException $r10;
        com.android.server.devicepolicy.NetworkLoggingHandler r13;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        $r1 = <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, "Starting network logging.");

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.NetworkLogger: boolean checkIpConnectivityMetricsService()>();

        if $z0 != 0 goto label1;

        $r9 = <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r9, "Failed to register callback with IIpConnectivityMetrics.");

        return 0;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.NetworkLogger: android.net.IIpConnectivityMetrics mIpConnectivityMetrics>;

        $r2 = r0.<com.android.server.devicepolicy.NetworkLogger: android.net.INetdEventCallback mNetdEventCallback>;

        $z1 = interfaceinvoke $r3.<android.net.IIpConnectivityMetrics: boolean addNetdEventCallback(int,android.net.INetdEventCallback)>(1, $r2);

        if $z1 == 0 goto label3;

        r12 = new com.android.server.ServiceThread;

        $r4 = <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG>;

        specialinvoke r12.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>($r4, 10, 0);

        r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.ServiceThread mHandlerThread> = r12;

        virtualinvoke r12.<com.android.server.ServiceThread: void start()>();

        r13 = new com.android.server.devicepolicy.NetworkLoggingHandler;

        $r5 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.ServiceThread mHandlerThread>;

        $r6 = virtualinvoke $r5.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        $r7 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.DevicePolicyManagerService mDpm>;

        specialinvoke r13.<com.android.server.devicepolicy.NetworkLoggingHandler: void <init>(android.os.Looper,com.android.server.devicepolicy.DevicePolicyManagerService)>($r6, $r7);

        r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.devicepolicy.NetworkLoggingHandler mNetworkLoggingHandler> = r13;

        virtualinvoke r13.<com.android.server.devicepolicy.NetworkLoggingHandler: void scheduleBatchFinalization()>();

        $r8 = r0.<com.android.server.devicepolicy.NetworkLogger: java.util.concurrent.atomic.AtomicBoolean mIsLoggingEnabled>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r10 := @caughtexception;

        $r11 = <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Failed to make remote calls to register the callback", $r10);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    boolean stopNetworkLogging()
    {
        com.android.server.devicepolicy.NetworkLogger r0;
        boolean z0, $z1;
        com.android.server.ServiceThread r1, r9, r10, r13;
        java.lang.String $r2, $r5, $r8;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        android.net.IIpConnectivityMetrics $r4;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.devicepolicy.NetworkLogger;

        $r2 = <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, "Stopping network logging");

        $r3 = r0.<com.android.server.devicepolicy.NetworkLogger: java.util.concurrent.atomic.AtomicBoolean mIsLoggingEnabled>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        virtualinvoke r0.<com.android.server.devicepolicy.NetworkLogger: void discardLogs()>();

     label01:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.NetworkLogger: boolean checkIpConnectivityMetricsService()>();

        if $z1 != 0 goto label04;

        $r5 = <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r5, "Failed to unregister callback with IIpConnectivityMetrics.");

     label02:
        r9 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.ServiceThread mHandlerThread>;

        if r9 == null goto label03;

        virtualinvoke r9.<com.android.server.ServiceThread: boolean quitSafely()>();

     label03:
        return 1;

     label04:
        $r4 = r0.<com.android.server.devicepolicy.NetworkLogger: android.net.IIpConnectivityMetrics mIpConnectivityMetrics>;

        z0 = interfaceinvoke $r4.<android.net.IIpConnectivityMetrics: boolean removeNetdEventCallback(int)>(1);

     label05:
        r10 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.ServiceThread mHandlerThread>;

        if r10 == null goto label06;

        virtualinvoke r10.<com.android.server.ServiceThread: boolean quitSafely()>();

     label06:
        return z0;

     label07:
        $r6 := @caughtexception;

        goto label12;

     label08:
        $r7 := @caughtexception;

     label09:
        $r8 = <com.android.server.devicepolicy.NetworkLogger: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed to make remote calls to unregister the callback", $r7);

     label10:
        r13 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.ServiceThread mHandlerThread>;

        if r13 == null goto label11;

        virtualinvoke r13.<com.android.server.ServiceThread: boolean quitSafely()>();

     label11:
        return 1;

     label12:
        r1 = r0.<com.android.server.devicepolicy.NetworkLogger: com.android.server.ServiceThread mHandlerThread>;

        if r1 == null goto label13;

        virtualinvoke r1.<com.android.server.ServiceThread: boolean quitSafely()>();

     label13:
        throw $r6;

        catch android.os.RemoteException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch android.os.RemoteException from label04 to label05 with label08;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }
}
