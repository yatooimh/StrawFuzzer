class com.android.server.devicepolicy.NetworkLoggingHandler$1 extends java.lang.Object implements android.app.AlarmManager$OnAlarmListener
{
    final com.android.server.devicepolicy.NetworkLoggingHandler this$0;

    void <init>(com.android.server.devicepolicy.NetworkLoggingHandler)
    {
        com.android.server.devicepolicy.NetworkLoggingHandler$1 r0;
        com.android.server.devicepolicy.NetworkLoggingHandler r1;

        r0 := @this: com.android.server.devicepolicy.NetworkLoggingHandler$1;

        r1 := @parameter0: com.android.server.devicepolicy.NetworkLoggingHandler;

        r0.<com.android.server.devicepolicy.NetworkLoggingHandler$1: com.android.server.devicepolicy.NetworkLoggingHandler this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onAlarm()
    {
        com.android.server.devicepolicy.NetworkLoggingHandler$1 r0;
        java.lang.StringBuilder $r1;
        com.android.server.devicepolicy.NetworkLoggingHandler $r3, $r8, $r9, r13;
        java.util.ArrayList $r4;
        int $i0;
        java.lang.String $r7, r11;
        java.lang.Throwable $r10;
        android.os.Bundle r14;

        r0 := @this: com.android.server.devicepolicy.NetworkLoggingHandler$1;

        r11 = staticinvoke <com.android.server.devicepolicy.NetworkLoggingHandler: java.lang.String access$000()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received a batch finalization timeout alarm, finalizing ");

        $r3 = r0.<com.android.server.devicepolicy.NetworkLoggingHandler$1: com.android.server.devicepolicy.NetworkLoggingHandler this$0>;

        $r4 = staticinvoke <com.android.server.devicepolicy.NetworkLoggingHandler: java.util.ArrayList access$100(com.android.server.devicepolicy.NetworkLoggingHandler)>($r3);

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pending events.");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r11, $r7);

        r13 = r0.<com.android.server.devicepolicy.NetworkLoggingHandler$1: com.android.server.devicepolicy.NetworkLoggingHandler this$0>;

        entermonitor r13;

     label1:
        $r8 = r0.<com.android.server.devicepolicy.NetworkLoggingHandler$1: com.android.server.devicepolicy.NetworkLoggingHandler this$0>;

        r14 = staticinvoke <com.android.server.devicepolicy.NetworkLoggingHandler: android.os.Bundle access$200(com.android.server.devicepolicy.NetworkLoggingHandler)>($r8);

        exitmonitor r13;

     label2:
        if r14 == null goto label3;

        $r9 = r0.<com.android.server.devicepolicy.NetworkLoggingHandler$1: com.android.server.devicepolicy.NetworkLoggingHandler this$0>;

        staticinvoke <com.android.server.devicepolicy.NetworkLoggingHandler: void access$300(com.android.server.devicepolicy.NetworkLoggingHandler,android.os.Bundle)>($r9, r14);

     label3:
        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r13;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
