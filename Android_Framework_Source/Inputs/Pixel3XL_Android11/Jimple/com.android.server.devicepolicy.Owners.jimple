class com.android.server.devicepolicy.Owners extends java.lang.Object
{
    private static final java.lang.String ATTR_CAN_ACCESS_DEVICE_IDS;
    private static final java.lang.String ATTR_COMPONENT_NAME;
    private static final java.lang.String ATTR_FREEZE_RECORD_END;
    private static final java.lang.String ATTR_FREEZE_RECORD_START;
    private static final java.lang.String ATTR_NAME;
    private static final java.lang.String ATTR_PACKAGE;
    private static final java.lang.String ATTR_PROFILE_OWNER_OF_ORG_OWNED_DEVICE;
    private static final java.lang.String ATTR_REMOTE_BUGREPORT_HASH;
    private static final java.lang.String ATTR_REMOTE_BUGREPORT_URI;
    private static final java.lang.String ATTR_USERID;
    private static final java.lang.String ATTR_USER_RESTRICTIONS_MIGRATED;
    private static final boolean DEBUG;
    private static final java.lang.String DEVICE_OWNER_XML;
    private static final java.lang.String DEVICE_OWNER_XML_LEGACY;
    private static final java.lang.String PROFILE_OWNER_XML;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_DEVICE_INITIALIZER;
    private static final java.lang.String TAG_DEVICE_OWNER;
    private static final java.lang.String TAG_DEVICE_OWNER_CONTEXT;
    private static final java.lang.String TAG_FREEZE_PERIOD_RECORD;
    private static final java.lang.String TAG_PENDING_OTA_INFO;
    private static final java.lang.String TAG_PROFILE_OWNER;
    private static final java.lang.String TAG_ROOT;
    private static final java.lang.String TAG_SYSTEM_UPDATE_POLICY;
    private final android.app.ActivityManagerInternal mActivityManagerInternal;
    private final com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal;
    private com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner;
    private int mDeviceOwnerUserId;
    private final com.android.server.devicepolicy.Owners$Injector mInjector;
    private final java.lang.Object mLock;
    private final android.content.pm.PackageManagerInternal mPackageManagerInternal;
    private final android.util.ArrayMap mProfileOwners;
    private boolean mSystemReady;
    private java.time.LocalDate mSystemUpdateFreezeEnd;
    private java.time.LocalDate mSystemUpdateFreezeStart;
    private android.app.admin.SystemUpdateInfo mSystemUpdateInfo;
    private android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy;
    private final android.os.UserManager mUserManager;
    private final android.os.UserManagerInternal mUserManagerInternal;

    public void <init>(android.os.UserManager, android.os.UserManagerInternal, android.content.pm.PackageManagerInternal, com.android.server.wm.ActivityTaskManagerInternal, android.app.ActivityManagerInternal)
    {
        com.android.server.devicepolicy.Owners r0;
        android.os.UserManager r1;
        android.os.UserManagerInternal r2;
        android.content.pm.PackageManagerInternal r3;
        com.android.server.wm.ActivityTaskManagerInternal r4;
        android.app.ActivityManagerInternal r5;
        com.android.server.devicepolicy.Owners$Injector $r6;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 := @parameter0: android.os.UserManager;

        r2 := @parameter1: android.os.UserManagerInternal;

        r3 := @parameter2: android.content.pm.PackageManagerInternal;

        r4 := @parameter3: com.android.server.wm.ActivityTaskManagerInternal;

        r5 := @parameter4: android.app.ActivityManagerInternal;

        $r6 = new com.android.server.devicepolicy.Owners$Injector;

        specialinvoke $r6.<com.android.server.devicepolicy.Owners$Injector: void <init>()>();

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void <init>(android.os.UserManager,android.os.UserManagerInternal,android.content.pm.PackageManagerInternal,com.android.server.wm.ActivityTaskManagerInternal,android.app.ActivityManagerInternal,com.android.server.devicepolicy.Owners$Injector)>(r1, r2, r3, r4, r5, $r6);

        return;
    }

    void <init>(android.os.UserManager, android.os.UserManagerInternal, android.content.pm.PackageManagerInternal, com.android.server.wm.ActivityTaskManagerInternal, android.app.ActivityManagerInternal, com.android.server.devicepolicy.Owners$Injector)
    {
        com.android.server.devicepolicy.Owners r0;
        android.os.UserManager r1;
        android.os.UserManagerInternal r2;
        android.content.pm.PackageManagerInternal r3;
        com.android.server.wm.ActivityTaskManagerInternal r4;
        android.app.ActivityManagerInternal r5;
        com.android.server.devicepolicy.Owners$Injector r6;
        android.util.ArrayMap $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 := @parameter0: android.os.UserManager;

        r2 := @parameter1: android.os.UserManagerInternal;

        r3 := @parameter2: android.content.pm.PackageManagerInternal;

        r4 := @parameter3: com.android.server.wm.ActivityTaskManagerInternal;

        r5 := @parameter4: android.app.ActivityManagerInternal;

        r6 := @parameter5: com.android.server.devicepolicy.Owners$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId> = -10000;

        $r7 = new android.util.ArrayMap;

        specialinvoke $r7.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock> = $r8;

        r0.<com.android.server.devicepolicy.Owners: android.os.UserManager mUserManager> = r1;

        r0.<com.android.server.devicepolicy.Owners: android.os.UserManagerInternal mUserManagerInternal> = r2;

        r0.<com.android.server.devicepolicy.Owners: android.content.pm.PackageManagerInternal mPackageManagerInternal> = r3;

        r0.<com.android.server.devicepolicy.Owners: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal> = r4;

        r0.<com.android.server.devicepolicy.Owners: android.app.ActivityManagerInternal mActivityManagerInternal> = r5;

        r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$Injector mInjector> = r6;

        return;
    }

    static com.android.server.devicepolicy.Owners$OwnerInfo access$000(com.android.server.devicepolicy.Owners)
    {
        com.android.server.devicepolicy.Owners r0;
        com.android.server.devicepolicy.Owners$OwnerInfo $r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        $r1 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        return $r1;
    }

    static com.android.server.devicepolicy.Owners$OwnerInfo access$002(com.android.server.devicepolicy.Owners, com.android.server.devicepolicy.Owners$OwnerInfo)
    {
        com.android.server.devicepolicy.Owners r0;
        com.android.server.devicepolicy.Owners$OwnerInfo r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        r1 := @parameter1: com.android.server.devicepolicy.Owners$OwnerInfo;

        r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner> = r1;

        return r1;
    }

    static android.app.admin.SystemUpdatePolicy access$100(com.android.server.devicepolicy.Owners)
    {
        com.android.server.devicepolicy.Owners r0;
        android.app.admin.SystemUpdatePolicy $r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        $r1 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy>;

        return $r1;
    }

    static android.app.admin.SystemUpdatePolicy access$102(com.android.server.devicepolicy.Owners, android.app.admin.SystemUpdatePolicy)
    {
        com.android.server.devicepolicy.Owners r0;
        android.app.admin.SystemUpdatePolicy r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        r1 := @parameter1: android.app.admin.SystemUpdatePolicy;

        r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy> = r1;

        return r1;
    }

    static android.app.admin.SystemUpdateInfo access$200(com.android.server.devicepolicy.Owners)
    {
        com.android.server.devicepolicy.Owners r0;
        android.app.admin.SystemUpdateInfo $r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        $r1 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo mSystemUpdateInfo>;

        return $r1;
    }

    static android.app.admin.SystemUpdateInfo access$202(com.android.server.devicepolicy.Owners, android.app.admin.SystemUpdateInfo)
    {
        com.android.server.devicepolicy.Owners r0;
        android.app.admin.SystemUpdateInfo r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        r1 := @parameter1: android.app.admin.SystemUpdateInfo;

        r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo mSystemUpdateInfo> = r1;

        return r1;
    }

    static int access$300(com.android.server.devicepolicy.Owners)
    {
        com.android.server.devicepolicy.Owners r0;
        int $i0;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        $i0 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        return $i0;
    }

    static int access$302(com.android.server.devicepolicy.Owners, int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        i0 := @parameter1: int;

        r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId> = i0;

        return i0;
    }

    static java.time.LocalDate access$400(com.android.server.devicepolicy.Owners)
    {
        com.android.server.devicepolicy.Owners r0;
        java.time.LocalDate $r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        $r1 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeStart>;

        return $r1;
    }

    static java.time.LocalDate access$402(com.android.server.devicepolicy.Owners, java.time.LocalDate)
    {
        com.android.server.devicepolicy.Owners r0;
        java.time.LocalDate r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        r1 := @parameter1: java.time.LocalDate;

        r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeStart> = r1;

        return r1;
    }

    static java.time.LocalDate access$500(com.android.server.devicepolicy.Owners)
    {
        com.android.server.devicepolicy.Owners r0;
        java.time.LocalDate $r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        $r1 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeEnd>;

        return $r1;
    }

    static java.time.LocalDate access$502(com.android.server.devicepolicy.Owners, java.time.LocalDate)
    {
        com.android.server.devicepolicy.Owners r0;
        java.time.LocalDate r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        r1 := @parameter1: java.time.LocalDate;

        r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeEnd> = r1;

        return r1;
    }

    static android.util.ArrayMap access$600(com.android.server.devicepolicy.Owners)
    {
        com.android.server.devicepolicy.Owners r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.devicepolicy.Owners;

        $r1 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        return $r1;
    }

    private void pushToActivityTaskManagerLocked()
    {
        com.android.server.devicepolicy.Owners r0;
        com.android.server.devicepolicy.Owners$OwnerInfo r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        android.app.ActivityManagerInternal $r3;
        int $i0, i1;
        java.lang.String $r4;
        android.content.pm.PackageManagerInternal $r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if r1 == null goto label1;

        $r5 = r0.<com.android.server.devicepolicy.Owners: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        $r4 = r1.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String packageName>;

        $i0 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        i1 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>($r4, 4333568, $i0);

        goto label2;

     label1:
        i1 = -1;

     label2:
        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void setDeviceOwnerUid(int)>(i1);

        $r3 = r0.<com.android.server.devicepolicy.Owners: android.app.ActivityManagerInternal mActivityManagerInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void setDeviceOwnerUid(int)>(i1);

        return;
    }

    private void pushToPackageManagerLocked()
    {
        com.android.server.devicepolicy.Owners r0;
        android.content.pm.PackageManagerInternal r2;
        android.util.SparseArray $r3;
        android.util.ArrayMap $r4, $r5, $r8;
        int $i0, $i1, i2, i3;
        java.lang.Object $r6, $r9;
        java.lang.Integer $r7;
        com.android.server.devicepolicy.Owners$OwnerInfo $r10, r12;
        java.lang.String $r11, r13;

        r0 := @this: com.android.server.devicepolicy.Owners;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        $r4 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $i0 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label2;

        $r5 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r10 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r9;

        $r11 = $r10.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String packageName>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, $r11);

        i2 = i2 + -1;

        goto label1;

     label2:
        r2 = r0.<com.android.server.devicepolicy.Owners: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        i3 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        r12 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if r12 == null goto label3;

        r13 = r12.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String packageName>;

        goto label4;

     label3:
        r13 = null;

     label4:
        virtualinvoke r2.<android.content.pm.PackageManagerInternal: void setDeviceAndProfileOwnerPackages(int,java.lang.String,android.util.SparseArray)>(i3, r13, $r3);

        return;
    }

    private boolean readLegacyOwnerFileLocked(java.io.File)
    {
        com.android.server.devicepolicy.Owners r0;
        org.xmlpull.v1.XmlPullParser r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String r2, r3, $r6, $r7, $r8, $r10, $r13, r19, r20, r21, r23;
        android.content.ComponentName r4;
        java.nio.charset.Charset $r5;
        android.app.admin.SystemUpdatePolicy $r9;
        android.util.ArrayMap $r11;
        java.lang.Integer $r12;
        java.lang.Throwable $r14, $r15, r29, r37;
        java.io.File r16;
        java.io.FileInputStream r18;
        int i0, i1;
        com.android.server.devicepolicy.Owners$OwnerInfo r24, r26, r31, r32, r34;
        android.util.AtomicFile r30;
        java.lang.StringBuilder r33, r35;
        org.xmlpull.v1.XmlPullParserException r36;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r16 := @parameter0: java.io.File;

        $z1 = virtualinvoke r16.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        r30 = new android.util.AtomicFile;

     label02:
        specialinvoke r30.<android.util.AtomicFile: void <init>(java.io.File)>(r16);

        r18 = virtualinvoke r30.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r18, $r6);

     label03:
        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

     label04:
        if i0 == 1 goto label26;

        if i0 == 2 goto label05;

        goto label03;

     label05:
        r19 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        z0 = virtualinvoke r19.<java.lang.String: boolean equals(java.lang.Object)>("device-owner");

     label06:
        if z0 == 0 goto label09;

     label07:
        r20 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r21 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        r31 = new com.android.server.devicepolicy.Owners$OwnerInfo;

        specialinvoke r31.<com.android.server.devicepolicy.Owners$OwnerInfo: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,boolean)>(r20, r21, 0, null, null, 1);

        r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner> = r31;

        r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId> = 0;

     label08:
        goto label10;

     label09:
        $z2 = virtualinvoke r19.<java.lang.String: boolean equals(java.lang.Object)>("device-initializer");

        if $z2 == 0 goto label11;

     label10:
        goto label24;

     label11:
        $z3 = virtualinvoke r19.<java.lang.String: boolean equals(java.lang.Object)>("profile-owner");

        if $z3 == 0 goto label23;

        r23 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "component");

        $r10 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "userId");

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

     label12:
        r24 = null;

        if r3 == null goto label19;

     label13:
        r4 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r3);

     label14:
        if r4 == null goto label17;

     label15:
        r32 = new com.android.server.devicepolicy.Owners$OwnerInfo;

        r24 = r32;

        specialinvoke r32.<com.android.server.devicepolicy.Owners$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName,boolean,java.lang.String,java.lang.String,boolean)>(r2, r4, 0, null, null, 0);

     label16:
        goto label19;

     label17:
        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing device-owner file. Bad component name ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r13);

     label18:
        r24 = null;

     label19:
        r26 = r24;

        if r24 != null goto label21;

     label20:
        r34 = new com.android.server.devicepolicy.Owners$OwnerInfo;

        r26 = r34;

        specialinvoke r34.<com.android.server.devicepolicy.Owners$OwnerInfo: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,boolean)>(r2, r23, 0, null, null, 0);

     label21:
        $r11 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r26);

     label22:
        goto label24;

     label23:
        $r7 = "system-update-policy";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z4 == 0 goto label25;

        $r9 = staticinvoke <android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy> = $r9;

     label24:
        goto label03;

     label25:
        r36 = new org.xmlpull.v1.XmlPullParserException;

        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected tag in device owner file: ");

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r8 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r36.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r8);

        r37 = (java.lang.Throwable) r36;

        throw r37;

     label26:
        virtualinvoke r18.<java.io.InputStream: void close()>();

     label27:
        goto label31;

     label28:
        $r15 := @caughtexception;

        r29 = $r15;

        goto label30;

     label29:
        $r14 := @caughtexception;

        r29 = $r14;

     label30:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Error parsing device-owner file", r29);

     label31:
        return 1;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label29;
        catch java.io.IOException from label01 to label02 with label29;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label28;
        catch java.io.IOException from label02 to label03 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label28;
        catch java.io.IOException from label03 to label04 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label28;
        catch java.io.IOException from label05 to label06 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label28;
        catch java.io.IOException from label07 to label08 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label28;
        catch java.io.IOException from label09 to label10 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label28;
        catch java.io.IOException from label11 to label12 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label28;
        catch java.io.IOException from label13 to label14 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label28;
        catch java.io.IOException from label15 to label16 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label28;
        catch java.io.IOException from label17 to label18 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label28;
        catch java.io.IOException from label20 to label21 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label28;
        catch java.io.IOException from label21 to label22 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label28;
        catch java.io.IOException from label23 to label24 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label25 to label26 with label28;
        catch java.io.IOException from label25 to label26 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label28;
        catch java.io.IOException from label26 to label27 with label28;
    }

    void clearDeviceOwner()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        android.os.UserManagerInternal $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner> = null;

        r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId> = -10000;

        $r3 = r0.<com.android.server.devicepolicy.Owners: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r3.<android.os.UserManagerInternal: void setDeviceManaged(boolean)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToPackageManagerLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToActivityTaskManagerLocked()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void clearSystemUpdatePolicy()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.devicepolicy.Owners r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        com.android.server.devicepolicy.Owners$OwnerInfo $r4, $r28, $r36;
        android.app.admin.SystemUpdatePolicy $r5, $r32;
        android.app.admin.SystemUpdateInfo $r6, $r15;
        java.lang.StringBuilder $r7, $r13, $r20, $r30, $r37;
        java.lang.String $r9, $r11, $r17, $r25, $r34, $r40;
        java.time.LocalDate $r12, $r47;
        java.util.Set $r18;
        boolean $z0, z1, z2, z3, z4;
        java.lang.Object $r19, $r22, $r27;
        int $i0;
        android.util.ArrayMap r44;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        z1 = 0;

        $r4 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r4 == null goto label01;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Device Owner: ");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r36 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        virtualinvoke $r36.<com.android.server.devicepolicy.Owners$OwnerInfo: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ID: ");

        $i0 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r40);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        z1 = 1;

     label01:
        z2 = z1;

        $r5 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy>;

        if $r5 == null goto label03;

        if z1 == 0 goto label02;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label02:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System Update Policy: ");

        $r32 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r34);

        z2 = 1;

     label03:
        r44 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        z3 = z2;

        if r44 == null goto label06;

        $r18 = virtualinvoke r44.<android.util.ArrayMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        z3 = z2;

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r19 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r19;

        if z2 == 0 goto label05;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label05:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile Owner (User ");

        $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r25);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r28 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r27;

        virtualinvoke $r28.<com.android.server.devicepolicy.Owners$OwnerInfo: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        z2 = 1;

        goto label04;

     label06:
        z4 = z3;

        $r6 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo mSystemUpdateInfo>;

        if $r6 == null goto label08;

        if z3 == 0 goto label07;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label07:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending System Update: ");

        $r15 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo mSystemUpdateInfo>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r17);

        z4 = 1;

     label08:
        $r47 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeStart>;

        if $r47 != null goto label09;

        $r12 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeEnd>;

        if $r12 == null goto label11;

     label09:
        if z4 == 0 goto label10;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label10:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System update freeze record: ");

        $r9 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: java.lang.String getSystemUpdateFreezePeriodRecordAsString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r11);

     label11:
        return;
    }

    android.content.ComponentName getDeviceOwnerComponent()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r2, $r3;
        java.lang.Throwable $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        r5 = $r3.<com.android.server.devicepolicy.Owners$OwnerInfo: android.content.ComponentName admin>;

     label2:
        goto label4;

     label3:
        r5 = null;

     label4:
        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.io.File getDeviceOwnerFile()
    {
        com.android.server.devicepolicy.Owners r0;
        java.io.File $r1, $r3;
        com.android.server.devicepolicy.Owners$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.Owners;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners$Injector: java.io.File environmentGetDataSystemDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "device_owner_2.xml");

        return $r1;
    }

    java.lang.String getDeviceOwnerName()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        r5 = $r3.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String name>;

     label2:
        goto label4;

     label3:
        r5 = null;

     label4:
        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.lang.String getDeviceOwnerPackageName()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        r5 = $r3.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String packageName>;

     label2:
        goto label4;

     label3:
        r5 = null;

     label4:
        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.lang.String getDeviceOwnerRemoteBugreportHash()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        r5 = $r3.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportHash>;

     label2:
        goto label4;

     label3:
        r5 = null;

     label4:
        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.lang.String getDeviceOwnerRemoteBugreportUri()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        r5 = $r3.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportUri>;

     label2:
        goto label4;

     label3:
        r5 = null;

     label4:
        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int getDeviceOwnerUserId()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    android.util.Pair getDeviceOwnerUserIdAndComponent()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r2, $r4;
        int $i0;
        java.lang.Integer $r3;
        android.content.ComponentName $r5;
        java.lang.Throwable $r6;
        android.util.Pair r7;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        return null;

     label3:
        $i0 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $r5 = $r4.<com.android.server.devicepolicy.Owners$OwnerInfo: android.content.ComponentName admin>;

        r7 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r3, $r5);

        exitmonitor r1;

     label4:
        return r7;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    boolean getDeviceOwnerUserRestrictionsNeedsMigration()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r3, $r4;
        boolean $z0, z1;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $z0 = $r4.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean userRestrictionsMigrated>;

        if $z0 != 0 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.io.File getLegacyConfigFile()
    {
        com.android.server.devicepolicy.Owners r0;
        java.io.File $r1, $r3;
        com.android.server.devicepolicy.Owners$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.Owners;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners$Injector: java.io.File environmentGetDataSystemDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "device_owner.xml");

        return $r1;
    }

    android.content.ComponentName getProfileOwnerComponent(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r5;
        com.android.server.devicepolicy.Owners$OwnerInfo r6;
        android.content.ComponentName r7;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r4;

     label02:
        if r6 == null goto label05;

     label03:
        r7 = r6.<com.android.server.devicepolicy.Owners$OwnerInfo: android.content.ComponentName admin>;

     label04:
        goto label06;

     label05:
        r7 = null;

     label06:
        exitmonitor r1;

     label07:
        return r7;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    java.io.File getProfileOwnerFile(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.io.File $r1, $r3;
        com.android.server.devicepolicy.Owners$Injector $r2;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.devicepolicy.Owners$Injector: java.io.File environmentGetUserSystemDirectory(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "profile_owner.xml");

        return $r1;
    }

    java.util.Set getProfileOwnerKeys()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r3;
        java.util.Set r4;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        r4 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Set keySet()>();

        exitmonitor r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getProfileOwnerName(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r5;
        com.android.server.devicepolicy.Owners$OwnerInfo r6;
        java.lang.String r7;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r4;

     label02:
        if r6 == null goto label05;

     label03:
        r7 = r6.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String name>;

     label04:
        goto label06;

     label05:
        r7 = null;

     label06:
        exitmonitor r1;

     label07:
        return r7;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    java.lang.String getProfileOwnerPackage(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r5;
        com.android.server.devicepolicy.Owners$OwnerInfo r6;
        java.lang.String r7;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r4;

     label02:
        if r6 == null goto label05;

     label03:
        r7 = r6.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String packageName>;

     label04:
        goto label06;

     label05:
        r7 = null;

     label06:
        exitmonitor r1;

     label07:
        return r7;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    boolean getProfileOwnerUserRestrictionsNeedsMigration(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        boolean $z0, z1;
        java.lang.Throwable $r5;
        com.android.server.devicepolicy.Owners$OwnerInfo r6;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r4;

     label02:
        if r6 == null goto label05;

     label03:
        $z0 = r6.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean userRestrictionsMigrated>;

        if $z0 != 0 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z1;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    android.util.Pair getSystemUpdateFreezePeriodRecord()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        java.time.LocalDate $r2, $r3;
        java.lang.Throwable $r4;
        android.util.Pair r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r5 = new android.util.Pair;

        $r3 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeStart>;

        $r2 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeEnd>;

        specialinvoke r5.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r2);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getSystemUpdateFreezePeriodRecordAsString()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r7, $r8, $r10;
        java.time.LocalDate r12, r13;

        r0 := @this: com.android.server.devicepolicy.Owners;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start: ");

        r12 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeStart>;

        if r12 == null goto label1;

        $r10 = virtualinvoke r12.<java.time.LocalDate: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        goto label2;

     label1:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; end: ");

        r13 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeEnd>;

        if r13 == null goto label3;

        $r8 = virtualinvoke r13.<java.time.LocalDate: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label4;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label4:
        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public android.app.admin.SystemUpdateInfo getSystemUpdateInfo()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.app.admin.SystemUpdateInfo r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo mSystemUpdateInfo>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.app.admin.SystemUpdatePolicy r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean hasDeviceOwner()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r3;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r3 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean hasProfileOwner(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1;
        android.content.ComponentName $r3;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: android.content.ComponentName getProfileOwnerComponent(int)>(i0);

        if $r3 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean isDeviceOwnerUserId(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r3;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r3 == null goto label3;

        $i1 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        if $i1 != i0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean isProfileOwnerOfOrganizationOwnedDevice(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r5;
        com.android.server.devicepolicy.Owners$OwnerInfo r6;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r4;

     label02:
        if r6 == null goto label05;

     label03:
        z0 = r6.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean isOrganizationOwnedDevice>;

     label04:
        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void load()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1, $r7, $r9, $r11;
        java.util.Iterator r2, r16, r21;
        android.os.UserManager $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i3, $i4, $i5, $i7;
        java.lang.Object[] $r4;
        java.lang.Integer $r5, $r12;
        java.lang.String $r6;
        android.os.UserManagerInternal $r8, $r20;
        java.util.Set $r10;
        java.lang.Throwable $r13;
        java.io.File r14;
        java.util.List r15;
        com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter r17;
        android.content.pm.UserInfo r18, r22;
        com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter r19;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r14 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: java.io.File getLegacyConfigFile()>();

        $r3 = r0.<com.android.server.devicepolicy.Owners: android.os.UserManager mUserManager>;

        r15 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.Owners: boolean readLegacyOwnerFileLocked(java.io.File)>(r14);

        if $z0 == 0 goto label06;

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

        $r10 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: java.util.Set getProfileOwnerKeys()>();

        r16 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label04;

        $r11 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Integer) $r11;

        $i7 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void writeProfileOwner(int)>($i7);

     label03:
        goto label02;

     label04:
        $z6 = virtualinvoke r14.<java.io.File: boolean delete()>();

        if $z6 != 0 goto label09;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "Failed to remove the legacy setting file");

     label05:
        goto label09;

     label06:
        r17 = new com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter;

        specialinvoke r17.<com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter: void <init>(com.android.server.devicepolicy.Owners)>(r0);

        virtualinvoke r17.<com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter: void readFromFileLocked()>();

        r2 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r18 = (android.content.pm.UserInfo) $r9;

        r19 = new com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter;

        $i5 = r18.<android.content.pm.UserInfo: int id>;

        specialinvoke r19.<com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter: void <init>(com.android.server.devicepolicy.Owners,int)>(r0, $i5);

        virtualinvoke r19.<com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter: void readFromFileLocked()>();

     label08:
        goto label07;

     label09:
        $r20 = r0.<com.android.server.devicepolicy.Owners: android.os.UserManagerInternal mUserManagerInternal>;

        $z7 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        virtualinvoke $r20.<android.os.UserManagerInternal: void setDeviceManaged(boolean)>($z7);

        r21 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z8 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label12;

        $r7 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (android.content.pm.UserInfo) $r7;

        $r8 = r0.<com.android.server.devicepolicy.Owners: android.os.UserManagerInternal mUserManagerInternal>;

        $i4 = r22.<android.content.pm.UserInfo: int id>;

        $i3 = r22.<android.content.pm.UserInfo: int id>;

        $z4 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>($i3);

        virtualinvoke $r8.<android.os.UserManagerInternal: void setUserManaged(int,boolean)>($i4, $z4);

     label11:
        goto label10;

     label12:
        $z2 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: boolean hasDeviceOwner()>();

        if $z2 == 0 goto label13;

        $i0 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        $z3 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: boolean hasProfileOwner(int)>($i0);

        if $z3 == 0 goto label13;

        $r4 = newarray (java.lang.Object)[1];

        $i1 = virtualinvoke r0.<com.android.server.devicepolicy.Owners: int getDeviceOwnerUserId()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %d has both DO and PO, which is not supported", $r4);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r6);

     label13:
        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToPackageManagerLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToActivityTaskManagerLocked()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r1;

     label14:
        return;

     label15:
        $r13 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    void markProfileOwnerOfOrganizationOwnedDevice(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3, $r6;
        java.lang.Object[] $r5;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        com.android.server.devicepolicy.Owners$OwnerInfo r9;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r9 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r4;

     label02:
        if r9 == null goto label05;

     label03:
        r9.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean isOrganizationOwnedDevice> = 1;

     label04:
        goto label06;

     label05:
        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No profile owner for user %d to set as org-owned.", $r5);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r7);

     label06:
        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void writeProfileOwner(int)>(i0);

        exitmonitor r1;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void pushToAppOpsLocked()
    {
        com.android.server.devicepolicy.Owners r0;
        long l0;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        android.app.AppOpsManagerInternal r1;
        boolean $z0;
        com.android.server.devicepolicy.Owners$OwnerInfo $r2, $r8, $r16;
        java.lang.Object $r3, $r7, $r11, $r14;
        android.util.ArrayMap $r4, $r5, $r9, $r13, $r21;
        android.content.pm.PackageManagerInternal $r6, $r18;
        java.lang.String $r10, $r17;
        java.lang.Integer $r12, $r15;
        java.lang.Throwable $r19;
        android.util.SparseIntArray r20;

        r0 := @this: com.android.server.devicepolicy.Owners;

        $z0 = r0.<com.android.server.devicepolicy.Owners: boolean mSystemReady>;

        if $z0 != 0 goto label01;

        return;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r20 = new android.util.SparseIntArray;

        specialinvoke r20.<android.util.SparseIntArray: void <init>()>();

        $r2 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r2 == null goto label05;

        $r18 = r0.<com.android.server.devicepolicy.Owners: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        $r16 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $r17 = $r16.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String packageName>;

        $i6 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        i8 = virtualinvoke $r18.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>($r17, 4333568, $i6);

     label03:
        if i8 < 0 goto label05;

     label04:
        $i7 = r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId>;

        virtualinvoke r20.<android.util.SparseIntArray: void put(int,int)>($i7, i8);

     label05:
        $r21 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        if $r21 == null goto label11;

        $r4 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $i3 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        i9 = $i3 - 1;

     label06:
        if i9 < 0 goto label11;

     label07:
        $r6 = r0.<com.android.server.devicepolicy.Owners: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        $r5 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r7 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i9);

        $r8 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r7;

        $r10 = $r8.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String packageName>;

        $r9 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i9);

        $r12 = (java.lang.Integer) $r11;

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        i1 = virtualinvoke $r6.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>($r10, 4333568, $i4);

     label08:
        if i1 < 0 goto label10;

     label09:
        $r13 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i9);

        $r15 = (java.lang.Integer) $r14;

        $i5 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        virtualinvoke r20.<android.util.SparseIntArray: void put(int,int)>($i5, i1);

     label10:
        i9 = i9 + -1;

        goto label06;

     label11:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/AppOpsManagerInternal;");

        r1 = (android.app.AppOpsManagerInternal) $r3;

     label12:
        if r1 == null goto label17;

     label13:
        $i2 = virtualinvoke r20.<android.util.SparseIntArray: int size()>();

        if $i2 <= 0 goto label15;

     label14:
        goto label16;

     label15:
        r20 = null;

     label16:
        virtualinvoke r1.<android.app.AppOpsManagerInternal: void setDeviceAndProfileOwners(android.util.SparseIntArray)>(r20);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label18:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r19;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    void removeProfileOwner(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1;
        android.util.ArrayMap $r3;
        java.lang.Integer $r4;
        android.os.UserManagerInternal $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r6 = r0.<com.android.server.devicepolicy.Owners: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r6.<android.os.UserManagerInternal: void setUserManaged(int,boolean)>(i0, 0);

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToPackageManagerLocked()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean saveSystemUpdateInfo(android.app.admin.SystemUpdateInfo)
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        android.app.admin.SystemUpdateInfo $r2, r4;
        boolean $z0;
        java.lang.Throwable $r3;
        com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r4 := @parameter0: android.app.admin.SystemUpdateInfo;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo mSystemUpdateInfo>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r4, $r2);

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdateInfo mSystemUpdateInfo> = r4;

        r5 = new com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter;

        specialinvoke r5.<com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter: void <init>(com.android.server.devicepolicy.Owners)>(r0);

        virtualinvoke r5.<com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter: void writeToFileLocked()>();

        exitmonitor r1;

     label4:
        return 1;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void setDeviceOwner(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.String r1, $r6;
        int i0;
        java.lang.Object r2;
        java.lang.StringBuilder $r3;
        java.lang.Throwable $r7;
        android.content.ComponentName r8;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid user id for device owner user: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r6);

        return;

     label1:
        r2 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void setDeviceOwnerWithRestrictionsMigrated(android.content.ComponentName,java.lang.String,int,boolean)>(r8, r1, i0, 1);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.String r1, r7;
        java.lang.Object r2;
        com.android.server.devicepolicy.Owners$OwnerInfo $r3, $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $r4.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportUri> = r7;

        $r5 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $r5.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportHash> = r1;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setDeviceOwnerUserRestrictionsMigrated()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $r4.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean userRestrictionsMigrated> = 1;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void writeDeviceOwner()>();

        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setDeviceOwnerWithRestrictionsMigrated(android.content.ComponentName, java.lang.String, int, boolean)
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        java.lang.Object r2;
        com.android.server.devicepolicy.Owners$OwnerInfo r3;
        android.os.UserManagerInternal $r4;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r3 = new com.android.server.devicepolicy.Owners$OwnerInfo;

        specialinvoke r3.<com.android.server.devicepolicy.Owners$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName,boolean,java.lang.String,java.lang.String,boolean)>(r1, r6, z0, null, null, 1);

        r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner> = r3;

        r0.<com.android.server.devicepolicy.Owners: int mDeviceOwnerUserId> = i0;

        $r4 = r0.<com.android.server.devicepolicy.Owners: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r4.<android.os.UserManagerInternal: void setDeviceManaged(boolean)>(1);

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToPackageManagerLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToActivityTaskManagerLocked()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setProfileOwner(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.String r1;
        int i0;
        java.lang.Object r2;
        android.util.ArrayMap r3;
        com.android.server.devicepolicy.Owners$OwnerInfo r4;
        java.lang.Integer $r5;
        android.os.UserManagerInternal $r7;
        java.lang.Throwable $r8;
        android.content.ComponentName r9;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r3 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        r4 = new com.android.server.devicepolicy.Owners$OwnerInfo;

        specialinvoke r4.<com.android.server.devicepolicy.Owners$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName,boolean,java.lang.String,java.lang.String,boolean)>(r1, r9, 1, null, null, 0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r4);

        $r7 = r0.<com.android.server.devicepolicy.Owners: android.os.UserManagerInternal mUserManagerInternal>;

        virtualinvoke $r7.<android.os.UserManagerInternal: void setUserManaged(int,boolean)>(i0, 1);

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToPackageManagerLocked()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r2;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setProfileOwnerUserRestrictionsMigrated(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r5;
        com.android.server.devicepolicy.Owners$OwnerInfo r6;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r4;

     label2:
        if r6 == null goto label4;

     label3:
        r6.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean userRestrictionsMigrated> = 1;

     label4:
        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void writeProfileOwner(int)>(i0);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean setSystemUpdateFreezePeriodRecord(java.time.LocalDate, java.time.LocalDate)
    {
        com.android.server.devicepolicy.Owners r0;
        java.time.LocalDate r1, $r3, $r4, r6;
        java.lang.Object r2;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r6 := @parameter0: java.time.LocalDate;

        r1 := @parameter1: java.time.LocalDate;

        z2 = 0;

        r2 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeStart>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, r6);

        if $z0 != 0 goto label3;

        r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeStart> = r6;

     label2:
        z2 = 1;

     label3:
        $r4 = r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeEnd>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, r1);

        if $z1 != 0 goto label5;

        r0.<com.android.server.devicepolicy.Owners: java.time.LocalDate mSystemUpdateFreezeEnd> = r1;

     label4:
        z2 = 1;

     label5:
        exitmonitor r2;

     label6:
        return z2;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void setSystemUpdatePolicy(android.app.admin.SystemUpdatePolicy)
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.app.admin.SystemUpdatePolicy r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r3 := @parameter0: android.app.admin.SystemUpdatePolicy;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.devicepolicy.Owners: android.app.admin.SystemUpdatePolicy mSystemUpdatePolicy> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void systemReady()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.devicepolicy.Owners: boolean mSystemReady> = 1;

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void transferDeviceOwnership(android.content.ComponentName)
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        com.android.server.devicepolicy.Owners$OwnerInfo r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1;
        java.lang.String $r7, $r8;
        java.lang.Throwable $r9;
        android.content.ComponentName r10;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r10 := @parameter0: android.content.ComponentName;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.devicepolicy.Owners$OwnerInfo;

        $r3 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $z1 = $r3.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean userRestrictionsMigrated>;

        $r4 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $r8 = $r4.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportUri>;

        $r5 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $r7 = $r5.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportHash>;

        $r6 = r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner>;

        $z0 = $r6.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean isOrganizationOwnedDevice>;

        specialinvoke r2.<com.android.server.devicepolicy.Owners$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName,boolean,java.lang.String,java.lang.String,boolean)>(null, r10, $z1, $r8, $r7, $z0);

        r0.<com.android.server.devicepolicy.Owners: com.android.server.devicepolicy.Owners$OwnerInfo mDeviceOwner> = r2;

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToPackageManagerLocked()>();

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToActivityTaskManagerLocked()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void transferProfileOwner(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1, $r6;
        com.android.server.devicepolicy.Owners$OwnerInfo r2, r3;
        android.util.ArrayMap $r4, $r10;
        java.lang.Integer $r5, $r11;
        java.lang.String $r7, $r8, $r9;
        boolean $z0, $z1;
        java.lang.Throwable $r13;
        android.content.ComponentName r14;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r14 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r2 = (com.android.server.devicepolicy.Owners$OwnerInfo) $r6;

        r3 = new com.android.server.devicepolicy.Owners$OwnerInfo;

        $r7 = virtualinvoke r14.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = r2.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean userRestrictionsMigrated>;

        $r9 = r2.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportUri>;

        $r8 = r2.<com.android.server.devicepolicy.Owners$OwnerInfo: java.lang.String remoteBugreportHash>;

        $z0 = r2.<com.android.server.devicepolicy.Owners$OwnerInfo: boolean isOrganizationOwnedDevice>;

        specialinvoke r3.<com.android.server.devicepolicy.Owners$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName,boolean,java.lang.String,java.lang.String,boolean)>($r7, r14, $z1, $r9, $r8, $z0);

        $r10 = r0.<com.android.server.devicepolicy.Owners: android.util.ArrayMap mProfileOwners>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r3);

        specialinvoke r0.<com.android.server.devicepolicy.Owners: void pushToPackageManagerLocked()>();

        virtualinvoke r0.<com.android.server.devicepolicy.Owners: void pushToAppOpsLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r13 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void writeDeviceOwner()
    {
        com.android.server.devicepolicy.Owners r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = new com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter;

        specialinvoke r3.<com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter: void <init>(com.android.server.devicepolicy.Owners)>(r0);

        virtualinvoke r3.<com.android.server.devicepolicy.Owners$DeviceOwnerReadWriter: void writeToFileLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void writeProfileOwner(int)
    {
        com.android.server.devicepolicy.Owners r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter r3;

        r0 := @this: com.android.server.devicepolicy.Owners;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.devicepolicy.Owners: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = new com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter;

        specialinvoke r3.<com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter: void <init>(com.android.server.devicepolicy.Owners,int)>(r0, i0);

        virtualinvoke r3.<com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter: void writeToFileLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.devicepolicy.Owners: java.lang.String TAG_SYSTEM_UPDATE_POLICY> = "system-update-policy";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG_ROOT> = "root";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG_PROFILE_OWNER> = "profile-owner";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG_PENDING_OTA_INFO> = "pending-ota-info";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG_FREEZE_PERIOD_RECORD> = "freeze-record";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG_DEVICE_OWNER_CONTEXT> = "device-owner-context";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG_DEVICE_OWNER> = "device-owner";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG_DEVICE_INITIALIZER> = "device-initializer";

        <com.android.server.devicepolicy.Owners: java.lang.String TAG> = "DevicePolicyManagerService";

        <com.android.server.devicepolicy.Owners: java.lang.String PROFILE_OWNER_XML> = "profile_owner.xml";

        <com.android.server.devicepolicy.Owners: java.lang.String DEVICE_OWNER_XML_LEGACY> = "device_owner.xml";

        <com.android.server.devicepolicy.Owners: java.lang.String DEVICE_OWNER_XML> = "device_owner_2.xml";

        <com.android.server.devicepolicy.Owners: boolean DEBUG> = 0;

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_USER_RESTRICTIONS_MIGRATED> = "userRestrictionsMigrated";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_USERID> = "userId";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_REMOTE_BUGREPORT_URI> = "remoteBugreportUri";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_REMOTE_BUGREPORT_HASH> = "remoteBugreportHash";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_PROFILE_OWNER_OF_ORG_OWNED_DEVICE> = "isPoOrganizationOwnedDevice";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_PACKAGE> = "package";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_NAME> = "name";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_FREEZE_RECORD_START> = "start";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_FREEZE_RECORD_END> = "end";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_COMPONENT_NAME> = "component";

        <com.android.server.devicepolicy.Owners: java.lang.String ATTR_CAN_ACCESS_DEVICE_IDS> = "canAccessDeviceIds";

        return;
    }
}
