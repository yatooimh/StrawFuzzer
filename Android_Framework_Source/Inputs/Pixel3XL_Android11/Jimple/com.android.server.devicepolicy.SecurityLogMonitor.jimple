class com.android.server.devicepolicy.SecurityLogMonitor extends java.lang.Object implements java.lang.Runnable
{
    private static final long BROADCAST_RETRY_INTERVAL_MS;
    private static final int BUFFER_ENTRIES_CRITICAL_LEVEL;
    private static final int BUFFER_ENTRIES_MAXIMUM_LEVEL;
    static final int BUFFER_ENTRIES_NOTIFICATION_LEVEL;
    private static final boolean DEBUG;
    private static final long FORCE_FETCH_THROTTLE_NS;
    private static final long OVERLAP_NS;
    private static final long POLLING_INTERVAL_MS;
    private static final long RATE_LIMIT_INTERVAL_MS;
    private static final java.lang.String TAG;
    private boolean mAllowedToRetrieve;
    private boolean mCriticalLevelLogged;
    private int mEnabledUser;
    private final java.util.concurrent.Semaphore mForceSemaphore;
    private long mId;
    private long mLastEventNanos;
    private final java.util.ArrayList mLastEvents;
    private long mLastForceNanos;
    private final java.util.concurrent.locks.Lock mLock;
    private java.lang.Thread mMonitorThread;
    private long mNextAllowedRetrievalTimeMillis;
    private boolean mPaused;
    private java.util.ArrayList mPendingLogs;
    private final com.android.server.devicepolicy.DevicePolicyManagerService mService;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0, $r1, $r2, $r3, $r4;
        long $l0, $l1, $l2, $l3, $l4;

        <com.android.server.devicepolicy.SecurityLogMonitor: java.lang.String TAG> = "SecurityLogMonitor";

        <com.android.server.devicepolicy.SecurityLogMonitor: boolean DEBUG> = 0;

        <com.android.server.devicepolicy.SecurityLogMonitor: int BUFFER_ENTRIES_NOTIFICATION_LEVEL> = 1024;

        <com.android.server.devicepolicy.SecurityLogMonitor: int BUFFER_ENTRIES_MAXIMUM_LEVEL> = 10240;

        <com.android.server.devicepolicy.SecurityLogMonitor: int BUFFER_ENTRIES_CRITICAL_LEVEL> = 9216;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(2L);

        <com.android.server.devicepolicy.SecurityLogMonitor: long RATE_LIMIT_INTERVAL_MS> = $l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(30L);

        <com.android.server.devicepolicy.SecurityLogMonitor: long BROADCAST_RETRY_INTERVAL_MS> = $l1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        <com.android.server.devicepolicy.SecurityLogMonitor: long POLLING_INTERVAL_MS> = $l2;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l3 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toNanos(long)>(3L);

        <com.android.server.devicepolicy.SecurityLogMonitor: long OVERLAP_NS> = $l3;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l4 = virtualinvoke $r4.<java.util.concurrent.TimeUnit: long toNanos(long)>(10L);

        <com.android.server.devicepolicy.SecurityLogMonitor: long FORCE_FETCH_THROTTLE_NS> = $l4;

        return;
    }

    void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        com.android.server.devicepolicy.DevicePolicyManagerService r1;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,long)>(r1, 0L);

        return;
    }

    void <init>(com.android.server.devicepolicy.DevicePolicyManagerService, long)
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        com.android.server.devicepolicy.DevicePolicyManagerService r1;
        long l0, $l1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.ArrayList $r3, $r4;
        java.util.concurrent.Semaphore $r5;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock> = $r2;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.lang.Thread mMonitorThread> = null;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs> = $r3;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 0;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mCriticalLevelLogged> = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mLastEvents> = $r4;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos> = -1L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mNextAllowedRetrievalTimeMillis> = -1L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mPaused> = 0;

        $r5 = new java.util.concurrent.Semaphore;

        specialinvoke $r5.<java.util.concurrent.Semaphore: void <init>(int)>(0);

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.Semaphore mForceSemaphore> = $r5;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastForceNanos> = 0L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: com.android.server.devicepolicy.DevicePolicyManagerService mService> = r1;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mId> = l0;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastForceNanos> = $l1;

        return;
    }

    private void assignLogId(android.app.admin.SecurityLog$SecurityEvent)
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        android.app.admin.SecurityLog$SecurityEvent r1;
        long l0, $l1, $l3;
        byte $b2;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        r1 := @parameter0: android.app.admin.SecurityLog$SecurityEvent;

        $l1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mId>;

        virtualinvoke r1.<android.app.admin.SecurityLog$SecurityEvent: void setId(long)>($l1);

        l0 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mId>;

        $b2 = l0 cmp 9223372036854775807L;

        if $b2 != 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "Reached maximum id value; wrapping around.");

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mId> = 0L;

        goto label2;

     label1:
        $l3 = l0 + 1L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mId> = $l3;

     label2:
        return;
    }

    private void checkCriticalLevel()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        boolean $z0, $z1;
        java.util.ArrayList $r1;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        $z0 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 < 9216 goto label2;

        $z1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mCriticalLevelLogged>;

        if $z1 != 0 goto label2;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mCriticalLevelLogged> = 1;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210015, $r2);

     label2:
        return;
    }

    private void getNextBatch(java.util.ArrayList) throws java.io.IOException
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        java.util.ArrayList r1, $r2;
        long $l0, $l2, $l3, $l4, $l6, $l8, l10;
        byte $b1, $b9;
        boolean $z0;
        int $i5, $i7, i11, $i12, $i13;
        java.lang.Object $r3, $r5;
        android.app.admin.SecurityLog$SecurityEvent $r4, $r6;
        com.android.server.devicepolicy.'-$$Lambda$SecurityLogMonitor$y5Q3dMmmJ8bk5nBh8WR2MUroKrI' $r7;
        java.util.Comparator r8;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        r1 := @parameter0: java.util.ArrayList;

        $l0 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos>;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        staticinvoke <android.app.admin.SecurityLog: void readEvents(java.util.Collection)>(r1);

        goto label4;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mLastEvents>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        l10 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos>;

        goto label3;

     label2:
        $l3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos>;

        $l2 = <com.android.server.devicepolicy.SecurityLogMonitor: long OVERLAP_NS>;

        $l4 = $l3 - $l2;

        l10 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l4);

     label3:
        staticinvoke <android.app.admin.SecurityLog: void readEventsSince(long,java.util.Collection)>(l10, r1);

     label4:
        i11 = 0;

     label5:
        $i12 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $i13 = $i12 - 1;

        if i11 >= $i13 goto label7;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        $r4 = (android.app.admin.SecurityLog$SecurityEvent) $r3;

        $l6 = virtualinvoke $r4.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        $i7 = i11 + 1;

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i7);

        $r6 = (android.app.admin.SecurityLog$SecurityEvent) $r5;

        $l8 = virtualinvoke $r6.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        $b9 = $l6 cmp $l8;

        if $b9 <= 0 goto label6;

        $r7 = <com.android.server.devicepolicy._$$Lambda$SecurityLogMonitor$y5Q3dMmmJ8bk5nBh8WR2MUroKrI: com.android.server.devicepolicy.'-$$Lambda$SecurityLogMonitor$y5Q3dMmmJ8bk5nBh8WR2MUroKrI' INSTANCE>;

        r8 = (java.util.Comparator) $r7;

        virtualinvoke r1.<java.util.ArrayList: void sort(java.util.Comparator)>(r8);

        goto label7;

     label6:
        i11 = i11 + 1;

        goto label5;

     label7:
        $i5 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: int mEnabledUser>;

        staticinvoke <android.app.admin.SecurityLog: void redactEvents(java.util.ArrayList,int)>(r1, $i5);

        return;
    }

    static int lambda$getNextBatch$0(android.app.admin.SecurityLog$SecurityEvent, android.app.admin.SecurityLog$SecurityEvent)
    {
        android.app.admin.SecurityLog$SecurityEvent r0, r1;
        long $l0, $l1, $l2;
        int $i3;

        r0 := @parameter0: android.app.admin.SecurityLog$SecurityEvent;

        r1 := @parameter1: android.app.admin.SecurityLog$SecurityEvent;

        $l0 = virtualinvoke r0.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        $l1 = virtualinvoke r1.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        $l2 = $l0 - $l1;

        $i3 = staticinvoke <java.lang.Long: int signum(long)>($l2);

        return $i3;
    }

    private void mergeBatchLocked(java.util.ArrayList)
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        long l0, l1, $l12;
        android.app.admin.SecurityLog$SecurityEvent r1, $r9, r17;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i16, i17, $i18;
        java.util.ArrayList $r2, $r3, $r4, $r5, $r6, $r11, $r13, $r14, r15, r16, r20;
        java.util.List $r7, r18;
        java.lang.Object $r8, $r10, $r12;
        byte $b13, $b14, $b15;
        boolean $z1, $z4;
        java.util.Iterator r19;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        r15 := @parameter0: java.util.ArrayList;

        r16 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        $i2 = virtualinvoke r16.<java.util.ArrayList: int size()>();

        $i3 = virtualinvoke r15.<java.util.ArrayList: int size()>();

        $i4 = $i2 + $i3;

        virtualinvoke r16.<java.util.ArrayList: void ensureCapacity(int)>($i4);

        i16 = 0;

        i17 = 0;

     label01:
        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mLastEvents>;

        $i5 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i17 >= $i5 goto label08;

        $i11 = virtualinvoke r15.<java.util.ArrayList: int size()>();

        if i16 >= $i11 goto label08;

        $r10 = virtualinvoke r15.<java.util.ArrayList: java.lang.Object get(int)>(i16);

        r17 = (android.app.admin.SecurityLog$SecurityEvent) $r10;

        l0 = virtualinvoke r17.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        $l12 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos>;

        $b13 = l0 cmp $l12;

        if $b13 <= 0 goto label02;

        goto label08;

     label02:
        $r11 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mLastEvents>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        r1 = (android.app.admin.SecurityLog$SecurityEvent) $r12;

        l1 = virtualinvoke r1.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        $b14 = l1 cmp l0;

        if $b14 <= 0 goto label03;

        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void assignLogId(android.app.admin.SecurityLog$SecurityEvent)>(r17);

        $r14 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

        i16 = i16 + 1;

        goto label07;

     label03:
        $b15 = l1 cmp l0;

        if $b15 >= 0 goto label04;

        i17 = i17 + 1;

        goto label07;

     label04:
        $z1 = virtualinvoke r1.<android.app.admin.SecurityLog$SecurityEvent: boolean eventEquals(android.app.admin.SecurityLog$SecurityEvent)>(r17);

        if $z1 == 0 goto label05;

        goto label06;

     label05:
        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void assignLogId(android.app.admin.SecurityLog$SecurityEvent)>(r17);

        $r13 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

     label06:
        i17 = i17 + 1;

        i16 = i16 + 1;

     label07:
        goto label01;

     label08:
        $i18 = virtualinvoke r15.<java.util.ArrayList: int size()>();

        r18 = virtualinvoke r15.<java.util.ArrayList: java.util.List subList(int,int)>(i16, $i18);

        r19 = interfaceinvoke r18.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r8 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.app.admin.SecurityLog$SecurityEvent) $r8;

        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void assignLogId(android.app.admin.SecurityLog$SecurityEvent)>($r9);

        goto label09;

     label10:
        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r18);

        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void checkCriticalLevel()>();

        $r4 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        $i6 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i6 <= 10240 goto label11;

        r20 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        $r5 = new java.util.ArrayList;

        $i7 = virtualinvoke r20.<java.util.ArrayList: int size()>();

        $i8 = $i7 - 5120;

        $r6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        $i9 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke r20.<java.util.ArrayList: java.util.List subList(int,int)>($i8, $i9);

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs> = $r5;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mCriticalLevelLogged> = 0;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "Pending logs buffer full. Discarding old logs.");

     label11:
        return;
    }

    private void notifyDeviceOwnerIfNeeded(boolean) throws java.lang.InterruptedException
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        boolean z0, z1, $z2, z4, z5;
        int i0;
        java.util.concurrent.locks.Lock $r2, $r4, $r6, $r8;
        java.util.ArrayList $r3;
        com.android.server.devicepolicy.DevicePolicyManagerService $r5;
        long $l2, $l3, $l4, $l5, $l6;
        byte $b7;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lockInterruptibly()>();

     label01:
        z1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mPaused>;

     label02:
        if z1 == 0 goto label03;

        $r6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label03:
        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label04:
        if i0 >= 1024 goto label05;

        z4 = 0;

        if z0 == 0 goto label08;

        z4 = 0;

        if i0 <= 0 goto label08;

     label05:
        z4 = 0;

     label06:
        $z2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve>;

        if $z2 != 0 goto label08;

     label07:
        z4 = 1;

     label08:
        z5 = z4;

        if i0 <= 0 goto label11;

        z5 = z4;

     label09:
        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mNextAllowedRetrievalTimeMillis>;

        $b7 = $l5 cmp $l6;

        if $b7 < 0 goto label11;

     label10:
        z5 = 1;

     label11:
        if z5 == 0 goto label13;

     label12:
        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 1;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = <com.android.server.devicepolicy.SecurityLogMonitor: long BROADCAST_RETRY_INTERVAL_MS>;

        $l4 = $l2 + $l3;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mNextAllowedRetrievalTimeMillis> = $l4;

     label13:
        $r4 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        if z5 == 0 goto label14;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "notify DO");

        $r5 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: com.android.server.devicepolicy.DevicePolicyManagerService mService>;

        virtualinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendDeviceOwnerCommand(java.lang.String,android.os.Bundle)>("android.app.action.SECURITY_LOGS_AVAILABLE", null);

     label14:
        return;

     label15:
        $r7 := @caughtexception;

        $r8 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    private void saveLastEvents(java.util.ArrayList)
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        java.util.ArrayList r1, $r2, $r5;
        boolean $z0;
        int $i0, $i1, $i3, $i4, $i5, i11;
        java.lang.Object $r3, $r7;
        android.app.admin.SecurityLog$SecurityEvent $r4, $r8;
        long $l2, $l6, $l7, $l8, $l9;
        java.util.List $r6;
        byte $b10;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mLastEvents>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (android.app.admin.SecurityLog$SecurityEvent) $r3;

        $l2 = virtualinvoke $r4.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos> = $l2;

        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i11 = $i3 - 2;

     label2:
        if i11 < 0 goto label3;

        $l6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos>;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        $r8 = (android.app.admin.SecurityLog$SecurityEvent) $r7;

        $l7 = virtualinvoke $r8.<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>();

        $l9 = $l6 - $l7;

        $l8 = <com.android.server.devicepolicy.SecurityLogMonitor: long OVERLAP_NS>;

        $b10 = $l9 cmp $l8;

        if $b10 >= 0 goto label3;

        i11 = i11 + -1;

        goto label2;

     label3:
        $r5 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mLastEvents>;

        $i4 = i11 + 1;

        $i5 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.util.List subList(int,int)>($i4, $i5);

        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        return;
    }

    void discardLogs()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        java.util.concurrent.locks.Lock $r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        $r1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs> = $r2;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mCriticalLevelLogged> = 0;

        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "Discarded all logs.");

        return;
    }

    public long forceLogs()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        java.util.concurrent.Semaphore r1, $r3, $r4;
        long l0, $l1, $l2, $l3, $l6, l7, l8;
        byte $b4;
        int $i5;
        java.util.concurrent.TimeUnit $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        l7 = staticinvoke <java.lang.System: long nanoTime()>();

        r1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.Semaphore mForceSemaphore>;

        entermonitor r1;

     label01:
        $l2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastForceNanos>;

        $l1 = <com.android.server.devicepolicy.SecurityLogMonitor: long FORCE_FETCH_THROTTLE_NS>;

        $l3 = $l2 + $l1;

        l0 = $l3 - l7;

     label02:
        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label05;

     label03:
        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l8 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        exitmonitor r1;

     label04:
        $l6 = l8 + 1L;

        return $l6;

     label05:
        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastForceNanos> = l7;

        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.Semaphore mForceSemaphore>;

        $i5 = virtualinvoke $r3.<java.util.concurrent.Semaphore: int availablePermits()>();

        if $i5 != 0 goto label06;

        $r4 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.Semaphore mForceSemaphore>;

        virtualinvoke $r4.<java.util.concurrent.Semaphore: void release()>();

     label06:
        exitmonitor r1;

     label07:
        return 0L;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void pause()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        java.util.concurrent.locks.Lock $r1, $r2;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "Paused.");

        $r1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mPaused> = 1;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 0;

        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }

    void resume()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        boolean z0;
        java.util.concurrent.locks.Lock $r1, $r2, $r3, $r6;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        $r1 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        z0 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mPaused>;

     label02:
        if z0 != 0 goto label05;

     label03:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SecurityLogMonitor", "Attempted to resume, but logging is not paused.");

     label04:
        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label05:
        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mPaused> = 0;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 0;

     label06:
        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "Resumed.");

     label07:
        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void notifyDeviceOwnerIfNeeded(boolean)>(0);

     label08:
        goto label10;

     label09:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SecurityLogMonitor", "Thread interrupted.", $r4);

     label10:
        return;

     label11:
        $r5 := @caughtexception;

        $r6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.InterruptedException from label07 to label08 with label09;
    }

    java.util.List retrieveLogs()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        java.util.ArrayList r1, r7;
        java.util.concurrent.locks.Lock $r2, $r3, $r4, $r6;
        boolean $z0;
        long $l0, $l1, $l2;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve>;

        if $z0 == 0 goto label3;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 0;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = <com.android.server.devicepolicy.SecurityLogMonitor: long RATE_LIMIT_INTERVAL_MS>;

        $l2 = $l0 + $l1;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mNextAllowedRetrievalTimeMillis> = $l2;

        r7 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs>;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs> = r1;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mCriticalLevelLogged> = 0;

     label2:
        $r4 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return r7;

     label3:
        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return null;

     label4:
        $r5 := @caughtexception;

        $r6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void run()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        boolean z0, $z1;
        long l0, $l3, $l4;
        java.util.ArrayList $r1, $r3;
        java.lang.Thread $r2;
        byte $b1;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.Semaphore $r5;
        java.util.concurrent.locks.Lock $r6, $r7, $r9;
        java.lang.Throwable $r8, $r10, $r11;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        staticinvoke <android.os.Process: void setThreadPriority(int)>(10);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

     label01:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r2.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 != 0 goto label13;

     label02:
        $r5 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.Semaphore mForceSemaphore>;

        $l4 = <com.android.server.devicepolicy.SecurityLogMonitor: long POLLING_INTERVAL_MS>;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z0 = virtualinvoke $r5.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>($l4, $r4);

        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void getNextBatch(java.util.ArrayList)>($r1);

        $r6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lockInterruptibly()>();

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void mergeBatchLocked(java.util.ArrayList)>($r1);

     label04:
        $r7 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

     label05:
        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void saveLastEvents(java.util.ArrayList)>($r1);

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        specialinvoke r0.<com.android.server.devicepolicy.SecurityLogMonitor: void notifyDeviceOwnerIfNeeded(boolean)>(z0);

     label06:
        goto label12;

     label07:
        $r8 := @caughtexception;

     label08:
        $r9 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

     label09:
        throw $r8;

     label10:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("SecurityLogMonitor", "Thread interrupted, exiting.", $r10);

        goto label13;

     label11:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SecurityLogMonitor", "Failed to read security log", $r11);

     label12:
        goto label01;

     label13:
        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mLastEvents>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        l0 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos>;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label14;

        $l3 = l0 + 1L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mLastEventNanos> = $l3;

     label14:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "MonitorThread exit.");

        return;

        catch java.io.IOException from label02 to label03 with label11;
        catch java.lang.InterruptedException from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.lang.InterruptedException from label04 to label05 with label10;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.lang.InterruptedException from label05 to label06 with label10;
        catch java.io.IOException from label08 to label09 with label11;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.InterruptedException from label09 to label10 with label10;
    }

    void start(int)
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        java.lang.Object[] $r5;
        java.util.concurrent.locks.Lock $r6, $r8, $r10;
        java.lang.Thread $r7, r13;
        java.lang.Throwable $r9;
        java.util.ArrayList r12;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting security logging for user ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", $r4);

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: int mEnabledUser> = i0;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210011, $r5);

        $r6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r7 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.lang.Thread mMonitorThread>;

        if $r7 != null goto label2;

        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs> = r12;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mCriticalLevelLogged> = 0;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mId> = 0L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 0;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mNextAllowedRetrievalTimeMillis> = -1L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mPaused> = 0;

        r13 = new java.lang.Thread;

        specialinvoke r13.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.lang.Thread mMonitorThread> = r13;

        virtualinvoke r13.<java.lang.Thread: void start()>();

     label2:
        $r8 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label3:
        $r9 := @caughtexception;

        $r10 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void stop()
    {
        com.android.server.devicepolicy.SecurityLogMonitor r0;
        java.lang.Object[] $r1;
        java.util.concurrent.locks.Lock $r2, $r9, $r12;
        java.lang.Thread $r3, $r4, $r6;
        java.util.concurrent.TimeUnit $r5;
        long $l2;
        java.lang.Throwable $r7, $r8;
        java.util.ArrayList r11;

        r0 := @this: com.android.server.devicepolicy.SecurityLogMonitor;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SecurityLogMonitor", "Stopping security logging.");

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <android.app.admin.SecurityLog: int writeEvent(int,java.lang.Object[])>(210012, $r1);

        $r2 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r3 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.lang.Thread mMonitorThread>;

        if $r3 == null goto label7;

        $r4 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.lang.Thread mMonitorThread>;

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label2:
        $r6 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.lang.Thread mMonitorThread>;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>(5L);

        virtualinvoke $r6.<java.lang.Thread: void join(long)>($l2);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

     label5:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SecurityLogMonitor", "Interrupted while waiting for thread to stop", $r7);

     label6:
        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.ArrayList mPendingLogs> = r11;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mId> = 0L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mAllowedToRetrieve> = 0;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: long mNextAllowedRetrievalTimeMillis> = -1L;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: boolean mPaused> = 0;

        r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.lang.Thread mMonitorThread> = null;

     label7:
        $r12 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label8:
        $r8 := @caughtexception;

        $r9 = r0.<com.android.server.devicepolicy.SecurityLogMonitor: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
}
