abstract class com.android.server.devicepolicy.UpdateInstaller extends java.lang.Object
{
    static final java.lang.String TAG;
    private android.app.admin.StartInstallingUpdateCallback mCallback;
    private com.android.server.devicepolicy.DevicePolicyConstants mConstants;
    protected android.content.Context mContext;
    protected java.io.File mCopiedUpdateFile;
    private com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector;
    private android.os.ParcelFileDescriptor mUpdateFileDescriptor;

    protected void <init>(android.content.Context, android.os.ParcelFileDescriptor, android.app.admin.StartInstallingUpdateCallback, com.android.server.devicepolicy.DevicePolicyManagerService$Injector, com.android.server.devicepolicy.DevicePolicyConstants)
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        android.content.Context r1;
        android.os.ParcelFileDescriptor r2;
        android.app.admin.StartInstallingUpdateCallback r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector r4;
        com.android.server.devicepolicy.DevicePolicyConstants r5;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.app.admin.StartInstallingUpdateCallback;

        r4 := @parameter3: com.android.server.devicepolicy.DevicePolicyManagerService$Injector;

        r5 := @parameter4: com.android.server.devicepolicy.DevicePolicyConstants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.devicepolicy.UpdateInstaller: android.content.Context mContext> = r1;

        r0.<com.android.server.devicepolicy.UpdateInstaller: android.app.admin.StartInstallingUpdateCallback mCallback> = r3;

        r0.<com.android.server.devicepolicy.UpdateInstaller: android.os.ParcelFileDescriptor mUpdateFileDescriptor> = r2;

        r0.<com.android.server.devicepolicy.UpdateInstaller: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector> = r4;

        r0.<com.android.server.devicepolicy.UpdateInstaller: com.android.server.devicepolicy.DevicePolicyConstants mConstants> = r5;

        return;
    }

    private float calculateBatteryPercentage(android.content.Intent)
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        android.content.Intent r1;
        int i0, i1, $i2;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        r1 := @parameter0: android.content.Intent;

        i0 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("level", -1);

        i1 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("scale", -1);

        $i2 = i0 * 100;

        $f1 = (float) $i2;

        $f0 = (float) i1;

        $f2 = $f1 / $f0;

        return $f2;
    }

    private void copyToFile(java.io.File) throws java.io.IOException
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        java.io.FileOutputStream $r1;
        android.os.ParcelFileDescriptor $r2;
        java.lang.Throwable $r3, $r4, $r5, $r6;
        java.io.File r7;
        android.os.ParcelFileDescriptor$AutoCloseInputStream r9;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        r7 := @parameter0: java.io.File;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r7);

     label01:
        r9 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        $r2 = r0.<com.android.server.devicepolicy.UpdateInstaller: android.os.ParcelFileDescriptor mUpdateFileDescriptor>;

        specialinvoke r9.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r2);

     label02:
        staticinvoke <android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r9, $r1);

     label03:
        virtualinvoke r9.<java.io.InputStream: void close()>();

     label04:
        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;

     label05:
        $r5 := @caughtexception;

     label06:
        virtualinvoke r9.<java.io.InputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r3 := @caughtexception;

     label09:
        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label10:
        throw $r5;

     label11:
        $r4 := @caughtexception;

     label12:
        virtualinvoke $r1.<java.io.OutputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r6 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label15:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
    }

    private java.io.File copyUpdateFileToDataOtaPackageDir()
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.io.File r3;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

     label1:
        r3 = specialinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: java.io.File createNewFileWithPermissions()>();

        specialinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void copyToFile(java.io.File)>(r3);

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("UpdateInstaller", "Failed to copy update file to OTA directory", $r1);

        $r2 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

        virtualinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(1, $r2);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.io.File createNewFileWithPermissions() throws java.io.IOException
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        java.lang.StringBuilder $r1;
        java.io.File $r2, $r5, r8;
        java.lang.String $r6;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/ota_package");

        $r5 = new java.io.File;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);

        r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("update", ".zip", $r5);

        staticinvoke <android.os.FileUtils: int setPermissions(java.io.File,int,int,int)>(r8, 484, -1, -1);

        return r8;
    }

    private boolean isBatteryLevelSufficient()
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        android.content.Intent r1;
        float f0, $f1, $f2;
        android.content.IntentFilter $r2;
        android.content.Context $r3;
        com.android.server.devicepolicy.DevicePolicyConstants $r4, $r5;
        int $i0, $i2, i4;
        byte $b1, $b3;
        boolean z0, z1;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        $r3 = r0.<com.android.server.devicepolicy.UpdateInstaller: android.content.Context mContext>;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        r1 = virtualinvoke $r3.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(null, $r2);

        f0 = specialinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: float calculateBatteryPercentage(android.content.Intent)>(r1);

        i4 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("plugged", -1);

        z0 = 1;

        if i4 <= 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == 0 goto label4;

        $r5 = r0.<com.android.server.devicepolicy.UpdateInstaller: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        $i2 = $r5.<com.android.server.devicepolicy.DevicePolicyConstants: int BATTERY_THRESHOLD_CHARGING>;

        $f2 = (float) $i2;

        $b3 = f0 cmpl $f2;

        if $b3 < 0 goto label3;

        goto label6;

     label3:
        z0 = 0;

        goto label6;

     label4:
        $r4 = r0.<com.android.server.devicepolicy.UpdateInstaller: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        $i0 = $r4.<com.android.server.devicepolicy.DevicePolicyConstants: int BATTERY_THRESHOLD_NOT_CHARGING>;

        $f1 = (float) $i0;

        $b1 = f0 cmpl $f1;

        if $b1 < 0 goto label5;

        goto label6;

     label5:
        z0 = 0;

     label6:
        return z0;
    }

    void cleanupUpdateFile()
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        java.io.File r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        r1 = r0.<com.android.server.devicepolicy.UpdateInstaller: java.io.File mCopiedUpdateFile>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.devicepolicy.UpdateInstaller: java.io.File mCopiedUpdateFile>;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    public abstract void installUpdateInThread();

    public void lambda$startInstallUpdate$0$UpdateInstaller()
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        java.io.File r1;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        r1 = specialinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: java.io.File copyUpdateFileToDataOtaPackageDir()>();

        r0.<com.android.server.devicepolicy.UpdateInstaller: java.io.File mCopiedUpdateFile> = r1;

        if r1 != null goto label1;

        virtualinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(1, "Error while copying file.");

        return;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void installUpdateInThread()>();

        return;
    }

    protected void notifyCallbackOnError(int, java.lang.String)
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        int i0;
        android.app.admin.DevicePolicyEventLogger $r1, $r2;
        android.app.admin.StartInstallingUpdateCallback $r3;
        android.os.RemoteException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void cleanupUpdateFile()>();

        $r1 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(74);

        $r2 = virtualinvoke $r1.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        virtualinvoke $r2.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label1:
        $r3 = r0.<com.android.server.devicepolicy.UpdateInstaller: android.app.admin.StartInstallingUpdateCallback mCallback>;

        interfaceinvoke $r3.<android.app.admin.StartInstallingUpdateCallback: void onStartInstallingUpdateError(int,java.lang.String)>(i0, r5);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("UpdateInstaller", "Error while calling callback", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected void notifyCallbackOnSuccess()
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$Injector $r1;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        virtualinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void cleanupUpdateFile()>();

        $r1 = r0.<com.android.server.devicepolicy.UpdateInstaller: com.android.server.devicepolicy.DevicePolicyManagerService$Injector mInjector>;

        virtualinvoke $r1.<com.android.server.devicepolicy.DevicePolicyManagerService$Injector: void powerManagerReboot(java.lang.String)>("deviceowner");

        return;
    }

    public void startInstallUpdate()
    {
        com.android.server.devicepolicy.UpdateInstaller r0;
        boolean $z0;
        java.lang.Thread $r1;
        com.android.server.devicepolicy._$$Lambda$UpdateInstaller$CxDofI1o0YOUvaV_mdNG4ke1uck $r2;
        java.lang.StringBuilder $r3;
        com.android.server.devicepolicy.DevicePolicyConstants $r5, $r8;
        int $i0, $i1;
        java.lang.String $r11;

        r0 := @this: com.android.server.devicepolicy.UpdateInstaller;

        r0.<com.android.server.devicepolicy.UpdateInstaller: java.io.File mCopiedUpdateFile> = null;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: boolean isBatteryLevelSufficient()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The battery level must be above ");

        $r5 = r0.<com.android.server.devicepolicy.UpdateInstaller: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        $i0 = $r5.<com.android.server.devicepolicy.DevicePolicyConstants: int BATTERY_THRESHOLD_NOT_CHARGING>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while not charging orabove ");

        $r8 = r0.<com.android.server.devicepolicy.UpdateInstaller: com.android.server.devicepolicy.DevicePolicyConstants mConstants>;

        $i1 = $r8.<com.android.server.devicepolicy.DevicePolicyConstants: int BATTERY_THRESHOLD_CHARGING>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while charging");

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.devicepolicy.UpdateInstaller: void notifyCallbackOnError(int,java.lang.String)>(5, $r11);

        return;

     label1:
        $r1 = new java.lang.Thread;

        $r2 = new com.android.server.devicepolicy._$$Lambda$UpdateInstaller$CxDofI1o0YOUvaV_mdNG4ke1uck;

        specialinvoke $r2.<com.android.server.devicepolicy._$$Lambda$UpdateInstaller$CxDofI1o0YOUvaV_mdNG4ke1uck: void <init>(com.android.server.devicepolicy.UpdateInstaller)>(r0);

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2);

        virtualinvoke $r1.<java.lang.Thread: void setPriority(int)>(10);

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.devicepolicy.UpdateInstaller: java.lang.String TAG> = "UpdateInstaller";

        return;
    }
}
