class com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy extends com.android.server.display.BrightnessMappingStrategy
{
    private float mAutoBrightnessAdjustment;
    private android.util.Spline mBacklightToNitsSpline;
    private android.util.Spline mBrightnessSpline;
    private android.hardware.display.BrightnessConfiguration mConfig;
    private final android.hardware.display.BrightnessConfiguration mDefaultConfig;
    private float mMaxGamma;
    private final android.util.Spline mNitsToBacklightSpline;
    private float mUserBrightness;
    private float mUserLux;

    public void <init>(android.hardware.display.BrightnessConfiguration, float[], int[], float)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        android.hardware.display.BrightnessConfiguration r1;
        float[] r2, r4;
        int[] r3;
        float f0, $f1;
        int i0, $i1, $i2, i3, $i4, $i5, i6;
        android.util.Spline $r8, $r9;
        boolean $z1, z2, z3;
        com.android.server.display.utils.Plog $r10;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        r1 := @parameter0: android.hardware.display.BrightnessConfiguration;

        r2 := @parameter1: float[];

        r3 := @parameter2: int[];

        f0 := @parameter3: float;

        specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy: void <init>()>();

        i3 = lengthof r2;

        if i3 == 0 goto label1;

        $i2 = lengthof r3;

        if $i2 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "Nits and backlight arrays must not be empty!");

        $i4 = lengthof r2;

        $i5 = lengthof r3;

        if $i4 != $i5 goto label3;

        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "Nits and backlight arrays must be the same length!");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>(r2, 0.0F, 3.4028235E38F, "nits");

        staticinvoke <com.android.internal.util.Preconditions: int[] checkArrayElementsInRange(int[],int,int,java.lang.String)>(r3, 0, 255, "backlight");

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mMaxGamma> = f0;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment> = 0.0F;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux> = -1.0F;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserBrightness> = -1.0F;

        i0 = lengthof r2;

        r4 = newarray (float)[i0];

        i6 = 0;

     label5:
        if i6 >= i0 goto label6;

        $i1 = r3[i6];

        $f1 = staticinvoke <com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float normalizeAbsoluteBrightness(int)>($i1);

        r4[i6] = $f1;

        i6 = i6 + 1;

        goto label5;

     label6:
        $r8 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>(r2, r4);

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mNitsToBacklightSpline> = $r8;

        $r9 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>(r4, r2);

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mBacklightToNitsSpline> = $r9;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mDefaultConfig> = r1;

        $z1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: boolean mLoggingEnabled>;

        if $z1 == 0 goto label7;

        $r10 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog access$100()>();

        virtualinvoke $r10.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog start(java.lang.String)>("physical mapping strategy");

     label7:
        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig> = r1;

        specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: void computeSpline()>();

        return;
    }

    private void computeSpline()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        android.hardware.display.BrightnessConfiguration $r1;
        java.lang.Object $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.util.Spline $r6, $r7, $r8;
        android.util.Pair r9, r13;
        float[] r10, r11, r12, r14, r15, r16;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        r9 = virtualinvoke $r1.<android.hardware.display.BrightnessConfiguration: android.util.Pair getCurve()>();

        $r2 = r9.<android.util.Pair: java.lang.Object first>;

        r10 = (float[]) $r2;

        $r3 = r9.<android.util.Pair: java.lang.Object second>;

        r11 = (float[]) $r3;

        $i0 = lengthof r11;

        r12 = newarray (float)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r12;

        if i4 >= $i1 goto label2;

        $r8 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mNitsToBacklightSpline>;

        $f6 = r11[i4];

        $f7 = virtualinvoke $r8.<android.util.Spline: float interpolate(float)>($f6);

        r12[i4] = $f7;

        i4 = i4 + 1;

        goto label1;

     label2:
        $f3 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux>;

        $f2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserBrightness>;

        $f1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment>;

        $f0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mMaxGamma>;

        r13 = virtualinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Pair getAdjustedCurve(float[],float[],float,float,float,float)>(r10, r12, $f3, $f2, $f1, $f0);

        $r4 = r13.<android.util.Pair: java.lang.Object first>;

        r14 = (float[]) $r4;

        $r5 = r13.<android.util.Pair: java.lang.Object second>;

        r15 = (float[]) $r5;

        $i2 = lengthof r15;

        r16 = newarray (float)[$i2];

        i5 = 0;

     label3:
        $i3 = lengthof r16;

        if i5 >= $i3 goto label4;

        $r7 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mBacklightToNitsSpline>;

        $f4 = r15[i5];

        $f5 = virtualinvoke $r7.<android.util.Spline: float interpolate(float)>($f4);

        r16[i5] = $f5;

        i5 = i5 + 1;

        goto label3;

     label4:
        $r6 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>(r14, r16);

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mBrightnessSpline> = $r6;

        return;
    }

    private float correctBrightness(float, java.lang.String, int)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        float f0, $f1, $f2;
        int i0;
        android.hardware.display.BrightnessConfiguration $r1, $r2;
        java.lang.String r3;
        android.hardware.display.BrightnessCorrection r4, r5;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        f0 := @parameter0: float;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r3 == null goto label1;

        $r2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        r4 = virtualinvoke $r2.<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessCorrection getCorrectionByPackageName(java.lang.String)>(r3);

        if r4 == null goto label1;

        $f2 = virtualinvoke r4.<android.hardware.display.BrightnessCorrection: float apply(float)>(f0);

        return $f2;

     label1:
        if i0 == -1 goto label2;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        r5 = virtualinvoke $r1.<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessCorrection getCorrectionByCategory(int)>(i0);

        if r5 == null goto label2;

        $f1 = virtualinvoke r5.<android.hardware.display.BrightnessCorrection: float apply(float)>(f0);

        return $f1;

     label2:
        return f0;
    }

    private float getUnadjustedBrightness(float)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        float f0, $f1, $f2;
        android.hardware.display.BrightnessConfiguration $r1;
        java.lang.Object $r2, $r3;
        float[] $r4, $r5;
        android.util.Spline $r6, r8;
        android.util.Pair r7;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        r7 = virtualinvoke $r1.<android.hardware.display.BrightnessConfiguration: android.util.Pair getCurve()>();

        $r2 = r7.<android.util.Pair: java.lang.Object first>;

        $r5 = (float[]) $r2;

        $r3 = r7.<android.util.Pair: java.lang.Object second>;

        $r4 = (float[]) $r3;

        r8 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>($r5, $r4);

        $r6 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mNitsToBacklightSpline>;

        $f1 = virtualinvoke r8.<android.util.Spline: float interpolate(float)>(f0);

        $f2 = virtualinvoke $r6.<android.util.Spline: float interpolate(float)>($f1);

        return $f2;
    }

    public void addUserDataPoint(float, float)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        float f0, f1, $f2, $f3, f4, f5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r7;
        java.lang.String $r6, $r13;
        com.android.server.display.utils.Plog $r14, $r15, $r16;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f4 = specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float getUnadjustedBrightness(float)>(f0);

        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addUserDataPoint: (");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r13);

        $r14 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog access$100()>();

        $r15 = virtualinvoke $r14.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog start(java.lang.String)>("add user data point");

        $r16 = virtualinvoke $r15.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logPoint(java.lang.String,float,float)>("user data point", f0, f1);

        virtualinvoke $r16.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logPoint(java.lang.String,float,float)>("current brightness", f0, f4);

     label1:
        $f2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mMaxGamma>;

        f5 = virtualinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float inferAutoBrightnessAdjustment(float,float,float)>($f2, f1, f4);

        $z1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: boolean mLoggingEnabled>;

        if $z1 == 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addUserDataPoint: ");

        $f3 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f5);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r6);

     label2:
        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment> = f5;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux> = f0;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserBrightness> = f1;

        specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: void computeSpline()>();

        return;
    }

    public void clearUserDataPoints()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        float $f0, $f1, $f2, $f3;
        byte $b0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        com.android.server.display.utils.Plog $r7, $r8;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $f0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux>;

        $b0 = $f0 cmpl -1.0F;

        if $b0 == 0 goto label2;

        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clearUserDataPoints: ");

        $f1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => 0");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r6);

        $r7 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog access$100()>();

        $r8 = virtualinvoke $r7.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog start(java.lang.String)>("clear user data points");

        $f3 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux>;

        $f2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserBrightness>;

        virtualinvoke $r8.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logPoint(java.lang.String,float,float)>("user data point", $f3, $f2);

     label1:
        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment> = 0.0F;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux> = -1.0F;

        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserBrightness> = -1.0F;

        specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: void computeSpline()>();

     label2:
        return;
    }

    public float convertToNits(int)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        int i0;
        android.util.Spline $r1;
        float $f0, $f1;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mBacklightToNitsSpline>;

        $f0 = staticinvoke <com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float normalizeAbsoluteBrightness(int)>(i0);

        $f1 = virtualinvoke $r1.<android.util.Spline: float interpolate(float)>($f0);

        return $f1;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r7, $r12, $r17, $r21, $r25, $r29, $r33;
        android.hardware.display.BrightnessConfiguration $r4, $r35;
        java.lang.String $r6, $r11, $r16, $r20, $r24, $r28, $r32, $r37;
        android.util.Spline $r9, $r14;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("PhysicalMappingStrategy");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mConfig=");

        $r4 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBrightnessSpline=");

        $r9 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mBrightnessSpline>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNitsToBacklightSpline=");

        $r14 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mNitsToBacklightSpline>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaxGamma=");

        $f0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mMaxGamma>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAutoBrightnessAdjustment=");

        $f1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserLux=");

        $f2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserBrightness=");

        $f3 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserBrightness>;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDefaultConfig=");

        $r35 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mDefaultConfig>;

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        return;
    }

    public float getAutoBrightnessAdjustment()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        float $f0;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $f0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment>;

        return $f0;
    }

    public float getBrightness(float, java.lang.String, int)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        java.lang.String r1;
        int i0;
        float f0, $f1, f2, f3, f4;
        android.util.Spline $r2, $r3;
        byte $b1;
        boolean $z0;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        f2 := @parameter0: float;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mBrightnessSpline>;

        f3 = virtualinvoke $r2.<android.util.Spline: float interpolate(float)>(f2);

        $r3 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.util.Spline mNitsToBacklightSpline>;

        f0 = virtualinvoke $r3.<android.util.Spline: float interpolate(float)>(f3);

        $f1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux>;

        $b1 = $f1 cmpl -1.0F;

        if $b1 != 0 goto label1;

        f4 = specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float correctBrightness(float,java.lang.String,int)>(f0, r1, i0);

        goto label2;

     label1:
        f4 = f0;

        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", "user point set, correction not applied");

        f4 = f0;

     label2:
        return f4;
    }

    public android.hardware.display.BrightnessConfiguration getBrightnessConfiguration()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        android.hardware.display.BrightnessConfiguration $r1;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        return $r1;
    }

    public android.hardware.display.BrightnessConfiguration getDefaultConfig()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        android.hardware.display.BrightnessConfiguration $r1;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mDefaultConfig>;

        return $r1;
    }

    public long getShortTermModelTimeout()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        android.hardware.display.BrightnessConfiguration $r1, $r2, $r3;
        long $l0, $l2, $l3;
        byte $b1;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        $l0 = virtualinvoke $r1.<android.hardware.display.BrightnessConfiguration: long getShortTermModelTimeoutMillis()>();

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $r3 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        $l3 = virtualinvoke $r3.<android.hardware.display.BrightnessConfiguration: long getShortTermModelTimeoutMillis()>();

        return $l3;

     label1:
        $r2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mDefaultConfig>;

        $l2 = virtualinvoke $r2.<android.hardware.display.BrightnessConfiguration: long getShortTermModelTimeoutMillis()>();

        return $l2;
    }

    public boolean hasUserDataPoints()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        float $f0;
        byte $b0;
        boolean z0;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $f0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mUserLux>;

        $b0 = $f0 cmpl -1.0F;

        if $b0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDefaultConfig()
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        android.hardware.display.BrightnessConfiguration $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $r2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mDefaultConfig>;

        $r1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        $z0 = virtualinvoke $r2.<android.hardware.display.BrightnessConfiguration: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean setAutoBrightnessAdjustment(float)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        float $f0, $f1, f2, f3;
        byte $b0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r7;
        com.android.server.display.utils.Plog $r8;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        f2 := @parameter0: float;

        f3 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f2, -1.0F, 1.0F);

        $f0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment>;

        $b0 = f3 cmpl $f0;

        if $b0 != 0 goto label1;

        return 0;

     label1:
        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAutoBrightnessAdjustment: ");

        $f1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f3);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r7);

        $r8 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog access$100()>();

        virtualinvoke $r8.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog start(java.lang.String)>("auto-brightness adjustment");

     label2:
        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: float mAutoBrightnessAdjustment> = f3;

        specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: void computeSpline()>();

        return 1;
    }

    public boolean setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)
    {
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy r0;
        android.hardware.display.BrightnessConfiguration r1, $r2, r5;
        boolean $z0, $z1;
        com.android.server.display.utils.Plog $r3;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        r1 := @parameter0: android.hardware.display.BrightnessConfiguration;

        r5 = r1;

        if r1 != null goto label1;

        r5 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mDefaultConfig>;

     label1:
        $r2 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig>;

        $z0 = virtualinvoke r5.<android.hardware.display.BrightnessConfiguration: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z1 = r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: boolean mLoggingEnabled>;

        if $z1 == 0 goto label3;

        $r3 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog access$100()>();

        virtualinvoke $r3.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog start(java.lang.String)>("brightness configuration");

     label3:
        r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: android.hardware.display.BrightnessConfiguration mConfig> = r5;

        specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: void computeSpline()>();

        return 1;
    }
}
