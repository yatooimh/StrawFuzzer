public abstract class com.android.server.display.BrightnessMappingStrategy extends java.lang.Object
{
    private static final float LUX_GRAD_SMOOTHING;
    private static final float MAX_GRAD;
    private static final float MIN_PERMISSABLE_INCREASE;
    private static final com.android.server.display.utils.Plog PLOG;
    private static final float SHORT_TERM_MODEL_THRESHOLD_RATIO;
    private static final java.lang.String TAG;
    protected boolean mLoggingEnabled;

    static void <clinit>()
    {
        com.android.server.display.utils.Plog $r0;

        <com.android.server.display.BrightnessMappingStrategy: java.lang.String TAG> = "BrightnessMappingStrategy";

        <com.android.server.display.BrightnessMappingStrategy: float SHORT_TERM_MODEL_THRESHOLD_RATIO> = 0.6F;

        <com.android.server.display.BrightnessMappingStrategy: float MIN_PERMISSABLE_INCREASE> = 0.004F;

        <com.android.server.display.BrightnessMappingStrategy: float MAX_GRAD> = 1.0F;

        <com.android.server.display.BrightnessMappingStrategy: float LUX_GRAD_SMOOTHING> = 0.25F;

        $r0 = staticinvoke <com.android.server.display.utils.Plog: com.android.server.display.utils.Plog createSystemPlog(java.lang.String)>("BrightnessMappingStrategy");

        <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.server.display.BrightnessMappingStrategy r0;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static com.android.server.display.utils.Plog access$100()
    {
        com.android.server.display.utils.Plog $r0;

        $r0 = <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG>;

        return $r0;
    }

    public static com.android.server.display.BrightnessMappingStrategy create(android.content.res.Resources)
    {
        float[] r0, r2, r3;
        int[] r1, r4, $r5;
        float f0;
        long l0;
        int i1, i2, $i3, $i4, $i6, $i7, $i8;
        android.content.res.TypedArray $r6, $r7;
        boolean $z0, $z1, $z2;
        com.android.server.display.BrightnessMappingStrategy$SimpleMappingStrategy $r8;
        android.content.res.Resources r12;
        android.hardware.display.BrightnessConfiguration$Builder $r13;
        com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy $r15;
        android.hardware.display.BrightnessConfiguration $r16;

        r12 := @parameter0: android.content.res.Resources;

        $r5 = virtualinvoke r12.<android.content.res.Resources: int[] getIntArray(int)>(17235988);

        r0 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: float[] getLuxLevels(int[])>($r5);

        r1 = virtualinvoke r12.<android.content.res.Resources: int[] getIntArray(int)>(17235987);

        $r6 = virtualinvoke r12.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17235985);

        r2 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: float[] getFloatArray(android.content.res.TypedArray)>($r6);

        f0 = virtualinvoke r12.<android.content.res.Resources: float getFraction(int,int,int)>(18022400, 1, 1);

        $r7 = virtualinvoke r12.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17236072);

        r3 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: float[] getFloatArray(android.content.res.TypedArray)>($r7);

        r4 = virtualinvoke r12.<android.content.res.Resources: int[] getIntArray(int)>(17236071);

        $i3 = virtualinvoke r12.<android.content.res.Resources: int getInteger(int)>(17694742);

        l0 = (long) $i3;

        $z0 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: boolean isValidMapping(float[],int[])>(r3, r4);

        if $z0 == 0 goto label3;

        $z2 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: boolean isValidMapping(float[],float[])>(r0, r2);

        if $z2 == 0 goto label3;

        i1 = virtualinvoke r12.<android.content.res.Resources: int getInteger(int)>(17694892);

        i2 = virtualinvoke r12.<android.content.res.Resources: int getInteger(int)>(17694891);

        $i4 = r4[0];

        if $i4 > i1 goto label1;

        $i6 = lengthof r4;

        $i7 = $i6 - 1;

        $i8 = r4[$i7];

        if $i8 >= i2 goto label2;

     label1:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", "Screen brightness mapping does not cover whole range of available backlight values, autobrightness functionality may be impaired.");

     label2:
        $r13 = new android.hardware.display.BrightnessConfiguration$Builder;

        specialinvoke $r13.<android.hardware.display.BrightnessConfiguration$Builder: void <init>(float[],float[])>(r0, r2);

        virtualinvoke $r13.<android.hardware.display.BrightnessConfiguration$Builder: android.hardware.display.BrightnessConfiguration$Builder setShortTermModelTimeoutMillis(long)>(l0);

        virtualinvoke $r13.<android.hardware.display.BrightnessConfiguration$Builder: android.hardware.display.BrightnessConfiguration$Builder setShortTermModelLowerLuxMultiplier(float)>(0.6F);

        virtualinvoke $r13.<android.hardware.display.BrightnessConfiguration$Builder: android.hardware.display.BrightnessConfiguration$Builder setShortTermModelUpperLuxMultiplier(float)>(0.6F);

        $r15 = new com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy;

        $r16 = virtualinvoke $r13.<android.hardware.display.BrightnessConfiguration$Builder: android.hardware.display.BrightnessConfiguration build()>();

        specialinvoke $r15.<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: void <init>(android.hardware.display.BrightnessConfiguration,float[],int[],float)>($r16, r3, r4, f0);

        return $r15;

     label3:
        $z1 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: boolean isValidMapping(float[],int[])>(r0, r1);

        if $z1 == 0 goto label4;

        $r8 = new com.android.server.display.BrightnessMappingStrategy$SimpleMappingStrategy;

        specialinvoke $r8.<com.android.server.display.BrightnessMappingStrategy$SimpleMappingStrategy: void <init>(float[],int[],float,long,com.android.server.display.BrightnessMappingStrategy$1)>(r0, r1, f0, l0, null);

        return $r8;

     label4:
        return null;
    }

    private int findInsertionPoint(float[], float)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float[] r1;
        float f0, $f1;
        int $i0, $i1, i3;
        byte $b2;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        r1 := @parameter0: float[];

        f0 := @parameter1: float;

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $f1 = r1[i3];

        $b2 = f0 cmpg $f1;

        if $b2 > 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i1 = lengthof r1;

        return $i1;
    }

    public static float[] getFloatArray(android.content.res.TypedArray)
    {
        android.content.res.TypedArray r0;
        int i0, i1;
        float[] r1;
        float $f0;

        r0 := @parameter0: android.content.res.TypedArray;

        i0 = virtualinvoke r0.<android.content.res.TypedArray: int length()>();

        r1 = newarray (float)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $f0 = virtualinvoke r0.<android.content.res.TypedArray: float getFloat(int,float)>(i1, -1.0F);

        r1[i1] = $f0;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<android.content.res.TypedArray: void recycle()>();

        return r1;
    }

    private static float[] getLuxLevels(int[])
    {
        int[] r0;
        float[] r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        float $f0;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $i1 = $i0 + 1;

        r1 = newarray (float)[$i1];

        i5 = 0;

     label1:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label2;

        $i4 = i5 + 1;

        $i3 = r0[i5];

        $f0 = (float) $i3;

        r1[$i4] = $f0;

        i5 = i5 + 1;

        goto label1;

     label2:
        return r1;
    }

    private android.util.Pair insertControlPoint(float[], float[], float, float)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float f0, f1, $f2;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        float[] r1, r2, r3, r4, r5, r6;
        byte $b2;
        android.util.Pair $r7;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        r2 := @parameter0: float[];

        r3 := @parameter1: float[];

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        i0 = specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy: int findInsertionPoint(float[],float)>(r2, f0);

        $i1 = lengthof r2;

        if i0 != $i1 goto label1;

        $i15 = lengthof r2;

        $i16 = $i15 + 1;

        r4 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r2, $i16);

        $i17 = lengthof r3;

        $i18 = $i17 + 1;

        r5 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r3, $i18);

        r4[i0] = f0;

        r5[i0] = f1;

        goto label3;

     label1:
        $f2 = r2[i0];

        $b2 = $f2 cmpl f0;

        if $b2 != 0 goto label2;

        $i13 = lengthof r2;

        r4 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r2, $i13);

        $i14 = lengthof r3;

        r5 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r3, $i14);

        r5[i0] = f1;

        goto label3;

     label2:
        $i3 = lengthof r2;

        $i4 = $i3 + 1;

        r1 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r2, $i4);

        $i7 = i0 + 1;

        $i5 = lengthof r2;

        $i6 = $i5 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r1, $i7, $i6);

        r1[i0] = f0;

        $i8 = lengthof r3;

        $i9 = $i8 + 1;

        r6 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r3, $i9);

        $i12 = i0 + 1;

        $i10 = lengthof r3;

        $i11 = $i10 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i0, r6, $i12, $i11);

        r6[i0] = f1;

        r5 = r6;

        r4 = r1;

     label3:
        specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy: void smoothCurve(float[],float[],int)>(r4, r5, i0);

        $r7 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r4, r5);

        return $r7;
    }

    private static boolean isValidMapping(float[], float[])
    {
        float[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, i9;
        byte $b5, $b6, $b7, $b8;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2, $f3, f4, f5;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 == null goto label11;

        if r1 == null goto label11;

        $i1 = lengthof r0;

        if $i1 == 0 goto label11;

        $i2 = lengthof r1;

        if $i2 != 0 goto label01;

        goto label11;

     label01:
        $i4 = lengthof r0;

        $i3 = lengthof r1;

        if $i4 == $i3 goto label02;

        return 0;

     label02:
        i0 = lengthof r0;

        f4 = r0[0];

        f5 = r1[0];

        $b5 = f4 cmpg 0.0F;

        if $b5 < 0 goto label10;

        $b6 = f5 cmpg 0.0F;

        if $b6 < 0 goto label10;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f4);

        if $z0 != 0 goto label10;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f5);

        if $z1 == 0 goto label03;

        goto label10;

     label03:
        i9 = 1;

     label04:
        if i9 >= i0 goto label09;

        $f0 = r0[i9];

        $b7 = f4 cmpl $f0;

        if $b7 >= 0 goto label08;

        $f1 = r1[i9];

        $b8 = f5 cmpl $f1;

        if $b8 <= 0 goto label05;

        goto label08;

     label05:
        $f2 = r0[i9];

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f2);

        if $z2 != 0 goto label07;

        $f3 = r1[i9];

        $z3 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f3);

        if $z3 == 0 goto label06;

        goto label07;

     label06:
        f4 = r0[i9];

        f5 = r1[i9];

        i9 = i9 + 1;

        goto label04;

     label07:
        return 0;

     label08:
        return 0;

     label09:
        return 1;

     label10:
        return 0;

     label11:
        return 0;
    }

    private static boolean isValidMapping(float[], int[])
    {
        float[] r0;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i7, i8, i9;
        byte $b5, $b6;
        boolean $z0, $z1;
        float $f0, $f1, f2;

        r0 := @parameter0: float[];

        r1 := @parameter1: int[];

        if r0 == null goto label10;

        if r1 == null goto label10;

        $i1 = lengthof r0;

        if $i1 == 0 goto label10;

        $i2 = lengthof r1;

        if $i2 != 0 goto label01;

        goto label10;

     label01:
        $i4 = lengthof r0;

        $i3 = lengthof r1;

        if $i4 == $i3 goto label02;

        return 0;

     label02:
        i0 = lengthof r0;

        f2 = r0[0];

        i8 = r1[0];

        $b5 = f2 cmpg 0.0F;

        if $b5 < 0 goto label09;

        if i8 < 0 goto label09;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f2);

        if $z0 == 0 goto label03;

        goto label09;

     label03:
        i9 = 1;

     label04:
        if i9 >= i0 goto label08;

        $f0 = r0[i9];

        $b6 = f2 cmpl $f0;

        if $b6 >= 0 goto label07;

        $i7 = r1[i9];

        if i8 <= $i7 goto label05;

        goto label07;

     label05:
        $f1 = r0[i9];

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z1 == 0 goto label06;

        return 0;

     label06:
        f2 = r0[i9];

        i8 = r1[i9];

        i9 = i9 + 1;

        goto label04;

     label07:
        return 0;

     label08:
        return 1;

     label09:
        return 0;

     label10:
        return 0;
    }

    protected static float normalizeAbsoluteBrightness(int)
    {
        int i0;
        float $f0;

        i0 := @parameter0: int;

        $f0 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>(i0, 1, 255, 0.0F, 1.0F);

        return $f0;
    }

    private float permissibleRatio(float, float)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = f0 + 0.25F;

        $f3 = staticinvoke <android.util.MathUtils: float log(float)>($f2);

        $f4 = 0.25F + f1;

        $f5 = staticinvoke <android.util.MathUtils: float log(float)>($f4);

        $f6 = $f3 - $f5;

        $f7 = $f6 * 1.0F;

        $f8 = staticinvoke <android.util.MathUtils: float exp(float)>($f7);

        return $f8;
    }

    private void smoothCurve(float[], float[], int)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float[] r1, r2;
        boolean $z0, $z1;
        com.android.server.display.utils.Plog $r3, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15;
        byte $b0, $b1;
        int i2, i3, $i4, i5;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        i2 := @parameter2: int;

        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label1;

        $r5 = <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG>;

        virtualinvoke $r5.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logCurve(java.lang.String,float[],float[])>("unsmoothed curve", r1, r2);

     label1:
        f6 = r1[i2];

        f7 = r2[i2];

        i3 = i2 + 1;

     label2:
        $i4 = lengthof r1;

        if i3 >= $i4 goto label4;

        f8 = r1[i3];

        f9 = r2[i3];

        $f2 = specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy: float permissibleRatio(float,float)>(f8, f6);

        $f4 = $f2 * f7;

        $f3 = 0.004F + f7;

        $f5 = staticinvoke <android.util.MathUtils: float max(float,float)>($f4, $f3);

        f10 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f9, f7, $f5);

        $b1 = f10 cmpl f9;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        f6 = f8;

        f7 = f10;

        r2[i3] = f10;

        i3 = i3 + 1;

        goto label2;

     label4:
        f11 = r1[i2];

        f12 = r2[i2];

        i5 = i2 + -1;

     label5:
        if i5 < 0 goto label7;

        f13 = r1[i5];

        f14 = r2[i5];

        $f0 = specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy: float permissibleRatio(float,float)>(f13, f11);

        $f1 = $f0 * f12;

        f15 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f14, $f1, f12);

        $b0 = f15 cmpl f14;

        if $b0 != 0 goto label6;

        goto label7;

     label6:
        f11 = f13;

        f12 = f15;

        r2[i5] = f15;

        i5 = i5 + -1;

        goto label5;

     label7:
        $z1 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z1 == 0 goto label8;

        $r3 = <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG>;

        virtualinvoke $r3.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logCurve(java.lang.String,float[],float[])>("smoothed curve", r1, r2);

     label8:
        return;
    }

    public abstract void addUserDataPoint(float, float);

    public abstract void clearUserDataPoints();

    public abstract float convertToNits(int);

    public abstract void dump(java.io.PrintWriter);

    protected android.util.Pair getAdjustedCurve(float[], float[], float, float, float, float)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float[] r1, $r8, $r9, r26, r28, r30, r31, r33, r34;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, f11;
        int $i0, $i3, i5;
        boolean $z0, $z1, $z2, $z3;
        byte $b1, $b2;
        java.lang.Object $r2, $r3, $r6, $r7;
        com.android.server.display.utils.Plog $r4, $r10, $r12, $r24;
        java.lang.StringBuilder $r14;
        java.lang.String $r23;
        android.util.Pair r32, r35, $r36;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        r26 := @parameter0: float[];

        r1 := @parameter1: float[];

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f10 := @parameter4: float;

        f2 := @parameter5: float;

        $i0 = lengthof r1;

        r28 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r1, $i0);

        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label1;

        $r24 = <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG>;

        virtualinvoke $r24.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logCurve(java.lang.String,float[],float[])>("unadjusted curve", r26, r28);

     label1:
        f3 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f10, -1.0F, 1.0F);

        $f4 = neg f3;

        f11 = staticinvoke <android.util.MathUtils: float pow(float,float)>(f2, $f4);

        $z1 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z1 == 0 goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAdjustedCurve: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");

        $f7 = neg f3;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f7);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $f8 = neg f3;

        $f9 = staticinvoke <android.util.MathUtils: float pow(float,float)>(f2, $f8);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f9);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f11);

        $r23 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r23);

     label2:
        $b1 = f11 cmpl 1.0F;

        if $b1 == 0 goto label4;

        i5 = 0;

     label3:
        $i3 = lengthof r28;

        if i5 >= $i3 goto label4;

        $f5 = r28[i5];

        $f6 = staticinvoke <android.util.MathUtils: float pow(float,float)>($f5, f11);

        r28[i5] = $f6;

        i5 = i5 + 1;

        goto label3;

     label4:
        $z2 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z2 == 0 goto label5;

        $r12 = <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG>;

        virtualinvoke $r12.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logCurve(java.lang.String,float[],float[])>("gamma adjusted curve", r26, r28);

     label5:
        r30 = r26;

        r31 = r28;

        $b2 = f0 cmpl -1.0F;

        if $b2 == 0 goto label6;

        r32 = specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy: android.util.Pair insertControlPoint(float[],float[],float,float)>(r26, r28, f0, f1);

        $r2 = r32.<android.util.Pair: java.lang.Object first>;

        r33 = (float[]) $r2;

        $r3 = r32.<android.util.Pair: java.lang.Object second>;

        r34 = (float[]) $r3;

        r30 = r33;

        r31 = r34;

        $z3 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z3 == 0 goto label6;

        $r4 = <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG>;

        virtualinvoke $r4.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logCurve(java.lang.String,float[],float[])>("gamma and user adjusted curve", r33, r34);

        r35 = specialinvoke r0.<com.android.server.display.BrightnessMappingStrategy: android.util.Pair insertControlPoint(float[],float[],float,float)>(r26, r1, f0, f1);

        $r10 = <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.utils.Plog PLOG>;

        $r6 = r35.<android.util.Pair: java.lang.Object first>;

        $r9 = (float[]) $r6;

        $r7 = r35.<android.util.Pair: java.lang.Object second>;

        $r8 = (float[]) $r7;

        virtualinvoke $r10.<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logCurve(java.lang.String,float[],float[])>("user adjusted curve", $r9, $r8);

        r31 = r34;

        r30 = r33;

     label6:
        $r36 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r30, r31);

        return $r36;
    }

    public abstract float getAutoBrightnessAdjustment();

    public float getBrightness(float)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float f0, $f1;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<com.android.server.display.BrightnessMappingStrategy: float getBrightness(float,java.lang.String,int)>(f0, null, -1);

        return $f1;
    }

    public abstract float getBrightness(float, java.lang.String, int);

    public abstract android.hardware.display.BrightnessConfiguration getBrightnessConfiguration();

    public abstract android.hardware.display.BrightnessConfiguration getDefaultConfig();

    public abstract long getShortTermModelTimeout();

    public abstract boolean hasUserDataPoints();

    protected float inferAutoBrightnessAdjustment(float, float, float)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14;
        byte $b0, $b3, $b4, $b5;
        java.lang.StringBuilder $r1, $r11;
        java.lang.String $r10, $r20;
        boolean $z0;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f12 = #NaNF;

        $b0 = f2 cmpg 0.1F;

        if $b0 <= 0 goto label4;

        $b3 = f2 cmpl 0.9F;

        if $b3 < 0 goto label1;

        goto label4;

     label1:
        $b4 = f1 cmpl 0.0F;

        if $b4 != 0 goto label2;

        f13 = -1.0F;

        goto label5;

     label2:
        $b5 = f1 cmpl 1.0F;

        if $b5 != 0 goto label3;

        f13 = 1.0F;

        goto label5;

     label3:
        $f7 = staticinvoke <android.util.MathUtils: float log(float)>(f1);

        $f8 = staticinvoke <android.util.MathUtils: float log(float)>(f2);

        f12 = $f7 / $f8;

        $f9 = staticinvoke <android.util.MathUtils: float log(float)>(f12);

        $f10 = neg $f9;

        $f11 = staticinvoke <android.util.MathUtils: float log(float)>(f0);

        f13 = $f10 / $f11;

        goto label5;

     label4:
        f13 = f1 - f2;

     label5:
        f14 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f13, -1.0F, 1.0F);

        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inferAutoBrightnessAdjustment: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");

        $f3 = neg f14;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $f4 = neg f14;

        $f5 = staticinvoke <android.util.MathUtils: float pow(float,float)>(f0, $f4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f12);

        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inferAutoBrightnessAdjustment: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $f6 = staticinvoke <android.util.MathUtils: float pow(float,float)>(f2, f12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f6);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r20 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r20);

     label6:
        return f14;
    }

    public abstract boolean isDefaultConfig();

    public abstract boolean setAutoBrightnessAdjustment(float);

    public abstract boolean setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration);

    public boolean setLoggingEnabled(boolean)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z1 != z0 goto label1;

        return 0;

     label1:
        r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled> = z0;

        return 1;
    }

    public boolean shouldResetShortTermModel(float, float)
    {
        com.android.server.display.BrightnessMappingStrategy r0;
        float f0, $f2, $f3, f4, f5, f6, f7, $f8, f9, $f10, f11;
        java.lang.StringBuilder $r1, $r10;
        java.lang.String $r9, $r17;
        byte $b1, $b3;
        boolean $z0, $z1, $z2;
        android.hardware.display.BrightnessConfiguration r18;

        r0 := @this: com.android.server.display.BrightnessMappingStrategy;

        f0 := @parameter0: float;

        f4 := @parameter1: float;

        r18 = virtualinvoke r0.<com.android.server.display.BrightnessMappingStrategy: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration()>();

        f5 = 0.6F;

        f6 = 0.6F;

        f7 = 0.6F;

        if r18 == null goto label2;

        $f2 = virtualinvoke r18.<android.hardware.display.BrightnessConfiguration: float getShortTermModelLowerLuxMultiplier()>();

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f2);

        if $z1 != 0 goto label1;

        f5 = virtualinvoke r18.<android.hardware.display.BrightnessConfiguration: float getShortTermModelLowerLuxMultiplier()>();

     label1:
        f6 = f5;

        f7 = 0.6F;

        $f3 = virtualinvoke r18.<android.hardware.display.BrightnessConfiguration: float getShortTermModelUpperLuxMultiplier()>();

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f3);

        if $z2 != 0 goto label2;

        f7 = virtualinvoke r18.<android.hardware.display.BrightnessConfiguration: float getShortTermModelUpperLuxMultiplier()>();

        f6 = f5;

     label2:
        $f8 = f4 * f6;

        f9 = f4 - $f8;

        $f10 = f4 * f7;

        f11 = $f10 + f4;

        $b3 = f9 cmpg f0;

        if $b3 >= 0 goto label4;

        $b1 = f0 cmpg f11;

        if $b1 > 0 goto label4;

        $z0 = r0.<com.android.server.display.BrightnessMappingStrategy: boolean mLoggingEnabled>;

        if $z0 == 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ShortTermModel: re-validate user data, ambient lux is ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f9);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f11);

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r17);

     label3:
        return 0;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ShortTermModel: reset data, ambient lux is ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f9);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f11);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BrightnessMappingStrategy", $r9);

        return 1;
    }
}
