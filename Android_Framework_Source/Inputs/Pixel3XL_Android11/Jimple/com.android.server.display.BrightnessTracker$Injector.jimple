class com.android.server.display.BrightnessTracker$Injector extends java.lang.Object
{

    void <init>()
    {
        com.android.server.display.BrightnessTracker$Injector r0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void cancelIdleJob(android.content.Context)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        staticinvoke <com.android.server.display.BrightnessIdleJob: void cancelJob(android.content.Context)>(r1);

        return;
    }

    public long currentTimeMillis()
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        long $l0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    public long elapsedRealtimeNanos()
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        long $l0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        return $l0;
    }

    public boolean enableColorSampling(boolean, int)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        boolean z0, $z1;
        int i0;
        java.lang.Object $r1;
        android.hardware.display.DisplayManagerInternal $r2;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r2 = (android.hardware.display.DisplayManagerInternal) $r1;

        $z1 = virtualinvoke $r2.<android.hardware.display.DisplayManagerInternal: boolean setDisplayedContentSamplingEnabled(int,boolean,int,int)>(0, z0, 4, i0);

        return $z1;
    }

    public android.os.Handler getBackgroundHandler()
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        $r1 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        return $r1;
    }

    public android.util.AtomicFile getFile(java.lang.String)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        java.lang.String r1;
        android.util.AtomicFile $r2;
        java.io.File $r3, $r4;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.util.AtomicFile;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataSystemDeDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r1);

        specialinvoke $r2.<android.util.AtomicFile: void <init>(java.io.File)>($r3);

        return $r2;
    }

    public android.app.ActivityManager$StackInfo getFocusedStack() throws android.os.RemoteException
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.app.IActivityTaskManager $r1;
        android.app.ActivityManager$StackInfo $r2;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        $r2 = interfaceinvoke $r1.<android.app.IActivityTaskManager: android.app.ActivityManager$StackInfo getFocusedStackInfo()>();

        return $r2;
    }

    public float getFrameRate(android.content.Context)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.hardware.display.DisplayManager $r3;
        android.view.Display $r4;
        float $f0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        $r3 = (android.hardware.display.DisplayManager) $r2;

        $r4 = virtualinvoke $r3.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

        $f0 = virtualinvoke $r4.<android.view.Display: float getRefreshRate()>();

        return $f0;
    }

    public int getNightDisplayColorTemperature(android.content.Context)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.hardware.display.ColorDisplayManager $r3;
        int $i0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/ColorDisplayManager;");

        $r3 = (android.hardware.display.ColorDisplayManager) $r2;

        $i0 = virtualinvoke $r3.<android.hardware.display.ColorDisplayManager: int getNightDisplayColorTemperature()>();

        return $i0;
    }

    public int[] getProfileIds(android.os.UserManager, int)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.os.UserManager r1;
        int i0;
        int[] $r2, $r3;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.os.UserManager;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.os.UserManager: int[] getProfileIds(int,boolean)>(i0, 0);

        return $r3;

     label1:
        $r2 = newarray (int)[1];

        $r2[0] = i0;

        return $r2;
    }

    public android.hardware.display.DisplayedContentSamplingAttributes getSamplingAttributes()
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        java.lang.Object $r1;
        android.hardware.display.DisplayManagerInternal $r2;
        android.hardware.display.DisplayedContentSamplingAttributes $r3;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r2 = (android.hardware.display.DisplayManagerInternal) $r1;

        $r3 = virtualinvoke $r2.<android.hardware.display.DisplayManagerInternal: android.hardware.display.DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(int)>(0);

        return $r3;
    }

    public int getSecureIntForUser(android.content.ContentResolver, java.lang.String, int, int)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.ContentResolver r1;
        java.lang.String r2;
        int i0, i1, $i2;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, r2, i0, i1);

        return $i2;
    }

    public int getUserId(android.os.UserManager, int)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.os.UserManager r1;
        int i0, $i1;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.os.UserManager;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<android.os.UserManager: int getUserHandle(int)>(i0);

        return $i1;
    }

    public int getUserSerialNumber(android.os.UserManager, int)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.os.UserManager r1;
        int i0, $i1;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.os.UserManager;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<android.os.UserManager: int getUserSerialNumber(int)>(i0);

        return $i1;
    }

    public boolean isBrightnessModeAutomatic(android.content.ContentResolver)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.ContentResolver r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.ContentResolver;

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_brightness_mode", 0, -2);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isInteractive(android.content.Context)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.os.PowerManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r3 = (android.os.PowerManager) $r2;

        $z0 = virtualinvoke $r3.<android.os.PowerManager: boolean isInteractive()>();

        return $z0;
    }

    public boolean isNightDisplayActivated(android.content.Context)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.hardware.display.ColorDisplayManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/ColorDisplayManager;");

        $r3 = (android.hardware.display.ColorDisplayManager) $r2;

        $z0 = virtualinvoke $r3.<android.hardware.display.ColorDisplayManager: boolean isNightDisplayActivated()>();

        return $z0;
    }

    public void registerBrightnessModeObserver(android.content.ContentResolver, android.database.ContentObserver)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.ContentResolver r1;
        android.database.ContentObserver r2;
        android.net.Uri $r3;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.database.ContentObserver;

        $r3 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness_mode");

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 0, r2, -1);

        return;
    }

    public void registerDisplayListener(android.content.Context, android.hardware.display.DisplayManager$DisplayListener, android.os.Handler)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        android.hardware.display.DisplayManager$DisplayListener r2;
        android.os.Handler r3;
        java.lang.Object $r4;
        android.hardware.display.DisplayManager $r5;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.display.DisplayManager$DisplayListener;

        r3 := @parameter2: android.os.Handler;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        $r5 = (android.hardware.display.DisplayManager) $r4;

        virtualinvoke $r5.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>(r2, r3);

        return;
    }

    public void registerReceiver(android.content.Context, android.content.BroadcastReceiver, android.content.IntentFilter)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        android.content.BroadcastReceiver r2;
        android.content.IntentFilter r3;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.BroadcastReceiver;

        r3 := @parameter2: android.content.IntentFilter;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r2, r3);

        return;
    }

    public void registerSensorListener(android.content.Context, android.hardware.SensorEventListener, android.os.Handler)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.hardware.SensorEventListener r1;
        android.os.Handler r2;
        java.lang.Object $r3;
        android.hardware.Sensor $r4;
        android.content.Context r5;
        android.hardware.SensorManager r6;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r5 := @parameter0: android.content.Context;

        r1 := @parameter1: android.hardware.SensorEventListener;

        r2 := @parameter2: android.os.Handler;

        $r3 = virtualinvoke r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/SensorManager;");

        r6 = (android.hardware.SensorManager) $r3;

        $r4 = virtualinvoke r6.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(5);

        virtualinvoke r6.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>(r1, $r4, 3, r2);

        return;
    }

    public android.hardware.display.DisplayedContentSample sampleColor(int)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        int i0;
        java.lang.Object $r1;
        long $l1;
        android.hardware.display.DisplayManagerInternal $r2;
        android.hardware.display.DisplayedContentSample $r3;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r2 = (android.hardware.display.DisplayManagerInternal) $r1;

        $l1 = (long) i0;

        $r3 = virtualinvoke $r2.<android.hardware.display.DisplayManagerInternal: android.hardware.display.DisplayedContentSample getDisplayedContentSample(int,long,long)>(0, $l1, 0L);

        return $r3;
    }

    public void scheduleIdleJob(android.content.Context)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        staticinvoke <com.android.server.display.BrightnessIdleJob: void scheduleJob(android.content.Context)>(r1);

        return;
    }

    public void unRegisterDisplayListener(android.content.Context, android.hardware.display.DisplayManager$DisplayListener)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        android.hardware.display.DisplayManager$DisplayListener r2;
        java.lang.Object $r3;
        android.hardware.display.DisplayManager $r4;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.display.DisplayManager$DisplayListener;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        $r4 = (android.hardware.display.DisplayManager) $r3;

        virtualinvoke $r4.<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>(r2);

        return;
    }

    public void unregisterBrightnessModeObserver(android.content.Context, android.database.ContentObserver)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        android.database.ContentObserver r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.database.ContentObserver;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r3.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>(r2);

        return;
    }

    public void unregisterReceiver(android.content.Context, android.content.BroadcastReceiver)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        android.content.BroadcastReceiver r2;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.BroadcastReceiver;

        virtualinvoke r1.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>(r2);

        return;
    }

    public void unregisterSensorListener(android.content.Context, android.hardware.SensorEventListener)
    {
        com.android.server.display.BrightnessTracker$Injector r0;
        android.content.Context r1;
        android.hardware.SensorEventListener r2;
        java.lang.Object $r3;
        android.hardware.SensorManager $r4;

        r0 := @this: com.android.server.display.BrightnessTracker$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.SensorEventListener;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/SensorManager;");

        $r4 = (android.hardware.SensorManager) $r3;

        virtualinvoke $r4.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>(r2);

        return;
    }
}
